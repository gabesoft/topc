package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class PalindromistTest {
  Palindromist palindromist = new Palindromist();

  @Test
  public void case1() {
    String text = "AMANAPLANAC";
    String[] words = { "A", "CANAL", "MAN", "PANAMA", "PLAN" };
    assertEquals("A MAN A PLAN A CANAL PANAMA", palindromist.palindrome(text, words));
  }

  @Test
  public void case2() {
    String text = "AAAAA";
    String[] words = { "AA", "A", "AAA" };
    assertEquals("A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case3() {
    String text = "CBA";
    String[] words = { "CBABC", "CBAABC" };
    assertEquals("CBAABC", palindromist.palindrome(text, words));
  }

  @Test
  public void case4() {
    String text = "RACEFAST";
    String[] words = { "AR", "CAR", "FAST", "RACE", "SAFE", "CEFA", "ACE", "STTS", "AFEC" };
    assertEquals("RACE FAST SAFE CAR", palindromist.palindrome(text, words));
  }

  @Test
  public void case5() {
    String text = "AABAABA";
    String[] words = { "AA", "AAB", "BAA", "BAB" };
    assertEquals("AA BAA BAA BAA BAA", palindromist.palindrome(text, words));
  }

  @Test
  public void case6() {
    String text = "STRAWNOTOOSTUPIDAF";
    String[] words = { "WARTS", "I", "TOO", "A", "FAD", "STUPID", "STRAW", "PUT", "NO", "ON", "SOOT" };
    assertEquals("STRAW NO TOO STUPID A FAD I PUT SOOT ON WARTS", palindromist.palindrome(text, words));
  }

  @Test
  public void case7() {
    String text = "AAAAA";
    String[] words = { "AAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case8() {
    String text = "AMANAPLANACATAHAMAYAK";
    String[] words = { "A", "MAN", "PLAN", "CAT", "HAM", "HAT", "YAK", "YAM", "CANAL", "PANAMA" };
    assertEquals("A MAN A PLAN A CAT A HAM A YAK A YAM A HAT A CANAL PANAMA", palindromist.palindrome(text, words));
  }

  @Test
  public void case9() {
    String text = "DEGASAREWENOTDRAWNONWARDWEFRE";
    String[] words = { "DEGAS", "ARE", "WE", "NOT", "DRAWN", "ONWARD", "FREER", "FEW", "TO", "NEW", "ERAS", "AGED" };
    assertEquals("DEGAS ARE WE NOT DRAWN ONWARD WE FREER FEW DRAWN ONWARD TO NEW ERAS AGED", palindromist.palindrome(text, words));
  }

  @Test
  public void case10() {
    String text = "DEGASAREWENOTDRAWNONWARDWEFRE";
    String[] words = { "DEGA", "SARE", "WEN", "O", "TDRA", "WNONW", "A", "R", "FREER", "FEWD", "FEW", "RD", "TO", "NEW", "ERAS", "AGED" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case11() {
    String text = "ACDBCBDCCCCCA";
    String[] words = { "A", "A", "AAB", "AADAAADCBCDAD", "ABCAAACC", "ABCACADD", "ACAADDACACCBB", "ACADD", "ADDACBADCAA", "BACCDBBCBAB", "BBAAAA", "BBAACBD", "BCBCDCDCCAD", "BCDABBCC", "BDAA", "BDDDDADC", "C", "CAACDADBCB", "CABCA", "CBBBBBC", "CBD", "CCACBCADABAD", "CCBCACBCCDACC", "CCCCA", "CCCCCACAA", "CD", "CD", "CDA", "CDBCBDC", "CDCCDDCAACCCACB", "CDDBBBCDAAB", "D", "DA", "DAABAA", "DAB", "DABDDBAA", "DACADCDDDCDBBC", "DACC", "DBACCCAABDB", "DBCBB", "DCDCCADAD", "DDBBBABBCAD", "DDDCCD" };
    assertEquals("A CDBCBDC C C C C A A C C C C CDBCBDC A", palindromist.palindrome(text, words));
  }

  @Test
  public void case12() {
    String text = "AA";
    String[] words = { "AA", "AA", "AAEAECBCBCA", "ABDAC", "ABDBAB", "ABECEBDABD", "ADBCCDEABAAEADA", "ADCDDADEB", "AEAABBCB", "AEBBBC", "B", "B", "BAA", "BAABAEE", "BAABEAAADBDCB", "BBAEEEBBACBEB", "CBA", "CBBCAEEDDCDB", "CBCDCDCBCEECCEB", "CBDBDDAE", "CBDE", "CCDEACAECBC", "CDCEECEBEDBCBEB", "DACDDECEDADBA", "DADEECCAC", "DBEDBABCD", "DCBCAEBBD", "DDBCB", "DDC", "DDDABEEEDAACBD", "DDDEEABDEDDDAD", "DECACACDCEEAA", "EBBECEBAABBCBBE", "EDAACEE", "EEDEACAECEEBBC" };
    assertEquals("AA AA", palindromist.palindrome(text, words));
  }

  @Test
  public void case13() {
    String text = "BCACACBAAB";
    String[] words = { "A", "A", "A", "A", "AAAAAAABB", "AAABCCCABCABBB", "AACBBBACBCCCA", "AACCACAAAAAA", "AB", "ABAAB", "ABAABCBBC", "ABAACCAA", "ABAB", "ABAC", "ABBBBCAA", "ABBCACBABACCA", "ACA", "B", "BAAB", "BAABAAABABAAB", "BABABA", "BACBBAAC", "BACBBBACCABBA", "BBA", "BBAC", "BBACCCABAABCCC", "BBCBCACAB", "BCACAC", "BCBAABAACCB", "BCCABACBA", "CAACACCBCBC", "CABBCCACB", "CABCBCAACCCACB", "CACACABA", "CACBACCC", "CB", "CBB", "CBB", "CBBBCAABBC", "CCBACACBAAAA", "CCBACCAB", "CCBBBBCCAABA" };
    assertEquals("BCACAC B A A B A A BCACAC B", palindromist.palindrome(text, words));
  }

  @Test
  public void case14() {
    String text = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
    String[] words = { "ZZZZZZZ", "ZZZZZZZZZZZ" };
    assertEquals("ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZ ZZZZZZZZZZZ ZZZZZZZZZZZ", palindromist.palindrome(text, words));
  }

  @Test
  public void case15() {
    String text = "XYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZY";
    String[] words = { "XYXYXYX", "XYX", "XYXYX" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case16() {
    String text = "ZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZY";
    String[] words = { "ZY", "YZ", "ZYZYZYZYZYZYZ" };
    assertEquals("ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY ZY YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ YZ", palindromist.palindrome(text, words));
  }

  @Test
  public void case17() {
    String text = "LISABONETA";
    String[] words = { "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "L", "M", "N", "BASIL", "ATE", "LISA", "BONET", "SABO", "TEN", "NO" };
    assertEquals("LISA BONET ATE NO BASIL", palindromist.palindrome(text, words));
  }

  @Test
  public void case18() {
    String text = "A";
    String[] words = { "A", "AA" };
    assertEquals("A", palindromist.palindrome(text, words));
  }

  @Test
  public void case19() {
    String text = "TBGHKPUIMAGSWYATVFFCDUZYUMFXLVIRTDRUMLHKABRHBFIZGD";
    String[] words = { "LHKABRHBFIZGDGZIFBHRBAKHLM", "RHBFIZGDGZIFBHRBAK", "TBGHKPUIMAGSWYATVFF", "ZUDCF", "FFVTAYWSGAMI", "ND", "BGH", "CDUZ", "T", "DGZIFBHRBAKHLMURDTRIVLXFMUY", "TBGHKPUIMAGSW", "WY", "SGAMIUPKHGBT", "YATVFF", "ML", "TBGHKPUIMAGSWYA", "HGBT", "GSWYATV", "LG", "FVTAYWSGA", "NK", "URDTRIVLXFMUYZUDCFFVTAYWS", "AMIUPKHGBT", "RTDRUMLHKABRHBFIZGDGZIFBHRBAKHLMURDTRIVLXFMUYZUDC", "KPUIMA", "XFMUYZUDCF", "YU", "TVFF", "UPKHGBT", "XLVIRTDRUM", "LVIRTDRUMLHKABRHBFIZGDDGZIFBHRBAKHL", "MFXLVIRTDRUMLHKAB", "TBGHKPUIMAGS", "TVFFCDUZYUMFX", "G", "RQ", "A", "CDUZYUMF", "CD", "HLMURDTRIVLXFMUY", "FVTAYW", "FXLVI", "URDTRIVL", "M", "ZUDCFFVTAYWS", "GAMIUPK", "HKABRHBFIZGD" };
    assertEquals("TBGHKPUIMAGS WY A TVFF CDUZ YU M FXLVI RTDRUMLHKABRHBFIZGDGZIFBHRBAKHLMURDTRIVLXFMUYZUDC FFVTAYWSGAMI UPKHGBT", palindromist.palindrome(text, words));
  }

  @Test
  public void case20() {
    String text = "TXDSAHDPRGINHWHLTCAWHXHPBIYGCQFGDOOBIYQRVKCQVDAHIV";
    String[] words = { "SZ", "HASDXT", "WD", "DXT", "DHAS", "INHWHLT", "IBOODGFQCGYIBPHXHWACTL", "QCGYIBPHXHWACTLH", "PDHASDXT", "LM", "DAHIVVIHADV", "TXDSAHDP", "DHASDX", "HWHNIGRPD", "YIBOOD", "FGDOOBIYQRV", "GFQCGYIBPHXHWACTLHWHNIGRP", "QRVKCQVDAH", "IBPHXHWACTLHWHNIGR", "DSAHDPRGINHWHLTCAWHXH", "INHWHL", "RH", "TXDSAHDPRGINHWHLTCAWH", "GCQFGDOOBIYQRVKCQVDAHIVIHAD", "RGINHWHLTCAWHXHPBIYGCQFGDOOBIY", "TCAWHXHPBIYGCQFGDOOBIYQRVKCQV", "GFQ", "IVIH", "XH", "Y", "TX", "CAWHXHPBIY", "CGYIBPHXHWACTLHWHNIGRP", "OBIYQRVKCQVDAHIVIHADVQCKVRQYIBOOD", "TXDSAHDPRG", "GDO", "HADVQCKVRQY", "VQCK", "T", "VRQYIBOODGF", "VRQYIBOODGFQCG", "KCQVDAHIVI", "PBIYGCQ", "II", "ASDXT", "HDPRG", "PBIYGCQF" };
    assertEquals("TX DSAHDPRGINHWHLTCAWHXH PBIYGCQ FGDOOBIYQRV KCQVDAHIVI HADVQCKVRQY IBOODGFQCGYIBPHXHWACTL HWHNIGRPD HASDXT", palindromist.palindrome(text, words));
  }

  @Test
  public void case21() {
    String text = "OCRJOXZLTCNHHAONJSREYYTXQOWMUEBYBYSUZVGISKLORLSZXJ";
    String[] words = { "BYBYSUZVGISKLORLSZXJJXZSLROLK", "LRO", "RJOXZLTCNHHAONJSREYY", "JSRE", "LZXOJRCO", "TYYERSJNOAHHNCT", "SZXJJXZSLROLKSIGVZUSYBYBEUMWO", "MS", "TXQOWMU", "BEUMWOQXTYYERSJNOAHH", "EYY", "IG", "G", "ISK", "TXQ", "KLORL", "EBYBYSUZVG", "G", "LZXOJRCO", "OD", "XOJRCO", "VZUSYBYBEUMWOQX", "LKSIGVZUSYBY", "LORLSZXJXZSLROLKSI", "QO", "REYYTX", "OCR", "OCRJOXZLTCNHHAONL", "QXTYYERSJNOAHHNCTLZXOJRCO", "T", "FL", "VP", "ZXOJRCO", "ISKL", "VZUSYBYBEUMWOQXTYY", "BYSUZVGISKLORLSZXJJXZS", "JOXZLTC", "NCTL", "NHHAONJSREYYT", "VZU", "WMUEBY", "ERSJNOAHHNC", "S", "SYBYBEUMWOQXTYYERSJNOAHHNCTLZ", "PH", "SZXJJXZSLROLKSI", "ORL", "XQOWM", "OWMUE" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case22() {
    String text = "GLTPPFPEWUYWHJBRNZYTGAQNTBSYEHSJXSAGGOKSMIEKJACIBM";
    String[] words = { "GLTPPFPEWUY", "MBICAJKEIMSKOGGA", "SXJSEYSBTNQAGTYZNRBJHWYUWEPFPPTLG", "JHWYUWEPFPPTL", "XJSHEYSBTNQAGTYZNRBJHWYUWEPFPPTLG", "YEHS", "HT", "F", "SMIEKJ", "IEKJACIBMMBICAJ", "WHJBRNZYTGAQNTBSYEHSJXSAGGOKS", "VZ", "OGGASXJSHEYSBTNQAGTYZN", "XSAGGOKSMIEKJACIBM", "GG", "MBIC", "EIMSK", "GLTPPFPEWUYWHJBRNZYTGAQN", "K", "PPFP", "QNTBSYEHSJX", "GLT", "F", "MI", "MSK", "YEHSJ", "RY", "HWYUWEP", "SU", "JXSA", "SAGGOKSM", "ND", "JXSA", "GLTPPFPEWUYWHJBRNZYTGA", "GTYZNRB", "EP", "OGG", "EIMSKOGGASXJSHEYSBTNQA", "EKJACIBM", "PPTL", "PTLG", "RBJHWYUW", "GGOKS", "GTYZNRBJ", "A", "EWUYWHJBRNZ", "TBS", "K", "YTGAQNTBSYEHS" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case23() {
    String text = "FZLWNHRAKOCHMDVSHOKCSKOMQNXZCSKCZYSZTBMLYJJMPTEHGM";
    String[] words = { "M", "MDVSHOKCSKOMQ", "MPTEHGMMGHETPMJ", "MLYJJMPTEHGM", "OKCSKOMQNXZCSKC", "YLMBTZSYZCKSCZXNQMOKSC", "FZL", "LMBT", "MBTZSYZCKSCZXN", "J", "SCZXNQMOKSCKOHSVDMHCOKARHNWLZF", "TZSYZCKSCZXNQMOKSCKOHSVDMHCOKARHN", "NL", "ZYSZTBML", "KOCHMD", "PMJJYLMB", "KOHSVDMHCOK", "YL", "ER", "YJJMPTEHGM", "AA", "FZLWNHRA", "MGHETPMJJ", "QMOKSCKOHSVDMHCOKARHNW", "RK", "KSCKOHSVDMHCOKARHNWL", "YZ", "CK", "ARHNWLZF", "F", "FZLWNHRAKOCH", "FZLWNHRAKOCHMDVSH", "LZ", "MPTEHGMGHETPMJJY", "OKCSKOMQNXZCSKCZYSZTB", "WNHRAKOCHMDVSHOKCSKOMQNXZCSKCZYSZTBM", "NXZCSKCZYSZTBMLYJJ", "VSH", "XY", "GHE", "YLMBTZS", "ZSYZCKSCZXNQ", "FZLWNHRAKO", "ZF", "LYJJ", "CHMDVSHOKCSKOMQNX", "WL", "ZF" };
    assertEquals("FZL WNHRAKOCHMDVSHOKCSKOMQNXZCSKCZYSZTBM LYJJ MPTEHGMMGHETPMJ J YL MBTZSYZCKSCZXN QMOKSCKOHSVDMHCOKARHNW LZ F", palindromist.palindrome(text, words));
  }

  @Test
  public void case24() {
    String text = "BICBKFDPHEGGCJVCYIFQFISDXYCWDMJFNXYMOLSWAZIASDEQTJ";
    String[] words = { "BICBKFDPHEGGCJVCYIFQFISDXYCW", "JFNXYMOLSWAZIASD", "TQEDSAIZA", "AZIASDEQTJJ", "HEGGCJVCY", "IZAWSLOMYXNFJMDW", "JCGGEHPDFKBCIB", "EDSAIZAWSLOMYX", "WSLOMY", "DM", "VC", "FK", "DFKBCIB", "QE", "ASDEQTJJTQ", "EQTJTQEDSAIZAWSLOMYXNFJMDWC", "MOLSWAZI", "CVJCGGEHPD", "BICBKFDPHEGGC", "G", "BICBKFDPHEGG", "YXDSIFQFIY", "CJVCYIFQFISDXYCWDMJFNXYMOLSW", "MYXNFJ", "TW", "KBCIB", "SA", "BCIB", "GEHPDFK", "IFQFISDXYCWD", "NFJMDWCYXDSIF", "CYXDSIFQFIYCVJC", "XY", "CVJCGGEHP", "DMJFNXYMOLSWAZIASDEQTJTQED", "MDWCYXDSIFQFIYCVJCGGEHPDF", "NFJMD", "SIFQFIY", "QF", "IYCV", "FW", "DSAIZAWSLO", "WCYXD", "BCIB", "BICBKFDPHEGGCJVCYIFQFISDXYCWDMJFN", "EQTJJTQE", "YIFQFISDXYCWD" };
    assertEquals("BICBKFDPHEGGCJVCYIFQFISDXYCW DM JFNXYMOLSWAZIASD EQTJJTQE DSAIZAWSLO MYXNFJ MDWCYXDSIFQFIYCVJCGGEHPDF KBCIB", palindromist.palindrome(text, words));
  }

  @Test
  public void case25() {
    String text = "ZPXNFRBOHCTUMFTDUPROWYCBSBMTASSXHBKPAZJTJYMUGBWIPP";
    String[] words = { "GB", "PZ", "SSAT", "X", "XNFRBOHCTUM", "SBMTASSXHBKPAZJTJYM", "T", "BKPAZ", "JYMUGBWIPPPPIWBGUMYJTJZAPKBHX", "SATMBSBCYWORPUDTFMUTCHOBRFNX", "SBCY", "TASSXHBKPAZ", "APKBHX", "SATMBSB", "WORPUDTFMUTC", "XL", "ZPXNFRBOHC", "CYWORPUDTFMUTCHOB", "ZP", "IPPPPIWBGUMYJTJZAPKBHXS", "JTJYMUGBWIPPPIWBGUMYJTJ", "KPA", "HBKPAZJTJYMUGBWIPPPIW", "JTJYMU", "MFTDUPROWYCB", "WORPUDTFMUTCHOBRFNXPZ", "ZJ", "EW", "DUPROWYCBSBM", "H", "OL", "SG", "BMTASSX", "UGBWIPPPPIWBGUMYJTJZ", "ZPXNFRBOHCTUMFTDUPROWYCBSBMTASSXH", "BGU", "FTDUPROWYCBS", "MYJTJZAPKBHXS", "TUMFT", "BU", "ZAPKBHXS", "RFNXPZ", "TFMUTCHOBRFNXPZ", "W", "NFRBOHCTU", "ZP" };
    assertEquals("ZP XNFRBOHCTUM FTDUPROWYCBS BMTASSX H BKPAZ JTJYMU GB W IPPPPIWBGUMYJTJZAPKBHXS SATMBSB CYWORPUDTFMUTCHOB RFNXPZ", palindromist.palindrome(text, words));
  }

  @Test
  public void case26() {
    String text = "XWSZADZMIBFHXCQDQVDLNOLZOEWQXXAPBFWRMNZQSYPOUZNALU";
    String[] words = { "QY", "NALUULANZ", "NZQ", "X", "YO", "NMRWFBPAX", "PO", "PY", "QXXAPBFWRMNZQSY", "UZNALUULANZUOP", "XWSZADZMIBFHXCQDQVDLNOLZOEWQXX", "XXQW", "QWEOZLONLDVQDQCXHFBIMZDAZ", "SYPOUZNALULANZUOPYSQZNMRWFBPAXX", "LNOLZOEWQ", "M", "ZNALULANZUO", "APBFWRMNZQSYPOU", "LDVQDQCXHFBIMZDAZSW", "XQWEOZLONLDVQDQCXHFBIMZDAZSWX", "JS", "MRW", "SQZNMRWFBPAXXQWEOZ", "SWX", "UOPYSQZ", "BFHXCQDQVDLNOLZOEWQXXAPB", "VQDQ", "WZ", "XWSZADZMIBFHXCQDQVDLNOLZOEW", "YSQZN", "I", "SZADZMI", "SZADZMIBFHXCQDQVD", "W", "X", "XXQWEOZLON", "WRM", "B", "QR", "XXAPBFWRMNZQSYPOUZNALUULANZUOPYS", "DVQDQCXHFB", "FW", "NZQSYPOUZ", "QZNMRWFBPA", "MZDAZSWX", "F", "FBPA", "RM", "XWSZADZ" };
    assertEquals("X W SZADZMI BFHXCQDQVDLNOLZOEWQXXAPB F W RM NZQ SYPOUZNALULANZUOPYSQZNMRWFBPAXX QWEOZLONLDVQDQCXHFBIMZDAZ SWX", palindromist.palindrome(text, words));
  }

  @Test
  public void case27() {
    String text = "GAIAWYKOSDZDCNXBGEIFRWLJHCEGLFBXISGYRHWAKBCVICFOLT";
    String[] words = { "G", "GAIAWYKOSDZDCNXBGEIFRWLJ", "GAI", "KBCVICFOLTLOFCIVCBKAWHRYGSIXBFLGECHJLWRF", "KOS", "LY", "LJ", "GA", "GLFBXISGYRHWAKBCVICFOL", "IEGBXNC", "BCVICF", "GBXNCDZDSOKYW", "XBFLGECHJ", "IAWY", "AIAG", "HWAKB", "H", "DZDCNXBGE", "DZDSOKYWAIAG", "VCBKAWHRYGSIXB", "LWRFIE", "CVICFOLTT", "JLWRFIEGBXNCDZDSOKYW", "FBXISGY", "EIFRWLJHCEGLFBXISGYRHWAK", "SGYRHWAKBCVICFO", "AWHRYGSI", "DZDSOKYWAIAG", "E", "IFRWLJHCEGLFBXI", "AIAG", "QI", "IFRWLJHCEGL", "KOSDZDCNXBG", "YP", "AWY", "BFLGEC", "HCE", "GAIAWYKOSDZ", "OLTTLOFCIVCBKAWHRYGSIX", "AWYKOSDZDCNXBG", "DCNXBGEIFRW", "SB", "LTTLOFCI", "RHWA", "TTLOFCIVCBK", "FLGECHJLWRFIEGBXNCDZDSOKYWAIA", "XN" };
    assertEquals("GA IAWY KOS DZDCNXBGE IFRWLJHCEGL FBXISGY RHWA KBCVICFOLTLOFCIVCBKAWHRYGSIXBFLGECHJLWRF IEGBXNC DZDSOKYWAIAG", palindromist.palindrome(text, words));
  }

  @Test
  public void case28() {
    String text = "OEXBSTWRDETAHZDYWNMYVELSABMVYNBFOFQFVAUKBEPBVFWCKR";
    String[] words = { "OEXBSTWRDE", "UAVFQFO", "BNYVMBASL", "ELSABMVYNBFOFQFVAUKBEPBVFWCKRKCWFVBPEB", "WNMYVELS", "NBFOFQF", "VYMNWYDZHATEDRWT", "VYNBFOFQFVAUKBEPBVFWCKRRKCWFV", "DYWNMYVELS", "ABMVY", "QFOFBNYVM", "AVFQFOFBNYVMBASLEVYMNWYDZHATED", "BASLEVY", "PEBK", "TEDRWT", "VFWCKRRKCWFVBPEBKUA", "OEXB", "BASLE", "PI", "MNWYDZHATEDRWTSBXEO", "OEXBSTWRDETAHZ", "F", "KUAV", "VAUKBEPBVFWCKRKCWFVBPEBKUAVFQFO", "SZ", "EVYMNWYDZHA", "F", "RWTSBX", "LL", "SBXEO", "YWNMYVELSABMVYNBFOFQ", "BPEBKU", "ABM", "FBNYV", "MYV", "VF", "M", "DV", "STWRDETAHZDY", "LSABMVYNBFOFQFVAUKBEPB", "OEXBSTWRDE", "OEXBSTWRDETAHZDYWNMYV", "QFOFBNYVMBASLEVYMNW", "SBXEO", "TAHZD", "YDZHATED", "TAHZDYWN" };
    assertEquals("OEXB STWRDETAHZDY WNMYVELS ABMVY NBFOFQF VAUKBEPBVFWCKRKCWFVBPEBKUAVFQFO F BNYVMBASL EVYMNWYDZHA TEDRWT SBXEO", palindromist.palindrome(text, words));
  }

  @Test
  public void case29() {
    String text = "WINDOOHTNGNWMLJVMVRSAMLCTATLMVCNVSZMAURUSHCHIIOQKP";
    String[] words = { "WINDOOHTNGNWMLJVMVRSAML", "VSZMAURUSHCHIIOQKPKQO", "LMWNG", "TLMVCNVS", "WMLJV", "ZMAURUSHCHIIOQKPK", "OODN", "TATCLMASRVMVJL", "CTATLMVCNVSZMAURUSHCHI", "R", "SU", "QOIIHCH", "IOQKPKQOIIHCH", "VMLTATCL", "OH", "UAMZSVNCVML", "IO", "HI", "NIW", "NTHOOD", "WINDO", "OQKPKQOIIHC", "JJ", "WINDOOHTN", "LJVMVRSAMLCTATLMVCN", "N", "NGNTH", "IW", "YD", "HII", "XN", "VMVRSAMLCTA", "WMLJVMVRSAMLCTATLMVCNVSZMA", "TNGN", "YA", "GNWM", "HSUR", "IIHCHSUR", "UAMZSVNCVMLTATCLMASRVMVJLMW", "WINDOOHTNG", "UAMZSVNC", "JLMWN", "MWNGNTHOODNIW", "GH", "MVRSAMLCTATLMVCNVSZMAURUSHC", "QKPPKQOIIHCHSURUAMZSVNCVMLTATCLMASRVMV", "SURUAMZSVNCVMLTATCLMASRVMVJ" };
    assertEquals("WINDO OH TNGN WMLJV MVRSAMLCTATLMVCNVSZMAURUSHC HI IOQKPKQOIIHCH SU R UAMZSVNCVML TATCLMASRVMVJL MWNGNTHOODNIW", palindromist.palindrome(text, words));
  }

  @Test
  public void case30() {
    String text = "OAVNILFYHLVVRXJQUJITZITKHXEFPIZUYQNLRNDRWNZKODOKMI";
    String[] words = { "IZUYQNLRNDRWN", "P", "TIZTIJ", "ZITKHXEF", "HXEFPIZ", "TZITK", "VNILFYH", "OAVNILFYHLVVRXJQUJIT", "KODOKMIIMKODOKZN", "NZKODO", "OA", "TIJUQJXRVVLHYFLINVAO", "RU", "VNILFYHLVVRXJQUJIT", "LN", "UYQ", "ZKODOKMIIMKODOKZNWRDNRLNQYUZIPFEXH", "JW", "PF", "RVVLHYF", "LINVAO", "OAVNIL", "FYHLVVRXJQUJI", "SE", "NLRN", "FEXHKTIZTIJUQJX", "DRWN", "XRVVLHYFLINVAO", "QYU", "HKTIZTIJUQJXRVVLHYFLINVAO", "MKODOKZNWRDNR", "IP", "LVVRXJQUJ", "OAVNILFYHLVVRXJQUJITZITKHXEFPIZUYQNLRNDRWNZKODOKMI", "OA", "ZITKHXEFPIZUYQNLRNDRW", "EXHKTIZ", "IIMKODOKZNWRDN", "NVAO", "RLNQYUZIPFEX", "KTIZTIJUQJXRVVLHYFLI", "PF", "Z", "ZUYQNLRNDRWNZKODOKMIIMKODOKZNWRDNRLNQYUZIP", "KY", "WRDNRLNQYUZI" };
    assertEquals("OA VNILFYHLVVRXJQUJIT ZITKHXEF P IZUYQNLRNDRWN Z KODOKMIIMKODOKZN WRDNRLNQYUZI P FEXHKTIZTIJUQJX RVVLHYF LINVAO", palindromist.palindrome(text, words));
  }

  @Test
  public void case31() {
    String text = "AMRCFBEKVXRLMOBDRBKLZNHPRMMJAAFHAGWUTSCOQAPMSIOXVM";
    String[] words = { "FAAJMMRP", "PHNZLKBR", "PR", "RPHNZL", "TUWGAH", "XVKEBFCRMA", "AAJMM", "PMS", "YR", "MLR", "RCFBEK", "HNZLKB", "PA", "AMRCFBEKVXRLMOBD", "LMOBD", "VXRLMOBDRBKL", "GWUTSCOQAPMSIOXVMMVXOISMPAQOCSTUWGAHF", "GG", "SMPAQ", "MRCFBE", "RBK", "AM", "AMRCFBEKVXR", "DBOMLRXVKEBFCRMA", "KVXRLMOBDRBKLZNHPRMM", "XVKEBFCR", "JAAFHA", "IOXVMMV", "ZNHPRMMJAAFHAGWUTSCOQAP", "AE", "RBKLZNHPRMMJAAFHAGWUTSCOQAPMSIOXVMMVXOISM", "RA", "MA", "OCSTUWGAH", "PHNZLKBRDBO", "AMRCFBEKVXRLMOBDRBKLZNH", "OISMPAQOCSTUWGAHFAAJMMR", "RDBOMLR", "XOI", "MMJAAFHAGWUTSCOQA", "RO", "VX", "A", "FAAJMMR", "S", "KBRDBOMLRXVKE", "MSIOXVMMVXOISMPAQOCSTUWGAHFAAJMMR" };
    assertEquals("AM RCFBEK VXRLMOBDRBKL ZNHPRMMJAAFHAGWUTSCOQAP MSIOXVMMVXOISMPAQOCSTUWGAHFAAJMMR PHNZLKBR DBOMLRXVKEBFCRMA", palindromist.palindrome(text, words));
  }

  @Test
  public void case32() {
    String text = "LYNRBQCWIJOCHFTRNTMDZTVUAATNKRMUCWFCWWCMKMFOWNPKFR";
    String[] words = { "PNWOF", "TVUAAT", "MKMCW", "MTNRTFH", "WCFWCUMRKNTAAUVTZDMTNRTFHCOJIWCQ", "AATNKRMUC", "BRNYL", "CO", "JY", "MRKN", "NPK", "OCHFTRNTMDZTVUAATNKRMU", "TA", "TZDMTNRTFHCOJIW", "W", "NRBQCWIJOCHFTRNTMDZ", "CQBRNY", "FKPNWOFMKMCWWCFWCUMRKNTAAUVTZDM", "FTRNTMDZTVUAATNKRMU", "L", "LYNRBQCWIJOCHFTRNTMDZ", "WNPKFRFK", "FTRNTMDZTVU", "LYNRB", "LYNRBQCW", "GV", "PR", "L", "MTNRTFHCOJIWCQBRNY", "WNPKFRR", "CWWCFWCUMRKNTAAUV", "TNRTFHCOJIWC", "FRRFKPNWOFMKMCWWCFWCUMRKNTAAUVTZD", "WFCWWCMKM", "IJ", "LY", "UN", "LR", "CWFCWWCMKMFO", "JIWCQBRNYL", "FO", "OCH", "AUVTZD", "PKFRFKPNWOFMKM", "NKRMUCWFCWWCMKMFOWNPKFRRFKPNWOFMKMC", "TVUAATNKRMUCWFCWWCMKMFOWN", "WWCFWCU" };
    assertEquals("LY NRBQCWIJOCHFTRNTMDZ TVUAAT NKRMUCWFCWWCMKMFOWNPKFRRFKPNWOFMKMC W WCFWCUMRKNTAAUVTZDMTNRTFHCOJIWCQ BRNYL", palindromist.palindrome(text, words));
  }

  @Test
  public void case33() {
    String text = "EZXIYUBBCOPHHGHLYEKRQTLPRWZVPBESVSMNUVGKJTBHIVGVJH";
    String[] words = { "EZXIYUBBC", "QRKEYLHGHHP", "MSVSEBPVZWRP", "UNMSVS", "VGVJ", "ESVSMN", "ZA", "OCBBUYIXZE", "BTJKGV", "GHLYEKRQTLPRWZVPBESV", "JHJVGVIH", "PLTQRKEYLHGHHPO", "TD", "LT", "HHJVGVIHBTJKGVUN", "LA", "EZ", "GKJTBHIVGVJHJV", "IXZE", "HPOCBBUYIXZE", "RWZVPBESVSMNUVGKJTBHI", "BTJKGVUNMSVSEBPVZ", "GVIHBTJKGVUNMSVSEBPVZWR", "UV", "CBBUYIXZE", "U", "WR", "V", "GKJT", "EZXIYUBBCOPHHGHLYEKRQ", "LTQRKEYLHGHHP", "EZXIYUBBC", "SV", "EYLHGH", "PB", "EZXIYUBBCOPHH", "NUVGKJTBHIVGV", "TLPRWZVPBESVSM", "X", "BHIVGVJHJVGVIHBTJKGV", "EBPVZWRP", "SMNUVGKJTBHIVGVJHHJVGVIH", "OCBBUYIXZE", "TLP", "GHLYEKRQ", "OPHHGHLYEKRQTLPRWZVPB", "FO", "OPHHGHLYEKRQ" };
    assertEquals("EZXIYUBBC OPHHGHLYEKRQ TLP RWZVPBESVSMNUVGKJTBHI VGVJ HHJVGVIHBTJKGVUN MSVSEBPVZWRP LT QRKEYLHGHHP OCBBUYIXZE", palindromist.palindrome(text, words));
  }

  @Test
  public void case34() {
    String text = "FOZITAMKGXEOHHQCAUUODGJIDOIHJQTPKZYRDUYTVCIXNVHMPT";
    String[] words = { "ZITAMKGXEO", "YUDRYZKPTQJHIODIJGDOUUACQHHOEXGKMATIZOF", "KQ", "RI", "JIDOIHJQTPKZYRD", "F", "FOZIT", "JI", "OZITAMKGX", "OZITAMKGXEOHHQCAUUODGJIDO", "EOHHQCAUUOD", "F", "AMKG", "ZI", "EOHHQCAUUODGJ", "IHJQT", "IHJQTPKZYRDUYT", "KPTQJHIODIJGDOUUACQHHOEXGKM", "GI", "ATIZ", "WZ", "PKZYRDUYTVCIXNVHMPTTPMH", "TAMKGXEOHHQCAU", "VCIXNVHMPTPM", "KZYRDU", "O", "RDU", "CQ", "HI", "UODGJIDOIHJQTP", "DOIHJQTPKZY", "FO", "LP", "VTYUDRYZKPTQJHIODIJGDOUU", "YTVCIXNVHMPTPMHVNXIC", "A", "CQHHOEXGKMATIZOF", "F", "HHQCAUUODG", "VNXI", "X", "YTVCIXN", "UYTVCIXNVHMPTTPMHVNXICVTYUDRYZKPTQJH", "OF", "FO", "ODIJGDOUUA", "CVT", "G", "VHMPTPMHVNXICVTYUDRYZ" };
    assertEquals("F O ZI TAMKGXEOHHQCAU UODGJIDOIHJQTP KZYRDU YTVCIXN VHMPTPMHVNXICVTYUDRYZ KPTQJHIODIJGDOUUACQHHOEXGKM ATIZ O F", palindromist.palindrome(text, words));
  }

  @Test
  public void case35() {
    String text = "RAWXQQLWTIAFCYIPXLWGDMXNNDPMTIZDMPGAGYYRPPXYRAHZYX";
    String[] words = { "G", "TMPDNN", "ARYXP", "GYYRPPXYRAHZYXY", "RAWXQQLWTIAFCYIPXLWG", "IYCFA", "PA", "YZHARYXPPRYYGA", "JB", "FC", "PMD", "GPMD", "YXXYZ", "GWLXPIYCFAITWLQQXWAR", "PRYYGA", "Y", "Z", "HARYXPPRYYGAGPMDZITMPDN", "LQQXWAR", "PXLWGDMXNNDP", "RAWXQQLWTIAFCYIPXLWGDMXNNDP", "DMXNNDP", "MTIZDMPGA", "ZITM", "GYYRPP", "ITWLQQXWAR", "PPXYRAH", "AWXQQLWTIAFCYIPXLWGDMXNNDPMTIZ", "D", "GYYRPPXYRAHZYXXYZHARYXPPRYYGAGPM", "MTIZDMPGAG", "ITMPDNNXMDGW", "RM", "MTIZDMPGA", "YR", "LWGDMXNNDPMTIZDMPGA", "RAWXQQLWTIAFCYI", "PN", "ZH", "AGYYRPPXYRAHZYX", "PDNNXMDGWLXPIYCFAITWLQQXWAR", "PIYCFAITWLQQXWAR", "DZ", "NXMDGWLX", "LXP", "YZHARYXPPR", "R", "YYGAGPMDZI" };
    assertEquals("RAWXQQLWTIAFCYI PXLWGDMXNNDP MTIZDMPGA G Y Y R PPXYRAH Z YXXYZ HARYXPPRYYGAGPMDZITMPDN NXMDGWLX PIYCFAITWLQQXWAR", palindromist.palindrome(text, words));
  }

  @Test
  public void case36() {
    String text = "EKJFVGGSDDSJMIJMPFPXGSOCMSDNMUKVPDPMAABYCVKBZUBJTG";
    String[] words = { "FV", "YCVK", "G", "SOCMSD", "IJ", "VKBZ", "EI", "V", "KJFVGGSDDSJMIJMP", "SDDSJM", "GGS", "JMIJ", "NQ", "EKJ", "J", "TJBUZ", "EK", "MPFPXGSOCMSDNMUKV", "PDPMAAB", "F", "PDPMA", "YC", "E", "BZUBJ", "TG", "I", "WQ", "VKBZUBJTGG", "FPXGSOCMSD", "C", "EKJFVGGSDDSJM", "MP", "ABY", "VG", "FPXGSOCMSDNMUK", "CS" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case37() {
    String text = "FPIXOFQAHLNKSVEEPYRGBAEHWMRKEMDBPMHECTCHSESBZGKIXU";
    String[] words = { "VEEP", "EEP", "PYRGBAEHWMRK", "PIXOF", "OD", "XO", "MRK", "N", "PI", "R", "NKS", "NB", "M", "KC", "S", "PI", "F", "QAHL", "OL", "XOFQA", "YRGBAEHWMR", "QA", "YRG", "VE", "E", "H", "QAHLNKS", "ZK", "V", "FPIXO", "BAEHW", "F", "F", "K", "KSVEEPYRGBAEHW" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case38() {
    String text = "QTZJSEHAEKNRHIJBIJKMJNIVUSKHWUESKXKZWXURDJDVPGULKI";
    String[] words = { "EHAEKNRH", "DVP", "EAHESJZTQ", "XKZ", "GULK", "NKEAHESJZTQ", "IJBI", "I", "IJB", "QTZ", "EK", "X", "KZWX", "ULKIIKLUGP", "JSEHA", "QTZJ", "JDRU", "HKS", "S", "HN", "NIVUSKHWUESKX", "URDJDVP", "IKLUGPVDJDRUX", "WXURDJ", "WZK", "I", "SKHWUESK", "IJKMJ", "INJMKJIBJIHRNK", "EUWHKSUV", "JNIVU", "BJ", "H", "KS", "VD", "G", "IHR", "JKM", "NR", "SEUW", "UVINJMKJ", "X" };
    assertEquals("QTZ JSEHA EK NR H IJB I JKM JNIVU SKHWUESK X KZWX URDJDVP G ULKIIKLUGP VD JDRU X WZK X KS EUWHKSUV INJMKJIBJIHRNK EAHESJZTQ", palindromist.palindrome(text, words));
  }

  @Test
  public void case39() {
    String text = "EDAFMHSVVFSVXPYFJODPNKCHSYWLCXVURSYXPGEAEFYDEZMGBV";
    String[] words = { "L", "NK", "J", "JODP", "MZ", "RSYXPGEAEFYDEZMGB", "WLCXVU", "YFEAE", "VVBGMZEDYFEAEGPXYS", "CH", "YF", "G", "VVF", "EDAF", "HS", "RUVXC", "SVXP", "ZO", "SHMFA", "WYSHCKNPDOJFYPXVSFV", "M", "NKCHSYW", "SY", "SYXP", "FMHS", "GPX", "SVXPY", "VV", "FADE", "F", "JFYPXVSFVV", "DE", "ED", "CX", "EAEFYDEZMGB", "EDA", "VVBG", "WYSHC", "YSRUVXCL", "L", "M", "ODP", "VSH", "R", "F", "VU" };
    assertEquals("EDA F M HS VV F SVXP YF J ODP NK CH SY WLCXVU R SYXP G EAEFYDEZMGB VVBG MZ ED YFEAE GPX YSRUVXCL WYSHCKNPDOJFYPXVSFV VSH M FADE", palindromist.palindrome(text, words));
  }

  @Test
  public void case40() {
    String text = "GSCEHNDEZNHDXRHWMENLAYAAERFXWNKRHZJBYFXKQPFSJYMXHH";
    String[] words = { "G", "D", "ND", "EDNH", "SCEH", "YJSFP", "Z", "H", "J", "XFR", "YALNEMWHRXD", "YM", "XHHH", "ECSG", "N", "ND", "GSCEH", "K", "EZ", "JBYFXKQPF", "XRHWMENLAYAA", "HNZEDNHECSG", "MXHHHHXM", "ERFXWNKR", "ERFXWNKRH", "XMYJSFP", "XRHWMENL", "QKXFYB", "XFY", "EZ", "HD", "AYA", "NHD", "A", "J", "BJZHRKNW", "JY", "BYFXKQ", "EAA", "RKNW", "ZH", "HNZ", "HZJ", "OV", "PFS", "S", "XFREAAYALNEMWHRX" };
    assertEquals("G SCEH N D EZ N H D XRHWMENL AYA A ERFXWNKR H Z J BYFXKQ PFS J YM XHHH H XMYJSFP QKXFYB J Z H RKNW XFR EAA YALNEMWHRXD H N Z EDNH ECSG", palindromist.palindrome(text, words));
  }

  @Test
  public void case41() {
    String text = "OWSFDIOGJPBZCCNTCMSFEGZKXQNNKVKZNMTIDZUUHRRYXBELHF";
    String[] words = { "N", "WO", "NNKVKZN", "HL", "FI", "O", "S", "SMC", "GEFSMCT", "ITMNZ", "O", "FSW", "ID", "ID", "OWSFDI", "HRR", "VK", "ZBPJ", "N", "G", "IDF", "GJPBZCCNT", "NCCZBPJGO", "NQXKZGEF", "O", "MTIDZU", "U", "CMSFEG", "HRRYXBELHFF", "UU", "YXB", "ZKXQNNKVKZNMT", "RHU", "UZDITMN", "Z", "Z", "SFEGZ", "TNCC", "K", "QXK", "EBXYR", "ELHFFHLEBXYRRHUUZD", "WSFDIO", "ZKVKN", "KXQ", "OGJPBZCCNTC" };
    assertEquals("O WSFDIO GJPBZCCNT CMSFEG Z KXQ N N K VK Z N MTIDZU U HRR YXB ELHFFHLEBXYRRHUUZD ITMNZ K VK N N QXK Z GEFSMCT NCCZBPJGO ID FSW O", palindromist.palindrome(text, words));
  }

  @Test
  public void case42() {
    String text = "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR";
    String[] words = { "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R" };
    assertEquals("R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R R", palindromist.palindrome(text, words));
  }

  @Test
  public void case43() {
    String text = "STRAWNOTOOSTUPIDAF";
    String[] words = { "WARTS", "I", "TOO", "A", "FAD", "STUPID", "STRAW", "PUT", "NO", "ON", "SOOT" };
    assertEquals("STRAW NO TOO STUPID A FAD I PUT SOOT ON WARTS", palindromist.palindrome(text, words));
  }

  @Test
  public void case44() {
    String text = "AAAABAABA";
    String[] words = { "AA", "AAB", "BAA", "BAB" };
    assertEquals("AA AA BAA BAA BAA BAA AA", palindromist.palindrome(text, words));
  }

  @Test
  public void case45() {
    String text = "AAAAA";
    String[] words = { "AA", "A", "AAA" };
    assertEquals("A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case46() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABB" };
    assertEquals("A AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABB A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case47() {
    String text = "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC";
    String[] words = { "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBB", "BBBBBBBBBBBB", "BBBBBBBB", "BBBB", "BC", "BBC", "BBBC", "BBBBC", "BBBBBC", "BBBBBBC", "BBBBBBBC", "BB", "BBBBBBBBBBBBBBC" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case48() {
    String text = "AABAABA";
    String[] words = { "AA", "AAB", "BAA", "BAB" };
    assertEquals("AA BAA BAA BAA BAA", palindromist.palindrome(text, words));
  }

  @Test
  public void case49() {
    String text = "AMANAPLANAC";
    String[] words = { "A", "CANAL", "MAN", "PANAMA", "PLAN" };
    assertEquals("A MAN A PLAN A CANAL PANAMA", palindromist.palindrome(text, words));
  }

  @Test
  public void case50() {
    String text = "AAAA";
    String[] words = { "AAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case51() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = {};
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case52() {
    String text = "AC";
    String[] words = { "A", "ACA" };
    assertEquals("ACA", palindromist.palindrome(text, words));
  }

  @Test
  public void case53() {
    String text = "ABABABABABABABABABABABABABABABABABABABABABABABABAB";
    String[] words = { "A", "B", "AB" };
    assertEquals("A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A B A", palindromist.palindrome(text, words));
  }

  @Test
  public void case54() {
    String text = "STRAWNOTOOSTUPIDAF";
    String[] words = { "WARTS", "I", "TO", "A", "FAD", "STUPID", "STRAW", "PUT", "NO", "ON", "SOOT", "O" };
    assertEquals("STRAW NO TO O STUPID A FAD I PUT SOOT ON WARTS", palindromist.palindrome(text, words));
  }

  @Test
  public void case55() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = {};
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A B A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case56() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ" };
    assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case57() {
    String text = "ABABABABABABABABABABABABABABABABABABABABABABABABAD";
    String[] words = { "ABA", "BAB", "AB", "BA", "BBB", "AAA", "A", "B", "ABAB", "BABA", "ABABAB", "BABABA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case58() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case59() {
    String text = "CBABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "A", "A", "AA", "AAA", "AAAA", "CBA", "ABC", "BA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case60() {
    String text = "AB";
    String[] words = { "ABBA" };
    assertEquals("ABBA", palindromist.palindrome(text, words));
  }

  @Test
  public void case61() {
    String text = "AB";
    String[] words = { "ABBA", "ABA", "AB", "BA" };
    assertEquals("AB BA", palindromist.palindrome(text, words));
  }

  @Test
  public void case62() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC";
    String[] words = { "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "B" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case63() {
    String text = "ABCDEFGHIJKLMNOPQRSTUWXYZABCDEFGHIJKLMNOPQRSTUWXYZ";
    String[] words = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "W", "X", "Y", "Z", "ZZ", "PQ", "AC", "GJ", "BDF", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K" };
    assertEquals("A B C D E F G H I J K L M N O P Q R S T U W X Y Z A B C D E F G H I J K L M N O P Q R S T U W X Y Z Y X W U T S R Q P O N M L K J I H G F E D C B A Z Y X W U T S R Q P O N M L K J I H G F E D C B A", palindromist.palindrome(text, words));
  }

  @Test
  public void case64() {
    String text = "CAZ";
    String[] words = { "CAZAC", "CAZZAC" };
    assertEquals("CAZAC", palindromist.palindrome(text, words));
  }

  @Test
  public void case65() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case66() {
    String text = "AA";
    String[] words = { "A", "AA" };
    assertEquals("A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case67() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case68() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "AAAAAAAAAAAAAAAAAAAAAAAA", "A", "AA", "AAA", "AAAA", "AAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case69() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case70() {
    String text = "AAA";
    String[] words = { "AA" };
    assertEquals("AA AA AA", palindromist.palindrome(text, words));
  }

  @Test
  public void case71() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = {};
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", palindromist.palindrome(text, words));
  }

  @Test
  public void case72() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "AA", "AA", "AAAAA", "AAAAA", "AAAAA", "AAAA", "AAA", "AAAAA", "AAAAA", "A", "AAAAA", "A", "A", "AAAAA", "AAAA", "A", "A", "AA", "AAAA", "A", "A", "AAAAA", "AA", "AA", "AAAA", "AAAAA", "AAAAA", "AAAAA", "A", "AAA", "AAAA", "AAAAA", "A", "A", "AAA", "AAAAA", "A", "AA", "AAAA", "AAAA", "A", "AAAA", "AAAA", "AAA", "AA", "AAAA", "A", "AAAAA", "AAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case73() {
    String text = "AZBZA";
    String[] words = { "A", "AZBZAAZBZA", "ZBZAZBZA" };
    assertEquals("A ZBZAZBZA", palindromist.palindrome(text, words));
  }

  @Test
  public void case74() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case75() {
    String text = "ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE";
    String[] words = { "ABCDE", "ABCDE", "ABCDE", "ABCDEABCDE", "A", "B", "C", "D", "E" };
    assertEquals("A B C D E A B C D E A B C D E A B C D E A B C D E A B C D E A B C D E A B C D E A B C D E A B C D E D C B A E D C B A E D C B A E D C B A E D C B A E D C B A E D C B A E D C B A E D C B A E D C B A", palindromist.palindrome(text, words));
  }

  @Test
  public void case76() {
    String text = "AAAA";
    String[] words = { "AA" };
    assertEquals("AA AA AA AA", palindromist.palindrome(text, words));
  }

  @Test
  public void case77() {
    String text = "ABC";
    String[] words = { "A", "BC", "ABC", "CBA" };
    assertEquals("A BC CBA", palindromist.palindrome(text, words));
  }

  @Test
  public void case78() {
    String text = "ABC";
    String[] words = { "A", "B", "BCB", "CC" };
    assertEquals("A B CC B A", palindromist.palindrome(text, words));
  }

  @Test
  public void case79() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case80() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "AA", "B", "AAAA" };
    assertEquals("AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA B AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA", palindromist.palindrome(text, words));
  }

  @Test
  public void case81() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = {};
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case82() {
    String text = "ABABABABABABABABABABABABABABABABABABABABABABABABAB";
    String[] words = {};
    assertEquals("AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB AB A", palindromist.palindrome(text, words));
  }

  @Test
  public void case83() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case84() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case85() {
    String text = "AACARBUILDBARTENDBUILDERBUILDCARAACARBUILDBARTEND";
    String[] words = { "AA", "A", "CAR", "BUILD", "BUILDER", "BA", "AA", "BARTEND", "DLIUB", "REDLIUB", "NET", "EAB", "AAA", "AAA", "AAW", "AAF", "BAR", "BART", "BARE", "BARR", "BART", "BAREE", "BAREEEEEE", "BAR", "AAAAA", "AAAAA", "AAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAABBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BAE", "BART", "BUILDEE", "BUN", "BARE", "NJ", "SF", "DF", "DFFF", "DDDDDD", "EEEEE", "SSSSSSSSSSSSSSSSSSS", "FRE", "DS", "SSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSS" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case86() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAAA", "AAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAA", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case87() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "AA", "A", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case88() {
    String text = "ABC";
    String[] words = { "ABCBA", "ABC", "CBA" };
    assertEquals("ABC CBA", palindromist.palindrome(text, words));
  }

  @Test
  public void case89() {
    String text = "ABCD";
    String[] words = { "AB", "ABC", "DCBA" };
    assertEquals("ABC DCBA", palindromist.palindrome(text, words));
  }

  @Test
  public void case90() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "AA" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case91() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "AA", "AAA", "AAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAA", "AAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case92() {
    String text = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
    String[] words = {};
    assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", palindromist.palindrome(text, words));
  }

  @Test
  public void case93() {
    String text = "ABABABABABABABABABABABABABABABABABABABABABABABABAC";
    String[] words = { "A", "B", "AB", "ABA", "BAB", "ABAB", "BABA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case94() {
    String text = "CB";
    String[] words = { "CBBC", "CBC" };
    assertEquals("CBBC", palindromist.palindrome(text, words));
  }

  @Test
  public void case95() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "AAAAAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAA", "AAAAAA", "AAAAA", "AAAA", "AAA", "AA", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case96() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC";
    String[] words = {};
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case97() {
    String text = "AN";
    String[] words = { "A", "AN" };
    assertEquals("AN A", palindromist.palindrome(text, words));
  }

  @Test
  public void case98() {
    String text = "ABCDEFGHIJK";
    String[] words = { "ABC", "ABCD", "DEFGH", "EFGHIJK", "CBA", "DCBA", "KJIHGFE" };
    assertEquals("ABCD EFGHIJK KJIHGFE DCBA", palindromist.palindrome(text, words));
  }

  @Test
  public void case99() {
    String text = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
    String[] words = { "ZZ", "ZZZZ", "ZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZZZ", "ZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZ" };
    assertEquals("ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ", palindromist.palindrome(text, words));
  }

  @Test
  public void case100() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "AAAAAAAAAAAAAAAAAAAAAAAA", "A", "AA", "AAA", "AAAA", "AAAAA" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case101() {
    String text = "ACX";
    String[] words = { "ACXCA", "A", "CXXCA" };
    assertEquals("A CXXCA", palindromist.palindrome(text, words));
  }

  @Test
  public void case102() {
    String text = "AAP";
    String[] words = { "A", "AP" };
    assertEquals("A AP A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case103() {
    String text = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXZ";
    String[] words = { "X", "XX", "XXX", "XXXX", "XXXXX", "XXXXXX", "XXXXXXX", "XXXXXXXX", "XXXXXXXXX", "XXXXXXXXXX", "XXXXXXXXXXX", "XXXXXXXXXXXX", "XXXXXXXXXXXXX", "XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case104() {
    String text = "ABCD";
    String[] words = { "DDCBA", "DCBA", "ABC", "A", "BCD" };
    assertEquals("A BCD DCBA", palindromist.palindrome(text, words));
  }

  @Test
  public void case105() {
    String text = "AAAANNNNAAAAVVVVOOOOLLLLIIIIMMMM";
    String[] words = { "AAAANNNNAAAA", "VVV", "VOOOOLLLLIII", "I", "MMMMIIIILLLLOOOO", "VVVV", "MAN", "PANAMA", "PLAN", "AAANNNAAAVVV", "MMMIIILLLOOOVVVAA", "A", "MSDLFGMSD", "SDGDS", "M", "O", "V" };
    assertEquals("AAAANNNNAAAA V V V VOOOOLLLLIII I M M M M MMMMIIIILLLLOOOO V V V V AAAANNNNAAAA", palindromist.palindrome(text, words));
  }

  @Test
  public void case106() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case107() {
    String text = "ABC";
    String[] words = { "AB", "C", "BA" };
    assertEquals("AB C BA", palindromist.palindrome(text, words));
  }

  @Test
  public void case108() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA", "AA" };
    assertEquals("AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA", palindromist.palindrome(text, words));
  }

  @Test
  public void case109() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = {};
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case110() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "AA", "B", "AAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case111() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case112() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case113() {
    String text = "ZYAAB";
    String[] words = { "Z", "YAABAA", "ZY", "YZ", "A", "B" };
    assertEquals("Z YAABAA YZ", palindromist.palindrome(text, words));
  }

  @Test
  public void case114() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "AA", "A", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case115() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAA", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case116() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAA", "AAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAA", "AAAAAA", "AAA", "AAA", "AAA", "AAA", "AAA" };
    assertEquals("AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA AAA", palindromist.palindrome(text, words));
  }

  @Test
  public void case117() {
    String text = "ZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = {};
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case118() {
    String text = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW";
    String[] words = { "AB", "CD", "DE", "EF", "FG", "GI", "IH", "JK", "KL", "LM", "MN", "NO", "OP", "PQ", "QR", "RS", "ST", "TV", "VW", "XY", "Z", "A", "BA", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y" };
    assertEquals("AB C D E F G H I J K L M N O P Q R S T U V W X Y Z AB C D E F G H I J K L M N O P Q R S T U V W V U T S R Q P O N M L K J I H G F E D C BA Z Y X W V U T S R Q P O N M L K J I H G F E D C BA", palindromist.palindrome(text, words));
  }

  @Test
  public void case119() {
    String text = "BA";
    String[] words = { "B", "AB", "BAAB" };
    assertEquals("B AB", palindromist.palindrome(text, words));
  }

  @Test
  public void case120() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB";
    String[] words = {};
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case121() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUUUUUUUUAAAA";
    String[] words = { "UUUUUUUUUUUU", "UUUUUUUUUUUUUUUUU", "UUUUUUUUU", "UUUUUUUUUUUUUUUU", "UUUUUUUUUUUUUUUUUUUUUUUUUUU", "UUUUUUUUUUUUUUUUUUUUUUUUUUU", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", "UUUUUUUUUUUUUUUUUUUUUUUUUUU", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", "HAPPY", "BDAY", "GDFGDGDGDG", "DGDGDGDGDG", "SDGDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "DGGGGGGGGGGGGGGG", "ASSSSSSSSSS", "SSSSSSSSSSFD", "DDDDDDDDD", "FFFFFFFFFGGGGGGG", "AAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAA", "AAAAAAAAAA", "AAAAA", "A", "A", "A", "A", "AA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case122() {
    String text = "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWXY";
    String[] words = { "ABCDEFGHIJKLMNOPQRSTUVWXY", "YXWVUTSRQPONMLKJIHGFEDCB", "A" };
    assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXY ABCDEFGHIJKLMNOPQRSTUVWXY YXWVUTSRQPONMLKJIHGFEDCB A YXWVUTSRQPONMLKJIHGFEDCB A", palindromist.palindrome(text, words));
  }

  @Test
  public void case123() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = {};
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case124() {
    String text = "ALAN";
    String[] words = { "ALA", "A", "ALAN" };
    assertEquals("ALAN ALA", palindromist.palindrome(text, words));
  }

  @Test
  public void case125() {
    String text = "AABCA";
    String[] words = { "A", "ABC", "CBA" };
    assertEquals("A ABC A A CBA A", palindromist.palindrome(text, words));
  }

  @Test
  public void case126() {
    String text = "A";
    String[] words = { "AA" };
    assertEquals("AA", palindromist.palindrome(text, words));
  }

  @Test
  public void case127() {
    String text = "AAB";
    String[] words = { "AAB", "A" };
    assertEquals("AAB A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case128() {
    String text = "ABC";
    String[] words = { "A", "AB", "BA", "C" };
    assertEquals("AB C BA", palindromist.palindrome(text, words));
  }

  @Test
  public void case129() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case130() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "ACXCA", "A", "CXXCA", "AA", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case131() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case132() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case133() {
    String text = "AB";
    String[] words = { "A", "AB" };
    assertEquals("AB A", palindromist.palindrome(text, words));
  }

  @Test
  public void case134() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAZ";
    String[] words = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case135() {
    String text = "AAX";
    String[] words = { "A", "AAX", "AA" };
    assertEquals("AAX A A", palindromist.palindrome(text, words));
  }

  @Test
  public void case136() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ";
    String[] words = { "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA" };
    assertEquals("", palindromist.palindrome(text, words));
  }

  @Test
  public void case137() {
    String text = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    String[] words = { "A", "A", "A", "A", "A", "A" };
    assertEquals("A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A", palindromist.palindrome(text, words));
  }

}
