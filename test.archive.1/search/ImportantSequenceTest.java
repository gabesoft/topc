package topc.test.search;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.search.*;

public class ImportantSequenceTest {
    ImportantSequence importantsequence = new ImportantSequence();

    @Test
    public void case1() {
        int[] B = { 3, -1, 7 };
        String operators = "+-+";
        assertEquals(2, importantsequence.getCount(B, operators));
    }

    @Test
    public void case2() {
        int[] B = { 1 };
        String operators = "-";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case3() {
        int[] B = { 1 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case4() {
        int[] B = { 10 };
        String operators = "+";
        assertEquals(9, importantsequence.getCount(B, operators));
    }

    @Test
    public void case5() {
        int[] B = { 540, 2012, 540, 2012, 540, 2012, 540 };
        String operators = "-+-+-+-";
        assertEquals(1471, importantsequence.getCount(B, operators));
    }

    @Test
    public void case6() {
        int[] B = {};
        String operators = "--------------------------------------------------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case7() {
        int[] B = { -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "--------------------------------------------------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case8() {
        int[] B = {};
        String operators = "++++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case9() {
        int[] B = {};
        String operators = "++++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case10() {
        int[] B = { 3, 3 };
        String operators = "-+";
        assertEquals(2, importantsequence.getCount(B, operators));
    }

    @Test
    public void case11() {
        int[] B = { 6, 7, 9 };
        String operators = "+++";
        assertEquals(5, importantsequence.getCount(B, operators));
    }

    @Test
    public void case12() {
        int[] B = { -2, 7 };
        String operators = "-+";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case13() {
        int[] B = { 8, -3, 14, -5, 18, 4, -3 };
        String operators = "+-+-+--";
        assertEquals(5, importantsequence.getCount(B, operators));
    }

    @Test
    public void case14() {
        int[] B = { -7, 5, 10, 4, 9, -1, 11 };
        String operators = "--+-+-+";
        assertEquals(3, importantsequence.getCount(B, operators));
    }

    @Test
    public void case15() {
        int[] B = { -1, 12, 16, 2, 10, -4 };
        String operators = "-++-+-";
        assertEquals(6, importantsequence.getCount(B, operators));
    }

    @Test
    public void case16() {
        int[] B = { 1, 12, 9, 10 };
        String operators = "-+++";
        assertEquals(8, importantsequence.getCount(B, operators));
    }

    @Test
    public void case17() {
        int[] B = { 5, 5, 8, -3, 14, 7, 0, -4 };
        String operators = "-++-++--";
        assertEquals(3, importantsequence.getCount(B, operators));
    }

    @Test
    public void case18() {
        int[] B = { 15, 13, 7, -5, 14, 10, -7, 6 };
        String operators = "++--++--";
        assertEquals(5, importantsequence.getCount(B, operators));
    }

    @Test
    public void case19() {
        int[] B = { 108, 1171, 673, 544, 205, -126, 161, 51, -530, 1174, 248, 807, 1019, 976, 950 };
        String operators = "-+-+-----+-++++";
        assertEquals(252, importantsequence.getCount(B, operators));
    }

    @Test
    public void case20() {
        int[] B = { 1, 1636, 996, 684, 414, 774, 1434, 986, 580, 1059, 1571, 1339, -609 };
        String operators = "-+++-+++++++-";
        assertEquals(269, importantsequence.getCount(B, operators));
    }

    @Test
    public void case21() {
        int[] B = { 251, 481, 603, 608, -658, 139, 81, 998, 897, 920, -565, 172, 322, 609, 196, 897 };
        String operators = "++++---+++---+-+";
        assertEquals(244, importantsequence.getCount(B, operators));
    }

    @Test
    public void case22() {
        int[] B = { -51428, 92584, -25080, 155258, 94775, 55178, 29017, 5241, -47672, 123687, 15038, 12564, -7658, 91901, 118011, 134636, 3230, -8779, 176160, 106557, -582, 35052, 127164, 78564, -31688, 96210 };
        String operators = "-+-+++---+---+++--++-++--+";
        assertEquals(5752, importantsequence.getCount(B, operators));
    }

    @Test
    public void case23() {
        int[] B = { 187943, 7177, 67462, 90513, 15389, 33399, -25073, -18000, 94364, 70098, 61631, -59828, -16230, 56583, 88258, 59460, 31502, -10131, 126753, 3650, 121806, 18194, 56185, -13003, 84354, -22267, -42528, 57351 };
        String operators = "+--+----+++---+++-+-+-+-+---";
        assertEquals(22141, importantsequence.getCount(B, operators));
    }

    @Test
    public void case24() {
        int[] B = { 99229, 107901, 1715, 8540, 128583, -28281, 82439, -49684, 64312, 18288, 50160, 102757, 60757, -18486, -6478, 108437, 60631, -66008, 180276, 92812, -6155, 35566, -40440 };
        String operators = "++--+-+-++++---+--+--+-";
        assertEquals(8741, importantsequence.getCount(B, operators));
    }

    @Test
    public void case25() {
        int[] B = { -1515820, 11564838, -750854, 6047797, 3952104, 7326226, 3409673, -3777086, -1643594, 16538031, 5728018, 10038365, 12793815, 26685, 13993015, 578223, 7576558, 3469451, -2443980, -1844952, 11931584, 12809213, 7353446, 5931198, 4232491, 7073814, 16055699, 16145933, -1812070, 16405331, 12949652, 12151742, 14382180, -1402557, 6844651, 826757, 500549 };
        String operators = "-+-+++---+-++-+-++--++-+-+++-++++----";
        assertEquals(565335, importantsequence.getCount(B, operators));
    }

    @Test
    public void case26() {
        int[] B = { 1335776, 8255908, 2757682, -6322055, -2349974, -565985, 12515215, 6298227, 9438825, -1194637, 10714374, -6005060, 2224243, 9125374, -2878561, 669084, 12068272, 10953244, 5693610, 10398146, 12414888, 11826363, 11398116, 5764289, 9563331, 9116108, 2875492, 5017706, -5882990, 14248121, 624779 };
        String operators = "-++---+++-+--+--++++++++++++-+-";
        assertEquals(1372028, importantsequence.getCount(B, operators));
    }

    @Test
    public void case27() {
        int[] B = { 1837973, 430898, 14558440, 5611229, -6009695, 2243396, 14698898, 10689278, 5828457, 11044424, 2144632, -3746380, 7125357, 6459978, 10961410, 11701632, 11198913, 712053, -3434682, 14684863, 5351158, -5781184, 12197884, 7294066, 6835789, 3187967, -4559587, -1143632, 9392332, -6230083, -352051, 5878661, -6451377, -1184291, 10922995, 3622207, 1059425, 3186171, 9749147 };
        String operators = "--+---++++---++++--+--+++---+-----++-++";
        assertEquals(1665196, importantsequence.getCount(B, operators));
    }

    @Test
    public void case28() {
        int[] B = { 124840850, -19252969, -10909259, 187196378, 49705000, -51436003, 192523910, 16500551, 122504650, 96505425, 141975510, 102770187, 105518926, 179623656, 27578398, 134823375, 20027117, 111821689, -29006339, 24712524, 132449590, 61201398, 58787416, 126200446, -20304165, 45787054, 73542730, -34500965, 155056184, 82119054, 56331943, -16527355, 97796987, 38684899, -4516400, -66744864, 6195481, 27417471, -112120, -45116805 };
        String operators = "+--+--+-++++++-+-+--+-++--+-+-+-+-------";
        assertEquals(16478979, importantsequence.getCount(B, operators));
    }

    @Test
    public void case29() {
        int[] B = { 104912511, -40151362, 58216976, 48159466, 57217825, 19148113, 32948956, -56108114, -10404352, 187124772, 69990285, -28858311, 66987955, 18881502, 76160152, -13055119, 150055195, 163314842, 42759814, 67798080, -34875336, 134731628, 81204393, -26035641, 14682786, -9911446, -52122710, 146920981, 65956825, -53277244, 82667847, 59992076, -12760673, 86338103, -16261139, 150873710, 155991789, 33378997, 90238005, 131289463, 47765547, 29595504, 23168469, 76883135, 7248515, 110712232, 20770598, -57168820, 84369691 };
        String operators = "+-+++++--+--+++-++-+-+-----+--++-+-++-++-+++-+---";
        assertEquals(5522898, importantsequence.getCount(B, operators));
    }

    @Test
    public void case30() {
        int[] B = { 118633207, 160710495, 132380082, 9112169, -11605377, 6515393, 12556016, 46787915, 94776064, 128435706, -5122953, -29398313, 12561945, 126543765, 136448365, 88097412, -40863764, 25384999, -49530210, 2499039, 115863884, 44904570, 65130059, 91836729, 48559409, 75758749, 102897886, 144089922, 1874961, 9902841, -9987194, 90226429, -56726245, 126905352, 106917078, -34278119, 149733950, -6871881, 16565641, -33821966, 66660741, 100983491, 116602609, -48324464, 38585522, 136541227, 114348977 };
        String operators = "+++----+++---++-----+-++++++-----++-+----++--++";
        assertEquals(8449377, importantsequence.getCount(B, operators));
    }

    @Test
    public void case31() {
        int[] B = { 5088176, 8400645, 10563217, 8262742, 9898433, 4807083, 4888329, 10126912, 14809162, 6892989, 5380252, 2314097, 6040349, 10078397, 5798791, 2669884, 3018122, 4613267, 11057129, 9302390, 10420295, 4148027, 3590134, 1414147, 8586740, 15372244, 8124388, -1278161, -583049, 3110148, 2945836, 3771406, 4507087, 4796086, 7657298, 5753664, 3878775, 4273272, 541649, 1053296, 8420807, 14343299, 12430471, 6435268, -1082420, 6822032, -3910115 };
        String operators = "+++++++++-+-+++++++++--++++--++++++-++++++++-+-";
        assertEquals(147085, importantsequence.getCount(B, operators));
    }

    @Test
    public void case32() {
        int[] B = { 15346141, -304996, 8600897, 1861579, 6474609, 12134935, 12170140, 4496981, 6047127, 13719155, 11846497, 8720501, 6614757, 7605931, -653339, 13804603, 7627000, 8182807, 11087415, 9786048, 720787, 10692437, 10848152, 2719164, 6209422, 11191956, 7453800, 2508669, 3049787, -3611361, 5961540, 6498237, 13459186, 11546351, 11860703, 14021857, 11748219, 12620368, 6477744, -3464095, -2965585, 8253957, 10946375, 10266307, 7428967, 3582851, -2305152 };
        String operators = "+-+-+++-++++++-+++++-++-+++++-+++++++++--++++--";
        assertEquals(668099, importantsequence.getCount(B, operators));
    }

    @Test
    public void case33() {
        int[] B = { 4445368, 3292467, -7090131, 9654880, 6416727, 9647868, 12875814, 10001301, -3782551, 6097933, 10469848, 17221617, 11096250, 12490597, 10798262, 9352075, 15477417, 16435433, 12329904, 12374749, 8894419, 1781010, 11393545, 17080533, 11219426, 12602743, 16053412, 13259635, 13433799, 12049642, 10975059, 1504789, 9855511, 7126877, 7733673, 10394998, 9959048, 11667603, 12516659, -1429398, 6385369, -3482816, 8608574, 12749826, 11534773, 4871129 };
        String operators = "-+-+++++-++++++++++++++++++++++-+++++++---++++";
        assertEquals(1122552, importantsequence.getCount(B, operators));
    }

    @Test
    public void case34() {
        int[] B = { 6976956, -2793218, 12385348, 6395592, 1079523, 3196821, 9709275, 3719323, -2747076, 4890756, -7300418, 2277241, 13116994, 1785646, -1905190, -39605, 1833060, -1637031, 3850433, -2118513, -1208511, -2777496, 4179682, 3969216, -247066, -3512046, 1863308, 11416772, 7032999, -4956505, 3222551, 2702576, -7852178, -879435, 9306111, -3286434, 2421568, -3901198, 4655577, 9114513, 14399580, -3240728, 7200481, -1565671, -4895116, -229031, 50817, 16714146, 4529622, -5128987 };
        String operators = "--+-+++-----+--------------+-----------++------+--";
        assertEquals(511696, importantsequence.getCount(B, operators));
    }

    @Test
    public void case35() {
        int[] B = { 4921030, -4373473, 4577095, -6387073, 4292337, 1518178, 2415686, 8754111, 14156119, 1324368, 4106161, -5343405, 4056786, -6474199, 255048, -960509, 18368221, -458679, 1051615, 8666506, -2582247, -1594412, -5318945, 3271820, 347953, -277444, 15869671, 6646871, -3124786, -370874, -3268011, 5658797, -5014084, 6298496, -6809937, 7800452, -7234721, 10276115, -4516995, -202047, -135775, 1440548, -1980259, 551876, 5093356, 3173733, -5218803, 14040066 };
        String operators = "-------++-------+--+------+----------+-------+-+";
        assertEquals(1899471, importantsequence.getCount(B, operators));
    }

    @Test
    public void case36() {
        int[] B = { 5032118, 4883396, 2056557, -3748098, 807534, -1848850, 3186036, 2548789, 446145, -4476247, 2341800, -5497297, 9739928, -4652145, -466224, 1410661, 4539396, -2997383, 1094354, -2429031, 426362, 819332, -6510013, 4947630, 782167, -1159564, -2974181, 5601347, 2859217, -5660912, 3906807, -6103019, 1245287, 3305893, 10653053, 1700387, -1897973, -2605319, 4259056, 2021905, -1928052, 4275640, -8559749, 4828408, 2545424, 466709 };
        String operators = "-+----------+---------------+-----+-----------";
        assertEquals(460236, importantsequence.getCount(B, operators));
    }

    @Test
    public void case37() {
        int[] B = { 2, -4, 4, 12, 1, 11, -1, -5, 9, -8, 6, 4, -6, 4, -4, -3, 4, 11, 0, -1, -3, 8, 6, -4, -1, 5, -2, 1, -1, -2, 7, -6, 6, -8, 11, 4, -7, 3, 1, 3, 11, 6, 1, -7, 4, -4, -1, 6, 2 };
        String operators = "---+-+--+--+-----+----+-----------++----+--------";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case38() {
        int[] B = { -1, 0, -3, -1, 16, -2, 12, -5, 1, 8, -7, 14, 0, 2, -2, -2, 3, -5, 5, 4, -4, -1, 5, 0, -7, 3, -3, 1, 3, 14, 2, 2, 0, 1, -1, -3, 8, -2, -7, 1, 2, 4, -6, 12, 7, -2, 16 };
        String operators = "----+-+--+-+-----------------+-------------++-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case39() {
        int[] B = { -3, -1, 8, -2, -5, -1, 4, -2, 4, -2, 2, -1, 3, -2, 7, 11, 6, -4, -4, 10, -6, 1, 1, -2, 10, -5, -1, -1, 8, -7, 3, -4, 18, 1, 1, 3, -2, 1, 11, -2, 3, -1, 1, -1, 0, 4 };
        String operators = "--------------++---+----+-------+-----+-------";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case40() {
        int[] B = { 3, 16, 2, 13, 13, 16, 3, 13, 9, 2, 11, 11, 5, -6, 11, 6, 9, 8, 6, 10, 14, 13, 16, 19, 18, -1, 12, 12, 6, 8, 15, 11, 10, 4, 15, 19, 10, 3, 6, 14, 15, 6, 2, -2, 8, 9, 12, 12 };
        String operators = "-+-+++-++++++-+++++++++++-++-++++-+++++++++-++++";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case41() {
        int[] B = { 9, 11, 11, 7, 8, 12, 16, 15, 8, -9, 15, 8, 6, 5, 6, 14, 0, 12, 6, 13, 2, -1, 12, 9, 8, 8, -1, 11, 7, -1, -7, 13, 11, 15, 6, 9, 14, 11, 0, 12, 16, 8, 7, 9, 5, 12, 19, -1 };
        String operators = "+++++++++-++++++-+++--++++-++--+++-+++-++-+++++-";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case42() {
        int[] B = { -3, 17, 11, 4, -5, 12, -4, 13, 14, 11, 12, 18, 4, 12, 16, 12, 9, 3, 3, -3, 10, 9, 8, 14, 19, 18, 15, 13, 9, 7, 3, 10, 18, 15, 13, 14, 13, 16, 20, 20, 12, 11, 19, 15, 15, 0, 17, 16, 17, 2 };
        String operators = "-+++-+-+++++-++++-+-++++++++++-++++++++++++++-+++-";
        assertEquals(2, importantsequence.getCount(B, operators));
    }

    @Test
    public void case43() {
        int[] B = { 18, 5, 8, 5, -4, -4, 16, 3, -1, 11, 8, -9, 15, -4, 1, 15, 12, 8, 10, 9, -4, 16, 20, 19, 3, 8, -4, 16, 18, 2, -4, 17, 6, 8, -2, 19, 14, 9, 0, 15, 20, 3, 8, 3, 7, -2, 16 };
        String operators = "+-++--+--++-+--+++++-+++-+-++--+-+-+++-++-+++-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case44() {
        int[] B = { 2, 13, 4, 8, 6, 10, -1, 3, 15, 16, -1, 14, 8, -6, 12, -7, 18, 12, 13, 13, 11, 8, 0, 2, 2, 10, 15, 4, 6, 2, -3, 11, 10, 5, 0, -6, 0, 0, 4, 5, -2, 7, 4, 10, 0, 7, -5, 0, 12, -5 };
        String operators = "-+-+++--++-++-+-++++++-++++-+--+++-----+-+++----+-";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case45() {
        int[] B = { 8, 1, 6, 10, 14, 15, 6, 0, 6, 7, -4, 13, 14, 13, 3, -6, 5, 8, 0, -4, 14, -5, 17, 3, 0, 11, 2, -6, 0, 14, 11, 15, 10, 1, -1, 8, 9, 9, 5, -3, 6, -8, 17, 9, 11, -1 };
        String operators = "+-++++--++-+++---+--+-+--+---++++--+++--+-+++-";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case46() {
        int[] B = { -3, 5, -1, -3, 0, 0, 4, -2, -1, 1, 8, 4, -1, -2, -1, 3, 0, -2, 7, 0, 2, -4, 3, 0, 1, -4, 6, 5, 1, 1, -2, -1, 1, 8, -1, 4, -1, -3, 3, -1, 1, -2, 8, 2, -2, 1 };
        String operators = "-+--------+-------+-------++-----+--------+---";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case47() {
        int[] B = { 2, 1, -4, 8, 7, 7, 1, 4, 1, 3, 0, 0, -3, 4, -1, 1, -3, 6, -3, 2, 1, -1, 2, 5, 1, -1, 1, -2, 0, 6, 6, 3, -1, 2, -2, 1, 0, -2, 1, 1, 0, -2, 0, 0, -1, 3, 0, 3, -4 };
        String operators = "---+++-+-+-------+-----+-----++----------------+-";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case48() {
        int[] B = { 1, 8, 2, 2, -4, 2, -1, -1, 3, 0, 1, 5, -1, 0, 2, -1, 2, -2, -1, 4, 0, -4, 10, 4, 5, 3, 4, 1, 6, 1, -1, 0, 2, -1, 0, 6, -1, 2, -1, 2, 3, 0, -2, 3, -2, 8 };
        String operators = "-+---------+----------+-+-+-+------+----+----+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case49() {
        int[] B = { 6, 10, 0, 8, 6, 4, 5, 2, 6, 5, 5, -1, 8, -1, 5, 4, 6, 4, 6, 0, 10, 6, 3, 5, 7, 6, 7, 1, 6, 5, 5, 1, 4, 6, 7, 6, -3, 4, 0, -4, 0, 7, 7, 7, 4, 7, 4, -1 };
        String operators = "++-++++-+++-+-+++++-+++++++-+++-++++-----+++++--";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case50() {
        int[] B = { 5, 4, -2, 7, 6, 7, 7, 5, 6, -2, 8, 4, 2, 3, -2, 2, 4, 4, 7, 10, 9, 9, 0, 9, 7, 2, 3, 1, 4, 8, 8, 6, 8, 8, 5, 6, 2, 7, 10, 1, 6, -2, 6, 1, 2, 2 };
        String operators = "++-++++++-++++--++++++-++-+-++++++++-++-+-+-++";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case51() {
        int[] B = { 3, 2, 4, 5, 6, 3, 2, 6, 7, 6, 5, 2, 5, 9, 8, 5, 5, 4, 5, 6, 4, -1, 8, 6, 4, 5, 6, 1, 5, 7, 9, 0, 5, 3, 6, 2, 1, 6, 6, 2, 3, 3, -1, 5, 7, -1, 8 };
        String operators = "+++++-+++++++++++++++-+++++-+++-+++--+++++-++-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case52() {
        int[] B = { 1, -1, 2, 1, -3, 8, 8, 2, -3, 8, -1, 7, 0, 4, 3, 0, -2, 7, 1, 5, -1, 5, 3, 5, 7, 8, 8, 1, -1, 3, 3, 3, -1, 0, 4, 5, 2, -3, 9, 3, -2, 0, 2, 0, 1, 2, 2 };
        String operators = "-----++--+-+-++--+-+-++++++---++--++--+------++";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case53() {
        int[] B = { 4, 4, 3, 3, 6, 6, 5, 2, 4, -2, 1, 5, -4, 3, -1, -1, 5, -2, 0, -2, 2, 5, 0, 1, 6, 10, 7, 4, 0, 5, 0, 8, 6, 3, -2, 2, 4, 0, 5, 6, 8, 10, 7, -1, 8, 1 };
        String operators = "+++++++-+--+----+----+--++++-+-+++--+-+++++-+-";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case54() {
        int[] B = { 6, 5, 5, -3, 6, 5, 7, 5, 2, 2, 6, 3, 7, 2, -1, 6, -3, 0, 1, 2, 6, -1, 7, -1, 7, 1, 0, -1, 0, 1, 7, 9, 8, -2, 4, -3, 0, 1, 5, -1, -2, 2, 7, 8, 0, 8 };
        String operators = "+++-+++++++-+--+----+-+-+-----+++-----+---++-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case55() {
        int[] B = { -85151, 22452, -24615, 40316, 1556 };
        String operators = "-----";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case56() {
        int[] B = { -22204, 32449, -30492, 86982, -87431 };
        String operators = "-----";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case57() {
        int[] B = { -17521, 26470, 25157, -26678, 35665, 27121 };
        String operators = "------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case58() {
        int[] B = { 104368437, 314535331, 182520759, 429468274 };
        String operators = "-+++";
        assertEquals(182520758, importantsequence.getCount(B, operators));
    }

    @Test
    public void case59() {
        int[] B = { -36898850, 221759803, -169344304, -101921728, 441287578, -228221590, 415632544, 182407468, -266065070, 518948042, -171191864, 433313227, 169071492, 316490451, 663322421, 74387373, 637328195, 85735627, 174546548, 320766353 };
        String operators = "-+--+-++-+-++++-+--+";
        assertEquals(104601422, importantsequence.getCount(B, operators));
    }

    @Test
    public void case60() {
        int[] B = { 563299174, -210843592, -139225437, 152158395, 435114526, 73190055, 145972554, 286703749, -51417959, 380583939, -139470765, 524054034, 122061759, 519185360, 57424281, 5063283, 434844502, -52146136, 337481089, 562612488, 60069361, 349596916, 102243436, 514557505, -46456091, 498443467, 139696200, -71941786, 551868681, 619825580, 679244818, 424270221, -162293390, -267152392, 375128833, 495462575, 551248089, -178749297, 486511824, -168246724, 155235187, -168207792 };
        String operators = "+---+-++-+-+-+--+-++--++-++-+++----++-+---";
        assertEquals(15053018, importantsequence.getCount(B, operators));
    }

    @Test
    public void case61() {
        int[] B = { -34, 11, 999999954, 4, 999999902, -20, 999999894, 30, 999999846, 999999904, 999999921, 15, 999999851, 16, 999999906, 999999926, 999999923, 69, -73, 999999963, 999999918, 36, 999999843, -8, 999999889, 0, 999999886, 999999864, 999999842, 999999839, -48, -10, 999999882, -41, 40, 999999886, 999999918, 999999886, -13, 999999954, 999999920, 999999875, 999999930, 999999945, 999999935, -31, 54, 999999906, 999999869, -57 };
        String operators = "--+-+-+-+++-+-+++--++-+-+-++++--+--+++-++++++--++-";
        assertEquals(999999810, importantsequence.getCount(B, operators));
    }

    @Test
    public void case62() {
        int[] B = { 999999850, 999999894, 32, 999999839, 999999889, 76, -8, -16, 25, 999999870, 999999931, 25, 999999845, 999999833, 999999902, 999999948, 999999917, 999999852, 999999904, -8, 92, 999999893, 999999981, 89, 999999891, 999999891, 5, 999999897, 33, -30, -1, 75, 6, 999999905, 76, -85, 74, 999999872, 999999921, -2, 75 };
        String operators = "++-++----++-+++++++--++-++-+-----+---++--";
        assertEquals(999999808, importantsequence.getCount(B, operators));
    }

    @Test
    public void case63() {
        int[] B = { 999999920, 999999900, 999999912, -20, 999999868, 999999815, 999999880, 999999967, 88, -62, 999999943, 47, 999999857, 999999862, -44 };
        String operators = "+++-++++--+-++-";
        assertEquals(999999813, importantsequence.getCount(B, operators));
    }

    @Test
    public void case64() {
        int[] B = { -4, 2 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case65() {
        int[] B = { 3, -5 };
        String operators = "++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case66() {
        int[] B = { 1, 7, 1, 2, -9 };
        String operators = "--+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case67() {
        int[] B = { 1, 2, 6, 3, -5, 1, -9, 7 };
        String operators = "+-+-++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case68() {
        int[] B = { 792, 318, -875, 111, 56, 35, -738, -401, -522, -260, 736, -296, 583, -434, 164, -738, 81 };
        String operators = "++----+-+--+-+++-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case69() {
        int[] B = { -298, 639, -610, 269, -229, -110, -75, 554, -372, -584, 558, 83, 408, 896, 785 };
        String operators = "+-+++++---+-+--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case70() {
        int[] B = { 46282, -97485, 97247, -35403, 33056, -18482, -28873, -7130, 29176, -70458, -19195, -31312, 95102, -73115, -63011, 85351, -35917, 5295, -41993, -10669 };
        String operators = "---+++---+-+-+-+--+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case71() {
        int[] B = { 18392, -57623, -30021, 54222, 70847, 76396, -6793, 27677, 20923, 43599, 13462, -37767, 7042, 86662, 5596, 56685, -40181, 16505, -50662, 34788, -37308 };
        String operators = "--+----+--+--+++--+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case72() {
        int[] B = { 3593819, -8716331, -1644783, -5273938, 5388092, -3905717, 6077012, 2262874, 5436417, -6656306, -4232582, 8073655, -6525739, -2535873, -9084630, -8500228, -6236657, -8209306, 5632421, -5575403, -8773438, 9640641, -8615151, -7071159, -6141092, -1538650, -6798349, -2571291, -7624579, 8162237, -584093 };
        String operators = "+-++--+-+-++++---+--+--+----+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case73() {
        int[] B = { -5425268, 5792681, -9101756, 6664627, 6102503, -7312289, 3205182, -7494114, -8371743, -4912901, 6393404, 6483638, -8109623, 7311713, -8473024, -801616, -8038190, -8342268, -1428692, 9660234, -5582058, -8881425, 3081173, 1013934, -1344616, 5103315, -4384614, -8398326, -9129130, -639945, -8724606 };
        String operators = "+++----+--++---++--+--+-+-++-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case74() {
        int[] B = { 17717786, -13245553, 34667695, -48983608, -55922135, 48720813, 58716078, -2689675, 2009153, 44291232, -81474393, 60977046, -15263151, -28317870, -15423024, -13415873, -45655284, -10096803, -80908612, 94963861, 84421142, 61732440, 27739661, 65402655, -25306453, 77466124, -93483606, 42369731, 49771952, 55096631, -57405163, 61705426, 12667248, 23810962, -80843152, 75380983, 20114890, -96471569, -23463681, 18992264, 72245983, 5780513, 63528181 };
        String operators = "++++---++++--+--+++---+-----++-+++-----+---";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case75() {
        int[] B = { 52260502, 13055179, 87159909, 75241864, 56606942, 60900757, -10347435, 77760465, -52277576, 55766119, -17171011, -55688287, -3423801, 74685065, -41072113, -86301038, 96615038, 38847012, -97938933, -78800069, -6379507, -21356205, 25070089, 37750534, 22448013, -60977303, -85858314, 29676411, -63434020, -58175488, -86644145, -83265062, 89100836, 51782105, 91645344, 53995519, -91817252, -53246621, -43189111, -5119399, 83937671, -92782749, -51650775, 3544322 };
        String operators = "----++-++++--+-++++---+--+++---+-++-+++++--+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case76() {
        int[] B = { -524537155, -351223447, -898623166, 120008427, 295951006, 412363725, 633225389, 924044463, 66122384, -942355219, 38449518, 455563276, -48129433, -774309033, 12890368, -145793823, 179749544, 12369653, 534971166, 673744744, 650638020, -367333888, -392265965, -201551878, 681433366, 654153214, -822516896, -921562896, -449226419, 690678525, -492950694, -607395586, 174622381, 446013760, 976135849, -976979378, 641977540, 442094794, 712463501, 615525908, 287138151, 443329337, 540718752, -318796254, -273935575, 838468726, 688020831, -422075153, 461820860, 697498551 };
        String operators = "++--+--++++++++---++++-+++--+++-+++++-++++++-+++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case77() {
        int[] B = { -219869902, 379384469, 203910584, -423316149, 77111801, -755662256, -184592523, -68117205, -150674234, 179574133, -10789108, -50238817, 101403509, 693652707, -94132485, 479828617, -145138724, -655925383, 553972659, -356559497, 375671672, 580075430, -51394277, -678127568, -316919191, -422326953, 226874853, 937250687, -167632905, 550544728, -853736185, 544143108, -438277524, 114324071, 248072756, 341499495, -251992416, -355745738, -929532278, -838435378, 924831942, -640281626, 33650072, 599682661, -167633186, -934835963 };
        String operators = "+++++++++++++++++++++-+-+++++++-+++++-+-+++-++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case78() {
        int[] B = { -769094598, 504446630, -353493424, 503610227, 62475166, -496429663, 836473698, -666348410, -638276333, -977919212, 226817300, 730987316, 521774629, -25406724, 914777205, 55670110, 389083407, 848905168, 174730068, -166000459, -872259253, -548443996, -871238536, -507146579, 944338029, 331801347, 162567872, 775102071, 364549131, -16516107, 977769675, 391658987, 736725863, -754142238, -646683932, -489345994, -550025509, 506430562, 591336101, -95739063, 416836632, -295331367, 937501486, 940285629, -381862861, -180180640, -986987692, -156486555 };
        String operators = "------+-------------------+------------++-------";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case79() {
        int[] B = { 492749190, 687228693, -667625783, 494433793, -893034494, -78144611, -454055881, -873952022, -666302696, 73789921, -946951300, -344983549, -492946596, 884062394, -879968335, 316487339, 828902002, -847594177, 907530640, -521783423, -725944642, -163537454, 595643135, -761532857, -455514300, 509298076, -243442353, 915883373, -548293845, -638690045, -745683814, -251619351, 22009138, 402772647, -596453076, 320515184, 938059827, -554562048, -174278613, 594439314, 951489453, 675955287, 60215543, 736444291, -806840128, -752084431, 933082217, -352030765, 764948850 };
        String operators = "-+--------+-----------------------------------++-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case80() {
        int[] B = { 380363427, 583629335, -681431183, -219398108, 24128364, 933370503, 476023070, -401987717, -625916565, 496045772, 908035426, -895357751, 464638908, -115569799, -905531819, -393481688, 203364448, 48324176, -36670007, -531426289, -460125068, 629279122, -733410707, -159928285, -562938483, -878488131, 560719010, -466275382, -312074009, -445541791, 320972323, -477210673, 514950353, -252233737, -599779031, 819400249, 364282240, 530984231, 981313465, 353217366, 118458547, -491592609, 190379345, 187993123, 299990918, 968081798, 212935226, 448245418 };
        String operators = "-++-+----+-++-+--++--+-+---++-------++-+--++-+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case81() {
        int[] B = { -606377907, 698607592, -551572075, 450127444, -850401877, 425186192, -987454083, 606185156, 661109734, 166092480, 190214265, -68072892, 965729298, -543117821, -757811717, 75855985, 344103596, -840130994, 78111683, -876552115, 1608029, -63724450, -807483716, -756059108, 155110649, 977972952, -636645074, 1455045, 593202480, -538696310, -537429386, -321572094, 444124919, -229405471, 337041010, -803917771, -90848156, 938164826, -279736657, -499833252, -304809855, 358015525, 494100210, -353126294, -492329526, 763872688 };
        String operators = "--+--+---+--+-+++-++-+--+----+--++---+-++---++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case82() {
        int[] B = { 999999912, 999999907, -999999921, -999999931, 999999960, 999999939, 999999997, 999999950, 999999967, 999999972, 999999944, 999999979, -999999968, -999999964, 999999997, 999999990, 999999947, 999999965, 999999990, -999999956, -999999913, -999999907, 999999942, -999999990, 999999924, -999999986, -999999963, -999999941, -999999932, -999999923, -999999966, 999999948, 999999903, -999999950, -999999962, 999999973, -999999995, 999999984, 999999993, 999999962, -999999922, 999999933, 999999988, 999999967, 999999961, -999999921, 999999996 };
        String operators = "++-++++--+++++++++--+++++++++++--++++--+++++-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case83() {
        int[] B = { 999999942, -999999980, -999999973, 999999901, -999999908, -999999993, -999999948, -999999940, 999999979, 999999964, 999999998, -999999982, -999999985, 999999942, 999999909, 999999941, -999999984, -999999914, -999999995, -999999910, -999999922, 999999933, 999999939, 999999906, 999999916, 999999939, -999999914, -999999964, -999999903, -999999999, -999999972, 999999963, 999999963, -999999972, 999999943, -999999987, 999999901, -999999927, -999999950, -999999989, -999999961, -999999913, 999999974, -999999948, -999999993, -999999928, 999999975, -999999955, -999999976 };
        String operators = "++++++-+++++--++-++++++++++-+++++++++-++++---++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case84() {
        int[] B = { 999999901, -999999931, -999999998, 999999909, -999999918, 999999906, -999999929, 999999951, 999999982, 999999949, 999999964, -999999925, 999999987, 999999957, 999999926, -999999977, 999999976, 999999953, -999999994, -999999905, 999999928, 999999987, 999999938, -999999991, 999999926, 999999930, 999999946, 999999912, -999999979, 999999978, -999999937, -999999917, 999999939, -999999927, 999999984, 999999979, -999999956, -999999934, 999999985, 999999955, 999999961, 1000000000, -999999993, 999999982, 999999943, 999999993 };
        String operators = "----------+---+-+----+-+---+-----------------+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case85() {
        int[] B = { 999999936, -999999919, 999999932, 999999931, -999999992, -999999925, 999999957, -999999959, 999999933, 999999905, 999999947, 999999978, -999999945, -999999961, 999999958, 999999995, -999999958, 999999951, 999999979, 1000000000, 999999908, 999999986, -999999932, 999999948, 999999991, -999999909, 999999940, -999999988, -999999984, 999999942, -999999977, 999999968, -999999908, -999999950, 999999951, -999999938, -999999936, 999999939, -999999913, 999999948, 999999916, -999999914, 999999968, 999999924, 999999941, -999999922, 999999906 };
        String operators = "-----+--------+----------------++++--------++--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case86() {
        int[] B = { -999999926, -999999934, 999999903, -999999985, 999999970, 999999947, -999999987, -999999951, -999999928, 999999983, -999999937, -999999981, 999999901, 999999937, -999999906, -999999949, -999999926, -999999972, -999999917, 999999911, 999999906, -999999985, -999999916, 999999955, 999999971, -999999974, -999999976, -999999912, 999999969, 999999979, 999999927, -999999906, -999999941, 999999919, 999999950, -999999929, -999999923, -999999975, -999999985, 999999905, 999999916, 999999956, 999999932, -999999977, 999999945, 999999938, -999999999, 999999967, -999999917 };
        String operators = "+-+-+++--+--+-++++--++-+++---+--+-+--+---++++--++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case87() {
        int[] B = { 999999964, 999999920, -999999915, 999999923, -999999912, -999999966, 999999938, 999999980, 999999909, 999999962, -999999992, 999999930, -999999998, 999999921, 999999955, 999999905, -999999926, 999999906, 999999905, -999999945, 999999968, 999999961, -999999984, 999999932, 999999929, 999999920, -999999967, 999999971, -999999959, 999999960, 999999947, -999999984, -999999940, -999999903, 999999948, 999999927, 999999950, 999999917, 999999980, -999999993, 999999962, -999999912, 999999932, 999999981, -999999922, -999999978, -999999967 };
        String operators = "++--+-----++-+--++++++-+++-+-++++------+-+-++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case88() {
        int[] B = { -999999997, 999999997, 999999998, -1000000000, -999999997, -1000000000, -999999996, -999999996, 999999995, 999999996, 999999995, 999999998, 999999998, -999999997, 999999995, 999999998, -999999996, -999999995, 999999998, 1000000000, -999999995, 999999997, 999999999, 999999997, -999999997, 999999999, -999999999, -1000000000, 1000000000, -999999996, 999999995, 999999997, -999999997, -1000000000, 999999998, -999999996, 999999995, 1000000000, 999999998, 999999996, -1000000000, 999999995, -1000000000, -999999998, -999999998, 999999999, 999999999, -999999996, 999999998 };
        String operators = "+++++++++--++--+-+-++++--++-+++++-++++++-+-++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case89() {
        int[] B = { 999999995, -999999998, -999999999, -999999997, 1000000000, -1000000000, -999999997, -999999999, -999999998, 999999999, 999999998, 999999995, -999999997, 1000000000, -1000000000, 999999997, -999999999, 1000000000, 999999996, -999999996, -999999998, -999999998, -1000000000, 999999995, -1000000000, -1000000000, 999999997, -999999995, -999999995, -1000000000, 999999996, 999999995, -999999996, 999999999, 999999998, -999999997, 999999995, 999999995, -999999998, -999999998, -999999996, 999999998, -999999995, 999999996, 999999997, -999999997, 1000000000, 1000000000, -1000000000, -999999999 };
        String operators = "++--+++++++-+++-++++++++--+--++++++-++-++++--+++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case90() {
        int[] B = { 999999995, 999999997, 999999997, 999999995, 999999996, -1000000000, -999999998, 999999999, -1000000000, -999999997, 999999999, 999999998, 999999999, -1000000000, -999999999, -999999997, 999999995, -999999996, 999999999, 999999995, -1000000000, -1000000000, -999999999, -999999999, -999999997, 999999995, 999999996, -999999995, -1000000000, -999999999, 999999995, -1000000000, -999999996, 999999996, -999999996, 999999997, 999999995, 999999996, -999999998, 1000000000, -999999999, 999999996, -999999996, -999999999, -999999995, -999999995 };
        String operators = "-----------+---+--------------------------+---";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case91() {
        int[] B = { 999999997, -1000000000, 999999996, 999999998, -999999996, 999999999, -999999999, 1000000000, 999999999, -999999997, -999999997, 999999999, -999999997, -999999999, -999999996, 999999998, 999999999, -999999999, -999999996, -999999997, -999999996, 999999995, -999999999, 999999999, -999999996, -999999995, 999999995, 999999998, 1000000000, -999999995, 1000000000, 999999996, 999999997, -999999997, 1000000000, 999999996, 999999997, -999999996, -999999995, -999999997, 1000000000, -1000000000, 999999995, -999999999, 999999997, -999999998, 999999998, 1000000000, 1000000000, -999999995 };
        String operators = "+--------+---+----+-------------------------------";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case92() {
        int[] B = { -999999995, -999999995, -999999998, 1000000000, 999999997, 1000000000, -999999999, 999999998, 1000000000, 999999995, -1000000000, -999999997, 999999997, 999999996, -999999996, 999999996, -999999998, -1000000000, -999999995, -999999996, -999999999, -999999998, -1000000000, -999999999, -999999998, 999999998, -999999995, 999999995, 999999996, 999999998, 999999996, 1000000000, 999999996, -1000000000, 999999997, -999999998, 999999998, 999999998, 999999999, -1000000000, 999999998, -999999998, 999999997, 999999997, 999999999, -999999999, -999999996, -999999999 };
        String operators = "++++++-+--+----+-+-+-----+++-----+---++-+++-----";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case93() {
        int[] B = { 999999998, 999999999, 999999996, 1000000000, -1000000000, -1000000000, -1000000000, 999999996, 999999997, 1000000000, 999999997, -999999996, 999999998, 999999999, 999999999, 999999995, -999999997, 999999995, -999999999, -999999996, -999999997, -999999996, 999999997, 999999996, -999999995, -999999999, -999999998, 999999995, 999999999, -999999998, 999999995, -999999999, 999999998, 999999997, -999999995, -999999999, -1000000000, -999999997, 999999996, 999999997, -1000000000, 1000000000, 999999995, 1000000000, -999999997, -999999995, -999999998 };
        String operators = "+-+---+++--++--+++---++-+-+-+-+-+---+-++-+-+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case94() {
        int[] B = { 3, -4, 6, -2, -8, 4, -5, 4, 7, -9, 3, 1, 8, -10, 7, 10, -1, -7, 1, -3, -4, -9, -8, 9, -4, -5, -5, -5, -3, 7, -1, 1, -5, 6, 3, 8, 7, 5, 1, 7, 1, 5, 2, -2, 3, 5, -2, 4, -6 };
        String operators = "+-+-----+--------------------------+-+--+---+----";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case95() {
        int[] B = { 9, 1, -10, -9, 1, 7, -10, 2, 2, -3, 8, -1, 2, -3, 6, 7, -4, -9, -4, -2, -5, 10, -4, -8, 1, 3, 6, 7, 4, 9, -4, 10, 3, 4, 5, -1, 8, 1, -8, -4, -8, -1, -10, -4, 1, -6 };
        String operators = "+++++++--+++++-++--+++-++++++++-+++++++++-++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case96() {
        int[] B = { 6, 1, 6, 8, 5, 2, 1, 1, 1, 6, 3, -7, -2, -5, -6, -2, -10, -5, 5, 8, 4, 2, -5, 5, 3, -5, -2, -4, 1, 5, -9, -10, 3, -3, 5, -7, 6, 5, -1, 4, -2, -2, 3, 2, -7, -1, -10 };
        String operators = "-+++-+--++-+--+--+--+-+--++---++-+---+-++-+--+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case97() {
        int[] B = { -2, 1, -2, -4, 2, -1, -2, 2, -5, -4, 5, -5, 4, -3, 3, -4, -2, -1, 2, -1, 2, 2, 4, 5, -2, -2, -3, 1, -2, -5, -4, -4, 5, -2, 3, -3, 1, -4, -1, 2, -3, 5, -3, 5, -3, -4 };
        String operators = "-------+---+-------+--------------+-+---------";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case98() {
        int[] B = { 3, -2, -2, 4, 1, 1, 4, 4, -1, -2, -2, -1, 5, 5, -2, -2, 5, -1, -5, 3, -3, 3, 5, -5, 1, 2, 3, 4, 4, 4, 4, -3, 3, -4, -2, -2, 4, -4, 2, -2, 5, 1, 2, -3, -1, -2 };
        String operators = "---++++-+++++++++-++++++-+++-++-+++++++-++-++-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case99() {
        int[] B = { 2, -3, -1, -3, -4, -3, -5, -4, 1, 5, 2, -5, 1, 3, -4, -4, 4, 1, 2, -2, -3, -5, 2, -3, 2, -4, -5, 3, -5, 5, -3, -5, -2, 2, 5, -5, 2, 5, -4, 4, -3, -3, 3, -2, 1, 5, -3, -5, -2 };
        String operators = "+--+-++++++++++++----+-+--------+-+++-+-+--+---+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case100() {
        int[] B = { 665468908, -600472584, 121212979, -578402718, -749388998, 857620780, -101278665, 412064292, 304160862, 233830987, 941544311, -415509647, 297070223, 61048160, 190524648, 407755023, 767340434, 504208882, 260916980, 459097677, -867365276, -436933225, 509286136, -872733345, 279439254, -751196580, -250128996, -606495771, 512777957, -937781331, 925094916, -701794779, 449315261, 573137456, 568652351, -677212147, 421736616, 141364926, -471140619, 544737414, 777703886, 333650948, -27573507 };
        String operators = "++-+---+++-++++--+-+---+-+++++-+++--+++--+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case101() {
        int[] B = { -708225098, 303753193, 623855747, -175491241, -265553895, -113084984, -903543273, 924587465, 113858236, -580092388, 534395886, 324327155, 863582967, -559703029, -264282701, 331484606, -52139812, -479813091 };
        String operators = "-+--++-+-+++-++---";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case102() {
        int[] B = { -999999959, -999999910, 999999991, 999999930, 999999920, -999999936, 999999964, -999999914, -999999936, -999999901, 999999946, -999999933, -999999968, -999999981, -999999979, -999999944, 999999991, -999999966, 999999966, -999999989, 999999935, -999999995, 999999977, 999999936, 999999941, -999999927, 999999964, -999999953, -999999999, -999999991, 999999957, -999999966, 999999921, -999999963, -999999919, -999999909, -999999918, -999999963, 999999968, -999999982, 999999962, 999999985, 999999994, 999999921, -999999946, 999999901, 999999908, -999999919, -999999907 };
        String operators = "---+---+--++---+++---++-+---+++-++--+--++--+-+---";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case103() {
        int[] B = { -999999995, -999999914, -999999943, -999999998, 999999957, -999999947, -999999995, 999999961, -999999954, -999999949, 999999989, -999999935, -999999924, -999999919, 999999916, -999999914, -999999905, 999999992, 999999915, 999999965, 999999916, -999999924, 999999991, -999999988, -999999902, 999999982, 999999965, -999999908, -999999957, -999999910, -999999912, -999999960, -999999989, 999999931, 999999929, 999999915, -999999984, 999999929, 999999917, 999999990 };
        String operators = "--++-+++-+-+---+++-+-----+++++--++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case104() {
        int[] B = { 51, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        String operators = "+-------------------------------------------------";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case105() {
        int[] B = { 50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        String operators = "+-------------------------------------------------";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case106() {
        int[] B = { 52, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        String operators = "+-------------------------------------------------";
        assertEquals(2, importantsequence.getCount(B, operators));
    }

    @Test
    public void case107() {
        int[] B = {};
        String operators = "+-------------------------------------------------";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case108() {
        int[] B = {};
        String operators = "+-------------------------------------------------";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case109() {
        int[] B = {};
        String operators = "+-------------------------------------------------";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case110() {
        int[] B = { -777580846, 282032361, 118574439, 441361314, 667426311, -57738756, -277455973, 90476891, 671880906, 48165090, 112673243, -896767841, 912538789, 350557483, 13639128, 4642428, 149083753, 508230554, 206465318, -444957242, 7850615, -878267443, 679342420, 370883250, 106126282, -80655536, -217484186, 737010242, -590078924, 769502807, -232066416, -947591474, -759711079, 899646558, -399609522, 447316520, -314142478, 24597329, -714735696, 157312797, -888369840, -118744829, 589471170, -316191548, -519284853, 214811734, 716612633, -983678769, -779755618 };
        String operators = "-------------------------------------------------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case111() {
        int[] B = { -622836829, 564422897, -116742491, 595517474, 363521581, -958174955, -491775717, -830981607, -485585026, -437151964, -480751365, 595259578, -58793382, -288174754, 293707072, 812437524, 265558653, 288582113, -681840414, -248311169, -843782904, -221069002, 474446574, 747158747, -388457751, 12737187, 923343018, 140481937, 177904357, 32246290, 379301574, -922460915, -526495791, 183917571, -576222812, -300204679, 542218987, 708466908, 763954188, -67925057, 276761295, 209222211, 435987670, 134619537, -377661303, 70419725, 866614574, 55950708 };
        String operators = "------------------------------------------------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case112() {
        int[] B = { 999999979, 999999951, -999999949, 999999922, 999999989, -999999932, 999999907, 999999950, 999999943, 999999940, 999999924, 999999984, 999999944, 999999911, 999999995, 999999942, 999999911, -999999902, 999999935, -999999907, 999999932, 999999915, -999999999, -999999912, -999999964, 999999915, -999999988, -999999971, -999999994, -999999905, 999999949, 999999984, 999999935, -999999953, 999999993, 999999922, 999999973, -999999984, -999999940, 999999919, 999999920, 999999975, 999999934, 999999961, 999999979, -999999902, 999999957, 999999944 };
        String operators = "------------------------------------------------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case113() {
        int[] B = { 653096789, 669465169, 688147457, 271020851, 636952756, 928548678, 306849827, 756496271, 915447011, 219514503, 440462246, 328959422, 799413043, 740560536, 177177852, 132455527, 346676949, 489836078, 559221346, 487208130, 587160779, 26896742, 20091525, 442912318, 814743928, 609770451, 152631504, 283178700, 154230232, 134158726, 456552838, 100968028, 809086117, 949638604, 844211412, 617324392, 277396607, 654026544, 253064528, 774661240, 934836059, 423697303, 497719520, 550966303, 574051629, 617054259, 126672471, 238109619, 808431520, 753809823 };
        String operators = "++++++++++++-+++++++++++++++++++++++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case114() {
        int[] B = { 911637484, 463276285, 947602775, 442449227, 897150077, 924637466, 595815108, 552147461, 856132802, 715488325, 484399802, 980646296, 212651540, 992900646, 391609315, 421086996, 79402001, 684895839, 411842325, 433819724, 672993174, 608715376, 109275242, 118402066, 187362521, 104304508, 929713522, 677900409, 934574012, 308598393, 67438794, 945306367, 17948135, 469371825, 403945914, 15111183, 931316213, 818844112, 702183665, 892674510, 130952585, 49703549, 140287132, 278295566, 943420230, 227924637, 153371800, 726158297, 643842454, 561707818 };
        String operators = "++++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case115() {
        int[] B = { 577115880, 897093301, 704921136, 707381503, 16585592, 647228151, 666199250, 398839891, 22622825, 969083513, 349972392, 723978983, 546447750, 544686310, 535694048, 956466923, 276212199, 327112038, 266327269, 602923686, 948136347, 442920742, 40588779, 195376426, 665688137, 43904999, 310971694, 582965097, 994885460, 877107440, 74715081, 627075976, 784875988, 781182311, 953745564, 722696750, 926573976, 824693503, 23497349, 151878975, 957074424, 815751402, 305603815, 893072609, 679082183, 168239980, 983883186, 902459417, 177632235 };
        String operators = "+++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case116() {
        int[] B = { 999999907, 999999976, 999999918, 999999906, 999999915, 999999918, 999999901, 999999905, 999999910, 999999970, 999999909, 999999948, 999999914, 999999966, 999999955, 999999936, 999999937, 999999958, 999999905, 999999968, 999999932, 999999942, 999999922, 999999994, 999999916, 999999955, 999999986, 999999954, 999999944, 999999911, 999999925, 999999934, 999999925, 999999935, 999999993, 999999984, 999999993, 999999964, 999999903, 999999960, 999999916, 999999994, 999999962, 999999972, 999999959, 999999965, 999999952, 999999962 };
        String operators = "++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(999999483, importantsequence.getCount(B, operators));
    }

    @Test
    public void case117() {
        int[] B = { 999999967, 999999964, 999999998, 999999922, 999999973, 999999952, 999999902, 999999992, 999999905, 999999939, 999999985, 999999917, 999999916, 999999988, 999999955, 999999987, 999999951, 999999995, 999999933, 999999916, 999999978, 999999936, 999999901, 999999998, 999999939, 999999974, 999999976, 999999965, 999999949, 999999955, 999999951, 999999959, 999999909, 999999942, 999999929, 999999994, 999999994, 999999938, 999999918, 999999999, 999999915, 999999919, 999999917, 999999927, 999999908, 999999961, 999999954, 999999947, 999999932 };
        String operators = "+++++++++++++++-+++++++++++++++++++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case118() {
        int[] B = { 999999934, 999999986, 999999901, 999999910, 999999902, 999999956, 999999916, 999999981, 999999983, 999999939, 999999971, 999999910, 999999900, 999999920, 999999960, 999999947, 999999919, 999999959, 999999929, 999999987, 999999931, 999999940, 999999941, 999999949, 999999975, 999999979, 999999936, 999999989, 999999965, 999999949, 999999916, 999999963, 999999965, 999999971, 999999951, 999999956, 999999931, 999999929, 999999950, 999999911, 999999965, 999999910, 999999923, 999999986, 999999989, 999999983, 999999930, 1000000000, 999999963 };
        String operators = "+++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(999999634, importantsequence.getCount(B, operators));
    }

    @Test
    public void case119() {
        int[] B = { 3, -1, 7 };
        String operators = "-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case120() {
        int[] B = { 540, 2012, 540, 2012, 540, 2012, 540 };
        String operators = "-+-+-+-";
        assertEquals(1471, importantsequence.getCount(B, operators));
    }

    @Test
    public void case121() {
        int[] B = { 7, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 999999999, 1234, 4311 };
        String operators = "-------+--";
        assertEquals(999994453, importantsequence.getCount(B, operators));
    }

    @Test
    public void case122() {
        int[] B = { 1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "+---------";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case123() {
        int[] B = { -189596705, -734634603, -11574580, 53128855, 416582364, -833553592, 232993540, -7567199, -20732661, 471782175, -703913800, -371733528, 630174086, -443606048, -651875678, -159032719, 277657473, -908114599, -470065694, -108238238, -94055669, 279034138, 233625192, 811600457, -293575561, 121734112, -914787226, 909541989, 648762277, -595742029, -397440203, 328966885, -94524543, -512370449, 35401999, -625224418, -248685127, -414342578, -370889905, 638326935, 380744947, 147252682, 885099392, -260575117, 399663764, -548342136, -9181273, -31538172, 324320060, 89594804 };
        String operators = "+-----+++-++-+---+-++-+-++-+++++-+-+--+--+++-+-+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case124() {
        int[] B = { -1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 1000000000, 2 };
        String operators = "------+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case125() {
        int[] B = { 1000000 };
        String operators = "+";
        assertEquals(999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case126() {
        int[] B = { 1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "+---";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case127() {
        int[] B = { 1000000000, -1000000000, -1000000000 };
        String operators = "+--";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case128() {
        int[] B = { -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000, 1000000000 };
        String operators = "----------+";
        assertEquals(999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case129() {
        int[] B = {};
        String operators = "-------------------------------------------+-+-+-+";
        assertEquals(874695, importantsequence.getCount(B, operators));
    }

    @Test
    public void case130() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "---+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case131() {
        int[] B = { 999999999, 999999999, -999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999 };
        String operators = "---------------------------------------------+++++";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case132() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "-----+++++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case133() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "------------------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case134() {
        int[] B = { 2, 9, -1, -5, 10, 2, 6 };
        String operators = "-+--+--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case135() {
        int[] B = {};
        String operators = "+-------------------------------------------------";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case136() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "-----+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case137() {
        int[] B = { -1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 1000000000, 100 };
        String operators = "------+";
        assertEquals(99, importantsequence.getCount(B, operators));
    }

    @Test
    public void case138() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 100 };
        String operators = "----+";
        assertEquals(99, importantsequence.getCount(B, operators));
    }

    @Test
    public void case139() {
        int[] B = { -3, 5, 3 };
        String operators = "-++";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case140() {
        int[] B = { 1000000000, -1000000000 };
        String operators = "+-";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case141() {
        int[] B = { 5, 1, 1 };
        String operators = "+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case142() {
        int[] B = { 10, -1000 };
        String operators = "++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case143() {
        int[] B = { 1000000000, 1000000000, 1000000000, 2 };
        String operators = "---+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case144() {
        int[] B = {};
        String operators = "++++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case145() {
        int[] B = { -1000000000, -1000000000, -1000000000, 999999999, 999999999, 999999 };
        String operators = "---+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case146() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "---++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case147() {
        int[] B = { 1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "+----------";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case148() {
        int[] B = { 5, -1000000000, -1000000000, -1000000000, 5 };
        String operators = "+----";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case149() {
        int[] B = { 3, 3 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case150() {
        int[] B = {};
        String operators = "-------------------------------------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case151() {
        int[] B = { 1000000000 };
        String operators = "+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case152() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "----+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case153() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "---+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case154() {
        int[] B = { 2, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "+-----";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case155() {
        int[] B = { 100, 4, 51, -5, 24, 2, 151 };
        String operators = "+-+-+-+";
        assertEquals(16, importantsequence.getCount(B, operators));
    }

    @Test
    public void case156() {
        int[] B = { 1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "+----";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case157() {
        int[] B = { 55, 50, 20 };
        String operators = "+-+";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case158() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "---------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case159() {
        int[] B = { 5, -8, 9, -100, 6, 45 };
        String operators = "------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case160() {
        int[] B = {};
        String operators = "--------------------------------------------------";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case161() {
        int[] B = { 1, 1000000000, 1000000000 };
        String operators = "-++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case162() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 999999998, 999999999, 1000000000, 1000000000 };
        String operators = "---------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case163() {
        int[] B = { -2 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case164() {
        int[] B = { 1000000000, 1000000000 };
        String operators = "++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case165() {
        int[] B = { -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, -200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 200000000, 1000000000 };
        String operators = "----------------------------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case166() {
        int[] B = { 3, 1 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case167() {
        int[] B = { 3, 8, 4 };
        String operators = "+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case168() {
        int[] B = { 24, 1, 2, -1, 4 };
        String operators = "----+";
        assertEquals(2, importantsequence.getCount(B, operators));
    }

    @Test
    public void case169() {
        int[] B = { -5 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case170() {
        int[] B = { 1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "+---------++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case171() {
        int[] B = { 23, 22 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case172() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 123123 };
        String operators = "+++++++++++++++++++++++++++++++++++++++++++++++++-";
        assertEquals(999876876, importantsequence.getCount(B, operators));
    }

    @Test
    public void case173() {
        int[] B = {};
        String operators = "+----------------------------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case174() {
        int[] B = { 2000, 2000, 2000 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case175() {
        int[] B = { -1000000000 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case176() {
        int[] B = { 1000000000, 1000000000, 500000000, -10, -10, 100 };
        String operators = "--+--+";
        assertEquals(79, importantsequence.getCount(B, operators));
    }

    @Test
    public void case177() {
        int[] B = { 0 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case178() {
        int[] B = { 1000000000, 1000000000, 12345, 12345 };
        String operators = "++++";
        assertEquals(12344, importantsequence.getCount(B, operators));
    }

    @Test
    public void case179() {
        int[] B = { 10, 11 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case180() {
        int[] B = { 10, 5 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case181() {
        int[] B = { 1, -11 };
        String operators = "++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case182() {
        int[] B = { -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 122 };
        String operators = "----------+";
        assertEquals(121, importantsequence.getCount(B, operators));
    }

    @Test
    public void case183() {
        int[] B = { -100000, 43324324, -12321321, 43243443, -2313123, -32132321, 332333213, -321332, 3213213 };
        String operators = "+--+--+--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case184() {
        int[] B = { -1 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case185() {
        int[] B = { 10, -15 };
        String operators = "-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case186() {
        int[] B = { -1000000000, -1000000000, 1000000000 };
        String operators = "--+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case187() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 10, 7 };
        String operators = "-----+";
        assertEquals(6, importantsequence.getCount(B, operators));
    }

    @Test
    public void case188() {
        int[] B = { 123456, 472884, 90509388, 14748365, 28592, 2346089 };
        String operators = "-+-+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case189() {
        int[] B = { 100, 66, 3, -1, 7 };
        String operators = "----+";
        assertEquals(5, importantsequence.getCount(B, operators));
    }

    @Test
    public void case190() {
        int[] B = { -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 2 };
        String operators = "------------------------------+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case191() {
        int[] B = { 1 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case192() {
        int[] B = { 3, -1, 3 };
        String operators = "+-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case193() {
        int[] B = { 1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "+--------++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case194() {
        int[] B = { 2 };
        String operators = "+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case195() {
        int[] B = { -100, 1000 };
        String operators = "-+";
        assertEquals(899, importantsequence.getCount(B, operators));
    }

    @Test
    public void case196() {
        int[] B = { 2, 10 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case197() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "++++++++++++++++++++++++++++++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case198() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "-----+-----";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case199() {
        int[] B = { -999999999, 999999999, 1000000000 };
        String operators = "--+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case200() {
        int[] B = { -3, 5 };
        String operators = "-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case201() {
        int[] B = { 3, 1, 2 };
        String operators = "+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case202() {
        int[] B = { 5, 6, -8 };
        String operators = "+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case203() {
        int[] B = { 1, 1, 7 };
        String operators = "++-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case204() {
        int[] B = { 1000000000, 1000000000, 2323, 45345, 65756756, 123123, -123123, -213213, -5345, 4234, 123123, 5656, 4535, 7567, 1243234, 456346, 35432, 342423, 23423, 666666, 444444, 55555234, 243234, 234234, 44444, 12, 5554, -12, -34, -45, 343, 343, 34, 3453, 546456, 345345, 324234, 23423, 46456, 56456 };
        String operators = "+-+-+------+-+-+-+++++-+-+-+-+-+-+++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case205() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "-------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case206() {
        int[] B = { 1000000000, 1000000000 };
        String operators = "-+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case207() {
        int[] B = { 135, 105, 97, 186, 133 };
        String operators = "+++++";
        assertEquals(43, importantsequence.getCount(B, operators));
    }

    @Test
    public void case208() {
        int[] B = { 2, 2 };
        String operators = "-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case209() {
        int[] B = { -5, 15 };
        String operators = "-+";
        assertEquals(9, importantsequence.getCount(B, operators));
    }

    @Test
    public void case210() {
        int[] B = { 573262756, 806333545, -437217824, -223973548, 252483382 };
        String operators = "+----";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case211() {
        int[] B = { 300000000, 200000000 };
        String operators = "+-";
        assertEquals(99999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case212() {
        int[] B = { -10, 5 };
        String operators = "-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case213() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 10000000, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1, 0, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 10000, 0, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "-------------------------------------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case214() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 55 };
        String operators = "----+";
        assertEquals(54, importantsequence.getCount(B, operators));
    }

    @Test
    public void case215() {
        int[] B = { 1000000000, 4000000, 100000000, 1000000000 };
        String operators = "+-++";
        assertEquals(99999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case216() {
        int[] B = { -1, 5 };
        String operators = "-+";
        assertEquals(3, importantsequence.getCount(B, operators));
    }

    @Test
    public void case217() {
        int[] B = { 0, 0 };
        String operators = "-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case218() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "-------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case219() {
        int[] B = { 4, 4, 13, 4, 1 };
        String operators = "--+--";
        assertEquals(7, importantsequence.getCount(B, operators));
    }

    @Test
    public void case220() {
        int[] B = { 1000000000, 100, 1 };
        String operators = "--+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case221() {
        int[] B = { 999999999, 999999999 };
        String operators = "++";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case222() {
        int[] B = { 3, 3, 1 };
        String operators = "--+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case223() {
        int[] B = { 1000000000, 1 };
        String operators = "+-";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case224() {
        int[] B = { 10, -5 };
        String operators = "-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case225() {
        int[] B = { 12, 5, 5 };
        String operators = "+--";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case226() {
        int[] B = { 1000000000, -999999999, 1000000000 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case227() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "---+-+--------------";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case228() {
        int[] B = { 100, 10000 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case229() {
        int[] B = { 5, 7, 8, 9, 4 };
        String operators = "+++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case230() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "-----------------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case231() {
        int[] B = { 10, 11, 5 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case232() {
        int[] B = { 8424, -6252, 9998, 5051, 8763, 4674, 1802, -2730, -2074, -3557 };
        String operators = "++--++-+--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case233() {
        int[] B = { -1, -1, 4 };
        String operators = "--+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case234() {
        int[] B = { 2, 1 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case235() {
        int[] B = { 100000000, -100000000, 100000000, -100000000, 100000000, -100000000 };
        String operators = "+-+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case236() {
        int[] B = { 20, 10 };
        String operators = "++";
        assertEquals(9, importantsequence.getCount(B, operators));
    }

    @Test
    public void case237() {
        int[] B = { 1, 3, 2 };
        String operators = "--+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case238() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "---------------------------------------+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case239() {
        int[] B = { 5, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "+---------";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case240() {
        int[] B = { 1000 };
        String operators = "-";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case241() {
        int[] B = { -5, 10 };
        String operators = "-+";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case242() {
        int[] B = { 99999997, 1000000000 };
        String operators = "-+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case243() {
        int[] B = { -24586546, -1245744, 1, 1, 1, 13, 12, 999999999 };
        String operators = "++--+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case244() {
        int[] B = { -30 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case245() {
        int[] B = { 1, 1 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case246() {
        int[] B = { 3, 1, 3, -1, 3 };
        String operators = "+-+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case247() {
        int[] B = { -1, -1, -1, 27 };
        String operators = "---+";
        assertEquals(23, importantsequence.getCount(B, operators));
    }

    @Test
    public void case248() {
        int[] B = { 1, -2 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case249() {
        int[] B = { 100, 5, 100, 3 };
        String operators = "++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case250() {
        int[] B = { 999999999, -999999999, -999999999, -999999999, -999999999, -999999999, -999999999 };
        String operators = "+------";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case251() {
        int[] B = { 100000000, 100000000 };
        String operators = "++";
        assertEquals(99999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case252() {
        int[] B = { 1000000000, 1000000000, 1000000000, -1000000000, -1000000000, -1000000000, 1000000000 };
        String operators = "------+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case253() {
        int[] B = { 10000 };
        String operators = "-";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case254() {
        int[] B = { 1000000000, 40, 80 };
        String operators = "+-+";
        assertEquals(79, importantsequence.getCount(B, operators));
    }

    @Test
    public void case255() {
        int[] B = { -1000000000, -1000000000, -1000000000, -1000000000 };
        String operators = "----";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case256() {
        int[] B = { 999999999, -999999999, -999999999, -999999999, -999999999, -999999999 };
        String operators = "+-----";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case257() {
        int[] B = { -5, -5, 15 };
        String operators = "--+";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case258() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "++++++++++++++++++++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case259() {
        int[] B = { 1000000000, 2 };
        String operators = "+-";
        assertEquals(999999997, importantsequence.getCount(B, operators));
    }

    @Test
    public void case260() {
        int[] B = { 5, 10 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case261() {
        int[] B = { 540, 2012, 540, 2012, 540, 2012, 540, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        String operators = "-+-+-+--+-+-+--+-+-+--+-+-+--+-+-+--+-+-+--+-+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case262() {
        int[] B = { 1000000000, -1 };
        String operators = "--";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case263() {
        int[] B = { 1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 900000000 };
        String operators = "+-----";
        assertEquals(99999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case264() {
        int[] B = { -2, 2 };
        String operators = "-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case265() {
        int[] B = { 2, 2 };
        String operators = "++";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case266() {
        int[] B = { 100, 10, 10 };
        String operators = "+--";
        assertEquals(79, importantsequence.getCount(B, operators));
    }

    @Test
    public void case267() {
        int[] B = { 10, 1000 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case268() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "---+++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case269() {
        int[] B = { 10, -100, 10 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case270() {
        int[] B = { 8, 3, 1 };
        String operators = "+--";
        assertEquals(3, importantsequence.getCount(B, operators));
    }

    @Test
    public void case271() {
        int[] B = { 4, 4 };
        String operators = "-+";
        assertEquals(3, importantsequence.getCount(B, operators));
    }

    @Test
    public void case272() {
        int[] B = { 19, 43, 163, 23 };
        String operators = "+--+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case273() {
        int[] B = { 999999999 };
        String operators = "-";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case274() {
        int[] B = { 1000000000, -1000000000, 1000000000 };
        String operators = "+--";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case275() {
        int[] B = { 3, -1, 7 };
        String operators = "+--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case276() {
        int[] B = { -1000000000, -1000000000, -1000000000, -1000000000, 1000000000 };
        String operators = "----+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case277() {
        int[] B = { -100000000, 300000000 };
        String operators = "-+";
        assertEquals(199999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case278() {
        int[] B = { 3, -1, 7, 1000 };
        String operators = "+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case279() {
        int[] B = { 1, 1 };
        String operators = "-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case280() {
        int[] B = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
        String operators = "++++++++++";
        assertEquals(999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case281() {
        int[] B = { -4 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case282() {
        int[] B = { -2, 10 };
        String operators = "-+";
        assertEquals(7, importantsequence.getCount(B, operators));
    }

    @Test
    public void case283() {
        int[] B = { 2, 5, 2 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case284() {
        int[] B = { 1000000000 };
        String operators = "-";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case285() {
        int[] B = { 3, 1, 1 };
        String operators = "+--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case286() {
        int[] B = { 100, 60, 1 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case287() {
        int[] B = { 1000000000, 999999999 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case288() {
        int[] B = { 540, 212, 1540, 332012, 15340, 462012, 11540 };
        String operators = "-+-+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case289() {
        int[] B = { -1, 10 };
        String operators = "-+";
        assertEquals(8, importantsequence.getCount(B, operators));
    }

    @Test
    public void case290() {
        int[] B = { -2, 4 };
        String operators = "-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case291() {
        int[] B = { 1, 4, 0 };
        String operators = "+++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case292() {
        int[] B = { 5, -5 };
        String operators = "-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case293() {
        int[] B = { 100, 1, 3 };
        String operators = "++-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case294() {
        int[] B = { 284367182, -500558632, -220339521 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case295() {
        int[] B = { 7, -1, 3 };
        String operators = "+-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case296() {
        int[] B = { -999999342, 999999422, 999999829, 999999303, 999999471 };
        String operators = "----+";
        assertEquals(999999470, importantsequence.getCount(B, operators));
    }

    @Test
    public void case297() {
        int[] B = { 999999999, 999999997 };
        String operators = "++";
        assertEquals(999999996, importantsequence.getCount(B, operators));
    }

    @Test
    public void case298() {
        int[] B = { 3, -1, 2 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case299() {
        int[] B = { 1000000000, 1000000000, 1000000000, -1000000000, -1000000000, 1000000000, 1000000000 };
        String operators = "---+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case300() {
        int[] B = { 1000000000, 1000000000, 1000000000, 999999999, 999999999, 999999999, 999999999 };
        String operators = "---++++";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case301() {
        int[] B = { 1, 10 };
        String operators = "+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case302() {
        int[] B = { 1, 2, 3 };
        String operators = "---";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case303() {
        int[] B = { 3, 1, 1, 1 };
        String operators = "+---";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case304() {
        int[] B = { 540, 2012, 540, 2012, 540, 2012, 540, 321312, 123123, 123123, 111111111, 232323, 123123, 12, 213123, 123, 213, 123, 123, 23, 2323, 232, 2323, 232, 23, 23, 2, 2, 2, 2, 2, 2 };
        String operators = "++++++++++++++--++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case305() {
        int[] B = { -100000000 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case306() {
        int[] B = { 4, -5, 10 };
        String operators = "--+";
        assertEquals(4, importantsequence.getCount(B, operators));
    }

    @Test
    public void case307() {
        int[] B = { 1, 2, 3 };
        String operators = "-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case308() {
        int[] B = { 999999999 };
        String operators = "+";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case309() {
        int[] B = { 1000000000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
        String operators = "+-+-++-++-++++--+++-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case310() {
        int[] B = {};
        String operators = "-------------------------+++++++++++++++++++++++++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case311() {
        int[] B = { -1000000000, -1000000000, -147483647 };
        String operators = "---";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case312() {
        int[] B = { -500 };
        String operators = "-";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case313() {
        int[] B = {};
        String operators = "++++++++++++++++++++++++++++++++++++++++++++++++++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case314() {
        int[] B = { -40, 10, -30, -60, 20 };
        String operators = "--+--";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case315() {
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        String operators = "-+-+-+-+-";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case316() {
        int[] B = { 1000000000, 1000000000, 1000000000, 10, 1000000000 };
        String operators = "----+";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case317() {
        int[] B = { 1000000000, -1000000000, 1000000000 };
        String operators = "+-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case318() {
        int[] B = { 86, 61, 55 };
        String operators = "--+";
        assertEquals(54, importantsequence.getCount(B, operators));
    }

    @Test
    public void case319() {
        int[] B = { -1000, -1000 };
        String operators = "++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case320() {
        int[] B = { 1000000000, 999999999, -1000000000, 123832872, 4, 1000000000 };
        String operators = "-+----";
        assertEquals(876167122, importantsequence.getCount(B, operators));
    }

    @Test
    public void case321() {
        int[] B = { -1, 3, 7 };
        String operators = "-++";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case322() {
        int[] B = { 109098006, 317458034, -73016547, 455777924, -432039350, -445751550, -291600664, 172977964, -287537461, -367580910, 297911091, -489556578, -138892044, 287147476, 260204500, 302299993, -344876235, -434470350, 415479284, -375856689, -484693616, -11961528, 236740751, -420654362, -283151331, -188230939, -250419977, 71854968, -327984249, -465950194, 492974928, -139284012, -431453299, -428417669, 171255573, -29978053, -447967870, -188598248, 325767058, -283120796, 148690126, 747397, 181536873, 389901048, 274064234, -97209706, 292315662, 471808534, -297113497 };
        String operators = "------+-+-++---++++---+-+++-+---+---+++++++++++-+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case323() {
        int[] B = { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000 };
        String operators = "++++++";
        assertEquals(999999999, importantsequence.getCount(B, operators));
    }

    @Test
    public void case324() {
        int[] B = { -2, 3, 2 };
        String operators = "-++";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case325() {
        int[] B = { 1000000000, 1000000000, 1000000000 };
        String operators = "---";
        assertEquals(-1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case326() {
        int[] B = { 1, 1000000000, 1, 1000000000, 1000000000 };
        String operators = "-+-++";
        assertEquals(999999998, importantsequence.getCount(B, operators));
    }

    @Test
    public void case327() {
        int[] B = { -4, 6 };
        String operators = "-+";
        assertEquals(1, importantsequence.getCount(B, operators));
    }

    @Test
    public void case328() {
        int[] B = { -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, 1000000000 };
        String operators = "-----+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

    @Test
    public void case329() {
        int[] B = { 100000000, 99999993 };
        String operators = "+-";
        assertEquals(6, importantsequence.getCount(B, operators));
    }

    @Test
    public void case330() {
        int[] B = { -101 };
        String operators = "+";
        assertEquals(0, importantsequence.getCount(B, operators));
    }

}
