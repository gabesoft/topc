package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class TheMoviesLevelOneDivOneTest {
    TheMoviesLevelOneDivOne themovieslevelonedivone = new TheMoviesLevelOneDivOne();

    @Test
    public void case1() {
        int n = 2;
        int m = 3;
        int[] row = { 1, 2 };
        int[] seat = { 2, 3 };
        assertEquals(1L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case2() {
        int n = 2;
        int m = 3;
        int[] row = { 1, 1, 1, 2, 2, 2 };
        int[] seat = { 1, 2, 3, 1, 2, 3 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case3() {
        int n = 4;
        int m = 7;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(23L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case4() {
        int n = 10;
        int m = 8;
        int[] row = { 1, 9, 6, 10, 6, 7, 9, 3, 9, 2 };
        int[] seat = { 7, 7, 3, 3, 7, 1, 5, 1, 6, 2 };
        assertEquals(54L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case5() {
        int n = 7;
        int m = 9;
        int[] row = { 5, 4, 6, 5, 4, 3, 6 };
        int[] seat = { 9, 3, 4, 4, 4, 9, 3 };
        assertEquals(46L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case6() {
        int n = 5;
        int m = 1;
        int[] row = { 3, 5, 4, 1, 2 };
        int[] seat = { 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case7() {
        int n = 1;
        int m = 5;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(3L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case8() {
        int n = 5;
        int m = 1;
        int[] row = { 4, 1, 3, 2, 5 };
        int[] seat = { 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case9() {
        int n = 4;
        int m = 2;
        int[] row = { 3, 2, 1, 4, 2, 3, 4, 1 };
        int[] seat = { 2, 2, 1, 2, 1, 1, 1, 2 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case10() {
        int n = 7;
        int m = 1;
        int[] row = { 2, 5, 4, 3, 6, 1, 7 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case11() {
        int n = 5;
        int m = 2;
        int[] row = { 1, 4, 2, 3, 5, 2, 1, 5, 3, 4 };
        int[] seat = { 1, 1, 1, 2, 2, 2, 2, 1, 1, 2 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case12() {
        int n = 9;
        int m = 1;
        int[] row = { 6, 7, 4, 1, 2, 5, 3, 9, 8 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case13() {
        int n = 1;
        int m = 5;
        int[] row = { 1, 1, 1, 1, 1 };
        int[] seat = { 1, 5, 3, 2, 4 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case14() {
        int n = 7;
        int m = 2;
        int[] row = { 5, 7, 2, 1, 7, 2, 6, 4, 5, 4, 6, 3, 1, 3 };
        int[] seat = { 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case15() {
        int n = 3;
        int m = 5;
        int[] row = { 2, 2, 2, 1, 3, 2, 3, 1, 2, 3, 1, 1, 3, 3, 1 };
        int[] seat = { 1, 3, 5, 3, 1, 2, 4, 2, 4, 3, 1, 5, 2, 5, 4 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case16() {
        int n = 25;
        int m = 1;
        int[] row = { 6, 13, 7, 12, 21, 4, 3 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case17() {
        int n = 29;
        int m = 1;
        int[] row = { 3, 14, 11 };
        int[] seat = { 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case18() {
        int n = 18;
        int m = 1;
        int[] row = { 6, 4, 12 };
        int[] seat = { 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case19() {
        int n = 45;
        int m = 1;
        int[] row = { 6, 32, 19 };
        int[] seat = { 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case20() {
        int n = 37;
        int m = 1;
        int[] row = { 25 };
        int[] seat = { 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case21() {
        int n = 25;
        int m = 2;
        int[] row = { 6, 13, 7, 12, 21, 4, 3 };
        int[] seat = { 2, 1, 2, 2, 1, 1, 1 };
        assertEquals(18L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case22() {
        int n = 29;
        int m = 2;
        int[] row = { 8, 11, 26, 9, 13, 6, 18, 13, 20, 29, 15, 1, 23, 28, 12, 21, 9, 23, 5, 7, 24, 6, 4, 3, 22, 24, 14, 27, 11, 4, 21, 1, 14, 5, 28 };
        int[] seat = { 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2 };
        assertEquals(6L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case23() {
        int n = 21;
        int m = 2;
        int[] row = { 20, 17, 1, 17, 19, 18, 13, 16, 12, 15, 21, 9, 5, 12, 10, 18, 10, 14, 4, 15, 7, 14, 11, 8, 21 };
        int[] seat = { 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2 };
        assertEquals(3L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case24() {
        int n = 11;
        int m = 2;
        int[] row = { 1, 3, 1, 4, 4, 5, 6, 9 };
        int[] seat = { 2, 2, 1, 1, 2, 2, 1, 2 };
        assertEquals(5L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case25() {
        int n = 1;
        int m = 2;
        int[] row = { 1, 1 };
        int[] seat = { 2, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case26() {
        int n = 25;
        int m = 4;
        int[] row = { 20, 16, 23, 15, 20, 12, 3, 13, 4, 22, 25, 3, 22, 7, 9, 24, 13, 3, 4, 18, 15, 17, 21, 23, 5, 2, 13, 24, 5, 10, 13, 16, 7, 5, 23, 22, 4, 6, 18, 11, 24, 19, 7, 14, 19, 19, 17 };
        int[] seat = { 4, 2, 3, 1, 1, 4, 2, 1, 4, 3, 1, 3, 1, 4, 4, 2, 4, 1, 1, 3, 3, 1, 3, 1, 3, 4, 3, 1, 4, 3, 2, 3, 2, 2, 2, 2, 3, 2, 4, 3, 3, 3, 1, 3, 1, 4, 4 };
        assertEquals(22L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case27() {
        int n = 46;
        int m = 4;
        int[] row = { 3, 1, 25, 19, 16, 16, 39, 12, 6, 26, 11, 4, 17, 5, 21, 21, 22, 43, 34, 33, 16, 27, 27, 42, 37, 5, 19, 15, 13, 40, 30, 31, 2, 43, 44, 32, 29, 39, 3, 6, 36, 40, 15, 43, 4, 8, 1 };
        int[] seat = { 3, 1, 4, 4, 3, 1, 2, 4, 1, 4, 3, 1, 1, 2, 4, 2, 2, 1, 1, 2, 2, 3, 1, 2, 1, 3, 1, 1, 4, 3, 4, 4, 3, 2, 3, 3, 4, 4, 2, 2, 1, 4, 3, 3, 4, 4, 4 };
        assertEquals(78L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case28() {
        int n = 8;
        int m = 4;
        int[] row = { 8, 8, 4, 3, 1, 3, 4, 6, 5, 5, 7, 5, 7, 4, 7, 6, 8, 1, 7, 6, 1, 2, 8, 3, 2, 6, 2, 3, 5, 4, 1, 2 };
        int[] seat = { 4, 1, 1, 3, 1, 1, 4, 4, 4, 1, 1, 3, 3, 3, 4, 3, 3, 4, 2, 1, 2, 2, 2, 4, 3, 2, 1, 2, 2, 2, 3, 4 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case29() {
        int n = 24;
        int m = 4;
        int[] row = { 21, 20, 17, 12, 1, 24, 6, 23, 4, 2, 12, 9, 13, 15, 20, 17, 15, 14, 23, 22, 18, 22, 8, 24, 16, 5, 9, 17, 10, 19, 4, 22, 5, 16, 2, 12, 2, 11, 17, 7, 11, 3, 19, 7, 15, 10, 14 };
        int[] seat = { 3, 4, 1, 1, 1, 2, 4, 3, 4, 4, 3, 3, 2, 2, 2, 2, 1, 4, 4, 2, 2, 1, 3, 1, 1, 1, 2, 4, 4, 4, 1, 3, 4, 3, 1, 2, 2, 4, 3, 4, 2, 4, 3, 2, 4, 1, 1 };
        assertEquals(17L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case30() {
        int n = 16;
        int m = 4;
        int[] row = { 9, 10, 1, 7, 5, 13, 14, 12, 3, 14, 12, 13, 7, 2, 5, 6, 3, 2, 11, 16, 14, 15, 8, 4, 9, 12, 15, 5, 1, 4, 8, 11, 2, 5, 6, 11, 10, 14, 10, 13, 9, 11, 2, 6, 12, 1, 15 };
        int[] seat = { 3, 4, 3, 4, 1, 1, 1, 3, 2, 4, 4, 3, 3, 3, 2, 1, 3, 4, 1, 1, 2, 2, 3, 2, 2, 2, 1, 3, 1, 1, 4, 3, 1, 4, 3, 2, 3, 3, 2, 4, 1, 4, 2, 2, 1, 4, 4 };
        assertEquals(5L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case31() {
        int n = 25;
        int m = 42;
        int[] row = { 6, 13, 7, 12, 21, 4, 3 };
        int[] seat = { 6, 21, 28, 30, 15, 1, 19 };
        assertEquals(1012L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case32() {
        int n = 29;
        int m = 22;
        int[] row = { 20, 9, 9, 6, 13, 3, 14, 14, 28, 11, 24, 5, 9, 28, 4, 21, 24, 12, 28, 3, 9, 15, 23, 13, 8, 6, 20, 8, 26, 28, 22, 28, 11, 13, 23 };
        int[] seat = { 8, 11, 22, 16, 17, 10, 16, 3, 12, 17, 15, 7, 9, 1, 12, 22, 18, 19, 20, 18, 12, 1, 5, 1, 5, 17, 20, 7, 18, 11, 11, 13, 11, 2, 8 };
        assertEquals(549L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case33() {
        int n = 23;
        int m = 14;
        int[] row = { 2, 2, 22, 3, 11, 14, 21, 15, 16, 4, 18, 10, 4, 23, 15, 6, 19, 2, 19, 15, 8, 20 };
        int[] seat = { 3, 14, 11, 11, 9, 3, 2, 5, 10, 13, 4, 1, 14, 4, 7, 13, 10, 2, 6, 9, 12, 12 };
        assertEquals(260L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case34() {
        int n = 11;
        int m = 43;
        int[] row = { 10, 8, 2, 11, 6, 4, 6, 9, 10, 11, 8, 9, 3, 11, 6, 4, 6, 2, 11, 6 };
        int[] seat = { 5, 27, 2, 43, 35, 32, 26, 17, 36, 10, 7, 22, 25, 14, 6, 41, 21, 4, 37, 19 };
        assertEquals(423L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case35() {
        int n = 11;
        int m = 5;
        int[] row = { 9, 4, 10, 5 };
        int[] seat = { 4, 5, 4, 5 };
        assertEquals(38L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case36() {
        int n = 47;
        int m = 47;
        int[] row = { 35, 20, 14, 11, 34, 21, 7, 4, 35, 5, 9, 7, 21, 43, 6, 22, 32, 45, 2, 27, 17, 32, 42, 31, 25, 8, 41, 2, 46, 16, 34, 11, 25, 39, 14, 17, 19, 3, 26, 37, 29, 45, 32, 45, 46, 7, 1 };
        int[] seat = { 5, 36, 24, 22, 32, 27, 7, 44, 27, 9, 35, 27, 19, 13, 27, 25, 25, 46, 13, 9, 2, 45, 42, 28, 29, 4, 45, 12, 24, 29, 30, 31, 10, 13, 35, 13, 40, 28, 15, 32, 13, 15, 11, 22, 44, 10, 24 };
        assertEquals(2069L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case37() {
        int n = 47;
        int m = 47;
        int[] row = { 36, 21, 19, 39, 22, 21, 28, 11, 42, 5, 21, 23, 16, 7, 42, 23, 38, 2, 46, 38, 23, 22, 45, 44, 41, 42, 33, 23, 10, 8, 39, 15, 42, 47, 29, 28, 23, 34, 21, 10, 21, 12, 16, 31, 17, 4, 7 };
        int[] seat = { 46, 18, 21, 9, 3, 37, 44, 29, 25, 21, 15, 45, 42, 47, 15, 38, 25, 1, 5, 5, 20, 23, 39, 38, 7, 29, 45, 9, 11, 21, 29, 33, 10, 41, 47, 29, 22, 10, 11, 35, 26, 12, 35, 5, 39, 36, 26 };
        assertEquals(2071L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case38() {
        int n = 47;
        int m = 47;
        int[] row = { 40, 19, 9, 37, 2, 25, 20, 12, 35, 8, 37, 5, 4, 37, 15, 47, 19, 33, 13, 4, 27, 1, 15, 19, 20, 17, 26, 18, 33, 37, 5, 7, 35, 3, 6, 10, 37, 16, 23, 6, 28, 46, 5, 7, 6, 27, 41 };
        int[] seat = { 32, 16, 22, 10, 21, 32, 26, 9, 36, 19, 6, 41, 6, 27, 4, 31, 13, 47, 40, 7, 44, 26, 39, 23, 46, 44, 13, 6, 25, 1, 13, 13, 33, 28, 18, 11, 12, 19, 42, 25, 7, 17, 3, 25, 44, 42, 28 };
        assertEquals(2071L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case39() {
        int n = 47;
        int m = 47;
        int[] row = { 13, 25, 22, 20, 30, 40, 8, 47, 23, 1, 29, 15, 22, 32, 15, 41, 21, 17, 41, 34, 41, 2, 41, 28, 21, 44, 44, 26, 23, 11, 39, 6, 4, 18, 5, 46, 10, 4, 32, 3, 37, 15, 36, 43, 34, 22, 12 };
        int[] seat = { 34, 8, 31, 27, 16, 26, 11, 36, 11, 24, 1, 3, 42, 30, 9, 13, 34, 29, 22, 11, 47, 23, 17, 40, 1, 39, 2, 34, 12, 36, 33, 31, 42, 1, 30, 33, 26, 12, 10, 10, 16, 46, 7, 36, 26, 28, 11 };
        assertEquals(2073L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case40() {
        int n = 47;
        int m = 47;
        int[] row = { 47, 32, 2, 37, 40, 30, 40, 7, 29, 19, 23, 43, 7, 30, 37, 10, 15, 25, 40, 12, 3, 22, 7, 26, 25, 27, 41, 11, 26, 20, 45, 41, 14, 22, 19, 30, 23, 29, 28, 41, 2, 21, 7, 35, 16, 22, 31 };
        int[] seat = { 12, 4, 1, 45, 5, 8, 27, 18, 22, 28, 14, 19, 39, 4, 35, 3, 6, 12, 45, 29, 31, 40, 5, 11, 44, 14, 13, 20, 9, 26, 33, 23, 20, 9, 41, 42, 46, 26, 13, 44, 26, 45, 21, 47, 9, 23, 34 };
        assertEquals(2070L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case41() {
        int n = 47;
        int m = 44;
        int[] row = { 45, 3, 25, 9, 19, 26, 39, 7, 6, 21, 8, 42, 17, 34, 27, 46, 2, 2, 22, 14, 40, 20, 14, 37, 1, 16, 20, 29, 17, 31, 35, 11, 43, 32, 21, 41, 25, 19, 45, 35, 34, 4, 5, 41 };
        int[] seat = { 44, 44, 44, 43, 44, 44, 43, 43, 44, 43, 44, 43, 43, 44, 43, 44, 43, 44, 43, 44, 44, 44, 43, 43, 43, 44, 43, 44, 44, 44, 44, 43, 43, 43, 44, 44, 43, 43, 43, 43, 43, 43, 44, 43 };
        assertEquals(1965L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case42() {
        int n = 44;
        int m = 44;
        int[] row = { 37, 3, 27, 39, 19, 6, 20, 24, 28, 14, 32, 24, 32, 41, 21, 9, 10, 26, 44, 17, 36, 22, 19, 5, 12, 43, 22, 31, 44, 30, 9, 4, 42, 35, 38, 11, 33, 18, 21, 37, 11, 2, 40, 31, 10 };
        int[] seat = { 44, 44, 44, 43, 44, 44, 43, 43, 43, 44, 44, 44, 43, 43, 43, 44, 44, 44, 44, 43, 43, 43, 43, 44, 43, 43, 44, 43, 43, 44, 43, 43, 43, 43, 43, 44, 43, 44, 44, 43, 43, 43, 44, 44, 43 };
        assertEquals(1833L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case43() {
        int n = 44;
        int m = 46;
        int[] row = { 40, 8, 21, 25, 14, 38, 34, 1, 44, 19, 41, 31, 9, 39, 6, 15, 43, 18, 36, 4, 5, 23, 27, 42, 11, 38, 34, 24, 33, 37, 9, 30, 8, 21, 35, 32, 12, 14, 6, 2, 29, 43, 3, 16 };
        int[] seat = { 46, 45, 45, 46, 45, 45, 45, 46, 45, 46, 45, 46, 46, 45, 45, 45, 45, 46, 45, 46, 45, 45, 46, 45, 45, 46, 46, 46, 46, 46, 45, 46, 46, 46, 46, 46, 45, 46, 46, 46, 45, 46, 45, 45 };
        assertEquals(1923L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case44() {
        int n = 44;
        int m = 44;
        int[] row = { 43, 16, 12, 6, 12, 6, 38, 30, 34, 15, 10, 5, 4, 5, 14, 42, 11, 42, 32, 2, 11, 9, 22, 32, 34, 24, 33, 1, 3, 13, 43, 7, 16, 36, 36, 21, 14, 39, 29, 39, 33, 4, 35, 38 };
        int[] seat = { 43, 43, 43, 43, 44, 44, 43, 44, 43, 43, 43, 43, 44, 44, 43, 44, 43, 43, 44, 43, 44, 43, 44, 43, 44, 43, 43, 43, 43, 44, 44, 44, 44, 44, 43, 43, 44, 43, 43, 44, 44, 43, 44, 44 };
        assertEquals(1839L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case45() {
        int n = 47;
        int m = 44;
        int[] row = { 45, 3, 25, 9, 19, 26, 39, 7, 6, 21, 8, 42, 17, 34, 27, 46, 2, 2, 22, 14, 40, 20, 14, 37, 1, 16, 20, 29, 17, 31, 35, 11, 43, 32, 21, 41, 25, 19, 45, 35, 34, 4, 5, 41 };
        int[] seat = { 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1 };
        assertEquals(1967L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case46() {
        int n = 44;
        int m = 44;
        int[] row = { 37, 3, 27, 39, 19, 6, 20, 24, 28, 14, 32, 24, 32, 41, 21, 9, 10, 26, 44, 17, 36, 22, 19, 5, 12, 43, 22, 31, 44, 30, 9, 4, 42, 35, 38, 11, 33, 18, 21, 37, 11, 2, 40, 31, 10 };
        int[] seat = { 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1 };
        assertEquals(1838L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case47() {
        int n = 44;
        int m = 46;
        int[] row = { 40, 8, 21, 25, 14, 38, 34, 1, 44, 19, 41, 31, 9, 39, 6, 15, 43, 18, 36, 4, 5, 23, 27, 42, 11, 38, 34, 24, 33, 37, 9, 30, 8, 21, 35, 32, 12, 14, 6, 2, 29, 43, 3, 16 };
        int[] seat = { 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1 };
        assertEquals(1921L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case48() {
        int n = 757148;
        int m = 167851001;
        int[] row = { 40265, 477797, 51850, 226435, 597007, 347964, 496541 };
        int[] seat = { 156045366, 56587609, 56047386, 2576798, 3615545, 35766291, 137336163 };
        assertEquals(127088048947986L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case49() {
        int n = 683447134;
        int m = 950090227;
        int[] row = { 549646417, 374079501, 36629217, 80835681, 21417563, 22774135, 116752252, 257655784, 40873981, 480572137, 86546365, 653352031 };
        int[] seat = { 278840199, 466701607, 366496749, 436291073, 37379061, 119818908, 194041605, 84970744, 8670529, 222071041, 247776868, 106923811 };
        assertEquals(649336442001112260L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case50() {
        int n = 138791611;
        int m = 73037939;
        int[] row = { 64330753, 19482151, 97556908, 25455634, 52809583, 26156444, 36444399, 136135827, 14555683, 232948, 104482891, 89499443, 118473611, 17291523, 21416557, 81907379, 34644511, 101759865, 106697011, 26251201, 68665077, 130998233, 16382325, 136198441, 28813551, 70778345, 63960394, 62778795, 79972326, 11473443 };
        int[] seat = { 50548668, 11245629, 46334198, 42529995, 46696323, 32822508, 48849356, 71171022, 31472034, 1559874, 63360106, 35165087, 48711752, 6337643, 46521319, 13670293, 4877744, 18050299, 32383765, 27168831, 1740977, 67785513, 67836165, 789453, 29585139, 46989845, 250903, 37470445, 46543502, 50647921 };
        assertEquals(10137053079138058L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case51() {
        int n = 601621399;
        int m = 33763105;
        int[] row = { 192515623, 101289133 };
        int[] seat = { 23346575, 4995889 };
        assertEquals(20312605863062492L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case52() {
        int n = 27851201;
        int m = 52717531;
        int[] row = { 12434409, 19800257, 6244049, 27551834, 12189031, 5538790, 8394670, 4867266, 26445445, 18484671, 1875482, 22386079, 88071, 8227231, 21616906, 16027238, 4462427, 1189609, 20526461, 12425523, 17778440, 4906634, 13459343, 5678243, 10766785, 8773654, 10769217, 15530270, 5049295, 15731840, 8197603, 20771514, 7528249 };
        int[] seat = { 34411820, 37618255, 40728221, 27062279, 2499158, 50708288, 17706048, 44081425, 45096347, 34833260, 43896134, 34589889, 3119816, 23204364, 37192363, 18928767, 44639718, 45868257, 50123331, 41111997, 39894760, 11961136, 43406694, 20617443, 22685452, 19695112, 23520447, 36856117, 52486043, 52007498, 172789, 50311667, 18288337 };
        assertEquals(1468246524253464L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case53() {
        int n = 1757001;
        int m = 36905331;
        int[] row = { 324555, 700578, 1532437, 668144, 884242, 180302, 1298902, 1202632, 488770, 173604, 1223338, 772219, 1400584, 756737, 332160, 43087, 1015181, 1615117, 551201, 1228942, 852196, 60929, 71783, 236875, 412458, 249969, 364858, 94813, 1208888 };
        int[] seat = { 15416989, 14323190, 7661741, 36440171, 16619265, 36693594, 17353261, 11938978, 23721058, 10009786, 25942713, 18939286, 14829018, 2511013, 20068053, 1875535, 15052549, 25378288, 24479903, 1088920, 5967121, 1840327, 31285287, 27920270, 36097622, 11773350, 3655076, 33069688, 1660016 };
        assertEquals(64842701715272L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case54() {
        int n = 106814401;
        int m = 28761175;
        int[] row = { 57414326, 41252251 };
        int[] seat = { 295446, 1517701 };
        assertEquals(3072107572866770L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case55() {
        int n = 483260516;
        int m = 414942301;
        int[] row = { 155265663 };
        int[] seat = { 43436159 };
        assertEquals(200525230008226798L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case56() {
        int n = 11073109;
        int m = 261574081;
        int[] row = { 7656526, 2410170, 7603398, 3221932, 10988564, 3731179, 10165919, 5842943, 4764301, 6185298, 9480007, 8803444, 6279230, 5326704, 7818981, 80791, 4562955, 3388079, 10499355, 9567490, 4312622, 8371246, 3109456, 10383398, 4917649, 7933004, 10268448 };
        int[] seat = { 3460867, 199760711, 46166704, 70562761, 144267311, 189268951, 97021128, 18903751, 239846734, 132044470, 228381120, 144640225, 150633605, 219357443, 15185845, 191041648, 2934266, 175526846, 149926090, 257104164, 50890065, 237153660, 49118808, 24448489, 17563001, 26694220, 52256359 };
        assertEquals(2896438299414666L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case57() {
        int n = 517142305;
        int m = 681162225;
        int[] row = { 108536848, 217268821, 429421777, 65909571, 37190692, 73937521, 603205, 312840401, 419315689, 66921358, 17123971, 102089008, 214125305, 54918913, 511396804, 252522538, 20246117, 503565833, 23634370, 27753111, 64053606, 19492481, 298342157 };
        int[] seat = { 9760741, 614902313, 184699117, 265636341, 593009368, 81942644, 52924537, 77993476, 144647476, 117714638, 631025356, 549036601, 176826761, 56976144, 50869922, 176755553, 94271689, 550280257, 18011097, 23767966, 106872031, 37306519, 639380218 };
        assertEquals(352257802598286274L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case58() {
        int n = 1646353;
        int m = 51891522;
        int[] row = { 708713, 382727, 753325, 813322, 716826, 1392006, 711961, 1215131, 1408082, 595477, 1178281, 1411495, 485213, 434410, 950251, 1461912, 113773, 1115714, 245824, 588684, 416417, 1375222, 852601, 1185812, 135005, 197049, 542580, 889309, 171133, 1446332, 1039617, 1215357 };
        int[] seat = { 42283613, 36153787, 33708265, 48982576, 39717418, 7077958, 37171837, 48663825, 22541179, 9558836, 22311118, 11670607, 51585624, 40747177, 19290658, 36222760, 29143333, 25705788, 18181525, 705153, 45316468, 2693183, 3693691, 14809777, 47200337, 40453309, 21771219, 822529, 30415086, 48029713, 16204759, 23651715 };
        assertEquals(85431761272849L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case59() {
        int n = 638704829;
        int m = 30726209;
        int[] row = { 1857769, 40086151, 207779481, 126247087, 495044047, 106258801, 41789476, 13777213, 158164553, 283859137, 191882695, 136402003 };
        int[] seat = { 8903855, 29331259, 26582989, 16314927, 12380423, 12988741, 10124463, 24693042, 16541925, 15290101, 3951759, 248299 };
        assertEquals(19624977426458408L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case60() {
        int n = 268248801;
        int m = 447745321;
        int[] row = { 42851952, 16374601, 186996013, 250111751, 241744400, 46851736, 28882420, 211217254, 23434687, 8564921, 101314825, 52295920, 10534591, 47933176, 60282694, 205166830, 89313181, 175658497, 30752174, 235305577, 91485361, 146379172, 164001564, 168149697, 246287743, 101412625, 111299308, 152807210, 191494719, 141073900 };
        int[] seat = { 285780081, 262305874, 219593414, 322423633, 4213536, 28860926, 270164947, 325397655, 94632949, 118664514, 5472476, 166351381, 406340551, 133423349, 182463539, 112353176, 1192137, 62536848, 39380950, 215014513, 101280186, 238952995, 219218482, 234774489, 136605886, 271538083, 234807445, 2114041, 106185163, 188540236 };
        assertEquals(120107145243361260L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case61() {
        int n = 100757148;
        int m = 1;
        int[] row = { 36629217, 4890852, 67787143, 59446065, 59810078, 43571498, 75705793, 21417563, 105948, 78522721, 15995104, 84161665, 76997146, 32230963, 15061833, 34699681, 9643369, 48809143, 86645104, 17584375, 63528349, 66131527, 37215529, 23779993, 597007, 71808057, 921233, 31051111, 56141488, 36547831, 26239573, 43275895, 12023979, 40873981, 10754248, 69967249, 47903381, 2631064, 31452501, 45860677, 77543545, 26137201, 86546365, 36826315, 80835681, 18498759 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case62() {
        int n = 655958105;
        int m = 1;
        int[] row = { 119602407, 238541448, 130119572, 278600081, 74187073, 103552571, 196833889, 346403443, 60569668, 407678041, 439816011, 52717531, 122674666, 60751697, 177873991, 186501223, 233578825, 466145677, 123774176, 330283357, 76473916, 36245871, 286739241, 92223251, 101563112, 95979126, 144162639, 394379241, 569458429, 82147847, 272277715, 480265849, 19800257, 212736847, 228487851, 523707697, 13459343, 20271344, 433795253, 55403035 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case63() {
        int n = 607755361;
        int m = 1;
        int[] row = { 57891720, 29386281, 49221667, 355800313, 36600877, 331592376, 483260516, 42860571, 110605386, 458799676, 57559271, 278514986, 50643601, 299487105, 595950717, 106566657, 477228097, 13772401, 59540376, 117308600, 93062349, 6473182, 1917161, 50335433, 258076799, 28976353, 333243725, 3025309, 452452851, 105690055, 230010817, 33084517, 289453753, 113881783, 455212561, 67270876, 49226084, 284942121, 178213201, 308315634, 285254784, 103093156 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case64() {
        int n = 859808281;
        int m = 1;
        int[] row = { 771876790, 194604499, 291145429, 755480917, 125394876, 430962301, 71313480, 98030729, 603649537, 5484811, 699041550, 6895937, 601013575, 40548209, 664463745, 589456561, 40913201, 238610876, 777507589, 129315079, 33041383, 374821406, 133611688, 213307873, 240981357, 267579871, 831600387, 52659133, 6144985, 131018593, 19163761, 155821, 395621666, 122443105, 293101186, 313747405, 740697557, 30135183, 347195044, 609458620, 69345415 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case65() {
        int n = 109342301;
        int m = 1;
        int[] row = { 26522014, 2362030, 77005618, 51229057, 22472357, 91814269, 36511201, 4867917, 50833050, 70132423, 96031400, 101471150, 57056170, 39435600, 12137644, 101449330, 9147915, 12014237, 28032919, 92322710, 34235407, 88916563, 71103259, 598165, 107959482, 105792989, 31430091, 20171228, 21991399, 90765220, 83421549, 74176049, 98263820, 12682143, 108967669, 39761141, 68387476, 10401647, 79093316, 2109889 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case66() {
        int n = 1;
        int m = 167851001;
        int[] row = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] seat = { 130893250, 2576798, 137336163, 139695685, 106923811, 99896433, 81296220, 130999605, 150378796, 37627775, 26190604, 56587609, 39202255, 37379061, 50113283, 29331901, 56047386, 33557677, 84970744, 12043130, 32324283, 8670529, 3612430, 82426873, 22701179, 54220040, 79925867, 114517947, 100589071, 87708701, 110710191, 9941526, 156045366, 30794747, 35766291, 150922940, 57599720, 110989198, 3615545, 48581613, 103301481, 22069159, 62803129, 133145006 };
        assertEquals(167850912L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case67() {
        int n = 1;
        int m = 136198441;
        int[] row = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] seat = { 92223251, 36245871, 76538406, 122674666, 92289410, 37737419, 115112374, 135281159, 60569668, 60635448, 13459343, 14342359, 55403035, 6203199, 105085472, 52717531, 78518471, 102343007, 7964198, 31220688, 43381471, 71670526, 57550354, 82147847, 76473916, 19800257, 60751697, 57886475, 123774176, 56892011, 76529012, 95979126, 20271344, 121982359, 29309314, 97380384, 74187073, 74006561, 41675550, 25199930, 119602407, 50302782, 24664665, 136079274 };
        assertEquals(136198352L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case68() {
        int n = 1;
        int m = 576539745;
        int[] row = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] seat = { 230010817, 124277965, 258076799, 316470400, 50643601, 316157737, 3025309, 113881783, 278514986, 308315634, 458799676, 103093156, 4764301, 477228097, 452452851, 333243725, 80441700, 89107336, 289453753, 6473182, 43436159, 36600877, 261574081, 483260516, 355800313, 106566657, 331592376, 13772401, 50335433, 105690055, 29386281, 57559271, 505755580, 28976353, 178213201, 493496026, 110605386, 455212561, 67270876, 299487105, 148524216, 42860571, 49221667, 33084517 };
        assertEquals(576539656L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case69() {
        int n = 1;
        int m = 603649537;
        int[] row = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] seat = { 294301238, 138297331, 45679561, 427963876, 382282839, 81040272, 188486651, 118686008, 204531810, 283182534, 152779249, 108351264, 377970536, 28475326, 246676570, 221871361, 598521637, 10674164, 466318, 6924001, 265228584, 503780753, 15919872, 158750584, 295481649, 489351811, 546050422, 287659897, 122775913, 260924626, 122846556, 21290631, 348720691, 41146301, 275225491, 159222273, 156986391, 42076531, 176473665, 113086054, 7433429, 130016979, 498490546, 76695724, 409317833 };
        assertEquals(603649446L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case70() {
        int n = 1;
        int m = 26522014;
        int[] row = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] seat = { 21138503, 283183, 8827619, 2205677, 19535941, 12547127, 26225931, 15848603, 23989553, 12544219, 25724693, 25655111, 1078379, 6539466, 11083579, 21582937, 10414391, 21389633, 20683149, 60975, 20537499, 2176493, 684157, 11759770, 1674403, 1466065, 3145375, 10395053, 15290101, 14002831, 14556344, 18893877, 5539847, 14243499, 3399901, 17312245, 14809640, 10638881, 19610931, 229747, 9836896, 6953651, 4590660, 8596783, 24930845, 14898977 };
        assertEquals(26521921L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case71() {
        int n = 757148;
        int m = 167851001;
        int[] row = { 378575, 378580, 378589, 378585, 378576, 378592, 378578, 378588, 378594, 378585, 378577, 378587, 378575, 378574, 378591, 378590, 378576, 378579, 378574, 378583, 378594, 378593, 378579, 378576, 378592, 378593, 378589, 378580, 378589, 378580, 378588, 378584, 378582, 378584, 378594, 378586, 378592, 378584, 378575, 378578, 378591, 378579, 378582, 378581 };
        int[] seat = { 1, 1, 167851001, 2, 2, 2, 1, 167851000, 1, 1, 167851001, 167851000, 167851000, 167851001, 2, 2, 167851001, 2, 2, 167851001, 2, 167851001, 1, 167851000, 167851001, 2, 1, 167851001, 2, 2, 2, 2, 1, 167851001, 167851001, 2, 167851000, 1, 167851001, 2, 167851001, 167851000, 167851001, 2 };
        assertEquals(127088048947944L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case72() {
        int n = 119602407;
        int m = 52890320;
        int[] row = { 59801216, 59801224, 59801205, 59801206, 59801219, 59801209, 59801218, 59801217, 59801207, 59801203, 59801214, 59801207, 59801221, 59801221, 59801213, 59801203, 59801216, 59801212, 59801221, 59801219, 59801219, 59801217, 59801223, 59801217, 59801219, 59801215, 59801212, 59801224, 59801209, 59801215, 59801215, 59801211, 59801214, 59801204, 59801223, 59801208, 59801208, 59801211, 59801211, 59801213, 59801211, 59801203, 59801218, 59801207 };
        int[] seat = { 2, 2, 2, 1, 52890320, 1, 2, 52890320, 1, 2, 52890319, 52890320, 52890320, 52890319, 52890320, 52890319, 52890320, 52890320, 2, 2, 52890319, 52890319, 52890320, 2, 1, 52890320, 2, 52890320, 2, 52890319, 2, 1, 2, 2, 2, 2, 52890320, 2, 52890319, 52890319, 52890320, 52890320, 52890320, 2 };
        assertEquals(6325809459397775L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case73() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 1, 1, 1000000000, 1, 1000000000, 1000000000, 1, 1, 1, 1, 1000000000, 1, 1, 1, 1, 1, 1, 1000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000, 1000000000, 1, 1, 1000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000, 1, 1, 1000000000, 1 };
        int[] seat = { 8465310, 358403181, 683447134, 133145006, 553666286, 194041605, 513494529, 278840199, 69909135, 106923811, 225450721, 87708701, 39202255, 37379061, 466701607, 3615545, 29331901, 48581613, 391749388, 33557677, 436291073, 939151438, 473038165, 659598369, 634446253, 554160985, 392289611, 150378796, 189920160, 139695685, 366496749, 84970744, 110710191, 247776868, 416998222, 368026285, 170427799, 103301481, 318773941, 222071041, 8670529, 675016434, 738066085, 82426873, 450219949, 35766291, 709031779 };
        assertEquals(999999998999999906L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case74() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 1, 1, 1, 1, 1, 1, 1, 1000000000, 1, 1, 1000000000, 1, 1, 1, 1, 1000000000, 1, 1000000000, 1, 1, 1, 1000000000, 1, 1, 1, 1, 1, 1, 1, 1000000000, 1000000000, 1, 1, 1, 1, 1000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000, 1000000000 };
        int[] seat = { 80133376, 455546031, 491315149, 248711871, 211859640, 8980027, 345474073, 70778793, 601621399, 486774961, 240430121, 423188885, 186085236, 647333037, 226140876, 6526001, 9856897, 57109680, 625828105, 125370429, 222807552, 661662373, 113190751, 469069513, 119711629, 4476636, 679854070, 36982251, 240524737, 700148239, 250532866, 850474297, 105043116, 160403321, 538807493, 260860997, 262342369, 220504717, 573534711, 128804733, 320516971, 330381357, 81507655, 97979506, 680257989, 393186914, 296129476 };
        assertEquals(999999998999999906L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case75() {
        int n = 20000000;
        int m = 3000000;
        int[] row = { 1, 2 };
        int[] seat = { 2, 3 };
        assertEquals(59999979999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case76() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 9, 6, 10, 6, 7, 9, 3, 9, 2 };
        int[] seat = { 7, 7, 3, 3, 7, 1, 5, 1, 6, 2 };
        assertEquals(999999998999999984L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case77() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(999999998999999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case78() {
        int n = 1234567;
        int m = 1234567;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(1524154442921L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case79() {
        int n = 1;
        int m = 1;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case80() {
        int n = 10000000;
        int m = 10000000;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(99999989999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case81() {
        int n = 1000000000;
        int m = 999999999;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(999999997999999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case82() {
        int n = 100000000;
        int m = 100000000;
        int[] row = { 1, 2 };
        int[] seat = { 2, 3 };
        assertEquals(9999999899999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case83() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 2 };
        int[] seat = { 2, 3 };
        assertEquals(999999998999999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case84() {
        int n = 100000000;
        int m = 100000000;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(9999999899999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case85() {
        int n = 10;
        int m = 1;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case86() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 599, 10000 };
        int[] seat = { 458, 465656 };
        assertEquals(999999998999999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case87() {
        int n = 1000000;
        int m = 300000;
        int[] row = { 1, 2 };
        int[] seat = { 2, 3 };
        assertEquals(299998999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case88() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 1, 1, 2, 2, 2 };
        int[] seat = { 1, 2, 3, 1, 2, 3 };
        assertEquals(999999998999999994L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case89() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1000000000 };
        int[] seat = { 1000000000 };
        assertEquals(999999998999999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case90() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1000000000 };
        int[] seat = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(999999998999999989L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case91() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 2, 2, 2 };
        int[] seat = { 2, 3, 4 };
        assertEquals(999999998999999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case92() {
        int n = 999999999;
        int m = 999999999;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(999999997000000001L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case93() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 201, 8612, 32761, 8161, 32240, 16180, 13202, 24628, 31298, 15477, 5713, 27133, 30230, 13047, 26433, 5548, 13932, 17, 27891, 8022, 8454, 19057, 3068, 28983, 23274, 3709, 28, 32299, 30, 18159, 13690, 11315, 13314, 7245, 18859, 20214, 19478, 10, 10, 12, 21, 18125, 19370, 134, 85, 31, 9 };
        int[] seat = { 3620, 13545, 1439, 28784, 83, 7267, 11584, 3664, 12814, 22988, 1174, 5653, 32164, 9974, 2299, 3307, 5786, 134, 12606, 23825, 24104, 7797, 10784, 30299, 1978, 15504, 25304, 16046, 3440, 13049, 27024, 21127, 29855, 24228, 6117, 5492, 25166, 23002, 3946, 4761, 32697, 1209, 1574, 11565, 11985, 23986, 25361 };
        assertEquals(999999998999999906L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case94() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1000000, 10000000 };
        int[] seat = { 1000000, 10000000 };
        assertEquals(999999998999999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case95() {
        int n = 1000000000;
        int m = 1000000;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(999998999999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case96() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 12345, 12345, 12345, 12345, 12345, 12345, 12345, 12345, 12345, 12345, 12345, 12345, 12345, 12346, 12346, 12346, 12346, 12346, 12346, 12346, 12346, 12346, 12346, 1, 1000000000, 1000000000, 999999999, 123457, 123457, 123457, 123457, 2, 999999999 };
        int[] seat = { 1, 2, 4, 6, 8, 11, 15, 17, 21, 1000000, 10000001, 999999999, 1000000000, 1, 12312313, 1111, 331233, 4323423, 123, 111111, 111112, 111113, 111114, 1, 1000000000, 999999999, 1000000000, 1, 2, 3, 1000000000, 3, 3 };
        assertEquals(999999998999999950L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case97() {
        int n = 3;
        int m = 1000000000;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(2999999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case98() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 2, 50000000 };
        int[] seat = { 2, 3, 1 };
        assertEquals(999999998999999995L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case99() {
        int n = 567654567;
        int m = 567865432;
        int[] row = { 1, 1 };
        int[] seat = { 1, 3 };
        assertEquals(322351405348573374L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case100() {
        int n = 10000000;
        int m = 1;
        int[] row = { 1, 2 };
        int[] seat = { 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case101() {
        int n = 82000000;
        int m = 82000000;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(6723999917999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case102() {
        int n = 3;
        int m = 1;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case103() {
        int n = 10;
        int m = 1;
        int[] row = { 1, 2 };
        int[] seat = { 1, 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case104() {
        int n = 13;
        int m = 13;
        int[] row = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
        int[] seat = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
        assertEquals(132L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case105() {
        int n = 713403336;
        int m = 318954366;
        int[] row = { 512794898, 360519329, 268825125, 276664789, 466490653, 125738303, 371301887, 76598450, 190558411, 40568770, 158893420, 281491184, 199448906, 180347073, 109045547, 16187796, 265020909, 272525496, 30386744, 149440869, 219521310, 222894879, 270524378, 527088085, 215534775, 69059697, 251001302, 506303174, 341792966, 436283654, 37501777, 16182410, 445397203, 612309783, 193330897, 310245344, 383445872 };
        int[] seat = { 4345898, 309567910, 313153662, 167693921, 273429986, 33057983, 64784642, 196987977, 144896862, 318788617, 35744764, 219173963, 112146082, 174734802, 225694835, 309512564, 140212136, 119839333, 34735439, 69111110, 140826593, 25560569, 160132992, 190859945, 262432291, 110673067, 206011339, 129321213, 156017199, 304972823, 8725497, 137143564, 117433421, 45227839, 13075762, 277455893, 5754909 };
        assertEquals(227543108022761566L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case106() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 2, 3 };
        int[] seat = { 1, 2, 3 };
        assertEquals(999999998999999995L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case107() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 2, 3, 4, 4, 4 };
        int[] seat = { 1, 2, 3, 4, 5, 6 };
        assertEquals(999999998999999991L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case108() {
        int n = 13;
        int m = 13;
        int[] row = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
        int[] seat = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 12, 13, 13, 11, 11, 9, 9, 10, 11, 12, 13, 7 };
        assertEquals(114L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case109() {
        int n = 3;
        int m = 1;
        int[] row = { 2 };
        int[] seat = { 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case110() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] seat = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 };
        assertEquals(999999998999999953L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case111() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 3 };
        int[] seat = { 3 };
        assertEquals(999999998999999998L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case112() {
        int n = 100;
        int m = 100;
        int[] row = { 5, 5 };
        int[] seat = { 7, 50 };
        assertEquals(9896L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case113() {
        int n = 1000;
        int m = 1;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(0L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case114() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1, 1000000000 };
        int[] seat = { 2, 3 };
        assertEquals(999999998999999996L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case115() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 1000000000 };
        int[] seat = { 1 };
        assertEquals(999999998999999999L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case116() {
        int n = 1;
        int m = 3;
        int[] row = { 1 };
        int[] seat = { 1 };
        assertEquals(1L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case117() {
        int n = 1000000000;
        int m = 1000000000;
        int[] row = { 13, 13, 13, 13, 13, 66, 66, 66, 66, 66, 66, 66 };
        int[] seat = { 3, 53, 23, 99, 999999999, 999999898, 1000000000, 1, 45353, 6456457, 45, 45645654 };
        assertEquals(999999998999999978L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case118() {
        int n = 1234567;
        int m = 1234567;
        int[] row = { 1, 1234566, 3, 3, 3, 3 };
        int[] seat = { 1, 1234561, 11, 15, 18, 28 };
        assertEquals(1524154442911L, themovieslevelonedivone.find(n, m, row, seat));
    }

    @Test
    public void case119() {
        int n = 10;
        int m = 10;
        int[] row = { 2, 2 };
        int[] seat = { 3, 6 };
        assertEquals(86L, themovieslevelonedivone.find(n, m, row, seat));
    }

}
