package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class FlippingBitsDiv2Test {
    FlippingBitsDiv2 flippingbitsdiv2 = new FlippingBitsDiv2();

    @Test
    public void case1() {
        String[] S = { "00111000" };
        int M = 1;
        assertEquals(2, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case2() {
        String[] S = { "00111000" };
        int M = 2;
        assertEquals(3, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case3() {
        String[] S = { "111111" };
        int M = 3;
        assertEquals(0, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case4() {
        String[] S = { "101100001101" };
        int M = 4;
        assertEquals(4, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case5() {
        String[] S = { "00100" };
        int M = 5;
        assertEquals(2, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case6() {
        String[] S = { "00100001100011000000000000000100101000100000" };
        int M = 11;
        assertEquals(10, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case7() {
        String[] S = {};
        int M = 25;
        assertEquals(1108, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case8() {
        String[] S = { "00000101010001111101011101011111001100111010010011", "01011100001111100100001010001011100101000001101100", "00110101101100100111001000110001010011101011110001", "11010010011001011110011011001110101101111001101010", "01100000111110011100001110101110101000110000010010", "00001001001101001101101010010010001001110000000010", "10110001111101000110011101100110010001001111101110", "00111001010011111111011010101010111011010110011011", "00001011011110000011100011111000011111000111101110", "11000001000001011010110010111001011101101101100101", "01101110000000011100000101100100110011000111011011", "01010010001101001111110111011001100111001001011110", "11110011110001010011000000110101100100001111000010", "10100000010001110011011111110100101000010011101101", "11001000010100011000010101001110111101110110101110", "10100110100011000111100000110100110101001110110111", "11011000001111101101011111100100001001001100100111", "10101110001100011110110010001001111110011001101111", "11111010000110111110000100000001000110011001101001", "00011111100111010100011101000011010111000000011000", "11100100101100100100111101100000000100111011000011", "00001011111100001010111111000010100110000101001011", "00110111100001001010110111111101001111011101001101", "01110001101100110110100101110001100001111111110100", "00110111001110010001010110110110110001100010110010", "00110001000101010010101100111000011101010011100110", "01101010011110010111001101010101101011101001110100", "11010000001110110011101100110000000111001011010101", "00001111011011001000101000100110010000011110100011", "01100011001000111011111000000111001111011011100011", "10110000010000001111101111100011110001110001111101", "11000100011101101100000100101001111010101101010011", "01101110100000000110100001101001011000001100000000", "11111111000011111000011010111100010101011100111011", "00101110010101000101111111001000010101001100111000", "11011101100101001000101110011101000011011101110000", "01101011010100010000111110111111101101100010001101", "11101001000111000010000000000011110011101101110111", "01011011111111111011101101010110010011111101001100", "00001000100011101101100001000110101100000010110101", "10101001001100111011011011111010001101001100101001", "10011101001101000010101101101011100111011010001010", "10001111001111111110000001010111100010100001111011", "10110111001111001110000101100101011010111001011110", "01110110010011101010100000101110110100110100001100", "10110000010010111101101001101101101011110100000100", "00011101011011111110000101111100011101000111001101", "11110010111011100101010011011101011100111000001110", "00111111000110010101010010111100111001001011110110", "10110000010100001000001111010001001111101011110101" };
        int M = 20;
        assertEquals(1089, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case9() {
        String[] S = {};
        int M = 2500;
        assertEquals(1215, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case10() {
        String[] S = {};
        int M = 10;
        assertEquals(1038, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case11() {
        String[] S = { "00000110000100110110001100111100111000111001000001", "10011101001010101010111111101100010111011110011010", "00011111111111100010010000100111101011011111001100", "01111101110100001110100110111001011010011000100110", "00111101011011010101111101001111011011110101111100", "10011011100111110010001111100000111101011011111101", "00110001000101100011101100000100010100000100001001", "00000001001000001111110001010000001010000110100011", "11011100011101001001110001100011100110100110101000", "10001111110101100110111010010010100100000111110010", "10111001010100101101110100011111011100100000111110", "10010100111011001110100100111110110111011011111111", "11100101100010101100110101101001000101111000111000", "01001110111000111011000100000111110111000111010101", "11110110100100011111100000010010100100011001100100", "00010100000011100000011001101000101001111000001110", "01011000010110010001011110101101101110011001100010", "10101100010000111101101010110011111011111111000111", "11000000001010100001011111001100101011001000100110", "11000000100110100100100010001010100010100100010101", "01101001110111111011111010110011010001010010011101", "01010010101110101000011000111000110111100001111001", "00011001001010000000000111111101111101111011011111", "01011110100101010100011011101000100101011011001000", "10001000101011100101100101011011100011101011010100", "00100111110001111000001010101010001010000010001101", "10100101011010111100110101100000111110100010011111", "10110111000101010011100110011111001011001000001111", "01001110111111100011001001011001111100010011100110", "01001101001101100011110101001011000011010111000111", "01010010110010100110001100101001011010001001000011", "01100101111010011110101000000001001101101111000110", "10100110101001010000101010100100010101010110011001", "01001110010110011001110111000101101111011001110111", "01001101010001010100011101010000001100101110000001", "00000110010100101010100110100100010101001100001001", "00111101110101111100110000001001110111110000111100", "01110110010100110111000001001000011111011110111101", "00000010110110001001110110100101000001000010000011", "10100110000100010100011100110110100111100001100001", "10111101101111000011100010100111001100110001110011", "01011110100011111110110011010011001110100101011100", "10011011010110111000101111000010100010001001000100", "11110000111011100001100000001100001110110001011111", "01100001110011101000000100000100101101100001010011", "10010101110100110011001001000000001000111001101111", "01010101101101011110110000110110101000001100101001", "00111010010101000100011100000011110000011101100010", "11101010101000011001101100100010011011111101100011", "10000000010101000010110011011000010101110111001101" };
        int M = 20;
        assertEquals(1068, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case12() {
        String[] S = {};
        int M = 2;
        assertEquals(979, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case13() {
        String[] S = { "01001011011111100011110011000011010010101101001011", "01010110100100001001101100100111101111100011111011", "00000100001000110110010010100001001010100100111111", "01110000110000010111011000010011001110100100011110", "11110101101001011011000100000010111010010101110101", "01010110011111100101100010100011001011110111011001", "01110001010000010101101110110010111001111110001000", "01100100010010110100100011000010000111111001000111", "01100101110100100100000001110110110010110010010000", "10110001110011000001101110001111101010111110001100", "11110110000010111111110111011100101001011001101101", "11001100010111010001100011011101010010110001000010", "11000011001000011101000101100001100110000111011111", "11010111101111010000100011111111011011110000101110", "11001001100110100001100000011001010000010100000011", "10101010100000010101011111001011000100000000100110", "01001011101011000110100000001111110110111101010001", "01010010000111011111111010010101001101101101111101", "01011001011011011001111111001001100000010100011110", "00000001101111101001011001100001100010101010110001", "10110010001010110100001111110111001010001000001011", "11100101100000000001011110010000111111001010100001", "11001001000001000101100100011111100010011110011010", "11001101011101100101100100010110101101000111101100", "00011101101011111010100111001000111010010110011101", "00110011100010011000110101101010110110111010000101", "11101111101110011001110111000011101110010100010101", "01001000100001100110010000000011110011101101110010", "00110011110001100000000011011110111100001101001001", "01111111011001110110110000101101011110100111011011", "01010001000101000000110110010101000000111001010001", "00111100010011011100011101011110001010111010001011", "00110110111011011010011100000000110110110001101100", "10001101111011001010101100011110100110011010001010", "01001101001000000101100000000011010110101000001011", "00001111111000110000111110101001101011110001011001", "01110110001101110010001101011010011111111100111110", "11010101110000111000100111100000111111111110001010", "00010000111010011101111001001011100001100000001101", "00011111001101011101010010101001111010011110000101", "00010001010010110110101111010110100001010110011101", "00000111100000010011101111101111111100010111110100", "11101000011110110011011100001011110100000110100010", "01111000110011111011001011001110101110000011011011", "01110100001011111110011011101001111110010010001011", "01001100001110101110000001111010000000111000111111", "10101011100010110001001100100001010110001001111001", "01011010111010011111111111111001000010101110100010", "11100110111010100100110000001000100001001100101110", "11010111011101100111011111000110001101001000011111" };
        int M = 250;
        assertEquals(1206, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case14() {
        String[] S = {};
        int M = 1;
        assertEquals(835, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case15() {
        String[] S = { "10010111110110010011010001100111110000110100100011", "11111101010101100010011011101111011101111101111001", "11001110100011101001001100001100010101011100101100", "11101001010111010110101101010000101101011010011111", "01001011010111101100111111001010010010011010011010", "00100101100001100010111001100010000000111001111101", "11011111011100110001010100101011010001101101001101", "10000011100101001101111101001100110101001011000011", "00110110110100101010111101101010011110110000100011", "01100010000001001000110110111010111101001011101000", "10000100110000111111011100101100110100011111111100", "01011110001011110010100101110101010101010011101011", "01001000101010000010110101101111000010110000010000", "01100000111001010111001011010001100011101000011111", "11111011101000111100010000001110100010011011001101", "00100000000001101011101001010101010110101110100101", "11000011100111100111100111001001000110100000101101", "10000011111111010101010011110001011010001100000110", "01011000000111101111010110010010110111110110110110", "10111111100111000111000101000110001110111100111100", "01101111110011100110100010011010011001110111001101", "01101111110110001101010011010111001001101011011100", "00010000110010001101101110111010001111001101110100", "01010101111001001000101010100000011111000100000101", "11001111010000011111111011010010010111111101110000", "01001000111101000010101111001010000001110000001011", "10011110001100100010101000110101010110111001100110", "00001011101110001110011101110110110100100000011010", "00100110001110100010000010001111100000011100100101", "01010110000000011110010100011001100011011100100000", "10011000011111010110101101000100101100001111110101", "01100101000110001011010000110001101101001101110101", "11110010110111100101111000111000010011110110111000", "11011010000100110101111101010101010000010101100001", "01111110100000001000110000010111000110001001100001", "01111010110110100010101110100111101111000001100101", "10100000000011000100110101000011101011100011111001", "10110001110000101100011001000010111000010100101111", "10111110001110010110101111111111100111100111100111", "11000110111001000110000110111011000000010000011101", "11010010100001010110011010001111011101010101000111", "10000111010101001101100011110001110100111101100100", "01011001001101010111010111010010001011101000111001", "11011110110011100111010010000100100000110101011011", "00111010010101000000111111101100110010001100010000", "01011100001100101001011100110010000100000010000111", "10101100011000100100100101000011000101011001100011", "00110001010100100011001010011000011000110011000011", "00011101101010010110111011001110011100101111011110", "11110111101000101111010010101010110101111011111110" };
        int M = 2;
        assertEquals(938, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case16() {
        String[] S = { "10001101001100111110110110110110001010111110000101", "10000000010011000111111010100011100011010011001101", "00110111010101110101101111011101100100011101111010", "00011011100101001011111011100110001000010110111100", "00001100000000101010001101000011011011110101000001", "11101110000110000000000101111001000101001100011010", "11110100100110001111000101110101100110111001110110", "01110001111001010001011000110111111010010011011110", "10001000000010010011100001011000000000100100011100", "10110011101001010100100000101111110010110110101101", "11010110100100111000001010100111010110111111001010", "00000101101101000110101001001011100001010011101000", "11101000110000111011110101110110101100000100000100", "01011101101100001001111011000110101000000111110110", "10001001101100001111111110001101000111001110101011", "01000011111001000010101111111010011111110111111000", "01100100111110000110010111101001111010010110101100", "01110000101111011110010011110110111011100110000000", "11011010000111000010101011111110100011111000101101", "00010110000001100010111010010111010110100100001111", "11001000110010010010010010011110001011110000111011", "11100100011100001000011101100001101101000011111010", "10001101110011110100101001101100100100110111101110", "10010110110101100001001110100101011010110011011010", "00000000011110100100110010110101101010110101111100", "01111111101110100000001101010110111010001000100001", "10101011001100001001001100011000110100000010111010", "01111001011110111110101111010100010011011100100010", "01010100110010000100100100101000001100011000011001", "01001011001011001011011101010111001001111001101100", "11111000000000110111100001111110100001101011001111", "10101010000110000101000001101111101000100000100110", "00110000110011001111011001000001011011001111101101", "11110100011000111001100001010011000001001001001001", "00000101110000010100100110110001010011010000110011", "11100011010101101111010011101100111100110010110100", "11010111001011101101000111111111100000100011110011", "11101011111010001111010010011001010011110000001100", "00000010111111111001011100011111111100010011110010", "11100000001101000101101100010011100010110011000110", "11011010110100000000010000001110100000110000100111", "11101001111001001100010000100001011001111001101110", "01000111010111010110000001010110101000001110011110", "00100111101010000111110011100111110110110101011111", "00110011111100111011100010111111000100101110110111", "00000011000110011010100010111110011001100011110011", "01100010101000101100010100111000101000110000101011", "00000010110111001100000000101011011000100001011100", "01001110110100001100110110110010110001010101001010", "10110101100010101000001110100011011001010101001110" };
        int M = 625;
        assertEquals(1223, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case17() {
        String[] S = { "11110100111010011000101010111001110111111110101010", "11100000111100010001101000100101100011111110101111", "01100100000101111100111000100101101101010000111100", "00001001001110011010011010000110001101001010011100", "10110010101101011001001000100111101110111110010010", "11001101011100011110010100101000000101000101011010", "01100100000011111010101100010111111000000111001011", "01110110110010000010110111110110100010101010011111", "10011111110000100110000111001010011011001001110110", "11100000010010111001010101110000101101111000010011", "10101111101001111001001001110110001100010110000111", "11101100101001100001100110010000101010101111110010", "10000101010010111000011110010100111001001001101010", "00100011111010000101000001011000101000000110011101", "00111011111001000011001101001110101011111100010101", "00101011111110001000001001000001110000111001001000", "11001011110001110100000010011011101011011011000111", "01011000001101011100001000011001001011110001101010", "10111110111110100111001010001100000000111101000010", "11000010101110000011101101110101000010110000111101", "10101011110001001011101100111001011101110101000001", "01110000011101011011110001100001011000000001010010", "10000110010111100000000100010001011101011011110000", "11100101010100111110110110110111010100101110101010", "00100011100100000011010110000000111100101110000110", "00000101101001111101101100001110010101111000101100", "01110101111011000011111001101000110111111111010011", "00110000111011010011001001100011010000000001111011", "11010111011001001111001011100000010110110010100000", "11101000000100010110001000000001110001100101110011", "10000111100011001111110111011100010001100111001101", "10010000010011100001011110101101111100011101111110", "10001000001011010011101011100001101011000011110100", "11011010011011011001100110101000001011101100011101", "01101011011110001111010001001010111101000001011000", "01001111011101101010100100101011001110111010010111", "01101001001110100000101111101100100100111001010110", "00101110000110001101101001000010011010011101110001", "01011010011100101111101010110000101101011011001100", "00110100101101010010100011100010000000111101000010", "10100101000110101111101100101111011110110000010101", "01011101110000110110100000101111111101000100100011", "11101100000010110100100110101101111110101000011011", "01101000101010111111111101010001110011000110101010", "01011111001111011111111011001100100010110011001010", "10011111111001110010010011010011100011000010111110", "11101011010100010011010000110010100101101000111100", "11010001111011010000001010101110110001000001001010", "01110100010000110011110111010110111011011100111011", "10100001011011001011000011001110100100111000000011" };
        int M = 625;
        assertEquals(1211, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case18() {
        String[] S = { "00000000010010101010011000001100000001010011010111", "00111110001001101010110100101110101111110110100001", "11100110001000011100010111001100000000110100111001", "11110110100010110110000110000110111001111111111110", "01110111011111111001001111011111011010000101101110", "10011110010110111000010101010000000000000000000111", "01110011100101100111011101100100011100110011110011", "00111101110110011011000111110010011001100011000100", "01101010101111101010001111111000101011010100100000", "10001011010010110011010010000101111010011000000011", "11010010001010011010000010010100001010101110001100", "11010001101010110011111101111110100110010100001010", "00000010101011110010101000101111001000110111111111", "11011101010000110101011001011110000001100101100011", "00110101000000111111101101011000101010011000110010", "10001101100001000010001100110010011101101000011101", "00000011110100000110111110100010011110000010000110", "10100101110010000010001000010011110100111100011010", "10111010001000001110011101000100000100011101000111", "11010101010101000001101111001011111001111010011010", "00100001101000110001101111000100110010111011000000", "01000011001100111101100100000000001100010001001111", "11101000101000010011000001001110010001011011000010", "11101110111011111000011100101001100000011110011011", "00010110010101011100101110100111010110011011010010", "00110111101110110010000111000111010011111110001010", "11011101001010011001001000100010011110110101110001", "11000100111000110101001100011000010000001010101101", "01110011100011011100100101000101011111011000011000", "11000000101101001010101111100000101000000100000011", "00101000111101001111000100111101100010101101100111", "00101001011110011111001000010001110100011101101011", "00100010110011111100000101011111001101101010101001", "01111111101000110011101111001011010101101100010101", "10100001011001111010101000010110110111101001101001", "11110100000011001001000101010000101001011010011101", "00111110001100001000111010001100100000110011010110", "10110100111100001011011110000100100010100001111100", "01000000010000010000001111101000001101000101011111", "11111010011100110101111101111110010110111110011110", "00001101010110110111111001111010010110000011101100", "10100111110011001001100011000000010111111100010010", "00001101001000110110100101000110010101001010011011", "10101010100010101000100111010101111001000010101101", "10111100111010101011110101111101101110001011000100", "01110100100101111001101010110001010000111001101111", "11010110000110111101010101011010101010110010111000", "01111101100000011010011101110001010010011100001011", "11001111001101100010101101110011010100000010100110", "00001001101000010110111011100101001110001101001110" };
        int M = 4;
        assertEquals(980, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case19() {
        String[] S = { "11011001001111111010010000000011101000000111101001", "01110110001001100111011101101000101000000100010000", "00011010101000110101110101001010110011010000111110", "11100011001011011010110111101000110011010111110011", "11001010101100010110101101110010001101000000110100", "11100010101100101000011111010100110001111110111101", "10101100011001010010100010110111101110001100110010", "01110110101000010110101110110101111000010111111110", "01111011001101101010111100100101100000000101101010", "10001010110010010101011111110101010101001010111010", "00000010110111001011111101111001011000111000001100", "10001011000011110010100111111010110111011010001001", "01111111011100001101111010011010111010010010001101", "00110011111100110101101011100100000000010010100100", "01000100111010000101111010001110110100110110000001", "00001100000000010101001000110000110100101100011101", "00010010011100011101101111010100110010011000110011", "00000101110110011000111111100011110101000000010001", "10001000100000001100100010010101110010111000111010", "01010011100101110001000011110101110111001011101010", "11101100010001111100111011100111111001001010110110", "00000110001011010010101011000100111101100110000111", "11011110100010000001010001001011000000100101011001", "00001100100011100010110111101110110001110011010001", "10001011001100000111010000000001000110001010110011", "10010011101010011000000000101001011010000011000010", "10000010111101110000111001100101100101110010001011", "01010110100010001111010111010001011110000000000011", "00110101010101101001101001010110001011010100111100", "11100100011110010111001011010010000100001101101100", "10101110010011000010001101001000001110100110110110", "10000000001010011111110011111101000010010011110000", "00110100011000110010111100100111101001100110101100", "10100101011011101000010110010010010000101110101001", "11001000010101010001001111100010100001100001101100", "11101000101111011011001110010011101110011110111010", "11100000101100001010101000100111010101110111110111", "01100101101010010111010011101000101011010101010011", "01101111001110110011101111001100100011010011110010", "10011100110111101011110010110100100101110100101011", "11101010001110101101001100000011010100111101100101", "11011101000110110001111011101011000000100101100111", "00010110010101101001011000101010010000100001111010", "01100111001101001100010111010111000010001111000010", "10010000111000101010111001100101110100010011011010", "11101111000011111000000000011100101010001101101100", "01000101000111110100111100000111100101110110000011", "10110100110101100000011010111110000100010001100101", "10111101110110100100100110000110010101101000111000", "00000011100111001010001011111010010000111101100101" };
        int M = 625;
        assertEquals(1197, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case20() {
        String[] S = { "01100101000000010000110110001111010010101000100100", "01101001111001111101011110111100001100101010000000", "11010000011011010001111000110100001000000111100010", "00001000100000111101111111010001011100010101011000", "00110010010111011011010011001101100110100001111101", "01110000000011011110110110001100000100010011100001", "10011111101010000000001011100101001000110000110110", "00111000101100001001010111101100110010110011111010", "11001011011010100001010000001010110101000100100101", "01110010111001010001010000011001110000101110110110", "00011010000111111011101011000110011001111010110001", "11101001010000011100001100010101101101011001010000", "11100100100110101010001011000001011100111101110011", "01010100101101101101000100000011101000100011010010", "01111001101010111011100111001010000011110011111100", "01110000111011011011010110110110000110001011011101", "00110111001110010101111101110010110010111101110101", "10100110011011010001111001011101111101010010100111", "00100000000001000110111111110110111011111111111110", "01110000111100011011001010110101100100011100000010", "10110001000010101011110100101011001011011010011100", "10110100110110000011110111001011001000100011110010", "10110111110001100001011000110111110011111110100110", "00000101010011001010100111011011000100011011001111", "11010010111011101001000110010110001000001111110010", "10100001111111010001001100001110111100111001111100", "01000011111011100110001011010010000011001101101000", "11110011101000011100000001110110010010111100010001", "01111110101001000111001111000011000111010000100111", "01111111001010000111010010101000101000011100001010", "00010101101011110010001001000011010000100111100101", "11010100000000000011010100010000010001111111001101", "01000000011100010111001101001100110001100101100000", "10100011001101010110101010011011000011011101011111", "01101001100110111110001111111011101101011101100000", "11011110111001111111111011101110001000101111001111", "00011100011111000101000101010100001100011101100010", "11110100010100100010111101101101001001010010111111", "01000000111001101000000111000111000110011110010000", "01000101001011111111100011000111101111001101000000", "01101110100010101110001101101100111000110111111001", "00011001110011101010111100110000001111001001101011", "11111010000000010011011001100111101011001000100000", "10111001010001000110111110110000111110010101100000", "00001110100101110000100101100001000100111011010001", "01001011000100111110110010000101100111011110111111", "10100100110001011110010000110010100011010000101101", "01000001101111101101110000010000110000111101100000", "10011001010010000000000100101011111010101100010100", "00100110111111001001010000100010111001110000001110" };
        int M = 1250;
        assertEquals(1240, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case21() {
        String[] S = {};
        int M = 625;
        assertEquals(1213, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case22() {
        String[] S = { "11011000101001110101011000100001111001001000011010", "01110001100000011101011110011000010101000111010000", "00001111011101101010010110011100011011110111010100", "01110101011111000101011111001110001100111001010011", "10110100111000000010101101011101111111010100101001", "01010110011011101111100110001011001111001001100011", "00111101000010101101100100111010100011000100000101", "11111100110101011010010110011110101100111011101110", "00011100001111000111101110011100100100001011000001", "11101001101100000010000010001011111011011111100111", "11111010001101111100101000101010000100100101110110", "10111010011000100010110010111110111000110110111111", "11110001101111000100110111100110101011101011001000", "00001001000010101010100010000100000001010111101101", "00111110101101001100111100010000111000001011000101", "11101001010110100111011100111110111000000101000101", "11101000000100111100110000011001010111011010010000", "00001110101101010010111111100011001000011110001100", "10110110011111011101110001011000011010011110101101", "01001000011111111010110011001000011100110010111011", "01111100101001110010111001101110110110111000001100", "10001100111011010100101011000000110010110111011011", "11001100011001000110101111100010100011101101010001", "11101010101111010110010000010110110100011011101011", "00000100110101011110000110100010101101111010011001", "10100101000010111000111110010100010111110101000001", "01100011100011010100111111000101110001000010101111", "10000110000010000111011100111001000011001101010101", "11010000101010100110011101010011000101010101000000", "10100110100100000110110101101110001011011100110011", "11011100100001110011111010000111001001001110111110", "01001011110111011100110100011111101010010010010110", "11011011001101011111110011111100101010110111001000", "10010001000100101000110010000001110011101100011011", "10001110111111101011011101001011110111000100111010", "00111011100001110011111111111111110111010101011111", "00111110100001111101001110100001000011101111111100", "01111110110111111110100001000111010110101100010011", "10011101000010011111101101001111000011000000000001", "10000110010001001101100010101000110110000110110111", "00011011001101101010000100011010001000001010110101", "10001110111101111010011100011100100010010111111001", "10101000011000010101100101010001101010110101100110", "00111010111111101111011110100001110110001111100101", "00011001001010010011001000000011011111000100100000", "00101001100011010001100101001011100011110001010011", "01000100101001011000011110001011101101001000100110", "11010001111011111001010111011101100101100110111100", "10100001110010111111110001111100110010011110110010", "00101110000101010011000000101011110110110100000101" };
        int M = 100;
        assertEquals(1149, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case23() {
        String[] S = { "01001000101001010001110001111110001011010100011111", "00001110010110001010101110000101110010000010000001", "10001001001000101000100011111100111000111000111000", "01010000011101110010000110011010001000010001111011", "10101010001011000110011110101110110100101000111000", "00010110010100101111100100000000001110100100011111", "01010110011100100011001100100010000001100101011110", "10100010000100010001011011000011000010101110010000", "11010111110100010001110110101100011010001100010001", "11110110101101111000111011111101010010100000101101", "01100011110111000111100001011010110001011100100010", "01110100011010111111010010000000111101110110011010", "10110000011000101000110011010001100001100001010100", "10000011001001000101000101100011110110011101000011", "01010000000001111010010110000001100011110101010110", "01111111100100010100101110100011010011011110000010", "01000111001100110100001100101110001110000010000100", "00000111011101001111110100100001001011100111100110", "00100100101110110110000101110011100100000000101111", "11000000111000101101010110101101000011111110001001", "00000010110010001100001001100010110011000101001011", "11001010111101010111101101000001000000111110101010", "01001000111111100101010110010000111010101100000011", "10011011100100011111111100111110000010101001111001", "11100000100101101100101011000000100110000101001101", "10011000010101011000110101000111000011100101000001", "10111111001000111101111010010100100011111110011111", "01101100000011101000010110111111000010000010000001", "11010101100101011111001111001111011110010100100011", "11100100100101000010110100000010000100010100010110", "00011000010111010100101100100010011111110010000100", "01010110011110001110000010110110000001000010111001", "01010000010111100111001010010101010000010100111111", "11100010001101101101111001010011011001111111110111", "00101010111011011111111111010011100101011000001101", "00001001000011000100000110100100110001111010111100", "11000110000010110110001011010110100111100010110111", "00111111010000011000010100010100001100100010000100", "10110100011000111010010001100011010000010011010101", "10010111101111100110001110000010010000111010011100", "01101000000110111011100000111010110001101011101111", "01110100010001000110000101100010110001000011000001", "01001000111001101001000111010010000101110000110001", "10011000110011001101010101011001111110111111110010", "10000011111011010010101010110111000011001000101000", "10000001110010101111100110111110101000110100001110", "00101100000110101010001111101101010010001101101110", "01000011010010101001111010010010100011010100010101", "01110111111111101101001100110001001100011100010000", "11110111001110000101111010010011101000111000011001" };
        int M = 250;
        assertEquals(1180, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case24() {
        String[] S = { "10100111011011101001011111001001111100100010101000", "11001011110110100010001001101111011000110111111101", "11000100100100010001001111010001010110101010101010", "00110110010110000000001101110001010011011100011011", "11010111001010111001111001011101000111110001110010", "10000101100001011100010100111001000001010101011000", "00000011110000110011001100110110101001010110111001", "11110101111111100110110100101001100100111111111000", "00010011000100101000111001101100101101001110111111", "10001101101010101111011010010101001100001101010001", "10111101001111111010011011110011000010001011001000", "10110001001110100101010011111001000011011111010011", "00001010011101111111011100111111010001001101101001", "00001101010100111000011001101100010001010001111010", "01110111110011100100111111111011000111000110011001", "00010100010001010010110000001001110011110101100010", "10011001100001011010001111001101101100001001100011", "10100011100000011100010000011101100001011010011111", "01011000101001110110101110101000110001001111110100", "00000001110000001001101000000111100110000011001010", "11101010001001011110000100111000010011110110011111", "11000111101000010100010110101110100110001110111001", "10110111010010110110111111110101110101001110000010", "00000111001011101000101111101011101011100100000101", "01011111100011000011000111111001101011111110000110", "10001100110111010001110100111110010001001001111111", "10111011100000110010011000111100001010111111100010", "11100100001111011001011000111000101101000011010010", "00010000001011011010000010010101000111010111100011", "11011101011101100011101110110000101111001110001110", "01101010010110110100010010011001000001101100101000", "01000101110111000001001000001110000000000100110101", "01111101001000111011100100001000101001101100001110", "11110001011100011011100010011111100101101010010110", "10010011010100100000010011011001101010001111001010", "11110101110100001000001001001000010100110111101111", "00000111110010001010010111000100000100000001111110", "11110101111100011001111011100001010100000011100110", "00110110000111111101110111110100111111100000110101", "01101111011000000000010010001010001011110111010010", "10110100111000100110101101001010011110101010010001", "00000101001100110100110100101100010101000100010011", "00100001010110111110111101001001010000110110010101", "10010110111101011111011010010011110000100010001100", "01110001001001011100100110011111010101011100000110", "01100100101100100110011010101100100111101101111101", "10000011010000100101010101100011010101010100111001", "01000001101110000010010001111101010111111011010011", "11101100110010000010101110001001101001110001110010", "10001101000010110010000000001100100110111111011010" };
        int M = 500;
        assertEquals(1206, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case25() {
        String[] S = { "10010010100010000000010111001000011010101111100100", "10010101001010001000101101100111100101000001000111", "11100001111100100000100100111011111100100101100000", "10010101010101100110111111011001100110111001101001", "10001011010110110101010101100010010011110000100011", "11011110010110010001010100100010010011111100010110", "10011111110000110110000101001001110100101100000100", "00100110010110101001010011100100010111110010100001", "11111110000010110111000011111001111110010010100101", "10111010100110110000010011101110010001010010010100", "00010110000000010111010101111011010000011011101101", "01010001111100000010110100111000101011010001100110", "00110100011001000100011111010101000010001011010001", "00000000111001001011110111101111010100000100011101", "00010011111101010110010110100100010000100001110100", "00010000000111001101111110010110101110111100010110", "10011011010101101011110110011011000110110100111101", "10011101100001110000110101001111010001001110110011", "00001011101111000101000011101011010111110000110000", "10111000110101000111101011100001100011000101100100", "00000100100010110000100000111001010011001110011110", "11011100001010111000110011000000111101100001101000", "11011001011111010001101110111011111000010100010110", "01001101000010000110100001101001000100010000010101", "00111010101100010100111001111011011100001000010010", "01100110011101100011001111010010111011100101101101", "10011100100000000011010011010110011011010001111011", "11100001100000110101101110001011011100100011000100", "00001001001001000001011101000100110110111011000111", "11000001110000100010000111010100010100100000010001", "01011101110010110101001101110001001000001011100101", "00000100100100000011011101100101010111111100111110", "00111110100110010011111100110101011100010001100111", "00111100110100101000100110010000000110100101010111", "10011000010011110010110000011111101101010010110111", "00110110010111101000100111001100001010000000000101", "10011101000100101111110000000010000100111101011000", "11001100111101111010101101011111111000000100100011", "01010110000001010010101111001101111100101001001100", "00100100111000100001001001001010111011100011100110", "01011101010000010111001000001100111111101111110100", "00000010000010000001010011110101000110100001011111", "11110001100011100001011011100010000011000100001111", "00011010010100100011011001000001111100100000101111", "10101100101110001100101010111101111000100011011001", "11101010111000001010000001011000111001111000011111", "10101110110010001011100000011010110011011110111001", "00100010011011110000001000000010100000100010000110", "01001001110000011111010110011110101101000100010001", "00110011100101010010110100011011101001110100010000" };
        int M = 10;
        assertEquals(1040, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case26() {
        String[] S = { "00100110111100001010011111001010100111000101011111", "11010001010101101111100001100001110011010010010111", "01010100110111010010111011000111001110110111100011", "11010000011101101010100111111001000111001110110000", "00111001010101101110001010111011011111111000001100", "01111110011111100010101000111000111001110010111111", "10000000011111000110110010011010001011010011000000", "00000000100000101101101111101000111001010101110111", "10010101111010010101010010100110100010110111100011", "01101001000101011010100001101000110011111101101000", "00010000110011010101010101100001100111101001011111", "00101111100011001101101110111100101001111111100110", "01011111110011111101000000110010101000100011100001", "01010010100010101111111001111001111101000000000010", "10000111000111010001110100111100111011000111000001", "01001111010010010111110110000101110011111110111010", "11000010111100001010001011001100101100011010011011", "00010011110110010010110011101111100100111000000111", "00101101001001100101100010100111010000101110011110", "01001100011010001001001011000101101110010101111000", "10001110101010101111010001101010111111011101010110", "10011010110111101101000000110110111001101000010000", "00001001000001111011000110011000100000101000110101", "01011001111000010101110100100001000000001010010001", "10111110001101101010011011111100100101110001110001", "01101110001010111110001000101100100100011101000011", "00001010111001010101000011100011010100111000001000", "10110110000110010111100011101011101101111010001000", "11101001111011011011100001100101000110100011111000", "01011010011110000101001100011001001100110111101111", "01011010111110011010010100100110111010010100010001", "11010110110011111010010011011101000111110010111101", "10011011000100111111010011111001000100111101000111", "10101010010000000001001011001111010110111100001101", "01110000110111110001111010101101000111011010101011", "01110011110110110101100001100000100111100111011100", "10100001000101100000110010001101100101100000011000", "11011011110101001110100000010100100111011010100011", "11101110000101101001011101000010110000000010010001", "00000100001001100101010110101011000101100101010010", "11111011000111010010110101010111011101000001101111", "01010011010101101110110000010110010010011110000111", "10010001100011110010011101010111010000101110111000", "11101111000011011001001011111000000011001010100111", "11101000001000010110010011000001100011111110100000", "00100000011011010101001100010110001000001001111010", "00111010100111011101000011111010101101011010010100", "10110011111110000011111011001010001100001000100011", "01111101110101100010111111110111011111001111001111", "11011010100010000010011011010100110000000011010100" };
        int M = 500;
        assertEquals(1223, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case27() {
        String[] S = { "11010111001110000110011001100110000100001110010011", "01111010110110011111100101000110000100010111101101", "01110000111001010100010111001100110110000110101001", "00100011000110011100010010100010110001011100110110", "01011010100101000011011100000001011101010110101011", "00010011010110100101010011000000101101100011101011", "10101111100101011100010000110001001101010100000011", "01001011000110000101000010010001100100111001010001", "01000110000110010001010110011100111000010011101010", "10101001111001111000011110101001111110110101010001", "00110010101100111101101100110001011110010010001110", "10101000001110100001010001010000000101000111011010", "01101100101110100101101101011000001110001111010110", "01110001010011101010000101110010101000111111101010", "01001111010010010110011001100010001101000110100001", "00111101110100010001111011011011110001100100011011", "00111111011010011010100010100010011110100000110011", "10011100000101111111011001110100001001110100001111", "00011101101101011101100011101000101110010010010001", "01101000111100001010010110111000010001010000100111", "11000101100001100111010000100110100011010000000101", "11001100110110100011000100010111011011111100001110", "10110001010111111101110100101001100110101011001011", "11011110110100111010100101111000101111101100000101", "01110111111100010010110010110111111011011111111001", "10110010111001001100101110101101110101110000001000", "11110111101110010111111011000000000010011001000110", "01101010100101011111110110101101011011101000110101", "00110010100000100010011001110010101111000001101110", "01011100000111000100000110010010111110010000000111", "10011000101000100011001001011100000001011100000101", "01010100110110100010000111110101110111001101010100", "01011000000000010001110101100010000110111100100001", "01100001100000100100110000110111100011011110011100", "01001100000001100100101101100110111011001101111010", "11000010110000001100100111000111100101001000110101", "10110101111110001100010011010100000111111101011110", "11010110111001011111101111100001110100101100110111", "10011101101101011011101001101000000010010011101011", "11101010001011101111000010111110100100100010010100", "01011111010010010111000110110001111011000111000111", "11111110111100100000111101100101111010011111111011", "01001111111110111001011000001101110011000011110001", "11010001000011110110100011100101000001000101010100", "11100100100000110110000010011010110101110001010111", "10111110110111010101110111000010010110111001001110", "10010011010000111110000000110011100001110000001001", "10010010111000111110001110101110011010001101110100", "10010000011010001101000101110011001101110000110000", "00010101110100100110111010100010000000100111011001" };
        int M = 250;
        assertEquals(1183, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case28() {
        String[] S = { "00001010011100100011010110010101100000001011011001", "11101000111100100100111111110101101011000010110111", "00100110010111011000001001110010110001001101111111", "00010001010000001100111000000011100111101101100001", "01000011111110000110101111011100000100000110000101", "10110101000001100101100100101001111110000111111111", "11110100111101100100101000101010111100100100010111", "10011001010001110010111100010111101111010101011000", "01001000110011101100000010001001101111100001101000", "11010011110110101110111111100000101101001111000100", "10000011100001001011010011110000010001011001100110", "10110011011010111101001101100001110101000001011110", "10111010110001010010011101110110000011111000011001", "10100101011011110111000011000010010111100010101100", "10101100100110111111101101001011010110100101011001", "10011011011110010000010100100101100110000001100110", "00101010100101000010011000110111100000110010100101", "00011001110001000111001011110101000010101001100110", "01110110111000111110010001101001111101011010000001", "11011001001001110101110000101111010010011111011000", "01011101111111001001010001010100001011011011100101", "01000111010111110000100111101011111111100110110001", "00010100110011101011000010110011000010100110101000", "00011011110001110111000001110010100001100100011011", "11100101111000001000101101010100101111000101001011", "11001110100110000000011110010111000011101101101001", "00001011000110110001000111111000010011011111000110", "01011011111111100001101111011101100100011110001101", "00010101101111111000101100110001001110111100000001", "11000010110000011001001000100000100110010110001101", "11100100111011110100101000111011001100010111110111", "10110110110001110011010010000110101100111110010010", "10001010111111110100100010000001101100011100101100", "11000101011110010111011010110011001101111000011001", "10000101010010101011100000000101000000011000010110", "01101011001100001101010000101011101001110001010101", "10111011000000110110110110110000101011011110011110", "01100101011010110000111111000101000001100010000110", "10110110100100101101111011101111101001110100111011", "00011011110001010001100111001000010100111000110000", "00111011101001011100100001001111010010000011011000", "01000111010011101101011001010001110110010010100010", "00110100110000101100011100110110100000010100110101", "10001001010000111110101100000110100101101000001111", "00101111111000011110101011111011100000011000001100", "10111001001111001111110010100001010011011011110000", "11110000010011110110111101010101100010010010000010", "00010010101111110111010101110001010011101000100011", "10000100111100111000100010010110111011000110101100", "01100001100110100110001111011100010111001010100000" };
        int M = 1250;
        assertEquals(1242, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case29() {
        String[] S = { "01001111010011011111000000101111101010110011100100", "01010000001100001110000001010001001010001001101010", "00101001111101101101010101001001111110011100011110", "10110100001101111001000000000101001011010100111111", "00101011011011111011111011011010101100111011100000", "01010101000001100011011010111011111010000110111001", "10001000010011100001110001101111111001001111000110", "01010100001111000101000110110110110111011110111011", "11101100111000111101101011100010101001001001110000", "11111011011101010001010100001110110110110100011010", "00110110011010100110101110110110000001001111110100", "00100110110000011001100110111101100111101111111000", "11001011001111100100100101010100111011101011110001", "01000110100000001000101111100110111110011110010011", "11001001111010111000000101111011001100101000011110", "01111101001000110000011010001100110100011010101001", "10001011101000010011011001001100011101001001000101", "01000000011010100010010111111101111100011101100111", "00111101000111011110011000110000111000011010011011", "00011000100101110010010110010111101010001011101101", "11001010011000000101010010000110000110010010010011", "01001001100000011111000011001001110101000011100001", "11000101010000010001100010011111000110101100111011", "10001000000010111100010110000100110100110111000101", "01000011010001001110101110101101001000000110010111", "01110011010010100101000110101110010011011011111101", "10100101100000111011100000110001101000110010001111", "00111111001100010100110110011001100000010111000001", "01011100001100010011101010100011100100110011010100", "01111010010011000000101001000011111100010100000011", "10000110010001001101011000000100111110011000110110", "00111000011011110000011100101100100100011110110001", "11111000000001100111010010000111010100100000110001", "00000110000101000101110111100011011110001000011110", "11111011010111110111100110111010001110101010101001", "11010001000110000010110010111111101001100111011001", "01101101011100001100010111110010100010010110100110", "00001000010111100100100011000110000011000110110011", "00010101110001101000110101101110111000011101011100", "11110100111000110110000011001100001111110100000010", "10101011010010100101010011111100101111100010110001", "10101111000101110011010110101101000010111100011110", "11101000000100000110111101011011111101100101001111", "00100000000010000110110000110011011011001001001011", "00010111001011111010100011000110110111111001000100", "00101110110000111100110100000100010000011111001011", "01101011011110111100101000011100101011011001111010", "00100011100111000110000010100100111001001110100011", "00011011111001110011101110010111010001101000110110", "00001000011001111110100100011011010001110101110000" };
        int M = 100;
        assertEquals(1168, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case30() {
        String[] S = {};
        int M = 4;
        assertEquals(968, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case31() {
        String[] S = { "00001001110100000001110010100011001010100000000000", "11000010101001011000010011110110010110001110111011", "01110010111111110101110110011110000000010010100011", "01010110100000001100010001010110011101100110000010", "11000001001111111010101001111001101101110000110111", "00000111101001100100000000111111110111011100011110", "00110001001111011010011011000000010000111101001110", "11010010001100001111101100000010110011000111111001", "00100111110001111000110101010111010011100010101111", "01110111010010111001111011010100011000111001010101", "00010011100110111101111111011110100000101101101010", "11010001111010000010010111001010100100010111001111", "00110001101010000010001100000001010001101111100011", "11001010011100101101111000111100000111100110000101", "01001010110001111110100010101001010010100010100110", "10001100000011100101101111100001111111101011010101", "11011011100111110101101110000000110000010101000111", "00100110100010100000010011100110011010001101010000", "01100101101110010011000010101100010110100101010101", "00111010011001010001001000100000010100101000111101", "01011001110011101000000110100011011101011111010111", "00101001110100100010010111100010011110001010100101", "00101000000011000101011100001101110111100000011111", "10001000110101110000000111111000001010101000011101", "00110010010000001101101110011011110110110100111111", "00001110101101001100110100100000101001111110011101", "00001010100101100000110101011010011010000100000111", "10001101101011010101100010100001111111000000110100", "01001010100010010110010101101011000100011101001100", "00101100111111100010001000011110100000000110010111", "01100100101101101101010100001101011111110001011000", "11001000101001001000110011000000100000100101110011", "10101000101010000100010010010110000011000011000000", "00011010111100011111100110010111110011110110001100", "01101010101101011011000000011010111010000111000000", "01101011001000100110110010100010000011101111101111", "00010000010100010001010101100010001011011000100011", "11001011001001001111110011010011111101110110010011", "00110011111111011101011001011001110100101101011100", "01110111100001000010000111011000001011100011110110", "01001101000110111001010111110101010010111011101100", "10011010100101000100100100101010101001110000100001", "11111001111010111101110000111111011110110010000001", "01000001001110011001001001101000111001010010011111", "00100100001110001101101001011011110001010000001001", "00011100010101110100001000110100101100000000010011", "11111111011001011001000100101100011111100111100001", "00000111101100011110101011011001100001001000011110", "01010001001110100001010011100001001110001000001000", "11111010110000100010000001100000110011100110111100" };
        int M = 500;
        assertEquals(1202, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case32() {
        String[] S = {};
        int M = 100;
        assertEquals(1180, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case33() {
        String[] S = { "10101010100011011100011101001100110011100101010000", "11010000011100000100011111100011011111000100101001", "01010000001000011100011001010100001100011011101101", "01111101011101000110001111111100100001100100100111", "11011010010100010101111100000000111011001011101100", "01000000000101100101010000101000000111010101011011", "01111101101000100011011100000011000001111011011010", "11011011011001111001000000000001110010001100101010", "00010010111101100011000101000001010110000110110011", "00111111000100111100100110001011011010101111010100", "00001110101110001111011010111011100010111101011111", "00111100111100111100011101001000110011001111010100", "10011011110000001011000110001101010010001011110101", "01101101010000000110001110010111000010010000001101", "01101001101001110111000110111101000100011110000101", "01101010000011110000110001111100111110011100011100", "11010100110001010001010000011101011101010110001001", "10010100111100011010101011110000001110010011011101", "11111011001010110010010110011100011000001010101101", "11100111000011100110001111110111110111111001101110", "11100101100111001000111100010111110100010111100010", "00101010100110111000101001110011001100111011111001", "10100011110010110101011001000100001111111000111011", "11001110100001010101010101110101011100011001010000", "01111100110101010011000010000101110010001011000110", "10111100011110010101000110001001100000110011001111", "00000011000010100101001000101011101001011001011111", "10111001001001010011110100111011010111111010011100", "11110011001010110001110101110001001101000111111111", "00101011010000000011101010111001111101101010110010", "11001101010001001010001001110100111011011001111110", "10111011101100110111111011011010111110101001111011", "11111011011110000101101101111001101111011100010001", "01100000010010011010110001000001011000110010001110", "10011010011110100101000111100111111001100000101000", "11011000011110110001000000001110101101010001100010", "01111000101100010110100000011100010000001110011011", "10110100010110001101101110110101100110010000101110", "00100100011001110000010111100100010101110110011001", "00000110101000111101110000001010101011111001101011", "10110010001010100101110110100111101010101100100110", "00111010111001100011010111010100001001101110011100", "11111101010111101010000110010111111001001011101001", "11100110110101110010110001110111101111001001110110", "10101111011110010110111010101100111011100000101110", "11100000000011000100010110011000100111101001111111", "00100011001001010100101111110100111001100000100101", "11001001010110111010000011010000011101000111101111", "01011100000001110111011101110000100101100001000001", "10101000101000111000010010101100111011100001101011" };
        int M = 10;
        assertEquals(1035, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case34() {
        String[] S = { "00001100001111000110101011010010101111101010111010", "00100111100100111001000010010110100011110100110100", "11111011011000101100101011010010001101101011000110", "10111011000001001001000111100111001000101110101100", "00001011110100101101111000100111110101110110100111", "01111011010010011110010111010010100101001101000011", "01010101110100000001100111101100110010010100001100", "01101010110110100001011100001100110110001111010010", "10011101011101010110111111000100100001100100001101", "10110011110110010100100100111010001011111111101101", "01001110101000111001001110010100001100100110001000", "11001110100110111101000101000001000001011011110000", "10101110110000100000111001010110011011100011110000", "10100011011010111111011011110011001010100011101110", "11111100011110010100110001101111111001100010010101", "11101001011011111101010101100011110000011010001100", "00001110110101100010000111000110100011100011001001", "11110111111110111010100010110111011010110000101111", "01001101111011011111110100000000110101101001101000", "00000101001100101110011101101110100010111011011101", "01101101110001111001111000100101000100011101001110", "01001000111000100000111101100000011110011011111110", "11011001001011110110011000110011001100011001000010", "10001010001010000010000110110111111000101110110110", "10010001010011001111111011001001111101110000011100", "11001100100011010011100111011000000000001111101001", "01000000001011000011110011110000001011111010101000", "00000010001011100110111111111000000110110010101100", "00000001111110110001101100101000001000100100111111", "01101000110110010111101001101001001100001110101101", "11101011101111010100110101001111011010001001000011", "01000110001011011100000111101100111010011101101011", "11011011011110010101010111010010100000100000101001", "11111101111010011010111011110011111010000000100110", "10111101110111011010010010010010011100000100011101", "00101101111111000100101010100001000001000010010000", "11001001001010011011001111100110101011011010011101", "01000100000001011001111011111010001110111011000011", "11100001001100000111100001011111100011101110101010", "01000100100101001110100101110100011110101000100110", "11001111100111010011110101000111110101110100010001", "01010101011100011000010100011110110011111001110111", "11010100100011000000000111001111101001101000000010", "00011111111001001101000010000011001110010110010110", "00100110101011110000001001010011001010101100010101", "01100001110011011011110111011001010100010010010011", "00101010100101101000001011101010101110101111111011", "01101100000000100000100011111100010111111000010110", "10110001000101001001100111111101101101101101110111", "01000100111010101100101010101001001011111111111101" };
        int M = 1250;
        assertEquals(1223, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case35() {
        String[] S = { "01111110100000110010110111100111011000100011101001", "10100101111100101001100111001001111100001000101010", "10011100100000011111011011011101011000111111001110", "11111110100101110011000111111010110111110101011010", "01011001001001100000111110001101101000100100101101", "01000101000011111111001110000000100011101011010001", "01100101010001010100001101010000010010101000101011", "11010110001011011110110110011110000100110001010011", "01000001010000100011101111000101101100001010110010", "10100000000010000001110011011101101001110000111111", "01101001111110010011011010010100001010101110101110", "00110100101100001010000110111001111000101111111010", "01010001111001101001000100110100001111100011111010", "00001101000010000001111100011000111100011110011010", "00110101001000110011100001000001000001011101111010", "11000001111100010011100110111101011011001000111101", "11101010101100110011011000110000011011000010110100", "10000001000001000000011000110000001000110000010111", "01100101111000000101001101110001100101001101011111", "11010000101100100001001110110001101100000010000000", "01100100011000000000110101011100011110001111000010", "10000100101100110100100010010010011010010011111000", "00101100001100110000001110101110100010111010110010", "00111100000011110001010001111110110100100010001000", "01111100001111000111010100110001100001001111110001", "01101000101111101110011110010111000001110000101110", "11110001000111101101100000101000011111111001000110", "10010000011001000101010100100010111011001001010001", "10111001001110000011110001001101110111011011010110", "11111100111110101110100000001010010001010100100010", "00111001110110000000010011110000001110111011001011", "00001111001101101001111011111001111111100011101011", "10100010100110010111110011100010111001101001011110", "10110100000001000110111000111001100001100001011101", "11111011001001000011000010011010101000100000011001", "11010000110011100000010100011110000101011000010001", "11111010110100000011100101100001101010000001110110", "11110001111111001001010100011000010110100110110011", "11001000000101011110100110001000111000111101101111", "10000000100010110011111010101101010101101000100101", "10100100100011100000010010000100110001011001011100", "00101011010000110100001001110101000100110100011111", "00100110111100110001101011100100000100000010111110", "11110110101110100110010000000110100101010001010111", "10100101101011111001010011111001011000000010111010", "10100100111101111011100101100000001110100000011000", "10101001010101100001000010001011010001000100010111", "11001001000100000011001000110000011000101100000101", "10100000100001011011000101100100010101101000010000", "00000111011100000010001101000010101010001000010111" };
        int M = 5;
        assertEquals(947, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case36() {
        String[] S = { "00111000101111111010101001100110111000011111011110", "10101001101000101111010101100110111111111101000100", "11010000100110011011101101110100001110011100001000", "00101101011110000010110110010101010001111011001001", "01111010011000110110111001110101010001001111011001", "11000111000000110011101101000101000100010101001101", "10101011110101000110001100001101101000111001100111", "00011000101001000100000100001011011110011011010101", "11010110000000111111100001000000101011010010001110", "10100000001100100101000110000011111000101100100111", "00101000111001001101011100011100010011000001010001", "00111111001001101110010111100010001100110000100010", "11111001001010110111000101000000101110010001111111", "00111111110101010101110111000101111000101000111111", "11100100011011110000000101011101000100100010110111", "01001001111001111011000111101001100011011000010111", "00010111100101011001001111010110011010001000000101", "11101111110000011001010111000110111100001111101110", "11001111000001000111001011101011111101010011001100", "01001000010001101001001000001101001101010100111000", "10001010001110111101000110100000101100010100011001", "01001100111010110101101000111100010101010010100010", "10011101010101001100110001010011110111111011100111", "01001101011011101010010100000100111100000111110101", "11110011100000110100001101000010110011011000000100", "11000100110011011011011011000100110100010010001011", "11111000010101101011111000000111000011010011011110", "01000100011101000001011011111000000101101110100011", "01010111101000001111001010001101100010011011100011", "00010111011111000100010110001010111011101010101011", "00010110100111011110000011010100010010010101110000", "10110000010010010000001001111000110100010111011011", "11011101000111110010011111001110101110111110101111", "00101100111111000101000111101111110000110101100110", "01110010100100001111010110100001011110011000000111", "10100111110110100100011110001101010000011101000010", "01110001100101001000001010010000011100111101111110", "11001001011011001011010100001111000100010001110100", "10100001110011101000101101110101010001101001110101", "10011010101110001001010011000111110111100110101110", "10101010000111011101110000100111001010000100010010", "01110001110010110101011010010101100010010110001101", "11100000010101100100000111111011011001100001011010", "10000001101111110110100100000001111000110001010000", "01110101111000000111000101111001010010100111011010", "00110001000000111110100000111100010101000110101010", "11001101001011100000010101000101001110000110111101", "01111111011100011110000111001100011010000000011110", "11000100111111111111001001100001100101001101010011", "10000000110001100000111000000000100101000011010000" };
        int M = 20;
        assertEquals(1090, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case37() {
        String[] S = { "11011001100111111011010000111000011001101100011110", "000", "10110000011110111010001111101111", "10000101011111101010010", "110011000010001011001111011000100", "110000110000011100011010110000", "10110110111011000010111111000111110011000010", "01000110010111000111010111000010001010010110111110", "00001100101101111001010001111000110011011101", "010011", "10010000111000011000110101011000000", "111010101110111", "0111101101110111001011", "101110111101111011101101001011100110", "011000110011011110101110110010100001110101", "0100000101010001000110100010110011000", "1110000100101", "10111000000111", "111110111000100111011100101110010011010110", "01000011110", "011001011100010010", "10111001010111000111100010011001010", "0100101", "10", "0110101000100001101110000111001010011010000001111", "11100111001111100011101100010001111101", "1111010001000111110110", "1000110111110010010100000101101111101101000", "011010101000101100110001010100100111111001001", "11001011001010111", "0001001100110101001111001010110101011", "11010100010110110000", "0100011001100011000", "0101111001110010111010011101111", "001111100111111110101110111011000000001110010", "1111110010100100", "10100010101", "0111011001011010000100000100100011100000", "1000000", "0110110101110001", "00100011011110010011000", "1111", "111110011001110111101001111110101000101111010", "11111000", "1001011010", "011111110111111000", "00111", "00011011111011000100001011100110001011110010000001", "01110", "01010001011110110010101001111110110100101100" };
        int M = 4;
        assertEquals(517, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case38() {
        String[] S = { "100010000101001010010111001000000100101", "0010001110001", "01011110110011", "0000", "01000111001001000001101111101100110011", "11110111010101", "11111011110111100110", "010001100010011000101001101101101010000110111110", "000100100001001", "11", "1011011", "001101001010001101001100", "01111110111100110111011001100010", "01100101100010100100111", "01110110001", "10000101", "110000100011111011110000010", "110", "001011110001100111110100011101011", "10001000010111100", "001100010000101", "11101110010111110010010111100010100110111001", "111100111101011111111100000100110111100", "0100011010011100100001110110", "1010100001101011011010010010", "11011011011101101010011111100110010011101101111", "0110001000000101111111111010100", "011000000000001110111001", "101011000000100000001", "01101001010010101001110001010101001110010011101", "000011101011101", "01001000011011001100011001110111010", "10101110111011111", "1101000001110110110111", "0101011101101001111", "00111010001101011010110011", "111100111000111", "110", "1000111100001001110", "010110101100000010001110110110100", "000001110110011101010110100111101", "11010110010111011100110001001", "001100111010001011011101101011011000110", "10001110110000011111", "101011111001110000110101101010011100010", "10000101", "101000110011110011100110110011", "1011001101", "1001111001010111101010010", "010110000001011001010011001011001111111" };
        int M = 1192;
        assertEquals(568, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case39() {
        String[] S = { "01111101001", "0100010001100", "1100110010011100000", "001101000001010111001110000001001110", "10000111010100001101000", "01110100101011", "101010000000001110110101", "11111011010100110000011", "1001011001100100000011101000", "0001110100001110", "0101110011001000011110", "101101101001010011000101111110", "1010011101111010000000111111", "00110010010100110011", "0100101110110001010101010010011011011101", "01000110011100010100100101000110010100110001", "1001011101101111101011010001110000010", "100101110001111001011011110101011111000", "000000000001101010000001001111111100000000110", "001101010110010101110011", "1001101010111101001011110110111", "10011100", "00011110110100000101001010101001010000001011011", "111010110100000001110111111100110010000011001", "0001011101101", "111011101110111000111010011000111011111", "01", "110010000011010001101011111", "1100010010001001001100100101", "000011100111000100001000110011110011100001011010", "000000101000010110000001111000011001", "001100100011010010101010101010010100", "01011100111011000010011010011000100101111110011000", "0111011", "00110000101100110110101100011111001101", "00101010110101000100111001011011", "011001111000110010101110001111110001", "1000010000001111", "001", "0111110010000001010001110", "11011000000", "0101111011000110010111", "11001000011011111101100110111111111110111", "01100000001010101111100001011100101", "0011010", "01", "10110000110000110", "0101101101011110010000010001101001", "11110111100001100111110", "1101000000000001110001111100011" };
        int M = 26;
        assertEquals(578, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case40() {
        String[] S = { "111000101110110101110001101001000", "10000111000100011", "1001101010", "0110110001110000011110000000111011001010000100010", "010001010000010100011111001000101", "10010110011111", "010", "010101110100100010011111", "1001111100010", "10000", "1101010001111100010100010", "11101111110100000110", "100011010110", "011111010011", "111101011111100000100001101010101101", "111011101", "1011111100000111011000", "000011111011010111100101001001010", "001111", "111010000100010001", "10010001110010", "1101111111111000101111", "0111111", "10111100111100000110", "000010001010111101001101011", "01100100101111001011001101100100011101011010010100", "101011011100101010011010110110001110111", "1010011110110000001111110", "0011010011111111110", "1110000000100001111110011011100", "11101110011111111", "10101101100010000111000110101110", "1001111100000110111100000110000110101000100", "111101110", "0010101101101100001001011", "001010100110000110111001", "101010000010001001000110101111111", "10011110011010010001000011010111", "000111100010110011101111111011100111010111111100", "1110010000", "11011100111010010000011100001010100100", "1000011110010000100101", "111000010001100111", "011110000000101001011100001011111110", "0101011100000111100000010001100110000010011110", "10001", "11001101000101001111111100011011", "1101111111111101110", "0100001100110001100001010", "1000011010011101011111001011011000" };
        int M = 23;
        assertEquals(524, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case41() {
        String[] S = { "101011101010100111011110101110", "01000100001101011000111011101010", "101100110111111011111100010000", "1111001100100", "111000110011000111000000011101111001", "101101111011111001111111000110000001111100", "00000111000110100110101101110011", "1100011100", "110111110011001", "011100101100000110001110001011110101001", "0000011100001101001001001101001", "10010110000101110001110111101100000000001", "101000010110100011001101111", "0000001100", "000100001001010110111110", "11000001100", "01010100111000000011111100000010010100111", "00110110101100001011011101101100100110011110011011", "111011011000100011100110010011", "001010101101010111110010011100111101", "100110101011100011100000011110111111001", "0001", "110010111101101000111111", "11001101111000010", "0101111111010000000011011100011000", "10101100111001000010001101", "1010001110010101010001011110111010111101010", "1111010110100000101110001", "000110001000111100001111111000111110100", "0110000011101111010010101010", "1010000010100001011", "10011000101001111011111101010011", "1101111010011", "01011011110001101", "00101100100101100", "001110111100101110001001101000001010", "11010010110100010100101", "0001100010100000100000", "001", "100010101100110000110111001100011010100100100110", "00101001001111100011001100000101111", "000111001000000", "1101010000100", "0010110100111100111011101101100100", "110", "0101010110", "10000011001001101111011010000011111111101", "0100110001111001100101010100011", "110011011110111100110001", "111001001100100011111101110110" };
        int M = 1325;
        assertEquals(650, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case42() {
        String[] S = { "00111011011001000111001110110001111", "10010100100011000100010101010110110101000100001", "11101110011100000000001111101010111101010110", "0000100000001000101101010", "00000001111001010010100000010001", "01011000011110011001000100100111", "100000011100100101101001000101111001100000100", "010111110111001001110010000000100", "10110100001000011100010", "1110110101110000110100011", "0101011100000110001100", "10000100011110001010001111", "001001001100", "001001001110101101000", "010100011011001011011110000100101000110001101", "110101101000010101010100001011110001111111", "011100000010101111111100010011101", "10110101000111011010", "11011100100100000110110011101111001", "1111100001110010011111000011110001010100110011011", "0100100100111100", "011100011110", "0", "11111001010010100011101011100001000000", "100101100000011", "0111000111010011000", "0000100101010110010110101010001010010", "01000101111100111101001001010010", "110110111111001101000111100100010000101", "00101110011", "11100001100001010010011100010100110101011111", "0100010110110011001101110111000001001011101100", "0110100111000011110100100000", "00", "01101111001100010010000100011100110000", "00110101110", "101011001011010100", "01101000110100000111111", "001000010011001010001100101101010110111", "01010011010001000010010111011100111000111001010", "010100000110100010011110100", "1001001101111010010101101", "1100011110111110111100110100000", "10111100", "001000110001101011100111000100001111101", "00011000101101100101111100110000", "001000101000000010101111011110", "1001101100111001101001111101000101110000110101", "11001011111011100011011100010010100", "01001001011101001110000000101011011110011" };
        int M = 18;
        assertEquals(647, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case43() {
        String[] S = { "0", "1100011011101110101111000001111010011001010", "1101111001011011100001011111", "1011101011010011010110", "0110101001101101010", "00011011", "00111111011", "1111101110", "01101101100011010111010011000011", "0001000101100010100011110001101111110", "10100111100000111001001010111111000", "0111101001010000010110101010101011001010011", "0000011011100010010010111000111010111100", "01001", "011001011110011101010001111110011111001011100", "010111101100010", "01001111", "00110000111001011001100000010100010100111", "0001011001001000000100101011111100", "11000110110111111110111011011111010001101111100", "000111100111011", "00010010110000010101101011010", "1000010111010010100111001", "1101101001111000110001010001101101", "1111010111101100101010", "0100000", "110000111101100101", "001010", "0111001101100101000110", "111000", "1010010110001000010000", "00100101000001001011000110001011100001", "0000010010100100010000100110001000101111111001", "10011001", "001000110101111100000010000010001", "100011100001111010011001101111000011", "0000100011010101110011101001110111000100", "010111101000000101111111100111000010001111000", "100", "01010011011011110100110001011", "100111100110101101101100001011010", "00101111001101000", "0000110", "01010111110111010101101000100001011", "110101000110010000000111001001000100111000001", "1000000", "000101100011101010100110001001110010", "01000101101111010100011010111111100111110", "1100001101110000011101011", "1110101100001001001111" };
        int M = 29;
        assertEquals(547, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case44() {
        String[] S = { "11010110100101010101010010", "01100101001110000100101010111000000000111000001101", "101011010101000111111100111", "0101001010010010110010110101111010000010001101101", "10101100110", "10110111011101010110111101011000111", "1111001000110", "00011011101111101011011000011", "000110101100", "100010", "01000110011001110101101100110101011011111001", "11000110010001101100011", "010110101010001101010010101111000101101101000", "1000010101110000011100000", "00010101", "1100010100010101110011100111110101101", "00011000010010011010010110011", "100010011101101110111111010110110", "011111100000100000000", "0111010100111001111011010000000100101101101", "100010011001", "011011011000000", "0011101110100010111010100101100000100101", "00111100001101000100100110011", "10001000111001110001", "1110000000100101001110010001001011010001", "1011", "0110000001001110111000101010100011001", "1011001", "001", "11101110101000010101101100000101101101", "1000100000110101110110011101111011010100001001", "0101000011000000001100100010101", "01110110100101111000001110111000011010111011000", "000110", "00011100011000011000110010101101100001011000110000", "00100001101101010111000", "1101111101001010011100001000110110111110011100", "0001000011001001001110011", "0001100110101000011000111100010", "1010100011100", "111100000000100100010010100", "10000000000100111000110110", "0010101100101110111110010011110010", "11", "0101000011100111010", "111101101100110010000110011000110001000001", "1100001110001", "11101000111001111111101111", "01100010111000000000011111" };
        int M = 42;
        assertEquals(603, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case45() {
        String[] S = { "00101011001001111110001", "101001110000000010010101010", "1110001101011010010001101011001001001011100", "010111101111", "011001001101001", "10100101000000111100011", "0100110000111010111011100000000110001000111", "1110111001", "10000001", "010111011101011110", "011111000001000000", "100000", "010000010110100011001110101101001011010111010010", "000001011001", "0000000100111101010111", "10101001101001110111001001011", "1010110010001001111011", "00110111101101101001001001", "01010010010110011111", "00101000111101101111011000001111101101000111000011", "110001000011111011111111111100110010011110101001", "0000", "010101111101", "01101", "00000110011100011111000011101111000100101101", "0001101000100101101001100100100100010", "011011101010110001111110010", "101001011111001000011011001101111", "100000001100", "01011010000", "1111001010110101111010000101000010010", "010010110011010010010000101111000011101010", "10000001010001111101001100", "11010011110111111110100000", "0110010000011100000110110000111000011111100", "111100111101000011110110010110100010101000100", "11001000001111011110", "111110001000101110", "110010000010011010110010001010110000010011", "1011011100000100", "01001011101010010001111", "1100000100110000111111101010100110001010", "0100100010101111110111111010011111001011101", "1110111010", "0011001000010010111111100111101111001011000100", "1010110", "1001110111011111010101100000000001", "010011000100010010101010000100010010011011", "0100100110001100010000010010011101101", "1111011011011" };
        int M = 2;
        assertEquals(477, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case46() {
        String[] S = { "0111000010011001100110011111011001101", "00001010011000010110001101101000011", "1101000011011101000001110110000101110", "0111011011010011010101100", "011011001100101110000001010110011101001", "11011010001000011111110110010101000011011101011", "1010010111000100100000111111", "010111001110011000001001111", "000100001110000001110010010000010", "00011", "1010010101010010010111111110001101100100100", "11110100100010011001111111111", "11011101010011111", "1010111000001000010101110", "10001110110001111010110010010011111", "1100010101011100100010110", "01111110101110101001010100000100011011000011101", "011", "001011010", "100100000001111010100001001011000111110010010010", "0110", "00011110110010100101110000", "1111011111011111100011111100000", "000101011101111011110110011010010000000010011", "101100100011101001110000011001011", "0100101000111110101011111111010000010011000", "000110100011100011010011000011", "001", "0110001000001", "1011001110111010000011011000101101101", "01111010111000000101", "000110001100000000", "101010", "1101001000000000001100011000011010", "000100010100001111000", "00001101110010100111100001", "0101101001001101110110010100101011101011100010011", "10011", "1011011101001011110001001001111000010010000101", "010000100001111100001010110110101", "101", "100000100001110101", "0", "11000101011000011", "101010111001010100001010001111000111111111", "01001", "000", "10101111000110010100000001001101000001001110", "100011011010100111100100111101001101001010000011", "110010001000111001101111111100101001110110001" };
        int M = 17;
        assertEquals(575, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case47() {
        String[] S = { "011010000001000100011010000", "10110000110010011000101100110000001110101", "1010001110110100011110010", "10011100101100110010010101111110110100010000010", "010", "101111101011", "00110110010010111100100111101010110", "1111001100101", "010111110110100011", "00111001000100010011101001010101101", "0011011000011", "110101111010111011110110", "011110010101100111110100010000111110111011001", "0000001101110100111010100000110100", "11000010000011000", "011011111000001011001101100000110011", "101000000100110", "01101110001001001000011101010100111011010100010", "111110010101010101000011011010110010011111000", "110010101110001100110100001100101001110", "1010110110100100010110110111111110000001", "0011110110101001011011111101", "011010", "0010000010001100110001011000", "110101000101110001111010111", "0111000110110110101011001010", "01001111010110011010", "0011101100100001011001010111000110", "1110001000101", "1110001101111001010010110111101110011000000010", "0101010000110100", "010", "1110111101111100110101100101", "0110001011100011110111000001001001100100001010", "1111011010010110010110011", "10000010011100010000010110010100000100111101", "10111010001101001110100101100011100001010111101101", "1101000000000", "0011000100010001001011101110000", "01010110", "111", "00010101100010101", "10101110001001010000110100100110110100011101110100", "1001111110100110110110110000011", "000101101100001110100101011011", "0010000100101", "0101101010101011011101001", "010010100", "00101010101100011000101001010100101101", "10100010111011" };
        int M = 3;
        assertEquals(516, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case48() {
        String[] S = { "111011111000101011010101010111", "111111000010011101100011111", "1011000001100011101", "001010", "0", "0011101", "000110011010110", "01110010010011", "11000001010011000001001011101011011111110", "01101011100001100", "01001001110011110000000010110", "11010000111111101011001110110001110011110111", "01010001001110011001110", "101", "000010", "01110", "0010111111101011110100101111", "00011111111010011011100001000", "010010010100110101111111101001000", "110111100111", "0010100011101010000000", "11110101010", "001111001101", "1001111111010100101001010011111010111110100101100", "0100011010010", "0", "111100001010101110000011110110100000111011100101", "1110010001111100", "101000000000100110001101001010", "00101100010", "00110110", "000010011001", "110010100110000111", "00000001101", "011001001100", "1000000011100110100000111001000100000110011011101", "10111110101001101101", "11010011100010010110", "00010001011101101110", "01000000101001011110011000010111000100110000111111", "01100111111111011111001001001", "101101000100011", "01110010011110000000010000110011000110010110100000", "0001001111110", "110101111111110111100", "1101101010101011100010100111101011010000000110010", "10100010101001011101011110100000010110100000001", "1001100110001100111100", "110010010001100101010110110101011100100110010010", "11001" };
        int M = 19;
        assertEquals(465, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case49() {
        String[] S = { "0001111110110000001111110110101110", "00001010000000", "10100100110110000111000011101111000111000010000", "10010100111110011110110111000111011111111011101", "100101100111", "11101101011100110001010", "000110000100101", "1000101111111110000", "0101001011011", "11111111110101000100100010011111", "000001011001011110000111000110100010110110000010", "00101001000111101001010010111100101110110111000100", "100001110010011101010111010000010001011", "100001110", "0010101110111", "110010011100000101", "0001101100", "0111011111110011001010101001101111011110100001", "11101010001001110100010", "1011001110100101100101110", "0111110", "11010011001111110111001011111100010101", "00110111010000011110100011000011010", "11010010101100110011011001111100100111100", "0111000100011", "01000", "000", "00110011010101010010010", "0110011000000101011001110001011110110001010000011", "1101101011010101001100110000000110100", "0001110101101010100001000011011011010", "1100101100011000", "00", "00111110010000000101110011100101100011001001100", "000101110010010001000110", "0000001111100111000", "0100010000010", "0101110101111010011", "00001000101000101011111111", "110000110", "10100101011010001101110101100111011", "001101101110111011110011110010", "1100", "10011111010111110110100101001110111100100101110100", "1100010110110010110100101110111011", "00000001101011011100001000000", "10100011111010010010011011", "11000", "10001100101001011011001001110001010000010001", "1000110100001011" };
        int M = 67;
        assertEquals(571, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case50() {
        String[] S = { "00000110101011001101100111101000110100100000", "11010100", "11001110011111101011111100111010001", "0110110111011000", "011001011010000011011", "1010110101111001111100100000101100000", "11011110110011100110111010011111111111011101", "1111110010000000101010010", "10101111001100100011", "10001101011100001111010011011100100000001010", "01010110000000110000000", "10100001110110001101011110000", "0", "11011011111111100100101000010001111010110000011011", "11111010010", "1010001100110000111010110011101000", "011011100101000001000000010111010010100101011", "10000101011100111", "00101110100010001010110011011100000101011", "001000010110110011011110010000000101110", "01111000000110100", "011010010101010000000001000111", "1111010111010", "0111110100111010111111000101010110", "101", "00110100110011010000001110", "01110100110110000011001001101000101", "10111010000001001111100101", "0001111", "0111100001100101001111100101111110000110", "10101010000111010", "00101011001111", "101100101101010101100011001010010001011101", "0111000100010001101110001010001011100010101011010", "11000010101011110100111100110", "00001011010010", "01100010101011111", "0010000110010010111001010010110101110110101010000", "001011000010000110000110000010100101001111", "110", "001000001111001001111011010101101101111111011", "00010001010100011101", "101000001110110111101111011110101000101", "110101111111010110", "1010", "101100011111001000111101001001010100101110011111", "011100010101001010000", "01", "1011111000101", "01101000111011001110111010111" };
        int M = 38;
        assertEquals(606, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case51() {
        String[] S = { "000101101011011010011000", "010101010101100001000110110001110111000001110", "10000010011", "11101001010111011101101", "000011001111111111001010", "0011010000111101011111001000001100101", "1010111010010110100001101001011010111", "10001110000100100110001111001100011000", "0", "10000001100111000000111001111101110111", "000000100", "10001001111101101001000110001111110101001010001", "100000001010010110100010", "01111100100011110011011101101011100", "10", "110111", "100111000001101101", "1101011", "10111010", "1110111010001101100011000000100110001", "11111011010110111011100110011011111101110000", "1000111", "1110111010011101101011011100111011111", "10101110", "01100000111000000101100000100000", "0000011111010100110011111001101111100010011111", "0011000", "11000101001110101110001001110001101000111111100000", "101001010001", "110111111010000101110011100010", "0011011010011111000010000001110100100100000", "11000100000101", "01010000000000111101001011", "0", "00011000110011111000111011010000111000010", "01001110110011100100011111010110010110", "1010", "1101110110110", "1100111101000110100101010011", "1110000101100110010010111010000", "111010110100010001001111110", "1100101111100101001111011000101010110010", "00110011111011101011001111000000", "11100101100100", "10001011111000000001101111", "01011001000101101001000101011101011110010000100", "10011111011000011101110010101101", "01101001010011010000110111110101000001110111111101", "1000000011001", "111101" };
        int M = 5;
        assertEquals(486, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case52() {
        String[] S = { "11110001000111", "01111101110010010", "00", "1001000111010110101011101001", "01100101000101001111110011101101101100101010000", "0111111111011000110", "1010010111010101111100111", "110010101110", "010111011010001001100000001101010", "0110011000111001110000001", "0010100101000000101000100110110110111100111110", "1001100111010100100011000101100101", "11111011101", "010001110110100001101011", "1101000110", "0101", "0001011010110001", "01011111101110111100", "001101100", "11000010000111111011011", "11010001", "11001011100011011100101000000110000010110", "11001000110110100101111100110100111001001", "000100010001000101100010001011101010", "10000101010111110", "10111111011111010111111101111011000010001001", "001111111011010101010101110100110100", "01001110100100101101", "1000111001100011010010101111010111", "1110101001011011011000100000011001110111100111110", "1101011010010010100110000010100001100111000001", "0000011111110010", "01111000100111111100101110", "100000100010001101001111011", "111101000100000111011100101001001", "0001000100000011110010101101111010111010010", "10", "11011001110100101000010011101101010111", "00000010010011100111001110101", "1111001110", "1110101101", "0100000010101101111000001", "01000011001001001000011000", "11101100000001110000100000011110101011100111", "000", "1100100010", "00110101001011101100110011110010001110", "0000010100100001111111001010111111111", "010", "110101011101000" };
        int M = 613;
        assertEquals(597, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case53() {
        String[] S = { "110001111101000101011000011010110111000000111", "110101010110000100111010101100", "0000100000001111011100000", "0100010101", "0010111010", "001101", "10101101001010101011101011011101011", "0111110000110100001010011001000110100110000110110", "0", "10010000001010110111110101001010101001111", "10000110101001", "1101000", "111001000", "1100110010111001100001101000", "110110001111111110001001111001110001", "0010011101100010010110011110101110111011101", "0111110110111100000110011000110011001001011101110", "10100110000100010101111111", "00101101000011110001010101011111010", "0001100010011", "0101011010001011111011000011101111", "111101100011111000110110010110", "0001110111110101", "01011001011100110101111100101", "000000", "000101101110001001000011", "01101010100011101101000010101111011101001", "10010000101111001", "01000010011101011001011001111011000111", "000000101100000111100001000000101101100100101011", "110100001110110101111011", "0100110111010000110101001101111011001011", "10110000110000001001111110011", "11011010011101101111101001", "001010000110000001010110010010011111100101011100", "01000100000100001100001110110101011101", "10000010100000101111011111111111011", "0101000110011100010011011111111101101001000000110", "00110000010100001100", "1101101001011100000000000001100101000101", "11110101", "0010110001110010001010101010111", "0111110110000011011000001101", "111000110000000101000111100100000101001010111", "001000011001011111100100011111010001001100", "110111010101000101001101111101001010010011110100", "000001111101110110111010101100", "00111010010101101001100", "1001111110001011000110", "0100011111000100110101101" };
        int M = 1;
        assertEquals(481, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case54() {
        String[] S = { "01001010100001001110010111111011101", "000", "01101100001101101000000111111000100110100", "111010100101100101111000001001001100011111110000", "00001010000111000000001000101", "10001100000111000011101001111011010100100", "000011110001000110", "001", "11100", "01100100110010110011010011100001101000", "00100101100110001010000011101001", "0001000011010110011", "11000110110001001011000111001101", "1111011011001001001001110111101001000001000", "00111101111100001111000111110000011101", "1011000011110100000001000111001011110", "1110000000111100111101001011000110000100101", "11101", "1011010000100", "1100010001", "000001111100110101", "110101000011", "00100001100111001010011110110111100010011100011110", "01111110000100110011010111011011111000001100001010", "10101010111", "1000001101000011100101001000111000011010000", "000111000010", "10100001", "1010010100", "010000110100101100000110010011000", "11101001101001111110010000001100", "11101000110100010011000000111010110100100111000", "001", "1010101010010110010110101110101100001011111010000", "000001111011011101010010100011110001", "11110001100100100001111000011101", "0000100100011011101000101", "100100000010101101111011000011001", "011011111000101110010", "1111101111101100011000101100001111011000", "10000101100101111000011000000011010111100110001011", "1000100000001111100001101", "11100010111110100001101100110011011100111100100110", "11010100000010101100001011000001011111000", "101", "0111011110111110100000010111", "11011101011010111100100011001000011000", "00101", "10101001000000001100000101001011000111101", "101001111" };
        int M = 1388;
        assertEquals(658, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case55() {
        String[] S = { "00110101", "01111001001101110001011100010111010111001110111", "1010011101100000001101010111111110001100", "1", "10100101101101110100110100101000001100011101110100", "010010001011010101101010111", "101011101", "00101001111011101111110101011011", "1001100001010000111101001", "0100101010001001011010000111110000110", "0011000100100000100", "100111111", "0010111110011001110000100110100", "11", "10000100", "010111010111110011101", "1010100000000010001100001000110011000011100010000", "1000101111010000101111101010011100101011000", "0100101100111110", "101111001111110001001011110010001000011100", "0", "1101", "1101110010000", "100001111101010", "0100010000111101101000011011111111100001010", "010000000010101010100101000111100111", "1010111001111110", "100111", "1110001000001110100111110010110", "101011", "10110111011111100011101", "111110100010000101", "1110010101000110000000011000011101001000111011", "00110101001", "0001000000011001110001011", "1110010001010010010", "110000011111010000", "0", "010100000100101011", "100001100110100110010111011010000110101011111110", "1001011110", "001110100101011101011000", "0100101100", "1000101010011000010011111001101010000101111010", "00111011111010000", "11111110", "0100101010001101001101000001010100", "1010010011010110101100101", "00110011111011000100100000011", "1010011001110001010110" };
        int M = 1139;
        assertEquals(568, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case56() {
        String[] S = { "10000000110011011100001110011001111101110000011111", "11100010011100111001100111100111000011001010101110", "110111010011101101001100", "011001", "1001111010111000000001000100100001001", "0010000000011100011000101001110011010100111001", "11011000101101101100", "100010010101001111000010011", "011110111111000111101010011010001", "00100110111010000110", "1011001000100101000011001011001010001", "1110000010110111101000010111", "100010", "1111111010100101001000101111", "0101101011010000001111010111000110000001011", "00011100010011111101011111101", "000001101", "0", "11001011000011101110000100010100001110", "00111010001101010001001001010110", "1000111000011", "0110101111", "000001000110110110000100011001111001", "100111000", "1001", "0011000000011011", "1001101101010101000001", "00001001010110", "100110011", "1010000010001001110001111100111101", "11011001110001101010110111011110010", "000110101011111000001111101000010101110000", "011110011011110100100111011101111", "01100001000110000011010111010011", "00011000001100100001001010111011110011010001111101", "0011111010001010011001000101100011101101011010", "11000010", "11110001000110", "0111111000110100001101010001001001", "00011110110011110111", "0", "111100100000100111101000100111", "100010001010101110000001", "10011110011000011010001011011001100011", "010111111111111001001101100000", "1111001000100000010101001010111", "0111100101111110010100001100", "11001101001000000100011111110", "10001110001101000110001", "000110110000111001" };
        int M = 1297;
        assertEquals(639, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case57() {
        String[] S = { "1110000101001101111101010111100110011001100111", "100100001010011000011111000101001111", "010101011", "01100101110101100000101101011000101001", "10010100100100111100", "100000101101000101", "100000100101010011101110001111011100010000101", "00", "001", "0010011111100100", "0111111100", "1011000110000010001001101001110011011110011111000", "00110011111001111110", "101011110011001001110101010010001010111", "0011100", "10001101011111110000", "100101100000111110101001100100111100110000101111", "101110100100011000011111010101101000100101000", "001011011", "00001001011111101011001100011", "0110011101100111110000100011111", "10010110101011001", "10100100", "011111011110100100110100", "0101", "101111111000110001", "11110010011110011000101101000", "00101011111001000110101000", "1001", "0101010001000011101101", "0", "1100010010101011", "00011101011011000100", "1001001100011", "00010010001001010000110010011111", "101110101101001000", "10000100001100010010001101100", "100000010000110011011011000101", "1101011", "11001010111001110111111", "0000111010010111000", "00100100011001101000", "000000001001100111011001100000011100000", "00110110010000", "101111100111000100010011000011010011", "111011000110", "1011101000110000010001001", "0100001101011001110110110101111000100110110", "01101100100101101010100111100101100000", "1100100000000110000100001101101100101110000010" };
        int M = 23;
        assertEquals(512, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case58() {
        String[] S = { "01010000101101100110", "00101011", "00110000101111111100000000010111010010011", "11111011011001110110100001100110", "01000110", "00011000", "0101101010110011101011111110000", "0110100001111", "000110", "0100111000110101000010001", "1100101", "1110100000110001101000010101001010111001101", "0000001110000111010110101100", "000111011110", "01111111010101010011001100000111010", "10110100", "110111011010110100111111000", "1001111011001101101111100010001110", "10011101010110110111110100001", "1011110110001011110000011", "000110011000001010101100100000110000011010", "101100001111100111001011000010001001100101", "1", "0001010100111010011000101110100001000110010000101", "00111101010000101010010010", "01100011111110011101101001110110111", "00000111111111011111100000110010001010011001101", "01111110100111101100000000101101101", "0100000011111001101011011001101101000110010010", "01100110001100111100111010", "1", "000010000011011", "1001100000111", "11000111110000111111001011001", "010010000100011100011011011", "111101110001", "1", "11000101000011101", "0011101111101011000100100101001101", "1000111101001100101010", "100011100010010000010111100001100", "01010000111100111", "10110000100101111010011100000010111001001111010", "0000001000001010000011001010111011110110111100100", "101101101010111101101111011010100", "1001001101101001100101100011001111", "101101111000011100000110100", "0100111000100000", "01110011", "110011010100000111111101100101110110010" };
        int M = 1;
        assertEquals(422, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case59() {
        String[] S = { "10", "1011000001110011100101010110110110100001010000", "010101101", "01110101101110000111000111010000", "0011000", "111010100001110100010", "10011110000101110101010010110000001001101101110010", "1011000001101101100010001", "0011111010100110011001010100010001000101101", "011010001000", "0001", "10010011001101101101111001011000001110", "011101100001", "0101", "101011101", "1010100001110100001100010111000000110", "01100", "010111100011110000001010001011100001101110000101", "000111010010000", "0010010000011110100000100110111111100010001000000", "0001111001101111101100000001111101011011011110", "000011000001010111110111011101010101101100001", "10000100010100001001010101001", "00100101010001010000", "11000011000101100011010111100111", "000011010100101111100", "101011100010111001110000101", "0101001000101011110100001101001100110001000111", "011", "010010101001111010", "0110100101011011011111110000000101101111", "1010100110", "000100110100000111111000000001011000000101100", "11110101001001100101001111111001100101011010110101", "001100011011101010111111011100011011101", "1001111011110101001011011001101111110", "0011001100", "011100100000111011101010111000000010000", "000101011001100001101001110111", "111101011000000100", "11000010111110011110", "1101", "110100001100110001111", "001111", "0011101011", "1111000110011010101010011110100", "110000010010001101111110111011000000100101", "11010111000110110011001", "01000110100110111100001111", "010000000" };
        int M = 5;
        assertEquals(488, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case60() {
        String[] S = { "11100101111000101011", "0001111000010111000010", "10101011000011010101110100010111111011110111101", "000100011101001110", "011111001101011011101111010101011010111110", "10110011001000011000011100011010", "111001110100010000110011010001", "010011000110010011000100110110110011", "01001110011100101011100", "0110110000000000101100011011", "11010011110100000110000010011001011100011001100", "0010001101", "00010010010110000100010111110", "0100101101111010011", "010111010001", "001000001000010101000010101101011101000001", "01110010110110000110101101010110", "10101100110011010000011010", "100011111000110111001101011101110", "010101100010110100011110011011100110001010101", "110101111111010110011111", "011011111110111000101111", "11101001101110101", "01011110100100101101110010", "000010011011100001011110111111010101010011", "011001011100100100001000010101110101110000011", "1011110011011110001011111010000", "000010101001111001101110101110110110111010011", "1010", "1010100010110011100000100001010001100110100", "10111000100000011110011100101001000101", "11", "11101010111111", "1001011100100001111101101000011100110111110100111", "01111111100", "0011001101110101110111111111110", "0111001111111111101011000000110100111010101010", "01010011111100101110010111", "1010010001000101", "000011", "11110011110101101001111001111110010100011010100", "010000110001000001110101", "11111", "1011010100111011010101100100000", "00001100001001111010000100", "11000101", "10000110101110011111111101111011110000010010", "10011111011100101100000010100001100111", "0", "01100101001101011110101001" };
        int M = 1;
        assertEquals(466, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case61() {
        String[] S = { "011101011000000100011001110010100100100", "10100110110011010001000", "10001111000000010101", "0101111101110001101000011011010100", "001100101001101111011101011011000001000110", "100001100110000101011111110110010111111001111", "11101010000110110000010111110010010001001100", "0001011000110101100001111110010001000101111", "00011000011010001", "10001111010111", "01110000001111101001110100101000", "100101111010011010000111010101110101", "10010111100111", "0101101010111000", "0110011000011111001", "01101000101110000111010010101100101100010100001", "000011001000000011111", "00000001010111100001101110000000100101001011111100", "1", "1011110101101", "10011011110", "101100101010101010110001001010001110", "100011100", "10001111111010010010101111100110011001001111001110", "110110101100111010110", "100111011001101011100100001", "0110111100000", "001000100001", "010011100010011011010000100110010", "1", "10011101100100111", "01100101000000111111100111101110001100", "0010101110111110111101100111010101111001110", "00000110001100000000000111100111100111100001", "011101000110100111", "101101000110101111010000011000111011000001", "01101010010111111011001101", "10100000111011100010001", "01111000100010100010000101101001111000000", "0111011011", "0000110001110010", "110001", "0101111111000100110011110", "0110000100000001000", "00011010001011111111111101010011001101101001100", "1001100001100101111010100111100111110110001100001", "10011100010110001000101110011010001", "011100001001001111011101101", "0000110001101111100100011010001010010100010", "000000001" };
        int M = 1361;
        assertEquals(672, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case62() {
        String[] S = { "0010010001010", "0011010101011000010100011001010010", "0111", "000010101100", "11110101010111001010101010111011011011011100011000", "11000110001000010010110000111010000011101011111101", "1", "001000000110001011110001001010100101000110111011", "11000011010111101010101110000000101", "100", "0100011101100011111111011101001101010010001", "110111101101011000100001011100011001010", "110000000010101000101111101001101101", "0100101110001111000110010101", "010011011100110110111000100101111100110", "100100001111010000", "011100001101000001010101101101101100011101", "010100000111", "10011000011011110110101111010101101101100100110001", "11110010000000110000110", "10101110101001100001", "0110111011010010011100001010110", "0111010010", "0001111011", "111111111110000", "0011011", "10111100111011011001110101", "001001110001111111001011110100000110000", "0110101001100101111000011000101101011", "1010000100100101100100001111100101100011000010100", "01011101100101000100000101001110101100100011101", "10100011111001000110110101110001000011001", "001111101100011100000010110010111", "10110001", "0011001010111000011111100111000101111100100000", "010101010110", "00010100111100000001001", "1110001111111110010011000", "10101000101010101110101001010001100011110000111", "001", "11000100111001100001100111100011001", "0111110", "1100110100110111001011011011010000010011010111", "0110001010101001011110111110000010100", "01110000110000110111010", "1", "11100010100101100111000101111000010100111000110101", "010001001", "111011110000000110011100100111000001100111010", "10000101001111001010101010000001" };
        int M = 82;
        assertEquals(667, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case63() {
        String[] S = { "0001111011110101111010001000011001110111010001111", "0110100111010111100100111", "101111011", "11101010011010111101100101010001110011000", "10011100111011111111010", "0010111111101010110011101", "110001110100100010011000010100001101001011111", "0111000100010001100110110", "1000011000110", "10011110111", "10011001110100111100000010010100111001", "11111100011010011000000", "101111101100001000111", "101011110110111000100", "01001110", "00010001011111", "010001111010011100101010101101001", "101110000101", "00101000011110001001", "01001111000011011010111110100001", "1001101110011010011", "10101", "11111101011", "111111100010000100111110000110010", "11", "11000011001010101010100100101111101", "00110010001110", "1110", "001001011010100110010100011010010001101", "01100", "10111110", "0010111011001", "0110111100110001101010111001101001001011", "10101111101110101111000011111001001101101100110", "1011101010101011011001101001100010111110100", "1100010110100111000011011100101", "011111000", "11", "0010110111001000", "010110101111110100", "0111010000100000111101001001011100", "000100101100100011011011000100111011", "000111100111010110111110000010010000011110111", "01000100100001010000110010111101100", "11100101011001101100111", "110110111010", "111110101010000111101110101101010001", "0100011001100100000011111100100011000", "11100010111011110010110000111", "0001001111100110001110010110110110101100100" };
        int M = 404;
        assertEquals(567, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case64() {
        String[] S = { "00110000110000001001110101010101110101", "001101010100010", "0101001110110100000000001010", "00100001010101010010101000111011111111011111001", "110011101011110011000000001", "11000111", "11100010000110101000110010100100010", "110110100001110010011001111010011010000111011", "111011101000111001011111", "00100111111110", "011", "1101111000110010011100110001100110001000000000011", "111001100100011", "01100011000011110100110011101011111100", "1000001001110110101110011101011001100", "11000101", "0", "100100011010010010", "0011111001000", "100101111000000110101", "11010101010110100000011111110010011000", "00000110001010101", "1111001101", "1000", "11110001000010001111110011001101001", "011110110010110110010110011101", "001000110101001110111111011100010011111000", "10100110011001111110111100000", "101111000011110100110100011111100100111101001001", "000000110001", "11001000101101110", "111001001111111110110010000101100101010101011", "0101101010110010001111101011010000110011001001", "000100111000011001101000111000", "011", "01", "111010", "00110100001110110011011100011101010100101", "111100110101010111110101100001001100", "11011000011111100101", "01101001001010111101111010011101", "11111100111110010000111", "110110100010000", "0011000100111011111100100111", "1110111100111111110100000001000000101000001000000", "01000111011101000", "00010101111001010010100100001001", "111100111111010", "00001000110100000110100000111011111010100110100110", "1111000010111001101011110100100101110" };
        int M = 1;
        assertEquals(424, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case65() {
        String[] S = { "0110000110100101001010101101110", "111001101110001111110", "010", "010000001110001", "101001000100101100011010101", "10000000101010100110111", "0110101111", "11011000101111100011110011", "0100100001001101111010110010010001101100101", "00011001011011010001101111010001110", "01011", "0111110100000000001111100010100101", "10011110011101011", "001000011101011000001111000", "011101110100111000", "110101101011110111111110", "100001000001100101011101101110111000110", "0000011", "111101001101000111000110010111101111101", "011100000011111101100111111001000000000110", "10110100011101010011010110", "011", "100010", "10", "10000000", "001011110110100101110011110111110100001", "1100", "0110001001110111010100011000000110001010010000110", "11111101010011111101010101111111011111101011100111", "00010001110011111001100101110", "10110101100110110001001101", "0001110111011110110000010", "0110111101101000001101001000011", "11100110000011001110100000110110110010100100001", "010100000000100111111101100", "00100000100100000010011010010111001", "0011011010101111110110101000100", "0", "10001110111111101000100111010001000111001", "10001010111100000000100111011111100100001001111", "101000", "001010111000000011110011010111000000100011101001", "10000100010100111000011100010", "101110100", "10111000011111", "1100100110000001", "000100001001001", "11011", "0010111100011001111111111111110", "1100011" };
        int M = 1;
        assertEquals(377, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case66() {
        String[] S = { "1011110010010", "110010101", "001001011001101011111101", "0100010011010001010000110000010100011001100100", "10001110011110110001110010", "1101101000110", "110101001011110011", "10100111010", "10000011111110111", "001011011101001000111111011111001001111", "0001011111000", "110001100010110100010000000111111010100011001100", "0000100000111101001", "1110010010110011001110101110", "1111", "0010", "0000110001110101100110101110000001", "1010100100100101010000100101010", "100101000", "1000000100001001110101010", "111111110100111110011011101011101000000110110100", "1", "011000100001110110", "0111110000011000110000011001101111", "100110100100000010100000111001000100011", "1011100000111000100011011000101000111010000100011", "11101101000001000101", "1000110001010101001010101101011001010000001", "111001001010011000001010101", "1011101110011111001000110001001010111111010000", "011010011111001100100100011110011000110", "100011101101001101000101010110001110", "1000", "000011001", "010001000111000001101011111", "1", "1111101101101010100100010", "1011000100111110111000110100000001001000", "111110", "100100000100110", "100010001100010010101101", "01100111111010000", "101000011010101010111111111111111000001000010", "01000010101000010101001010000010110111", "10001110110100", "0111111000011110001011100", "10001011001100011111001100000", "11001", "11011010111101110111010000", "100110110111001000000100000001" };
        int M = 173;
        assertEquals(573, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case67() {
        String[] S = {};
        int M = 1;
        assertEquals(1, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case68() {
        String[] S = {};
        int M = 50;
        assertEquals(1, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case69() {
        String[] S = {};
        int M = 2500;
        assertEquals(1, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case70() {
        String[] S = {};
        int M = 1;
        assertEquals(0, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case71() {
        String[] S = {};
        int M = 2500;
        assertEquals(0, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case72() {
        String[] S = {};
        int M = 25;
        assertEquals(0, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case73() {
        String[] S = { "00010", "11010110", "1010111", "110001010", "0110001100", "000110110", "011010101", "00", "111", "100" };
        int M = 13;
        assertEquals(31, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case74() {
        String[] S = { "00010", "11010110", "1010111", "110001010", "0110001100", "000110110", "011010101", "00", "111", "100" };
        int M = 13;
        assertEquals(31, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case75() {
        String[] S = { "00111000" };
        int M = 1;
        assertEquals(2, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case76() {
        String[] S = {};
        int M = 2;
        assertEquals(920, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case77() {
        String[] S = { "111110100000111110" };
        int M = 6;
        assertEquals(5, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case78() {
        String[] S = { "111000111" };
        int M = 3;
        assertEquals(2, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case79() {
        String[] S = { "010101" };
        int M = 3;
        assertEquals(3, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case80() {
        String[] S = { "00100" };
        int M = 5;
        assertEquals(2, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case81() {
        String[] S = { "00000011110000001110101111011001101111101101001001", "11000000111011000011101011010011100110010111100110", "10110101010101010110111111111000001011000011101110", "00011000011100011101010111010000111011000010110010", "11010010111001011110101100110000001110010111010100", "11000111111100101111000101111111001001000101010101", "00010111110000000000001001110010111010111101001010", "01110110000100001011011011011010111010111000001100", "00001000100000010111011100110101000100011110010000", "11100100100100000000111010101001011111100101101011", "11001000010100101111110001000101010100010110110110", "00000101110111100100100010101111001100110010110011", "01000100010100011010111100111001011001010101001110", "00100110011101010111100011100010101010011101101001", "11100111010101000000100000001101000110111111000110", "10100000101100111011101010100010011101111100001000", "11010101001100010011000110111001111001011100111111", "11110101100000111001011011110100100110011001111010", "01011111000111000000100001000110001011110001010010", "00110110111010011100010110101110001010111101111000", "01111101010000111101010111000101000110001101100010", "11100101010000100110101100101010000101011110010111", "00010110101101100000111001110011111011100100100000", "11010001101111001001001001001010111100011101010001", "01000011100000100000111011100010000010110100001101", "01110010010100010100011101111010011000000101011101", "10110001111111110101001100011101111100011110100001", "10110011111101101000101101010100110100011101010111", "10111000000100011000001001000010111110110110000000", "11000110110111100100111000011000110000110011110110", "10000000110000001010111000110100001000111001111010", "11011000001111010110000110010011110000100101011010", "11000010110011101101111110101011010110111011110100", "11001011011011100100011101111110000111101010111111", "10001000010001110011100111000110001001110110001110", "11011110010011100010110111110011001101001011101101", "11001000000100100101001010011101000110001011101100", "01010100001110110110010011011100110000001100010110", "11101100100110010000111001010011101101000010001000", "11111100100011110011100111101000001101010100000010", "00000110101001101010010100001100011010011110110100", "10011111111001100111001101100110000011100010101110", "10010010101111100111010001011101000000011110010000", "10100100010000111001011000101000101011010011110111", "01101010100100010010101111110000110011010001011100", "00010001010101101010011100000100001001111110011101", "01010111111001001111101100011110110111001011000101", "00011110101100101010010001111011000100010001110011", "00011110101000000010110000111100101110011100100011", "10000111000101011000011000000111001001110011000100" };
        int M = 25;
        assertEquals(1118, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case82() {
        String[] S = { "111111" };
        int M = 3;
        assertEquals(0, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case83() {
        String[] S = { "00010", "11010110", "1010111", "110001010", "0110001100", "000110110", "011010101", "00", "111", "100", "1000", "101110111111110011110011110011", "11111111110000000000111", "11111101111111111110000000111", "111100111110101010101111101010", "0101010" };
        int M = 1;
        assertEquals(52, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case84() {
        String[] S = { "0001", "11010110", "1010111", "110001010", "0110001100", "000110110", "011010101", "00", "111", "100", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000", "10000000001000000000100000000010000000001000000000" };
        int M = 2;
        assertEquals(226, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case85() {
        String[] S = {};
        int M = 7;
        assertEquals(1000, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case86() {
        String[] S = { "111100001111" };
        int M = 4;
        assertEquals(2, flippingbitsdiv2.getmin(S, M));
    }

    @Test
    public void case87() {
        String[] S = {};
        int M = 1;
        assertEquals(900, flippingbitsdiv2.getmin(S, M));
    }

}
