package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class AstronomicalRecordsEasyTest {
    AstronomicalRecordsEasy astronomicalrecordseasy = new AstronomicalRecordsEasy();

    @Test
    public void case1() {
        int[] A = { 1, 2, 3, 4 };
        int[] B = { 2, 3, 4, 5 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case2() {
        int[] A = { 1, 2, 3, 4 };
        int[] B = { 2, 4, 6, 8 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case3() {
        int[] A = { 1, 2, 3, 5, 6, 8, 9 };
        int[] B = { 2, 4, 5, 6, 7, 8, 9 };
        assertEquals(9, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case4() {
        int[] A = { 1, 2, 3, 4 };
        int[] B = { 6, 7, 8, 9 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case5() {
        int[] A = { 200, 500 };
        int[] B = { 100, 200, 300, 400, 600, 700, 800, 900 };
        assertEquals(9, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case6() {
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] B = { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
        assertEquals(15, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case7() {
        int[] A = { 45, 47, 52, 54, 56, 57, 58, 60, 63, 64, 66, 68, 69, 72, 73, 74, 76, 79, 80, 83, 86, 88, 90, 95, 98, 103, 104, 106, 112, 118, 127, 129, 130, 134, 136, 140, 143, 148, 149, 150, 152, 153, 155, 156, 164, 167, 168, 174, 175, 177 };
        int[] B = { 57, 68, 69, 79, 134, 143, 155, 164, 177 };
        assertEquals(50, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case8() {
        int[] A = { 48, 137, 204, 278, 347, 468, 648, 742, 749, 766, 772, 775, 785, 797, 845, 850, 882, 907 };
        int[] B = { 40, 67, 78, 84, 89, 109, 114, 122, 137, 140, 142, 186, 197, 204, 212, 261, 278, 294, 306, 313, 340, 347, 371, 377, 380, 434, 441, 459, 468, 522, 565, 573, 588, 593, 640, 645, 648, 693, 720, 742, 749, 768, 784, 785, 797, 856, 907, 916 };
        assertEquals(55, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case9() {
        int[] A = { 140, 252, 343, 350, 385, 406 };
        int[] B = { 39, 42, 60, 78, 93, 108, 150, 174, 249 };
        assertEquals(11, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case10() {
        int[] A = { 76, 86, 91, 109, 183, 185, 267, 314, 326, 330, 354, 394, 423, 435, 446, 448, 476, 491, 492, 509, 520, 522, 534, 551, 579 };
        int[] B = { 83, 86, 88, 91, 102, 138, 214, 268, 283, 293, 314, 330, 336, 354, 359, 363, 381, 385, 394, 420, 423, 435, 446, 471, 476, 477, 509, 534, 569, 579 };
        assertEquals(42, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case11() {
        int[] A = { 330, 341, 352, 374, 396, 407, 418, 429, 440, 462, 473, 495, 506, 517, 528, 539, 561, 572, 594, 605, 616, 638, 649, 660, 671, 682, 693, 715, 726, 759, 770, 781, 803, 814, 836, 858, 891, 902, 913, 924, 935 };
        int[] B = { 374, 407, 429, 594, 605, 693, 737, 759, 781, 814, 935 };
        assertEquals(42, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case12() {
        int[] A = { 549, 553, 562, 564, 566, 568, 569, 572, 575, 580, 591, 599, 607, 639, 644, 660, 663, 692, 718 };
        int[] B = { 538, 546, 549, 553, 556, 562, 564, 565, 568, 580, 582, 585, 591, 593, 599, 602, 605, 607, 614, 615, 616, 617, 622, 635, 639, 642, 643, 644, 660, 663, 679, 683, 690, 692, 694, 695, 701, 702, 710, 713, 718, 722, 723, 736, 737, 740, 746, 752, 755, 756 };
        assertEquals(54, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case13() {
        int[] A = { 232, 238, 274, 290, 308, 314, 332, 336, 350, 376, 382, 394, 396, 398, 402, 416, 418, 420 };
        int[] B = { 330, 342, 348, 369, 375, 399, 435, 450, 453, 468, 471, 504, 510, 552, 564, 570, 573, 585, 591, 594, 597, 600, 627, 633, 645 };
        assertEquals(33, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case14() {
        int[] A = { 243, 250, 259, 261, 273, 275, 278, 281, 283, 297, 307, 311, 331, 342, 345, 347, 353, 360, 362, 365, 366, 370, 371, 374, 375, 377, 381, 386, 388 };
        int[] B = { 243, 250, 251, 259, 261, 271, 273, 275, 277, 281, 283, 294, 297, 307, 311, 313, 315, 316, 317, 331, 342, 345, 347, 353, 360, 362, 365, 366, 370, 371, 374, 375, 377, 381, 382, 386, 388 };
        assertEquals(38, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case15() {
        int[] A = { 99, 103, 104, 113, 114, 115, 116, 119, 168, 177, 183, 187, 189, 192, 212, 214, 217, 220, 225, 227, 235, 238, 247, 266, 311, 344, 353, 357, 362, 371, 373, 374, 375, 380, 382, 388, 413, 417, 425 };
        int[] B = { 114, 119, 167, 168, 177, 187, 212, 221, 225, 227, 238, 266, 303, 344, 388, 395, 419 };
        assertEquals(44, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case16() {
        int[] A = { 445, 528, 531, 553, 592, 687 };
        int[] B = { 445, 465, 509, 516, 528, 531, 543, 553, 558, 592, 608, 617, 630, 681, 687 };
        assertEquals(15, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case17() {
        int[] A = { 256, 282, 287, 295, 311, 312, 339, 343, 347, 349, 383, 396, 460, 465, 479, 491, 494, 496, 518, 525, 530, 576, 600, 614, 626, 641, 643, 645, 650, 655, 663, 685, 696 };
        int[] B = { 295, 311, 312, 343, 347, 349, 350, 383, 396, 479, 491, 496, 518, 576, 626, 634, 645, 650, 655, 696 };
        assertEquals(35, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case18() {
        int[] A = { 417, 420, 427, 437, 441, 448, 450, 458, 463, 491, 509, 513, 517, 518, 519, 522, 531, 536, 548 };
        int[] B = { 414, 417, 421, 435, 441, 442, 450, 454, 457, 458, 463, 484, 486, 513, 518, 519, 522, 523, 529, 531, 536, 542, 548 };
        assertEquals(30, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case19() {
        int[] A = { 549, 629, 655, 664, 667, 696, 744, 750 };
        int[] B = { 492, 498, 505, 507, 511, 515, 532, 534, 536, 549, 555, 585, 586, 591, 603, 615, 629, 654, 655, 664, 667, 671, 679, 682, 691, 696, 699, 709, 711, 715, 727, 738, 744, 750, 752, 765, 767, 771, 796, 803, 809, 831, 853, 854, 855, 865, 869, 871, 878 };
        assertEquals(49, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case20() {
        int[] A = { 254, 260, 290, 291, 294, 307, 310, 320, 365, 369, 394, 410, 423, 491, 509, 516, 556, 571, 610, 624, 625, 630, 637 };
        int[] B = { 247, 250, 254, 260, 266, 271, 278, 290, 291, 294, 307, 310, 319, 359, 365, 369, 374, 376, 389, 394, 408, 410, 420, 423, 472, 489, 491, 496, 509, 516, 524, 529, 534, 544, 550, 561, 571, 581, 625, 626, 630, 633, 637, 645, 647 };
        assertEquals(49, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case21() {
        int[] A = { 298, 299, 356, 424, 477 };
        int[] B = { 271, 287, 298, 322, 355, 356, 372, 393, 424, 425, 432, 447, 452, 472, 477, 494, 495, 501, 507, 511 };
        assertEquals(21, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case22() {
        int[] A = { 189, 191, 194, 199, 239, 307, 388, 402, 446, 474, 499, 574, 589, 631, 636, 720, 727, 733 };
        int[] B = { 194, 199, 388, 474, 574, 589, 631, 636, 720 };
        assertEquals(18, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case23() {
        int[] A = { 230, 253, 264, 309, 332, 342, 373, 387, 416, 430, 435, 452, 499, 551, 571, 600, 613, 673, 674, 712 };
        int[] B = { 230, 253, 264, 276, 309, 332, 342, 347, 366, 373, 387, 416, 430, 435, 452, 481, 491, 499, 540, 551, 558, 571, 600, 613, 673, 674, 684, 802 };
        assertEquals(29, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case24() {
        int[] A = { 5, 25, 45, 57, 83, 120, 175, 176, 193, 228, 307, 319, 383, 441, 469, 476, 528, 557, 560, 586, 615, 721, 780, 806, 819, 820, 840, 898, 908 };
        int[] B = { 95, 120, 165, 176, 228, 307, 308, 319, 476, 528, 560, 586, 615, 678, 689, 780, 806, 819, 820, 858, 898 };
        assertEquals(35, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case25() {
        int[] A = { 495, 504, 522, 540, 549, 621, 630, 639, 657, 666, 693, 720, 729, 738, 747, 756, 792, 810, 819 };
        int[] B = { 116, 120, 126, 142, 148, 154, 166, 168, 182 };
        assertEquals(20, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case26() {
        int[] A = { 117, 128, 140, 155, 162, 168, 177, 180, 199, 206, 211, 215, 220, 226, 227, 232, 233, 237, 254, 263, 271, 273, 280, 287, 295, 300, 315, 330, 337, 342, 345, 361, 365, 391, 400, 403, 405, 417, 439, 444, 456 };
        int[] B = { 234, 256, 310, 324, 354, 398, 412, 430, 440, 454, 464, 466, 508, 546, 560, 590, 660, 674, 690, 694, 722, 800, 810, 834 };
        assertEquals(42, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case27() {
        int[] A = { 116, 118, 123, 131, 145, 154, 167, 171, 175, 178, 182, 188, 193, 194, 197, 198, 200, 203, 205, 207, 215, 223, 229, 230 };
        int[] B = { 116, 123, 145, 157, 160, 164, 167, 171, 178, 182, 198, 200, 203, 223, 229, 230 };
        assertEquals(27, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case28() {
        int[] A = { 342, 407, 420, 458, 473, 478, 483, 493, 506, 511, 535, 545, 546, 548, 554, 559, 577, 580, 582, 583, 594, 604, 614, 621, 630, 634, 639, 649, 650, 658, 659, 669, 673, 679, 687, 689, 732, 733, 737, 738, 767, 773, 796, 826, 828, 833 };
        int[] B = { 420, 458, 483, 535, 546, 580, 582, 634, 639, 650, 659, 679, 687, 689, 737, 833 };
        assertEquals(46, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case29() {
        int[] A = { 216, 228, 234, 240, 246, 264, 276, 282, 300, 306, 318, 324, 330, 342, 348, 360, 378, 384, 390, 396, 402, 408, 414, 432, 438, 468, 474, 480, 486, 492, 498, 504 };
        int[] B = { 424, 544, 640 };
        assertEquals(32, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case30() {
        int[] A = { 60, 120, 312, 336, 348, 420, 504, 564, 648, 684, 708 };
        int[] B = { 5, 10, 17, 22, 26, 35, 47, 54, 59 };
        assertEquals(13, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case31() {
        int[] A = { 490, 500, 510, 519, 537, 542, 545, 565, 578, 586, 595, 609, 624 };
        int[] B = { 482, 488, 493, 494, 497, 500, 501, 502, 508, 510, 512, 515, 517, 519, 522, 526, 532, 533, 537, 545, 548, 553, 558, 562, 563, 564, 569, 570, 578, 581, 582, 586, 587, 588, 591, 595, 597, 600, 608, 609, 618, 619, 623, 624, 626, 629, 630 };
        assertEquals(50, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case32() {
        int[] A = { 103, 140, 234, 305, 412, 468, 499, 544, 601, 638, 659 };
        int[] B = { 353, 371, 499, 601, 638 };
        assertEquals(13, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case33() {
        int[] A = { 200, 242, 250, 299, 321, 342, 381, 394 };
        int[] B = { 200, 204, 242, 244, 394 };
        assertEquals(10, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case34() {
        int[] A = { 30, 78, 96, 114, 126, 144, 150, 156, 180, 186, 192, 210, 222, 252, 264, 270, 282, 330, 360, 390, 402, 408, 414, 420, 438, 444, 456, 474 };
        int[] B = { 35, 56, 84, 112, 133, 147, 154, 161, 168, 175, 182, 189, 196, 259, 273, 308, 315, 343, 371, 378, 385, 392, 399, 420, 427, 434, 441, 455, 469, 476, 483, 490, 497, 504, 511, 518, 525, 532 };
        assertEquals(46, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case35() {
        int[] A = { 306, 324, 666, 684, 702 };
        int[] B = { 374, 396, 737, 814, 836, 858 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case36() {
        int[] A = { 286, 300, 316, 322, 342, 366, 368, 376, 412, 424, 434, 448, 454, 464, 468, 492, 496, 502, 516, 536, 546, 550, 552, 554, 562, 570, 578, 588, 594, 600, 642, 652, 662, 664, 666, 700, 732, 738 };
        int[] B = { 274, 284, 294, 296, 300, 304, 308, 316, 372, 376, 380, 384, 392, 402, 406, 424, 432, 434, 448, 454, 464, 476, 486, 490, 492, 508, 516, 520, 536, 546, 548, 550, 554, 562, 570, 576, 578, 586, 594, 652, 664, 666, 668, 682, 722, 724, 728, 738 };
        assertEquals(64, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case37() {
        int[] A = { 771, 785 };
        int[] B = { 276, 282, 290, 310, 361, 367, 483, 518, 586, 599, 601, 693, 738, 753, 762, 781, 785, 790, 815, 823, 838, 848 };
        assertEquals(23, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case38() {
        int[] A = { 113, 200, 224, 240, 247, 335, 340, 347, 366, 396, 484, 576, 581, 589, 618, 628, 632, 685, 704, 726, 763, 771 };
        int[] B = { 85, 98, 103, 105, 107, 113, 128, 141, 143, 166, 176, 200, 224, 268, 270, 282, 329, 335, 340, 357, 366, 396, 402, 407, 458, 471, 480, 484, 492, 496, 525, 552, 576, 581, 589, 590, 592, 602, 628, 629, 664, 667, 685, 704, 708, 723, 726, 759, 771, 772 };
        assertEquals(56, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case39() {
        int[] A = { 324, 336, 396, 420, 432, 444, 456, 468, 492, 516, 540, 552, 564, 576, 600, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 792, 804, 816, 828, 852, 864 };
        int[] B = { 180, 210, 222, 234, 288, 354, 378, 408 };
        assertEquals(34, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case40() {
        int[] A = { 406, 419 };
        int[] B = { 67, 73, 74, 77, 84, 89, 103, 114, 132, 143, 145, 151, 155, 176, 189, 219, 220, 239, 240, 249, 260, 282, 290, 292, 293, 305, 306, 318, 347, 370, 383, 393, 397, 401, 402, 406, 415, 419, 426, 433, 452, 454, 455, 472, 495, 502, 506, 507, 517, 524 };
        assertEquals(50, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case41() {
        int[] A = { 112, 136, 140, 168, 188, 196, 232, 248 };
        int[] B = { 156, 168, 216, 252, 282, 348 };
        assertEquals(10, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case42() {
        int[] A = { 64, 68, 88, 98, 100, 116, 138, 152, 162, 172, 184, 196, 198, 200, 218, 224, 262, 264, 278, 306, 348, 402, 432, 472, 474, 484, 498, 500, 504, 516, 518, 534, 536, 544, 572, 584, 588, 590, 600, 624, 642, 644, 674, 696, 708 };
        int[] B = { 200, 306, 674 };
        assertEquals(45, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case43() {
        int[] A = { 310, 327, 330, 362, 371, 394, 408, 430, 435, 445, 450, 535, 562, 575 };
        int[] B = { 268, 327, 330, 342, 394, 450, 471, 535 };
        assertEquals(17, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case44() {
        int[] A = { 748, 757, 764, 765, 771, 783, 793, 799, 802, 809, 819, 828, 830, 840, 850 };
        int[] B = { 764, 793, 795, 798, 799, 800, 819, 828, 832, 840 };
        assertEquals(19, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case45() {
        int[] A = { 483, 543, 562 };
        int[] B = { 390, 394, 404, 408, 412, 416, 417, 427, 428, 432, 435, 437, 440, 446, 453, 460, 461, 465, 471, 478, 482, 483, 484, 492, 497, 503, 517, 534, 539, 543, 544, 546, 549, 551, 553, 562, 569, 582, 584, 592, 595, 596, 601, 604, 609, 615, 624, 627, 630, 632 };
        assertEquals(50, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case46() {
        int[] A = { 459, 469, 475, 480, 487, 502, 505, 528, 556, 582, 585, 592, 599, 600, 607, 617, 628, 629, 634, 638, 656, 664, 665, 669, 677, 681, 687, 694, 695, 698 };
        int[] B = { 459, 461, 469, 470, 475, 480, 487, 505, 528, 533, 536, 545, 548, 556, 564, 569, 582, 585, 592, 595, 599, 600, 607, 617, 628, 629, 631, 634, 635, 638, 656, 664, 665, 669, 677, 681, 687, 691, 695, 698, 700 };
        assertEquals(43, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case47() {
        int[] A = { 135, 155, 220, 305, 320, 360, 365, 390, 395, 405, 435, 445, 470, 475, 490, 505, 540, 550, 560, 585, 605, 615, 635, 655, 660, 690, 695, 720, 730, 745, 750, 755, 760 };
        int[] B = { 186, 672, 828 };
        assertEquals(33, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case48() {
        int[] A = { 118, 124, 126, 140, 148, 182, 193, 196, 204, 206, 210, 211, 214, 220, 225, 230, 238, 249, 257, 264, 275, 284, 289, 302, 318, 325, 340, 348, 377, 399, 400, 431, 432, 443, 464, 485, 491, 493, 557, 564, 572, 575 };
        int[] B = { 124, 134, 140, 148, 193, 196, 206, 210, 219, 230, 232, 238, 257, 264, 275, 281, 284, 293, 302, 325, 332, 384, 388, 400, 416, 443, 478, 485, 491, 557, 564, 588 };
        assertEquals(53, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case49() {
        int[] A = { 116, 153, 156, 157, 161, 166, 170, 172, 173, 186, 223, 239, 285, 299, 301, 328, 339, 348, 351, 412, 428, 433, 454, 461, 463, 503, 511, 537 };
        int[] B = { 116, 144, 153, 156, 157, 166, 170, 172, 173, 178, 186, 198, 223, 239, 257, 285, 299, 301, 303, 339, 348, 351, 358, 376, 412, 428, 433, 454, 461, 463, 503, 508, 511, 537 };
        assertEquals(36, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case50() {
        int[] A = { 327, 331, 336, 339, 342, 344, 353, 354, 367, 373, 378, 388, 434, 444, 452, 453, 454, 460, 484, 489, 492, 496, 503, 506, 510, 518, 529, 532, 549, 554, 572, 580, 589, 592, 604, 615, 634, 635, 642, 644, 663, 668, 674 };
        int[] B = { 327, 388, 452, 460, 484, 489, 492, 496, 503, 589 };
        assertEquals(43, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case51() {
        int[] A = { 175, 176, 179, 182, 185, 186, 191, 203, 205, 211, 224, 227, 233, 235, 238, 240, 253, 256, 259, 275, 284, 288, 290, 296, 301, 302, 304, 314, 317, 331, 347, 349, 356, 358, 363, 369, 371, 375, 388, 390, 391 };
        int[] B = { 358, 370, 372, 454, 470, 576, 736, 742 };
        assertEquals(42, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case52() {
        int[] A = { 8, 15, 19, 28, 49, 55, 65, 66, 67, 75, 82, 98, 111, 112, 113, 115, 154, 192, 195, 202, 205, 207, 213, 219, 223, 227, 284, 289, 298, 303, 315, 316, 345, 360, 362, 363, 387 };
        int[] B = { 132, 410, 416 };
        assertEquals(38, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case53() {
        int[] A = { 224, 280, 283, 324, 373, 417, 506, 606, 627, 646, 766, 817 };
        int[] B = { 224, 225, 245, 260, 280, 283, 286, 300, 303, 308, 311, 324, 334, 340, 354, 370, 373, 391, 394, 401, 402, 417, 428, 433, 453, 487, 506, 527, 557, 586, 588, 606, 627, 641, 646, 676, 697, 719, 722, 761, 797, 804, 817, 832, 846, 857, 899, 910, 927, 958 };
        assertEquals(51, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case54() {
        int[] A = { 317, 319, 324, 327, 357, 361, 374, 375, 384, 398, 400, 402, 406, 411, 414, 415 };
        int[] B = { 630, 646, 648, 714, 722, 738, 742, 748, 750, 764, 768, 770, 780, 796, 804, 810, 812, 830 };
        assertEquals(24, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case55() {
        int[] A = { 44, 69, 77, 101, 103, 113, 119, 126, 138, 147, 189, 205, 213, 217, 250, 261, 287, 296, 306, 319, 325, 330, 332, 338, 349, 365, 370, 372, 391, 412, 455, 460, 500, 502, 522, 534, 564, 579, 584, 586, 609, 621, 649, 669, 684, 702 };
        int[] B = { 61, 69, 77, 103, 113, 119, 126, 138, 144, 147, 165, 206, 213, 217, 250, 287, 306, 319, 325, 330, 332, 349, 365, 370, 381, 383, 391, 412, 455, 500, 522, 534, 609, 621, 649, 669, 684, 702 };
        assertEquals(52, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case56() {
        int[] A = { 640, 644, 649, 651, 653, 657, 659, 660, 661, 662, 663, 669, 670, 671, 673, 674, 682, 686, 687, 692, 696, 703, 704, 707, 711, 718, 722, 724, 727 };
        int[] B = { 639, 640, 642, 644, 648, 649, 650, 653, 656, 659, 663, 670, 671, 674, 675, 678, 681, 682, 685, 687, 688, 689, 692, 694, 696, 700, 701, 703, 706, 707, 708, 709, 713, 715, 716, 717, 719, 722, 726, 727 };
        assertEquals(52, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case57() {
        int[] A = { 162, 228 };
        int[] B = { 270, 290, 300, 320, 330, 340, 360, 370, 380, 390, 400, 410, 420, 430, 440, 460, 480, 490, 500, 520, 530, 540, 550, 560, 570, 580, 630, 660, 670, 680, 730, 760, 780 };
        assertEquals(33, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case58() {
        int[] A = { 92, 105, 108, 111, 120, 122, 127, 169, 176, 178, 191, 214, 216, 223, 235, 237, 241, 248, 251, 257, 267, 282, 283, 284, 299, 300, 316, 329, 338, 341, 343, 361, 372, 382, 392, 414, 416, 424, 427, 433, 441, 451, 470, 474, 484, 512, 546, 549, 551 };
        int[] B = { 92, 105, 108, 111, 176, 178, 191, 214, 216, 223, 235, 241, 282, 283, 284, 299, 316, 329, 338, 341, 343, 361, 382, 392, 414, 416, 424, 438, 441, 451, 470, 474, 512, 551 };
        assertEquals(50, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case59() {
        int[] A = { 58, 60, 62, 64, 66, 68, 74, 76, 80, 86, 88, 90, 92, 94, 96, 98, 104, 106, 108, 112, 114, 122, 124, 126, 128, 130, 132, 136, 138, 140, 142, 144, 146 };
        int[] B = { 407, 484, 583, 594, 715, 726, 748, 781 };
        assertEquals(33, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case60() {
        int[] A = { 234, 239, 246, 253, 265, 302, 305, 332, 394, 409, 456, 498, 527, 545, 569, 631, 682, 692, 702, 741, 772, 812, 816, 821, 882, 887, 897, 906, 917, 954, 962, 975 };
        int[] B = { 253, 265, 302, 456, 498, 527, 572, 631, 813, 816, 821, 887, 917, 962 };
        assertEquals(34, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case61() {
        int[] A = { 160, 191, 244, 263, 272, 283 };
        int[] B = { 151, 153, 160, 171, 172, 175, 179, 180, 191, 192, 197, 200, 202, 203, 205, 207, 212, 213, 218, 219, 220, 221, 232, 239, 244, 251, 254, 257, 258, 263, 272, 273, 279, 283, 288, 291, 295, 297, 303, 304, 310, 317, 319, 322, 324, 334 };
        assertEquals(46, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case62() {
        int[] A = { 31, 33, 41, 51, 55, 65 };
        int[] B = { 180, 325 };
        assertEquals(7, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case63() {
        int[] A = { 138, 152, 159, 177, 194, 198, 223, 228, 259, 270, 310, 322, 324, 331, 335, 348, 365, 367, 393, 411, 419, 428, 433, 452, 453, 501, 508, 516, 533, 544, 570, 573, 588, 603, 651 };
        int[] B = { 138, 152, 166, 178, 212, 223, 259, 310, 367, 393, 428, 433, 544, 603 };
        assertEquals(38, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case64() {
        int[] A = { 603, 605, 606, 607, 614, 615, 616, 620, 624, 625, 633, 634, 644, 645, 648, 649, 652, 653, 656, 658 };
        int[] B = { 628, 649, 650, 656 };
        assertEquals(22, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case65() {
        int[] A = { 384, 396, 398, 400, 409, 421, 425, 431, 436, 438, 441, 445, 454, 456, 461, 462, 465, 471, 486, 489, 496, 503, 514, 516, 517, 520, 521, 523, 525, 532, 542, 550, 583, 588 };
        int[] B = { 382, 384, 396, 400, 404, 409, 421, 425, 431, 436, 438, 445, 454, 461, 462, 465, 471, 486, 489, 490, 496, 503, 514, 516, 517, 520, 521, 532, 542, 550, 566, 584, 588 };
        assertEquals(39, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case66() {
        int[] A = { 714, 746, 752, 758, 762, 795, 821, 828, 839, 842, 863 };
        int[] B = { 746, 758, 795, 821, 839, 842, 863 };
        assertEquals(11, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case67() {
        int[] A = { 330, 495, 691 };
        int[] B = { 253, 304, 306, 328, 330, 344, 359, 366, 383, 386, 387, 402, 403, 433, 490, 494, 495, 503, 507, 510, 522, 524, 530, 545, 565, 598, 599, 607, 624, 625, 647, 652, 661, 672, 676, 682, 684, 691, 692, 693, 695, 698 };
        assertEquals(42, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case68() {
        int[] A = { 272, 376, 464, 472, 520, 552, 560, 600, 664 };
        int[] B = { 62, 70, 76, 78, 80, 82, 90, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 128, 130, 132, 136, 138, 140, 148, 150, 152, 156, 158, 160, 164, 166, 168, 172, 178, 184, 186, 188, 190, 194, 196 };
        assertEquals(46, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case69() {
        int[] A = { 152, 179, 184, 199, 216, 245, 260, 304, 336, 366, 370, 449, 483, 489, 491, 561, 590, 604, 614, 621, 625, 645, 673, 702, 711, 735, 748, 761, 781, 788, 790, 795, 820 };
        int[] B = { 152, 184, 212, 265, 336, 370, 489, 561, 590, 614, 621, 625, 645, 735 };
        assertEquals(35, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case70() {
        int[] A = { 610, 617, 621, 625, 626, 629, 635, 638, 639, 646, 658, 663, 673, 681, 695, 698, 717, 718, 719, 727 };
        int[] B = { 617, 627, 631, 638, 639, 646, 647, 658, 663, 673, 681, 687, 689, 718, 720 };
        assertEquals(26, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case71() {
        int[] A = { 225, 398, 528, 578, 862 };
        int[] B = { 183, 373, 398, 488, 528, 577, 582, 586, 657, 750, 764, 854, 862, 873 };
        assertEquals(16, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case72() {
        int[] A = { 262, 346, 354, 362, 386, 392, 440, 496, 508, 518, 534, 548, 564, 582, 606, 626, 630, 668, 678, 706, 726 };
        int[] B = { 264, 272, 274, 280, 286, 322, 340, 346, 354, 362, 388, 392, 400, 404, 440, 446, 462, 470, 476, 496, 508, 510, 518, 522, 526, 528, 534, 540, 548, 564, 582, 606, 622, 626, 630, 668, 678, 680, 686, 700, 706, 712, 726, 738, 746 };
        assertEquals(47, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case73() {
        int[] A = { 408, 432, 462, 476, 500, 508, 513, 545, 549, 551, 572, 626, 638, 660, 672, 705, 717, 744, 755, 761, 765, 774, 782, 801, 815, 821, 836, 878, 916, 938 };
        int[] B = { 408, 430, 432, 462, 476, 508, 513, 549, 572, 638, 660, 666, 672, 705, 717, 744, 755, 761, 765, 774, 782, 801, 815, 821, 836, 878, 906, 916, 926, 938 };
        assertEquals(34, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case74() {
        int[] A = { 661, 664, 670, 687, 692, 693, 705, 709, 712, 726, 747, 771, 772, 781, 786, 789, 799, 813, 823, 826, 833, 834, 851, 866, 868, 872, 876, 884, 894, 896, 900, 908, 912, 919, 920, 928, 938, 939, 953, 954, 971, 974, 980, 986, 987 };
        int[] B = { 712, 726, 747, 813, 908, 912, 939, 954 };
        assertEquals(45, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case75() {
        int[] A = { 204, 231, 244, 250, 255, 277, 285, 286, 287, 300, 313, 332, 363, 367, 372, 409, 428, 433, 463, 490, 502, 503, 510, 514, 517, 525, 532, 544, 549, 558, 574, 586, 598, 604, 627, 640, 647, 656, 680, 684, 689, 731, 737, 750, 754, 772, 783, 793, 795, 807 };
        int[] B = { 224, 225, 244, 250, 255, 277, 285, 286, 287, 313, 332, 355, 363, 367, 372, 428, 433, 457, 463, 490, 495, 502, 503, 510, 514, 517, 544, 558, 586, 587, 591, 598, 604, 640, 647, 656, 670, 680, 684, 689, 731, 750, 754, 764, 772, 793, 795, 804, 807 };
        assertEquals(60, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case76() {
        int[] A = { 294, 295, 314, 322, 330, 353, 363, 368, 380, 393, 402, 405, 410, 417, 424, 435, 449, 499, 502, 513, 515, 522, 529, 584, 588, 593, 599, 602, 631, 642, 655, 657, 660, 667, 669, 671 };
        int[] B = { 393, 405, 417, 424, 588 };
        assertEquals(36, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case77() {
        int[] A = { 285, 475, 570, 665, 760, 855 };
        int[] B = { 156, 312, 416 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case78() {
        int[] A = { 32, 40, 48, 56, 64, 72, 80, 96, 104, 128, 136, 144, 152, 160, 168, 184, 192, 200, 208, 216, 232, 240, 272, 280, 288, 296, 304, 320, 336, 352, 368, 376, 384, 392, 400, 408, 416, 424, 456, 480, 488, 496, 504, 512, 536, 544, 568, 576, 584 };
        int[] B = { 40, 48, 80, 136, 152, 168, 200, 240, 296, 344, 352, 512, 568 };
        assertEquals(50, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case79() {
        int[] A = { 198, 204, 216, 234, 246, 318 };
        int[] B = { 363, 374, 396, 429, 440, 451, 462, 495, 517, 550, 561, 583, 594, 616, 627, 638 };
        assertEquals(16, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case80() {
        int[] A = { 326, 333, 355, 365, 370, 397, 403, 405, 422, 428, 449, 467, 481, 505, 507, 508, 511, 558, 560, 571, 579, 601, 618, 624, 641, 655, 657, 671, 708, 714, 722, 730, 731, 782, 808, 825, 849, 876, 880 };
        int[] B = { 355, 397, 405, 422, 428, 449, 481, 505, 507, 508, 558, 560, 571, 601, 618, 624, 641, 657, 708, 714, 730, 808, 849, 876, 880 };
        assertEquals(39, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case81() {
        int[] A = { 65, 120, 140, 150, 165, 170, 180, 220 };
        int[] B = { 105, 120, 135, 150, 165, 180, 195, 225, 240, 270, 300, 315, 330, 345, 360, 375, 390, 420, 450, 480, 495, 510, 540, 570, 585, 600, 660, 690, 720 };
        assertEquals(29, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case82() {
        int[] A = { 140, 158, 166, 168, 206, 222, 246, 262, 270, 278, 282, 290, 294, 308, 318, 324, 326, 328, 334, 340, 342, 350, 364, 380, 382, 452, 456, 458, 468, 474, 478, 484, 502, 506, 520, 530, 532, 536, 540, 558, 596, 604, 622, 664, 670 };
        int[] B = { 79, 84, 85, 97, 105, 123, 141, 145, 147, 159, 162, 164, 170, 171, 175, 182, 187, 190, 191, 224, 226, 229, 234, 237, 239, 242, 251, 253, 270, 298, 300, 302, 332, 335 };
        assertEquals(51, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case83() {
        int[] A = { 297, 302, 304, 305, 308, 312, 313, 315, 317, 320, 324, 327, 328, 332, 336, 338, 342, 343, 344, 345, 349 };
        int[] B = { 616, 626, 664, 690, 698 };
        assertEquals(21, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case84() {
        int[] A = { 221, 293, 317, 323, 353, 456, 474, 488, 491, 539, 572, 583, 612, 645, 659, 663, 723, 743, 748, 771, 791, 847, 890, 906, 911 };
        int[] B = { 274, 351, 353, 488, 572, 612, 663, 723, 834, 885, 890, 906, 911 };
        assertEquals(29, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case85() {
        int[] A = { 193, 216, 237, 241, 243, 250, 257, 285, 336, 346, 368, 402, 414, 420, 426, 443, 462, 483, 485, 508, 519, 522, 529, 536, 537, 547, 552, 587, 623, 630, 641, 651, 654, 670, 676, 685, 717, 719, 721, 760, 793, 804, 810, 813, 817 };
        int[] B = { 193, 216, 237, 241, 245, 250, 271, 285, 336, 346, 378, 402, 414, 426, 442, 443, 454, 461, 462, 485, 505, 508, 519, 522, 529, 538, 547, 552, 623, 630, 637, 641, 651, 654, 670, 676, 685, 717, 719, 721, 760, 793, 804, 810, 813, 817 };
        assertEquals(54, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case86() {
        int[] A = { 276, 373, 380, 395, 462, 551, 564, 630, 688, 689, 696, 712, 742, 789, 810, 843, 848, 951, 954 };
        int[] B = { 254, 309, 353, 363, 368, 376, 378, 380, 390, 395, 426, 453, 480, 505, 506, 520, 529, 530, 551, 564, 571, 590, 623, 630, 642, 656, 664, 668, 688, 689, 712, 734, 763, 774, 781, 789, 803, 807, 831, 843, 848, 878, 894, 905, 951, 954 };
        assertEquals(52, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case87() {
        int[] A = { 594, 598, 635, 667, 681, 699, 722, 731, 734, 740, 767, 784, 794, 805, 810, 811, 814, 842, 843, 851, 885, 898, 901, 914 };
        int[] B = { 591, 592, 594, 596, 598, 631, 633, 635, 667, 672, 675, 681, 683, 693, 696, 715, 720, 722, 724, 731, 740, 751, 763, 764, 766, 767, 794, 805, 810, 811, 826, 827, 832, 839, 842, 843, 844, 851, 860, 885, 886, 887, 898, 901, 914 };
        assertEquals(49, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case88() {
        int[] A = { 473, 500, 524, 545, 573, 584, 614, 634, 637, 653, 698, 712, 741, 802, 839, 851, 902 };
        int[] B = { 435, 454, 471, 473, 500, 511, 524, 550, 553, 555, 562, 567, 575, 599, 603, 605, 614, 634, 637, 650, 688, 698, 712, 738, 741, 782, 789, 801, 802, 812, 828, 839, 847, 850, 863, 876, 902, 903 };
        assertEquals(43, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case89() {
        int[] A = { 612, 621, 627, 636, 648, 687, 699, 705, 732, 738, 744, 747, 759, 762, 765, 780, 783, 792, 795, 810, 816, 831, 837, 840, 849, 852, 855 };
        int[] B = { 600, 606, 609, 612, 615, 618, 621, 624, 642, 648, 672, 684, 687, 693, 699, 708, 711, 717, 720, 723, 732, 738, 741, 747, 753, 759, 765, 777, 780, 789, 792, 795, 810, 816, 819, 825, 828, 831, 849, 852, 855 };
        assertEquals(49, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case90() {
        int[] A = { 37, 67, 108, 111, 118, 154, 160, 182, 196, 200, 203, 208, 212, 234, 237, 249, 261, 263, 265, 277, 294, 302, 306, 311, 315, 316, 334, 338, 347, 359, 360, 361, 362, 369, 371, 374 };
        int[] B = { 37, 111, 196, 212, 263, 315, 347, 361, 375 };
        assertEquals(37, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case91() {
        int[] A = { 380, 472, 488, 516, 524, 528, 540 };
        int[] B = { 285, 288, 294, 297, 312, 321, 336, 339, 345, 348, 354, 357, 360, 372, 378, 384, 387, 393, 402, 408, 411 };
        assertEquals(24, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case92() {
        int[] A = { 75, 96, 118, 143, 215, 221, 237, 246, 257, 282, 295, 302, 304, 316, 330, 339, 343, 360, 423, 484, 517, 529, 530, 546, 556, 592, 621, 629, 638, 679, 688, 698, 780, 822, 846 };
        int[] B = { 221, 237, 322, 343, 484, 530, 621, 629, 698, 780, 846 };
        assertEquals(36, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case93() {
        int[] A = { 358, 364, 367, 391, 404, 421, 438, 440, 481, 488, 507, 525, 528, 533, 535, 537, 539, 543, 558, 563, 564, 566, 567, 573, 579, 587, 592, 619, 621, 622, 625, 626, 636, 642, 650, 663, 665, 667, 680, 750, 779, 787, 789, 797, 816, 824, 826, 834, 841 };
        int[] B = { 364, 404, 421, 438, 537, 558, 567, 573, 587, 592, 619, 625, 642, 652, 682, 715, 740, 786 };
        assertEquals(54, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case94() {
        int[] A = { 92, 95, 101, 103, 108, 125, 130, 145, 156, 157, 171, 172, 176, 177, 181, 183, 188, 202, 231, 243, 248, 250, 258, 267, 268, 277, 280, 281, 289, 303, 333, 337 };
        int[] B = { 184, 190, 198, 202, 206, 212, 216, 250, 260, 312, 324, 344, 362, 366, 376, 388, 394, 430, 460, 470, 472, 496, 534, 578, 606, 674, 684 };
        assertEquals(42, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case95() {
        int[] A = { 235, 246, 256, 257, 267, 282, 289, 293, 298, 313, 328, 346, 349, 361, 367, 387, 390, 448, 449, 482, 502, 513, 514, 521, 526, 534, 541, 543, 549, 555, 569 };
        int[] B = { 267, 328, 346, 449, 531, 549, 569 };
        assertEquals(32, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case96() {
        int[] A = { 74, 80, 97, 117, 120, 160, 164, 237, 261, 270, 333, 459 };
        int[] B = { 108, 126, 148, 150, 160, 180, 208, 234, 272, 284, 294, 320, 328, 368, 372, 380, 394, 426, 436, 440, 460, 474, 478, 494, 512, 540, 554, 564, 622, 626, 644, 666, 690, 716, 772, 776, 778, 782, 828, 866, 908, 918 };
        assertEquals(45, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case97() {
        int[] A = { 35, 45, 61, 64, 83, 86, 89, 123, 215, 217, 246, 257, 302, 337, 339 };
        int[] B = { 19, 30, 32, 35, 45, 61, 64, 67, 77, 83, 89, 104, 123, 215, 217, 224, 242, 246, 257, 302, 337, 339, 346 };
        assertEquals(24, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case98() {
        int[] A = { 510, 519, 522, 534, 549, 552, 555, 588, 603, 606, 609, 663, 675, 687, 711, 717, 732, 741, 756, 762, 765, 771, 780, 789, 792, 813, 816, 843 };
        int[] B = { 340, 346, 348, 366, 374, 384, 392, 398, 402, 406, 422, 428, 432, 464, 468, 478, 480, 488, 490, 494, 504, 510, 520, 528, 534, 542, 562 };
        assertEquals(39, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case99() {
        int[] A = { 287, 289, 292, 295, 297, 298, 302, 305, 314, 316, 318, 327, 333, 334, 337, 342, 357, 368, 372, 378, 386, 408, 409, 415, 419, 424, 426, 431, 442, 448, 449, 450, 451, 457, 479, 493, 500, 504, 519, 531, 535, 543, 549, 565, 566, 579 };
        int[] B = { 291, 295, 305, 368, 448, 504, 535 };
        assertEquals(47, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case100() {
        int[] A = { 138, 184, 207, 230, 276, 299, 345, 368, 414, 437, 460, 483, 506, 598, 667, 690, 736, 759, 828, 851, 897, 920, 943, 966 };
        int[] B = { 24, 30, 123 };
        assertEquals(24, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case101() {
        int[] A = { 59, 60, 64, 117, 166, 167, 182, 196, 203, 204, 218, 219, 236, 238, 251, 255, 289, 312, 317, 327, 329, 331, 353, 397, 411, 417, 423, 453, 454, 467, 474, 482, 484, 498, 530, 540, 547, 555, 558, 565, 586, 596, 626, 637, 643 };
        int[] B = { 59, 60, 64, 117, 166, 167, 182, 196, 203, 204, 218, 219, 236, 238, 251, 255, 289, 312, 317, 329, 331, 397, 411, 417, 453, 454, 474, 482, 484, 498, 530, 540, 547, 555, 558, 565, 582, 586, 596, 626, 637 };
        assertEquals(46, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case102() {
        int[] A = { 162, 168, 204, 294 };
        int[] B = { 255, 405, 420, 510, 705, 735 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case103() {
        int[] A = { 420, 428, 434, 446, 456, 458, 460, 462, 470, 472, 478, 480, 486, 496, 512, 526, 546, 548, 554, 558, 566, 570, 572, 576, 578, 594, 604, 610, 616, 622, 638, 640, 644, 650, 652, 654, 664, 666, 668, 670, 686, 688 };
        int[] B = { 205, 208, 211, 216, 228, 229, 230, 231, 239, 246, 248, 262, 263, 273, 274, 277, 278, 279, 284, 285, 287, 295, 298, 308, 311, 320, 325, 327, 335, 340, 341, 343 };
        assertEquals(55, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case104() {
        int[] A = { 346, 354, 382, 386, 410, 412, 478, 490, 500, 512, 514, 518, 528, 530, 532, 552, 558, 588, 596, 610, 630, 632, 634, 638, 644, 670, 678, 688, 700, 710 };
        int[] B = { 346, 372, 406, 412, 430, 458, 470, 478, 512, 518, 528, 530, 532, 534, 546, 596, 604, 630, 632, 634, 638, 640, 642, 646, 668, 670, 678, 688, 700, 710 };
        assertEquals(42, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case105() {
        int[] A = { 113, 131, 177, 207, 258, 262, 270, 288, 289, 293, 334, 355, 356, 375, 384, 413, 435, 438, 447, 470, 494 };
        int[] B = { 113, 119, 120, 131, 152, 160, 177, 191, 207, 213, 227, 258, 261, 262, 270, 288, 289, 293, 330, 334, 355, 356, 363, 364, 375, 384, 389, 393, 413, 435, 438, 447, 448, 449, 470, 494, 501, 507, 512, 523, 539 };
        assertEquals(41, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case106() {
        int[] A = { 228, 236, 250, 252, 260, 262, 264, 282, 288, 300, 310, 328, 330, 342, 352, 384, 386, 388, 394, 422, 432, 440, 442, 452, 466, 474, 506, 510, 518, 522, 538, 558, 560, 568, 574, 578, 594, 606, 632, 634, 636, 638, 662 };
        int[] B = { 125, 141, 144, 171, 172, 176, 192, 226, 234, 235, 244, 255, 261, 269, 279, 284, 285, 289, 300, 303, 317, 331 };
        assertEquals(49, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case107() {
        int[] A = { 2, 5, 7, 11 };
        int[] B = { 13, 17, 19, 23 };
        assertEquals(7, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case108() {
        int[] A = { 2, 4, 6, 8 };
        int[] B = { 3, 6, 9, 12 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case109() {
        int[] A = { 1, 12, 24, 37, 51, 66, 82, 99, 117, 136, 156, 177, 199, 222, 246, 271, 297, 324, 352, 381, 411, 442, 474, 507, 541, 576, 612, 649, 687, 726, 766, 807, 849, 892, 936, 981 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        assertEquals(79, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case110() {
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(50, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case111() {
        int[] A = { 10, 20, 30 };
        int[] B = { 5, 10, 15 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case112() {
        int[] A = { 2, 3 };
        int[] B = { 5, 7, 11 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case113() {
        int[] A = { 2, 4, 6 };
        int[] B = { 3, 6, 9 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case114() {
        int[] A = { 12, 24 };
        int[] B = { 8, 16 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case115() {
        int[] A = { 3, 6, 9 };
        int[] B = { 5, 10, 15 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case116() {
        int[] A = { 2, 4, 6, 8 };
        int[] B = { 1, 2, 3, 4 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case117() {
        int[] A = { 1, 2, 3, 4 };
        int[] B = { 2, 4, 6, 8 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case118() {
        int[] A = { 1, 2, 3, 5 };
        int[] B = { 1, 2, 4, 5 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case119() {
        int[] A = { 3, 6 };
        int[] B = { 2, 4 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case120() {
        int[] A = { 1, 2 };
        int[] B = { 4, 8, 16 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case121() {
        int[] A = { 11, 16, 26, 34, 48, 54, 70, 92, 93, 98 };
        int[] B = { 9, 12, 26, 36, 62, 63, 69, 77, 78, 96 };
        assertEquals(17, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case122() {
        int[] A = { 1, 2, 5, 15, 30 };
        int[] B = { 1, 2, 3, 9, 18 };
        assertEquals(7, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case123() {
        int[] A = { 17, 30, 60 };
        int[] B = { 19, 38 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case124() {
        int[] A = { 1, 2, 3, 4 };
        int[] B = { 6, 7, 8, 9 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case125() {
        int[] A = { 1, 2, 3, 4, 5 };
        int[] B = { 100, 200, 300, 400, 500, 600 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case126() {
        int[] A = { 1, 2, 3, 4, 5, 6 };
        int[] B = { 4, 6, 8, 10, 12 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case127() {
        int[] A = { 2, 4, 6, 8, 14 };
        int[] B = { 6, 9 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case128() {
        int[] A = { 2, 5, 10 };
        int[] B = { 19, 38 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case129() {
        int[] A = { 2, 6 };
        int[] B = { 7, 11 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case130() {
        int[] A = { 9, 10 };
        int[] B = { 900, 1000 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case131() {
        int[] A = { 2, 4, 7 };
        int[] B = { 1, 2, 3 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case132() {
        int[] A = { 1, 4, 6, 8 };
        int[] B = { 2, 6, 9, 12 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case133() {
        int[] A = { 1, 2, 3, 4, 5, 6 };
        int[] B = { 6, 9 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case134() {
        int[] A = { 6, 7, 8, 9 };
        int[] B = { 1, 2, 3, 4 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case135() {
        int[] A = { 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 22, 25, 28, 30, 35, 40, 45, 50, 55, 60, 65, 75, 80, 90, 100, 125, 130, 150, 250, 300, 350, 400, 450, 500, 600, 700, 750, 800, 850, 875, 900, 920, 925, 950, 975, 1000 };
        int[] B = { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 100, 200, 300, 400, 500, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 750, 800, 810, 820, 830, 840, 850, 860, 870, 900, 925, 950, 975, 980, 985, 990, 1000 };
        assertEquals(73, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case136() {
        int[] A = { 2, 4 };
        int[] B = { 5, 10 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case137() {
        int[] A = { 100, 200, 300, 400 };
        int[] B = { 2, 3, 4, 7, 10 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case138() {
        int[] A = { 3, 5, 9, 12 };
        int[] B = { 5, 10, 15, 20 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case139() {
        int[] A = { 1, 2 };
        int[] B = { 500, 1000 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case140() {
        int[] A = { 1, 3, 6 };
        int[] B = { 1, 2, 4 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case141() {
        int[] A = { 200, 500, 750, 800, 1000 };
        int[] B = { 100, 200, 300, 400, 600, 700, 800, 900 };
        assertEquals(10, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case142() {
        int[] A = { 1, 2, 3 };
        int[] B = { 2, 4, 8 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case143() {
        int[] A = { 8, 12, 16 };
        int[] B = { 20, 30, 40 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case144() {
        int[] A = { 5, 10, 15 };
        int[] B = { 7, 14, 21 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case145() {
        int[] A = { 1, 2, 3, 4, 5, 6 };
        int[] B = { 6, 9, 12 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case146() {
        int[] A = { 1, 2, 3, 10 };
        int[] B = { 1, 4, 6, 20 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case147() {
        int[] A = { 1, 2, 4, 8 };
        int[] B = { 16, 32, 64, 70 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case148() {
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] B = { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
        assertEquals(15, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case149() {
        int[] A = { 111, 999 };
        int[] B = { 2, 18 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case150() {
        int[] A = { 2, 6, 18, 24, 99 };
        int[] B = { 4, 12, 16, 17 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case151() {
        int[] A = { 6, 9, 12 };
        int[] B = { 5, 10, 15 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case152() {
        int[] A = { 1, 2, 3, 4, 5 };
        int[] B = { 1, 2 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case153() {
        int[] A = { 853, 997 };
        int[] B = { 571, 701 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case154() {
        int[] A = { 3, 6, 9, 12 };
        int[] B = { 5, 10, 15, 20 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case155() {
        int[] A = { 1, 10, 100 };
        int[] B = { 2, 20, 200 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case156() {
        int[] A = { 1, 5, 9, 13 };
        int[] B = { 2, 6, 10, 14 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case157() {
        int[] A = { 600, 900 };
        int[] B = { 606, 909 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case158() {
        int[] A = { 5, 10, 15 };
        int[] B = { 11, 22, 33 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case159() {
        int[] A = { 10, 20, 30, 40, 50, 60 };
        int[] B = { 7, 14, 21, 28, 35, 42 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case160() {
        int[] A = { 1, 2, 3 };
        int[] B = { 997, 998, 999 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case161() {
        int[] A = { 2, 4 };
        int[] B = { 7, 14 };
        assertEquals(2, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case162() {
        int[] A = { 10, 21, 30, 41, 50, 61, 70, 81, 90, 101, 110, 121, 130, 141, 150, 161, 170, 181, 190, 201, 210, 221, 230, 241, 250, 261, 270, 281, 290, 301, 310, 321, 330, 341, 350, 361, 370, 381, 390, 401, 410, 421, 430, 441, 450, 461, 470, 481, 490, 501 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(75, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case163() {
        int[] A = { 3, 4, 9, 16 };
        int[] B = { 2, 5, 10, 20 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case164() {
        int[] A = { 2, 6, 9, 12, 15 };
        int[] B = { 1, 2, 3, 4, 5 };
        assertEquals(6, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case165() {
        int[] A = { 100, 200, 300, 401 };
        int[] B = { 1, 2, 3, 4 };
        assertEquals(5, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case166() {
        int[] A = { 3, 6, 18 };
        int[] B = { 4, 8, 18 };
        assertEquals(4, astronomicalrecordseasy.minimalPlanets(A, B));
    }

    @Test
    public void case167() {
        int[] A = { 1, 2, 6 };
        int[] B = { 2, 6 };
        assertEquals(3, astronomicalrecordseasy.minimalPlanets(A, B));
    }

}
