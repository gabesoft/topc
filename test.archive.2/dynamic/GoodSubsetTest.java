package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class GoodSubsetTest {
    GoodSubset goodsubset = new GoodSubset();

    @Test
    public void case1() {
        int goodValue = 10;
        int[] d = { 2, 3, 4, 5 };
        assertEquals(1, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case2() {
        int goodValue = 6;
        int[] d = { 2, 3, 4, 5, 6 };
        assertEquals(2, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case3() {
        int goodValue = 1;
        int[] d = { 1, 1, 1 };
        assertEquals(7, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case4() {
        int goodValue = 12;
        int[] d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        assertEquals(6, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case5() {
        int goodValue = 5;
        int[] d = { 1, 2, 3, 4 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case6() {
        int goodValue = 1745944200;
        int[] d = { 471240, 15708, 306, 3432, 135660, 152152, 8190, 503880, 1430, 145860, 24942060, 665, 1100, 352716, 4476780, 297, 81510, 13090, 15470, 5225, 120120, 334152, 273, 3667950, 7020, 17556, 300, 678300, 1900, 2771340, 342342, 71820, 12350, 11337300, 91891800, 10868, 350, 1670760, 10270260, 176715, 2926, 3968055, 2431, 839800, 41570100, 10472, 8008, 714, 1220940, 3527160, 251940, 35, 4, 84150, 91, 408408, 1638, 20995, 425, 8083075, 17160, 209950, 81900, 11781, 6348888, 63954, 8075, 15912, 875160, 143, 1312740, 266760, 306, 11411400, 6563700, 90440, 53550, 4284, 3400, 450450, 3197700, 2, 706860, 600600, 29172, 2565, 4284, 2934360, 39680550, 65637, 935, 2550, 2550, 12540, 1700, 1141140, 5460, 15561, 9240, 10296 };
        assertEquals(16, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case7() {
        int goodValue = 1929727800;
        int[] d = { 6840, 128520, 1378377, 3300, 4275, 56, 61425, 8576568, 2223, 161213, 5225, 255255, 16302, 10710, 137445, 25740, 20312924, 298719, 190, 2310, 1350, 12852, 32604, 252252, 105, 1015646, 1326, 2027025, 5320, 9724, 72546, 2090, 1461915, 1194877, 65951, 43605, 189189, 3783780, 294525, 5148, 1400, 675, 585, 1020, 459, 122850, 1837836, 18564, 18200, 2295, 11880, 89964, 36575, 1953165, 286, 19635, 40, 390, 5642478, 20748, 4590, 2652, 2031292, 306306, 140, 595, 604551, 687225, 2968812, 271563, 520, 19019, 69615, 3150, 360360, 9240, 46503, 2522520, 72765, 315315, 20790, 94831, 2356200, 11781, 10472, 128238, 450450, 3243240, 60060, 3850, 6306300, 2088450, 8246700, 59976, 139511, 120910, 186015, 96486390, 520, 4760 };
        assertEquals(3, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case8() {
        int goodValue = 1629547920;
        int[] d = { 38760, 366520, 163363, 426025, 83790, 57754, 1989680, 1175720, 7147140, 242060, 163363, 612, 210, 15519504, 4084080, 9, 12345060, 1299480, 1001, 71004, 330, 780, 3879876, 418, 344877, 2743346, 19380, 443776, 1531530, 47647, 293930, 28600, 1155, 2738736, 66322, 217854, 74256, 13927760, 28588560, 3298680, 1105, 116396280, 67830, 108, 23940, 9690, 3762, 1671331, 1261260, 34200, 125349840, 122892, 116188, 242060, 285885, 9945, 4725, 599760, 20891640, 974610, 298452, 42840, 1917115, 41496, 111720, 227908, 4357080, 40, 317650, 4476780, 11286, 130, 21450, 84, 203693490, 3430627, 1925, 1508840, 144144, 65116, 13585, 4446, 23963940, 532, 391906, 358142, 187, 111720, 325, 27, 25245, 13923, 2155486, 61261, 79412, 42042, 27159132, 70224, 476, 136546 };
        assertEquals(5, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case9() {
        int goodValue = 1163962800;
        int[] d = { 5610, 19019, 6600, 17017, 120, 20995, 10581480, 131670, 60060, 594, 360360, 7054320, 46106, 12012, 5400, 37050, 91, 150, 3740, 889200, 3919066, 342342, 27846, 60060, 2713200, 41570100, 17635800, 792, 371280, 69300, 15708, 284240, 3315, 585, 27720, 98800, 57200, 79800, 195953, 17160, 4940, 50388, 9009, 2487100, 1650, 3192, 125970, 8925, 1026, 46200, 117810, 798, 64600, 1292, 2784600, 61261200, 19399380, 615853, 25935, 884, 696150, 618800, 3570, 64600, 2584, 221, 13856700, 8778, 9880, 38, 24225, 62244, 5130, 714, 275, 306306, 167960, 5985, 6460, 7140, 22100, 705432, 32760, 14, 10296, 1469650, 22822800, 10210200, 10659, 1071, 468, 5852, 390, 489883, 595, 14300, 570570, 247, 102, 3705 };
        assertEquals(15, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case10() {
        int goodValue = 1286485200;
        int[] d = { 7315, 1482, 28, 1560, 7293, 5225, 1925, 10296, 33854873, 42, 23100, 4862, 11115, 71400, 31977, 50, 52360, 4620, 50, 5208442, 4513983, 125388, 17765, 11934, 114, 7956, 166600, 2700, 1504661, 14294280, 2295, 11475, 100, 510, 125388, 25650, 5049, 338548, 1009008, 5569200, 2280, 8075, 249900, 2850, 13464, 520, 88509, 616, 257297040, 5208442, 209, 3780, 48048, 1105, 33592, 358252, 565488, 16150, 5717712, 12012, 25650, 77, 1504661, 1, 9350, 1350, 60347, 2340, 396, 14364, 7020, 29070, 17550, 2618, 181042, 11900, 88509, 1701700, 128520, 22610, 10725, 17556, 541450, 10725, 250776, 2850, 3385487, 306, 88509, 150466, 7140, 113797, 4513983, 366520, 266, 4199, 160810650, 6006, 420420, 5950 };
        assertEquals(12, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case11() {
        int goodValue = 1654052400;
        int[] d = { 13650, 118146600, 7484400, 101463, 5700, 895050, 30600, 2508, 51, 450, 48648600, 6435, 62182, 90882, 5, 1582825, 3740, 25025, 20995, 73710, 13899600, 22100, 702, 121176, 30600, 167414, 60588, 49896, 308, 1064, 8, 53460, 77220, 1350, 29536650, 245700, 150, 1320, 161213, 478326, 48648600, 455, 152194, 73710, 5400, 300, 80606, 706860, 87516, 21420, 12530700, 264, 8190, 1980, 27027, 38675, 936, 1925, 83538, 2090, 207274, 2948400, 454410, 41580, 50490, 819, 1105, 1836, 25080, 12376, 11475, 3627307, 491400, 1463, 10920, 17556, 68850, 700, 77112, 85, 4760, 421200, 138996, 646, 1287, 101463, 504, 3891888, 1428, 386912, 952, 437580, 1706968, 24700, 117810, 608778, 59073300, 840, 594, 186015 };
        assertEquals(17, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case12() {
        int goodValue = 1396755360;
        int[] d = { 298771, 51163, 143640, 29925, 228, 244188, 55692, 42636, 1867320, 16065, 70, 38304, 5372136, 442, 4158, 44, 13260, 1197, 836, 168, 3465, 7106, 1534896, 48048, 1361360, 28424, 273, 2550, 252, 2100384, 8314020, 5320, 11700, 35112, 7390240, 55870214, 2052, 6320160, 145860, 46512, 8892, 15400, 80080, 40840, 5814, 445536, 175, 423259, 74692, 532, 190944, 308, 325584, 295609, 858, 3978, 465585120, 5005, 17907120, 148512, 18525, 660, 297, 35100, 48620, 6466460, 2380, 7674480, 5236, 33150, 7735, 2730, 2618, 56848, 2508, 23205, 6545, 27170, 2450448, 2376, 306979, 7524, 6600, 12376, 829920, 434720, 16065, 8925, 3825, 665, 41580, 2934360, 11050, 102816, 910, 69160, 3675672, 19950, 5940, 18623404 };
        assertEquals(5, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case13() {
        int goodValue = 1837836000;
        int[] d = { 4914, 54054000, 4, 10725, 28728, 325684, 5569200, 6909157, 351738, 89563, 4284, 229500, 300300, 78, 462000, 462000, 5400, 836, 3454578, 143, 77000, 162568, 55115, 895631, 3141600, 4845, 6732, 1890, 1870, 112200, 374, 89563, 330, 20475, 17671500, 8353800, 2550, 69300, 6650, 12376, 280, 448800, 2198368, 6300, 91891800, 21736, 1285200, 3465, 4606105, 1039500, 2700, 513, 198900, 16380, 950, 2200, 235620, 760, 5890500, 33150, 33, 1836, 396, 22440, 3400, 4836410, 400400, 14586000, 38675, 14212, 67736, 58500, 26, 4773600, 18378360, 1638000, 221000, 6669, 1755, 200, 3553, 680, 138600, 596700, 21945, 654500, 56898, 8008, 177157, 2931157, 440, 1071000, 74406, 425, 11628, 95, 18525, 163800, 28728, 570 };
        assertEquals(11, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case14() {
        int goodValue = 1543782240;
        int[] d = { 812516, 13585, 6683040, 5985, 42336, 317520, 3591, 208337, 9081072, 12540, 199584, 255, 257941, 151351, 66, 644854, 432432, 81170, 7106, 308756448, 198, 4199, 56898, 14025, 756756, 952, 42882840, 332640, 19635, 45956, 1651104, 395841, 97020, 2652, 24504480, 39, 1320, 163363, 147730, 5847660, 1122, 41667, 23100, 227595, 153, 263894, 52920, 39916, 420, 204204, 190, 132764, 233906, 132764, 85348, 10868, 1672, 5100, 2389755, 195, 81681, 63504, 1083355, 260, 19950, 19656, 400982, 550368, 42208, 38760, 71024, 4241160, 196560, 1045, 3125065, 7700, 3927, 148812, 1575, 451398, 15708, 873180, 44108064, 235872, 6732, 91, 2520, 9282, 410362, 464295, 857656, 107956, 649740, 34580, 194040, 459, 490089, 434501, 61689, 10296 };
        assertEquals(3, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case15() {
        int goodValue = 1102701600;
        int[] d = { 831600, 59400, 2376, 928200, 921221, 127553, 1116094, 41184, 57, 19691100, 3141600, 9424800, 58036926, 742560, 18700, 2856, 558047, 15470, 65652, 46200, 8925, 186015, 41336, 9900, 14137200, 1900, 360360, 25650, 30030, 135284, 4989600, 161213, 188431, 1050192, 54189, 424116, 25650, 7020, 8353800, 23868, 5304, 5967, 13090, 510, 1514700, 2321477, 673200, 2310, 9100, 14212, 1785, 112200, 4095, 68640, 11880, 9880, 147420, 58344, 836, 471240, 51480, 72, 7650, 848232, 2700, 2574, 1392300, 1140, 297625, 88, 12825, 2784600, 148812, 85, 1976, 100245600, 3080, 17550, 6435, 2926, 12285, 35431, 41336, 2470, 20790, 13566, 22, 4989600, 864864, 12012, 1140, 5460, 6916, 842400, 5610, 105521, 55273, 260, 113400, 7560 };
        assertEquals(7, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case16() {
        int goodValue = 1715313600;
        int[] d = { 742560, 40392, 146557, 5717712, 19800, 58800, 334369, 23400, 26180, 32725, 171961, 189, 303971, 315, 6806800, 25194, 147515, 25245, 533866, 5967, 2784600, 275, 2457, 82673, 7524, 100310, 2730, 117246, 16632, 11628, 1641448, 323, 47767, 195, 10098, 5852, 444266, 23100, 67946, 1197, 3003, 2268933, 13923, 23256, 7425600, 32300, 1672, 7150, 1770189, 20520, 741, 192905, 238, 12, 174533, 1800, 252, 1485120, 1001, 26389440, 12600, 2051810, 1884960, 221760, 1868533, 13566, 280, 665, 5236, 417961, 270, 19380, 325, 400400, 47600, 1009008, 104, 400400, 600600, 38610, 135, 363029, 2399040, 192192, 4513983, 4331600, 360, 64680, 288773, 33592, 11700, 628320, 12012, 12, 144144, 5130, 3978, 6426, 20349, 436800 };
        assertEquals(7, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case17() {
        int goodValue = 1862340480;
        int[] d = { 189, 17736576, 129653, 82506, 7390240, 3591, 384384, 120931, 5720, 2821728, 2722720, 2015520, 2475, 2717, 96096, 28728, 1976, 14630, 23940, 990, 39270, 459, 90956, 3861, 1254, 186048, 770, 891072, 29070, 620780160, 636480, 4845, 24570, 2, 115925, 4284, 447893, 73770, 3213, 170544, 855, 29700, 468, 20692672, 159174, 636697, 115315, 6783, 147840, 94746, 1862340480, 18900, 6930, 29640, 702240, 466752, 77597520, 23800, 106080, 2856, 2100, 82368, 200640, 156, 1188, 66512160, 31977, 66393, 1521520, 115925, 143, 29172, 7980, 1209312, 8062080, 455, 25194, 4180, 75398, 159120, 42636, 1693036, 3103900, 671840, 32760, 682176, 288288, 494, 314160, 723520, 54, 133, 2351440, 46558512, 82506, 40698, 51, 777920, 74419, 486886 };
        assertEquals(4, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case18() {
        int goodValue = 1470268800;
        int[] d = { 1938, 6534528, 16707600, 4550, 114400, 14040, 850, 190, 99208, 16707600, 660, 3325, 132, 9100, 89760, 21, 1400, 8550, 184244, 1256640, 8168160, 22440, 294053760, 75600, 10200, 2808, 76160, 1368, 18525, 1, 66997, 773825, 165, 2200, 22572, 61414, 5654880, 2584, 2565, 196560, 40800, 104, 644854, 255, 21945, 520, 68640, 17297280, 3231360, 75, 8925, 50, 189663, 146880, 240240, 3276, 400400, 119050, 135284, 2094400, 1172463, 2333760, 6552, 1890, 66528, 10472, 429, 53856, 7800, 368488, 10920, 28828800, 95, 73697, 134640, 18, 200993, 2970, 44, 3, 1197, 468, 1292, 3876, 101153, 73697, 2261952, 3900, 891072, 614147, 4725, 209, 1260, 1710, 34034, 3060, 315, 119680, 83776, 1026 };
        assertEquals(24, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case19() {
        int goodValue = 1816214400;
        int[] d = { 44, 41580, 4586400, 819, 858, 5622954, 840, 468579, 181621440, 33592, 280, 1587600, 760, 169344, 88509, 4095, 6552, 357, 2090, 33592, 9081072, 9880, 154164, 4940, 10395, 1274536, 103488, 8721, 712240, 77082, 381557, 5100, 86506, 13453440, 350147, 1214047, 104128, 13338, 8008, 5005, 7854, 900, 93388, 3880800, 7293, 92498, 15561, 35612047, 8072064, 362880, 7854, 82762, 7122409, 93388, 277496, 702, 7150, 200, 228282, 302400, 66528, 129498, 3540378, 19118046, 1596, 66846, 325, 4914, 8415, 18345600, 4036032, 2340, 201600, 25650, 2717, 10378368, 293505, 4522, 350147, 55499, 20520, 275, 24024, 4345010, 144178, 68968, 182, 273938, 10010, 65, 141120, 10378368, 323, 2295, 9350, 262080, 315, 22440, 7207200, 76094 };
        assertEquals(2, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case20() {
        int goodValue = 1764322560;
        int[] d = { 741, 25, 11050, 576576, 520, 23256, 16803072, 295680, 18571816, 4180, 6783, 420076, 13090, 1950, 46675, 4199, 308448, 168, 1755, 628320, 100, 916531, 39900, 449280, 260, 57, 61689, 884372, 10296, 370656, 11934, 68640, 2731149, 18900, 1309, 1092, 312, 8910720, 5700, 1485120, 3316395, 649364, 4522, 25080, 1976, 9576, 64627, 1596672, 1473953, 199584, 550, 532224, 1404, 2800512, 2800512, 164736, 2579418, 10098, 8441734, 1633632, 73513440, 11531520, 19, 884372, 137088, 37620, 124143, 319334, 420176, 3672, 325, 312656, 262080, 19890, 2513280, 93350, 184244, 2975, 693, 12920, 3927, 7800, 55174, 66138, 6630, 602981, 9009, 37128, 390164, 381888, 441080640, 19388160, 24453, 99314, 969, 127553, 126023040, 595, 5544, 17290 };
        assertEquals(1, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case21() {
        int goodValue = 1960358400;
        int[] d = { 515883, 82368, 5186133, 1224, 3591, 18, 3203200, 22276800, 233431, 46898, 4095, 504, 262080, 81600, 4804800, 264555, 105, 27846, 1396266, 67435, 35530, 5016, 1350, 550, 11880, 1050, 273, 521094, 38, 39501, 6120, 509184, 392071680, 26520, 854186, 204, 106773, 349440, 600, 228480, 2850, 3640, 693, 7293, 848640, 1296533, 42900, 12729600, 1815146, 94293, 2275, 768768, 29835, 2344926, 797866, 32300, 101546, 7779200, 4862, 3960, 50576, 446652, 674357, 6600, 9, 26520, 134871, 228800, 715, 132, 28828800, 220463, 10053120, 770, 1473953, 1292, 2261, 221, 167494, 2866021, 18018, 251328, 141440, 75398400, 2593066, 198416, 199466, 132, 3960320, 45696, 155621, 299200, 4118400, 5765760, 166400, 3427200, 105600, 4389, 9609600, 6534528 };
        assertEquals(5, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case22() {
        int goodValue = 1745944200;
        int[] d = { 9237800, 35, 499463914, 135660, 373464, 2200, 3900, 145860, 79361100, 3230, 260, 4476780, 85272, 22440, 4988412, 738003421, 950950, 1065565893, 4675, 7020, 22, 135716723, 5, 2771340, 179550, 4104, 219034255, 413340746, 42636, 9690, 455, 176715, 256433197, 8151, 2441880, 41570100, 41769, 855, 83140200, 3527160, 3803800, 171171, 1650, 91, 60, 1049515349, 259350, 8083075, 33150, 56100, 910, 6348888, 12209400, 167076, 25650, 143, 69300, 2356200, 24249225, 6563700, 2552550, 579449129, 1960026892, 450450, 4176900, 1415989994, 1918620, 29172, 175032, 910, 255, 65637, 1451798285, 113373, 444600, 1700, 554268, 1493540065, 4389, 800130034, 5775, 489104844, 1037400, 1670760, 503880, 177650, 1222650, 163800, 2445300, 911828089, 41496, 10920, 8, 353430, 441989481, 195, 455, 198900, 67925, 5225 };
        assertEquals(11, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case23() {
        int goodValue = 1929727800;
        int[] d = { 1991463, 164877, 1300, 9724, 726085806, 7567560, 36, 65951, 1764000718, 703446629, 312506, 5148, 408408, 168168, 1299128998, 873058464, 39900, 5301450, 201517, 2295, 195, 754889919, 730341128, 286, 66150, 107100, 1051053020, 20748, 84, 2579850, 22230, 140, 99220700, 190103096, 6650, 271563, 143, 124740, 2987194, 360360, 695657308, 20748, 22950, 315315, 39501, 4176900, 794993259, 10472, 119, 1260, 25740, 3850, 378378, 12285, 1106904093, 139511, 756756, 1045, 43758, 4760, 241820, 2520, 71123, 575397410, 362500249, 579754490, 8580, 3439800, 677097, 15960, 60, 1739442610, 1531005163, 1268381810, 2210, 5236, 36036, 537378, 1299218048, 24310, 2261, 1315271594, 380, 16150, 655880627, 23205, 25080, 385, 3762, 549429865, 630630, 4641, 746641954, 417690, 16302, 450450, 2052, 24700, 11115, 32300 };
        assertEquals(1, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case24() {
        int goodValue = 1629547920;
        int[] d = { 64680, 1705140303, 9900, 285885, 54978, 61446, 630630, 974610, 28, 1683, 6732, 111720, 530414399, 1724389, 32760, 4476780, 476476, 1592379712, 8415, 956569566, 5434, 825197798, 1600661067, 432007179, 105513, 11550, 458640, 319213859, 59690, 14535, 14820, 27, 372152274, 11220, 29260, 79412, 54618, 49380240, 1169834576, 136546, 3298680, 7524, 228, 41496, 1965732407, 1388482758, 297, 860479219, 70, 2457840, 2, 2508, 52668, 185703, 211026, 1949220, 1873051683, 1053166178, 238238, 670320, 181060880, 5016, 357, 1174104566, 1020, 215548, 122522, 198, 1672525236, 744934991, 484120, 8775, 54866, 136546, 780, 1279946342, 1099560, 1724237163, 1763580, 2984520, 1099491567, 13260, 15561, 31337460, 491722085, 3432, 474810, 19380, 519610660, 27846, 1556122338, 2184, 23409916, 1482, 6175, 4950, 19950, 8316, 4104, 29172 };
        assertEquals(6, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case25() {
        int goodValue = 1163962800;
        int[] d = { 1598850, 357, 2131800, 7140, 163800, 2268933, 154, 10296, 1615, 19656, 218790, 1779617373, 6120, 27132, 2600, 451182021, 62700, 192718562, 1464912163, 3705, 790625455, 2700, 25740, 14280, 523130488, 143, 10, 1995, 3094, 1987540430, 2970, 34650, 11305, 1277556657, 990, 1231706, 175, 836, 1425, 187, 2268933, 83980, 213180, 126, 1455731102, 150733, 32332300, 504, 90090, 98800, 8316, 35700, 360360, 12350, 37683, 510510, 33660, 99, 1188, 951971094, 1045, 1338751378, 78381, 548701368, 278460, 14025, 1318612216, 286, 1375189593, 198968, 852450877, 48906, 1006896556, 153963, 720649725, 59216, 8139600, 18564, 772737208, 365257944, 75582, 660, 1567168856, 7607600, 556574471, 387987600, 23940, 688018291, 250800, 16796, 209950, 36498495, 2457, 23868, 58786, 5, 7054320, 1635748336, 7524, 379931051 };
        assertEquals(8, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case26() {
        int goodValue = 1286485200;
        int[] d = { 2249100, 5850, 2144142, 700700, 357567862, 3315, 1216294585, 136787, 1026, 1979208, 945, 541450, 5355, 259896, 21450, 64485, 3465, 1538857, 584451752, 42840, 1770122844, 2618, 275184, 70070, 6300, 4488, 456, 1844873335, 1621044840, 10659, 549780, 10, 55692, 16796, 9009, 71471400, 1459334461, 1107992768, 119952, 329920722, 35735700, 9350, 99573, 205181, 94831, 2860, 7722, 31122, 10200, 9690, 6650, 835603239, 784756775, 25935, 119952, 13338, 1962560789, 55692, 160810650, 91728, 1144, 165955, 104, 1775293138, 71400, 10200, 1265568755, 3298680, 678841447, 19, 733917616, 6552, 975, 165, 451398, 5497800, 65520, 1362279630, 1457082431, 645942167, 1799280, 49604, 11695320, 520, 11050, 53603550, 1517216628, 13832, 16302, 1430, 3958416, 300932, 5700, 9529520, 418, 451398, 1463, 170132507, 22569915, 493368611 };
        assertEquals(1, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case27() {
        int goodValue = 1999999999;
        int[] d = { 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1999999999, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5454, 3434, 2323, 554 };
        assertEquals(79214383, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case28() {
        int goodValue = 1745944200;
        int[] d = { 2, 2, 2, 3, 3, 3, 5, 5, 7, 11, 13, 17, 19, 13, 104, 6006, 3, 22, 1, 399, 228, 418, 30, 104, 198, 28, 5, 5, 45, 12540, 70, 60, 70, 663, 3, 338, 1083, 55, 27, 15, 25, 12, 99, 22, 1254, 114, 147, 3230, 12870, 22, 285, 14161, 663, 18513, 78, 10830, 408, 702, 1, 30, 22, 6, 9, 156, 238, 195415, 78, 935, 114, 847, 14, 2499, 114, 18, 18, 182, 140, 26, 1425, 25, 84, 78, 15, 399, 38, 570, 5005, 9, 21, 231, 24, 1995, 8, 350, 19, 4750, 585, 102, 51 };
        assertEquals(3803256, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case29() {
        int goodValue = 1929727800;
        int[] d = { 2, 2, 2, 3, 3, 3, 3, 5, 5, 7, 7, 11, 13, 17, 294, 495, 6, 132, 63, 117, 1547, 52, 245, 54, 66, 37570, 78, 63, 11, 770, 195, 924, 4, 132, 5950, 175, 100, 238, 14, 11271, 66, 425, 34, 6591, 108, 363, 85, 11550, 3042, 2210, 9, 21, 308, 14, 693, 1386, 85, 42, 660, 280, 54, 15, 455, 255, 1190, 36, 182, 495, 385, 150, 2, 6, 17, 6, 3, 315, 12, 63, 2890, 42, 6, 189, 9, 70, 4851, 204, 165, 18, 39, 6, 330, 63, 30, 30, 3, 735, 105, 14, 819 };
        assertEquals(4738830, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case30() {
        int goodValue = 1629547920;
        int[] d = { 2, 2, 2, 2, 3, 3, 5, 7, 7, 11, 13, 17, 19, 722, 154, 14, 13566, 136, 35, 260, 15, 264, 4, 700, 19, 340, 28, 169, 374, 385, 252, 6, 418, 7, 38, 28, 952, 1729, 2618, 52, 34, 1064, 931, 10115, 57, 57, 187, 9, 4, 748, 15972, 1666, 54, 1190, 2366, 2890, 1, 39, 228, 1694, 165, 77, 1254, 343, 102, 1666, 3, 24, 14, 238, 462, 3094, 104, 18, 171, 4, 4, 5, 1190, 4, 17, 27951, 1029, 3366, 143, 49, 1862, 22, 85, 12, 10, 21, 33, 76, 210, 52, 133, 51, 10 };
        assertEquals(2835466, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case31() {
        int goodValue = 1163962800;
        int[] d = { 2, 2, 2, 2, 3, 3, 5, 5, 7, 11, 13, 17, 19, 6897, 90, 1425, 1615, 4675, 2223, 13794, 20, 1, 510, 10, 60, 102, 60, 340, 14025, 714, 66, 6, 6, 7, 26, 10, 1190, 21, 1, 25, 442, 1292, 100, 858, 14, 171, 1155, 390, 867, 22, 33, 6, 238, 11, 1330, 4114, 10, 8, 34, 627, 34, 49419, 234, 45, 1496, 8092, 68, 11, 1900, 210, 510, 30, 198, 1785, 26, 209, 34, 36, 114, 22, 10, 39710, 234, 168, 2, 2, 39, 420, 68, 88, 90, 20, 28, 13, 40898, 2166, 52, 4, 5187 };
        assertEquals(4145472, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case32() {
        int goodValue = 1286485200;
        int[] d = { 2, 2, 2, 2, 3, 3, 3, 5, 5, 7, 7, 11, 13, 17, 51, 275, 49, 13013, 28, 18, 27489, 204, 6, 45, 33, 187, 10, 30, 33, 26, 26, 1, 455, 189, 350, 70, 306, 70, 7, 7350, 2380, 210, 105, 45, 52, 88, 2, 20, 462, 5460, 26, 15, 90, 750, 1470, 429, 14, 3234, 1870, 132, 170, 12, 45, 33, 5, 39, 1650, 6, 6, 22, 3, 52, 55, 378, 42, 6, 21, 7, 1694, 35, 12, 756, 150, 1029, 4, 378, 13, 126, 238, 126, 1287, 1430, 30, 130, 68, 6, 663, 52, 26 };
        assertEquals(23063164, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case33() {
        int goodValue = 1073741824;
        int[] d = { 65536, 1, 8, 2048, 4096, 4096, 256, 524288, 2, 1024, 4194304, 134217728, 67108864, 2097152, 32, 1024, 1, 512, 524288, 512, 4194304, 4194304, 8192, 16777216, 2, 32, 16384, 32, 16777216, 2048, 524288, 131072, 8192, 64, 524288, 67108864, 2048, 32768, 32, 262144, 2, 16, 4096, 33554432, 1, 1073741824, 268435456, 512, 1048576, 134217728, 262144, 256, 1048576, 4194304, 1073741824, 134217728, 8, 262144, 268435456, 128, 268435456, 1073741824, 512, 268435456, 32, 1048576, 128, 67108864, 4, 64, 64, 8388608, 4194304, 512, 524288, 8192, 2, 128, 16777216, 512, 4194304, 16, 1048576, 32768, 1073741824, 512, 33554432, 16777216, 536870912, 67108864, 268435456, 512, 1073741824, 32, 4, 4194304, 131072, 2048, 1024, 8192 };
        assertEquals(3473920, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case34() {
        int goodValue = 2000000000;
        int[] d = { 1, 128, 1, 625, 64, 128, 5, 15625, 128, 1, 128, 15625, 4, 15625, 15625, 8, 3125, 1, 32, 625, 1, 9765625, 1, 128, 1953125, 8, 4, 25, 15625, 390625, 1953125, 390625, 128, 125, 16, 256, 16, 78125, 8, 9765625, 125, 32, 128, 1024, 625, 9765625, 1024, 1, 625, 25, 78125, 390625, 625, 125, 78125, 64, 2, 1024, 128, 1, 390625, 125, 78125, 1, 78125, 3125, 4, 128, 2, 125, 1024, 125, 1953125, 512, 390625, 1024, 256, 1, 3125, 64, 1, 25, 16, 32, 1024, 128, 15625, 78125, 9765625, 390625, 9765625, 4, 32, 3125, 9765625, 390625, 5, 78125, 9765625, 25 };
        assertEquals(700530688, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case35() {
        int goodValue = 1874919424;
        int[] d = { 100000000, 100000000 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case36() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(976371284, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case37() {
        int goodValue = 2;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case38() {
        int goodValue = 1;
        int[] d = { 1 };
        assertEquals(1, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case39() {
        int goodValue = 1999999747;
        int[] d = { 1, 1, 1, 1999999747, 1999999747, 1999999747 };
        assertEquals(24, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case40() {
        int goodValue = 1999999747;
        int[] d = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case41() {
        int goodValue = 2000000000;
        int[] d = { 2000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(988185646, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case42() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(976371284, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case43() {
        int goodValue = 2000000000;
        int[] d = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case44() {
        int goodValue = 2000000000;
        int[] d = { 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1, 2000000000, 1 };
        assertEquals(948066242, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case45() {
        int goodValue = 1073741824;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(211914057, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case46() {
        int goodValue = 2000000000;
        int[] d = { 2, 5, 10, 200, 400, 800, 1, 2, 100000, 10, 10, 10, 10, 20, 40, 10, 10, 10, 10, 10, 100, 1000, 100000, 2, 5, 10, 2, 5, 10, 200, 400, 800, 1, 2, 100000, 10, 10, 10, 40, 10, 10, 10, 10, 10, 100, 1000, 100000, 2, 5, 10, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000, 2000000000, 2000000000, 2000000000, 2000000000, 2000000000, 20000000, 200000000, 4000000, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 16, 200000, 40000, 50000, 5000, 50, 2500, 80, 1, 1, 1, 1, 1, 1, 20000, 100000, 2000, 1000000, 1000, 1000, 20, 50, 50, 20 };
        assertEquals(839561307, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case47() {
        int goodValue = 65536;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };
        assertEquals(805448288, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case48() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(898961330, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case49() {
        int goodValue = 25;
        int[] d = { 1, 4, 2, 6, 3, 2, 6, 4, 2, 8, 4, 3, 5, 5, 5, 5, 5 };
        assertEquals(20, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case50() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(92960635, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case51() {
        int goodValue = 1338557220;
        int[] d = { 1330697978, 1203451973, 1, 117735405, 1490845222, 908839132, 525010425, 649537051, 7, 1, 1, 260383889, 529845429, 1148891973, 9699690, 1764970063, 752041024, 186506299, 210, 281291010, 680564135, 1, 1, 1471694043, 1, 12539604, 13, 1815917460, 1549650209, 1, 1429615181, 1, 11, 1617302733, 2, 438773499, 369579584, 30, 510510, 1638516551, 1, 441370986, 785160386, 1299291618, 5, 3, 889036007, 6, 223092870, 1, 1, 17, 446185740, 1, 85546053, 1847900183, 40689337, 1371059241, 1, 1, 161114321, 913063951, 778493735, 19, 1, 1498776833, 388125568, 1, 1650445025, 848227913, 3, 1, 1029177124, 305427327, 1, 946933651, 1060592032, 1, 1774837480, 30030, 2, 374423611, 1607031013, 787596840, 2, 1207317563, 669278610, 102238863, 1990552386, 1621363881, 613804334, 618678442, 23, 1928078899, 1856904955, 1, 2310, 2, 3, 675210552 };
        assertEquals(134217728, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case52() {
        int goodValue = 1073741824;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(511931791, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case53() {
        int goodValue = 2000000;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case54() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(560523803, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case55() {
        int goodValue = 1293938646;
        int[] d = { 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6, 2, 3, 7, 11, 13, 17, 19, 23, 29, 6 };
        assertEquals(99999993, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case56() {
        int goodValue = 2000000000;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case57() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(494092822, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case58() {
        int goodValue = 479001600;
        int[] d = { 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        assertEquals(759809475, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case59() {
        int goodValue = 1073741824;
        int[] d = { 1073741824, 536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1073741824, 536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(667149462, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case60() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(511620082, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case61() {
        int goodValue = 12;
        int[] d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 6 };
        assertEquals(8, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case62() {
        int goodValue = 5827;
        int[] d = { 17312, 16921, 19187, 10563, 21158, 15540, 29270, 17086, 22414, 14648, 23897, 22862, 8532, 30401, 2676, 32280, 5855, 12708, 12667, 823, 5419, 6402, 13016, 15863, 30887, 17053, 3095, 14660, 21980, 4331, 30121, 27746, 9552, 16233, 3553, 18910, 26282, 2354, 13635, 15044, 32534, 7632, 32766, 23058, 22251, 22610, 24759, 1133, 31372, 27806, 28808, 4115, 17036, 32521, 30793, 16657, 18197, 23077, 7950, 19894 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case63() {
        int goodValue = 1073741824;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(188331431, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case64() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2 };
        assertEquals(892516374, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case65() {
        int goodValue = 2000000000;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case66() {
        int goodValue = 12;
        int[] d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        assertEquals(6, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case67() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(988185645, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case68() {
        int goodValue = 1073741824;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(337583936, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case69() {
        int goodValue = 12;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 3, 3, 3, 3, 6, 6, 6, 12, 12 };
        assertEquals(12058624, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case70() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(589934535, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case71() {
        int goodValue = 1073741824;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(496, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case72() {
        int goodValue = 1;
        int[] d = { 1, 1, 1 };
        assertEquals(7, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case73() {
        int goodValue = 100;
        int[] d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75 };
        assertEquals(8, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case74() {
        int goodValue = 1000;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case75() {
        int goodValue = 5000;
        int[] d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(14, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case76() {
        int goodValue = 2;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 };
        assertEquals(988185646, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case77() {
        int goodValue = 1;
        int[] d = { 1121, 121, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(487370168, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case78() {
        int goodValue = 1999999999;
        int[] d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case79() {
        int goodValue = 12345678;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 1, 2, 3, 4, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 1234, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 4, 3, 2, 3, 2, 1, 1 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case80() {
        int goodValue = 536870912;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(469830336, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case81() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(383381197, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case82() {
        int goodValue = 2;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2 };
        assertEquals(494092823, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case83() {
        int goodValue = 2000000000;
        int[] d = { 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(0, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case84() {
        int goodValue = 268435456;
        int[] d = { 1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 8, 8, 16, 16, 32, 64, 128, 256, 512, 1024, 2048, 1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 8, 8, 16, 16, 32, 64, 128, 256, 512, 1024, 20481, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 8, 8, 16, 16, 32, 64, 128, 256, 512, 1024, 2048 };
        assertEquals(275027197, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case85() {
        int goodValue = 4;
        int[] d = { 1, 1, 2, 1, 4, 2, 5, 5 };
        assertEquals(16, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case86() {
        int goodValue = 268435456;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(918443081, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case87() {
        int goodValue = 1;
        int[] d = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(270016252, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case88() {
        int goodValue = 1073741824;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(805535579, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case89() {
        int goodValue = 32768;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(576619357, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case90() {
        int goodValue = 479001600;
        int[] d = { 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7 };
        assertEquals(427286543, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case91() {
        int goodValue = 1073741824;
        int[] d = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 128, 128, 128, 2, 2, 2, 2, 2, 4, 8, 2, 4, 8, 2, 2, 2, 2, 2, 4, 8, 2, 4, 8, 2, 2, 2, 2, 2, 4, 8, 2, 4, 8, 2, 2, 2, 2, 2, 4, 8, 2, 4, 8, 2, 2, 2, 2 };
        assertEquals(283044884, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case92() {
        int goodValue = 100;
        int[] d = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 2, 4, 8, 25, 50, 100, 1, 1, 2, 2, 2, 4 };
        assertEquals(344, goodsubset.numberOfSubsets(goodValue, d));
    }

    @Test
    public void case93() {
        int goodValue = 1000000000;
        int[] d = { 10, 10, 10, 10, 10, 10, 10, 10, 100, 10, 10, 10, 1000, 10000, 10, 10, 10, 10, 10, 10, 10, 10, 10001, 100, 100, 100, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 100, 10000, 1000, 100, 10, 10, 10, 10, 10, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 100, 10, 10, 10, 100, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
        assertEquals(571155471, goodsubset.numberOfSubsets(goodValue, d));
    }

}
