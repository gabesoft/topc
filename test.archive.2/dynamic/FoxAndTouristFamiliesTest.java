package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class FoxAndTouristFamiliesTest {
  double DELTA = 1.0e-09;
  FoxAndTouristFamilies foxandtouristfamilies = new FoxAndTouristFamilies();

  @Test
  public void case1() {
    int[] A = { 0, 1 };
    int[] B = { 1, 2 };
    int[] f = { 0 };
    assertEquals(1.5, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.5);
  }

  @Test
  public void case2() {
    int[] A = { 0, 1 };
    int[] B = { 1, 2 };
    int[] f = { 0, 0 };
    assertEquals(1.25, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.25);
  }

  @Test
  public void case3() {
    int[] A = { 0, 1 };
    int[] B = { 1, 2 };
    int[] f = { 0, 1 };
    assertEquals(0.75, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.75);
  }

  @Test
  public void case4() {
    int[] A = { 0, 1 };
    int[] B = { 1, 2 };
    int[] f = { 0, 2 };
    assertEquals(1.0, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0);
  }

  @Test
  public void case5() {
    int[] A = { 0, 0, 0 };
    int[] B = { 1, 2, 3 };
    int[] f = { 0 };
    assertEquals(1.0, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0);
  }

  @Test
  public void case6() {
    int[] A = { 0, 0, 0 };
    int[] B = { 1, 2, 3 };
    int[] f = { 1, 2 };
    assertEquals(0.7777777777777777, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.7777777777777777);
  }

  @Test
  public void case7() {
    int[] A = { 0, 1, 1, 3, 5, 6 };
    int[] B = { 1, 2, 3, 4, 4, 4 };
    int[] f = { 5, 6, 1 };
    assertEquals(0.4537037037037037, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.4537037037037037);
  }

  @Test
  public void case8() {
    int[] A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int[] f = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    assertEquals(1.4914341925000003, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.4914341925000003);
  }

  @Test
  public void case9() {
    int[] A = { 24, 20, 19, 3, 28, 27, 9, 11, 5, 12, 23, 29, 1, 26, 8, 32, 22, 31, 14, 7, 30, 10, 25, 6, 4, 17, 16, 21, 15, 18, 13, 2 };
    int[] B = { 22, 18, 17, 1, 25, 24, 7, 8, 4, 11, 21, 26, 0, 24, 5, 31, 20, 30, 11, 4, 29, 8, 24, 4, 3, 14, 14, 18, 14, 16, 10, 1 };
    int[] f = { 12, 13, 13, 20, 27, 31, 32, 1, 22, 8, 4, 23, 17, 11, 20 };
    assertEquals(0.00012603064190219374, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.00012603064190219374);
  }

  @Test
  public void case10() {
    int[] A = { 1, 3, 2 };
    int[] B = { 0, 0, 1 };
    int[] f = { 0, 1, 2, 3, 1, 0, 1, 1, 1, 1, 1, 1, 3 };
    assertEquals(0.005145757791865259, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.005145757791865259);
  }

  @Test
  public void case11() {
    int[] A = { 8, 1, 20, 31, 22, 36, 15, 39, 26, 14, 13, 7, 30, 21, 4, 10, 12, 9, 35, 32, 38, 25, 27, 37, 29, 6, 16, 17, 23, 33, 2, 5, 24, 18, 34, 3, 28, 11, 19 };
    int[] B = { 0, 0, 13, 13, 20, 35, 5, 28, 3, 12, 9, 2, 7, 14, 3, 9, 5, 0, 20, 19, 35, 14, 26, 20, 5, 3, 8, 4, 0, 10, 0, 0, 13, 12, 11, 0, 21, 5, 3 };
    int[] f = { 2, 22, 27, 29, 11, 24, 36, 39, 29 };
    assertEquals(0.0011277418605991965, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.0011277418605991965);
  }

  @Test
  public void case12() {
    int[] A = { 1, 14, 16, 37, 5, 26, 35, 11, 25, 10, 42, 31, 6, 24, 41, 39, 33, 32, 2, 22, 3, 28, 23, 30, 17, 38, 27, 18, 19, 13, 15, 12, 21, 46, 47, 20, 44, 7, 36, 9, 40, 48, 29, 8, 43, 45, 34, 4 };
    int[] B = { 0, 10, 8, 32, 2, 22, 27, 9, 21, 9, 37, 24, 4, 18, 33, 38, 27, 31, 1, 21, 0, 20, 16, 28, 14, 30, 21, 10, 11, 5, 9, 5, 17, 39, 45, 16, 40, 3, 34, 8, 34, 43, 27, 0, 41, 39, 27, 0 };
    int[] f = { 20, 13, 35, 10, 45, 0, 36, 11, 23, 26, 29, 16, 20, 25, 22, 22, 27, 1, 33, 9, 31, 9, 30, 33, 48, 13, 36, 6, 8, 9 };
    assertEquals(2.28553577709674e-09, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.28553577709674e-09);
  }

  @Test
  public void case13() {
    int[] A = { 1 };
    int[] B = { 0 };
    int[] f = { 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0 };
    assertEquals(1.0, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0);
  }

  @Test
  public void case14() {
    int[] A = { 22, 2, 38, 1, 29, 10, 39, 21, 3, 15, 14, 6, 9, 20, 31, 40, 33, 25, 43, 28, 13, 44, 12, 35, 47, 42, 32, 49, 5, 36, 34, 4, 23, 37, 24, 30, 41, 48, 18, 46, 45, 8, 27, 16, 7, 19, 26, 17, 11 };
    int[] B = { 12, 0, 34, 0, 11, 1, 35, 16, 0, 4, 1, 5, 5, 1, 13, 39, 15, 5, 30, 21, 8, 26, 11, 24, 39, 26, 16, 29, 0, 28, 23, 1, 20, 35, 13, 24, 39, 30, 5, 37, 39, 4, 20, 13, 2, 6, 23, 3, 9 };
    int[] f = { 14, 4, 32, 2, 14, 40, 26, 19, 9, 31, 32, 46, 5, 17, 9, 43, 27 };
    assertEquals(1.3181591397894855e-05, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.3181591397894855e-05);
  }

  @Test
  public void case15() {
    int[] A = { 20, 18, 3, 22, 10, 11, 21, 8, 16, 7, 4, 23, 9, 1, 17, 12, 26, 13, 2, 24, 5, 25, 19, 14, 15, 6 };
    int[] B = { 16, 13, 0, 16, 5, 2, 10, 4, 10, 1, 2, 13, 3, 0, 7, 3, 16, 7, 0, 16, 0, 14, 18, 4, 4, 0 };
    int[] f = { 16, 5, 4, 12, 9, 16 };
    assertEquals(0.01746381512092151, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.01746381512092151);
  }

  @Test
  public void case16() {
    int[] A = { 1 };
    int[] B = { 0 };
    int[] f = { 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1 };
    assertEquals(1.0, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0);
  }

  @Test
  public void case17() {
    int[] A = { 6, 5, 7, 8, 2, 1, 4, 3, 10, 9 };
    int[] B = { 0, 2, 2, 3, 1, 0, 0, 2, 9, 7 };
    int[] f = { 1, 1, 0, 10, 0, 6, 10, 6, 3, 2, 10, 1, 7, 1, 10, 1, 6, 9, 4, 9, 10, 0, 9, 4, 4, 0, 6, 10, 9, 9, 2, 2, 9, 5, 7, 7 };
    assertEquals(3.691531743774108e-11, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.691531743774108e-11);
  }

  @Test
  public void case18() {
    int[] A = { 15, 49, 11, 43, 30, 42, 8, 28, 13, 17, 5, 18, 20, 14, 24, 41, 37, 2, 4, 23, 46, 10, 19, 32, 34, 38, 21, 25, 48, 40, 3, 12, 31, 26, 16, 9, 27, 7, 39, 6, 45, 47, 35, 1, 22, 29, 33, 36, 44 };
    int[] B = { 3, 44, 6, 15, 11, 19, 1, 5, 10, 9, 2, 15, 6, 4, 19, 13, 30, 1, 2, 10, 25, 6, 1, 18, 16, 23, 2, 19, 35, 3, 0, 10, 26, 23, 2, 5, 22, 0, 19, 2, 19, 45, 12, 0, 10, 19, 10, 21, 38 };
    int[] f = { 5, 43, 43, 26, 17, 13, 12, 43, 8, 14, 3, 12, 1, 32, 32, 5, 34, 6, 5, 27, 47, 8, 45, 47, 4, 36 };
    assertEquals(8.011945607469446e-09, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 8.011945607469446e-09);
  }

  @Test
  public void case19() {
    int[] A = { 15, 19, 16, 18, 10, 9, 17, 20, 2, 12, 7, 8, 3, 11, 6, 5, 14, 1, 4, 13 };
    int[] B = { 14, 18, 15, 17, 9, 8, 16, 19, 1, 11, 6, 7, 2, 10, 5, 4, 13, 0, 3, 12 };
    int[] f = { 17, 9, 10, 10, 12, 14, 12, 14, 13, 6, 16, 1, 12, 15, 5, 8, 8 };
    assertEquals(5.845263478193482e-05, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 5.845263478193482e-05);
  }

  @Test
  public void case20() {
    int[] A = { 10, 19, 25, 22, 24, 7, 18, 11, 36, 13, 27, 14, 12, 32, 31, 6, 9, 28, 17, 5, 26, 29, 8, 1, 35, 3, 34, 21, 20, 33, 16, 4, 30, 15, 2, 23 };
    int[] B = { 4, 14, 21, 18, 17, 5, 10, 10, 28, 6, 21, 6, 7, 24, 23, 0, 3, 25, 15, 4, 25, 21, 2, 0, 30, 2, 33, 19, 14, 26, 11, 0, 22, 13, 1, 16 };
    int[] f = { 5, 29, 19, 36, 0, 25, 35, 15, 16, 16, 22, 17, 19, 1, 20, 32, 23, 33, 12, 12, 28, 17, 25, 36, 10, 4, 22, 9, 34, 6, 22, 30, 27, 20, 3, 36, 19, 10, 18, 3, 6, 8, 14, 16, 7, 20, 11 };
    assertEquals(2.4751152839289116e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.4751152839289116e-14);
  }

  @Test
  public void case21() {
    int[] A = { 16, 4, 12, 5, 6, 22, 2, 11, 15, 9, 21, 14, 17, 20, 7, 18, 3, 19, 8, 10, 1, 13 };
    int[] B = { 14, 3, 1, 2, 4, 15, 0, 4, 10, 2, 19, 4, 7, 9, 6, 8, 0, 5, 7, 0, 0, 10 };
    int[] f = { 21, 5, 17, 22, 15, 3, 12, 4, 19 };
    assertEquals(0.0028028759129539887, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.0028028759129539887);
  }

  @Test
  public void case22() {
    int[] A = { 10, 5, 11, 2, 8, 3, 6, 1, 9, 4, 7 };
    int[] B = { 8, 2, 7, 1, 7, 2, 3, 0, 8, 1, 5 };
    int[] f = { 10, 1, 10, 1, 5, 7, 11, 1, 11, 6, 9, 2, 5, 2, 7, 4, 11, 10, 9, 10, 10, 11, 11, 10, 7, 2, 6, 7, 10, 11 };
    assertEquals(4.4566837072294814e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.4566837072294814e-08);
  }

  @Test
  public void case23() {
    int[] A = { 24, 11, 19, 18, 8, 12, 20, 9, 5, 2, 14, 4, 26, 6, 13, 16, 22, 7, 3, 1, 21, 17, 15, 25, 10, 23 };
    int[] B = { 1, 9, 8, 11, 6, 11, 5, 6, 2, 1, 8, 0, 24, 2, 4, 10, 10, 1, 1, 0, 15, 6, 8, 8, 8, 22 };
    int[] f = { 22, 1, 7, 20, 24, 26, 8, 13, 8, 8, 24, 13, 13, 11, 5, 12, 2, 15, 5, 20, 20, 12, 4, 6, 18, 6, 26, 18, 2, 7, 8, 18, 13, 21, 16, 2, 7, 7, 15, 0 };
    assertEquals(6.306763048318147e-12, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 6.306763048318147e-12);
  }

  @Test
  public void case24() {
    int[] A = { 1, 16, 2, 10, 6, 28, 23, 4, 19, 15, 35, 20, 7, 29, 33, 40, 27, 12, 26, 8, 30, 32, 24, 3, 14, 18, 36, 22, 21, 17, 25, 34, 38, 9, 37, 5, 13, 39, 11, 31 };
    int[] B = { 0, 15, 0, 9, 5, 17, 13, 2, 11, 6, 31, 3, 2, 24, 16, 39, 19, 8, 9, 6, 17, 20, 18, 1, 0, 9, 22, 19, 16, 6, 18, 17, 37, 5, 21, 1, 4, 36, 1, 26 };
    int[] f = { 10, 12, 26, 18, 33, 4, 39, 16, 0, 35, 38, 23, 29, 17, 3, 32, 4, 16, 9, 4, 21 };
    assertEquals(3.8290099350681716e-07, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.8290099350681716e-07);
  }

  @Test
  public void case25() {
    int[] A = { 32, 22, 19, 4, 29, 28, 20, 15, 6, 10, 34, 2, 17, 33, 5, 14, 31, 18, 36, 8, 37, 26, 35, 9, 16, 13, 7, 3, 25, 30, 11, 23, 1, 12, 21, 24, 27 };
    int[] B = { 21, 1, 4, 0, 9, 20, 8, 9, 3, 6, 9, 1, 13, 6, 0, 0, 27, 14, 30, 6, 15, 19, 2, 1, 14, 3, 1, 1, 4, 7, 3, 4, 0, 0, 12, 21, 13 };
    int[] f = { 34, 3, 4, 13, 14, 12, 30, 15, 29, 30, 16, 0, 22, 19, 16, 6, 31, 9, 5, 23, 22, 9, 18, 6, 19, 21, 32, 14, 12, 18, 37, 15 };
    assertEquals(1.7338045083489127e-10, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.7338045083489127e-10);
  }

  @Test
  public void case26() {
    int[] A = { 9, 28, 39, 17, 14, 46, 12, 29, 38, 48, 1, 21, 40, 18, 36, 34, 10, 42, 35, 24, 30, 13, 11, 19, 20, 44, 47, 8, 43, 23, 6, 22, 27, 26, 16, 41, 32, 25, 33, 31, 37, 5, 7, 4, 3, 2, 45, 15 };
    int[] B = { 2, 26, 2, 8, 10, 38, 11, 24, 26, 11, 0, 14, 33, 5, 25, 12, 5, 6, 13, 20, 0, 10, 1, 11, 9, 42, 10, 7, 37, 12, 0, 15, 20, 8, 6, 21, 14, 19, 14, 30, 10, 4, 6, 0, 1, 1, 13, 12 };
    int[] f = { 17, 42, 35, 42, 44, 9, 30, 13, 24, 47, 39, 36, 35, 25, 14, 7, 14, 3 };
    assertEquals(1.2193880646223552e-06, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.2193880646223552e-06);
  }

  @Test
  public void case27() {
    int[] A = { 9, 13, 8, 18, 10, 6, 2, 16, 7, 12, 17, 4, 15, 3, 1, 24, 20, 5, 14, 11, 19, 21, 23, 22 };
    int[] B = { 5, 11, 6, 16, 2, 5, 1, 0, 2, 0, 11, 3, 3, 0, 0, 8, 8, 0, 8, 8, 12, 19, 11, 9 };
    int[] f = { 9, 3, 21, 11, 20, 18, 16, 3 };
    assertEquals(0.006898452742872681, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.006898452742872681);
  }

  @Test
  public void case28() {
    int[] A = { 1, 4, 6, 8, 2, 5, 9, 3, 7 };
    int[] B = { 0, 2, 5, 2, 1, 4, 7, 0, 1 };
    int[] f = { 0, 9, 4, 8, 4, 4, 1, 5, 4, 3, 7, 5, 7, 7, 9, 9, 9, 0, 3, 1, 9, 6, 7, 6, 0, 5, 0, 4, 3, 3, 2, 5, 7, 2, 5, 1, 0, 1, 7, 3, 8, 2, 7, 9, 2, 0, 2, 5, 5, 4 };
    assertEquals(1.72335959418213e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.72335959418213e-13);
  }

  @Test
  public void case29() {
    int[] A = { 9, 3, 22, 6, 5, 25, 7, 1, 21, 26, 24, 14, 12, 11, 16, 10, 2, 13, 17, 19, 8, 27, 28, 18, 23, 4, 20, 15 };
    int[] B = { 7, 0, 19, 4, 2, 22, 4, 0, 18, 22, 23, 13, 8, 9, 14, 7, 0, 11, 13, 15, 6, 26, 24, 17, 21, 3, 17, 14 };
    int[] f = { 24, 1, 18, 27, 28, 11, 20, 15, 26, 23, 10, 1, 4, 25 };
    assertEquals(0.00010822193657946031, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.00010822193657946031);
  }

  @Test
  public void case30() {
    int[] A = { 2, 3, 4, 5, 8, 9, 1, 7, 6 };
    int[] B = { 0, 0, 3, 3, 5, 6, 0, 6, 5 };
    int[] f = { 0, 9, 3, 9, 5, 0, 9, 6, 6, 0, 2, 1, 2, 3, 7, 0, 2, 6, 4, 3, 9, 8, 5, 8, 5, 3, 9, 1, 3, 0, 2, 9, 5, 1, 5, 1, 4, 6, 4, 4, 0, 5, 6, 7 };
    assertEquals(5.86171928291633e-12, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 5.86171928291633e-12);
  }

  @Test
  public void case31() {
    int[] A = { 14, 21, 24, 16, 25, 5, 3, 12, 13, 26, 23, 4, 11, 17, 10, 8, 18, 20, 7, 19, 6, 1, 22, 2, 9, 15 };
    int[] B = { 12, 15, 19, 10, 19, 4, 0, 10, 7, 22, 17, 1, 5, 14, 9, 6, 15, 15, 5, 14, 5, 0, 17, 1, 8, 14 };
    int[] f = { 9, 20, 0, 22, 1, 0, 5, 19, 22, 8, 11, 6, 24, 1, 1, 8, 2, 20, 9, 22, 20, 3, 13, 0 };
    assertEquals(7.571502144066066e-07, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 7.571502144066066e-07);
  }

  @Test
  public void case32() {
    int[] A = { 27, 12, 9, 31, 25, 19, 17, 36, 45, 32, 11, 29, 33, 15, 47, 2, 49, 18, 10, 35, 48, 38, 7, 4, 26, 6, 42, 24, 40, 23, 22, 50, 8, 5, 3, 1, 28, 14, 21, 39, 43, 34, 41, 37, 16, 30, 44, 20, 46, 13 };
    int[] B = { 9, 6, 7, 19, 23, 11, 6, 15, 0, 0, 7, 22, 17, 7, 11, 0, 31, 17, 4, 23, 3, 31, 4, 2, 20, 5, 20, 3, 33, 3, 4, 0, 6, 3, 2, 0, 19, 11, 6, 15, 21, 11, 14, 28, 11, 0, 20, 5, 40, 7 };
    int[] f = { 48 };
    assertEquals(4.659999999999993, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.659999999999993);
  }

  @Test
  public void case33() {
    int[] A = { 4, 38, 24, 11, 21, 23, 18, 12, 8, 41, 40, 39, 47, 35, 36, 30, 31, 45, 26, 5, 48, 19, 28, 27, 49, 17, 14, 10, 2, 16, 25, 34, 20, 42, 50, 15, 37, 22, 6, 44, 1, 43, 7, 3, 46, 29, 32, 33, 13, 9 };
    int[] B = { 0, 36, 23, 8, 18, 22, 14, 9, 3, 39, 38, 34, 46, 33, 33, 25, 26, 44, 22, 4, 46, 17, 23, 25, 47, 15, 9, 7, 0, 14, 23, 32, 17, 39, 48, 10, 35, 18, 2, 41, 0, 38, 6, 2, 44, 28, 27, 29, 10, 7 };
    int[] f = { 18, 9, 11, 0, 47, 24, 45, 43, 14, 3, 47, 13, 4, 28, 7, 22, 9, 7, 20, 9, 23, 23, 50, 43, 46, 42, 46, 7, 40, 19, 35, 27, 39, 49, 0, 28, 25, 22, 38 };
    assertEquals(4.959137653616618e-12, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.959137653616618e-12);
  }

  @Test
  public void case34() {
    int[] A = { 1, 4, 21, 9, 20, 3, 23, 6, 16, 19, 22, 13, 10, 14, 5, 8, 7, 18, 2, 11, 15, 24, 12, 17 };
    int[] B = { 0, 3, 17, 3, 18, 1, 12, 1, 11, 4, 16, 0, 0, 1, 2, 2, 4, 8, 1, 1, 8, 14, 5, 11 };
    int[] f = { 10, 19, 21, 13, 23, 1, 9, 13, 17, 18, 3, 7, 5, 22, 24, 20, 14, 3, 1, 16, 14, 1, 1, 7, 23, 1, 20, 19, 0, 4, 19, 6, 19, 1, 10, 24, 14, 11 };
    assertEquals(6.817617529349197e-17, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 6.817617529349197e-17);
  }

  @Test
  public void case35() {
    int[] A = { 13, 7, 19, 42, 30, 5, 32, 18, 20, 24, 34, 6, 29, 9, 38, 14, 31, 46, 45, 15, 25, 33, 17, 39, 1, 36, 8, 22, 4, 35, 43, 26, 3, 16, 10, 21, 27, 47, 44, 41, 40, 28, 12, 48, 11, 37, 2, 23 };
    int[] B = { 4, 4, 16, 41, 27, 1, 28, 8, 13, 0, 28, 3, 17, 7, 17, 0, 30, 39, 20, 7, 14, 13, 13, 37, 0, 7, 6, 5, 1, 9, 2, 0, 2, 1, 7, 17, 4, 44, 15, 12, 8, 21, 8, 32, 2, 2, 1, 14 };
    int[] f = { 0, 18, 42, 47, 2, 46, 32, 4, 36 };
    assertEquals(0.0029152504228781855, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.0029152504228781855);
  }

  @Test
  public void case36() {
    int[] A = { 13, 18, 17, 3, 9, 16, 12, 14, 10, 2, 15, 21, 20, 23, 6, 24, 11, 19, 1, 4, 8, 7, 5, 22 };
    int[] B = { 2, 15, 2, 0, 0, 13, 1, 0, 5, 1, 2, 4, 7, 11, 2, 9, 7, 14, 0, 3, 0, 5, 1, 16 };
    int[] f = { 12, 22, 22, 21, 2, 10, 3, 12, 10, 20, 4, 8, 10, 9, 0 };
    assertEquals(1.3637018619487686e-05, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.3637018619487686e-05);
  }

  @Test
  public void case37() {
    int[] A = { 13, 30, 16, 3, 36, 38, 33, 7, 18, 35, 14, 17, 21, 20, 31, 27, 10, 29, 15, 12, 2, 9, 32, 6, 23, 1, 5, 34, 4, 37, 19, 24, 26, 25, 22, 28, 8, 11, 39 };
    int[] B = { 10, 27, 12, 0, 33, 36, 30, 4, 14, 34, 12, 15, 17, 19, 30, 26, 9, 25, 13, 8, 0, 7, 31, 5, 22, 0, 2, 31, 2, 34, 16, 22, 24, 21, 18, 24, 6, 10, 37 };
    int[] f = { 13, 33 };
    assertEquals(3.715976331360947, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.715976331360947);
  }

  @Test
  public void case38() {
    int[] A = { 1, 22, 17, 13, 4, 26, 29, 33, 21, 30, 11, 15, 34, 6, 18, 12, 25, 10, 19, 24, 8, 28, 23, 16, 27, 3, 5, 20, 2, 14, 7, 32, 31, 9, 35 };
    int[] B = { 0, 10, 0, 1, 1, 15, 17, 13, 9, 29, 8, 5, 28, 2, 10, 8, 7, 8, 16, 3, 1, 12, 21, 5, 15, 2, 3, 19, 1, 7, 4, 12, 23, 3, 24 };
    int[] f = { 26, 34, 24, 3, 8, 26, 6, 22, 6, 31, 3, 19, 18, 26, 15, 31, 17, 28, 33, 0, 16, 20, 15, 35, 10 };
    assertEquals(1.7572591926361785e-07, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.7572591926361785e-07);
  }

  @Test
  public void case39() {
    int[] A = { 12, 9, 11, 14, 21, 15, 13, 3, 4, 7, 19, 1, 2, 5, 18, 10, 8, 23, 24, 16, 17, 22, 20, 6, 25, 26 };
    int[] B = { 8, 1, 8, 1, 19, 12, 8, 0, 3, 6, 18, 0, 0, 1, 17, 0, 7, 22, 13, 11, 12, 10, 6, 4, 13, 25 };
    int[] f = { 26, 4, 13, 10, 6, 3, 16, 7, 10, 1, 9, 5, 19, 9, 0, 3, 21, 4, 8, 7, 26, 23, 21, 10, 26, 10, 15, 6, 10, 6, 20, 22 };
    assertEquals(2.055197156778579e-09, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.055197156778579e-09);
  }

  @Test
  public void case40() {
    int[] A = { 1, 2, 3, 4 };
    int[] B = { 0, 1, 2, 2 };
    int[] f = { 1, 0, 2, 4, 2, 1, 3, 0, 2, 0, 1, 2, 1, 3, 3, 2, 3, 3, 3, 0, 4, 3, 2 };
    assertEquals(3.0554404020222137e-06, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.0554404020222137e-06);
  }

  @Test
  public void case41() {
    int[] A = { 20, 5, 40, 19, 2, 32, 28, 3, 15, 23, 34, 6, 35, 21, 14, 16, 36, 33, 31, 29, 22, 1, 4, 8, 13, 18, 38, 24, 9, 27, 39, 7, 30, 26, 41, 25, 42, 11, 12, 17, 10, 37 };
    int[] B = { 3, 1, 13, 17, 0, 7, 2, 2, 9, 5, 13, 3, 23, 16, 10, 7, 31, 18, 24, 17, 3, 0, 1, 1, 6, 12, 33, 2, 4, 19, 32, 2, 7, 19, 26, 24, 32, 3, 5, 2, 9, 13 };
    int[] f = { 32, 8, 5, 3, 18, 11, 4, 8, 28, 3, 26, 34, 16, 25, 13, 34, 7, 27, 25, 3, 23, 5, 28, 40, 34, 24, 37, 40, 27, 42, 8, 9, 7, 41, 7, 21, 22 };
    assertEquals(9.408746018324123e-15, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 9.408746018324123e-15);
  }

  @Test
  public void case42() {
    int[] A = { 39, 8, 3, 13, 21, 24, 2, 11, 33, 27, 28, 32, 35, 42, 30, 43, 38, 10, 16, 46, 40, 14, 15, 47, 25, 18, 12, 5, 29, 31, 19, 6, 1, 7, 34, 36, 44, 23, 17, 20, 22, 26, 37, 9, 4, 45, 41 };
    int[] B = { 38, 7, 2, 11, 20, 22, 0, 9, 31, 25, 27, 31, 34, 40, 28, 42, 36, 9, 15, 45, 38, 12, 13, 46, 23, 17, 10, 4, 28, 30, 18, 4, 0, 6, 32, 34, 43, 21, 15, 19, 20, 24, 36, 7, 2, 44, 40 };
    int[] f = { 29, 26, 7, 36, 1, 1, 34, 46, 43, 28, 3, 32, 18 };
    assertEquals(0.0011351363544716895, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.0011351363544716895);
  }

  @Test
  public void case43() {
    int[] A = { 30, 31, 26, 27, 22, 25, 9, 8, 29, 4, 20, 10, 2, 3, 21, 7, 14, 17, 12, 19, 23, 24, 18, 1, 15, 34, 35, 5, 6, 13, 32, 16, 11, 28, 33 };
    int[] B = { 27, 29, 24, 25, 19, 21, 6, 7, 24, 2, 15, 9, 0, 0, 16, 3, 9, 12, 10, 15, 19, 22, 17, 0, 11, 29, 33, 3, 4, 8, 29, 14, 6, 23, 29 };
    int[] f = { 12, 27, 26, 35, 2, 9, 7, 13, 19, 21, 23, 26, 5, 25, 0, 23, 19, 0, 2, 30 };
    assertEquals(8.020144794196773e-07, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 8.020144794196773e-07);
  }

  @Test
  public void case44() {
    int[] A = { 8, 17, 19, 9, 18, 4, 12, 5, 3, 6, 1, 14, 13, 15, 10, 20, 16, 2, 11, 7 };
    int[] B = { 7, 8, 16, 1, 4, 2, 11, 1, 1, 1, 0, 0, 9, 4, 1, 15, 11, 0, 5, 6 };
    int[] f = { 7, 12, 10, 18, 15, 5, 15, 1, 19, 7 };
    assertEquals(0.0002949615657226561, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.0002949615657226561);
  }

  @Test
  public void case45() {
    int[] A = { 13, 2, 6, 9, 3, 14, 8, 7, 5, 1, 12, 11, 4, 10 };
    int[] B = { 12, 1, 3, 5, 0, 12, 6, 4, 0, 0, 5, 1, 0, 5 };
    int[] f = { 3, 3, 10, 4, 10, 2, 5, 3, 7, 10, 11, 7, 9, 7, 8, 4, 12, 5, 2, 9, 3, 2, 3, 1, 1, 4, 7, 10, 12, 1, 11, 3, 3, 4, 7, 10, 13, 0, 1, 10, 1, 0, 2, 0, 12, 6, 7, 14, 8, 6 };
    assertEquals(1.747952477683801e-16, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.747952477683801e-16);
  }

  @Test
  public void case46() {
    int[] A = { 25, 10, 5, 23, 9, 15, 14, 6, 19, 7, 3, 12, 2, 11, 4, 24, 17, 16, 13, 20, 1, 22, 28, 18, 26, 27, 8, 21 };
    int[] B = { 17, 4, 0, 19, 3, 7, 7, 1, 10, 3, 0, 4, 1, 8, 0, 13, 16, 6, 8, 8, 0, 12, 25, 14, 17, 21, 3, 19 };
    int[] f = { 3, 19, 8, 20, 17, 19, 12, 17, 1, 3, 17, 6, 20, 25, 11, 1, 0, 26, 20, 0, 17, 16, 20, 17, 24, 0 };
    assertEquals(2.6638518469940106e-09, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.6638518469940106e-09);
  }

  @Test
  public void case47() {
    int[] A = { 15, 28, 14, 16, 12, 7, 1, 30, 37, 8, 38, 21, 4, 39, 34, 32, 26, 19, 13, 6, 36, 31, 17, 43, 29, 41, 24, 44, 2, 20, 45, 3, 11, 10, 22, 23, 25, 42, 5, 40, 35, 27, 33, 9, 18 };
    int[] B = { 6, 16, 6, 7, 3, 0, 0, 24, 33, 0, 37, 17, 0, 37, 33, 29, 15, 13, 8, 2, 26, 18, 12, 31, 18, 37, 10, 37, 1, 17, 38, 1, 5, 5, 21, 14, 12, 35, 4, 30, 29, 26, 21, 4, 6 };
    int[] f = { 42, 0, 41, 39, 5, 43, 3, 10, 27, 42, 21, 10, 15, 26 };
    assertEquals(3.646501644587077e-05, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.646501644587077e-05);
  }

  @Test
  public void case48() {
    int[] A = { 8, 12, 5, 3, 21, 14, 1, 2, 20, 7, 6, 9, 19, 23, 10, 18, 16, 13, 11, 4, 15, 26, 24, 17, 22, 25 };
    int[] B = { 4, 4, 1, 2, 5, 8, 0, 0, 17, 6, 0, 0, 14, 11, 8, 15, 6, 2, 3, 0, 8, 20, 16, 6, 9, 20 };
    int[] f = { 25, 9, 7, 22, 15, 25, 19, 5, 6, 5, 23, 14, 5, 7, 17, 25, 4, 17, 5, 0, 6, 0, 1, 13, 11, 7, 23, 4, 21, 17, 23, 14, 3, 13, 26, 8, 17, 24, 5, 25, 25, 19, 5, 4, 6 };
    assertEquals(2.2488422926460686e-17, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.2488422926460686e-17);
  }

  @Test
  public void case49() {
    int[] A = { 29, 7, 32, 18, 13, 5, 15, 20, 33, 9, 23, 25, 2, 4, 10, 17, 27, 16, 24, 22, 31, 34, 12, 1, 14, 21, 3, 26, 30, 35, 28, 36, 6, 8, 19, 11, 37 };
    int[] B = { 6, 2, 20, 12, 3, 3, 1, 18, 28, 6, 1, 21, 1, 3, 8, 10, 23, 5, 12, 5, 18, 33, 6, 0, 5, 0, 0, 25, 4, 29, 12, 13, 5, 7, 18, 4, 28 };
    int[] f = { 36, 36, 6, 30, 10, 5, 37, 8, 24, 4, 16, 30, 1, 5, 20, 34, 34, 17, 7, 27, 27, 13, 1, 4, 12, 31, 8, 27, 27, 3, 3, 2, 3, 14, 2, 33, 16, 25, 8, 37, 13, 13, 10 };
    assertEquals(3.5988992063879746e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.5988992063879746e-13);
  }

  @Test
  public void case50() {
    int[] A = { 16, 9, 6, 7, 11, 15, 1, 14, 4, 8, 2, 13, 12, 3, 10, 5, 17 };
    int[] B = { 4, 2, 3, 6, 5, 8, 0, 6, 3, 1, 1, 6, 5, 0, 8, 4, 10 };
    int[] f = { 5, 6, 16, 9, 16, 10 };
    assertEquals(0.041777198026860106, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.041777198026860106);
  }

  @Test
  public void case51() {
    int[] A = { 20, 16, 12, 10, 19, 1, 3, 11, 6, 15, 17, 7, 14, 5, 18, 8, 4, 2, 9, 13 };
    int[] B = { 17, 15, 11, 8, 18, 0, 2, 10, 2, 14, 14, 4, 13, 2, 17, 4, 2, 1, 8, 10 };
    int[] f = { 1 };
    assertEquals(4.649999999999999, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.649999999999999);
  }

  @Test
  public void case52() {
    int[] A = { 3, 1, 5, 2, 4 };
    int[] B = { 0, 0, 3, 1, 0 };
    int[] f = { 0, 4, 0, 2, 5, 0, 0, 0, 0, 4, 3, 3, 4, 4, 1, 5, 5, 4, 3, 0, 3, 4, 3, 1, 2, 3 };
    assertEquals(2.377901661893955e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.377901661893955e-08);
  }

  @Test
  public void case53() {
    int[] A = { 5, 3, 2, 4, 6, 1 };
    int[] B = { 3, 0, 0, 0, 0, 0 };
    int[] f = { 2, 3, 5, 5, 2, 1, 4, 4, 2, 1, 4, 4, 5, 1, 0, 1, 6, 4, 5, 1, 4, 5, 4, 0, 6, 4, 1, 2, 3, 2, 5, 4, 4, 2, 1, 1, 2 };
    assertEquals(3.3887050832459834e-15, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.3887050832459834e-15);
  }

  @Test
  public void case54() {
    int[] A = { 11, 31, 35, 6, 32, 42, 44, 14, 21, 1, 5, 27, 8, 19, 25, 36, 20, 46, 23, 29, 4, 13, 22, 15, 28, 12, 26, 17, 33, 2, 16, 34, 43, 10, 30, 7, 37, 40, 3, 9, 45, 24, 38, 39, 41, 18 };
    int[] B = { 9, 27, 30, 4, 30, 40, 41, 8, 18, 0, 2, 22, 5, 13, 19, 34, 18, 44, 18, 25, 1, 7, 17, 11, 26, 10, 24, 11, 29, 1, 12, 28, 40, 9, 23, 5, 34, 36, 1, 7, 44, 22, 35, 38, 37, 15 };
    int[] f = { 7, 43, 13, 25, 34, 45, 23, 9, 24, 6, 2, 4, 18, 25, 4, 34, 35, 35, 36, 26, 15, 21, 1, 42, 24, 34, 15, 30, 15, 20, 9, 23, 37, 0, 10, 44, 35, 20, 9, 42, 22, 25, 45, 36, 26, 45, 0, 19, 13 };
    assertEquals(1.8720900242651869e-16, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.8720900242651869e-16);
  }

  @Test
  public void case55() {
    int[] A = { 13, 10, 4, 12, 21, 1, 19, 17, 7, 20, 14, 3, 9, 11, 18, 16, 15, 8, 2, 6, 5 };
    int[] B = { 9, 2, 2, 11, 1, 0, 3, 15, 2, 8, 7, 0, 8, 2, 16, 9, 12, 3, 1, 3, 2 };
    int[] f = { 7, 17, 6, 4, 2 };
    assertEquals(0.10488060897612476, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.10488060897612476);
  }

  @Test
  public void case56() {
    int[] A = { 15, 22, 23, 13, 14, 11, 8, 18, 2, 12, 3, 1, 19, 7, 5, 21, 4, 10, 9, 17, 20, 16, 24, 6, 25 };
    int[] B = { 7, 2, 21, 4, 7, 8, 3, 10, 0, 3, 1, 0, 5, 1, 1, 7, 0, 1, 4, 13, 2, 15, 9, 2, 22 };
    int[] f = { 1, 12, 4, 19, 9, 15, 20, 4, 21, 21, 3, 1, 14, 21, 20, 19, 16, 20, 5, 11, 12, 18, 11, 10, 20, 18 };
    assertEquals(4.7061889047011014e-09, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.7061889047011014e-09);
  }

  @Test
  public void case57() {
    int[] A = { 18, 17, 1, 12, 6, 9, 19, 11, 3, 16, 15, 2, 7, 13, 8, 10, 14, 5, 4 };
    int[] B = { 15, 15, 0, 11, 3, 6, 17, 8, 2, 15, 13, 1, 4, 10, 6, 7, 13, 2, 3 };
    int[] f = { 11, 19, 12, 15, 17, 8, 9, 2, 8, 8, 19, 4, 12, 2, 6, 12, 8, 2, 1, 11, 10, 10, 8, 12, 14, 6, 7, 0, 9, 0, 8, 13, 18, 7, 0, 4, 18, 19, 14, 14, 5, 1, 1, 1, 11, 8, 14, 7 };
    assertEquals(4.9979908593710377e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.9979908593710377e-14);
  }

  @Test
  public void case58() {
    int[] A = { 8, 9, 1, 6, 11, 13, 10, 14, 7, 5, 4, 12, 2, 3 };
    int[] B = { 7, 6, 0, 4, 8, 9, 8, 9, 5, 2, 3, 9, 0, 2 };
    int[] f = { 13, 4, 6, 3, 12, 5, 11, 11, 13, 12, 3, 4, 9, 3, 5, 11, 2, 1, 6, 9, 1, 10, 9, 12, 13, 5, 14, 10 };
    assertEquals(5.1906014085905174e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 5.1906014085905174e-08);
  }

  @Test
  public void case59() {
    int[] A = { 16, 2, 14, 13, 9, 5, 15, 6, 10, 3, 11, 4, 7, 12, 8, 1 };
    int[] B = { 10, 0, 13, 11, 1, 2, 11, 3, 0, 0, 7, 0, 1, 5, 1, 0 };
    int[] f = { 1, 14, 16, 7, 1, 4, 16, 8, 9, 15, 12, 2, 15, 9, 9, 2, 11, 1, 4, 14, 10, 10, 8, 16, 5, 11, 7, 4, 9, 12, 0, 1, 2, 4, 12, 12, 15 };
    assertEquals(6.820112187390381e-11, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 6.820112187390381e-11);
  }

  @Test
  public void case60() {
    int[] A = { 27, 18, 12, 16, 1, 5, 31, 11, 28, 17, 30, 4, 7, 21, 20, 29, 13, 15, 2, 8, 19, 32, 3, 22, 25, 14, 23, 10, 24, 6, 9, 26 };
    int[] B = { 16, 7, 3, 0, 0, 4, 30, 4, 25, 13, 14, 0, 0, 17, 8, 28, 10, 9, 1, 5, 9, 27, 2, 8, 17, 4, 14, 9, 12, 3, 8, 23 };
    int[] f = { 20, 14, 15, 27, 0, 26, 28, 1, 1, 10, 9, 23, 14, 7, 13, 3, 11, 7, 16, 29, 20, 3, 12, 30, 20, 20, 30, 0, 22, 9, 27, 18, 6, 5, 7, 31, 4, 28, 1, 10, 24 };
    assertEquals(2.7043125041120565e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.7043125041120565e-13);
  }

  @Test
  public void case61() {
    int[] A = { 21, 12, 20, 23, 8, 3, 7, 14, 10, 15, 6, 13, 11, 2, 18, 9, 1, 24, 22, 16, 26, 5, 19, 4, 17, 25 };
    int[] B = { 20, 11, 19, 22, 7, 1, 5, 13, 9, 14, 4, 11, 10, 0, 16, 7, 0, 22, 20, 14, 24, 4, 18, 2, 16, 24 };
    int[] f = { 23, 18, 2, 24, 25, 25, 12, 10, 20, 10, 1, 21, 16, 11, 14, 4, 9, 17, 9, 8, 25, 25, 0, 1, 25, 3, 20, 14, 17, 24, 16, 16, 1, 4, 20, 19, 1, 23, 24, 2, 17, 17, 22, 20, 16, 11, 6, 9 };
    assertEquals(6.458421620403958e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 6.458421620403958e-14);
  }

  @Test
  public void case62() {
    int[] A = { 1, 6, 5, 4, 2, 3 };
    int[] B = { 0, 3, 2, 1, 1, 0 };
    int[] f = { 5, 4, 2, 5, 6, 1, 4, 5, 1, 1, 0, 5, 0, 5, 5, 0, 1, 0, 0, 2, 4, 4, 6, 1, 3, 0, 6, 3, 2, 6, 6, 6, 4, 0, 1, 5, 1, 3, 3, 5, 3 };
    assertEquals(8.066301961143619e-11, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 8.066301961143619e-11);
  }

  @Test
  public void case63() {
    int[] A = { 38, 25, 40, 15, 8, 14, 24, 6, 46, 33, 2, 7, 17, 36, 32, 35, 39, 37, 10, 11, 5, 41, 28, 13, 12, 26, 9, 43, 27, 1, 19, 42, 4, 23, 30, 34, 18, 29, 21, 20, 3, 16, 44, 22, 45, 31 };
    int[] B = { 34, 21, 25, 1, 4, 7, 14, 4, 36, 30, 0, 1, 2, 31, 27, 31, 38, 36, 2, 0, 4, 27, 21, 0, 7, 21, 4, 41, 23, 0, 10, 34, 2, 21, 18, 33, 17, 14, 18, 11, 2, 7, 37, 18, 33, 22 };
    int[] f = { 22, 31, 10, 43, 18, 9, 0, 24, 10, 32, 23, 26, 19, 8, 24, 35, 8, 7, 40, 2, 1, 46, 4, 45, 7, 24, 38, 30, 29, 11, 2, 40, 24, 18, 1, 34, 37, 43, 39, 25, 32, 35, 13, 23 };
    assertEquals(2.098669276971706e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.098669276971706e-13);
  }

  @Test
  public void case64() {
    int[] A = { 16, 14, 31, 40, 34, 3, 5, 26, 36, 12, 41, 24, 17, 10, 11, 7, 20, 39, 13, 33, 25, 9, 22, 38, 8, 23, 45, 32, 43, 15, 21, 46, 2, 37, 18, 47, 35, 6, 27, 29, 19, 1, 4, 42, 28, 44, 30 };
    int[] B = { 10, 8, 27, 36, 29, 0, 2, 23, 33, 8, 38, 21, 15, 7, 5, 2, 16, 38, 6, 30, 18, 4, 16, 37, 1, 17, 39, 25, 37, 11, 15, 44, 1, 34, 12, 42, 34, 5, 25, 25, 18, 0, 3, 38, 27, 38, 23 };
    int[] f = { 15, 42, 26, 25, 22, 28, 36, 37, 1, 27, 4, 46, 20, 18, 8, 32, 38, 45, 27, 47, 34, 2, 31, 44, 41, 11, 33, 16, 19, 38, 39, 34, 3, 8, 22, 37, 29, 47, 24, 30, 28, 33, 21, 33, 19, 22, 35, 37 };
    assertEquals(4.4448647903337225e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.4448647903337225e-14);
  }

  @Test
  public void case65() {
    int[] A = { 13, 9, 7, 14, 2, 10, 11, 5, 4, 3, 1, 8, 12, 6 };
    int[] B = { 9, 6, 6, 12, 0, 6, 10, 1, 0, 1, 0, 4, 10, 5 };
    int[] f = { 4, 2, 7, 1, 2, 4, 1, 10, 0, 8, 3, 10, 11, 8, 5, 3, 7, 4, 9, 10, 0, 9, 9, 12, 11, 2, 8, 14, 8, 8, 0, 6, 13, 10, 10, 7, 8, 14, 8, 7, 7, 13 };
    assertEquals(4.921088023355222e-12, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.921088023355222e-12);
  }

  @Test
  public void case66() {
    int[] A = { 5, 2, 10, 3, 4, 6, 1, 9, 8, 7 };
    int[] B = { 4, 1, 9, 2, 3, 5, 0, 8, 7, 6 };
    int[] f = { 0, 3, 2, 5, 9, 2, 5, 5, 5, 5, 2, 0, 2, 1, 4, 3, 8, 7 };
    assertEquals(4.1532430517149e-05, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.1532430517149e-05);
  }

  @Test
  public void case67() {
    int[] A = { 6, 3, 4, 5, 2, 1 };
    int[] B = { 0, 0, 0, 2, 1, 0 };
    int[] f = { 1, 6, 2, 0, 1, 6, 2, 2, 6, 0, 3 };
    assertEquals(0.0021464341761362037, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.0021464341761362037);
  }

  @Test
  public void case68() {
    int[] A = { 21, 5, 6, 22, 11, 9, 3, 10, 18, 2, 17, 20, 14, 12, 13, 1, 15, 7, 25, 24, 4, 16, 26, 19, 23, 8 };
    int[] B = { 19, 1, 1, 7, 7, 6, 0, 4, 11, 1, 5, 9, 7, 7, 10, 0, 1, 5, 21, 19, 2, 1, 24, 6, 22, 3 };
    int[] f = { 9, 13, 21, 0, 12, 15, 12, 3, 2, 0, 7, 23, 3, 8, 9, 2, 8, 26, 4, 26, 3, 12, 24, 12, 25, 17, 6, 5, 25, 25, 0, 26, 5, 2, 18, 0, 22, 8, 11, 18, 7, 17 };
    assertEquals(1.4657692814665503e-15, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.4657692814665503e-15);
  }

  @Test
  public void case69() {
    int[] A = { 1 };
    int[] B = { 0 };
    int[] f = { 1, 0, 1, 1, 1, 1, 1, 1 };
    assertEquals(1.0, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0);
  }

  @Test
  public void case70() {
    int[] A = { 33, 15, 20, 17, 13, 25, 23, 14, 4, 5, 31, 9, 6, 3, 29, 30, 34, 12, 35, 1, 10, 21, 16, 28, 7, 22, 27, 18, 2, 26, 24, 11, 8, 32, 19 };
    int[] B = { 9, 1, 7, 5, 0, 16, 12, 10, 2, 0, 21, 2, 5, 0, 20, 9, 20, 5, 11, 0, 4, 17, 12, 19, 5, 15, 8, 8, 0, 22, 21, 3, 1, 11, 15 };
    int[] f = { 0, 3, 13, 32, 0, 22, 18, 4, 2, 14, 16, 20, 15, 9, 6, 22, 8, 25, 24, 3 };
    assertEquals(1.0575067037314414e-07, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0575067037314414e-07);
  }

  @Test
  public void case71() {
    int[] A = { 3, 9, 6, 29, 32, 14, 24, 36, 18, 8, 27, 20, 19, 15, 5, 22, 2, 28, 13, 39, 11, 33, 16, 38, 26, 12, 7, 10, 30, 25, 17, 4, 37, 21, 34, 31, 35, 1, 23 };
    int[] B = { 1, 0, 0, 21, 31, 10, 17, 28, 14, 7, 21, 12, 17, 6, 4, 10, 1, 24, 2, 27, 8, 32, 9, 28, 21, 3, 5, 1, 26, 19, 8, 2, 26, 17, 31, 23, 27, 0, 21 };
    int[] f = { 15, 24, 7, 28, 34, 31, 6, 8, 4, 14, 16, 39, 13, 34, 7, 20, 38, 33, 18, 34, 30, 8, 11, 5, 30, 17, 12, 24, 17, 6, 27, 39, 16, 24, 36, 34, 24, 39, 31, 29, 23, 18, 33 };
    assertEquals(4.3110892338079375e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.3110892338079375e-13);
  }

  @Test
  public void case72() {
    int[] A = { 8, 2, 18, 3, 5, 11, 12, 22, 1, 16, 6, 24, 9, 10, 13, 19, 14, 20, 21, 7, 15, 4, 17, 23 };
    int[] B = { 7, 0, 16, 1, 3, 10, 10, 21, 0, 15, 4, 22, 7, 8, 12, 18, 12, 19, 20, 5, 13, 2, 16, 21 };
    int[] f = { 4, 15, 18, 7, 11, 4, 15, 16, 20, 23, 21, 19, 17, 4, 22, 24, 18, 9, 14, 16, 0, 4, 22, 13, 19, 9, 23, 12, 15 };
    assertEquals(2.6266371419971033e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.6266371419971033e-08);
  }

  @Test
  public void case73() {
    int[] A = { 12, 15, 39, 17, 33, 21, 26, 13, 8, 35, 29, 30, 16, 5, 9, 10, 18, 3, 37, 6, 27, 32, 31, 36, 24, 20, 4, 14, 25, 7, 23, 22, 2, 19, 28, 34, 1, 11, 38 };
    int[] B = { 6, 13, 16, 10, 7, 0, 25, 3, 1, 1, 9, 20, 3, 3, 1, 6, 10, 1, 29, 3, 9, 12, 22, 26, 9, 7, 1, 5, 14, 1, 17, 1, 0, 8, 16, 10, 0, 0, 19 };
    int[] f = { 8, 13, 5, 14, 20, 28, 7, 32, 2, 1, 9, 28 };
    assertEquals(0.00032590675403645057, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.00032590675403645057);
  }

  @Test
  public void case74() {
    int[] A = { 19, 38, 3, 34, 20, 37, 33, 6, 10, 9, 7, 40, 15, 25, 32, 14, 17, 26, 35, 23, 8, 30, 4, 1, 41, 18, 16, 39, 28, 21, 24, 31, 27, 2, 29, 12, 5, 13, 22, 11, 36 };
    int[] B = { 4, 27, 2, 31, 16, 25, 10, 0, 7, 1, 0, 27, 5, 15, 20, 10, 7, 24, 11, 4, 6, 0, 2, 0, 20, 15, 8, 4, 17, 2, 17, 29, 8, 0, 6, 8, 3, 11, 14, 10, 4 };
    int[] f = { 41, 35, 8, 41, 13, 23, 1 };
    assertEquals(0.006778119826046008, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.006778119826046008);
  }

  @Test
  public void case75() {
    int[] A = { 6, 26, 18, 33, 21, 12, 27, 20, 32, 22, 1, 34, 14, 3, 4, 23, 7, 30, 17, 8, 10, 24, 31, 15, 29, 5, 9, 13, 25, 28, 19, 2, 16, 11 };
    int[] B = { 3, 15, 14, 23, 0, 4, 15, 6, 29, 8, 0, 27, 7, 1, 0, 9, 5, 0, 8, 3, 5, 13, 13, 3, 0, 4, 2, 0, 10, 4, 12, 1, 13, 7 };
    int[] f = { 22, 27, 15, 3, 4, 15, 28, 10, 10, 22, 10, 19, 21, 5, 30, 17, 7, 27, 9, 18, 25, 18, 25, 15, 11, 33, 24, 8, 15, 28, 5, 29, 30, 29, 29, 18, 13, 13, 5, 26, 17 };
    assertEquals(2.0565850317932053e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.0565850317932053e-13);
  }

  @Test
  public void case76() {
    int[] A = { 24, 19, 47, 46, 28, 16, 1, 20, 33, 12, 17, 29, 30, 37, 2, 5, 13, 8, 43, 50, 44, 10, 26, 31, 42, 22, 45, 21, 32, 15, 3, 11, 7, 14, 25, 9, 34, 48, 49, 6, 36, 41, 35, 38, 18, 39, 4, 23, 27, 40 };
    int[] B = { 9, 15, 29, 25, 13, 1, 0, 14, 21, 11, 8, 15, 18, 30, 0, 0, 1, 1, 25, 45, 39, 3, 23, 29, 25, 19, 35, 19, 25, 4, 1, 8, 6, 3, 24, 3, 31, 36, 36, 0, 22, 21, 14, 18, 9, 20, 2, 7, 24, 36 };
    int[] f = { 15, 3, 11, 15, 21, 42, 19, 31, 4, 13, 18, 34, 10, 18, 30, 10, 43, 6, 0, 39, 0, 21, 5, 42, 39, 49, 23, 23, 8, 10, 4, 30, 15, 22, 14, 33, 12, 49, 15, 15, 17, 35, 43, 19, 11 };
    assertEquals(5.524469483322165e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 5.524469483322165e-14);
  }

  @Test
  public void case77() {
    int[] A = { 5, 34, 32, 26, 35, 41, 16, 30, 18, 2, 40, 39, 20, 33, 11, 3, 17, 27, 23, 24, 8, 36, 1, 19, 10, 6, 15, 12, 28, 21, 25, 14, 13, 38, 4, 9, 37, 22, 29, 31, 7 };
    int[] B = { 4, 24, 17, 21, 32, 39, 15, 18, 14, 0, 28, 20, 17, 23, 4, 2, 5, 10, 13, 15, 2, 21, 0, 7, 3, 2, 0, 8, 22, 11, 17, 12, 8, 15, 0, 6, 16, 0, 22, 29, 2 };
    int[] f = { 30, 39, 0, 7, 41, 41, 8, 2, 0, 18, 25, 18, 24, 36, 41, 30, 22, 20, 21, 26, 30, 4, 5, 40 };
    assertEquals(1.4824974916066899e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.4824974916066899e-08);
  }

  @Test
  public void case78() {
    int[] A = { 12, 16, 1, 18, 3, 17, 10, 8, 13, 14, 15, 9, 11, 5, 4, 7, 2, 6 };
    int[] B = { 8, 12, 0, 17, 0, 15, 2, 3, 8, 8, 14, 1, 9, 2, 0, 6, 1, 3 };
    int[] f = { 16, 4, 11, 12, 12, 7, 8, 17, 14, 17, 17, 9, 7, 6, 18, 0, 17, 7, 0, 2, 0, 13, 6, 10, 16, 5, 16, 17, 17, 18, 12, 0, 15, 11, 12, 15, 16, 10, 2, 3, 16, 11, 16, 4, 2, 0, 15 };
    assertEquals(6.472567905153445e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 6.472567905153445e-14);
  }

  @Test
  public void case79() {
    int[] A = { 8, 17, 21, 6, 13, 19, 22, 2, 14, 23, 1, 16, 4, 15, 9, 3, 10, 18, 20, 7, 12, 5, 11 };
    int[] B = { 4, 11, 19, 5, 10, 8, 7, 0, 2, 2, 0, 1, 0, 13, 7, 0, 2, 0, 5, 0, 2, 2, 5 };
    int[] f = { 23, 20, 22, 15, 12, 16, 7, 1, 7, 1, 1, 16, 3, 1, 12, 21, 15 };
    assertEquals(1.5729271558282136e-05, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.5729271558282136e-05);
  }

  @Test
  public void case80() {
    int[] A = { 11, 2, 9, 7, 3, 12, 1, 8, 10, 6, 4, 5 };
    int[] B = { 7, 1, 1, 2, 1, 5, 0, 3, 2, 5, 0, 4 };
    int[] f = { 6, 8, 7, 12, 9, 7, 2, 11, 2, 1, 7, 8, 5, 12, 1, 4 };
    assertEquals(1.303681617700829e-05, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.303681617700829e-05);
  }

  @Test
  public void case81() {
    int[] A = { 8, 5, 11, 6, 2, 7, 10, 9, 3, 1, 4 };
    int[] B = { 7, 3, 8, 3, 1, 3, 7, 3, 2, 0, 2 };
    int[] f = { 5, 8, 7, 2, 8, 9, 10, 6, 1, 2, 1, 11, 11, 10, 7, 5, 8, 4, 7, 0, 2, 1, 1, 9, 9, 4, 0, 10, 5, 3, 5, 10, 0, 6, 6, 6, 7, 5, 11, 11, 6 };
    assertEquals(3.580651142151723e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.580651142151723e-14);
  }

  @Test
  public void case82() {
    int[] A = { 2, 10, 29, 19, 43, 20, 18, 38, 45, 41, 8, 42, 31, 14, 34, 13, 26, 17, 27, 12, 15, 11, 1, 32, 21, 4, 40, 33, 24, 36, 7, 28, 9, 39, 23, 35, 6, 25, 44, 5, 37, 30, 3, 22, 16, 46 };
    int[] B = { 0, 7, 27, 13, 37, 19, 10, 33, 37, 32, 7, 35, 30, 3, 20, 8, 16, 13, 20, 11, 12, 8, 0, 30, 7, 2, 36, 20, 12, 33, 5, 26, 1, 31, 20, 26, 1, 14, 40, 0, 24, 22, 0, 20, 10, 32 };
    int[] f = { 3, 41 };
    assertEquals(1.8610586011342163, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.8610586011342163);
  }

  @Test
  public void case83() {
    int[] A = { 30, 18, 9, 5, 21, 37, 38, 3, 29, 23, 39, 4, 13, 28, 24, 14, 40, 1, 16, 12, 34, 31, 17, 2, 6, 35, 33, 10, 26, 22, 7, 36, 8, 19, 20, 27, 15, 25, 32, 11 };
    int[] B = { 20, 2, 8, 1, 15, 36, 33, 1, 13, 3, 12, 3, 12, 10, 8, 10, 37, 0, 7, 5, 14, 30, 13, 1, 0, 8, 31, 9, 19, 19, 1, 26, 2, 13, 18, 12, 0, 22, 5, 0 };
    int[] f = { 23, 27, 7, 31, 6, 28, 18, 33, 36, 10, 8, 2, 22, 37, 25, 2, 36, 11, 8 };
    assertEquals(1.4119082824937988e-06, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.4119082824937988e-06);
  }

  @Test
  public void case84() {
    int[] A = { 5, 6, 2, 4, 3, 10, 9, 1, 8, 7 };
    int[] B = { 4, 5, 1, 0, 2, 8, 1, 0, 1, 5 };
    int[] f = { 6, 0, 10, 10, 7, 4, 0, 7, 3, 8, 6, 1, 10, 5, 6, 3, 8, 6, 1, 2, 7, 1, 5, 2, 7, 3, 5, 6, 3, 8, 3, 9 };
    assertEquals(3.855949335822336e-09, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.855949335822336e-09);
  }

  @Test
  public void case85() {
    int[] A = { 7, 12, 4, 6, 8, 13, 1, 5, 3, 2, 10, 11, 14, 9 };
    int[] B = { 5, 10, 2, 4, 7, 12, 0, 3, 2, 0, 9, 10, 12, 7 };
    int[] f = { 0, 4, 4, 8, 4, 11, 7, 11, 11, 6, 5, 14, 5 };
    assertEquals(0.0005929611829176606, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.0005929611829176606);
  }

  @Test
  public void case86() {
    int[] A = { 4, 6, 3, 5, 1, 2 };
    int[] B = { 2, 4, 2, 4, 0, 1 };
    int[] f = { 4, 5, 4, 2, 1, 6, 1, 6, 3, 4, 2, 2, 0, 2, 6, 1, 3, 4, 0, 3, 0, 0, 2, 0, 4, 4, 4, 5, 2, 0 };
    assertEquals(2.9419721851594665e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.9419721851594665e-08);
  }

  @Test
  public void case87() {
    int[] A = { 27, 26, 20, 38, 33, 34, 18, 17, 23, 24, 25, 37, 14, 21, 9, 4, 42, 22, 3, 15, 10, 16, 6, 32, 36, 43, 44, 1, 29, 30, 41, 28, 19, 35, 40, 31, 11, 5, 2, 7, 8, 12, 39, 13 };
    int[] B = { 7, 22, 12, 10, 21, 33, 14, 15, 20, 20, 19, 35, 9, 16, 4, 1, 18, 4, 0, 13, 5, 4, 2, 31, 31, 23, 17, 0, 24, 3, 37, 12, 3, 32, 35, 21, 0, 0, 0, 1, 1, 7, 14, 7 };
    int[] f = { 7, 30, 8, 3, 5, 11, 22, 18, 34, 38, 3, 17, 20, 10, 39, 16, 34, 9, 21, 31, 27, 4, 31, 36, 36, 37, 22, 36, 28, 37, 14, 4, 3, 29, 13, 24, 20, 39 };
    assertEquals(7.342293806073255e-12, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 7.342293806073255e-12);
  }

  @Test
  public void case88() {
    int[] A = { 3, 8, 10, 11, 2, 5, 13, 7, 12, 4, 9, 1, 6 };
    int[] B = { 0, 6, 3, 5, 0, 1, 5, 2, 4, 0, 8, 0, 4 };
    int[] f = { 11, 2, 1, 13, 0, 13, 12, 8, 12, 8, 8, 5, 8, 6, 13, 6, 7, 9, 5, 13, 8, 7, 2, 5, 3, 3, 9, 4, 0, 8, 10, 1, 12, 6, 12, 4, 7, 8, 1, 12, 5, 7, 4, 11, 6, 1, 11 };
    assertEquals(7.194893775293798e-15, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 7.194893775293798e-15);
  }

  @Test
  public void case89() {
    int[] A = { 9, 18, 8, 24, 7, 10, 5, 19, 12, 23, 20, 6, 11, 13, 3, 4, 25, 22, 14, 26, 2, 17, 1, 16, 15, 21 };
    int[] B = { 2, 16, 5, 9, 5, 9, 4, 15, 7, 15, 11, 0, 8, 11, 2, 1, 13, 15, 6, 13, 0, 8, 0, 10, 1, 9 };
    int[] f = { 18, 8, 8, 8, 1, 3, 21, 11, 17, 25, 21, 16, 12, 6, 9, 8, 7, 12, 5, 13, 21, 0, 3, 19, 13, 15, 8, 3, 5, 18, 11, 4, 8, 26, 21, 12, 14, 1, 10, 15, 24, 21, 14, 9 };
    assertEquals(1.239102413291813e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.239102413291813e-13);
  }

  @Test
  public void case90() {
    int[] A = { 11, 33, 4, 39, 18, 30, 3, 14, 1, 37, 7, 25, 13, 38, 16, 12, 27, 9, 32, 23, 5, 40, 24, 8, 31, 36, 19, 35, 21, 15, 10, 2, 26, 20, 17, 22, 34, 41, 6, 29, 28 };
    int[] B = { 0, 6, 3, 31, 10, 5, 0, 10, 0, 20, 3, 23, 2, 6, 12, 10, 21, 7, 4, 0, 3, 21, 9, 1, 6, 17, 17, 6, 18, 11, 5, 0, 8, 16, 8, 17, 18, 10, 1, 26, 21 };
    int[] f = { 25, 9, 23 };
    assertEquals(0.3248792095297513, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.3248792095297513);
  }

  @Test
  public void case91() {
    int[] A = { 22, 39, 5, 18, 7, 36, 21, 26, 6, 29, 3, 35, 12, 8, 23, 34, 4, 37, 19, 1, 2, 24, 13, 31, 10, 15, 11, 32, 25, 16, 38, 9, 20, 28, 14, 30, 17, 27, 33 };
    int[] B = { 19, 5, 4, 5, 0, 26, 11, 14, 3, 24, 0, 31, 9, 7, 12, 3, 1, 20, 1, 0, 0, 16, 2, 21, 0, 4, 7, 26, 3, 15, 12, 5, 8, 7, 0, 29, 15, 15, 17 };
    int[] f = { 8, 25, 35, 17, 32, 1, 10, 23, 9, 22, 8, 4, 33, 11, 6, 8, 38, 1, 7, 1, 33, 32, 8, 17, 15, 26, 36, 0, 4, 5, 14, 29, 35, 15, 29, 27, 19, 17, 22, 19, 39, 5 };
    assertEquals(1.0151405920534663e-12, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0151405920534663e-12);
  }

  @Test
  public void case92() {
    int[] A = { 5, 2, 29, 27, 16, 17, 6, 31, 13, 22, 42, 25, 1, 26, 24, 41, 19, 15, 10, 30, 7, 35, 28, 20, 14, 33, 12, 11, 3, 37, 18, 38, 23, 44, 39, 8, 21, 40, 4, 36, 34, 9, 32, 43 };
    int[] B = { 3, 0, 21, 21, 13, 13, 2, 19, 1, 5, 20, 12, 0, 12, 5, 30, 4, 0, 8, 17, 0, 22, 21, 16, 1, 24, 11, 6, 1, 26, 7, 25, 21, 21, 37, 0, 10, 36, 3, 18, 24, 6, 30, 41 };
    int[] f = { 37, 14, 43, 22, 24, 41, 19 };
    assertEquals(0.014409995864860638, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.014409995864860638);
  }

  @Test
  public void case93() {
    int[] A = { 8, 13, 7, 14, 4, 11, 2, 12, 9, 3, 5, 6, 10, 1, 15 };
    int[] B = { 6, 11, 3, 1, 1, 9, 0, 8, 5, 0, 4, 0, 8, 0, 10 };
    int[] f = { 10, 10, 0, 13, 10, 0 };
    assertEquals(0.043942803840877905, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.043942803840877905);
  }

  @Test
  public void case94() {
    int[] A = { 38, 9, 26, 24, 23, 11, 25, 42, 18, 16, 45, 30, 19, 15, 36, 4, 3, 8, 39, 1, 12, 31, 37, 40, 21, 7, 32, 35, 20, 2, 28, 29, 22, 13, 17, 44, 6, 10, 33, 27, 5, 34, 14, 43, 41 };
    int[] B = { 10, 8, 2, 19, 1, 2, 21, 34, 0, 15, 27, 24, 11, 7, 9, 1, 1, 7, 16, 0, 9, 15, 22, 15, 5, 4, 17, 25, 14, 0, 22, 3, 18, 11, 3, 38, 4, 2, 18, 22, 0, 28, 0, 22, 18 };
    int[] f = { 14, 13, 42, 35, 38, 4, 45, 22, 37, 42, 30, 33, 31, 6, 35, 12, 45, 25, 14, 22 };
    assertEquals(7.074660071612273e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 7.074660071612273e-08);
  }

  @Test
  public void case95() {
    int[] A = { 2, 1 };
    int[] B = { 1, 0 };
    int[] f = { 0, 0, 1, 2, 1, 2, 0, 1, 1, 2, 2, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 2 };
    assertEquals(0.00018310546875, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.00018310546875);
  }

  @Test
  public void case96() {
    int[] A = { 44, 37, 17, 19, 28, 5, 42, 15, 9, 34, 3, 10, 13, 16, 25, 7, 22, 24, 21, 4, 38, 45, 29, 35, 2, 33, 14, 23, 11, 20, 30, 32, 8, 6, 39, 26, 36, 31, 41, 27, 18, 12, 40, 1, 43 };
    int[] B = { 36, 19, 4, 18, 5, 3, 29, 8, 3, 20, 0, 8, 4, 10, 0, 6, 11, 0, 14, 0, 3, 40, 8, 23, 0, 8, 7, 8, 2, 16, 16, 16, 4, 1, 26, 1, 18, 7, 4, 5, 10, 0, 4, 0, 15 };
    int[] f = { 28, 35, 7, 0, 16, 27, 3, 21, 11, 0, 40, 23, 30, 11, 29, 0, 25, 26, 8, 42, 7, 15, 29, 25, 38, 23 };
    assertEquals(4.005176635559283e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.005176635559283e-08);
  }

  @Test
  public void case97() {
    int[] A = { 5, 12, 2, 10, 3, 6, 11, 16, 14, 1, 7, 13, 8, 9, 15, 4 };
    int[] B = { 2, 3, 1, 7, 1, 4, 5, 0, 12, 0, 5, 9, 6, 8, 3, 1 };
    int[] f = { 9, 16, 6, 8, 14, 1, 6, 7, 1, 5, 11, 3, 12, 14, 5, 4, 8, 12, 0, 9, 16, 0, 9, 14, 13, 15, 11, 0, 1, 1, 13, 6, 11, 15, 4, 0 };
    assertEquals(2.3986065073467732e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.3986065073467732e-14);
  }

  @Test
  public void case98() {
    int[] A = { 7, 12, 18, 4, 9, 15, 13, 14, 21, 10, 3, 19, 6, 17, 1, 16, 8, 2, 11, 5, 20 };
    int[] B = { 3, 11, 13, 1, 2, 5, 12, 10, 18, 8, 0, 12, 2, 9, 0, 15, 7, 0, 9, 3, 17 };
    int[] f = { 13, 1, 11, 11, 10, 15, 10, 20, 7, 20, 11, 15, 18, 11, 8, 2, 20, 4, 7, 16, 13, 20, 6, 8, 18, 1, 15 };
    assertEquals(3.7040455889161086e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.7040455889161086e-08);
  }

  @Test
  public void case99() {
    int[] A = { 3, 1, 2 };
    int[] B = { 1, 0, 1 };
    int[] f = { 3, 1, 2, 2, 1, 2, 0, 3, 1, 1, 2, 2, 2, 2, 0, 1, 0, 3, 1, 1, 1, 1, 2, 2, 3, 2, 3, 3, 0, 1, 0, 0, 3, 1 };
    assertEquals(3.715555848458425e-12, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.715555848458425e-12);
  }

  @Test
  public void case100() {
    int[] A = { 5, 1, 2, 4, 6, 3, 7 };
    int[] B = { 0, 0, 0, 3, 3, 1, 1 };
    int[] f = { 6, 5, 5, 1, 0, 4, 7, 6, 0, 4, 2 };
    assertEquals(0.001843479340429878, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.001843479340429878);
  }

  @Test
  public void case101() {
    int[] A = { 14, 12, 6, 9, 22, 17, 20, 5, 1, 21, 8, 4, 23, 15, 10, 11, 19, 16, 7, 13, 3, 18, 2 };
    int[] B = { 10, 6, 2, 7, 10, 15, 11, 2, 0, 19, 3, 1, 19, 4, 7, 9, 15, 13, 6, 4, 2, 9, 0 };
    int[] f = { 7, 1, 7, 19, 9, 16, 23, 7, 17, 18, 6, 16, 1, 5, 14, 15, 2, 10, 18, 18, 4, 20, 21, 4, 3 };
    assertEquals(9.649129185216587e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 9.649129185216587e-08);
  }

  @Test
  public void case102() {
    int[] A = { 6, 4, 7, 32, 42, 40, 13, 18, 37, 30, 3, 1, 21, 22, 35, 10, 34, 11, 19, 36, 17, 15, 25, 33, 27, 41, 5, 9, 39, 28, 12, 29, 14, 20, 16, 8, 23, 26, 31, 43, 2, 24, 38 };
    int[] B = { 5, 1, 3, 28, 37, 39, 4, 11, 27, 27, 0, 0, 20, 18, 33, 3, 27, 10, 9, 32, 11, 14, 19, 28, 23, 40, 0, 6, 37, 20, 6, 22, 10, 18, 15, 6, 21, 16, 29, 38, 1, 17, 31 };
    int[] f = { 35, 23, 38, 13, 41, 35 };
    assertEquals(0.05995685868097022, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.05995685868097022);
  }

  @Test
  public void case103() {
    int[] A = { 7, 9, 10, 8, 1, 2, 11, 3, 5, 4, 6 };
    int[] B = { 6, 8, 8, 7, 0, 1, 9, 1, 4, 2, 4 };
    int[] f = { 0, 4, 2, 5, 7, 0, 11, 4, 6, 5, 2, 6, 7, 9, 8, 10, 8, 8, 1, 0, 6, 8, 9, 8, 8, 2, 10, 4, 3 };
    assertEquals(3.2965729045831624e-08, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.2965729045831624e-08);
  }

  @Test
  public void case104() {
    int[] A = { 22, 20, 30, 35, 39, 3, 6, 33, 31, 15, 19, 14, 13, 1, 4, 18, 23, 26, 34, 37, 17, 32, 10, 36, 27, 12, 28, 16, 7, 9, 24, 25, 5, 2, 40, 8, 21, 11, 38, 29 };
    int[] B = { 21, 3, 8, 27, 20, 1, 3, 19, 27, 8, 6, 2, 9, 0, 1, 2, 8, 15, 22, 22, 4, 14, 1, 19, 25, 9, 20, 2, 1, 5, 2, 2, 1, 1, 32, 7, 4, 2, 27, 22 };
    int[] f = { 24, 14, 24, 4, 24, 21, 21, 26, 4, 31, 34, 18, 8, 18, 3, 36, 17, 31, 39, 25, 36, 2, 11, 12, 27, 12, 14, 0, 5, 10, 19, 26, 11, 39, 16 };
    assertEquals(8.206119192094605e-13, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 8.206119192094605e-13);
  }

  @Test
  public void case105() {
    int[] A = { 12, 9, 14, 7, 13, 4, 8, 11, 2, 5, 6, 1, 3, 10 };
    int[] B = { 11, 1, 8, 0, 11, 3, 7, 9, 0, 3, 4, 0, 2, 8 };
    int[] f = { 14, 11, 9, 14, 3, 8, 13, 5, 14, 6, 8, 14, 7, 11, 13, 3, 1, 6, 7, 8, 7, 4, 7, 4, 13 };
    assertEquals(3.438371444794867e-09, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.438371444794867e-09);
  }

  @Test
  public void case106() {
    int[] A = { 6, 4, 18, 15, 19, 2, 13, 8, 17, 11, 12, 14, 10, 9, 5, 7, 3, 16, 1 };
    int[] B = { 0, 3, 6, 5, 2, 1, 0, 1, 16, 7, 3, 9, 3, 6, 4, 0, 1, 4, 0 };
    int[] f = { 11, 9, 6, 2, 18, 9, 1, 7, 15, 18, 6, 17, 4, 8, 5, 2, 2, 17, 7 };
    assertEquals(3.356420067413333e-06, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.356420067413333e-06);
  }

  @Test
  public void case107() {
    int[] A = { 25, 17, 33, 10, 14, 35, 4, 11, 21, 39, 22, 36, 27, 20, 26, 2, 32, 18, 28, 7, 30, 19, 29, 24, 37, 13, 5, 1, 8, 38, 6, 9, 3, 34, 12, 31, 15, 23, 16 };
    int[] B = { 21, 11, 29, 3, 13, 15, 0, 7, 15, 21, 4, 32, 14, 2, 14, 1, 13, 7, 18, 2, 18, 0, 14, 0, 19, 7, 4, 0, 3, 21, 3, 1, 0, 29, 0, 19, 5, 2, 5 };
    int[] f = { 4, 35, 2, 14, 22, 10, 36, 2, 11, 26, 29, 6, 38, 38, 4, 0, 32, 9, 7, 28, 11, 22, 30, 5, 12, 39, 8, 14, 13, 11, 4, 11, 19, 3, 3, 3, 6, 24, 20, 7, 19, 7, 9, 26, 38, 31, 15, 8 };
    assertEquals(1.6264774626832814e-14, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.6264774626832814e-14);
  }

  @Test
  public void case108() {
    int[] A = { 1 };
    int[] B = { 0 };
    int[] f = { 1, 1, 1, 0, 0, 0, 0 };
    assertEquals(1.0, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0);
  }

  @Test
  public void case109() {
    int[] A = { 26, 2, 5, 21, 13, 40, 37, 32, 35, 25, 43, 30, 15, 8, 1, 31, 45, 39, 16, 3, 14, 23, 18, 38, 22, 12, 7, 33, 11, 36, 29, 4, 24, 42, 17, 28, 6, 46, 41, 10, 19, 34, 27, 9, 20, 44 };
    int[] B = { 25, 1, 4, 20, 12, 39, 36, 31, 34, 24, 42, 29, 14, 7, 0, 30, 44, 38, 15, 2, 13, 22, 17, 37, 21, 11, 6, 32, 10, 35, 28, 3, 23, 41, 16, 27, 5, 45, 40, 9, 18, 33, 26, 8, 19, 43 };
    int[] f = { 16, 37, 17, 18 };
    assertEquals(1.0250881304026214, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0250881304026214);
  }

  @Test
  public void case110() {
    int[] A = { 9, 18, 4, 10, 17, 6, 3, 11, 19, 8, 15, 12, 1, 13, 20, 14, 7, 16, 5, 2 };
    int[] B = { 6, 15, 3, 9, 15, 3, 1, 10, 17, 6, 14, 9, 0, 12, 19, 12, 6, 15, 2, 1 };
    int[] f = { 13, 19 };
    assertEquals(1.4849999999999999, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.4849999999999999);
  }

  @Test
  public void case111() {
    int[] A = { 21, 14, 5, 25, 1, 3, 32, 27, 7, 16, 38, 4, 36, 44, 2, 37, 31, 15, 34, 10, 6, 20, 39, 12, 8, 26, 42, 40, 17, 43, 24, 13, 30, 33, 29, 23, 19, 35, 11, 9, 41, 22, 28, 18 };
    int[] B = { 20, 13, 4, 24, 0, 2, 31, 26, 6, 15, 37, 3, 35, 43, 1, 36, 30, 14, 33, 9, 5, 19, 38, 11, 7, 25, 41, 39, 16, 42, 23, 12, 29, 32, 28, 22, 18, 34, 10, 8, 40, 21, 27, 17 };
    int[] f = { 26, 28, 37, 9 };
    assertEquals(1.0400696780445324, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0400696780445324);
  }

  @Test
  public void case112() {
    int[] A = { 1, 2, 5, 4, 3 };
    int[] B = { 0, 1, 4, 3, 2 };
    int[] f = { 5, 1, 5, 4, 4 };
    assertEquals(0.2704000000000001, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.2704000000000001);
  }

  @Test
  public void case113() {
    int[] A = { 13, 2, 14, 17, 15, 7, 18, 16, 12, 1, 8, 9, 5, 11, 4, 6, 3, 10 };
    int[] B = { 12, 1, 13, 15, 13, 6, 17, 14, 10, 0, 6, 7, 4, 9, 2, 4, 1, 9 };
    int[] f = { 11, 17, 4, 15 };
    assertEquals(0.3756191891479957, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.3756191891479957);
  }

  @Test
  public void case114() {
    int[] A = { 3, 26, 17, 13, 10, 6, 19, 11, 5, 20, 28, 27, 9, 1, 31, 2, 22, 18, 29, 14, 39, 12, 40, 16, 4, 38, 37, 34, 33, 30, 35, 36, 8, 21, 23, 41, 15, 24, 32, 25, 7 };
    int[] B = { 2, 25, 16, 12, 9, 5, 18, 10, 4, 19, 27, 26, 8, 0, 30, 1, 21, 17, 28, 13, 38, 11, 39, 15, 3, 37, 36, 33, 32, 29, 34, 35, 7, 20, 22, 40, 14, 23, 31, 24, 6 };
    int[] f = { 36, 4, 30, 37 };
    assertEquals(1.5204728920811068, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.5204728920811068);
  }

  @Test
  public void case115() {
    int[] A = { 7, 2, 4, 9, 8, 1, 5, 3, 11, 10, 6 };
    int[] B = { 6, 1, 3, 8, 7, 0, 4, 0, 9, 7, 5 };
    int[] f = { 6 };
    assertEquals(2.999999999999999, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.999999999999999);
  }

  @Test
  public void case116() {
    int[] A = { 12, 10, 4, 7, 11, 1, 6, 5, 9, 2, 3, 8, 13, 14 };
    int[] B = { 11, 9, 3, 6, 10, 0, 5, 4, 8, 1, 2, 7, 12, 13 };
    int[] f = { 2, 9 };
    assertEquals(2.0918367346938775, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.0918367346938775);
  }

  @Test
  public void case117() {
    int[] A = { 11, 15, 7, 10, 1, 9, 8, 13, 2, 6, 5, 4, 3, 12, 14 };
    int[] B = { 10, 14, 6, 8, 0, 8, 7, 12, 0, 5, 3, 2, 1, 11, 13 };
    int[] f = { 8 };
    assertEquals(3.866666666666667, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.866666666666667);
  }

  @Test
  public void case118() {
    int[] A = { 16, 4, 19, 11, 12, 25, 17, 18, 2, 5, 1, 24, 7, 9, 22, 13, 14, 10, 3, 8, 27, 23, 20, 21, 15, 6, 26 };
    int[] B = { 15, 2, 17, 10, 10, 23, 15, 17, 0, 3, 0, 22, 6, 7, 20, 12, 12, 9, 2, 6, 26, 21, 19, 20, 13, 4, 25 };
    int[] f = { 25, 23, 15, 14 };
    assertEquals(0.44902444485841325, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.44902444485841325);
  }

  @Test
  public void case119() {
    int[] A = { 8, 11, 31, 42, 28, 13, 37, 15, 40, 24, 38, 23, 29, 43, 3, 22, 30, 34, 12, 5, 20, 9, 25, 39, 16, 32, 18, 36, 2, 26, 7, 33, 21, 19, 41, 35, 1, 10, 6, 14, 17, 4, 27 };
    int[] B = { 6, 9, 29, 41, 27, 10, 34, 12, 37, 23, 37, 22, 27, 40, 1, 21, 27, 32, 9, 3, 17, 7, 24, 37, 14, 30, 17, 35, 0, 24, 5, 31, 19, 17, 39, 33, 0, 7, 5, 13, 15, 1, 24 };
    int[] f = { 33, 36, 10 };
    assertEquals(1.4519350497440473, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.4519350497440473);
  }

  @Test
  public void case120() {
    int[] A = { 5, 16, 24, 13, 26, 23, 32, 8, 42, 28, 12, 37, 10, 33, 40, 17, 39, 6, 19, 15, 7, 25, 1, 18, 22, 20, 34, 3, 41, 36, 21, 29, 11, 14, 31, 38, 4, 9, 27, 30, 35, 2 };
    int[] B = { 3, 15, 21, 11, 24, 20, 29, 6, 39, 27, 10, 35, 8, 30, 37, 15, 36, 3, 16, 13, 6, 22, 0, 17, 19, 19, 32, 2, 39, 34, 18, 28, 9, 11, 30, 37, 3, 7, 25, 29, 32, 1 };
    int[] f = { 25, 22, 2, 11, 32 };
    assertEquals(0.21921683315373447, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.21921683315373447);
  }

  @Test
  public void case121() {
    int[] A = { 19, 16, 6, 8, 13, 20, 7, 22, 3, 24, 28, 25, 9, 30, 11, 21, 23, 10, 14, 17, 18, 26, 12, 1, 29, 2, 5, 27, 15, 4 };
    int[] B = { 17, 13, 4, 6, 12, 19, 6, 21, 2, 23, 25, 22, 6, 29, 8, 19, 20, 9, 11, 14, 15, 25, 10, 0, 27, 0, 4, 24, 13, 3 };
    int[] f = { 10, 15 };
    assertEquals(3.0000000000000004, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.0000000000000004);
  }

  @Test
  public void case122() {
    int[] A = { 32, 13, 33, 36, 7, 34, 38, 26, 6, 20, 10, 44, 24, 29, 35, 2, 31, 46, 39, 28, 19, 3, 37, 18, 5, 30, 17, 40, 15, 16, 11, 21, 12, 22, 14, 27, 23, 8, 4, 45, 43, 42, 41, 9, 1, 25 };
    int[] B = { 30, 12, 32, 35, 6, 32, 36, 24, 5, 19, 8, 42, 23, 28, 33, 0, 30, 44, 38, 27, 17, 1, 36, 16, 4, 28, 16, 38, 14, 15, 10, 20, 10, 20, 13, 26, 22, 6, 2, 44, 41, 40, 39, 8, 0, 23 };
    int[] f = { 3 };
    assertEquals(17.913043478260864, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 17.913043478260864);
  }

  @Test
  public void case123() {
    int[] A = { 23, 18, 37, 38, 29, 44, 22, 24, 7, 31, 9, 40, 32, 36, 11, 25, 13, 1, 12, 27, 30, 17, 16, 2, 8, 20, 15, 10, 39, 26, 41, 19, 28, 43, 5, 4, 33, 3, 14, 21, 6, 42, 34, 35 };
    int[] B = { 22, 17, 36, 37, 28, 43, 21, 23, 6, 30, 8, 39, 31, 35, 10, 24, 12, 0, 11, 26, 29, 16, 15, 1, 7, 19, 14, 9, 38, 25, 40, 18, 27, 42, 4, 3, 32, 2, 13, 20, 5, 41, 33, 34 };
    int[] f = { 29, 34 };
    assertEquals(5.686983471074379, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 5.686983471074379);
  }

  @Test
  public void case124() {
    int[] A = { 12, 34, 20, 26, 32, 10, 22, 11, 41, 37, 3, 36, 19, 17, 33, 7, 15, 38, 4, 14, 9, 16, 23, 27, 2, 31, 21, 24, 6, 25, 28, 13, 40, 1, 35, 29, 18, 8, 5, 42, 30, 39 };
    int[] B = { 10, 33, 19, 24, 31, 8, 21, 10, 40, 35, 2, 34, 18, 15, 31, 5, 14, 36, 3, 13, 8, 15, 21, 26, 0, 30, 20, 23, 5, 23, 27, 11, 39, 0, 34, 27, 16, 6, 4, 41, 28, 37 };
    int[] f = { 18, 38, 11 };
    assertEquals(1.6442203865673255, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.6442203865673255);
  }

  @Test
  public void case125() {
    int[] A = { 13, 2, 14, 7, 1, 11, 17, 12, 8, 10, 9, 16, 4, 3, 6, 5, 15 };
    int[] B = { 12, 1, 13, 6, 0, 10, 16, 11, 7, 9, 8, 15, 3, 2, 5, 4, 14 };
    int[] f = { 10, 11, 2 };
    assertEquals(0.9796458375737839, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.9796458375737839);
  }

  @Test
  public void case126() {
    int[] A = { 6, 1, 9, 15, 11, 14, 13, 3, 8, 10, 7, 12, 5, 4, 2 };
    int[] B = { 5, 0, 7, 12, 8, 13, 12, 1, 7, 8, 6, 11, 4, 2, 1 };
    int[] f = { 7, 10 };
    assertEquals(1.1688888888888889, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.1688888888888889);
  }

  @Test
  public void case127() {
    int[] A = { 4, 5, 9, 3, 6, 13, 10, 17, 2, 16, 7, 15, 12, 14, 8, 1, 11 };
    int[] B = { 3, 3, 8, 2, 4, 12, 8, 16, 1, 14, 5, 14, 11, 12, 7, 0, 9 };
    int[] f = { 5, 4 };
    assertEquals(1.7750865051903117, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.7750865051903117);
  }

  @Test
  public void case128() {
    int[] A = { 4, 12, 29, 5, 7, 27, 32, 25, 6, 3, 15, 31, 20, 10, 11, 24, 8, 14, 17, 1, 23, 9, 22, 19, 13, 16, 28, 30, 26, 18, 21, 2 };
    int[] B = { 3, 11, 28, 4, 6, 26, 31, 24, 5, 2, 14, 30, 19, 9, 10, 23, 7, 13, 16, 0, 22, 8, 21, 18, 12, 15, 27, 29, 25, 17, 20, 1 };
    int[] f = { 28, 17 };
    assertEquals(4.1357421875, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 4.1357421875);
  }

  @Test
  public void case129() {
    int[] A = { 14, 3, 13, 7, 16, 21, 17, 10, 18, 9, 2, 12, 8, 1, 15, 22, 23, 5, 6, 11, 19, 20, 4 };
    int[] B = { 13, 2, 12, 6, 15, 20, 16, 9, 17, 8, 1, 11, 7, 0, 14, 21, 22, 4, 5, 10, 18, 19, 3 };
    int[] f = { 4, 1, 8, 13 };
    assertEquals(0.7097315975857719, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.7097315975857719);
  }

  @Test
  public void case130() {
    int[] A = { 8, 7, 1, 4, 14, 12, 5, 17, 11, 3, 2, 16, 6, 13, 15, 9, 10 };
    int[] B = { 7, 6, 0, 3, 13, 11, 4, 16, 10, 2, 1, 15, 5, 12, 14, 8, 9 };
    int[] f = { 7, 11 };
    assertEquals(1.8996539792387548, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.8996539792387548);
  }

  @Test
  public void case131() {
    int[] A = { 17, 25, 15, 8, 4, 30, 2, 27, 11, 5, 24, 10, 7, 18, 9, 28, 20, 26, 19, 3, 31, 1, 32, 23, 22, 6, 21, 16, 29, 13, 14, 12 };
    int[] B = { 16, 24, 14, 7, 3, 29, 1, 26, 10, 4, 23, 9, 6, 17, 8, 27, 19, 25, 18, 2, 30, 0, 31, 22, 21, 5, 20, 15, 28, 12, 13, 11 };
    int[] f = { 18, 7, 28, 11 };
    assertEquals(0.7786064147949219, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.7786064147949219);
  }

  @Test
  public void case132() {
    int[] A = { 1, 21, 6, 43, 11, 29, 37, 35, 39, 2, 31, 34, 13, 3, 15, 14, 17, 32, 20, 5, 4, 8, 10, 30, 26, 23, 19, 46, 44, 27, 40, 18, 36, 38, 12, 28, 25, 24, 9, 22, 16, 41, 33, 42, 45, 7 };
    int[] B = { 0, 20, 5, 42, 10, 28, 36, 34, 38, 1, 30, 33, 12, 2, 14, 13, 16, 31, 19, 4, 3, 7, 9, 29, 25, 22, 18, 45, 43, 26, 39, 17, 35, 37, 11, 27, 24, 23, 8, 21, 15, 40, 32, 41, 44, 6 };
    int[] f = { 14, 46, 11 };
    assertEquals(2.8818320046026127, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.8818320046026127);
  }

  @Test
  public void case133() {
    int[] A = { 1 };
    int[] B = { 0 };
    int[] f = { 0, 1, 0, 0, 1 };
    assertEquals(1.0, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.0);
  }

  @Test
  public void case134() {
    int[] A = { 1, 2, 3, 4, 5, 6 };
    int[] B = { 0, 0, 1, 3, 4, 5 };
    int[] f = { 6 };
    assertEquals(3.5, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 3.5);
  }

  @Test
  public void case135() {
    int[] A = { 2, 15, 12, 11, 1, 7, 14, 22, 30, 3, 34, 4, 16, 36, 24, 17, 39, 31, 35, 8, 28, 32, 9, 13, 26, 37, 27, 6, 38, 40, 18, 33, 5, 29, 20, 19, 25, 10, 21, 23 };
    int[] B = { 0, 13, 10, 8, 0, 5, 12, 20, 28, 2, 31, 2, 15, 34, 23, 16, 37, 30, 33, 6, 26, 29, 6, 10, 24, 35, 26, 4, 35, 37, 16, 30, 4, 27, 17, 17, 23, 7, 19, 21 };
    int[] f = { 37, 21 };
    assertEquals(2.9143749999999997, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.9143749999999997);
  }

  @Test
  public void case136() {
    int[] A = { 29, 21, 28, 4, 25, 33, 40, 22, 35, 12, 24, 42, 36, 6, 14, 8, 5, 16, 38, 37, 2, 3, 17, 10, 15, 39, 26, 32, 7, 18, 1, 11, 19, 20, 41, 27, 9, 31, 13, 34, 30, 23 };
    int[] B = { 27, 20, 26, 3, 24, 31, 38, 21, 33, 10, 22, 40, 35, 5, 13, 7, 4, 14, 37, 35, 0, 2, 16, 8, 13, 38, 25, 31, 6, 16, 0, 9, 18, 19, 40, 26, 7, 30, 12, 32, 28, 21 };
    int[] f = { 36, 32, 14 };
    assertEquals(1.8607331821617537, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.8607331821617537);
  }

  @Test
  public void case137() {
    int[] A = { 2, 1, 3 };
    int[] B = { 1, 0, 2 };
    int[] f = { 2, 2, 3, 2, 0 };
    assertEquals(0.15637860082304525, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 0.15637860082304525);
  }

  @Test
  public void case138() {
    int[] A = { 5, 17, 19, 2, 6, 14, 3, 11, 23, 15, 1, 12, 8, 18, 16, 21, 4, 13, 24, 10, 7, 9, 22, 20 };
    int[] B = { 3, 15, 17, 1, 4, 13, 2, 10, 21, 14, 0, 11, 7, 17, 14, 19, 3, 12, 23, 8, 5, 7, 20, 18 };
    int[] f = { 23, 2 };
    assertEquals(2.991319444444445, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 2.991319444444445);
  }

  @Test
  public void case139() {
    int[] A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int[] f = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    assertEquals(1.4914341925000003, foxandtouristfamilies.expectedLength(A, B, f), DELTA * 1.4914341925000003);
  }

}
