package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class PiecewiseLinearFunctionDiv2Test {
  PiecewiseLinearFunctionDiv2 piecewiselinearfunctiondiv2 = new PiecewiseLinearFunctionDiv2();

  @Test
  public void case1() {
    int[] Y = { 1, 4, -1, 2 };
    int[] query = { -2, -1, 0, 1 };
    assertArrayEquals(new int[] { 0, 1, 2, 3 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case2() {
    int[] Y = { 0, 0 };
    int[] query = { -1, 0, 1 };
    assertArrayEquals(new int[] { 0, -1, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case3() {
    int[] Y = { 2, 4, 8, 0, 3, -6, 10 };
    int[] query = { 0, 1, 2, 3, 4, 0, 65536 };
    assertArrayEquals(new int[] { 3, 4, 5, 4, 3, 3, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case4() {
    int[] Y = { 5, 4, -5, -5, 4 };
    int[] query = { 3, 4, 5, -6, -5, -4, 6 };
    assertArrayEquals(new int[] { 2, 2, 1, 0, -1, 2, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case5() {
    int[] Y = { -999999999, 1000000000, -1000000000, 1000000000, -999999999 };
    int[] query = { -999999999, -1000000000, 1000000000, 999999999, 0 };
    assertArrayEquals(new int[] { 4, 1, 2, 4, 4 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case6() {
    int[] Y = { 938739625, 62388846, -492102735, -216944424, 32206644, -7366707 };
    int[] query = { -216944424, 875478797, -7366707, 32073495, 232392727, -235139861, -750940785, -492102735, -525449097, 32206644, -719350039, 62388846, 422868623, -795108099, 621630529, 938739625, -136437462, 30534084, 446394612, 938739625, 27294824, 73092004, -766705350, 53353774, -7366707, -7366707, 938739625, -614926525, -7366707, -713014072, -216944424, -7366707, 32206644, 32206644, -403037462, -216944424, -7366707, -488414239, -492102735, -7366707, 568872752, 440547564, -492102735, 553452830, -293123606, -374728372, 62388846, 481720375, 694567428, -828136415 };
    assertArrayEquals(new int[] { 2, 1, 3, 3, 1, 2, 0, 1, 0, 2, 0, 1, 1, 0, 1, 1, 2, 3, 1, 1, 3, 1, 0, 1, 3, 3, 1, 0, 3, 0, 2, 3, 2, 2, 2, 2, 3, 2, 1, 3, 1, 1, 1, 1, 2, 2, 1, 1, 1, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case7() {
    int[] Y = { -885353308, 3615735, 609846988, 596927313 };
    int[] query = { -785989699, -317860100, 609846988, -244571324, 974319250, -885353308, -893863912, 596927313, 541248514, -878385611, -885353308, 3615735, -234815081, 228018030, 229895569, -885353308, -619516345, 596927313, -678364322, 439429032, -602180511, -520966157, 609846988, -885353308, 3615735, -885353308, 596927313, 596927313, -427842649, 3615735, 3615735, 234584602, -885353308, 609846988, -606841145, 444162083, -606806953, -323073047, 596927313, 609846988, 399949290, 871701607, 8546207, -979591408, 596927313, 596927313, 596927313, 611278909, -147548802, 84363701 };
    assertArrayEquals(new int[] { 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case8() {
    int[] Y = { 229891162, 159022385, -957914765, -822390193 };
    int[] query = { 591686415, 197485000, 229891162, -822390193, -506839984, -748616661, -76360001, -296009725, -665638659, -100337966, 159022385, 229891162, 569887420, 229891162, 785371207, -719708586, -822390193, -822390193, -238115080, 835219387, -552927901, -312887311, 531367622, -703119693, 583151169, 762458440, -279856301, -483891308, -542314607, 40541099, 159022385, 765839879, 691991586, 159022385, -882149830, 535240289, -526982241, -689520626, -424727289, 242905212, -854034102, 238876023, 229891162, 251936398, 657622635, 243949961, 249935463, 69711936, 159022385, 753851030 };
    assertArrayEquals(new int[] { 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 2, 2, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 2, 0, 1, 1, 1, 0, 2, 0, 1, 0, 0, 0, 0, 1, 1, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case9() {
    int[] Y = { -649830083, -138333254, 115161279, -511760558, -830427338 };
    int[] query = { -649830083, -649830083, 115161279, 627501796, -91206785, 794292427, 261238628, -193971221, 570396054, -955677962, 764273851, 631480510, -101018302, -511760558, -68118826, -405878665, -364316551, -830427338, 115161279, -511760558, 915999760, 942758096, -138333254, 327143996, 338155313, 134535353, 685754485, -975074218, 115161279, 586714374, -511760558, -953939773, -509813990, -138333254, -790903864, -511760558, -830427338, -286810036, 836539808, -138333254, -649830083, 567680301, -438801487, -165789668, -63028697, 96857602, -301104479, -649830083, 966562620, 606073253 };
    assertArrayEquals(new int[] { 2, 2, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 2, 0, 2, 2, 1, 2, 1, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case10() {
    int[] Y = { 274210360, 57328433, 571638666, 767166916, -526283929 };
    int[] query = { 57328433, -526283929, -526283929, 241934601, 57328433, -864580648, 295740476, -505362367, 57328433, -885570456, 638973945, 201070980, -60686603, -687686968, -947237187, 86440745, 387504031, -151698605, -614932036, -20916724, 746254420, -202047540, 767166916, 627483438, -963441110, -526283929, 637630100, 619954402, 571638666, -823341896, 571638666, 767166916, 957804316, 26086799, -940260578, -526283929, 968072614, -289991550, 774094273, -526283929, 295689631, 579110124, 445445445, 753895006, 196033651, -526283929, -568981367, -111089695, 571638666, 960551828 };
    assertArrayEquals(new int[] { 2, 1, 1, 3, 2, 0, 2, 1, 2, 0, 2, 3, 1, 0, 0, 3, 2, 1, 0, 1, 2, 1, 1, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 2, 2, 3, 1, 0, 1, 2, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case11() {
    int[] Y = { 709086973, 120701695, -559617847, -134880755, 177006607, -867961511, 431426049, 702954439, -608728772, -655421160, -859388162, -452649272, -698023927, -762690800, -123132787 };
    int[] query = { -762690800, -452649272, -964926481, 787302255, 120701695, -110426896, -978953408, -655421160, 682079132, -867961511, -123440601, -952374503, -322193381, 17305855, -946860106, 702954439, 959798657, 198588916, 257866759, -859388162, 509596453, 937636593, -867961511, 957558677, 431426049, -269295159, 848622713, 796561404, -134880755, -659091642, 177342530, -655421160, -211760954, -577021494, 290138356, -867961511, -920789785, 508494623, 702954439, 431426049, 709086973, -15598323, -750819356, -608728772, -598423141, -608728772, 153888359, -452649272, -263950044, -681395976 };
    assertArrayEquals(new int[] { 5, 7, 0, 0, 5, 5, 0, 6, 3, 1, 6, 0, 6, 5, 0, 2, 0, 3, 3, 3, 3, 0, 1, 0, 3, 6, 0, 0, 6, 6, 3, 6, 6, 6, 3, 1, 0, 3, 2, 3, 1, 5, 6, 6, 6, 6, 5, 7, 6, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case12() {
    int[] Y = { 667056978, 369170028, -549103718, -926074100, 768431181, -49066055, 96530550, -658707759, 370788555, 689426698, -193671039, 904161358, -463187661, -81075225, 139148340, -657289555 };
    int[] query = { 96530550, 398597787, 196041976, -903104963, -193671039, -657289555, -549103718, -102565294, -75702179, 688025866, -235492189, -63359172, -657289555, 309951074, 80678476, -658707759, -461589434, 517923126, 552468068, 904161358, -229254282, -657289555, -881826921, -899649628, 675419310, 361799670, -463187661, 960347163, 139148340, -656746254, -716752014, -549103718, 768431181, -363566013, -680146153, 842690538, -980162742, -169575431, -548958848, -411257948, 139148340, 380156381, 694956323, 808603694, 2974862, 667056978, -375737857, -21373440, 304912070, 563945521 };
    assertArrayEquals(new int[] { 10, 7, 7, 2, 8, 5, 5, 9, 9, 6, 7, 9, 5, 7, 11, 3, 7, 7, 7, 1, 7, 5, 2, 2, 6, 7, 6, 0, 8, 5, 2, 5, 3, 7, 2, 2, 0, 9, 5, 7, 8, 7, 4, 2, 11, 7, 7, 11, 7, 7 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case13() {
    int[] Y = { 619115079, -174128725, -989322738, 318966236, -524486256, 699272673, 434078560, -36225862, 335108541, 761005752, 85590076, 514478642, -543307947, -316988710 };
    int[] query = { 334135513, -217869973, 212468697, 215883718, -494591793, 619115079, -616132491, 614635286, 800220160, 439694265, 986012749, -853260697, 562030648, 97852224, -328090381, 813907621, -56934313, -989322738, 318966236, 434078560, 619115079, -85086476, 514478642, 428509468, -989322738, 318966236, 514478642, 125343976, -989322738, -119602484, 42691632, 81536793, -989322738, -194177540, -316988710, 186878342, 85590076, -986142812, 434078560, 619115079, 327149602, -36225862, -543307947, 335108541, -655641129, -457943355, 607786555, 85590076, -790552497, -174128725 };
    assertArrayEquals(new int[] { 7, 5, 9, 9, 6, 5, 2, 5, 0, 7, 0, 2, 5, 9, 6, 0, 5, 1, 8, 7, 5, 5, 6, 7, 1, 8, 6, 9, 1, 5, 7, 7, 1, 5, 6, 9, 8, 2, 7, 5, 7, 6, 3, 7, 2, 6, 5, 8, 2, 5 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case14() {
    int[] Y = { 854603823, -292720586, 362208889, 776019907, 255574088, 165819204, 498641231, -491421369, -155209499, -1240177, -334116243, 462425233, -917980825, -491549329 };
    int[] query = { 709343663, -113327283, 274118454, 462425233, -949232391, -982929533, 610103766, -1240177, 462425233, -192682320, 506954794, -1240177, 789821061, -676480610, 105384552, -205359034, 165819204, -943491534, 361077974, 255574088, -885688119, 166705490, 695099819, -185119853, -269958457, 268162928, 165819204, -1240177, -491421369, 322106473, -848740762, -394915399, 234086778, 462425233, -143602145, -469986896, 378114222, 58448429, -917980825, 776019907, 318198951, 880245500, 69279060, -591159144, -111282408, 462425233, -917980825, 522054429, -74039316, -892139253 };
    assertArrayEquals(new int[] { 3, 7, 7, 6, 0, 0, 3, 6, 6, 7, 3, 6, 1, 2, 5, 7, 6, 0, 7, 7, 2, 7, 3, 7, 7, 7, 6, 6, 2, 7, 2, 3, 7, 6, 7, 3, 7, 5, 1, 2, 7, 0, 5, 2, 7, 6, 1, 3, 7, 2 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case15() {
    int[] Y = { -362241370, 354365747, -460697905, -522683887, 347190691, -682299514, 168007525, 639118147, -463318093, 185840360, -632001762, 278595182, 266930854, -131620809, -833696812 };
    int[] query = { 19799131, 639118147, 347190691, -648379070, -131620809, 185840360, 67194165, -109190133, -461096805, 645774913, -463318093, 354365747, -887272528, 639118147, 702722877, -194790665, -855571547, 278595182, -915979234, 790278958, -130935267, -970762093, 354365747, -682299514, 304714910, 185840360, 278595182, -991246892, -501411432, 833903488, 212761532, 278595182, 33024934, 637911884, -925881937, 315882028, -513308530, -857444144, 347190691, 630715415, 46295635, -692435590, 300744945, 653186256, 964121472, 115908089, -522683887, 680706749, -943296030, 312494052 };
    assertArrayEquals(new int[] { 10, 1, 5, 3, 10, 9, 10, 10, 9, 0, 8, 3, 0, 1, 0, 10, 0, 7, 0, 0, 10, 0, 3, 2, 6, 9, 7, 0, 7, 0, 8, 7, 10, 2, 0, 6, 7, 0, 5, 2, 10, 1, 6, 0, 0, 10, 6, 0, 0, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case16() {
    int[] Y = { -121127638, 303752998, -995676160, 507599191, 939953677, -5974292, 131264706, 98687741, 254718716, 843371075, 343886502, -175081687, -803956030, 680464797, 331011774, 469739812, -383182270, 326732225, -560414819, -338322037, -832626351, -67325008, 360219215, 228103695, 463299126 };
    int[] query = { -129824395, -427083122, -28753697, 670692497, 668200024, 642273755, -895835373, -71180074, -197482431, -37266658, 939953677, -826142263, 98457096, -67325008, 887615971, -35120686, -334095652, 98687741, 992780446, -750807770, -5974292, -47117506, -690654284, -538218284, 664214924, -383182270, 833236902, 404172972, 607753296, 939953677, 651331421, 343886502, -615134058, 174896592, -67325008, -383182270, -350883422, -493102790, -754483970, -175081687, 131264706, 294371602, 792642181, -43856493, 491697341, 288429341, -401619412, -357900401, 543137675, -247052238 };
    assertArrayEquals(new int[] { 8, 8, 9, 6, 6, 6, 2, 9, 8, 9, 1, 4, 11, 9, 2, 9, 8, 12, 0, 6, 10, 9, 6, 8, 6, 9, 4, 9, 6, 1, 6, 11, 6, 11, 9, 9, 10, 8, 6, 8, 12, 13, 4, 9, 6, 13, 8, 10, 6, 8 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case17() {
    int[] Y = { -245475417, 596120654, 206178711, -469417108, 714311235, 808579940, 45399858, 917057486, 273329633, 1985580, -389351029, 677884166, 524513514, -282833518, -745555505, -237400658, 625280888, -80249342, 711799602, -769352162, -380386732, -783656747, -410407977, -202756640 };
    int[] query = { -370257428, 190983032, 536771216, -431605666, -328873486, 810671144, -545016248, -829567499, 346912850, -80249342, -620002398, -769352162, 917057486, -769352162, -783656747, 625280888, 808579940, 718532129, 666111055, 84433264, 585623142, 700426931, -986524074, 633905680, 999038868, -398073670, -745555505, 903785112, 6104456, 134951756, -80249342, -263865934, -106057256, 886323606, 496409477, 766250065, -564418892, 1985580, -730633249, 115142014, -815002846, -798251981, -676936861, -551660544, -781424112, -849711146, -202756640, 714311235, -80249342, -237400658 };
    assertArrayEquals(new int[] { 8, 12, 12, 8, 8, 2, 6, 0, 12, 9, 6, 3, 1, 3, 1, 9, 3, 4, 8, 12, 12, 6, 0, 8, 0, 8, 5, 2, 10, 12, 9, 8, 8, 2, 12, 4, 6, 10, 6, 12, 0, 0, 6, 6, 2, 0, 9, 4, 9, 9 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case18() {
    int[] Y = { -467336678, 879859917, 932059179, 884790814, -808082270, 476336148, 279808360, -848464608, -792623972, -940932103, 450439425, 916589189, 975606222, 982385562, -789463893, -461935391, 113779493, -574321302, -504209167, 654243315, 464099869, 574017518, 142791486, 770364797, -739273036, -158041059 };
    int[] query = { 321247168, -79616874, -673499996, 240659530, 100792991, 770364797, 389846482, 450471939, 450439425, -510972489, 210529669, -15501951, 195194171, 986781635, -845517057, 487044179, 434753648, 975606222, -489558716, 34053578, -739273036, -467336678, 574017518, -158041059, -778749423, 593526739, 437323568, -436023569, 363745952, 786442371, 980000382, -81971901, 654243315, 654243315, -77282970, -239852190, -519480121, 574017518, 722703288, -619859626, -228737195, 450439425, 456077407, 165932313, 563912528, 982768930, 899131496, -651782077, -463452503, -481143683 };
    assertArrayEquals(new int[] { 10, 10, 8, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 0, 4, 10, 10, 2, 10, 10, 7, 11, 9, 11, 6, 8, 10, 11, 10, 4, 2, 10, 7, 7, 10, 11, 10, 9, 6, 8, 11, 10, 10, 10, 10, 0, 4, 8, 11, 10 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case19() {
    int[] Y = { 930051545, 674410887, 161242924, 761139749, -613645544, 931901569, 859497349, 8279506, 821384692, 563699953, -884961412, 919734989, -312413618, -243235275, -951984231, -456193229, -506434303, -431072024, 574418312, 230138797, -566763998, -24133218, 959805753, -305914474 };
    int[] query = { 51270253, -951984231, -227548629, 574418312, 161242924, -453397256, 919734989, -151067349, 574418312, -853813765, -431072024, -952540620, -450522803, -80105181, -305914474, 889710373, -622144464, 821384692, -448681930, -521537096, -932420065, 246073840, 620713605, 859497349, -577990984, -294842821, 492241673, 8279506, -765525032, 574418312, 775740141, 931901569, -566763998, 401214161, -213262991, -161558020, -757530517, 327906310, -61945987, 930051545, -243235275, 63065185, -804991508, -125080713, -621604507, 947399869, 161242924, -924369202, 959805753, 931901569 };
    assertArrayEquals(new int[] { 11, 1, 9, 12, 12, 8, 6, 9, 12, 4, 8, 0, 8, 9, 11, 7, 4, 8, 8, 8, 2, 13, 11, 7, 6, 11, 13, 10, 4, 12, 9, 3, 7, 13, 9, 9, 4, 13, 9, 5, 10, 11, 4, 9, 4, 2, 12, 2, 1, 3 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case20() {
    int[] Y = { -611518431, 145540428, 195634459, -380636285, 246327186, 322852522, 843285789, -524519843, 161563484, 90268089, 440424475, -675049628, -213907509, -525653960, 980585720, -128932655, 194004246, 175079899, -827245733, 720745916, 810610687, 817288215, 770820925, 760799061, -435541203, 439951759 };
    int[] query = { 439951759, -123608272, 67007507, 930134418, -588649150, -934237898, -547454227, 711002184, -484600908, -794239351, 90268089, -64242019, 41510394, -747120068, 255491009, -588692510, -742449096, 439951759, 720745916, 607614749, 980585720, -492049997, -522803231, -524519843, -974738198, 266850372, 542699897, 580653371, -380636285, 145540428, 383057914, 311794503, 810610687, 90268089, 270910698, 920593982, -900373053, 829270340, -190843902, 26366171, 194004246, 597542053, -525653960, -781772756, -641693645, 322852522, -967073697, -362428832, 90268089, 566580958 };
    assertArrayEquals(new int[] { 9, 13, 13, 2, 5, 0, 5, 6, 9, 2, 14, 13, 13, 2, 9, 5, 2, 9, 6, 6, 1, 9, 9, 8, 0, 9, 6, 6, 12, 15, 9, 9, 6, 14, 9, 2, 0, 4, 11, 13, 12, 6, 6, 2, 4, 9, 0, 13, 14, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case21() {
    int[] Y = { 379310246, 853974550, -433473592, -777480426, 700304104, 769135600, -907602483, -477506600, -98364175, 212723013, -532292692, -431750432, -640972927, -168077452, -475022706, -381288730, 409981480, -752803874, 420571456, -14985228, -229962576, 740654444, -477133720, 378093101, -781324181, -424388563, 399696055, -174295448, 855237247, 390740637, -379533033, -318572128, 445905602, 286082584, -659713999, -296775954 };
    int[] query = { -98364175, 696743067, -489159994, 798632068, 420571456, -229962576, -748449828, 156705665, 769135600, 205697486, -14985228, 726744187, 112050385, -356066559, -659713999, -593575164, -306915349, 710507611, 700304104, 846522511, 733968340, 779107762, 855237247, -725693223, 832226263, 654653284, 662311318, -906572511, -570759127, -318572128, 848614207, 212723013, -463732886, 624486569, -676347023, 999420452, 145140255, -381288730, -379533033, -298432346, -293512167, 799488291, 665190143, 785798035, -441740328, -477133720, 399696055, -240048348, 687387614, -907602483 };
    assertArrayEquals(new int[] { 19, 8, 14, 4, 11, 18, 8, 19, 5, 19, 19, 8, 19, 18, 9, 12, 18, 8, 8, 4, 8, 4, 1, 8, 4, 8, 8, 2, 12, 18, 4, 18, 18, 8, 8, 0, 19, 16, 17, 18, 17, 4, 8, 4, 18, 15, 15, 17, 8, 1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case22() {
    int[] Y = { -596472115, 855327049, -348660786, 716112329, -292612958, 781872676, 149909524, -94518872, 987539745, -469062939, 260802578, -587424417, 434714279, -688316318, 767289163, 171812528, -408611567, -961267632, 255764813, -574324667, -53309392, -881290360, 646778659, -708514893, 756354943, 5141489, -639917936, 991076425, 503806443, 365988947, -828624527, -544158756, 717281781, 85078154, 398509431 };
    int[] query = { -780782121, -302525339, -692029917, -546406284, -141751817, -479095347, 717281781, 892805749, -587424417, -544158756, -708514893, 523723761, 498836522, -199216408, 6355014, 503806443, 463707704, 900290934, -660040410, -818505710, 171812528, -857851508, -881290360, -130329781, -787977494, -934080491, 717281781, 756354943, -656303745, 889808658, -574324667, 648830437, -664549835, -53309392, -53309392, 966731562, 717281781, -384997149, 344322977, 987539745, -965150754, -510045041, 897797066, -427724043, 369462757, -926531839, -596472115, -783144001, 467511080, 220056322 };
    assertArrayEquals(new int[] { 6, 21, 8, 17, 23, 17, 13, 4, 14, 17, 7, 18, 18, 23, 23, 18, 18, 4, 10, 6, 25, 4, 3, 23, 6, 2, 13, 11, 10, 4, 16, 16, 10, 24, 24, 4, 13, 19, 21, 3, 0, 17, 4, 19, 21, 2, 13, 6, 18, 25 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case23() {
    int[] Y = { 597562668, 942076415, 672910135, 640198803, -857726739, 56224500, 108821294, -231641282, 430181520, -628792510, -975554012, -536251111, 262845851, -705492767, -4744483, 586001915, 531247159, 587407240, 989571440, -328422784, -430975008, 114620240, -498747557, 918748841, -480047686, -460861416, -298711392, -438794108, 358381211, 185513290, 451137431, -215864422, -374778781, -203279888, -274285041, 369861273 };
    int[] query = { 369861273, -144188530, 717809676, -430975008, -328810741, -857726739, 431369289, 989571440, 594190416, 835301249, -328422784, -673510664, -233746023, 174021111, -696072718, -992222106, -203279888, 935551733, -701955018, 265423600, -776566628, 81903595, 577171472, -863657498, 672910135, 857829306, 704988860, -801009853, 806605, -438794108, 989571440, -398208997, -166669236, -15500069, 587407240, 587407240, -480047686, -975554012, 301461092, 238134518, -644970040, 695007748, 531247159, 989571440, -975554012, 461862279, -220657579, 665448726, 880926200, -274285041 };
    assertArrayEquals(new int[] { 10, 16, 6, 13, 16, 3, 7, 1, 5, 6, 16, 6, 16, 12, 6, 0, 17, 4, 6, 12, 4, 16, 7, 2, 6, 6, 6, 4, 16, 11, 1, 14, 16, 16, 5, 5, 9, 1, 12, 14, 6, 6, 6, 1, 1, 5, 18, 6, 6, 15 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case24() {
    int[] Y = { -774278700, -649438978, -894050323, -910211885, -551799583, -865302725, 219915079, -315844069, 689242803, 346759924, 463274962, -764200508, 490354346, 509373952, 71265939, 768737597, -255561672, -118895186, -958728057, -120975006, 988822967, -250358927, 839007350, -912508768, 828204120, 949084465, -648166675, -197396636, -660385041, -520661404, 934482951, -446328760, 938487849, -64335221, 550675108 };
    int[] query = { 374325955, 934482951, 839007350, 381048634, 550675108, -786883911, -722541182, -804299952, 46678127, 119859415, -23906997, -894050323, 837367476, -964875671, 150694770, -21720332, 643374937, -887374443, -910211885, 768737597, 752686663, -164518582, -894050323, -575703989, -648166675, 463274962, 858936077, -255561672, 509373952, -523157212, 490354346, 174949867, -50693634, 768737597, 71265939, 684343361, -127532770, 628024142, 181186515, -914057036, 938487849, -774278700, 857541036, 921570045, 988822967, -599706774, -754673047, -165527423, -742917040, -8113201 };
    assertArrayEquals(new int[] { 19, 7, 9, 19, 15, 8, 11, 8, 17, 19, 17, 6, 10, 0, 19, 17, 14, 6, 5, 11, 12, 17, 6, 13, 12, 18, 8, 16, 16, 11, 17, 19, 17, 11, 18, 14, 17, 14, 19, 2, 5, 9, 8, 8, 1, 13, 11, 17, 11, 17 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case25() {
    int[] Y = { -147739202, -170706467, -907372719, 513622854, -208299134, -276181962, -758526289, 799851672, 711462110, 879671403, -965961378, 758537622, -591902378, -205962709, 615550386, 190295938, 490174308, -7704508, -495652208, -565861865, -689352779, 181162931, -912138262, 533843647, 721654359, -848544622, 857063291, -583078524, 382749380, -406383879, -833939963, -405963971, 105543951, 944237583 };
    int[] query = { -583078524, -758526289, 381053342, -689442289, -147739202, 321885998, 629866190, -833939963, -405963971, -848544622, 193548063, -823634804, 298034583, -283085030, -515438744, 378471524, -835402613, 190295938, 596829284, 10468637, -891313667, 987310744, -758592460, -795971270, -205962709, -624689810, -565861865, 615550386, -723233963, -139866816, 105543951, 440725638, 857063291, 269785397, 447637750, -495652208, -276181962, -925880636, -907372719, -656252542, 721654359, 533843647, 613497418, 138234903, 772501331, -681778696, -775749538, -848544622, 835816072, -622259076 };
    assertArrayEquals(new int[] { 17, 11, 17, 12, 18, 17, 9, 9, 18, 7, 17, 10, 17, 18, 18, 17, 8, 16, 11, 17, 6, 0, 10, 10, 18, 14, 18, 10, 12, 17, 17, 15, 4, 17, 15, 18, 18, 2, 5, 14, 10, 11, 11, 17, 7, 14, 10, 7, 5, 14 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case26() {
    int[] Y = { -564163250, -484852294, -593720171, -198758168, 523135652, 810328285, -384544098, -925219675, -959520685, -478246968, 616519311, 349028294, -550132360, 141152919, 328920823, 322007406, 894571646, -959071327, -581221027, -458212764, 844465040, -342555282, 152067646, 526494002, 295022577, 197060500, 343249456, -753068325, 326687530, 724823627, 97657680, -50097350, -369862850, 372702532, -873991383, 708520392, -535694929, 843688511, 552003693, -943491667, 437845816, -609948231, -660941360, -403317268, 491056215 };
    int[] query = { 894571646, -495904661, 421852802, -931325870, 596701463, 134212681, 372123620, 475792154, -232024477, 230055710, 853825442, -893457993, -50097350, -384544098, 980003916, -338343310, -485409754, -925091844, 528404543, 914890936, 491056215, -943491667, -152367083, -562428695, 810328285, 630368345, 211679489, -835911005, 97657680, 281482405, -660941360, -818852717, 334285318, -345164463, -374689723, -535694929, 78371903, 564870199, -342555282, 526494002, 409376925, -14436844, 937799655, 810328285, -484852294, -643786550, -524494530, -349455448, 339606301, 521141577 };
    assertArrayEquals(new int[] { 1, 19, 19, 6, 14, 21, 21, 17, 21, 23, 2, 6, 21, 17, 0, 21, 19, 6, 14, 0, 17, 5, 21, 15, 7, 12, 23, 8, 21, 23, 11, 8, 23, 19, 17, 18, 21, 14, 20, 15, 19, 21, 0, 7, 18, 12, 19, 19, 23, 16 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case27() {
    int[] Y = { 451077349, 927373865, 582843035, -963649681, 129999799, -779280878, -563887687, -731111671, -653888890, -40295478, 384181017, 53113826, 252752114, 706247563, -725706388, 147466731, -517602599, -605843412, 492411740, 159686421, -312771477, 331655034, -935435784, -980730785, 13287401, 195667362, 804356476, -534355802, -535673679, -933731768, 494982344, -515742420, -558452695, -792101228, -794591736, 312208707, 138003968, 524656942, 14228057, 887033145, -78485089, 400172254, 651015981, -573316584, -642482096 };
    int[] query = { -136168341, 13287401, -317139466, 252752114, 174000836, 777332911, 762535837, 208449212, 887033145, 75599222, -563887687, 492411740, -277093156, 53113826, 798440550, -642482096, 312208707, 462004445, 159686421, 366145387, 159686421, 492411740, -217566923, -573316584, 804356476, 720852536, -642482096, -980730785, -809625525, 644096273, 465736557, 462038565, -755770740, -281321423, -443405604, 400172254, 466998501, 195667362, 510749555, -414708407, -964832119, 979370564, -642482096, -286916599, -811153631, 251347358, 53113826, 53113826, 792803213, -871433653 };
    assertArrayEquals(new int[] { 17, 19, 15, 21, 21, 6, 6, 21, 3, 23, 16, 15, 17, 22, 6, 15, 20, 16, 21, 17, 21, 15, 17, 17, 5, 6, 15, 1, 6, 10, 16, 16, 10, 17, 15, 15, 16, 21, 12, 15, 2, 0, 15, 17, 6, 21, 22, 22, 6, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case28() {
    int[] Y = { 205618776, 498542625, -61134039, 764579149, 554853621, -329316407, -583471734, -95083068, 735490706, -569150256, 98000762, 396003438, -465594360, 951269281, 533363201, -363702151, 553545294, -762921693, -890987185, 165855859, 73980570, -797881539, -576685114, 149820320, 933160188, 924759738, 429146394, -367212369, -213480400, 211250500, -862660240, -409033389, 485928735, 533551113, 317610636, -720250415, 731288992, -89441106, 338632381, 407518022, 637919018, -633912902, -943501589, 262209045, 411196410, 223912015 };
    int[] query = { 75371614, -310342733, -370855392, -78764771, 394791604, -895978814, -95083068, -797881539, -72592397, -729326341, -122167084, -993359268, -89441106, -801127500, 165855859, 341587757, -409033389, -890987185, -329316407, -170731379, 223912015, 791762506, 822943387, -363702151, -697623231, -11036277, 531795637, 498542625, -937150990, 731288992, -182310669, 668390038, 319758653, 165855859, 270035259, -569150256, -211373367, 951269281, 487296973, -436433267, 946720731, -922654263, 142956606, 396003438, 262209045, -335716420, -720250415, 554853621, 951269281, 404754153 };
    assertArrayEquals(new int[] { 24, 20, 16, 22, 22, 2, 20, 7, 22, 8, 20, 0, 21, 6, 23, 22, 16, 3, 20, 20, 22, 4, 4, 19, 10, 24, 16, 17, 2, 9, 20, 10, 22, 23, 22, 13, 20, 1, 18, 16, 2, 2, 24, 21, 22, 20, 9, 12, 1, 20 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case29() {
    int[] Y = { -471893133, -375828342, 641375423, 916771038, -543866696, -11055782, -346588412, 433790639, 942241140, 772810218, -426695085, -898451026, -35293096, 712861558, 364693067, 384883072, -347684973, 474118579, -536539101, -700902866, 359591956, 523129246, -705626033, -386572730, -725121236, 17027162, 986108933, -218334597, -91527851, 73344288, 796948375, 794340033, 528764611, -540298335, -484638107, 101928093, -102479349, 478829651, 414147159, 776152059, 501125872, -376802397, 213758985, 156492879, -117148486 };
    int[] query = { 523129246, 364693067, 642451525, -721969246, 227098157, -123138543, -661692475, -700902866, 221337220, -426695085, -346588412, -820558753, -232825507, -835069210, -148875567, -301252226, -468008568, 495992815, 757460684, 73344288, 528764611, -900438356, -842647279, 200126287, -667991596, -524619687, 136858179, 954370756, -214776591, -891406516, 528764611, -570106058, -218334597, 156492879, -601063540, 580549102, -543866696, -346588412, -954098297, -270515842, 315772292, -344810705, -836591135, 384435944, 921890770, -332662599, -93151226, 162521548, -117148486, 641375423 };
    assertArrayEquals(new int[] { 13, 17, 12, 4, 16, 19, 8, 7, 16, 13, 16, 2, 17, 2, 19, 17, 13, 14, 10, 20, 12, 0, 2, 18, 8, 12, 18, 2, 19, 2, 12, 8, 18, 18, 8, 12, 9, 16, 0, 17, 16, 17, 2, 18, 4, 17, 22, 18, 20, 12 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case30() {
    int[] Y = { 431504632, -813499967, -105160677, -672682412, -720202364, -610996752, -349777494, 285785930, -192941320, -27110596, -518808287, 811999848, -527760306, 87499967, 267942651, 503880220, -811919228, 739191060, 565242894, 392530481, 716718611, -537054554, 823000084, 131595388, 685810630, 668653381, 600423373, -887459761, -817243873, 614272646, 412022826, -572213345, 886546529, -836845334, -623105836, 589969029, 261233423, -249597103, -61559715, 964403993, -538046991, 313206686, -420117003, 983193266 };
    int[] query = { -667326447, 383208212, 589759138, 716718611, -811919228, 811999848, 811999848, 457952559, -427101839, 823000084, -425703319, -98236870, 779240487, 163051430, 114090449, -710853468, 668653381, -247751407, -836845334, -537054554, 668653381, -817822681, 307848110, -75938319, -518808287, 325392008, 708716679, -192941320, -27110596, 170779816, -537054554, 739191060, -16646506, 245315512, 248532527, 207450117, -428764444, -533397519, -758163381, -29078567, 308957903, 559012374, -27110596, -366536769, -151927889, 261233423, -892894172, -973782937, -483725448, -706943662 };
    assertArrayEquals(new int[] { 10, 20, 19, 12, 7, 8, 8, 21, 20, 6, 20, 24, 9, 24, 22, 10, 15, 24, 3, 15, 15, 4, 22, 24, 19, 20, 13, 25, 23, 24, 15, 10, 22, 24, 24, 24, 20, 16, 8, 24, 22, 19, 23, 22, 26, 24, 0, 0, 20, 10 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case31() {
    int[] Y = { 946468408, 114162059, -42263538, 760928640, 65913147, 917456863, -790838058, 848085077, -551280445, 829652057, -632629681, -246305471, -937735806, -658551655, 447803179, 379903514, -146809901, -80970626, -672599071, 441340729, 419392490, -779085416, 32113863, -943250847, -914566749, 453180526, 776749437, 317396698, -908593008, 71607854, 561904922, 487110801, 60357515, 822514418, 369061404, -696763217, 426924305, 459737832, -706255510, -775228128, -910025939, 383433468, 317984404, -586619020, 194552835, -82941460, -152863582, -265047328 };
    int[] query = { -27885987, 133807412, 445920771, 60357515, 855909116, 71607854, -565396932, -779708616, 192685804, -969819905, 303233368, -475400489, -431590698, -671379501, -299385989, 187008188, -316713027, -644953245, 459737832, 243913521, 756784219, -745255242, 919981531, -12510057, 721824955, 825103836, 573267064, 561904922, -221510666, 60357515, 792873646, -73071310, 822514418, 732304493, 26842428, -672599071, -908593008, -937735806, -360690961, -943250847, 231184999, 297923650, 32113863, 773078682, 415769603, 574146140, -718457709, -547046484, 103306142, 760928640 };
    assertArrayEquals(new int[] { 23, 25, 19, 22, 3, 25, 20, 10, 25, 0, 23, 22, 22, 16, 22, 25, 22, 16, 16, 23, 13, 12, 1, 23, 13, 7, 13, 14, 21, 22, 9, 21, 8, 13, 23, 15, 7, 3, 22, 1, 23, 23, 22, 11, 21, 13, 12, 22, 25, 12 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case32() {
    int[] Y = { -295534808, 104804683, -718625977, -324574214, 715671903, 283593923, 984745171, -584829698, 684261603, 38953960, 372017565, -29718890, 789951430, -263606129, 990203204, 912135034, -433233399, 46570331, 397411912, 649598578, -60639383, -886195369, 636115520, -946673781, -647400873, -727836465, 963280728, 634244350, 806480353, 482992566, -748018121, -783288167, -795832509, -783380303, 106058695, 876926200, 579112581, 112273863, 918837657, -190278085, -512046400, -575906986, -141112638, -258013465, 139070380, -2577604, 80232793, -471502703, -327612545, -681566684 };
    int[] query = { -353940013, 104804683, 579112581, 321962494, -782592578, 270463355, 372017565, -471502703, -268260463, 969033516, 901785159, -410166930, -917658015, -883148406, 478852295, -130703995, -957685230, 10522267, 372017565, 627183770, 963280728, -547316079, 451461502, -761099716, 462580266, 391475817, 44835607, 806480353, 974149871, 393135283, 445183930, -258013465, -471502703, -169462736, -309003094, 348977914, -407464345, 715671903, -9096410, -399522329, 477778427, 242589752, 789951430, 112273863, 500378992, 80232793, -915113305, -507582802, -955590918, 762254780 };
    assertArrayEquals(new int[] { 17, 21, 20, 22, 6, 20, 21, 14, 16, 4, 8, 17, 2, 4, 20, 18, 0, 22, 21, 20, 5, 13, 20, 6, 20, 20, 24, 11, 4, 20, 20, 19, 14, 20, 15, 22, 17, 15, 20, 17, 20, 20, 13, 21, 20, 23, 2, 13, 0, 14 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case33() {
    int[] Y = { -179026779, 854264724, -692866651, 294508947, 418114099, 451314127, -999062409, 330597146, 170287693, -713029193, 343662818, -501128884, 716982591, 940554785, 87703437, 153549987, -592822822, -862882740, 683433623, 807657272, 314867445, 503987240, -149218605, 753451985, -936031436, -691356702, 382326603, -306975135, -259028319, 64201860, -855220099, -944611507, 316315643, -140483205, 169529718, 678346687, -799489451, 804088203, -290729752, -902121325, -171370243, 73680958, -813446160, -185270828, 496863240, 700757224, -928562611, -402654064, -932594605, 474530047 };
    int[] query = { 132262772, -901351799, -852524257, -899774379, -488684101, -107867663, -185270828, -928562611, 919185272, 387926252, -136362453, 330597146, -542584538, -582372411, 692250936, 573947395, 418114099, 770684887, -135380637, -18608503, -976525226, 518114796, -999062409, -149701866, -306975135, 330597146, 37414675, 111533846, 327087785, -871968621, 907439113, -713029193, -288765023, 830554841, 330597146, 700757224, -332861412, 615187958, -441255652, -193100785, 172837883, 914567079, 391063250, 249218472, -659242922, -971612393, 807657272, 52338258, 300108177, -348898964 };
    assertArrayEquals(new int[] { 27, 12, 14, 12, 24, 29, 24, 9, 2, 19, 29, 24, 22, 22, 12, 14, 19, 8, 29, 29, 2, 14, 1, 25, 23, 24, 29, 27, 25, 12, 2, 19, 24, 4, 24, 11, 22, 14, 24, 24, 25, 2, 19, 25, 22, 2, 5, 29, 25, 22 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case34() {
    int[] Y = { -944133122, 855098317, -557085928, -707276205, 843086892, -140253328, -147141764, -184514155, -257889105, 25961742, -688818092, 311681121, -219824172, 978618202, -415987056, 321863220, -986172952, 836302545, 784858481, 726795102, 449865948, -88302663, -726503005, -330410203, 926474163, 282252166, -130430409, -848852183, 328110088, 864991999, 591380303, -691283298, 322227674, 146890484, -523880272, -313771744, 182819695, -697684881, 945927679, 166396093, -794759307, -928371627, -345085372, 658384407, 718718847, 480107357, 785465411, 121187401 };
    int[] query = { 243923237, 282252166, 182819695, 843086892, -290860022, -345085372, -583078615, -275749572, 814370261, -638821618, -679410817, -243249648, 658384407, 335894952, -951849806, -549034828, -330410203, 714415578, 480107357, -33372080, -345085372, -726503005, -642615555, -134182043, -486471756, -928371627, -422855446, -971448531, -79701953, -746582277, 311681121, 448376433, -164784802, 677823747, 584706667, 790785240, 869488373, 53142089, 718718847, -902742912, 174593646, -580469621, 891852235, -219824172, 425277968, -316126227, 274327377, -523880272, 182819695, -231042982 };
    assertArrayEquals(new int[] { 22, 22, 23, 11, 21, 21, 17, 21, 14, 17, 17, 23, 18, 16, 2, 17, 21, 18, 17, 25, 21, 8, 17, 25, 19, 4, 19, 2, 25, 7, 21, 16, 25, 18, 18, 14, 6, 23, 17, 5, 24, 17, 6, 24, 16, 21, 22, 18, 23, 23 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case35() {
    int[] Y = { 414781344, -924787593, 999424057, 918176077, -44859055, -635617612, 185609545, -913121685, -624465816, 982816402, 49686139, 433333266, 535237439, 529112139, 660637468, 869189870, 337581579, -512037184, -18837786, 225364345, -830350518, 398528930, -46646414, 961878496, -3254783, -10330335, -734207935, 845076763, 520875414, -91439609, 493518853, -647462975, -357437294, -172575683, 913686186, -244557368, 357886729, 433811487, 973507141, 580137626, 177729230, -906940400, 123457190, -534961170, -826224618, 817275357, 527506753, -693967303, 835903378 };
    int[] query = { 414781344, -734207935, 630569846, -830350518, 886988763, 982816402, -649676637, -131389076, 703536845, -635617612, 999424057, 185609545, -509890974, -957628817, -585322313, -747206942, -91439609, 745876182, -783689232, 995535049, -217890117, -472960620, 177729230, -626757579, -235281938, -532985890, 149170517, 838104391, -405679536, -499760373, 118979986, 835903378, -235415921, -303726937, -667106789, 202813450, 869189870, -172575683, 808189174, -37767099, 580137626, -925034857, 203933213, -675474809, 155863423, 846849781, 913686186, -897580632, 554524960, 961878496 };
    assertArrayEquals(new int[] { 20, 11, 17, 7, 10, 3, 14, 22, 17, 17, 1, 25, 20, 0, 18, 10, 23, 17, 10, 2, 22, 20, 26, 18, 22, 18, 26, 14, 20, 20, 28, 15, 22, 20, 14, 24, 11, 22, 17, 26, 17, 0, 24, 14, 26, 12, 9, 6, 17, 7 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case36() {
    int[] Y = { 413615837, -683502491, 126919036, -439751388, 560619804, -752093954, -672964987, 464948473, -797489932, 881257548, 312520377, -473799729, -825357885, -525523461, -880445500, 672202426, -372973573, -115828857, -212018195, 328812794, 671556025, -198487288, -644871981, 315349026, 64467997, 887927802, -149542007, -17971248, 859647887, -794316095, -819216338, -335205532, -107787848, 340401495, 810639, -933528852, 938133137, 176980456, 931388419, 268906952, -555500682, -582620111, -182091490, -261048431, -163669661, 618144787, 113872354, 911828562, -420304046, 777525715 };
    int[] query = { 718662979, 316490538, -229373102, 674881399, 820369389, -115828857, -407899036, 374230829, 104905080, -420304046, -790447721, 464948473, 217296366, 562621280, -780165352, 966415757, -17182735, -172126310, 140994478, 827017986, 618144787, -212018195, -198487288, 500865343, 126919036, -18122322, 328812794, 308719615, 925208900, 618144787, -833663996, -628262455, 881257548, -672964987, 672075645, 615577542, -918256834, 911828562, 413615837, -555500682, -163669661, -120848000, 823112724, 898311568, -330189203, -880445500, -887894917, -439751388, -361123776, -821334966 };
    assertArrayEquals(new int[] { 13, 26, 24, 13, 12, 25, 20, 24, 26, 19, 10, 22, 28, 19, 10, 0, 24, 24, 26, 12, 18, 25, 26, 21, 27, 24, 26, 28, 4, 18, 4, 16, 9, 14, 15, 19, 2, 5, 24, 18, 24, 26, 12, 6, 22, 3, 2, 17, 22, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case37() {
    int[] Y = { 818608315, -942212141, 521036247, -827334523, -181273528, -898511666, -227492632, -943015606, 197396478, -915400619, 440035083, 437555219, 639235798, -364868622, 464699439, 30087167, -597914248, -403414791, -637408742, -283790926, 900198871, -401988008, 809275124, -488428988, 69899387, -86420125, 760173068, -236331169, -53023713, -409775550, -986331256, 199569868, 230772646, -879212796, -499315437, -976203674, -481862205, -698624258, -476062765, 909200441, -638888358, 335505768, 672030190, 428744516, 335414502, -266085036, 197995273, -756323891 };
    int[] query = { -892234535, -181273528, -698624258, -672933551, -912312023, 864482669, 69899387, 106514584, -476062765, -623503590, -811709211, -409775550, 205194117, -915400619, 818608315, 19536595, 40103378, 464699439, -779227198, 639235798, -283790926, 470234138, -187640247, -236331169, -709590826, -195540892, 72140937, -46498719, 440035083, 794044434, 473877309, -916375355, -698624258, -965444398, 953419982, 167695975, -992582491, -118220065, 736776362, -469636892, -364868622, -121483358, -365881813, 953977604, 282837288, 512544011, -817455244, -476062765, 30087167, -936424461 };
    assertArrayEquals(new int[] { 12, 26, 18, 19, 10, 4, 24, 23, 23, 23, 16, 23, 19, 9, 5, 25, 25, 16, 16, 12, 25, 15, 27, 28, 17, 27, 23, 25, 18, 7, 15, 8, 18, 4, 0, 23, 0, 25, 9, 23, 24, 25, 23, 0, 17, 15, 16, 23, 25, 8 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case38() {
    int[] Y = { 520413512, -950623529, 116280701, -669663433, -59547726, -337432781, -202982075, -605816935, 376050234, -651521669, -668652539, -385798961, -64353819, 979857179, -737656593, 203473688, -946347975, -684638232, 721315668, -121642779, -788644986, 579729706, -46111170, 234648692, 799195021, -192775225, -20570077, 497413049, 780633302, -572574882, -908106308, 647948234, -570840895, -238128286, -197268446, 652070350, -916193651, 852047883, -218409440, -202895089, 604883328, -646385475, 368104448, 990671324, -989555392, 108778377, 308159033, 282553209, 635362820, -551876338 };
    int[] query = { -158351396, 275191323, -846801965, -448457976, 297191129, 926993317, 108778377, 949173995, -11561625, -218409440, 801080771, 229062227, -127484771, 53106431, 990671324, 885764448, 308159033, -430758740, -122124137, -800356825, -454819784, 586819829, 368104448, -913019373, 520413512, 990671324, 379951649, -883768963, 895195766, 600019286, -551876338, -614276531, -640197323, 77550441, -608989229, 458127263, 282553209, -436895148, 647000268, -950623529, 520413512, 57570768, 317990919, -349321110, -989555392, 780633302, -926340127, -171017038, -385798961, -321751412 };
    assertArrayEquals(new int[] { 29, 25, 10, 25, 27, 4, 29, 4, 29, 28, 6, 25, 29, 29, 1, 4, 26, 25, 29, 10, 25, 20, 25, 8, 23, 1, 23, 10, 4, 20, 25, 20, 20, 29, 20, 23, 26, 25, 16, 3, 23, 29, 25, 25, 1, 9, 6, 29, 25, 27 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case39() {
    int[] Y = { 134778046, 11912509, -682219362, 699231801, -751654887, 427804870, 450776906, 588983680, -695309386, -38350443, -323007070, 584378641, -901860833, -697535763, -880389544, 456505581, -366267460, -600565499, -332809870, 597766622, 821583092, -710635349, -494915006, -385839718, -713108958, -832568205, 50146023, -310048529, -409880151, -470570747, 404502464, -711734560, -314972579, 200013566, 8655067, -981278345, 537954049, -889702852, -698928974, 833301430, -510028662, -200542667, -119075672, -895778817, -835801129, 788859759, 922577356, 592661455, 503799252, -786476323 };
    int[] query = { 788859759, -605417151, -948483970, 397726110, 200013566, 11912509, 539604196, 345105935, -470570747, -183818229, 241764003, -133675409, -832568205, -786476323, 597766622, 202885660, 84231398, 428078928, -916996902, -643700468, -510451491, 553928251, 926627279, 516002469, 86300016, 941642203, 693648627, -531156188, 603479017, 588983680, 820106115, 372952196, 747899350, 76292881, -880389544, -221204976, -782039140, 979386181, 370472524, 588983680, 146247685, -20511707, 662051205, -321553408, -786476323, -26203440, -816153623, 41357377, -701323137, 717017583 };
    assertArrayEquals(new int[] { 6, 21, 2, 18, 19, 23, 12, 18, 26, 27, 18, 27, 11, 13, 8, 18, 21, 16, 2, 21, 23, 12, 0, 14, 21, 0, 8, 23, 8, 9, 6, 18, 6, 21, 9, 27, 13, 0, 18, 9, 20, 23, 8, 27, 13, 23, 12, 23, 19, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case40() {
    int[] Y = { -210563894, 451015168, -458328741, -732997216, 602206494, -579685055, 160846819, 639075569, -151501204, 880828909, 456042219, -455935491, -465236363, -271233885, -166390758, -691731418, 59589488, 888312904, -791642971, 964792230, -405140290, 469986979, -607126607, -829958820, 922218372, -672751502, 839890913, -16162775, 813773486, -994920110, -16148146, -484345823, -373956722, -17547301, 789155794, 378930792, -581269148, 581299821, 536400118, 397369100, -385010959, -52183605, 364253109, -928419778, -12583071, 107615042, -366573221, -58607507 };
    int[] query = { -16148146, -831410157, -732997216, 416801916, -928419778, 456042219, 488092955, 505765591, -16148146, -213204912, 989572713, 888312904, -182073132, 639075569, -994920110, -588641040, 444359094, -966289867, 565983517, 639075569, -829958820, 986057004, -936491094, -922795612, 136229893, -757267331, -672751502, -52183605, 869919986, -366573221, -349239222, 789155794, -465236363, 99403240, 839890913, -12583071, -58607507, -455935491, 112228449, 732556726, 875040410, 839890913, -373956722, 798599363, 6854964, 789155794, 823440882, -590978145, 149783394, 536400118 };
    assertArrayEquals(new int[] { 29, 4, 9, 24, 3, 22, 20, 20, 29, 28, 0, 5, 29, 15, 1, 14, 24, 2, 20, 15, 5, 0, 2, 4, 26, 8, 13, 28, 8, 27, 28, 13, 21, 28, 9, 28, 29, 22, 26, 14, 8, 9, 26, 12, 28, 13, 10, 14, 26, 20 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case41() {
    int[] Y = { -6, -14, 7, 12, 2, -5, -24, 12, -12, -6, 20, 11, 0, -10, -11, 17, 9, -24, -8, 21, -14, 18, 14, 8, 10, 18, -6, -8, 1, 1, -22, 16, -16, -10, -5, 4, 3, -12, -24, -3, 23, 1, -15, -1, 2, -5 };
    int[] query = { -8, 12, 8, -3, 16, -1, 2, 8, 16, -25, -10, 5, -24, 6, 18, 21, 12, 20, -1, 22, 6, -12, -24, -20, -1, 7, -8, -24, 3, -10, -24, 17, 0, -15, 0, -5, 14, -14, 23, 15, -6, 22, 4, -21, -13, 9, -1, -11, -15, 1 };
    assertArrayEquals(new int[] { 21, 16, 17, 22, 13, 22, 19, 17, 13, 0, 20, 16, 3, 16, 8, 3, 16, 5, 22, 2, 16, 17, 3, 8, 22, 16, 21, 3, 18, 20, 3, 11, 22, 11, 22, 22, 14, 14, 1, 14, 22, 2, 17, 8, 16, 18, 22, 19, 11, -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case42() {
    int[] Y = { -2, -5, 19, -24, -23, -12, -25, -22, -3, 20, 24, 24, 11, 3, 16, 0, -9, 7, 12, -11, 17, 6, 14, 15, 1, 24, -4, -23, 20, -2, 2, 1, -25, -17, 6, -24, -23, 15, 7, -17, 2, -1, -1, -13, -8, -3 };
    int[] query = { 10, -8, 16, -3, 5, 12, -8, 6, -10, 9, -5, 19, 6, 24, -4, 18, 5, -25, -12, 18, 1, -23, 18, -10, -20, 19, -14, 21, 6, 1, 5, 24, -7, 25, -18, 23, -9, 16, 11, 21, 8, 12, 24, 0, -6, 5, -1, 13, -8, 11 };
    assertArrayEquals(new int[] { 18, 16, 11, 18, 18, 17, 16, 18, 14, 18, 17, 7, 18, -1, 18, 8, 18, 2, 13, 8, 19, 9, 8, 14, 10, 7, 12, 4, 18, 19, 18, -1, 16, 0, 10, 4, 15, 11, 18, 4, 18, 17, -1, 18, 16, 18, -1, 16, 16, 18 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case43() {
    int[] Y = { -22, 13, -22, 7, 17, -8, 20, -20, -4, 8, 6, -23, -8, 10, -21, -8, 7, -25, 20, 12, -3, -11, 20, -23, -24, 6, 5, 1, 23, -17, -19, -6 };
    int[] query = { 20, 20, 3, -23, -10, -23, -8, 7, 22, 18, 10, 0, -18, -11, -10, 6, -11, 20, 13, -13, -16, -8, 0, -5, 2, -11, -20, 8, 8, 8, 14, -20, -22, -8, 18, -24, -20, -18, -8, -4, 23, -8, -19, -23, 21, -23, -4, 16, 23, 5 };
    assertArrayEquals(new int[] { 5, 5, 20, 5, 17, 5, 18, 17, 2, 8, 13, 18, 15, 16, 17, 19, 16, 5, 11, 15, 15, 18, 18, 18, 20, 16, 12, 15, 15, 15, 10, 12, 8, 18, 8, 3, 12, 15, 18, 18, 1, 18, 14, 5, 2, 5, 18, 10, 1, 20 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case44() {
    int[] Y = { -7, 7, 13, 7, 12, -6, -12, 22, -8, -12, 22, -5, -6, -5, 23, -23, -4, -21, -20, 6, -10, 16, 22, 13, 18, -12, -1, -19, -3, 7, 21, 7, 23, 11, -7, -8, 13, 25, 10 };
    int[] query = { -22, -15, 7, -25, 12, 12, -21, 20, -4, -20, -6, 25, -15, 24, -12, 6, -2, 24, -12, -12, -21, -22, -20, 10, -25, 6, 18, 11, -7, 22, -24, 7, -12, 4, -1, 17, -8, -5, -20, -11, 23, 23, 19, 18, 23, -4, 12, 2, -17, 13 };
    assertArrayEquals(new int[] { 2, 6, 15, 0, 17, 17, 3, 14, 18, 4, 18, 1, 6, 2, 9, 14, 17, 2, 9, 9, 3, 2, 4, 18, 0, 14, 15, 18, 17, 9, 0, 15, 9, 15, 16, 16, 15, 19, 4, 12, 4, 4, 14, 15, 4, 18, 17, 15, 6, 16 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case45() {
    int[] Y = { -7, 3, 23, 13, -15, 23, 1, -9, 16, 16, -1, 3, 0, -17, 22, -24, 0, -25, 2, 20, 7, -16, -18, 2, 18, -5, -5, 1, -8, 4, 4, 3, -11, 11, 14, 12, 1, 24, -20, -23, -3, 14 };
    int[] query = { 16, -5, -11, -7, 17, 14, 2, 22, -5, -5, 12, 21, -9, 16, -9, 3, 5, -15, 24, -15, 5, -24, 10, 23, -16, 0, -24, -13, -18, -13, 14, 22, 9, -21, 12, 18, 0, -25, 16, -21, 2, 5, 3, 19, 18, -5, 4, -9, -3, -14 };
    assertArrayEquals(new int[] { -1, -1, 13, 19, 12, 16, 21, 7, -1, -1, 17, 8, 15, -1, 15, 20, 17, 11, 1, 11, 17, 3, 17, 4, 10, 22, 3, 12, 7, 12, 16, 7, 17, 6, 17, 11, 22, 1, -1, 6, 21, 17, 20, 10, 11, -1, -1, 15, 21, 12 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case46() {
    int[] Y = { 24, 17, -16, -20, -12, -1, -11, 2, -24, -13, -1, -9, 21, 24, 19, -24, -8, 0, -21, -13, 17, -11, 24, 11, -6, -14, 10, 19, -1, 5, 25, -22, -12, -10, 13, 19, -9, -7, 24, -13, 0, 9, 10, 13, -14, -3, 10, -12 };
    int[] query = { 10, 4, -24, 13, -22, -16, 2, 5, 18, 0, 5, -18, 13, 1, -22, 12, -19, -3, 5, 0, -23, -5, -2, -24, 15, -9, -7, 8, 9, -10, 19, 8, 6, 23, 18, 21, 0, -19, -4, -10, 13, -19, 7, -8, 20, 7, -11, 24, -24, -1 };
    assertArrayEquals(new int[] { 18, 19, 2, 16, 5, 10, 20, 19, 13, 22, 19, 10, 16, 21, 5, 17, 10, 25, 19, 22, 4, 25, 25, 2, 15, 23, 25, 19, 19, 21, 11, 19, 19, 9, 13, 9, 22, 10, 25, 21, 16, 10, 19, 25, 9, 19, 19, 6, 2, 24 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case47() {
    int[] Y = { -14, -18, 9, 13, -21, -2, -4, -12, 20, 5, -9, -4, -22, -23, -12, 22, -14, 19, 17, -14, 2, -23, 10, -14, 11, -22, 12, -6, 10, 25, 9, -21, 2, -3, -19, -20, 18, -5, 24, 22, 10, 19, 11 };
    int[] query = { -4, 12, 22, -20, 12, 0, 15, 25, 22, -17, 18, -21, 6, 5, -6, 9, 22, -3, 25, 17, -2, -20, 11, -12, -23, 17, 22, 0, -17, 7, 20, 7, 16, -10, -15, -22, 19, 22, 13, -23, 14, -23, 0, -11, -1, 11, 24, -21, -4, 5 };
    assertArrayEquals(new int[] { 26, 17, 5, 11, 17, 23, 14, 1, 5, 14, 13, 8, 19, 19, 24, 19, 5, 25, 1, 14, 24, 11, 19, 20, 2, 14, 5, 23, 14, 19, 7, 19, 14, 21, 14, 5, 10, 5, 15, 2, 14, 2, 23, 21, 23, 19, 3, 8, 26, 19 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case48() {
    int[] Y = { 12, -18, 4, 12, -2, -25, 20, -10, 14, 18, -10, 3, -24, 3, 12, -11, -7, -2, -5, 18, 13, -2, -11, -17, 17, 9, -11, -9, 0, 18, 24, 22, -21, 19, 18, 10, 16, 2, -25, -24, 25, -4, -14, 10 };
    int[] query = { 10, -8, -8, 18, -20, -9, -24, 22, 10, -2, 18, 11, -3, 0, -24, 25, 16, 4, 21, 15, -19, 10, 14, -18, 10, 9, 3, -10, 25, 17, -12, -1, 3, 0, 0, 20, 1, -21, 7, 18, 18, 10, 5, 9, 11, 17, 14, -1, -17, -4 };
    assertArrayEquals(new int[] { 21, 22, 22, 10, 8, 22, 5, 4, 21, 23, 10, 21, 24, 22, 5, 1, 15, 20, 4, 16, 8, 21, 16, 9, 21, 20, 21, 20, 1, 13, 14, 22, 21, 22, 22, 5, 22, 7, 20, 10, 10, 21, 20, 20, 21, 13, 16, 22, 11, 24 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case49() {
    int[] Y = { -13, -25, 3, -14, -15, -24, -8, -24, -19, 12, 14, 9, -24, -3, 14, -25, -11, 4, 7, 22, 11, -20, 23, 3, -14, 21, 18, -16, -2, -25, 6, 7, -20, -11 };
    int[] query = { 21, -24, -14, -22, -14, 14, -20, 6, 9, 10, -12, 14, 14, -23, -20, 24, 24, 16, -3, 22, 16, -3, 9, -14, 13, 13, 7, -24, 5, 12, 7, -9, 12, 24, 7, -15, 7, 12, 21, -1, -24, 11, 21, 3, 4, 14, -2, 18, -24, -7 };
    assertArrayEquals(new int[] { 5, 9, 19, 12, 19, 8, 14, 12, 10, 10, 19, 8, 8, 12, 14, 0, 0, 6, 16, 3, 6, 16, 10, 19, 10, 10, 11, 9, 12, 10, 11, 18, 10, 0, 11, 18, 11, 10, 5, 14, 9, 10, 5, 13, 12, 8, 15, 6, 9, 16 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case50() {
    int[] Y = { -6, -8, -3, -13, -9, -15, 9, 17, 6, -1, -14, 9, 4, 23, -23, -6, -17, -1, -17, 7, 20, 23, 15, 3, 18, -14, 12, 16, -21, 17, 11 };
    int[] query = { -13, -17, 18, 1, 10, 13, -6, -1, 20, -5, -14, 23, 23, 0, -14, 3, 18, 22, 13, -18, -21, 11, -4, -22, -3, -13, 4, -21, -18, 14, 6, -1, 11, -19, 9, -14, 19, 15, 21, 5, 3, -20, 20, 3, 22, -20, 16, -13, 24, -14 };
    assertArrayEquals(new int[] { 15, 6, 5, 9, 11, 12, 15, 10, 4, 13, 12, 2, 2, 9, 12, 10, 5, 4, 12, 4, 3, 12, 13, 2, 12, 15, 12, 3, 4, 12, 13, 10, 12, 4, 12, 12, 4, 12, 4, 13, 10, 4, 4, 10, 4, 4, 11, 15, 0, 12 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case51() {
    int[] Y = { 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000 };
    int[] query = { 1000000000, -1000000000, -694411128, -470576179, -570803863, -478738713, 480609237, -202334050, 662740030, 613655990, 907159509, 503407940, 300199095, 102810726, -329510984, -611974016, -480334174, -352421586, 498863174, -844894259, 830385910, -58148984, 229857277, -481390379, 813581625, 383729806, -475422608, -24268422, 155665910, 966240237, -2651188, -197452431, 431427954, 841800355, 899117903, 694397358, -903276194, -782269626, 26014371, -540737921, -285341110, -492330078, -379775126, -778770122, -433797622, 993845264, 688532242, -297530523, -514373533, -352289573 };
    assertArrayEquals(new int[] { 25, 25, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case52() {
    int[] Y = { 4, 5, -9, 10, -3, 7, -9, 9, -6, 6, -5, 4 };
    int[] query = { 4, 10, 0, 10, 0, -6, -5, 7, 6, -3, 5, 9, -5, 9, -5, 10, -7, 10, -4, 7, -10, 6, 4, -1, -10, 0, 8, 9, 3, 5, -6, 4, 1, 4, 5, 1, 9, 10, 1, 6, 4, -3, -9, 1, 8, -5, 1, -4, 5, -8 };
    assertArrayEquals(new int[] { 11, 1, 10, 1, 10, 5, 7, 5, 7, 9, 9, 3, 7, 3, 7, 1, 4, 1, 8, 5, 0, 7, 11, 10, 0, 10, 4, 3, 10, 9, 5, 11, 10, 11, 9, 10, 3, 1, 10, 7, 11, 9, 2, 10, 4, 7, 10, 8, 9, 4 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case53() {
    int[] Y = { 536071368, -97920634, 546362708, -659105967, 997395840, 140358083, 832381492, 148150738, 852421012, -519515678, 792376383, -758668975, 739869769, 89045332, 621725590, -846897456, 912880309, -440057382, 887810056, -716670534, 702722304, 505322353, 873026214, 139530516, 676344445, -131153667, 799708188, 536071368 };
    int[] query = { 536071368, -873511144, 546362708, -758668975, 569918554, 220927352, -835221058, 20823457, -945662635, -817737690, 873026214, 212782460, 792376383, -806324237, 912880309, -716670534, -8389853, -482777311, 437044618, -942720635, -148909825, 963711959, -366746056, -314125538, -713829483, 702722304, -290369528, 769214171, 887810056, 350047210, -866449886, 602065231, -13723868, -97920634, 953646536, 194123168, -704363637, -778650752, 268257698, 358118598, 426863409, 286645595, 19189944, 47068943, 792376383, -251067063, 702722304, -551512165, 876093019, 626440552 };
    assertArrayEquals(new int[] { 27, 0, 25, 3, 24, 24, 2, 16, 0, 2, 7, 24, 15, 2, 3, 5, 16, 10, 24, 0, 12, 2, 12, 12, 6, 19, 12, 16, 5, 24, 0, 24, 16, 15, 2, 24, 6, 2, 24, 24, 24, 24, 16, 16, 15, 12, 19, 8, 6, 22 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case54() {
    int[] Y = { 742, 981, -266, 886, 489, 889, -691, 816, -113, 976, 513, 783, -781, 850, 657, 768, 705, 778, -761, 910, 55, 891, 181, 956, 292, 962, -622, 843, 664, 788, 513, 742 };
    int[] query = { 742, -282, -970, -10, 889, 181, -991, -113, -899, -686, 63, 521, -986, 728, 61, -102, 77, 508, 304, 307, 55, 498, -266, 194, 804, -870, 850, 843, 181, -719, 181, -230, 962, 889, -602, -198, -886, -288, 976, 438, 181, 88, -366, 668, -448, 133, 257, 513, 889, 201 };
    assertArrayEquals(new int[] { 31, 8, 0, 12, 13, 15, 0, 11, 0, 6, 14, 24, 0, 30, 14, 12, 14, 20, 18, 18, 13, 20, 9, 16, 22, 0, 17, 19, 15, 4, 15, 10, 5, 13, 8, 10, 0, 8, 3, 18, 15, 14, 8, 28, 8, 14, 16, 22, 13, 16 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case55() {
    int[] Y = { -540462934, -996213454, 53282039, -829330400, 791750306, -771014576, 243714970, -691382040, 790231812, -711486908, 809699174, -620336085, 910094945, -560993675, 523423116, -810890447, 791094354, -571049670, 53562977, -564325317, 791036240, -949913166, -381214490, -701565068, -197377369, -792318891, -238273271, -727934480, 117733662, -655902602, 103100204, -765057744, -278389288, -663982429, -265417678, -687606753, -73404919, -711919560, 202779790, -835759949, 619392661, -945739585, 905838042, -540462934 };
    int[] query = { -540462934, 523423116, -701565068, -674674841, 576784412, 905838042, 863361822, 77192148, -299689645, -184224686, 791750306, -507368881, 738786812, -711486908, -523333921, 772777415, 87916895, -571049670, 53282039, 73925841, -117489336, -197377369, 903243227, 905838042, 636135555, -734798860, 910094945, 619392661, 819365131, -829330400, -894968681, 65266535, 9439295, -635769373, -677914073, -43010040, -711919560, -896639527, -701565068, 697672827, 712751735, -265417678, -630907745, -449691396, -583251482, -81930590, -218551765, 886780634, -66694849, -846240589 };
    assertArrayEquals(new int[] { 43, 17, 25, 30, 16, 3, 4, 26, 40, 32, 7, 42, 14, 23, 42, 14, 26, 37, 29, 26, 32, 33, 4, 3, 14, 18, 1, 15, 4, 9, 6, 26, 30, 34, 30, 30, 21, 6, 25, 14, 14, 37, 34, 42, 36, 32, 34, 4, 30, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case56() {
    int[] Y = { 800399636, -690803977, 969808156, -3338896, 991433123, -915209811, 808395618, 251436789, 904322598, 466913734, 814283220, -141077359, 945390437, -564814457, 951883208, -521099330, 809930410, 37457656, 813231734, -982376089, 895489923, -813996146, 934629311, 415784012, 807270610, 657100621, 849362021, -10211051, 963068213, 381054121, 802193894, 204864390, 906452786, -394350548, 866976035, 291483268, 878362070, 570126622, 984652857, -812048230, 895543701, -976952992, 849891583, 43292779, 945422369, 409444371, 977757426, -419368886, 803318990, 800399636 };
    int[] query = { 800399636, 66898529, 642813243, -49970309, 934629311, 163049262, 895543701, 776518596, -343132512, -705487017, -190504957, 805113660, -619740270, 833339712, -50852483, -871973219, -645106242, -743263284, 184898170, -521099330, -102274578, 6658893, -792841855, -457952287, 968098729, 973544935, 478442444, -557165668, -813996146, -3338896, -120631665, 990637707, 784499626, 196316688, 415784012, 118573442, 990335689, 223409824, -644135433, 951883208, -813996146, -528627650, 721917420, 298711884, 830884903, 721069961, 449825647, -465870693, -315367024, -351176080 };
    assertArrayEquals(new int[] { 49, 30, 46, 22, 17, 30, 23, 48, 20, 10, 20, 44, 12, 34, 22, 6, 12, 10, 30, 15, 22, 26, 10, 16, 8, 6, 44, 14, 7, 25, 22, 2, 48, 30, 41, 30, 2, 32, 12, 11, 7, 14, 48, 36, 34, 48, 42, 16, 20, 20 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case57() {
    int[] Y = { -178080289, -771314989, -237251715, -949949900, -437883156, -835236871, -316363230, -929746634, -671700962 };
    int[] query = { -673197622, -437883156, -251072978, 221380900, -771314989, -949949900, -910604034, -671700962, -929746634, -316363230 };
    assertArrayEquals(new int[] { 8, 6, 3, 0, 7, 1, 4, 8, 3, 4 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case58() {
    int[] Y = { -178080289, -771314989, -237251715, -949949900, -437883156, -835236871, -316363230, -929746634, -671700962 };
    int[] query = { -673197622, -437883156, -251072978, 221380900, -771314989, -949949900, -910604034, -671700962, -929746634, -316363230 };
    assertArrayEquals(new int[] { 8, 6, 3, 0, 7, 1, 4, 8, 3, 4 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case59() {
    int[] Y = { 0, 0 };
    int[] query = { -1, 0, 1 };
    assertArrayEquals(new int[] { 0, -1, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case60() {
    int[] Y = { 1, 4, 4, 1, 4, -10 };
    int[] query = { 1, 4, 3, -10, 0 };
    assertArrayEquals(new int[] { 3, -1, 4, 1, 1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case61() {
    int[] Y = { 0, 0, 0, 0, 1 };
    int[] query = { -1, 0, 1 };
    assertArrayEquals(new int[] { 0, -1, 1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case62() {
    int[] Y = { 1, 2, 1 };
    int[] query = { 1 };
    assertArrayEquals(new int[] { 2 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case63() {
    int[] Y = { 2, 4, -2, 2 };
    int[] query = { 2 };
    assertArrayEquals(new int[] { 3 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case64() {
    int[] Y = { 1, 2, 1, 2, 1 };
    int[] query = { 1 };
    assertArrayEquals(new int[] { 3 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case65() {
    int[] Y = { 0, 0, 0, 0 };
    int[] query = { 0, 0, 0, 0 };
    assertArrayEquals(new int[] { -1, -1, -1, -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case66() {
    int[] Y = { 0, 0, 1 };
    int[] query = { 0 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case67() {
    int[] Y = { 1, 4, 4 };
    int[] query = { 4 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case68() {
    int[] Y = { 1, 2, 2 };
    int[] query = { 2 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case69() {
    int[] Y = { 1, 4, -1, 2, 1, 1, 2 };
    int[] query = { -2, -1, 0, 1 };
    assertArrayEquals(new int[] { 0, 1, 2, -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case70() {
    int[] Y = { -1, 0, -1, -1, 2, 3, 3, 3, 4, 1, 0 };
    int[] query = { -2, -3, -1, 0, 1, 2, 3, 4, 5 };
    assertArrayEquals(new int[] { 0, 0, -1, 3, 2, 2, -1, 1, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case71() {
    int[] Y = { 0, 1, 1 };
    int[] query = { 1 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case72() {
    int[] Y = { 3, 1, 3, 1, 3 };
    int[] query = { 3 };
    assertArrayEquals(new int[] { 3 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case73() {
    int[] Y = { 3, 3, 6, -6, 6, -6, 6, -6 };
    int[] query = { 3, 4 };
    assertArrayEquals(new int[] { -1, 6 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case74() {
    int[] Y = { 7, 8, 9, 5, 5 };
    int[] query = { 5 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case75() {
    int[] Y = { 2, 1, 1 };
    int[] query = { 1 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case76() {
    int[] Y = { 1, 2, 1, 2 };
    int[] query = { 1 };
    assertArrayEquals(new int[] { 2 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case77() {
    int[] Y = { 1, 2, 2 };
    int[] query = { 1 };
    assertArrayEquals(new int[] { 1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case78() {
    int[] Y = { 2, 2, 3, 3 };
    int[] query = { 1, 2, 3, 4 };
    assertArrayEquals(new int[] { 0, -1, -1, 0 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case79() {
    int[] Y = { 0, 1, 2, 2, 1, 0 };
    int[] query = { 1, 4, 2 };
    assertArrayEquals(new int[] { 2, 0, -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case80() {
    int[] Y = { 0, 1, 2 };
    int[] query = { 1 };
    assertArrayEquals(new int[] { 1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case81() {
    int[] Y = { 4, 2, 2 };
    int[] query = { 2 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case82() {
    int[] Y = { 0, 0, 1, 4, -1, 2 };
    int[] query = { -1, 0, 1, -2, -1, 0, 1 };
    assertArrayEquals(new int[] { 1, -1, 3, 0, 1, -1, 3 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case83() {
    int[] Y = { 0, 0, 1, 0, 1, 0 };
    int[] query = { 0 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case84() {
    int[] Y = { 0, 1, 0 };
    int[] query = { 0, 1 };
    assertArrayEquals(new int[] { 2, 1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

  @Test
  public void case85() {
    int[] Y = { 1000, 1000, 1000 };
    int[] query = { 1000 };
    assertArrayEquals(new int[] { -1 }, piecewiselinearfunctiondiv2.countSolutions(Y, query));
  }

}
