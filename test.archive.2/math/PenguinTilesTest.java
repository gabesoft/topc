package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class PenguinTilesTest {
    PenguinTiles penguintiles = new PenguinTiles();

    @Test
    public void case1() {
        String[] tiles = { "PP", "P." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case2() {
        String[] tiles = { "PPPPPPPP", ".PPPPPPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case3() {
        String[] tiles = { "PPP", "P.P", "PPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case4() {
        String[] tiles = { "P.", "PP", "PP", "PP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case5() {
        String[] tiles = { ".PPP", "PPPP", "PPPP", "PPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case6() {
        String[] tiles = { "P.", "PP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case7() {
        String[] tiles = { "PP", ".P" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case8() {
        String[] tiles = { ".P", "PP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case9() {
        String[] tiles = { "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case10() {
        String[] tiles = { "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPPPPPPPPP.PPPPPPPPPPPPPPPPPPPPPPPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case11() {
        String[] tiles = {};
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case12() {
        String[] tiles = {};
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case13() {
        String[] tiles = {};
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case14() {
        String[] tiles = {};
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case15() {
        String[] tiles = {};
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case16() {
        String[] tiles = { "PP", "P.", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case17() {
        String[] tiles = { "PP", ".P", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP", "PP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case18() {
        String[] tiles = { "PPPPPP", "PPPPPP", "PP.PPP", "PPPPPP", "PPPPPP", "PPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case19() {
        String[] tiles = { "PPPPPP", "PPPPPP", "PPPPPP", "PPPPPP", "PPPPPP", "PP.PPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case20() {
        String[] tiles = { "PPPPPP", "PPPPPP", "PPPPP.", "PPPPPP", "PPPPPP", "PPPPPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case21() {
        String[] tiles = { ".PPPPP", "PPPPPP", "PPPPPP", "PPPPPP", "PPPPPP", "PPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case22() {
        String[] tiles = { "PPPPPP", "PPPPPP", "PPPPPP", "PPPPPP", "PPPPPP", "PPPPP." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case23() {
        String[] tiles = { "P.PPP", "PPPPP", "PPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case24() {
        String[] tiles = { "PPP", "PPP", ".PP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case25() {
        String[] tiles = { "PPPPPP", "PPPPPP", "PPPPPP", "PPP.PP", "PPPPPP", "PPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case26() {
        String[] tiles = { "PPP", "PP.", "PPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case27() {
        String[] tiles = { "PPPPPPPP", ".PPPPPPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case28() {
        String[] tiles = { "PPP", "P.P" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case29() {
        String[] tiles = { "PPPPPPPP", "PPPP.PPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case30() {
        String[] tiles = { "PPPP", "PPP." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case31() {
        String[] tiles = { "PP", "P." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case32() {
        String[] tiles = { "PP.", "PPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case33() {
        String[] tiles = { "PPPPPPPP", "P.PPPPPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case34() {
        String[] tiles = { "PPP", "PP." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case35() {
        String[] tiles = { "PPPP", "P.PP", "PPPP", "PPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case36() {
        String[] tiles = { "PPPPP", "PPPPP", "PP.PP", "PPPPP", "PPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case37() {
        String[] tiles = { "PPPP", "PPPP", "PPPP", "PP.P", "PPPP", "PPPP", "PPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case38() {
        String[] tiles = { "PPP", "PPP", "P.P" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case39() {
        String[] tiles = { "PPPPP", "PPPPP", "PPP.P" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case40() {
        String[] tiles = { "PPPPP", "PPPPP", "PPPPP", "P.PPP", "PPPPP", "PPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case41() {
        String[] tiles = { "PPPP", "PP.P" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case42() {
        String[] tiles = { "PP", "PP", "PP", "P." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case43() {
        String[] tiles = { "PPPPPP", "PPPPPP", "PP.PPP", "PPPPPP", "PPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case44() {
        String[] tiles = { "PPP", "P.P", "PPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case45() {
        String[] tiles = { "PPPPPPP", "PPPPPPP", "PPPPPPP", "PPP.PPP", "PPPPPPP", "PPPPPPP", "PPPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case46() {
        String[] tiles = { "P.", "PP", "PP", "PP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case47() {
        String[] tiles = { "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPP.PPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case48() {
        String[] tiles = { "PPPPPP", "PPPPPP", "PPPPP.", "PPPPPP", "PPPPPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case49() {
        String[] tiles = { "PPPPP", "P.PPP", "PPPPP", "PPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case50() {
        String[] tiles = { "PPPPPP", "PPP.PP", "PPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case51() {
        String[] tiles = { "PPPPPPPP", ".PPPPPPP", "PPPPPPPP", "PPPPPPPP", "PPPPPPPP", "PPPPPPPP", "PPPPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case52() {
        String[] tiles = { "PPPPPPPP", "PPPPPPPP", "PPPP.PPP", "PPPPPPPP", "PPPPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case53() {
        String[] tiles = { "PPPPPPPP", "PPPPPPPP", "PPPPPPPP", "PPPPPPPP", "PPP.PPPP", "PPPPPPPP", "PPPPPPPP", "PPPPPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case54() {
        String[] tiles = { "PPP.", "PPPP" };
        assertEquals(1, penguintiles.minMoves(tiles));
    }

    @Test
    public void case55() {
        String[] tiles = { "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case56() {
        String[] tiles = { ".P", "PP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case57() {
        String[] tiles = { "PPPPP", "PPPPP", "PP.PP", "PPPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case58() {
        String[] tiles = { "PPP", ".PP", "PPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case59() {
        String[] tiles = { "PPPPPP", "PPPPP." };
        assertEquals(0, penguintiles.minMoves(tiles));
    }

    @Test
    public void case60() {
        String[] tiles = { "PPPP", "P.PP", "PPPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

    @Test
    public void case61() {
        String[] tiles = { "P.P", "PPP" };
        assertEquals(2, penguintiles.minMoves(tiles));
    }

}
