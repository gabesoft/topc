package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class SubsetsTest {
    Subsets subsets = new Subsets();

    @Test
    public void case1() {
        int[] numbers = { 1, 1, 1 };
        assertEquals(2, subsets.findSubset(numbers));
    }

    @Test
    public void case2() {
        int[] numbers = { 1, 1, 1, 1, 2, 2, 2, 2 };
        assertEquals(13, subsets.findSubset(numbers));
    }

    @Test
    public void case3() {
        int[] numbers = { 1, 2, 3, 4 };
        assertEquals(3, subsets.findSubset(numbers));
    }

    @Test
    public void case4() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 20, 30, 40, 50 };
        assertEquals(77, subsets.findSubset(numbers));
    }

    @Test
    public void case5() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };
        assertEquals(8050, subsets.findSubset(numbers));
    }

    @Test
    public void case6() {
        int[] numbers = { 1, 1, 52, 15, 1, 29, 52, 1, 1, 36, 6, 15, 1, 50, 16, 43, 1, 38, 29, 15, 1, 1, 28, 43, 22, 15, 27, 18, 36, 1, 1, 23, 1, 1, 1, 52, 1, 30, 1, 1, 49, 6, 23, 11 };
        assertEquals(305, subsets.findSubset(numbers));
    }

    @Test
    public void case7() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 39, 1, 1, 1, 1, 1, 1, 21, 1, 41, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 64, 1, 1, 1, 1, 27, 1, 1, 1, 1, 49, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 39, 1, 1, 1, 1, 1, 26, 33, 1, 1, 1, 1, 1, 1, 1, 51, 4, 67, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 39, 1, 1, 1, 1, 1, 1, 1, 1, 44, 1, 57, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 62, 1, 1, 51, 1, 1, 1, 14, 1, 1, 1, 16, 1, 1, 1, 1, 39, 1, 1, 16, 1, 68, 1, 1, 39, 1, 1, 9, 1, 1, 1, 1, 43, 1 };
        assertEquals(4965, subsets.findSubset(numbers));
    }

    @Test
    public void case8() {
        int[] numbers = { 1, 1, 1, 165, 126, 1, 1, 1, 1, 1, 346, 1, 54, 230, 1, 1, 1, 345, 1, 322, 189, 1, 1, 1, 1, 1, 168, 1, 1, 1, 1, 256, 1, 1, 262, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 119, 1, 1, 1, 1, 6, 58, 1, 1, 264, 1, 229, 1, 1, 1, 1, 1, 128, 1, 148, 219, 1, 256, 1, 1, 1, 1, 1, 1, 1, 325, 1, 1, 1, 1, 107, 1, 1, 1, 1, 1, 1, 1, 307, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 200, 1, 141, 1, 1, 1, 213, 1, 361, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 325, 1, 1, 1, 352, 1, 1, 1, 1, 1, 1, 186, 1, 1, 1, 1, 1, 1, 1, 191, 1, 66, 1, 1, 1, 1, 1, 1, 1, 1, 132, 1, 1, 1, 1, 227, 1, 1, 112, 1, 1, 1, 1, 1, 1, 1, 102, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 166, 1, 1, 352, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 167, 1, 1, 1, 344, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 212, 1, 1, 280, 1, 1, 1, 1, 75, 1, 1, 323, 1, 1, 1, 1, 1, 147, 1, 1, 1, 1, 1, 42, 1, 1, 1, 1, 204, 1, 1, 1, 121, 1, 1, 1, 1, 1, 1, 1, 262, 196, 1, 1, 1, 1, 1, 1, 1, 316, 1, 1, 251, 279, 1, 299, 1, 1, 150, 1, 120, 1, 1, 1, 1, 1, 1, 1, 1, 1, 232, 1, 1, 225, 1, 1, 1, 1, 1, 1, 1, 1, 275, 1, 1, 1, 1, 217, 1, 1, 1, 1, 226, 1, 113, 1, 1, 1, 1, 350, 1, 1, 1, 1, 1, 222, 316, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 242, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 322, 1, 28, 191, 1, 1, 1, 286, 213, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1, 1, 1, 1, 189, 1, 1, 1, 1, 1, 12, 1, 121, 112, 1, 1, 273, 116, 1, 134, 297, 17, 1, 1, 264, 1, 1, 1, 262, 217, 1, 1, 112, 1, 1, 1, 225, 1, 1, 1, 1, 1, 1, 1, 64, 318, 329, 1, 1, 234, 1, 1, 1, 341, 1, 256, 1, 120, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 350, 1, 1, 1, 156, 145, 335, 1, 68, 1, 270, 1, 1, 1, 67, 1, 1, 1, 51, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 304, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 88, 1, 163, 1, 1, 286, 290, 1, 1, 207, 1, 1, 1, 1, 1, 199, 1, 1, 1, 1, 1, 1, 1, 1, 311, 1, 1, 1, 1, 1, 1, 1, 1, 1, 198, 303, 1, 1, 158, 1, 274, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 283, 1, 162, 1, 1, 219, 1, 1, 234, 1, 1, 1, 348, 1, 1, 1, 96, 112, 311, 1, 1, 262, 1, 1, 1, 1, 1, 1, 1, 1, 1, 252, 181, 1, 295, 1, 64, 1, 126, 1, 173, 1, 89, 1, 1, 361, 1, 120, 1, 1, 1, 1, 1, 1, 153, 1, 1, 172, 320, 1, 1, 277, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 357, 261, 1, 1, 1, 1, 1, 1, 1, 1, 1, 339, 1, 1, 1, 1, 1, 1, 114, 1, 1, 1, 1, 1, 1, 1, 1, 317, 1, 1, 1, 1, 1, 1, 200, 206, 1, 1, 1, 1, 1, 1, 1, 62, 201, 1, 1, 1, 1, 1, 1, 328, 1, 1, 1, 212, 1, 1, 1, 1, 1, 1, 1, 1, 102, 1, 1, 1, 1, 1, 191, 252, 1, 122, 1, 1, 1, 1, 64, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 317, 1, 1, 1, 1, 1, 1, 1, 1, 309, 150, 1, 1, 1, 1, 1, 1, 1, 248, 1, 1, 1, 232, 281, 1, 1, 1, 1, 1, 1, 248, 87, 1, 1, 1, 1, 1, 87, 1, 1, 136, 1, 1, 192, 1, 1, 1, 57, 1, 1, 1, 1, 1, 1, 1, 343, 1, 355, 1, 174, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(94216, subsets.findSubset(numbers));
    }

    @Test
    public void case9() {
        int[] numbers = { 55, 3, 1, 180, 1, 1, 1, 68, 25, 1, 1, 1, 1, 46, 1, 1, 102, 1, 1, 1, 1, 1, 1, 1, 1, 1, 77, 1, 1, 1, 1, 1, 1, 145, 1, 1, 157, 1, 1, 1, 1, 180, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 174, 1, 1, 1, 1, 1, 1, 122, 1, 1, 1, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 204, 1, 1, 1, 193, 191, 22, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 205, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 93, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 201, 129, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 179, 175, 1, 1, 1, 1, 1, 1, 200, 1, 1, 39, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 189, 1, 1, 1, 1, 204, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 1, 200, 1, 116, 197, 1, 174, 157, 1, 1, 1, 100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 145, 1, 95, 1, 1, 1, 1, 1, 95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 48, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 137, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 58, 1, 1, 17, 1, 1, 1, 199, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 192, 1, 1, 1, 1, 1, 137, 46, 1, 1, 1, 1, 182, 115, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 39, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 46, 1, 1, 1, 1, 1, 130, 1, 1, 1, 1, 58, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 201, 1, 1, 101, 1, 1, 1, 182, 1, 1, 142, 1, 1, 1, 1, 177, 1, 1, 60, 51, 178, 1, 1, 1, 63, 63, 1, 149, 200, 1, 1, 35, 1, 1, 201, 1, 1, 1, 1, 68, 1, 1, 25, 1, 1, 201, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 39, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 79, 1, 1, 1, 204, 1, 1, 1, 1, 1, 184, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 177, 1, 1, 1, 1, 1, 200, 1, 1, 1, 1, 1, 1, 1, 114, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 1, 1, 1, 182, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 34, 1, 1, 1, 1, 1, 1, 147, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 45, 1, 1, 119, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 62, 1, 200, 57, 1, 1, 1, 1, 1, 43, 1, 1, 35, 1, 1, 1, 1, 1, 58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 183, 1, 1, 1, 1, 1, 178, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 171, 1, 1, 1, 73, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 180, 1, 1, 1, 198, 1, 1, 1, 1, 196, 1, 1, 1, 1, 32, 1, 1, 1, 1, 1, 1, 1, 122, 1, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 191, 1, 1, 46, 1, 134, 63, 1 };
        assertEquals(121221, subsets.findSubset(numbers));
    }

    @Test
    public void case10() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 80, 1, 49, 1, 1, 1, 286, 32, 423, 1, 95, 1, 1, 249, 1, 1, 1, 370, 1, 1, 440, 1, 130, 1, 190, 333, 368, 1, 445, 156, 1, 1, 384, 1, 1, 48, 1, 1, 214, 247, 1, 208, 1, 359, 11, 320, 1, 29, 1, 1, 1, 1, 1, 1, 106, 1, 1, 1, 1, 1, 1, 1, 1, 368, 90, 1, 1, 1, 1, 1, 1, 300, 398, 429, 1, 395, 1, 358, 1, 68, 1, 1, 1, 1, 361, 1, 5, 325, 445, 1, 1, 207, 1, 211, 1, 59, 1, 1, 423, 1, 124, 1, 214, 1, 457, 1, 1, 1, 1, 355, 1, 1, 350, 1, 1, 124, 1, 272, 1, 1, 380, 1, 93, 1, 1, 1, 1, 1, 1, 1, 1, 80, 1, 1, 166, 306, 423, 1, 1, 67, 89, 1, 120, 72, 1, 1, 1, 227, 1, 1, 88, 1, 1, 1, 1, 1, 1, 1, 1, 344, 152, 1, 1, 135, 1, 1, 1, 1, 216, 214, 1, 292, 1, 1, 1, 257, 1, 342, 1, 1, 1, 1, 1, 49, 267, 59, 1, 258, 1, 1, 260, 1, 202, 1, 1, 425, 346, 275, 1, 1, 1, 1, 1, 314, 1, 1, 1, 1, 1, 157, 1, 224, 1, 320, 302, 401, 1, 1, 398, 1, 1, 1, 1, 273, 1, 343, 444, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 286, 224, 101, 1, 1, 168, 1, 206, 1, 1, 1, 1, 1, 1, 1, 1, 457, 1, 1, 1, 1, 1, 1, 43, 88, 1, 1, 202, 1, 1, 380, 1, 385, 1, 128, 1, 147, 1, 1, 1, 1, 1, 1, 1, 457, 1, 1, 1, 1, 337, 1, 97, 1, 1, 448, 1, 1, 267, 166, 1, 103, 1, 1, 95, 1, 1, 167, 1, 1, 19, 200, 1, 1, 1, 1, 1, 59, 1, 1, 250, 281, 1, 1, 367, 1, 1, 455, 1, 1, 1, 1, 163, 267, 414, 1, 1, 94, 295, 202, 1, 1, 1, 1, 219, 1, 48, 1, 101, 333, 1, 1, 170, 1, 90, 439, 1, 1, 1, 1, 1, 198, 1, 1, 1, 224, 1, 1, 1, 1, 97, 1, 1, 210, 379, 34, 1, 1, 415, 1, 1, 126, 1, 1, 1, 1, 1, 370, 1, 166, 53, 1, 1, 1, 1, 1, 1, 1, 185, 1, 1, 1, 124, 1, 1, 340, 1, 1, 1, 159, 71, 1, 1, 1, 1, 1, 440, 1, 1, 1, 1, 1, 1, 457, 1, 445, 1, 1, 1, 1, 1, 384, 37, 1, 1, 1, 1, 1, 67, 309, 385, 418, 1, 1, 1, 1, 1, 224, 1, 1, 1, 369, 1, 161, 1, 39, 286, 1, 1, 1, 72, 291, 1, 1, 1, 221, 1, 1, 1, 1, 1, 1, 1, 1, 133, 1, 1, 1, 1, 1, 282, 1, 1, 1, 1, 1, 227, 1, 249, 1, 1, 219, 1, 1, 1, 204, 1, 256, 1, 351, 1, 1, 48, 1, 271, 33, 337, 1, 1, 1, 212, 448, 1, 1, 1, 1, 455, 436, 1, 288, 1, 1, 180, 286, 1, 1, 1, 184, 1, 84, 1, 1, 1, 1, 285, 282, 296, 1, 1, 10, 1, 1, 1, 296, 185, 1, 1, 1, 1, 1, 1, 1, 1, 62, 1, 80, 1, 259, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 210, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 457, 5, 1, 1, 62, 198, 1, 1, 45, 1, 202, 439, 155, 1, 1, 29, 1, 1, 7, 1, 432, 216, 371, 72, 1, 1, 1, 150, 1, 322, 1, 224, 1, 1, 166, 147, 1, 1, 1, 1, 192, 281, 1, 1, 1, 1, 1, 1, 1, 433, 1, 368, 227, 1, 27, 1, 1, 1, 1, 1, 1, 454, 1, 191, 86, 389, 1, 216, 184, 90, 1, 47, 1, 1, 118, 340, 1, 1, 224, 1, 1, 227, 420, 1, 423, 1, 8, 1, 1, 131, 1, 186, 1, 1, 1, 185, 381, 1, 1, 1, 1, 1, 48, 1, 1, 1, 1, 1, 1, 159, 252, 97, 1, 1, 1, 367, 1, 1, 1, 1, 1, 1, 1, 374, 1, 123, 1, 1, 1, 1, 1, 137, 421, 1, 1, 1, 1, 211, 1, 1, 1, 1, 1 };
        assertEquals(104280, subsets.findSubset(numbers));
    }

    @Test
    public void case11() {
        int[] numbers = { 1, 1, 115, 88, 1, 1, 74, 1, 66, 1, 1, 1, 1, 38, 1, 1, 109, 1, 1, 1, 1, 1, 1, 1, 1, 40, 1, 1, 109, 85, 1, 1, 1, 1, 1, 1, 1, 1, 51, 1, 1, 1, 1, 1, 1, 79, 1, 42, 1, 42, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 120, 1, 114, 1, 1, 45, 1, 1, 1, 10, 1, 3, 1, 1, 101, 1, 1, 1, 1, 1, 1, 1, 74, 109, 1, 1, 1, 1, 117, 1, 1, 1, 18, 1, 1, 17, 10, 1, 13, 1, 1, 1, 24, 1, 1, 1, 1, 1, 1, 1, 95, 1, 46, 1, 1, 1, 1, 75, 1, 1, 1, 1, 1, 98, 46, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 1, 27, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 41, 1, 1, 1, 1, 1, 114, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 127, 1, 39, 1, 1, 1, 1, 113, 63, 1, 1, 89, 1, 1, 46, 1, 1, 1, 1, 1, 1, 1, 119, 1, 11, 1, 1, 1, 42, 1, 1, 1, 1, 83, 1, 98, 97, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 109, 41, 1, 1, 1, 1, 1, 46, 1, 1, 86, 28, 1, 1, 1, 1, 97, 1, 1, 1, 1, 1, 1, 97, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 25, 1, 95, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(13827, subsets.findSubset(numbers));
    }

    @Test
    public void case12() {
        int[] numbers = { 51, 1, 1, 1, 1, 1, 39, 1, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 34, 1, 33, 1, 1, 1, 1, 53, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 51, 1, 1, 1, 1, 1, 19, 1, 63, 1, 1, 8, 1, 1, 1, 1, 50, 1, 1, 7, 1, 39, 55, 1, 1, 1, 1, 50, 26, 1, 1, 1, 62, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 1, 22, 33, 63, 23, 1, 1, 58, 1, 62, 1, 1, 1, 1, 1, 32, 1, 1, 1, 28, 1, 25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 34, 1, 1, 1, 13, 1, 1, 1, 1, 1, 60, 1, 1, 1, 32, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(5673, subsets.findSubset(numbers));
    }

    @Test
    public void case13() {
        int[] numbers = { 1, 1, 1, 163, 691, 673, 1, 677, 1, 1, 1, 598, 1, 1, 483, 1, 1, 1, 643, 1, 1, 1, 1, 1, 805, 1, 1, 803, 1, 698, 1, 1, 347, 1, 773, 1, 181, 1, 1, 130, 1, 696, 1, 94, 865, 192, 1, 646, 30, 1, 103, 1, 1, 563, 452, 552, 330, 14, 1, 112, 1, 158, 1, 1, 1, 1, 421, 1, 817, 208, 678, 471, 1, 785, 1, 513, 1, 629, 1, 271, 1, 504, 1, 601, 1, 511, 504, 1, 598, 718, 1, 1, 1, 16, 844, 1, 1, 1, 1, 1, 867, 1, 1, 514, 514, 1, 1, 701, 479, 803, 1, 377, 1, 355, 543, 128, 3, 558, 267, 1, 595, 1, 1, 621, 704, 1, 677, 722, 1, 1, 733, 1, 1, 72, 286, 1, 1, 679, 1, 608, 1, 17, 1, 1, 1, 1, 726, 673, 1, 805, 665, 1, 579, 734, 814, 485, 778, 778, 1, 511, 1, 239, 1, 1, 58, 1, 1, 722, 1, 1, 642, 710, 448, 1, 584, 1, 1, 1, 1, 1, 1, 1, 1, 394, 186, 699, 400, 529, 502, 517, 1, 1, 1, 1, 814, 775, 368, 1, 1, 553, 1, 621, 1, 377, 1, 447, 1, 172, 1, 1, 642, 277, 1, 1, 1, 265, 659, 1, 1, 1, 1, 558, 136, 307, 165, 1, 650, 1, 859, 1, 776, 1, 1, 468, 1, 1, 10, 453, 1, 91, 511, 1, 1, 1, 1, 1, 260, 865, 1, 1, 1, 1, 1, 830, 671, 1, 1, 1, 1, 120, 1, 1, 440, 268, 198, 1, 119, 1, 699, 1, 1, 94, 519, 196, 726, 1, 852, 1, 307, 260, 1, 542, 1, 1, 513, 1, 275, 815, 780, 368, 1, 1, 1, 85, 67, 803, 1, 1, 1, 1, 1, 859, 1, 1, 804, 1, 1, 1, 1, 1, 188, 1, 269, 1, 1, 170, 1, 833, 269, 839, 368, 1, 177, 485, 93, 1, 1, 1, 1, 511, 1, 453, 552, 679, 1, 1, 253, 732, 1, 1, 1, 55, 1, 1, 472, 1, 1, 516, 1, 738, 1, 1, 99, 1, 359, 157, 1, 279, 856, 174, 1, 471, 1, 501, 1, 748, 1, 358, 1, 1, 1, 436, 513, 782, 1, 1, 1, 56, 675, 1, 394, 1, 716, 357, 162, 692, 1, 169, 1, 1, 1, 1, 719, 729, 775, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 57, 1, 281, 526, 660, 753, 47, 205, 128, 463, 1, 463, 229, 1, 704, 1, 330, 253, 1, 1, 1, 1, 655, 33, 1, 478, 1, 1, 430, 1, 1, 513, 1, 79, 378, 1, 153, 1, 1, 471, 794, 1, 504, 1, 1, 1, 1, 416, 819, 315, 1, 1, 26, 394, 1, 140, 717, 1, 260, 740, 284, 812, 95, 1, 188, 1, 1, 694, 874, 1, 374, 53, 1, 391, 874, 1, 1, 1, 89, 1, 191, 1, 253, 826, 1, 718, 233, 140, 1, 1, 1, 1, 1, 615, 1, 1, 694, 38, 1, 18, 1, 585, 1, 1, 735, 235, 1, 759, 1, 529, 646, 1, 792, 1, 621, 296, 1, 307, 1, 1, 35, 49, 365, 1, 590, 14, 1, 314, 1, 1, 1, 399, 368, 1, 177, 1, 1, 1, 1, 819, 748, 54, 560, 1, 1, 651, 93, 17, 394, 418, 1, 316, 1, 1, 1, 509, 526, 794, 303, 1, 1, 391, 748, 1, 180, 1, 634, 1, 547, 193, 183, 34, 1, 350, 759, 1, 817, 659, 1, 719, 1, 1, 480, 1, 731, 79, 1, 627, 1, 1, 1, 1, 1, 494, 1, 1, 1, 1, 770, 111, 713, 470, 1, 1, 752, 1, 599, 698, 621, 415, 722, 1, 394, 420, 1, 122, 501, 571, 509, 1, 95, 1, 1, 1, 394, 1, 825, 1, 1, 802, 1, 260, 1, 1, 1, 725, 1, 484, 37, 1, 1, 143, 157, 10, 1, 1, 119, 189, 814, 1, 144, 472, 1, 836, 803, 1, 48, 1, 377, 718, 93, 1, 1, 1, 1, 1, 174, 1, 286, 367, 1, 1, 1, 1, 748, 224, 1, 1, 509, 501, 676, 659, 1, 322, 753, 119, 1, 1, 544, 1, 47, 519, 1, 1, 1, 1, 775, 485, 1, 314, 1, 1, 615, 850, 826, 1, 1, 1, 1, 1, 246, 812, 1, 874, 360, 753, 1, 316, 720, 1, 1, 1, 1, 1, 114, 712, 748, 1, 388, 1, 1, 352, 675, 1, 1, 1, 269, 394, 1, 859, 407, 1, 1, 1, 1, 539, 619, 1, 106, 330, 105, 1, 1, 1, 1, 728, 1, 550, 1, 1, 1, 590, 1, 616, 350, 10, 359, 40, 532, 479, 669, 214, 1, 1, 1, 209, 1, 130, 849, 1, 1, 1, 373, 584, 1, 128, 394, 1, 1, 1, 1, 252, 1, 1, 267, 1, 1, 1, 394, 1, 842, 253, 1, 26, 74, 1, 802, 1, 314, 1, 174, 1, 1, 1, 1, 1, 381, 1, 699, 1, 1, 1, 584, 1, 1, 533, 1, 1, 70, 1, 760, 1, 491, 1, 702, 1, 813, 480, 1, 1, 162, 519, 131, 32, 1, 1, 393, 776, 365, 1, 1, 1, 733, 1, 502, 1, 1, 149, 1, 182, 1, 1, 1, 228, 1, 1, 1, 725, 516, 238, 1, 1, 1, 289, 1, 1, 1, 716, 1, 616, 1, 390, 519 };
        assertEquals(154929, subsets.findSubset(numbers));
    }

    @Test
    public void case14() {
        int[] numbers = { 1, 1, 1, 10, 1, 1, 1, 1, 1, 1, 286, 23, 305, 123, 1, 1, 270, 1, 269, 224, 38, 1, 1, 1, 1, 1, 1, 1, 237, 7, 235, 35, 1, 1, 1, 1, 1, 1, 1, 77, 1, 1, 1, 1, 1, 1, 83, 1, 282, 1, 203, 239, 1, 229, 1, 1, 1, 1, 1, 1, 251, 1, 20, 1, 1, 1, 24, 59, 1, 1, 241, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 180, 1, 1, 57, 94, 1, 1, 219, 1, 1, 1, 1, 69, 177, 1, 295, 1, 246, 221, 1, 1, 85, 1, 1, 1, 165, 1, 1, 177, 66, 1, 105, 101, 49, 1, 188, 149, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 261, 1, 1, 204, 1, 1, 1, 1, 1, 1, 1, 264, 172, 1, 1, 1, 1, 138, 269, 165, 1, 1, 120, 1, 293, 1, 221, 92, 63, 76, 1, 1, 1, 1, 309, 240, 60, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 196, 1, 1, 139, 1, 1, 1, 119, 1, 1, 126, 1, 1, 1, 1, 1, 1, 1, 1, 15, 221, 1, 15, 228, 1, 1, 1, 1, 68, 1, 1, 1, 1, 281, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 132, 1, 174, 1, 1, 239, 1, 1, 1, 1, 181, 1, 1, 1, 1, 1, 181, 153, 181, 1, 1, 224, 47, 1, 1, 1, 1, 1, 1, 1, 119, 1, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 149, 1, 23, 173, 195, 60, 1, 1, 1, 1, 1, 1, 278, 1, 6, 253, 281, 13, 1, 155, 1, 5, 1, 1, 1, 1, 286, 1, 1, 1, 179, 1, 1, 1, 1, 182, 1, 1, 1, 73, 1, 1, 210, 1, 1, 1, 1, 307, 269, 1, 1, 58, 301, 1, 293, 1, 1, 1, 1, 1, 1, 1, 1, 2, 76, 1, 1, 1, 1, 1, 1, 1, 10, 1, 16, 1, 1, 203, 1, 156, 42, 247, 1, 1, 1, 1, 1, 1, 230, 1, 164, 251, 1, 278, 1, 1, 177, 1, 1, 1, 1, 270, 1, 1, 1, 1, 1, 1, 1, 1, 89, 23, 1, 1, 1, 1, 1, 279, 1, 1, 1, 213, 1, 1, 194, 1, 1, 1, 167, 1, 1, 1, 1, 1, 1, 20, 49, 219, 266, 1, 1, 1, 292, 1, 1, 219, 1, 1, 116, 1, 1, 1, 1, 1, 1, 28, 184, 291, 1, 99, 1, 1, 1, 115, 1, 1, 103, 133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 48, 301, 1, 1, 1, 16, 238, 1, 53, 1, 194, 1, 23, 1, 1, 144, 35, 1, 1, 1, 1, 156, 1, 1, 1, 1, 1, 1, 1, 304, 1, 180 };
        assertEquals(92465, subsets.findSubset(numbers));
    }

    @Test
    public void case15() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 28 };
        assertEquals(33839, subsets.findSubset(numbers));
    }

    @Test
    public void case16() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(55, subsets.findSubset(numbers));
    }

    @Test
    public void case17() {
        int[] numbers = { 12, 14, 12, 1, 9, 1, 9, 12, 3, 4, 1, 1, 3, 9, 1, 1 };
        assertEquals(39, subsets.findSubset(numbers));
    }

    @Test
    public void case18() {
        int[] numbers = { 1, 957, 201, 426, 998, 442, 1, 569, 95, 775, 950, 1, 56, 1000, 736, 1, 687, 761, 774, 606, 710, 46, 611, 873, 1000, 647, 868, 918, 919, 759, 1000, 1, 442, 920, 1000, 824, 774, 1000, 312, 394, 889, 1, 552, 748, 67, 763, 1, 932, 826, 209, 1, 699, 428, 283, 188, 1, 960, 1000, 805, 1, 1, 270, 1, 494, 1000, 241, 1, 930, 1, 758, 932, 1, 344, 775, 1, 288, 461, 1, 1, 1, 814, 725, 1, 1000, 554, 7, 1, 1, 532, 1, 649, 457, 758, 645, 323, 131, 1, 394, 60, 248, 455, 616, 1, 742, 213, 578, 687, 1, 1, 376, 504, 1, 289, 1, 711, 1, 91, 234, 131, 546, 1000, 1, 1, 714, 60, 488, 1, 474, 932, 496, 1, 176, 419, 483, 597, 523, 936, 930, 648, 940, 1, 282, 227, 348, 194, 427, 117, 26, 431, 490, 651, 1, 112, 1, 651, 297, 635, 1, 1, 177, 87, 963, 213, 647, 1, 110, 24, 878, 253, 529, 150, 366, 541, 440, 420, 23, 821, 1, 745, 60, 1, 950, 992, 321, 543, 824, 785, 505, 863, 531, 592, 1, 1, 139, 779, 861, 1, 201, 1, 809, 1, 289, 1, 725, 494, 909, 187, 59, 1, 50, 1, 945, 365, 1, 765, 1, 500, 1000, 1, 709, 6, 613, 684, 217, 308, 1, 988, 107, 596, 1, 552, 190, 826, 718, 234, 251, 84, 283, 1, 1000, 447, 253, 209, 824, 250, 754, 1, 427, 1, 431, 1, 577, 993, 313, 255, 1, 347, 589, 8, 589, 56, 913, 1, 930, 223, 685, 404, 1, 900, 75, 403, 1, 1, 530, 465, 785, 209, 131, 1, 288, 1, 487, 1, 1, 83, 929, 1, 1000, 95, 1, 1, 1000, 345, 208, 1, 129, 577, 1, 1000, 389, 434, 685, 227, 929, 28, 53, 321, 935, 1, 170, 227, 759, 329, 1, 1, 1, 360, 609, 1, 556, 585, 775, 1, 231, 1, 1, 427, 1, 271, 81, 749, 223, 78, 1, 294, 142, 1000, 137, 709, 826, 1, 383, 55, 992, 514, 163, 687, 421, 1, 234, 859, 240, 1, 1, 35, 285, 1, 578, 188, 191, 782, 1, 437, 873, 237, 281, 207, 1, 898, 436, 867, 1, 1, 259, 75, 1, 364, 525, 275, 248, 1, 835, 400, 612, 220, 1, 973, 1, 529, 241, 1, 291, 947, 129, 1, 700, 861, 431, 624, 1, 491, 278, 142, 107, 362, 713, 1000, 7, 1, 756, 541, 289, 50, 462, 427, 289, 865, 201, 20, 1, 1, 848, 196, 302, 1, 538, 1000, 1, 659, 129, 979, 856, 129, 637, 1000, 936, 690, 110, 728, 348, 522, 666, 714, 685, 1, 177, 654, 889, 562, 910, 992, 531, 810, 426, 1000, 585, 383, 472, 934, 772, 727, 1, 116, 648, 41, 107, 714, 1, 189, 104, 223, 979, 314, 352, 285, 1000, 1, 369, 1000, 505, 10, 222, 1000, 846, 42, 1, 1, 117, 1, 1000, 1, 343, 42, 343, 365, 116, 1, 1, 994, 610, 950, 1, 936, 1, 131, 1000, 438, 771, 327, 705, 1, 775, 324, 123, 1, 1, 1, 514, 998, 1, 455, 638, 1, 123, 1, 42, 1, 935, 475, 907, 71, 1, 74, 1, 893, 762, 45, 1, 932, 1000, 867, 1, 598, 713, 1000, 383, 1, 541, 286, 1, 378, 166, 1, 797, 1, 874, 155, 830, 870, 307, 17, 322, 786, 1, 945, 1000, 22, 1000, 538, 821, 6, 1, 812, 50, 895, 111, 316, 580, 685, 929, 642, 580, 1, 93, 1000, 282, 447, 614, 211, 1000, 910, 288, 235, 1, 84, 1, 690, 1, 87, 16, 1, 894, 685, 420, 571, 1, 795, 1, 278, 1, 684, 753, 1000, 1, 1, 873, 1000, 1, 63, 806, 1, 1, 543, 1, 382, 436, 20, 688, 987, 1, 910, 1, 851, 95, 1, 812, 684, 50, 548, 1, 770, 1000, 1000, 125, 672, 715, 558, 1, 585, 1, 618, 996, 1, 930, 447, 1, 356, 84, 21, 727, 1, 650, 1, 129, 651, 1, 307, 363, 531, 962, 214, 578, 944, 513, 490, 648, 674, 647, 481, 304, 747, 360, 746 };
        assertEquals(55556, subsets.findSubset(numbers));
    }

    @Test
    public void case19() {
        int[] numbers = { 161, 79, 1, 79, 1, 101, 1, 91, 1, 1, 1, 196, 1, 202, 1, 133, 111, 1, 1, 66, 117, 1, 79, 80, 1, 127, 1, 1, 26, 1, 1, 1, 90, 1, 212, 140, 1, 174, 202, 1, 1, 1, 1, 1, 109, 18, 46, 11, 153, 1, 208, 87, 1, 1, 16, 101, 1, 46, 6, 1, 79, 1, 1, 1, 113, 1, 1, 1, 1, 153, 115, 208, 63, 177, 1, 1, 13, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 79, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 185, 1, 103, 6, 88, 1, 1, 11, 1, 166, 1, 1, 1, 183, 1, 1, 14, 109, 1, 1, 1, 1, 65, 1, 77, 1, 1, 144, 1, 188, 1, 112, 1, 201, 60, 6, 183, 1, 208, 1, 1, 197, 163, 1, 1, 73, 1, 1, 115, 111, 1, 1, 61, 67, 1, 211, 14, 1, 1, 1, 1, 1, 1, 191, 1, 163, 1, 212, 1, 12, 24, 1, 110, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 102, 1, 208, 1, 1, 1, 113, 1, 185, 1, 1, 197, 46, 53, 1, 73, 1, 1, 1, 1, 90, 111, 1, 144, 72, 1, 1, 1, 1, 180, 1, 1, 81, 163, 1, 1, 22, 1, 1, 1, 1, 1, 60, 1, 1, 111, 1, 165, 1, 1, 1, 1, 196, 1, 1, 1, 1, 202, 1, 1, 1, 1, 1, 196, 1, 1, 1, 39, 39, 1, 1, 1, 1, 1, 21, 1, 153, 195, 1, 1, 1, 1, 208, 1, 131, 1, 1, 9, 195, 1 };
        assertEquals(13098, subsets.findSubset(numbers));
    }

    @Test
    public void case20() {
        int[] numbers = { 1, 95, 1, 1, 1, 116, 103, 1, 145, 140, 94, 1, 65, 1, 1, 1, 104, 50, 1, 67, 10, 1, 1, 74, 114, 142, 54, 126, 124, 50, 134, 84, 1, 55, 57, 1, 88, 16, 1, 1, 58, 116, 141, 1, 1, 62, 15, 17, 116, 1, 37, 141, 1, 96, 31, 29, 131, 43, 1, 3, 50, 146, 20, 1, 97, 1, 1, 1, 1, 96, 16, 45, 1, 1, 36, 125, 147, 110, 37, 108, 135, 1, 1, 1, 19, 1, 24, 126, 138, 133, 143, 65, 82, 1, 32, 118, 1, 57, 1, 1, 49, 26, 135, 62 };
        assertEquals(2056, subsets.findSubset(numbers));
    }

    @Test
    public void case21() {
        int[] numbers = { 1, 1, 1, 290, 151, 1, 457, 1, 526, 442, 3, 425, 1, 1, 470, 527, 1, 1, 1, 405, 465, 1, 1, 232, 492, 290, 1, 371, 63, 1, 130, 55, 1, 1, 1, 93, 1, 1, 564, 1, 3, 491, 83, 1, 1, 14, 1, 121, 576, 1, 1, 1, 184, 1, 1, 35, 450, 1, 1, 1, 1, 1, 429, 59, 537, 1, 1, 1, 271, 1, 1, 526, 1, 27, 264, 447, 1, 319, 429, 1, 242, 1, 97, 1, 1, 1, 1, 1, 1, 1, 1, 267, 290, 1, 1, 388, 11, 97, 1, 1, 1, 1, 324, 532, 201, 237, 350, 1, 1, 1, 271, 201, 1, 427, 1, 1, 1, 1, 547, 40, 1, 243, 1, 79, 1, 1, 1, 1, 258, 120, 1, 565, 1, 1, 1, 375, 562, 534, 57, 201, 180, 1, 1, 586, 342, 1, 1, 40, 1, 1, 56, 117, 576, 1, 1, 1, 1, 471, 45, 1, 180, 76, 1, 1, 194, 393, 1, 1, 132, 356, 1, 82, 1, 40, 365, 561, 81, 525, 400, 337, 582, 1, 428, 43, 1, 1, 51, 368, 1, 1, 295, 34, 516, 1, 1, 537, 1, 1, 151, 318, 258, 215, 1, 1, 361, 123, 530, 1, 1, 367, 1, 334, 1, 66, 1, 423, 1, 82, 554, 1, 1, 317, 216, 434, 399, 88, 520, 151, 326, 182, 1, 1, 1, 1, 394, 1, 1, 1, 431, 1, 1, 1, 1, 372, 1, 1, 1, 1, 1, 1, 471, 447, 160, 431, 22, 220, 1, 1, 1, 349, 1, 119, 140, 1, 39, 1, 1, 75, 549, 1, 1, 1, 396, 537, 1, 1, 571, 104, 188, 1, 306, 226, 1, 1, 504, 356, 1, 1, 324, 368, 1, 1, 453, 1, 483, 1, 1, 1, 77, 405, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 489, 57, 1, 1, 1, 1, 420, 498, 71, 388, 282, 288, 38, 555, 1, 430, 1, 154, 1, 526, 1, 447, 4, 458, 1, 1, 1, 94, 231, 1, 1, 226, 139, 1, 1, 1, 349, 374, 1, 1, 538, 1, 1, 1, 1, 1, 281, 1, 29, 1, 84, 310, 1, 75, 492, 1, 121, 1, 113, 1, 362, 46, 1, 408, 1, 1, 1, 1, 57, 18, 238, 1, 150, 1, 1, 203, 492, 1, 1, 1, 538, 1, 1, 1, 483, 508, 1, 1, 383, 290, 74, 1, 1, 96, 1, 1, 427, 306, 18, 188, 259, 1, 1, 1, 1, 1, 125, 1, 75, 414, 1, 154, 390, 1, 183, 1, 1, 442, 366, 1, 1, 216, 1, 204, 44, 483, 357, 75, 511, 1, 1, 1, 317, 498, 1, 428, 1, 115, 1, 510, 17, 258, 430, 1, 84, 345, 1, 1, 1, 251, 375, 123, 205, 1, 1, 1, 1, 123, 1, 1, 278, 166, 1, 1, 162, 1, 1, 1, 485, 1, 124, 425, 1, 117, 483, 1, 1, 4, 1, 1, 164, 1, 1, 1, 112, 47, 47, 3, 267, 1, 1, 431, 430, 1, 1, 1, 1, 1, 1, 1, 476, 1, 365, 117, 488, 150, 311, 1, 300, 1, 1, 1, 15, 120, 500, 120, 436, 29, 1, 1, 366, 1, 1, 1, 1, 1, 1, 1, 180, 1, 1, 1, 15, 449, 81, 149, 1, 1, 1, 9, 458, 1, 247, 121, 1, 1, 254, 1, 1, 391, 1, 97, 1, 482, 1, 1, 1, 1, 1, 1, 457, 1, 1, 1, 341, 47, 1, 1, 1, 1, 1, 84, 1, 534, 1, 1, 1, 1, 1, 1, 23, 1, 201, 1, 203, 1, 84, 269, 1, 1, 1, 1, 1, 1, 180, 1, 397, 1, 231, 1, 1, 123, 1, 1, 1, 371, 13, 1, 1, 487, 566, 1, 394, 154, 1, 448, 1, 254 };
        assertEquals(98610, subsets.findSubset(numbers));
    }

    @Test
    public void case22() {
        int[] numbers = { 668, 278, 99, 275, 944, 864, 1, 297, 8, 1, 1, 174, 1, 276, 870, 1, 556, 1, 1000, 805, 1, 201, 266, 727, 589, 1000, 1, 745, 1, 524, 620, 1, 856, 495, 759, 560, 304, 123, 806, 467, 241, 1, 808, 841, 227, 1, 472, 1, 1, 683, 1000, 1, 787, 120, 1000, 1, 194, 267, 1, 116, 578, 1, 1000, 507, 1000, 868, 1000, 181, 607, 434, 1, 1, 61, 1000, 1, 991, 81, 155, 1, 829, 1000, 1000, 37, 992, 1, 401, 965, 1, 306, 125, 441, 178, 1, 200, 1000, 621, 1000, 617, 13, 1, 70, 577, 801, 772, 1000, 502, 806, 1, 1000, 1, 410, 1, 1, 932, 1, 201, 495, 289, 996, 818, 1, 432, 181, 1, 467, 1, 1, 1, 1, 495, 801, 577, 349, 890, 1, 1000, 1, 350, 739, 104, 410, 1, 713, 1, 1, 1000, 96, 905, 1, 529, 1000, 1, 29, 1, 1, 1000, 10, 1, 125, 620, 829, 541, 1000, 696, 756, 1, 608, 1, 96, 372, 956, 1000, 1, 1000, 1, 617, 1, 414, 962, 239, 874, 221, 285, 1, 1, 851, 1, 241, 1, 1000, 797, 38, 1000, 1000, 665, 1, 323, 648, 1000, 2, 1, 687, 1, 297, 276, 1, 349, 947, 1, 1, 1, 1, 258, 13, 1, 904, 1, 1000, 84, 1, 614, 1, 1, 1, 1, 226, 1, 1, 1000, 1, 935, 773, 608, 1, 1, 1, 1000, 680, 1000, 422, 1000, 354, 1000, 1, 1000, 1, 353, 1, 1, 1, 466, 537, 719, 1, 19, 1, 594, 1, 1, 241, 331, 781, 1, 976, 987, 564, 1, 1000, 344, 303, 1, 1, 38, 1, 1, 1, 866, 1, 868, 219, 126, 460, 988, 1000, 1, 1, 290, 730, 77, 1, 339, 1, 96, 811, 833, 404, 137, 1000, 1, 1, 1, 560, 221, 568, 619, 995, 1000, 36, 648, 1, 970, 858, 1, 243, 221, 807, 402, 1000, 995, 1000, 1000, 1, 252, 1, 100, 176, 1, 1, 71, 177, 570, 1, 1, 1, 82, 231, 310, 1000, 1, 4, 84, 648, 594, 928, 96, 1, 1, 1, 491, 197, 1, 333, 1, 1, 772, 1, 1, 942, 664, 599, 118, 1, 62, 954, 492, 1000, 1000, 854, 143, 1, 1, 1, 958, 1000, 793, 194, 1000, 459, 680, 102, 591, 918, 1, 262, 1, 1, 617, 1, 102, 797, 1000, 1000, 568, 1, 495, 1, 345, 181, 684, 1, 1, 1, 1, 1, 1, 153, 1, 55, 1000, 155, 1000, 1, 1, 1000, 742, 1, 623, 1, 1, 641, 1000, 952, 5, 591, 1000, 680, 829, 278, 1, 310, 660, 222, 1000, 231, 1, 1, 1, 1, 1, 187, 580, 1000, 117, 95, 1, 587, 939, 613, 93, 1, 1, 229, 1, 1, 460, 1, 779, 688, 624, 1000, 166, 1000, 91, 1, 1, 8, 769, 8, 587, 1, 811, 1, 1000, 971, 628, 939, 938, 1, 1, 1, 155, 1, 136, 742, 1000, 1, 989, 1, 582, 1, 482, 375, 803, 2, 1000, 1000, 422, 745, 618, 254, 1, 403, 1, 1, 1, 1000, 182, 289, 241, 691, 457, 1, 1, 855, 1, 1000, 182, 4, 1, 1, 41, 1, 772, 1, 706, 545, 1, 1000, 1, 1, 1000, 1, 670, 714, 1, 1, 757, 1, 321, 303, 1000, 201, 613, 732, 1, 20, 1, 1, 1, 1, 745, 201, 410, 1, 761, 1, 902, 629, 1000, 53, 448, 1000, 769, 437, 460, 428, 308, 855, 55, 331, 135, 201, 1, 1, 1, 890, 429, 932, 566, 129, 1, 799, 1, 1, 44, 1, 168, 1, 99, 1, 130, 1000, 1, 848, 1, 587, 1000, 1, 1, 848, 174, 1, 75, 613, 1, 1, 1, 591, 524, 784, 1000, 210, 854, 1, 1, 1, 258, 369, 1, 647, 135, 772, 1, 1000, 647, 235, 184, 994, 816, 1, 466, 324, 1, 1, 987, 1, 570, 814, 674, 582, 1000, 1000, 379, 162, 132, 1, 910, 406, 1, 1, 788, 1, 543, 1000, 71, 602, 1, 1000, 1, 1, 54, 1, 129, 706, 182, 645, 1, 1, 1, 119, 550, 535, 1, 309, 1, 1, 951, 1, 944, 1, 1, 688, 1, 989, 288, 428, 1, 258, 99, 746, 612, 1000, 495, 1, 905, 1, 1, 1, 807, 1, 1, 1, 1, 1000, 1, 1, 1000, 36, 118, 1, 439, 537, 743, 788, 1, 309, 1, 229, 977, 254, 291, 1, 1, 1, 460, 680, 1, 731, 344, 94, 1, 647, 207, 93, 1, 1, 869, 1, 1, 1000, 939, 1, 1, 3, 689, 1, 242, 910, 1, 441, 276, 1, 1, 1, 266, 210, 102, 803, 1, 627, 1000, 1, 361, 582, 1000, 1000, 848, 607, 618, 84, 1000, 1, 1000, 942, 1, 113, 389, 1, 1, 371, 141, 350, 272, 1, 375, 165, 607, 418, 680, 797, 1, 312, 1, 158, 230, 1, 843, 502, 1000, 543, 803, 1000, 383, 336, 988, 1000, 648, 545, 1, 1, 41, 348, 612, 19, 1, 797, 268, 535, 1, 1000, 1, 84, 122, 888, 840, 1000, 1, 69, 986, 418, 1, 38, 1, 308, 889, 1, 981, 1, 1, 99, 618, 1000, 1000, 859, 239, 1, 597, 1, 873, 1, 910, 1, 136, 72, 1000, 1, 572, 582, 369, 981, 1, 1, 1, 450, 57, 1, 1, 254, 1, 728, 85, 875, 1, 322, 1, 803, 829, 797, 1, 1000, 885, 770, 1000, 1, 239, 733, 817, 952, 919, 1000, 641, 1, 53, 1, 1000, 216, 1, 71, 39, 620, 511, 1, 854, 840, 1, 1, 628, 831, 973, 809, 1, 415, 1, 450, 1, 685, 618, 198, 1000, 1, 506, 942, 1, 1, 871, 1000, 182, 797, 461 };
        assertEquals(164758, subsets.findSubset(numbers));
    }

    @Test
    public void case23() {
        int[] numbers = { 1, 1, 1, 1, 252, 1, 1, 1, 1, 1, 1, 61, 1, 1, 246, 1, 156, 1, 1, 1, 1, 113, 1, 1, 1, 1, 1, 1, 1, 79, 1, 1, 24, 1, 1, 1, 1, 1, 1, 1, 41, 1, 1, 1, 311, 1, 1, 1, 1, 1, 1, 1, 281, 1, 1, 74, 1, 115, 1, 205, 1, 1, 1, 1, 1, 1, 309, 1, 1, 285, 1, 1, 1, 230, 257, 1, 9, 1, 1, 1, 1, 1, 1, 1, 236, 1, 250, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 80, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 272, 1, 1, 1, 1, 132, 1, 1, 1, 1, 1, 1, 1, 131, 170, 275, 1, 1, 257, 1, 1, 95, 1, 1, 1, 1, 1, 288, 1, 1, 1, 1, 223, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 257, 1, 1, 1, 68, 158, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 318, 1, 1, 1, 89, 1, 1, 1, 102, 1, 167, 96, 1, 278, 1, 1, 166, 1, 1, 1, 1, 1, 1, 182, 1, 3, 1, 1, 80, 113, 1, 1, 1, 1, 1, 1, 67, 1, 1, 1, 130, 31, 196, 1, 124, 1, 1, 70, 1, 78, 318, 1, 1, 19, 1, 300, 252, 1, 1, 1, 1, 101, 1, 1, 214, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 151, 1, 1, 25, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 72, 1, 8, 1, 171, 1, 1, 1, 275, 307, 109, 198, 1, 1, 49, 1, 1, 1, 1, 145, 1, 1, 1, 158, 1, 1, 1, 196, 1, 1, 1, 1, 1, 1, 1, 1, 225, 1, 1, 311, 1, 4, 1, 142, 1, 271, 1, 1, 1, 1, 231, 156, 1, 1, 309, 1, 1, 36, 1, 1, 1, 1, 1, 1, 253, 1, 1, 196, 1, 1, 24, 1, 201, 1, 1, 1, 275, 1, 1, 1, 1, 1, 212, 1, 1, 1, 1, 1, 85, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 230, 1, 1, 1, 1, 1, 1, 196, 1, 145, 1, 241, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 207, 131, 1, 282, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 87, 1, 1, 80, 1, 1, 78, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 91, 1, 1, 252, 137, 1, 1, 265, 1, 1, 1, 1, 1, 1, 1, 61, 1, 221, 1, 1, 1, 168, 1, 100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 1, 1, 1, 285, 1, 1, 1, 1, 225, 154, 1, 61, 1, 1, 1, 63, 313, 1, 1, 132, 1, 1, 31, 1, 1, 1, 6, 1, 1, 156, 1, 1, 1, 1, 137, 1, 1, 1, 2, 1, 86, 1, 1, 87, 1, 59, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 196, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 278, 1, 1, 57, 1, 84, 1, 79, 1, 1, 147, 1, 132, 1, 127, 1, 1, 272, 1, 1, 183, 1, 199, 1, 170, 230, 77, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 80, 159, 1, 1, 1, 1, 1, 1, 1, 1, 313, 1, 311, 1, 1, 57, 1, 1, 1, 1, 1, 58, 1, 1, 1, 1, 80, 1, 184, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 257, 1, 268, 1, 1, 1, 1, 1, 1, 1, 1, 106, 1, 1, 1, 1, 1, 263, 221, 1, 205, 1, 209, 1, 1, 1, 1, 1, 1, 268, 1, 78, 309, 1 };
        assertEquals(225022, subsets.findSubset(numbers));
    }

    @Test
    public void case24() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 142, 1, 1, 1, 1, 1, 1, 1, 1, 96, 1, 1, 1, 1, 1, 32, 1, 95, 1, 1, 1, 1, 1, 1, 1, 81, 64, 21, 1, 21, 13, 1, 1, 1, 1, 1, 118, 82, 94, 1, 1, 1, 28, 71, 1, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 1, 1, 1, 71, 79, 19, 32, 16, 1, 1, 1, 20, 1, 29, 1, 1, 1, 1, 127, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 100, 50, 1, 53, 1, 1, 1, 1, 119, 1, 1, 1, 113, 1, 51, 68, 1, 117, 1, 1, 95, 120, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 134, 1, 70, 1, 1, 1, 1, 103, 1, 1, 77, 1, 1, 1, 1, 1, 1, 59, 1, 1, 1, 1, 1, 1, 1, 103, 69, 1, 1, 1, 1, 1, 1, 1, 41, 100, 1, 44, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 140, 84, 1, 1, 95, 1, 1, 1, 116, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 41, 1, 1, 1, 1, 1, 1, 1, 1, 1, 124, 1, 69, 1, 1, 1, 1, 1, 1, 103, 1, 1, 117, 4, 1, 1, 1, 140, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 39, 68, 69, 1, 1, 1, 1, 1, 5, 32, 1, 1, 1 };
        assertEquals(17528, subsets.findSubset(numbers));
    }

    @Test
    public void case25() {
        int[] numbers = { 1, 1, 36, 498, 657, 432, 471, 460, 1, 1, 378, 109, 1, 77, 682, 240, 201, 713, 245, 657, 1, 398, 619, 725, 521, 747, 153, 1, 265, 1, 352, 497, 439, 313, 1, 1, 1, 1, 1, 1, 429, 30, 1, 561, 291, 1, 1, 354, 641, 725, 1, 53, 1, 1, 1, 142, 1, 544, 44, 1, 271, 339, 1, 425, 725, 591, 1, 1, 1, 1, 737, 553, 1, 1, 1, 1, 1, 174, 2, 1, 286, 1, 1, 307, 402, 1, 1, 1, 103, 92, 1, 1, 604, 327, 1, 675, 1, 1, 1, 132, 524, 224, 1, 652, 1, 742, 1, 539, 92, 1, 1, 1, 654, 77, 1, 1, 671, 110, 37, 1, 170, 595, 485, 1, 773, 308, 1, 1, 1, 389, 94, 313, 469, 97, 1, 1, 1, 1, 1, 786, 756, 675, 1, 286, 1, 238, 685, 1, 12, 1, 2, 465, 1, 1, 1, 301, 595, 187, 1, 1, 1, 207, 1, 1, 373, 712, 55, 1, 527, 1, 1, 729, 417, 1, 122, 265, 80, 1, 554, 463, 746, 411, 1, 1, 1, 334, 1, 55, 1, 122, 1, 1, 247, 725, 1, 1, 1, 1, 1, 309, 1, 1, 1, 741, 245, 1, 1, 600, 1, 1, 1, 1, 1, 570, 1, 1, 675, 1, 1, 1, 746, 1, 1, 1, 42, 309, 1, 180, 553, 465, 1, 1, 1, 747, 1, 1, 300, 489, 621, 83, 746, 1, 486, 224, 1, 378, 392, 663, 1, 264, 1, 649, 625, 1, 1, 12, 335, 756, 1, 1, 1, 1, 1, 1, 692, 485, 1, 634, 1, 1, 1, 1, 224, 1, 472, 260, 129, 284, 1, 235, 1, 61, 465, 120, 1, 240, 786, 1, 1, 222, 1, 243, 1, 199, 729, 1, 1, 301, 77, 1, 55, 196, 1, 1, 74, 1, 39, 436, 1, 352, 382, 1, 559, 1, 283, 743, 473, 1, 613, 1, 1, 1, 600, 517, 303, 1, 1, 1, 653, 1, 1, 122, 1, 1, 1, 501, 1, 58, 44, 1, 1, 1, 1, 1, 1, 682, 1, 432, 1, 1, 625, 187, 1, 1, 662, 44, 1, 1, 332, 448, 1, 1, 1, 469, 328, 625, 1, 61, 1, 1, 1, 383, 623, 369, 321, 1, 1, 1, 162, 1, 129, 1, 335, 1, 1, 328, 1, 1, 1, 1, 1, 1, 221, 1, 642, 498, 336, 745, 83, 450, 1, 1, 258, 1, 1, 1, 1, 1, 1, 308, 1, 1, 501, 474, 1, 142, 1, 1, 1, 1, 237, 1, 1, 1, 466, 378, 1, 1, 1, 492, 1, 1, 497, 61, 53, 625, 756, 1, 1, 1, 664, 419, 476, 1, 1, 1, 1, 275, 372, 1, 473, 402, 1, 1, 1, 354, 1, 778, 1, 1, 174, 387, 55, 1, 783, 1, 1, 274, 1, 1, 1, 36, 1, 564, 1, 716, 1, 631, 396, 1, 12, 354, 308, 132, 1, 1, 453, 1, 1, 1, 15, 1, 235, 444, 1, 1, 453, 1, 1, 1, 1, 320, 1, 42, 1, 1, 1, 731, 1, 1, 762, 294, 411, 1, 1, 369, 1, 6, 1, 1, 510, 1, 1, 256, 269, 1, 1, 1, 153, 1, 1, 553, 291, 1, 583, 1, 1, 371, 1, 1, 1, 42, 36, 470, 662, 1, 1, 1, 449, 277, 1, 1, 1, 1, 625, 1, 581, 398, 1, 1, 302, 230, 326, 1, 1, 675, 67, 1, 434, 163, 471, 1, 1, 539, 1, 3, 1, 628, 1, 1, 662, 1, 1, 1, 1, 1, 1, 204, 1, 676, 396, 1, 330, 1, 1, 55, 705, 1, 1, 565, 1, 1, 768, 323, 747, 697, 1, 626, 1, 199, 117, 1, 721, 1, 442, 260, 1, 1, 153, 1, 595, 1, 302, 1, 16, 461, 167, 748, 1, 685, 290, 695, 1, 1, 1, 1, 294, 1, 679, 1, 215, 1, 1, 1, 1, 1, 691, 652, 1, 591, 204, 241, 1, 26, 1, 1, 1, 1, 452, 73, 1, 1, 303, 1, 424, 1, 629, 1, 1, 328, 1, 542, 328, 774, 1, 1, 293, 1, 675, 1, 1, 777, 682, 1, 318, 740, 1, 725, 380, 142, 1, 1, 153, 1, 1, 725, 342, 625, 1, 1, 1, 321, 150, 439, 263, 485, 216, 1, 795, 285, 1, 222, 1, 742, 1, 458, 354, 720, 1, 1, 613, 128, 318, 725, 1, 122, 1, 506, 87, 1, 405, 1, 301, 1, 121, 1, 338, 1, 267, 256, 231, 150, 1, 1, 244, 125, 1, 1, 1, 1, 576, 1, 1, 153, 327, 367, 240, 1, 1, 1, 1, 188, 1, 1, 1, 1, 1, 1, 686, 1, 604, 1, 1, 1, 455, 121, 1, 703, 1, 1, 717, 1, 1, 1, 1, 1, 1, 1, 1, 1, 106, 1, 1, 27, 1, 301, 1, 1, 1, 1, 1, 570, 260, 326, 1, 1, 1, 373, 1, 1, 136, 1, 790, 1, 39, 207, 1, 1, 371, 1, 565, 1, 1, 473, 1, 1, 461, 517, 1, 1, 30, 1, 725, 1, 1, 322, 440, 1, 1, 205, 1, 1, 1, 34, 1, 224, 1, 1, 1, 1, 1, 1, 570, 1, 1, 382, 473, 725, 181, 1, 321, 453, 93, 1, 204, 1, 1, 1, 1, 1, 1, 301, 742, 109, 1, 1, 317, 1, 1, 1, 679, 1, 728, 770, 1, 1, 1, 1, 1, 768, 63, 301, 1, 1, 52 };
        assertEquals(211608, subsets.findSubset(numbers));
    }

    @Test
    public void case26() {
        int[] numbers = { 141, 1, 1, 1, 230, 161, 324, 318, 1, 213, 1, 1, 203, 1, 1, 267, 166, 1, 1, 300, 295, 213, 22, 161, 157, 1, 1, 1, 1, 346, 1, 247, 76, 253, 1, 130, 1, 1, 113, 1, 1, 1, 67, 76, 1, 1, 1, 168, 175, 292, 1, 1, 1, 130, 1, 1, 113, 1, 195, 1, 161, 1, 42, 322, 1, 64, 236, 1, 71, 1, 176, 302, 228, 48, 191, 1, 147, 195, 1, 1, 59, 109, 241, 282, 1, 33, 1, 138, 80, 1, 26, 1, 132, 1, 1, 267, 157, 1, 302, 80, 75, 1, 1, 1, 32, 1, 1, 155, 349, 1, 1, 311, 48, 1, 1, 1, 248, 1, 59, 306, 1, 302, 152, 202, 1, 1, 246, 290, 1, 259, 41, 1, 1, 233, 1, 284, 1, 1, 1, 169, 303, 321, 142, 65, 235, 1, 1, 291, 1, 42, 183, 277, 176, 1, 57, 321, 1, 94, 96, 248, 217, 138, 246, 1, 1, 1, 96, 1, 1, 55, 1, 1, 262, 140, 306, 246, 318, 343, 56, 1, 316, 203, 1, 1, 7, 1, 1, 1, 215, 1, 326, 1, 236, 268, 66, 19, 1, 19, 136, 1, 1, 1, 33, 236, 124, 324, 220, 1, 280, 1, 292, 1, 1, 1, 130, 1, 276, 150, 1, 257, 1, 1, 1, 58, 1, 1, 1, 327, 1, 192, 1, 292, 147, 1, 1, 201, 124, 1, 213, 254, 1, 1, 1, 278, 101, 78, 219, 1, 58, 1, 112, 277, 1, 222, 140, 1, 1, 124, 26, 1, 1, 188, 1, 322, 221, 221, 1, 112, 1, 1, 67, 1, 277, 1, 257, 335, 22, 1, 71, 1, 255, 146, 168, 292, 152, 58, 1, 156, 1, 1, 177, 1, 109, 1, 1, 1, 157, 151, 1, 1, 130, 163, 177, 95, 218, 1, 176, 337, 1, 1, 191, 1, 124, 183, 307, 54, 1, 306, 1, 1, 1, 1, 96, 58, 206, 328, 1, 1, 130, 58, 1, 1, 326, 1, 225, 1, 1, 337, 1, 1, 194, 1, 1, 180, 109, 318, 1, 1, 1, 1, 213, 1, 345, 161, 1, 136, 1, 1, 76, 43, 314, 288, 67, 82, 1 };
        assertEquals(20938, subsets.findSubset(numbers));
    }

    @Test
    public void case27() {
        int[] numbers = { 46, 54, 1, 1, 8, 1, 1, 1, 1, 8, 1, 17, 1, 10, 18, 34, 21, 1, 13, 1, 39, 1, 20, 1, 34, 1, 1, 21, 22, 1, 18, 21, 1, 26, 19, 60, 16, 1, 1, 63, 1, 1, 6, 8, 1, 43, 21, 18, 53, 1, 1, 1, 14, 1, 45, 1, 22, 1, 1, 63, 1, 1, 42, 1, 1, 1, 1, 27, 63, 61, 59 };
        assertEquals(917, subsets.findSubset(numbers));
    }

    @Test
    public void case28() {
        int[] numbers = { 1, 20, 1, 1, 1, 1, 1, 25, 1, 1, 1, 4, 1, 1, 1, 33, 1, 1, 1, 1, 1, 1, 53, 32, 30, 1, 1, 29, 59, 1, 62, 1, 1, 69, 58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 72, 1, 1, 57, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 1, 1, 47, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1 };
        assertEquals(1308, subsets.findSubset(numbers));
    }

    @Test
    public void case29() {
        int[] numbers = { 418, 1000, 101, 1000, 856, 878, 650, 1, 86, 1, 1, 1, 12, 430, 1000, 1, 1000, 925, 91, 814, 275, 1, 1000, 70, 31, 631, 1, 355, 1000, 171, 589, 443, 1, 658, 480, 1, 1000, 102, 436, 606, 1000, 365, 650, 51, 1000, 46, 941, 398, 207, 51, 808, 836, 1, 587, 684, 406, 251, 808, 1000, 1, 621, 441, 94, 1000, 1000, 1, 42, 1000, 66, 534, 649, 789, 273, 288, 1, 23, 376, 1000, 176, 1, 1, 606, 245, 295, 412, 968, 208, 1, 484, 101, 31, 405, 1000, 1, 528, 1000, 744, 494, 1, 1000, 1000, 207, 286, 1000, 1, 686, 518, 1, 1000, 1, 23, 279, 1000, 361, 513, 207, 343, 888, 1000, 1, 170, 1, 371, 174, 789, 1000, 106, 485, 1, 810, 896, 1, 1000, 110, 1, 343, 838, 1, 542, 391, 1000, 1, 759, 288, 702, 455, 28, 224, 234, 1000, 1000, 700, 1000, 352, 1000, 587, 268, 371, 1000, 1, 1000, 1000, 848, 388, 1000, 1000, 750, 560, 1000, 737, 1000, 141, 1, 801, 1000, 878, 632, 717, 3, 574, 581, 713, 339, 650, 346, 110, 885, 932, 1000, 1, 1, 666, 558, 371, 952, 1, 1, 589, 1, 1000, 777, 950, 908, 601, 1000, 95, 911, 417, 12, 873, 68, 952, 111, 1000, 486, 1000, 1000, 113, 1, 152, 46, 761, 955, 251, 759, 10, 251, 1000, 1000, 445, 1000, 855, 552, 1, 1000, 601, 223, 676, 937, 676, 541, 397, 1000, 780, 1000, 424, 1000, 555, 512, 1000, 1000, 244, 1, 178, 1000, 440, 214, 746, 1000, 997, 1, 560, 987, 1000, 484, 774, 1000, 1000, 1, 1, 203, 704, 595, 857, 1000, 864, 1000, 398, 892, 398, 1, 1, 279, 1, 811, 1000, 1, 1000, 533, 498, 1000, 1, 118, 17, 1000, 1000, 1, 1, 472, 760, 176, 1000, 783, 856, 1000, 75, 176, 35, 37, 770, 1000, 968, 223, 12, 1, 98, 1, 902, 589, 381, 1, 346, 273, 827, 268, 1000, 1000, 1000, 391, 589, 1000, 1000, 475, 804, 316, 1000, 51, 1, 1000, 560, 1000, 1000, 966, 1000, 555, 361, 398, 101, 402, 877, 1000, 1000, 1000, 806, 1000, 1000, 565, 21, 1000, 4, 324, 1, 137, 41, 478, 432, 932, 1, 1, 957, 270, 1, 826, 1000, 1, 98, 1000, 510, 968, 207, 1000, 833, 642, 812, 428, 480, 183, 1000, 30, 458, 1, 657, 1000, 1, 1000, 1, 978, 994, 136, 410, 401, 1, 1000, 856, 1000, 1000, 882, 346, 408, 1000, 1000, 1000, 494, 274, 1000, 95, 859, 377, 1, 1, 1000, 56, 1, 299, 574, 810, 474, 244, 909, 42, 968, 48, 1000, 725, 1000, 933, 376, 923, 1, 991, 581, 877, 151, 855, 499, 1, 1, 178, 148, 528, 484, 1, 1000, 487, 650, 1000, 1, 178, 1000, 570, 376, 1000, 1000, 92, 982, 1, 878, 879, 90, 44, 945, 488, 484, 894, 604, 1, 606, 894, 1, 467, 183, 1000, 66, 908, 1000, 878, 763, 573, 1000, 1, 945, 882, 1, 255, 1000, 589, 542, 1000, 709, 28, 1, 1000, 1, 601, 324, 759, 403, 136, 1000, 1, 1, 1000, 484, 809, 151, 1000, 955, 549, 950, 1, 932, 148, 676, 1, 1, 11, 892, 910, 324, 303, 1000, 607, 114, 607, 1, 718, 1000, 850, 859, 200, 780, 1000, 1000, 826, 276, 1000, 543, 50, 343, 333, 337, 744, 1, 263, 1000, 1, 955, 1000, 1, 270, 1, 371, 439, 1, 606, 954, 416, 422, 634, 1, 1, 1, 1, 985, 666, 549, 850, 798, 790, 1, 803, 621, 5, 1000, 1, 1000, 763, 1000, 1, 1, 1000, 314, 105, 1000, 816, 1000, 952, 621, 500, 390, 1000, 1000, 1000, 1000, 569, 1000, 961, 1000, 895, 412, 794, 1, 582, 1, 1, 878, 783, 87, 593, 1000, 1000, 13, 1000, 1, 594, 1, 682, 154, 166, 1000, 3, 498, 535, 1000, 810, 884, 874, 329, 808, 813, 1, 284, 1000, 1000, 628, 402, 953, 598, 169, 1000, 673, 1, 1000, 254, 999, 310, 1, 1, 859, 1, 428, 1000, 1, 1, 666, 160, 902, 1, 68, 343, 1, 860, 288, 1, 531, 66, 1000, 45, 458, 397, 542, 735, 1000, 1, 1, 589, 402, 383, 634, 16, 1000, 302, 1000, 1000, 1000, 968, 186, 1, 997, 1000, 481, 84, 549, 494, 95, 750, 110, 570, 1, 67, 219, 1, 666, 1000, 198, 659, 1, 58, 173, 234, 171, 545, 924, 269, 1000, 1, 1, 873, 41, 621, 839, 1, 1, 598, 6, 1, 221, 1000, 590, 830, 1000, 1000, 927, 579, 771, 1, 980, 223, 836, 1, 932, 614, 1000, 1, 1, 813, 808, 770, 143, 1, 273, 989, 923, 892, 1000, 1, 1000, 42, 1000, 1000, 891, 1000, 838, 1000, 337, 1, 1, 1 };
        assertEquals(47272, subsets.findSubset(numbers));
    }

    @Test
    public void case30() {
        int[] numbers = { 1, 118, 6, 89, 12, 1, 134, 1, 136, 1, 9, 62, 83, 86, 92, 100, 70, 1, 28, 100, 92, 60, 27, 58, 86, 71, 6, 101, 139, 91, 92, 4, 48, 43, 84, 33, 1, 57, 71, 8, 75, 141, 117, 48, 133, 51, 22, 49, 141, 138, 92, 13, 139, 6, 12, 125, 75, 60, 12, 43, 138, 96, 1, 44, 9, 57, 1, 36, 1, 1, 49, 138, 1, 73, 73, 1, 102, 138, 12, 1, 44, 42, 10, 1, 51, 102 };
        assertEquals(643, subsets.findSubset(numbers));
    }

    @Test
    public void case31() {
        int[] numbers = { 1, 1, 1, 1, 205, 1, 193, 1, 248, 23, 46, 1, 341, 243, 1, 1, 43, 85, 1, 1, 120, 1, 1, 1, 1, 1, 1, 338, 1, 1, 1, 1, 358, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 89, 1, 1, 1, 1, 268, 1, 1, 1, 226, 147, 376, 1, 351, 1, 1, 1, 392, 1, 236, 1, 256, 1, 1, 1, 209, 61, 1, 1, 1, 1, 59, 1, 1, 1, 1, 1, 1, 1, 204, 356, 12, 1, 1, 1, 191, 63, 1, 1, 1, 1, 1, 1, 219, 358, 210, 1, 1, 204, 378, 145, 255, 1, 1, 162, 271, 382, 99, 1, 1, 1, 269, 254, 1, 1, 363, 199, 220, 1, 1, 1, 1, 1, 1, 38, 45, 1, 194, 1, 1, 355, 60, 1, 1, 1, 1, 1, 1, 335, 1, 1, 356, 1, 390, 243, 197, 1, 43, 312, 1, 1, 1, 1, 391, 392, 70, 1, 1, 1, 1, 1, 147, 281, 1, 1, 89, 1, 1, 1, 1, 1, 254, 357, 1, 1, 1, 1, 1, 327, 1, 1, 1, 268, 1, 268, 13, 1, 89, 1, 293, 1, 341, 205, 332, 1, 1, 1, 1, 395, 1, 343, 1, 1, 1, 1, 229, 1, 1, 1, 1, 247, 291, 1, 1, 1, 1, 1, 1, 389, 1, 1, 1, 1, 1, 254, 23, 389, 1, 89, 1, 391, 1, 1, 25, 1, 1, 1, 1, 1, 1, 27, 364, 1, 1, 112, 1, 1, 1, 1, 278, 1, 1, 241, 89, 1, 1, 1, 1, 49, 1, 1, 1, 1, 1, 60, 1, 1, 1, 1, 229, 46, 1, 1, 10, 197, 1, 1, 216, 358, 1, 1, 1, 1, 1, 247, 1, 345, 268, 363, 1, 1, 1, 1, 1, 374, 1, 205, 1, 1, 1, 1, 22, 1, 1, 194, 1, 1, 1, 1, 149, 150, 163, 285, 1, 281, 87, 55, 1, 1, 123, 1, 1, 1, 1, 1, 243, 1, 1, 1, 1, 1, 1, 1, 145, 106, 170, 1, 1, 299, 1, 7, 1, 1, 15, 366, 1, 1, 1, 1, 1, 165, 1, 48, 1, 358, 1, 63, 1, 1, 1, 153, 1, 1, 1, 1, 1, 182, 1, 1, 1, 1, 1, 32, 1, 1, 1, 1, 1, 1, 1, 60, 113, 1, 247, 145, 1, 1, 194, 1, 276, 1, 1, 1, 1, 1, 1, 1, 1, 1, 358, 149, 70, 1, 163, 1, 1, 1, 1, 1, 1, 1, 1, 214, 145, 55, 268, 205, 1, 363, 1, 1, 356, 1, 1, 1, 1, 1, 171, 133, 1, 6, 1, 21, 1, 1, 1, 1, 1, 1, 358, 1, 1, 1, 1, 1, 280, 190, 1, 1, 163, 254, 1, 351, 1, 1, 1, 266, 247, 1, 233, 1, 1, 1, 1, 1, 120, 1, 402, 1, 1, 76, 1, 1, 10, 1, 1, 1, 27, 1, 1, 1, 1, 1, 1, 258, 1, 252, 1, 1, 1, 1, 196, 273, 1, 1, 1, 341, 1, 1, 123, 1, 1, 357, 145, 1, 1, 1, 1, 1, 1, 1, 216, 20, 1, 1, 1, 306, 1, 1, 213, 1, 1, 1, 1, 1, 1, 1, 1, 1, 145, 1, 1, 235, 1, 2, 1, 347, 1, 1, 1, 1, 1, 299, 1, 1, 1, 312, 343, 1, 277, 1, 96, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 389, 1, 1, 1, 1, 21, 335, 1, 263, 1, 1, 1, 176, 1, 1, 1, 290, 1, 1, 1, 1, 70, 1, 163, 267, 1, 230, 59, 1, 1, 169, 1, 1, 360, 1, 98, 1, 389, 1, 36, 1, 1, 147, 1, 254, 369, 375, 214, 1, 1, 321, 1, 1, 1, 1, 1, 1, 1, 94, 1, 1, 343, 54, 1, 1, 1, 1 };
        assertEquals(111946, subsets.findSubset(numbers));
    }

    @Test
    public void case32() {
        int[] numbers = { 476, 123, 1, 1, 131, 1, 80, 172, 23, 361, 516, 449, 1, 1, 1, 1, 345, 249, 1, 1, 1, 110, 1, 1, 325, 1, 244, 109, 133, 470, 1, 516, 551, 1, 36, 429, 351, 1, 299, 285, 225, 238, 1, 347, 1, 355, 148, 1, 1, 1, 1, 93, 243, 1, 558, 131, 1, 313, 297, 1, 18, 1, 233, 1, 1, 1, 222, 546, 1, 1, 1, 258, 573, 480, 413, 476, 370, 1, 467, 63, 66, 299, 1, 452, 71, 1, 1, 1, 429, 322, 153, 110, 544, 594, 1, 295, 376, 1, 1, 1, 1, 549, 9, 497, 52, 553, 1, 594, 1, 1, 1, 446, 1, 1, 463, 560, 1, 511, 501, 198, 427, 536, 1, 1, 1, 198, 1, 222, 1, 543, 1, 560, 1, 1, 557, 548, 372, 1, 1, 110, 563, 574, 53, 1, 165, 1, 1, 332, 1, 63, 254, 114, 1, 103, 1, 1, 444, 578, 392, 1, 1, 346, 1, 89, 566, 570, 584, 24, 589, 289, 1, 1, 1, 585, 1, 345, 238, 70, 446, 1, 1, 1, 131, 207, 12, 408, 1, 190, 207, 1, 1, 1, 102, 1, 1, 451, 18, 1, 30, 383, 1, 404, 98, 131, 1, 1, 1, 1, 536, 580, 1, 296, 1, 1, 1, 562, 180, 1, 349, 427, 1, 223, 296, 1, 1, 1, 1, 1, 1, 569, 1, 70, 515, 208, 313, 1, 126, 1, 379, 1, 583, 1, 1, 419, 1, 537, 109, 89, 172, 521, 481, 1, 119, 423, 568, 161, 152, 12, 1, 565, 1, 110, 1, 1, 170, 1, 589, 413, 109, 392, 1, 1, 1, 1, 580, 313, 1, 131, 296, 1, 152, 1, 157, 500, 1, 289, 92, 437, 378, 154, 153, 556, 480, 435, 114, 110, 1, 556, 122, 1, 4, 1, 1, 1, 154, 1, 586, 157, 1, 429, 445, 1, 426, 1, 1, 133, 1, 1, 511, 404, 1, 1, 1, 253, 32, 1, 43, 210, 1, 274, 388, 47, 1, 370, 1, 555, 418, 1, 249, 1, 131, 1, 1, 376, 1, 131, 151, 1, 578, 1, 569, 1, 1, 1, 171, 223, 595, 217, 319, 142, 152, 1, 1, 1, 1, 555, 567, 450, 529, 154, 378, 1, 471, 404, 585, 456, 337, 1, 1, 327, 1, 398, 198, 99, 574, 1, 1, 24, 1, 379, 584, 1, 532, 373, 277, 1, 93, 1, 215, 1, 284, 68, 1, 152, 197, 292, 515, 1, 1, 1, 492, 1, 1, 574, 1, 1, 1, 1, 436, 110, 1, 1, 1, 1, 1, 382, 1, 542, 93, 225, 1, 1, 446, 1, 525, 1, 376, 456, 1, 1, 93, 465, 473, 134, 1, 1, 1, 1, 1, 1, 1, 372, 1, 467, 585, 580, 520, 1, 110, 1, 153, 1, 151, 1, 126, 1, 213, 1, 453, 1, 37, 215, 340, 12, 1, 131, 516, 1, 1, 114, 13, 1, 555, 44, 1, 313, 1, 53, 323, 118, 136, 7, 407, 111, 209, 208, 335, 20, 110, 24, 114, 57, 349, 181, 1, 1, 448, 392 };
        assertEquals(45110, subsets.findSubset(numbers));
    }

    @Test
    public void case33() {
        int[] numbers = { 200, 1, 1, 180, 1, 111, 287, 1, 1, 1, 1, 1, 1, 1, 317, 1, 236, 1, 1, 229, 1, 1, 114, 1, 1, 1, 28, 291, 193, 1, 1, 1, 174, 1, 46, 1, 118, 1, 1, 1, 1, 1, 1, 14, 1, 1, 178, 1, 1, 122, 1, 235, 1, 1, 1, 1, 126, 1, 119, 1, 1, 1, 1, 1, 157, 1, 1, 1, 145, 1, 14, 1, 1, 1, 180, 1, 163, 1, 152, 1, 1, 1, 258, 1, 1, 1, 1, 188, 1, 163, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 166, 219, 37, 1, 1, 1, 1, 1, 73, 7, 188, 72, 119, 48, 1, 235, 191, 178, 1, 1, 1, 119, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 68, 1, 1, 246, 1, 1, 35, 1, 1, 1, 1, 1, 231, 1, 287, 1, 1, 184, 145, 1, 1, 1, 102, 1, 1, 343, 235, 1, 219, 256, 1, 1, 1, 289, 146, 85, 1, 1, 1, 1, 1, 119, 1, 1, 1, 1, 1, 143, 1, 1, 1, 58, 1, 6, 1, 1, 1, 65, 38, 1, 349, 1, 1, 1, 1, 1, 1, 1, 1, 238, 1, 1, 328, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 211, 164, 1, 19, 246, 1, 1, 132, 1, 1, 1, 290, 1, 211, 184, 1, 1, 1, 1, 1, 1, 103, 1, 1, 1, 112, 69, 1, 62, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 273, 1, 292, 1, 255, 60, 1, 1, 1, 258, 1, 1, 1, 1, 1, 1, 223, 1, 259, 1, 1, 132, 1, 14, 328, 1, 1, 1, 84, 1, 1, 1, 102, 117, 1, 1, 1, 1, 1, 1, 1, 1, 227, 58, 1, 1, 188, 203, 1, 158, 1, 1, 1, 223, 1, 1, 219, 330, 1, 177, 1, 1, 342, 250, 285, 1, 1, 1, 1, 1, 1, 1, 1, 37, 1, 1, 1, 1, 1, 1, 1, 201, 1, 1, 1, 237, 1, 1, 56, 1, 1, 1, 1, 1, 148, 1, 1, 1, 307, 1, 1, 1, 1, 1, 288, 1, 1, 1, 1, 1, 1, 30, 1, 348, 1, 1, 1, 1, 167, 1, 1, 1, 1, 38, 1, 1, 1, 1, 166, 1, 1, 1, 1, 1, 1, 1, 1, 163, 90, 1, 1, 55, 133, 1, 1, 1, 314, 1, 1, 235, 1, 290, 1, 1, 1, 1, 1, 1, 12, 306, 138, 1, 178, 1, 1, 341, 1, 60, 1, 1, 1, 73, 1, 1, 203, 126, 203, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 214, 250, 1, 1, 1, 1, 188, 1, 1, 1, 1, 25, 103, 88, 1, 99, 1, 1, 1, 88, 1, 54, 96, 1, 1, 1, 211, 324, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 129, 1, 65, 1, 1, 200, 171, 1, 1, 1, 1, 1, 1, 1, 1, 188, 26, 1, 1, 1, 263, 203, 1, 31, 226, 80, 1, 1, 214, 1, 1, 126, 159, 226, 200 };
        assertEquals(54525, subsets.findSubset(numbers));
    }

    @Test
    public void case34() {
        int[] numbers = { 1, 1, 9, 1, 1, 1, 1, 5, 1, 26, 18, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(573, subsets.findSubset(numbers));
    }

    @Test
    public void case35() {
        int[] numbers = { 1, 1, 1, 1, 1, 42, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 19, 1, 44, 1, 1, 1, 20, 1, 1, 1, 1, 1, 8, 1, 51, 1, 1, 22, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 68, 27, 4, 1, 1, 1, 1, 1, 1, 23, 43, 44, 1, 68, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 62, 1, 1, 1, 1, 1, 1, 68, 1, 1, 33, 1, 1, 1, 1, 33, 1, 1, 1, 1, 1, 42, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 42, 1, 1, 59, 1, 1, 1 };
        assertEquals(2257, subsets.findSubset(numbers));
    }

    @Test
    public void case36() {
        int[] numbers = { 1, 1, 1, 1, 1, 189, 1, 203, 98, 1, 156, 98, 1, 59, 118, 52, 1, 1, 1, 1, 1, 60, 1, 1, 1, 1, 1, 88, 1, 32, 1, 1, 147, 153, 1, 1, 1, 1, 1, 1, 174, 1, 1, 161, 1, 1, 1, 76, 1, 27, 83, 1, 1, 1, 1, 1, 1, 1, 1, 1, 96, 224, 1, 27, 1, 1, 115, 1, 1, 99, 1, 1, 230, 203, 1, 216, 1, 1, 1, 1, 1, 1, 128, 44, 1, 1, 230, 1, 119, 151, 203, 1, 1, 1, 1, 186, 1, 44, 1, 59, 16, 1, 1, 200, 1, 204, 1, 25, 1, 188, 32, 200, 1, 1, 1, 108, 1, 1, 1, 234, 1, 167, 1, 108, 1, 16, 1, 231, 1, 1, 1, 51, 1, 1, 1, 1, 1, 1, 1, 165, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 164, 1, 1, 1, 1, 1, 1, 1, 1, 1, 209, 1, 1, 1, 89, 27, 1, 37, 1, 1, 1, 1, 208, 1, 1, 1, 1, 1, 1, 1, 180, 45, 1, 1, 15, 1, 1, 1, 1, 1, 122, 1, 1, 1, 1, 1, 229, 218, 160, 1, 1, 134, 1, 1, 1, 1, 1, 104, 44, 1, 1, 1, 1, 32, 1, 1, 1, 1, 1, 1, 1, 183, 1, 1, 222, 1, 156, 224, 1, 1, 1, 1, 29, 1, 1, 1, 1, 58, 224, 1, 55, 1, 1, 69, 147, 55, 1, 1, 1, 24, 1, 209, 1, 27, 15, 1, 1, 1, 1, 1, 138, 1, 1, 199, 1, 119, 160, 1, 1, 1, 1, 63, 119, 169, 209, 29, 30, 1, 1, 1, 1, 1, 39, 78, 1, 1, 225, 1, 200, 1, 99, 230, 1, 121, 1, 146, 213, 139, 1, 1, 1, 1, 1, 1, 1, 1, 1, 112, 1, 57, 230, 1, 83 };
        assertEquals(15536, subsets.findSubset(numbers));
    }

    @Test
    public void case37() {
        int[] numbers = { 1000, 1000, 1000, 1000 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case38() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 };
        assertEquals(1993087, subsets.findSubset(numbers));
    }

    @Test
    public void case39() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247 };
        assertEquals(1684232, subsets.findSubset(numbers));
    }

    @Test
    public void case40() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105 };
        assertEquals(1968140, subsets.findSubset(numbers));
    }

    @Test
    public void case41() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 2, 2, 2 };
        assertEquals(100, subsets.findSubset(numbers));
    }

    @Test
    public void case42() {
        int[] numbers = { 1, 1000 };
        assertEquals(1, subsets.findSubset(numbers));
    }

    @Test
    public void case43() {
        int[] numbers = { 5, 3 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case44() {
        int[] numbers = { 1 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case45() {
        int[] numbers = { 2 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case46() {
        int[] numbers = { 3 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case47() {
        int[] numbers = { 1000 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case48() {
        int[] numbers = { 23, 34, 45 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case49() {
        int[] numbers = { 10, 10 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case50() {
        int[] numbers = { 28, 33, 37, 42, 45, 107, 160 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case51() {
        int[] numbers = { 2, 3, 4 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case52() {
        int[] numbers = { 2, 2 };
        assertEquals(0, subsets.findSubset(numbers));
    }

    @Test
    public void case53() {
        int[] numbers = {};
        assertEquals(261201, subsets.findSubset(numbers));
    }

    @Test
    public void case54() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };
        assertEquals(8050, subsets.findSubset(numbers));
    }

    @Test
    public void case55() {
        int[] numbers = { 442, 324, 104, 579, 469, 81, 63, 546, 508, 881, 866, 539, 725, 620, 426, 793, 255, 485, 201, 284, 131, 654, 47, 759, 6, 968, 717, 530, 486, 904, 753, 677, 102, 489, 522, 375, 410, 71, 9, 715, 898, 399, 404, 336, 100, 324, 890, 701, 241, 700, 842, 522, 253, 196, 972, 706, 398, 522, 442, 610, 170, 907, 85, 218, 369, 602, 592, 609, 866, 248, 522, 610, 88, 92, 903, 707, 26, 577, 589, 989, 370, 346, 377, 977, 843, 679, 163, 906, 799, 526, 823, 742, 916, 714, 849, 879, 250, 260, 364, 645, 599, 939, 656, 606, 859, 743, 673, 510, 369, 222, 344, 152, 303, 106, 825, 310, 494, 208, 798, 876, 938, 968, 591, 571, 408, 1, 876, 359, 450, 613, 320, 456, 330, 915, 827, 393, 935, 658, 118, 865, 566, 585, 432, 758, 970, 367, 654, 340, 174, 26, 582, 306, 695, 747, 685, 768, 115, 218, 615, 249, 259, 216, 940, 800, 627, 386, 531, 886, 899, 291, 982, 693, 674, 574, 614, 192, 919, 677, 317, 272, 661, 552, 252, 946, 199, 120, 456, 615, 36, 746, 342, 543, 404, 330, 465, 381, 314, 715, 913, 904, 333, 889, 901, 662, 890, 455, 784, 681, 717, 947, 821, 881, 583, 288, 717, 306, 194, 654, 298, 212, 468, 866, 299, 603, 543, 961, 398, 28, 597, 626, 612, 596, 977, 98, 644, 588, 909, 158, 808, 978, 508, 218, 924, 692, 900, 840, 250, 448, 165, 539, 350, 277, 479, 924, 672, 502, 804, 958, 254, 193, 537, 328, 620, 434, 480, 602, 520, 771, 680, 65, 521, 151, 117, 919, 537, 780, 233, 790, 625, 370, 378, 87, 24, 455, 74, 740, 970, 104, 743, 505, 448, 552, 943, 265, 885, 717, 374, 407, 105, 87, 252, 581, 925, 969, 39, 469, 152, 98, 297, 332, 689, 491, 226, 439, 31, 306, 136, 852, 491, 172, 287, 6, 615, 129, 242, 721, 947, 889, 788, 163, 149, 810, 673, 791, 97, 440, 112, 42, 722, 196, 839, 251, 205, 583, 177, 229, 695, 114, 409, 384, 725, 166, 462, 264, 156, 148, 662, 823, 10, 187, 340, 652, 243, 656, 447, 606, 175, 260, 305, 504, 109, 795, 516, 118, 864, 672, 443, 531, 125, 318, 451, 406, 495, 240, 229, 776, 81, 858, 859, 498, 655, 454, 155, 436, 568, 72, 602, 85, 987, 727, 95, 375, 565, 845, 183, 794, 820, 375, 357, 490, 901, 579, 265, 772, 611, 234, 89, 122, 406, 779, 757, 965, 754, 985, 888, 47, 75, 927, 640, 160, 241, 411, 877, 663, 865, 965, 79, 357, 874, 158, 607, 21, 840, 39, 511, 808, 407, 972, 53, 977, 128, 689, 286, 687, 272, 684, 554, 905, 899, 633, 194, 65, 446, 227, 547, 73, 468, 998, 675, 790, 889, 4, 76, 602, 236, 500, 943, 875, 413, 587, 611, 959, 460, 548, 571, 988, 922, 976, 371, 204, 866, 632, 749, 554, 957, 100, 245, 370, 765, 559, 760, 824, 764, 996, 493, 268, 623, 818, 211, 138, 317, 127, 488, 977, 805, 217, 371, 117, 42, 275, 207, 242, 549, 784, 768, 299, 475, 422, 767, 117, 845, 24, 458, 267, 317, 174, 756, 878, 229, 801, 758, 7, 800, 215, 247, 366, 396, 990, 111, 869, 288, 267, 889, 823, 710, 248, 339, 487, 441, 601, 822, 438, 813, 112, 819, 67, 332, 998, 52, 641, 558, 490, 285, 949, 737, 892, 987, 876, 472, 7, 807, 79, 603, 220, 528, 416, 396, 547, 263, 46, 185, 278, 804, 459, 104, 354, 486, 887, 661, 392, 402, 287, 476, 261, 996, 959, 634, 896, 391, 167, 244, 698, 467, 788, 822, 670, 853, 223, 30, 140, 958, 872, 844, 766, 11, 407, 158, 634, 3, 585, 779, 628, 577, 434, 154, 493, 392, 299, 414, 177, 788, 926, 350, 160, 284, 36, 202, 221, 121, 643, 288, 194, 412, 542, 95, 360, 640, 726, 425, 626, 190, 526, 15, 145, 692, 79, 852, 654, 253, 482, 34, 380, 802, 537, 626, 210, 643, 138, 348, 883, 38, 899, 943, 369, 231, 763, 622, 626, 837, 347, 72, 55, 505, 877, 176, 135, 242, 382, 710, 698, 787, 195, 414, 677, 320, 329, 164, 54, 898, 430, 424, 896, 703, 175, 542, 190, 639, 370, 808, 759, 595, 303, 905, 563, 562, 618, 694, 310, 644, 823, 881, 976, 19, 746, 598, 883, 738, 267, 628, 99, 850, 388, 353, 810, 708, 860, 388, 319, 972, 779, 289, 830, 647, 266, 76, 154, 40, 587, 844, 665, 784, 444, 739, 627, 599, 193, 385, 160, 534, 719, 799, 643, 577, 221, 712, 371, 306, 196, 625, 251, 215, 814, 849, 75, 908, 670, 639, 219, 550, 564, 521, 655, 861, 954, 864, 176, 38, 108, 361, 461, 94, 299, 639, 404, 426, 513, 234, 827, 846, 485, 1000, 986, 578, 140, 633, 157, 212, 166, 502, 267, 748, 339, 564, 891, 624, 351, 372, 779, 117, 143, 381, 910, 966, 869, 275, 948, 630, 527, 402, 304, 320, 663, 995, 28, 750, 947, 772, 53, 54, 622, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(91223, subsets.findSubset(numbers));
    }

    @Test
    public void case56() {
        int[] numbers = { 1, 1, 1 };
        assertEquals(2, subsets.findSubset(numbers));
    }

    @Test
    public void case57() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };
        assertEquals(8584, subsets.findSubset(numbers));
    }

    @Test
    public void case58() {
        int[] numbers = { 1, 1, 1, 22, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 33, 333, 666, 987, 994, 999, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 222, 444, 999, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 76, 765, 765, 765, 888, 888, 2, 2, 2, 3, 4, 5, 6, 7, 8 };
        assertEquals(5272, subsets.findSubset(numbers));
    }

    @Test
    public void case59() {
        int[] numbers = { 1, 979, 1, 1, 1, 2, 1, 2, 1, 855, 1, 2, 2, 1, 1, 3, 2, 1, 1, 1, 360, 1, 1, 1, 1, 1, 1, 2, 1, 771, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 3, 2, 2, 1, 2, 1, 1, 1, 1, 1, 49, 3, 1, 2, 1, 1, 3, 1, 1, 1, 393, 1, 1, 961, 1, 1, 799, 1, 1, 1, 1, 1, 1, 1, 1, 3, 600, 384, 1, 2, 1, 1, 2, 3, 1, 2, 950, 2, 3, 1, 1, 1, 2, 2, 1, 1, 3, 2, 1, 2, 1, 1, 2, 2, 253, 1, 1, 91, 2, 3, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 453, 600, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 841, 2, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 289, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 145, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 901, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 322, 1, 1, 2, 2, 3, 126, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 952, 436, 2, 1, 3, 2, 1, 2, 1, 1, 2, 1, 1, 1, 789, 2, 1, 2, 1, 1, 3, 3, 2, 3, 1, 1, 1, 1, 2, 1, 323, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 633, 1, 284, 3, 1, 1, 624, 1, 1, 2, 1, 1, 879, 3, 1, 1, 619, 2, 3, 1, 1, 3, 1, 582, 1, 588, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 2, 3, 195, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 380, 1, 1, 2, 1, 525, 1, 563, 3, 2, 1, 1, 3, 1, 672, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 123, 562, 1, 2, 3, 1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 871, 1, 1, 1, 3, 3, 1, 3, 1, 1, 1, 2, 1, 1, 1, 851, 1, 1, 726, 1, 1, 3, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 3, 1, 3, 1, 1, 2, 515, 1, 1, 1, 1, 3, 1, 1, 2, 613, 1, 2, 881, 267, 367, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 462, 1, 3, 1, 1, 1, 1, 3, 1, 2, 1, 3, 1, 1, 3, 1, 3, 1, 1, 1, 395, 1, 3, 2, 1, 1, 1, 1, 2, 2, 640, 3, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 2, 2, 1, 1, 2, 1, 1, 25, 252, 1, 1, 1, 1, 652, 1, 657, 982, 1, 1, 3, 1, 2, 1, 633, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 3, 2, 1, 1, 2, 1, 2, 1, 386, 777, 1, 1, 1, 1, 111, 1, 819, 1, 1, 2, 870, 3, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 395, 1, 1, 1, 1, 2, 2, 1, 1, 1, 520, 2, 154, 2, 1, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 90, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 516, 1, 563, 801, 1, 1, 1, 2, 2, 1, 2, 870, 2, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 940, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 1, 1, 1, 2, 121, 1, 1, 141, 2, 1, 470, 2, 1, 1, 3, 2, 1, 1, 2, 3, 2, 1, 24, 1, 1, 1, 1, 2, 567, 1, 1, 2, 2, 3, 2, 3, 1, 1, 1, 545, 1, 3, 1, 3, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 3, 2, 1, 314, 2, 1, 3, 2, 2, 2, 1, 1, 1, 1, 1, 328, 1, 1, 1, 1, 3, 778, 1, 113, 1, 3, 2, 1, 1, 3, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 3, 2, 1, 1, 3, 2, 1, 2, 3, 1, 1, 1, 2, 2, 568, 2, 2, 1, 1, 1, 11, 1, 1, 1, 1, 3, 244, 3, 1, 3, 1, 1, 3, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 3, 1, 1, 937, 3, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3, 970, 2, 1, 1, 1, 1, 1, 1, 1, 354, 2, 1, 1, 2, 2, 2, 1, 1, 1, 237, 1, 1, 2, 1, 2, 343, 1, 1, 2, 1, 1, 2, 1, 173, 2, 1, 1, 1, 94, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 664, 1, 2, 129, 1, 1, 1, 1, 2, 522, 1, 2, 879, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 755, 1, 1, 1, 2, 1, 1 };
        assertEquals(111875, subsets.findSubset(numbers));
    }

    @Test
    public void case60() {
        int[] numbers = { 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 12, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 10, 1, 2, 2, 3, 4, 5, 6, 6, 1, 7, 7, 7, 8, 9, 1, 1, 24, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 4, 34, 3, 2, 1, 2, 3, 2, 1, 1, 1, 999, 1, 340, 2, 130, 2, 2, 2, 2, 1, 1, 3, 4, 55, 4, 1, 41, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        assertEquals(262237, subsets.findSubset(numbers));
    }

    @Test
    public void case61() {
        int[] numbers = { 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 160, 160, 160, 160, 160, 161, 161, 161, 161, 161, 162, 162, 162, 162, 162, 163, 163, 163, 163, 163, 164, 164, 164, 164, 164, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 192, 192, 192, 192, 192, 193, 193, 193, 193, 193, 194, 194, 194, 194, 194, 195, 195, 195, 195, 195, 196, 196, 196, 196, 196, 197, 197, 197, 197, 197, 198, 198, 198, 198, 198, 199, 199, 199, 199, 199, 200, 200, 200, 200, 200 };
        assertEquals(1019, subsets.findSubset(numbers));
    }

    @Test
    public void case62() {
        int[] numbers = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1000, 1000, 200, 400, 20, 20, 20 };
        assertEquals(6809, subsets.findSubset(numbers));
    }

    @Test
    public void case63() {
        int[] numbers = {};
        assertEquals(999, subsets.findSubset(numbers));
    }

}
