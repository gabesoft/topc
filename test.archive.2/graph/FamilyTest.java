package topc.test.graph;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.graph.*;

public class FamilyTest {
    Family family = new Family();

    @Test
    public void case1() {
        int[] parent1 = { -1, -1, 0 };
        int[] parent2 = { -1, -1, 1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case2() {
        int[] parent1 = { -1, -1, -1, -1, -1 };
        int[] parent2 = { -1, -1, -1, -1, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case3() {
        int[] parent1 = { -1, -1, 0, 0, 1 };
        int[] parent2 = { -1, -1, 1, 2, 2 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case4() {
        int[] parent1 = { -1, -1, -1, -1, 1, -1, 0, 5, 6, -1, 0, 3, 8, 6 };
        int[] parent2 = { -1, -1, -1, -1, 3, -1, 4, 6, 5, -1, 5, 4, 6, 1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case5() {
        int[] parent1 = { -1, -1, -1, 2, 2, -1, 5, 6, 4, 6, 2, 1, 8, 0, 2, 4, 6, 9, -1, 16, -1, 11 };
        int[] parent2 = { -1, -1, -1, 1, 0, -1, 1, 4, 2, 0, 4, 8, 2, 3, 0, 5, 14, 14, -1, 7, -1, 13 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case6() {
        int[] parent1 = { -1, -1, 0, 0, 3, 2, 0, -1, 1, 3, -1, 6, 6, 7, 10, -1, 14 };
        int[] parent2 = { -1, -1, 1, 2, 1, 0, 1, -1, 4, 8, -1, 8, 9, 11, 4, -1, 11 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case7() {
        int[] parent1 = { -1, -1, 1, -1, 1, 0, 2, 1, 6, -1, -1, 5, -1, -1 };
        int[] parent2 = { -1, -1, 0, -1, 2, 3, 4, 4, 5, -1, -1, 0, -1, -1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case8() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case9() {
        int[] parent1 = { -1, -1, -1, 1, 3, 4, 0, 3, 4, -1, 1, 4, 8, 9, 4 };
        int[] parent2 = { -1, -1, -1, 2, 1, 3, 1, 2, 5, -1, 7, 0, 7, 4, 1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case10() {
        int[] parent1 = { -1, -1, -1, 0, 3, 4, 3, 5, 2, -1, 7, 3, 7, -1, 3, 8, 3, 14 };
        int[] parent2 = { -1, -1, -1, 1, 2, 0, 4, 6, 5, -1, 8, 6, 5, -1, 4, 2, 10, 6 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case11() {
        int[] parent1 = { -1, -1, 0, 1, 1, 1, 2, 6, -1, -1, 9, -1, 4, -1, 8, -1, 15, -1 };
        int[] parent2 = { -1, -1, 1, 0, 0, 3, 0, 4, -1, -1, 8, -1, 7, -1, 6, -1, 5, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case12() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, 5, -1, -1, 7, 1, 1, 10, 7, 8, 12, 3, 12, 4, 14, 6, 17, 8, 0, 18, 12, 25 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, 1, -1, -1, 4, 9, 7, 7, 1, 2, 5, 8, 7, 5, 10, 19, 8, 17, 11, 5, 16, 3 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case13() {
        int[] parent1 = { -1, -1, 0, 0, -1, -1, 1, -1, 3 };
        int[] parent2 = { -1, -1, 1, 2, -1, -1, 0, -1, 5 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case14() {
        int[] parent1 = { -1, -1, 0, 1, -1, 4, -1, -1, 0, 8, -1, 0, -1, 8, 12, 3, 12, 0, 7, 7, 11, 17, 5, 21, 13, 15, -1, 5, 13 };
        int[] parent2 = { -1, -1, 1, 0, -1, 0, -1, -1, 5, 3, -1, 4, -1, 3, 3, 7, 2, 5, 2, 14, 0, 1, 12, 9, 23, 19, -1, 7, 12 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case15() {
        int[] parent1 = { -1, -1, -1, 0, 0, 4, 4, -1, 7, 5, 1, 4 };
        int[] parent2 = { -1, -1, -1, 1, 2, 2, 5, -1, 3, 2, 9, 1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case16() {
        int[] parent1 = { -1, -1, 0, 1, 3, 4, 0 };
        int[] parent2 = { -1, -1, 1, 2, 0, 2, 4 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case17() {
        int[] parent1 = { -1, -1, -1, 1, 3, 2, 3, 4, 3, 8, 5, 9, 11, 10, 0, 4, -1 };
        int[] parent2 = { -1, -1, -1, 0, 2, 3, 4, 6, 7, 0, 4, 6, 7, 2, 7, 0, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case18() {
        int[] parent1 = { -1, -1, -1, 0, 0, 2, -1, -1, 6, 0, -1, -1, 2, -1, 4, -1, 9, 3, 8, 12, 2 };
        int[] parent2 = { -1, -1, -1, 2, 2, 1, -1, -1, 7, 8, -1, -1, 6, -1, 7, -1, 14, 15, 0, 3, 11 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case19() {
        int[] parent1 = { -1, -1, 1, 2, 3, 3, -1, -1, 3, 5, 8, 9, 1, 8, 10, 2, 13, 5, -1, 5, -1 };
        int[] parent2 = { -1, -1, 0, 1, 1, 2, -1, -1, 7, 4, 4, 5, 8, 6, 4, 8, 8, 11, -1, 13, -1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case20() {
        int[] parent1 = { -1, -1, 1, 1, 2, -1, -1, 3, 3, 5, 5, 9, 5, -1, 7, 11, -1, 9, 16, 14, -1, 14 };
        int[] parent2 = { -1, -1, 0, 0, 1, -1, -1, 5, 1, 4, 4, 10, 10, -1, 1, 2, -1, 8, 14, 16, -1, 16 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case21() {
        int[] parent1 = { -1, -1, 1, 2, -1, 2 };
        int[] parent2 = { -1, -1, 0, 1, -1, 1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case22() {
        int[] parent1 = { -1, -1, -1, 2, 2, 2, 2, 6, 3, 0, -1, -1, 8, 0, 11, 10, 5, 12, 14, -1, 15, 1 };
        int[] parent2 = { -1, -1, -1, 1, 0, 0, 0, 2, 5, 8, -1, -1, 11, 9, 12, 11, 13, 13, 16, -1, 19, 7 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case23() {
        int[] parent1 = { -1, -1, 0, 0, 0, 2, 3, -1, 2, 6 };
        int[] parent2 = { -1, -1, 1, 1, 3, 4, 4, -1, 1, 2 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case24() {
        int[] parent1 = { -1, -1, 0, -1, -1, 2, 3, 5, 7, 2, -1, -1, 5, 9, 3, 6 };
        int[] parent2 = { -1, -1, 1, -1, -1, 1, 5, 3, 1, 3, -1, -1, 8, 11, 7, 5 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case25() {
        int[] parent1 = { -1, -1, 0, 0, -1 };
        int[] parent2 = { -1, -1, 1, 2, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case26() {
        int[] parent1 = { -1 };
        int[] parent2 = { -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case27() {
        int[] parent1 = { -1, -1 };
        int[] parent2 = { -1, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case28() {
        int[] parent1 = { -1, -1, 1, 2, -1, 3, 0, 5, 0, 7, 3, 1, 3, 0, 0 };
        int[] parent2 = { -1, -1, 0, 0, -1, 0, 1, 2, 2, 2, 5, 7, 7, 6, 4 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case29() {
        int[] parent1 = { -1, -1, 0, 2, 2, 3, -1, 0, 0, -1, 4, 2, -1 };
        int[] parent2 = { -1, -1, 1, 0, 3, 1, -1, 3, 4, -1, 3, 3, -1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case30() {
        int[] parent1 = { -1, -1, -1, 1, 3, 1, 2, 6, 4, 3, 8, 3, 5, 3, 11, 1, -1, 9, 15, -1, -1, 11, -1, 21, 5, 11, 8, 24, 16, 10 };
        int[] parent2 = { -1, -1, -1, 2, 2, 2, 0, 4, 6, 2, 5, 5, 11, 4, 9, 12, -1, 8, 16, -1, -1, 9, -1, 20, 6, 14, 17, 11, 27, 24 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case31() {
        int[] parent1 = { -1, -1, 0, -1, 3, 1, -1, 3, 3, 2, -1, 10, 5 };
        int[] parent2 = { -1, -1, 1, -1, 2, 2, -1, 4, 0, 5, -1, 6, 2 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case32() {
        int[] parent1 = { -1, -1, 1, -1, -1, 0, 1, -1, -1, 2, 2, 10, 2, -1, 1, -1, 15 };
        int[] parent2 = { -1, -1, 0, -1, -1, 1, 4, -1, -1, 1, 8, 4, 10, -1, 2, -1, 11 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case33() {
        int[] parent1 = { -1, -1, 1 };
        int[] parent2 = { -1, -1, 0 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case34() {
        int[] parent1 = { -1, -1, 1, 1, 2, 2, 5, 3, 0, -1, 0, -1, -1, 10, 1, 10, 7, 16, 7, 3, 2, 11, 19, 4, -1, 0, 7, -1, 13, 21, 25, -1, 15, -1, 21, 3, 3, 28, 27, 5, 37, 27, 8, 9, 37, 1, 3, -1, 23, -1, 16, -1, 7, 4, 42, -1, 48, 56, 21, 49, -1, 28, -1, 17, 59, 39, 11, 20, 60, 49, 23, 9, -1, 53, 7, 61, 5, 76, 43, 47, 65, 46, 10, 70, 69, 6, -1, 81, 13, 67, 33, 86, 32, -1, 88, 53, 86, 40, 66, -1 };
        int[] parent2 = { -1, -1, 0, 0, 0, 4, 0, 0, 1, -1, 5, -1, -1, 1, 13, 12, 15, 10, 10, 11, 14, 1, 7, 6, -1, 1, 21, -1, 1, 23, 27, -1, 2, -1, 28, 9, 19, 10, 14, 13, 24, 33, 36, 1, 23, 26, 33, -1, 8, -1, 30, -1, 37, 6, 53, -1, 15, 50, 17, 6, -1, 52, -1, 8, 40, 48, 23, 12, 59, 16, 31, 59, -1, 10, 40, 12, 9, 2, 13, 44, 5, 1, 78, 61, 3, 56, -1, 80, 43, 8, 70, 64, 89, -1, 48, 90, 15, 17, 61, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case35() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, 2, 0, 0, -1, 2, -1, 5, 7, -1, 4, 14, 0, -1, 15, 4, 15, -1, -1, 19, 5, -1, -1, 27, 25, 8, 15, 31, 30, 11, 23, 15, 10, -1, 0, 26, 31, 32, -1, 40, 25, -1, 8, -1, -1, 48, 6, 26, 30, 17, 6, -1, 46, 12, 6, 7, -1, -1, 12, 15, 54, 44, 59, 20, -1, 35, 26, 3, 34, 64, 23, 30, -1, 66, 66, 20, 28, 56, -1, 23, -1, -1, 66, 10, 24, 75, 76, 65, 89, 87, 78, 40, 17, 51, 1 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, 4, 6, 5, -1, 5, -1, 0, 4, -1, 2, 12, 6, -1, 9, 1, 11, -1, -1, 20, 1, -1, -1, 21, 5, 17, 1, 9, 24, 12, 24, 10, 35, -1, 32, 5, 0, 13, -1, 5, 32, -1, 12, -1, -1, 49, 3, 18, 48, 43, 28, -1, 12, 49, 21, 34, -1, -1, 19, 60, 41, 35, 28, 52, -1, 53, 27, 41, 16, 11, 72, 61, -1, 23, 37, 46, 47, 74, -1, 20, -1, -1, 1, 55, 77, 67, 41, 33, 57, 65, 55, 27, 30, 97, 48 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case36() {
        int[] parent1 = { -1, -1, -1, 2, 0, 0, 0, 1, -1, 7, 3, 6, -1, 7, -1, 7, -1, 13, 15, 3, 12, -1, 6, 1, 0, 8, 17, 23, 19, 25, -1, 28, 6, -1, 26, 30, -1, 2, 28, -1, -1, -1, 35, 1, 10, -1, -1, 3, 24, 4, 8, 50, 41, 40, 37, 23, -1, -1, 37, 46, 37, 2, 11, 15, -1, 16, 37, 60, 8, 35, -1, 59, -1, 49, 31, 7, 3, 53, -1, -1, 46, -1, 81, 17, -1, -1, 70, 67, 5, 9, 8, -1, 77, 47, 18, 64, 61, 17, 50, -1 };
        int[] parent2 = { -1, -1, -1, 1, 2, 3, 3, 3, -1, 8, 9, 5, -1, 2, -1, 6, -1, 7, 9, 0, 9, -1, 0, 9, 22, 18, 13, 1, 13, 4, -1, 13, 22, -1, 5, 7, -1, 12, 11, -1, -1, -1, 4, 21, 16, -1, -1, 19, 17, 46, 4, 42, 31, 36, 2, 29, -1, -1, 11, 36, 35, 32, 45, 36, -1, 29, 48, 2, 7, 55, -1, 5, -1, 11, 53, 12, 61, 59, -1, -1, 44, -1, 11, 16, -1, -1, 65, 18, 19, 80, 21, -1, 22, 57, 42, 9, 15, 52, 43, -1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case37() {
        int[] parent1 = { -1, -1, 0, 0, 3, 4, 0, 0, 7, 4, 5, -1, 9, 11, -1, -1, 11, 3, 6, 4, -1, 10, 10, 0, 3, 23, -1, 26, 18, 25, 27, 0, 2, 22, 5, 5, 8, 24, 19, 19, -1, 36, 20, 33, 38, 17, 24, -1, 29, 2, 9, 33, 9, 40, 0, 19, 3, 3, 7, -1, 6, 12, 29, 41, 0, 57, 23, 36, -1, 66, 20, 13, 24, 50, 53, 9, -1, 76, 31, 6, 3, -1, 1, 23, 62, 78, 38, 59, 56, 45, 36, 10, 4, -1, 26, 2, 77, 8, 10, 52 };
        int[] parent2 = { -1, -1, 1, 2, 0, 1, 2, 2, 0, 6, 3, -1, 1, 6, -1, -1, 12, 13, 5, 13, -1, 7, 8, 21, 17, 4, -1, 24, 13, 16, 6, 2, 31, 25, 18, 21, 34, 32, 12, 37, -1, 10, 10, 37, 7, 37, 12, -1, 13, 25, 37, 7, 10, 44, 2, 44, 8, 35, 2, -1, 4, 15, 8, 18, 6, 1, 27, 9, -1, 55, 47, 1, 61, 17, 41, 57, -1, 60, 60, 50, 66, -1, 70, 77, 40, 8, 15, 36, 27, 76, 8, 40, 45, -1, 80, 72, 11, 41, 93, 1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case38() {
        int[] parent1 = { -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97 };
        int[] parent2 = { -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 0 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case39() {
        int[] parent1 = { -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97 };
        int[] parent2 = { -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case40() {
        int[] parent1 = { -1, -1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 };
        int[] parent2 = { -1, -1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case41() {
        int[] parent1 = { -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97 };
        int[] parent2 = { -1, -1, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62, 65, 64, 67, 66, 69, 68, 71, 70, 73, 72, 75, 74, 77, 76, 79, 78, 81, 80, 83, 82, 85, 84, 87, 86, 89, 88, 91, 90, 93, 92, 95, 94, 97, 96 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case42() {
        int[] parent1 = { -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 0, 1, 2 };
        int[] parent2 = { -1, -1, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62, 65, 64, 67, 66, 69, 68, 71, 70, 73, 72, 75, 74, 77, 76, 79, 78, 81, 80, 83, 82, 85, 84, 87, 86, 89, 88, 91, 90, 93, 92, 1, 2, 0 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case43() {
        int[] parent1 = { -1, -1, -1, 1, 2, 3, 5, 4, 2, 2, 7, 9, 11, 9, 2, 14, 1, 8, 11, 2, 14, 7, 7, 16, 4, 1, 9, 18, 21, 19, 12, 14, 20, 17, 22, 2, 0, 27, 36, 14, 12, 23, 32, 16, 10, 44, 0, 3, 33, 48, 41, 3, 4, 9, 21, 46, 4, 37, 12, 23, 52, 4, 52, 42, 54, 41, 54, 28, 62, 60, 13, 6, 12, 38, 63, 65, 26, 49, 74, 20, 34, 46, 57, 6, 22, 59, 54, 63, 70, 76, 57, 12, 70, 31, 15, 84, 95, 73, 89, 23 };
        int[] parent2 = { -1, -1, -1, 2, 3, 2, 2, 2, 5, 3, 2, 2, 3, 11, 5, 1, 14, 12, 10, 17, 5, 2, 21, 12, 14, 18, 22, 10, 0, 28, 0, 16, 19, 22, 3, 13, 26, 6, 0, 24, 24, 10, 13, 27, 38, 1, 35, 11, 20, 3, 30, 26, 23, 14, 41, 7, 30, 28, 42, 39, 6, 46, 41, 14, 17, 61, 10, 8, 61, 6, 23, 26, 19, 70, 66, 3, 57, 34, 68, 16, 73, 57, 29, 14, 27, 24, 19, 12, 83, 44, 54, 33, 34, 27, 43, 11, 65, 58, 81, 49 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case44() {
        int[] parent1 = { -1, -1, -1, 2, 1, 4, 2, 4, 6, 6, 9, 0, 6, 4, 6, 2, 10, 13, 1, 8, 0, 10, 8, 5, 20, 15, 19, 8, 1, 1, 0, 4, 30, 23, 24, 2, 34, 32, 12, 36, 5, 9, 3, 9, 37, 38, 28, 37, 28, 0, 46, 7, 4, 10, 30, 23, 47, 25, 24, 11, 41, 47, 34, 15, 53, 43, 19, 40, 28, 26, 55, 31, 29, 13, 70, 35, 33, 21, 45, 64, 4, 19, 1, 10, 3, 15, 38, 47, 18, 63, 18, 26, 38, 90, 74, 57, 44, 6, 9, 94 };
        int[] parent2 = { -1, -1, -1, 1, 3, 3, 1, 6, 5, 4, 7, 3, 11, 6, 8, 8, 1, 15, 3, 3, 2, 12, 10, 20, 19, 14, 18, 18, 21, 10, 2, 16, 4, 3, 10, 8, 24, 35, 15, 20, 9, 35, 14, 25, 3, 41, 26, 16, 33, 3, 28, 10, 0, 19, 7, 30, 12, 48, 27, 45, 20, 19, 35, 62, 12, 19, 61, 41, 21, 5, 19, 50, 16, 15, 18, 64, 63, 36, 56, 36, 18, 50, 74, 25, 17, 56, 62, 41, 52, 47, 76, 13, 41, 26, 79, 44, 84, 87, 0, 4 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case45() {
        int[] parent1 = { -1, -1, 1, 0, 0, 3, 5, 5, 4, 0, 1, 4, 3, 6, 2, 7, 7, 10, 4, 16, 0, 5, 16, 7, 14, 17, 16, 25, 14, 6, 7, 10, 1, 1, 8, 7, 32, 34, 20, 29, 34, 0, 29, 30, 39, 7, 25, 15, 39, 23, 5, 35, 47, 18, 48, 19, 8, 4, 57, 39, 44, 44, 20, 20, 13, 53, 12, 26, 37, 22, 43, 51, 25, 21, 13, 13, 66, 16, 60, 55, 49, 56, 27, 58, 68, 35, 68, 65, 22, 21, 33, 77, 87, 28, 57, 10, 23, 32, 86, 35 };
        int[] parent2 = { -1, -1, 0, 1, 1, 0, 2, 0, 5, 1, 7, 3, 2, 2, 5, 6, 9, 5, 8, 12, 18, 12, 20, 11, 6, 13, 19, 19, 9, 12, 23, 3, 10, 7, 14, 5, 6, 14, 34, 20, 31, 18, 32, 0, 10, 16, 32, 19, 27, 22, 14, 33, 51, 0, 53, 44, 4, 49, 36, 17, 54, 32, 22, 30, 17, 35, 60, 36, 66, 25, 56, 44, 41, 29, 65, 22, 69, 59, 20, 57, 52, 32, 15, 30, 0, 15, 81, 74, 30, 6, 42, 90, 4, 56, 61, 25, 85, 77, 6, 57 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case46() {
        int[] parent1 = { -1, -1, -1, -1, -1 };
        int[] parent2 = { -1, -1, -1, -1, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case47() {
        int[] parent1 = { -1, -1, -1, 1, 1, 2 };
        int[] parent2 = { -1, -1, -1, 2, 3, 3 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case48() {
        int[] parent1 = { -1, -1, -1, 1, 2, 1 };
        int[] parent2 = { -1, -1, -1, 2, 3, 3 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case49() {
        int[] parent1 = { -1, -1, -1, 1, 2, 3 };
        int[] parent2 = { -1, -1, -1, 2, 3, 1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case50() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 14, 9, 18, 2, 5, 1, 15, 7, 11, 2, 12, 1, 18, 7, 11, 9, 7, 15, 3, 13, 13, 7, 2, 17, 3, 9, 16, 10, 8, 0, 4, 6, 10, 10, 6, 9, 4, 16, 6, 11, 4, 6, 17, 18, 9, 13, 19, 4, 17, 13, 1, 4, 17, 17, 6, 15, 11, 1, 7 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 20, 24, 38, 24, 25, 31, 22, 36, 24, 33, 22, 36, 35, 26, 38, 32, 39, 34, 31, 24, 28, 24, 37, 39, 21, 38, 35, 22, 26, 22, 28, 25, 29, 30, 21, 23, 34, 20, 36, 28, 39, 23, 38, 22, 21, 35, 38, 30, 26, 26, 25, 32, 33, 32, 30, 27, 32, 24, 31 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case51() {
        int[] parent1 = { -1, -1, 0, -1, -1, -1, 4, 5, 5 };
        int[] parent2 = { -1, -1, 1, -1, -1, -1, 3, 4, 3 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case52() {
        int[] parent1 = { -1, -1, -1, -1, 0, 0, 2 };
        int[] parent2 = { -1, -1, -1, -1, 2, 1, 3 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case53() {
        int[] parent1 = { -1, -1, -1, -1, -1, 0, 1, 2, 3, 4 };
        int[] parent2 = { -1, -1, -1, -1, -1, 1, 2, 3, 4, 0 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case54() {
        int[] parent1 = { -1, -1, 0, 2, 3, 1, 4 };
        int[] parent2 = { -1, -1, 1, 0, 2, 4, 3 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case55() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, 95, 94 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 95, 94, 96 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case56() {
        int[] parent1 = { -1, -1, 1 };
        int[] parent2 = { -1, -1, 0 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case57() {
        int[] parent1 = { -1, -1, -1, 0, 0, 2 };
        int[] parent2 = { -1, -1, -1, 2, 1, 3 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case58() {
        int[] parent1 = { -1, -1, 0, -1, -1, -1, 3, 4, 5 };
        int[] parent2 = { -1, -1, 1, -1, -1, -1, 4, 5, 3 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case59() {
        int[] parent1 = { -1, -1, -1, -1, 1, 2, 3 };
        int[] parent2 = { -1, -1, -1, -1, 2, 3, 1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case60() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 2 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case61() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 47 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 49 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case62() {
        int[] parent1 = { -1, -1, 0, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 34, 36, 36, 38, 38, 40, 40, 42, 42, 44, 44, 46, 46, 48, 48, 50, 50, 52, 52, 54, 54, 56, 56, 58, 58, 60, 60, 62, 62, 64, 64, 66, 66, 68, 68, 69 };
        int[] parent2 = { -1, -1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 15, 15, 17, 17, 19, 19, 21, 21, 23, 23, 25, 25, 27, 27, 29, 29, 31, 31, 33, 33, 35, 35, 37, 37, 39, 39, 41, 41, 43, 43, 45, 45, 47, 47, 49, 49, 51, 51, 53, 53, 55, 55, 57, 57, 59, 59, 61, 61, 63, 63, 65, 65, 67, 67, 69, 70, 70 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case63() {
        int[] parent1 = { -1, -1, 0, 0, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        int[] parent2 = { -1, -1, 1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case64() {
        int[] parent1 = { -1, -1, 1, 0, 3, 3, -1, 6, 1, 0, 9, 4, 9, 11 };
        int[] parent2 = { -1, -1, 0, 1, 2, 0, -1, 0, 5, 3, 2, 3, 0, 1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case65() {
        int[] parent1 = { -1, -1, 0, -1, -1, 3, 4, 3 };
        int[] parent2 = { -1, -1, 1, -1, -1, 4, 5, 5 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case66() {
        int[] parent1 = { -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96 };
        int[] parent2 = { -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 0 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case67() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case68() {
        int[] parent1 = { -1, -1, -1, -1, 0, 2, 0 };
        int[] parent2 = { -1, -1, -1, -1, 2, 3, 1 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case69() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 1, 2, 3, 5, 6, 7 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 2, 3, 4, 6, 7, 0 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case70() {
        int[] parent1 = { -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5 };
        int[] parent2 = { -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 1 };
        assertEquals("Impossible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case71() {
        int[] parent1 = { -1, -1, -1, -1, -1, 1, 2, 3, 4 };
        int[] parent2 = { -1, -1, -1, -1, -1, 2, 5, 4, 2 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

    @Test
    public void case72() {
        int[] parent1 = { -1, -1, -1, -1, 1, 3 };
        int[] parent2 = { -1, -1, -1, -1, 2, 4 };
        assertEquals("Possible", family.isFamily(parent1, parent2));
    }

}
