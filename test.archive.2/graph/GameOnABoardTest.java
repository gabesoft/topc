package topc.test.graph;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.graph.*;

public class GameOnABoardTest {
  GameOnABoard gameonaboard = new GameOnABoard();

  @Test
  public void case1() {
    String[] cost = { "11", "10" };
    assertEquals(2, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case2() {
    String[] cost = { "01", "10" };
    assertEquals(1, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case3() {
    String[] cost = { "011", "011" };
    assertEquals(2, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case4() {
    String[] cost = { "00", "11", "00", "10" };
    assertEquals(1, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case5() {
    String[] cost = { "00", "11", "11" };
    assertEquals(2, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case6() {
    String[] cost = { "0110011000", "1000101110", "1100111110", "1110111101", "0001111111", "1100001101", "1111011100", "1010111111", "1000001000", "1010010110" };
    assertEquals(4, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case7() {
    String[] cost = { "111001", "001000", "111111", "001111", "001100", "001011", "111001", "010011" };
    assertEquals(3, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case8() {
    String[] cost = { "011001000", "111010101", "110011100", "011111000", "000001011", "111001000", "101100111", "011001011" };
    assertEquals(3, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case9() {
    String[] cost = { "11111100010", "01101000100", "10001101101", "00110011001", "11100110101", "10000011001", "01000000010", "01000110011", "01000111101", "11100100110", "00011010111", "01110100111" };
    assertEquals(4, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case10() {
    String[] cost = { "001001101011", "110011001101", "111111000001", "111101010001", "011100101111", "110010111000", "111111110101", "111011110111", "111100100011", "000000000110", "101011011110", "011111000111", "101111001011" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case11() {
    String[] cost = { "000000101110", "011011110000", "111100110101", "001011010111", "100001111011", "000111100100", "001111100101", "000111010010", "101101001100", "111011111011", "110010111001", "101010001100", "100101100011", "010110111010", "111010001100" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case12() {
    String[] cost = { "000110001010011010", "001011001010100101", "000100000100111111", "000100010111000110", "001011101100011001", "001101111111101001", "001110000010001000", "000000011010001001", "100001100001101100", "101101111111110011", "001110000101111001", "111001001011010010", "011100001100111101", "111110000001011110", "100111110010101101", "000001010010110110", "100011000110001110", "110100001101101001", "000000101010110101", "100000111011011100" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case13() {
    String[] cost = { "00101100100101111011", "00111110011001000000", "10100011100111100100", "00000101001111101110", "10001011101011100111", "00010001001001000101", "10100011101011111000", "10001011100010000001", "00110111111100100110", "00100100000001100011", "10110000011101100101", "01110011001010000111", "11111100101100101011", "11100110100110100000", "11100101001011000100", "01111010011100111001", "11101010110011010110" };
    assertEquals(4, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case14() {
    String[] cost = { "1111100010111010", "0000110111001010", "1000100011101111", "0101010110100110", "1100110110010100", "1111101000000110", "0110110111110010", "1110110000100011", "1010110011100000", "0110000010101100", "0010111010111110", "0110110110101001", "1100001111110110", "1001011101000101", "1001001100000001", "1011001101101011", "1111110111011110", "0111101100111011", "1000101001110101", "1110101001100010" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case15() {
    String[] cost = { "1101110000011101000011", "1110101101110110100111", "0100100100010100001010", "1001101000100001011010", "1010011100000100101010", "0101101001110101001000", "0100100111011111100111", "1011001010101110100011", "0010110101010011100001", "1101110010101010001110", "0000101000110100001001", "1101101011111101010111", "1111101110110111100101", "1010101111000101011011", "0001101000101101111001", "0101010011110101100011", "1000111010111111100101", "1111000111011110111111", "0011100000111101010111", "0101101111101000001100", "1001001100010000110010", "1101110001001000010011", "1111000000001110100010" };
    assertEquals(7, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case16() {
    String[] cost = { "1100101111011001110110", "0100010110111001011000", "1000100010110101011111", "1011001010110001010010", "0100001010001000111011", "0111001000100011101000", "1111100100010111001001", "0001100011111001110101", "0100000011000110111101", "1101000101101101110110", "0110011100111101010101", "1010010111100011110010", "1010110100000010100101", "0111010110100101100100", "1101011010010010100011", "1101111110111000011010", "1100000001000100011001", "0101111111101110010000", "0101000100011100000010", "1000010000111011010010", "1100101000110010100101", "0000101010111111101010", "1011011001000101010010" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case17() {
    String[] cost = { "1101100000000010001001", "1001001111111101000000", "0100110011111111011000", "0010100011111101100111", "1011101011101010100110", "1000000000101010111101", "1000001111100011111110", "1111101011000001010101", "0000000001001100000010", "1100011001111100011100", "1000101111000011111000", "1000011001010011011011", "1100100100001000110101", "0000000110110100110111", "0010111101101110011001", "1000001111011001111111", "0010011100010010010100", "0101110100110011111110", "0101000110000110001010", "0000010010101010101100", "0100110111110110010011", "0101101000110101001011", "0001001001001011001101", "1010110110100001100010", "0110110011110000001110" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case18() {
    String[] cost = { "101001100001101011010110001010", "100101010001001101011001010010", "000100010000010001111110101111", "111100010011111101010001000000", "011110111101111111110111011011", "010011101001001000101101010001", "010101110111100000101110100011", "110100011101111001010000101010", "000010101000000111010101100101", "110011011111010010000100010101", "010010000000111011001001100000", "100101000101001011111010001100", "101000101111111001001010101011", "100101001001001111110100101011", "000010000101010010100011011100", "001010101011100010101001010101", "000111111100000010101100111100", "000011100001100010001101110001", "111000100001110001001101100110", "111110000000101011011011001010", "100010010010001011000000110111", "111111010111001001111110110100", "111000001110101001110000111010", "001011101110000000000010111110", "110101010100011011110101101001", "111001010001001010010011011100", "100000010111111100100111110101", "001101110111100011101100001100", "111000100001010110011010010110" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case19() {
    String[] cost = { "001011000010000100001101101", "101010000011100101110111000", "101101001110010111100101001", "111110010010010110110010000", "101000100001111110101110001", "100111010011110110011101101", "110101001101100010001011101", "000011111100000111101010101", "100011001010100011101010101", "110011101000001101010000000", "110011111001000000101011000", "000111001100010110101101000", "011001110101001110110001101", "001001011100101000011001000", "001010000011010110101110010", "001010011100011110000110110", "100011101000101011100111010", "000010001001000000111101111", "100111010010100110001101100", "000110110011111100101100011", "011111110001000011111001111", "010101110001111110010100100", "110111000101000001100101101", "011000000011010000101111011", "110000011010110010100111100", "100000101011001110010100111", "110011101010010100100111100" };
    assertEquals(5, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case20() {
    String[] cost = { "111011101110110101011101001011", "011110111100011011111011110010", "101010110010111010010111111010", "000001110101010010100101010111", "000001001111001011111101100000", "000011001101010000111011111011", "100111101110100000110101101110", "101001110101110101110001010101", "111011101100010110101010010010", "101000011010110000001111010011", "101000000011111011010101111110", "100010011110010100001101111101", "101001111011110101100000011100", "100111001101100001101011100010", "011010000010111110100011110100", "101110001100111010111010111101", "101101001000111101010000110010", "011001100011011100011001100000", "111001100110000011110001001000", "110110111000000100111001110111", "001000100110100001101101101001", "010111100000100001100001001001", "100100110100101111011011010101", "001111101100101100001100011010", "101010000101110110110000010000", "010001100010111001110010101100", "000010011011000101110101011101", "111110111001011001010101001101", "010111110111000001000000100001", "001111001101001011010111000100" };
    assertEquals(7, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case21() {
    String[] cost = { "01100101000110000001001001111011001", "10001000000001001100001011110011101", "10011010011100011010000111011100101", "11010011000010101000010100111001101", "10001110001000000010001100000111100", "10001001010010001111011011001010111", "10000001001000101011101001001001001", "01010000101110000101010011010110101", "11100101101110000010110001101010110", "11101001010000110100011011110101011", "11011000011111100110011000010001100", "11110010110010010001101001100001010", "10000100010001100000001011101011011", "11001001011111000111000101001010000", "10110101000000101000010100101101011", "01010110010101101000111010011111001", "00000111001101101101101000101001001", "00110011110100101010101010010000100", "10010110110110001011011010100010101", "11011000110010100000100100001001100", "01011110011101010011001000011110001", "11111010110100111110111011111001101", "10111011100100110111010100001010100", "01110010001010101011100100110000010", "01101010101001100101000101110110100", "00100100111110100101111000111001001", "00111011011110101110100000011100111", "10101110010101000011001000100101000", "00010001100011000011000100000111011", "01110011110000001110110101111101001", "00011001001111110001001010000100100", "01011011000011010110101111010111001", "00000100101011101000110001111111010", "00010000110000101001100111111001111", "00101111100011001111100001010010110" };
    assertEquals(6, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case22() {
    String[] cost = { "1000101011001001100001111000000011", "0100111001011111010100001000010011", "0101111001001100111000110101011001", "1000010111001000110101110101010110", "0011110010010001000100011100100000", "0000111111100101101101001100001010", "0010010011111011111001110010010010", "0010011110100110101000011100001110", "1010110010010101010011010100111011", "0100011010110011000100100111000111", "1000110110111101100110100000011110", "0110111111011010001011100000011100", "1000110010001100010010110101110001", "1000101100000110011110101000011101", "1100000110011110011111100101110011", "0010001001100110101111010100001011", "0010100100100110011101011101000100", "1100111010011111011110101110101011", "1010101001111010011110101111011001", "1101111011010001110100100000010100", "1011001110110100000011110000000111", "1001001001010100110001100111101111", "0000101111110111110010000001010110", "0110110100101010101011000111111110", "1101011011111110111100111001100110", "1000101100000000110001000110001101", "1100011111010110111110111110000001", "1001010001011000011111000000110001", "0010011011110010110010000000001001", "1110111110010101110110011100001010", "1110100111101001010001101111101111", "1011100101100111100101001110010111", "0000100001110001001001000000011101" };
    assertEquals(7, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case23() {
    String[] cost = { "1110110111101001011010111011011000", "0100111101001011101110011111111101", "0000100000010100100110010000001111", "1100111110000000011000010001100100", "1001000010000010110010010010000101", "0101100111001000110101000111110111", "0011101110111010111110000100111110", "0101100110110111011101111010011000", "0011000010110111110011111001111101", "1101111010100011010100000010100110", "1101010011110101100001110101111011", "1000100000100011011110000111101111", "1100101111001101001100111010000101", "1100001001011011111001111011100101", "0001101101111110001100101000111011", "1001110110011001111001110110010111", "0010001100001011010001101010010100", "0101110000001000111111100100010100", "1011110101111010100001011010101100", "1110010100010100100010001000011101", "0010011110111000111010101100000011", "1100011011110010001110101000000000", "0100110111100100000000000101000100", "1001110101101101111110001101111110", "1101111111110101010110111001110010", "1110000110111001111000001111001100", "0100111111100000001001111011111110", "0000000010111100010101110100000100", "1000111101000101011100111001011000", "0100011010001110001111101110101001", "0000101111000101011111001000101101", "1000011111011011100100010100111010", "0101110100011110111010100111000101" };
    assertEquals(6, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case24() {
    String[] cost = { "0111101000100010001011100100111110000010", "1110000111010000001000001101110010001001", "0101010111100000101111101111110000010110", "1111110100000110010111010001101111101000", "0110101000000010101111010110110100110000", "0011011101000110101110010000000101101011", "1000101011110100010001001001011000000000", "1011110010010101111110000100001000111000", "0101100011001000111000010001110011101100", "0101010000011011000011000111110110100001", "0111000011100111001111011001001101101111", "0010011010100101011111101101110001001100", "0110100111001001110101010000010001111100", "0001000011101011101101110011101010001110", "1000010000110110100110111001001101110000", "0000110000000100111100010111011011111110", "0110100110100111001100100000010010011010", "1100100110101111000110100110011001010011", "1110100101010100001100000010110001111000", "1111011100101111011011111011100101010000", "1010110001010101001101000011001101011110", "0001101001101101111100000001110011110100", "0100100100111111010100110001000111011101", "0011111100000100101101110011110100011100", "1010101100001001011101011001001010010000", "0010010100010001001100100001000111011001", "1101001101011011110110110000111111100110", "0010110111011101010010101110100110110100", "0111110001010110011000001100110110101111", "1011110110111111111110000010001101101100", "1110001100010011001010110100100010110000", "1010111011001100100000010010111011000010", "0010100101111101001101001111100101010100", "0111000100100100001000010001100100000011", "0101001000100100101101011010001100001101", "0011110010010100010010111100011011010010" };
    assertEquals(7, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case25() {
    String[] cost = { "110100010100100100001100001111111011", "001001000110100000011111101010010000", "100100011000110011100101010111110010", "110111110010000110111000110110100010", "110100001011101101001000101000010001", "100101100111001101001010100001001011", "001111101010000111100100001000000110", "111001101100000010100100010000000100", "101101100110000001110101000010011101", "011010011001001110110110000110111010", "100001000111110000011111100101100111", "100100001000010010110101111111000111", "011011110011010000110100001110111111", "110010101111010010110111100110101100", "111100010011010101100111000011000010", "000010101011001011100010111001011000", "011111110000110110000100101010010110", "000001010111100101011011000101101011", "000100010100000001100100010110101101", "001100111110110101011101011010101111", "010110110110001110010000100010000000", "011100011111011010101001110100001100", "010110111000101000001010010010100011", "101111011101001010000110001101101110", "100000100100111000101011101011010111", "011001111110010000000101011101000011", "101111011111100011000100111100001010", "011111100100101001110111011010010011", "100010110001001111000111111100101101", "010001101100000111001010110001011001", "101011111001111110111000010101001111", "011001111001101101010010001000000011", "101110101100010100001000001011010000", "011110011010110010011011011000110011", "001100101001001100100110100111000100", "101011110001101011011001101111000000", "100111000101011000010001111000101010", "110011111110001110110011111111101011" };
    assertEquals(7, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case26() {
    String[] cost = { "110010100101010110100010001100111011", "001000000110100011010100000001001000", "011000110111101001011101110111000100", "111001011000100101111010100110110011", "111000011101001010000100001010000010", "111001110010100101000001001100011011", "111110100111010101100000100111000111", "011111111100100111111110000001110111", "110000010101001111100011110000001000", "010010110111111100011101100000011010", "110001100001111001101000101110110001", "110010000111011110000010110111010101", "100100110101001001101000001101101101", "001011101101001100111110101111001110", "111010111111111100110100000011111100", "110101101000001001000100101011100000", "011011001011010001001000100000110101", "011111111100000011010111010011010100", "111001111110001110001110010100111010", "000001111000001100101010000001101110", "010000110000010010111110111000010101", "100010010100110011000111101001101011", "111010110001101011010001111101111100", "000111110000110000000101100101000110", "110000010111001001110001101010111100", "011111101101001011011010011111100010", "110101111101010100110010000011001101", "101101111001010100101111100001110001", "000110010100101111011011110010010010", "110101010011101000111011100000010011", "110001010001110011010100110000010001", "111010101100111100100011001101010100", "011000000000100001011010000100010001", "100000110110000001010001001111010000", "100011111110010011011011001110011111", "101100001111100101001101100000100001", "010000111011010110011001110011111000", "100010100111110111001010100101111010", "000110011110111011111000101000001000" };
    assertEquals(7, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case27() {
    String[] cost = { "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000" };
    assertEquals(0, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case28() {
    String[] cost = { "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111", "11111111111111111111111111111111111111" };
    assertEquals(40, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case29() {
    String[] cost = { "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010", "101010101010101010101010101010101010101", "010101010101010101010101010101010101010" };
    assertEquals(19, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case30() {
    String[] cost = { "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111", "000000000000000000000000000000000000000", "111111111111111111111111111111111111111" };
    assertEquals(9, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case31() {
    String[] cost = { "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101", "011101110111011101110111011101110111011", "111011101110111011101110111011101110111", "110111011101110111011101110111011101110", "101110111011101110111011101110111011101" };
    assertEquals(28, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case32() {
    String[] cost = {};
    assertEquals(18, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case33() {
    String[] cost = {};
    assertEquals(9, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case34() {
    String[] cost = {};
    assertEquals(27, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case35() {
    String[] cost = {};
    assertEquals(17, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case36() {
    String[] cost = {};
    assertEquals(9, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case37() {
    String[] cost = {};
    assertEquals(25, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case38() {
    String[] cost = {};
    assertEquals(15, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case39() {
    String[] cost = {};
    assertEquals(13, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case40() {
    String[] cost = { "011111100100111101101100011111100111", "101001111110111101110011111111011100", "111111111111111011110101111111111110", "010111111111111101101110001111110111", "111011111111110110001100101111101011", "111101101101010100110111101110110011", "111100010111100011111111001111011111", "010011111111101101011011111011111100", "101111011111101111110111110011010111", "001101011111111110111001010101101011", "110111111111100111100111111011011110", "110011101111111111110010001111010111", "111011111110101011011011110110110110", "111100110001100111111110111101101111", "100001111111100011111101100111101101", "111011101101110111110111111110001110", "110110000111010010111011100011101100", "111101000101111111100111111110100111", "110101011010111110011111111111111110", "011100111111011111111110010011111111", "111011010111101111111011111110110111", "011111111011101111101111111011111110", "111110011100110111101010011011100111", "111010010110111111110101011110110010", "001111010110111110011111110111010111", "011000111111110111001110111111110101", "110111111111101101110001111011111111", "010010111111111110111001010111111110", "111011111010110010110101000111110111", "101011111011001110111011001110100011", "110111010011010111110111101011011111", "011000111101011101011011111110100011", "101100111110011000011111010110001001" };
    assertEquals(15, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case41() {
    String[] cost = { "111110001111111110111110101101101111111", "101001011111010100110111001101100111110", "011101100111010110011011010111111111110", "011111010110001100110111111111001111011", "010111011110110000111111100101111111101", "111110101111110101111111101011111111010", "011111110111111110011110110010111100111", "001101111101111011011011111101011100111", "111110111010111101001001110101111011111", "111010100101110001101010001111111010100", "110111101010011111011010001111001111110", "111111111000110101101111111111111010110", "001001111101110111000100110110100111111", "111011001011010111111101101011111111111", "100111111001111101101111100001110111001", "101101010110011110110011111111010111011", "110111110101111111111111111100011101110", "110111101111111110101111001011001111100", "111111001101011110100001101011101010101", "111100111010000010111011111110101101011", "011101111001111101101011011010110111011", "001111101001100011111011110101110111011", "110101000111111111010101110111110111101", "011001011111111000111001101111011101101", "000110010010001100101011111101111111101", "000111110100110101110111111110111111101", "111111110110111101111111111001011011101", "011110010001000010111111111110111111011", "111111110000011111100100011101110101111", "011111111011111011000000111011111110111", "111011111000101100110111111011101111111", "111000010010000101001100101011111111101", "000111000111111111110111101101110101110", "001101110111110110111111111111111110111", "010111011110000101111011010100101100011" };
    assertEquals(14, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case42() {
    String[] cost = { "11001001111111011111100011010111101", "11011100110010001111100111111001110", "11011000101111110111101111110101000", "01101111011110101101111011010101111", "00111011110111111101001011111110101", "01110111101100111111011011010101100", "11101011110111011101111111101110111", "00111110011010111011101110110111101", "11111111111111010101111111111000011", "11101110011111101110111101011100111", "11010000011011010111011110011011110", "11101001110111011111111011011001000", "01011101101001110101110110101110111", "10111111110101100001100011111111011", "11111100110011010010011111011101011", "11011110001011101101111111110111111", "11001110101001110111110111101011001", "01111111001001110101000111111111110", "10110010100100110110100111101111111", "11111111111111101001111101011110111", "10010111111111001110110001010011101", "11101101010111111100011001111011111", "11101101011011111100111011111101011", "00100111111001010101010101110111100", "11001111011100101111111111100111110", "11011100010110011010111111111010111", "11011111111110010101100101110111100", "11101101101111111011111110111111101", "11111111001111100011011111111111101", "00111111111110011111101101001011101", "11101110101111110010111001011101101", "11011010111111000110111011010010110", "11111110001011111111111111110111101", "11101111111111100001001011011100111", "00001111001111011111011011111001101" };
    assertEquals(14, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case43() {
    String[] cost = {};
    assertEquals(13, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case44() {
    String[] cost = { "100100111111111111111110111001111110111", "101011010110111111111101111011111101110", "011101101010111111101010001101111000011", "011100101011111011011011100011101101010", "010100111001101010011111010111111111111", "111111111111111011101010011100111111111", "111011001111110011101100110111011111111", "110001111011110101110111110010111110111", "111111111110010001110010011111011110111", "111010100111101010101100100010111101111", "111111111011110100011001001101111011110", "111100111011110110011101110011000101011", "010111010001111110110101100111110111110", "111101011011110111111111111111110110011", "101011110011001101001011010101111111101", "001010100001111011011100011101100011011", "111101110111101111110101110000011111101", "001111111011101111011000011010111101111", "110111100111111111100101111111110100110", "110101111101100101011110101110110111110", "101010011100100011111011110110001101100", "100111010111111111101011111111101101100", "101110011111000111100101000011111110110", "111011101111000011101111101100001111111", "101101101111111111111110111100111111101", "011100111000000110100001111111111111011", "111101101111111111100010011000111101011", "011010001101111100111111011011111101111", "100111101111111110110011000110010000000", "111110111001010110110101100100010010110", "011010111111011110110111110010110110011", "110111111101011101001111001111001001100", "111110111110010111111111111101110111100", "011111011011111101111111111001011110011", "100100100001001100011111100111111110111", "110101111110111111111010111100111111110", "111011111101110111111001111010110110101", "101111011111011111110111110111111111111", "111110110110110011101101111110111000010", "001011111111111011111111110111100100111" };
    assertEquals(14, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case45() {
    String[] cost = { "101010111000000111110111110011011", "001011111111101110110001111111111", "110011011110110011110100110110111", "110110001000111111100111111010111", "011101111101001101011101111101011", "111111111101111100101011101001001", "101011000101101010111101110100011", "101111101111111111100111111101101", "010111110111111111100011110111000", "111111110011111100111011111101001", "100111111110011111110111111001011", "011011101111111111111111110111011", "100111111111001111101110110101000", "011111111111011110001111111001111", "110111111111111001011101011110110", "010011110110001001111111100011101", "111111111010011111111001011110111", "101011111101110101111111011110111", "111101110110011111111111110001111", "011100101111111011110011111111111", "110111010111110110111111101111001", "111111101010110110111011111111111", "110111001111111111111000101110111", "110111100111100101011011111111001", "100010111110110110101111110100110", "111011111010101110001100011100111", "011011101111110111011011011110111", "110101010110010101110111111111111", "111111111110101010011111111101101", "111101111111100001110001100010011", "101111001001010110111011110011111", "011111111010111011010011011111111", "011101011001111111111110111101111", "001110111111111111111101101111001", "001110111110001111101110111110000", "111111111100001011100111111111100" };
    assertEquals(16, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case46() {
    String[] cost = { "111111011111111000101110101010111111001", "101101011101111111111100111101111111111", "111110011111001111111111101000101011111", "111110011101110111100110111111011111111", "111111111011011111101111011010011101111", "100100100001111111111111111011011101110", "101011110111111101111011101001011111011", "010111101011111111001101111101111010101", "111111010000011011001110111011111100111", "100101010111111111110111010110111111110", "110110110100000111101100101101111101011", "111011011010111111110111111111110101111", "111011010101111011100110010010000101111", "111110011111111011111111100110100000110", "111111101101100110110110111101111111111", "000001100111111110011001110111011111111", "101101111110111111000101011101110011111", "111011001100110011100110010011110111111", "110010101101011110110111111111010111101", "111110010011011101111111110011010111110", "011110111010011110100010011111111111010", "011111111110101111111100101111111111110", "001111111110111001111100011100101100111", "101111011100011011011111101011111111101", "101011101111011111111111100000101111110", "111110110101100110110111100011101111001", "111111001110111100110110111111101000110", "111111110111001111110001110011111111111", "010110111111111111011101101101110100011", "100111100111101011000111101111001000001", "010111111010111011111110111111101100101" };
    assertEquals(14, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case47() {
    String[] cost = {};
    assertEquals(18, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case48() {
    String[] cost = { "000110100111110010110101111101011", "101110111011011001001111001010100", "111010111101111011111111100011110", "001110110110101101011111011011001", "111110111000101011111111100000110", "101110100011111011111111111111111", "111011001110111101111111100111101", "001110011011101110000101111101111", "010111011010110110111001111110011", "100101111101110111010101111111110", "110110111100100011110101110101110", "111001101101111111110111111111110", "010011111101011111000101110111011", "110101111110111111111111101111011", "001111111011111000110001010111111", "110111101101111110111011101011111", "111111011110111101111100111000001", "111111001111111001001111101011001", "011011001110110110111111011010111", "111101011111100011111101011111011", "111101111110010111001111101111010", "101000101010100010000001011001010", "110011111111011011011101111001110", "101111111011001111011101011011010", "110110001001110011100111100011111", "111001111111011111111001100111101", "110110111011101111111100111101111", "100111011100110111011100011110111", "111001011111111111011111011110011", "110101011111110110110111110111111", "010011011101101110101110011011001", "011111001001101100101110101011110", "011100110101111001101111111111100", "100011101110111111010011111101011", "000101010111001111010111110011010" };
    assertEquals(11, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case49() {
    String[] cost = { "1111111000011011100111111010111110101101", "1010111110101010111111110101100111011011", "0110111111101110001100001010111101110001", "1111011111111111000101101111100110110101", "1011001110110111111111111111111011101110", "1110111111001111111000011101011111010111", "1111001001101111010101111001011111111101", "0011000101111111000111001110011010101111", "0101110110110011100111011001000110101011", "0110110011100101011111011100111101000011", "0011110111110111111111111001111110100111", "1110110111111110111001011011111011111111", "1111111101110101100010011010010111010101", "1101100111101100110101001101111101111111", "1101111110110110011010111110111111011011", "1111110011101111111101101101100111100010", "0111101011111001111101101110110110101111", "1111111111101000111110010100100011010111", "0000110011111011001110111101111100100001", "0101111011110100111100111110001001010001", "1011100110100001111011101110011111101011", "0101111011011111011101111111111111011100", "1101011111111011111001010111111110111111", "0011111111111110011111110100001111111011", "1000001011100111110011000011111111101111", "0110001110111011010111110101111101111111", "1011101010001101001100110110100101101101", "1001111111111101110111001101110111111101", "1110111110111010111101111110110111011110", "1101011010111110000101001100110110110100", "1110110111010101111111110101100110110101", "1101101011100001101000101111110111101111", "1000111011011111111011101010101011111111", "1111111011001111111011010011110110000101", "1001011111111101011101111010101001001110", "1010111010101011010101000110110011101111", "0111010101110111111101101111100111111110", "1111011111111011011110110110111010101011", "0110111111100111001101111111101110110111", "0000111101011001011111111010100111000011" };
    assertEquals(14, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case50() {
    String[] cost = { "1100011111011000100110101001111111111111", "0011101101110111011101001011111100101011", "0101011110111111111110011110111111111001", "1110111101011010101000011010001100101111", "1011111111101110111111111110011100101011", "1111011111010011111110101011101111111111", "1101001101011010101101101100001101110110", "1111111111001111110101111100001010101111", "1010111100101110011111111111111110001110", "1110111111110011101110111111101011111111", "1110100111111100111101111111001100110001", "1001011001011110011111011011111111101111", "1111101101110101111011111010110001110011", "0111111111110111100001111101111001001111", "1000001101011110110111111001100111111011", "1111111110101010110111111100011111100011", "1111011100100111111011111110100011011111", "1101101110001001101010110010101111101111", "1111010101111110110101111011111111111110", "0110001111110111111011101100010011000101", "0101111111010111111110101101111110000101", "1010111111010111110011110001001111110110", "0001101111011110111111010111110110101011", "1100110011111011001001010101010010010111", "1111101000111000011111111001011111011101", "0110010110110111110110110111110101111100", "0111111110111011001101101110111010110111", "1110001110101011101111110110010101101110", "0010111100101110111101110111111111011101", "1011010101101110011101011111101111101011", "0111110110111111111100101010111111001100", "0101101010001101111101101110101110111110", "1110110111101011111010111111111000111010", "0100111010111011111011101010010101011000", "1010110110110101001111011100111110111011", "0011011111111100010110011011011011010001", "1101011110110100011110101111101010111111", "1110011100111111010110111111111110111100", "1011111100111111001111001111000000111010" };
    assertEquals(15, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case51() {
    String[] cost = {};
    assertEquals(14, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case52() {
    String[] cost = {};
    assertEquals(14, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case53() {
    String[] cost = { "110010100101010110100010001100111011", "001000000110100011010100000001001000", "011000110111101001011101110111000100", "111001011000100101111010100110110011", "111000011101001010000100001010000010", "111001110010100101000001001100011011", "111110100111010101100000100111000111", "011111111100100111111110000001110111", "110000010101001111100011110000001000", "010010110111111100011101100000011010", "110001100001111001101000101110110001", "110010000111011110000010110111010101", "100100110101001001101000001101101101", "001011101101001100111110101111001110", "111010111111111100110100000011111100", "110101101000001001000100101011100000", "011011001011010001001000100000110101", "011111111100000011010111010011010100", "111001111110001110001110010100111010", "000001111000001100101010000001101110", "010000110000010010111110111000010101", "100010010100110011000111101001101011", "111010110001101011010001111101111100", "000111110000110000000101100101000110", "110000010111001001110001101010111100", "011111101101001011011010011111100010", "110101111101010100110010000011001101", "101101111001010100101111100001110001", "000110010100101111011011110010010010", "110101010011101000111011100000010011", "110001010001110011010100110000010001", "111010101100111100100011001101010100", "011000000000100001011010000100010001", "100000110110000001010001001111010000", "100011111110010011011011001110011111", "101100001111100101001101100000100001", "010000111011010110011001110011111000", "100010100111110111001010100101111010", "000110011110111011111000101000001000" };
    assertEquals(7, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case54() {
    String[] cost = { "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111" };
    assertEquals(41, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case55() {
    String[] cost = { "10011100110111011100", "10110011011100100100", "10110100101001000110", "11010101010101010101", "01001101101110011011", "11010101101011011001", "01101001010101101101", "01011100101101010110", "10110101101011010110", "01110011010101010111", "11101111011011011010", "01110111010110111010", "01101101010101011010", "10101101001100110011", "10101100111010101101", "10110010101010101100", "10110110010110011100", "10001110010111000110", "01011010110011100110", "00101001101101010110" };
    assertEquals(6, gameonaboard.optimalChoice(cost));
  }

  @Test
  public void case56() {
    String[] cost = { "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101", "101010101010101010101010101010101010101" };
    assertEquals(10, gameonaboard.optimalChoice(cost));
  }

}
