package topc.test.geometry;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.geometry.*;

public class EnclosingTriangleColorfulTest {
  EnclosingTriangleColorful enclosingtrianglecolorful = new EnclosingTriangleColorful();

  @Test
  public void case1() {
    int m = 4;
    int[] x = { 1, 2, 3 };
    int[] y = { 1, 3, 2 };
    assertEquals(8, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case2() {
    int m = 7;
    int[] x = { 1, 1, 6, 6 };
    int[] y = { 1, 6, 1, 6 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case3() {
    int m = 4;
    int[] x = { 2 };
    int[] y = { 2 };
    assertEquals(72, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case4() {
    int m = 10;
    int[] x = { 2, 6, 7, 6 };
    int[] y = { 7, 7, 9, 3 };
    assertEquals(52, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case5() {
    int m = 15;
    int[] x = { 7, 6, 5, 4, 3 };
    int[] y = { 1, 4, 7, 10, 13 };
    assertEquals(150, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case6() {
    int m = 300;
    int[] x = { 75, 62, 82, 45, 46, 47, 100, 50, 104, 93, 50, 44, 43, 93, 105, 42, 45, 48, 43, 53, 46, 48, 108, 105, 62, 47, 106, 106, 42, 44, 68, 41, 100, 82, 103, 97, 88, 68, 102, 53, 107, 75, 109, 57, 102, 97, 104, 88, 103, 57 };
    int[] y = { 41, 107, 42, 97, 50, 102, 104, 104, 100, 106, 46, 93, 88, 44, 97, 68, 53, 103, 62, 105, 100, 47, 82, 53, 43, 48, 57, 93, 82, 57, 108, 75, 46, 108, 102, 45, 43, 42, 47, 45, 88, 109, 75, 106, 103, 105, 50, 107, 48, 44 };
    assertEquals(5972789, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case7() {
    int m = 300;
    int[] x = { 88, 50, 106, 93, 75, 48, 103, 42, 100, 68, 88, 50, 75, 41, 82, 44, 109, 103, 53, 68, 62, 97, 43, 57, 105, 102, 82, 107, 57, 45, 104, 102, 106, 46, 105, 47, 104, 43, 62, 53, 42, 45, 46, 97, 100, 47, 93, 108, 44, 48 };
    int[] y = { 182, 121, 168, 119, 116, 178, 123, 143, 179, 117, 118, 179, 184, 150, 183, 168, 150, 177, 180, 183, 182, 120, 137, 181, 128, 122, 117, 163, 119, 128, 175, 178, 132, 175, 172, 123, 125, 163, 118, 120, 157, 172, 125, 180, 121, 177, 181, 157, 132, 122 };
    assertEquals(11584193, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case8() {
    int m = 300;
    int[] x = { 119, 180, 179, 157, 181, 122, 119, 143, 175, 137, 168, 118, 157, 168, 178, 172, 125, 175, 137, 117, 116, 123, 150, 132, 128, 122, 163, 132, 121, 117, 180, 125, 150, 177, 128, 177, 121, 143, 178, 184, 120, 182, 179, 181, 183, 123, 120, 172, 163, 118 };
    int[] y = { 93, 97, 50, 42, 57, 48, 57, 108, 104, 43, 44, 62, 108, 106, 48, 105, 46, 46, 107, 82, 75, 47, 109, 44, 105, 102, 107, 106, 50, 68, 53, 104, 41, 47, 45, 103, 100, 42, 102, 75, 53, 88, 100, 93, 82, 103, 97, 45, 43, 88 };
    assertEquals(11584211, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case9() {
    int m = 300;
    int[] x = { 117, 183, 181, 118, 132, 128, 184, 150, 168, 121, 179, 132, 168, 182, 119, 117, 180, 120, 175, 177, 116, 175, 128, 163, 181, 178, 123, 118, 172, 143, 163, 157, 179, 122, 121, 119, 157, 122, 150, 180, 137, 177, 125, 123, 172, 125, 137, 143, 120, 178 };
    int[] y = { 157, 157, 132, 163, 181, 180, 150, 116, 181, 125, 125, 119, 119, 163, 132, 143, 172, 172, 179, 178, 150, 121, 120, 118, 168, 123, 178, 137, 120, 117, 182, 117, 175, 177, 175, 168, 183, 123, 184, 128, 118, 122, 179, 122, 180, 121, 182, 183, 128, 177 };
    assertEquals(21690886, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case10() {
    int m = 2;
    int[] x = { 1 };
    int[] y = { 1 };
    assertEquals(4, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case11() {
    int m = 3;
    int[] x = { 1 };
    int[] y = { 1 };
    assertEquals(20, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case12() {
    int m = 3;
    int[] x = { 1, 2 };
    int[] y = { 1, 1 };
    assertEquals(14, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case13() {
    int m = 3;
    int[] x = { 1, 2 };
    int[] y = { 1, 2 };
    assertEquals(8, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case14() {
    int m = 3;
    int[] x = { 1, 2, 2 };
    int[] y = { 1, 1, 2 };
    assertEquals(8, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case15() {
    int m = 3;
    int[] x = { 1, 2, 2, 1 };
    int[] y = { 1, 1, 2, 2 };
    assertEquals(8, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case16() {
    int m = 300;
    int[] x = { 299 };
    int[] y = { 299 };
    assertEquals(358202, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case17() {
    int m = 300;
    int[] x = { 299 };
    int[] y = { 150 };
    assertEquals(1289288, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case18() {
    int m = 300;
    int[] x = { 150 };
    int[] y = { 150 };
    assertEquals(53640600, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case19() {
    int m = 244;
    int[] x = { 135, 134, 130, 125, 130, 129, 129, 134, 144, 135, 126, 123, 123, 126, 131, 134, 141, 130, 126, 127, 137, 130, 136, 129, 131, 121, 137, 130, 118, 130, 129, 125, 126, 129 };
    int[] y = { 149, 143, 139, 133, 138, 146, 139, 137, 140, 147, 124, 140, 131, 129, 140, 131, 132, 136, 128, 128, 143, 134, 148, 134, 142, 138, 134, 135, 132, 146, 149, 126, 148, 138 };
    assertEquals(21343094, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case20() {
    int m = 132;
    int[] x = { 14, 10, 18, 15, 13, 14, 14, 14, 17, 14, 16, 15, 20, 10, 6, 18, 17, 17, 13, 10, 7, 19, 14, 11, 15, 6, 10, 9, 10, 13, 12, 12, 11, 15, 18, 11, 18, 12, 11, 13, 13, 16, 9, 13 };
    int[] y = { 61, 57, 56, 61, 63, 60, 58, 65, 54, 64, 65, 66, 63, 61, 62, 61, 55, 66, 60, 56, 59, 63, 57, 56, 56, 63, 67, 65, 60, 57, 65, 60, 59, 58, 66, 62, 59, 61, 63, 53, 58, 56, 60, 59 };
    assertEquals(669341, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case21() {
    int m = 197;
    int[] x = { 28, 25, 21, 27, 22, 36, 33, 24, 20, 18, 24, 25, 20, 29, 30, 21, 36, 27, 24, 16, 25, 34, 32, 21, 24, 27, 24, 21, 22, 31, 23, 22, 23, 24, 28, 24, 26 };
    int[] y = { 148, 156, 154, 153, 155, 156, 159, 157, 152, 165, 165, 160, 159, 157, 152, 162, 158, 152, 147, 157, 154, 159, 160, 159, 152, 163, 160, 149, 147, 159, 159, 156, 154, 151, 156, 158, 156 };
    assertEquals(2667543, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case22() {
    int m = 279;
    int[] x = { 18, 17, 10, 7, 22, 23, 12, 18, 15, 10, 12, 7, 19, 11, 18, 25, 5, 3, 14, 8, 5, 18, 10, 16, 8, 21, 8, 19, 7, 10, 3, 6, 19, 27, 12, 2, 7, 13, 4, 28, 12, 23, 16, 4, 11, 15, 5, 21, 5, 8 };
    int[] y = { 75, 76, 77, 74, 70, 72, 71, 77, 79, 88, 75, 73, 83, 78, 68, 70, 70, 72, 60, 75, 83, 62, 68, 85, 85, 81, 74, 89, 62, 74, 89, 67, 70, 72, 78, 88, 66, 69, 89, 70, 58, 64, 71, 62, 75, 72, 77, 61, 66, 64 };
    assertEquals(657746, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case23() {
    int m = 275;
    int[] x = { 55, 74, 61, 53, 91, 58, 46, 63, 43, 60, 66, 33, 46, 45, 56, 85, 86, 48, 67, 46 };
    int[] y = { 2, 27, 20, 15, 14, 8, 19, 12, 1, 13, 7, 15, 11, 20, 1, 9, 25, 3, 22, 29 };
    assertEquals(180316, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case24() {
    int m = 207;
    int[] x = { 204, 197, 191, 201, 206, 188, 191, 205, 200, 196, 204, 200, 202, 195, 192 };
    int[] y = { 88, 87, 84, 86, 83, 87, 90, 81, 89, 93, 92, 82, 85, 99, 81 };
    assertEquals(280745, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case25() {
    int m = 300;
    int[] x = { 180, 158, 185, 192, 194, 184, 184, 191, 150, 175, 159, 162, 173 };
    int[] y = { 133, 118, 123, 129, 139, 124, 119, 159, 130, 130, 130, 109, 142 };
    assertEquals(32031809, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case26() {
    int m = 300;
    int[] x = { 67, 107, 94, 92, 76, 82, 83, 85, 85, 96, 106, 64, 94, 52, 74, 83, 107, 81, 73, 108, 79, 93, 79, 101, 84, 84, 89, 98, 74, 90, 70, 81, 71, 99, 86, 64, 82, 79, 95, 78, 82, 62, 58, 75, 86, 56, 101, 76, 78, 87 };
    int[] y = { 32, 76, 52, 84, 71, 68, 56, 56, 62, 56, 45, 46, 75, 57, 34, 63, 57, 31, 66, 70, 50, 65, 54, 75, 62, 70, 55, 93, 58, 43, 70, 48, 92, 51, 60, 67, 59, 28, 29, 44, 50, 69, 53, 69, 57, 53, 50, 68, 57, 65 };
    assertEquals(7041874, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case27() {
    int m = 208;
    int[] x = { 54, 4, 62, 68, 61, 1, 4, 62, 1, 2, 2, 69, 2, 57, 65, 64, 64 };
    int[] y = { 159, 168, 140, 157, 161, 182, 191, 149, 181, 180, 187, 158, 183, 155, 161, 142, 153 };
    assertEquals(67343, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case28() {
    int m = 300;
    int[] x = { 149, 195, 142, 135, 195, 125, 148, 195, 209, 126, 128, 135, 130, 201, 130, 193, 189, 143, 144, 129, 203, 134, 129, 133, 196, 137, 129, 180, 193, 195, 134, 130, 191, 186, 144, 205, 190 };
    int[] y = { 41, 93, 32, 38, 86, 31, 35, 87, 88, 45, 27, 32, 43, 79, 45, 82, 80, 37, 35, 42, 79, 40, 35, 38, 75, 24, 47, 79, 89, 90, 30, 34, 86, 83, 23, 101, 96 };
    assertEquals(7402563, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case29() {
    int m = 300;
    int[] x = { 97, 112, 100, 166, 175, 164, 115, 167, 105, 169, 171, 94, 175, 161, 170, 158, 182, 102, 103 };
    int[] y = { 136, 139, 154, 73, 83, 73, 134, 69, 138, 74, 67, 141, 78, 73, 66, 71, 80, 131, 141 };
    assertEquals(17447996, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case30() {
    int m = 300;
    int[] x = { 106, 172, 99, 156, 167, 168, 103, 89, 164, 165, 105, 108, 155, 92, 160, 97, 166, 95, 108, 162, 104, 163, 105, 151, 120, 95, 164, 113, 95, 152, 118, 163, 98, 174, 157, 157, 107, 150, 161, 179, 162, 164, 94, 162, 106, 100, 169, 105, 115, 103 };
    int[] y = { 203, 14, 208, 10, 17, 32, 205, 202, 21, 19, 202, 216, 23, 208, 21, 202, 21, 214, 195, 31, 200, 20, 203, 20, 196, 215, 20, 199, 211, 13, 198, 23, 211, 22, 26, 18, 204, 30, 8, 19, 13, 19, 198, 30, 202, 207, 23, 201, 200, 192 };
    assertEquals(531971, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case31() {
    int m = 300;
    int[] x = { 125, 245, 229, 181, 245, 227, 271, 241, 137, 164, 180, 150, 253, 146, 248, 159, 132, 278, 277, 127, 259, 267, 144, 234, 224, 250, 151, 181, 134, 259, 148, 154, 154, 253, 117, 263, 241, 234, 278, 249, 159, 247, 161, 170, 223, 124, 228, 142, 257, 238 };
    int[] y = { 101, 131, 174, 74, 139, 125, 131, 150, 59, 121, 86, 87, 143, 77, 140, 102, 90, 150, 156, 92, 111, 133, 65, 150, 160, 129, 87, 92, 94, 118, 90, 91, 82, 156, 86, 170, 110, 160, 152, 127, 71, 138, 63, 81, 153, 64, 146, 62, 167, 109 };
    assertEquals(1558720, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case32() {
    int m = 300;
    int[] x = { 138, 29, 161, 43, 27, 34, 138, 113, 126, 121, 49, 139, 17, 163, 36, 30, 134, 48, 70, 19, 30, 141, 132, 144, 132, 40, 134, 138, 120, 134, 128, 56, 125, 2, 130, 36, 49, 35, 53, 161, 39, 37, 42, 134, 146, 4, 55, 39, 133, 127 };
    int[] y = { 154, 253, 170, 238, 254, 252, 161, 181, 146, 171, 245, 145, 264, 170, 227, 258, 146, 239, 260, 231, 261, 164, 153, 146, 150, 240, 158, 132, 150, 154, 144, 247, 160, 254, 180, 256, 266, 253, 242, 162, 283, 254, 246, 152, 138, 264, 240, 227, 153, 166 };
    assertEquals(29300, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case33() {
    int m = 300;
    int[] x = { 11, 263, 250, 281, 25, 77, 42, 49, 237, 50, 283, 255, 282, 20 };
    int[] y = { 292, 245, 249, 261, 299, 291, 289, 289, 230, 291, 264, 254, 267, 277 };
    assertEquals(9398, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case34() {
    int m = 300;
    int[] x = { 57, 62, 38, 53, 46, 41, 61, 30, 69, 51, 46, 57, 61, 60, 54, 59, 73, 20, 38, 42, 51, 27, 36, 66, 70, 36, 44, 74, 38, 68, 44, 24, 56, 43, 31, 44, 45, 44, 43, 30, 47, 64, 62, 27, 43, 47, 47, 58, 45, 59 };
    int[] y = { 213, 171, 285, 169, 267, 188, 218, 259, 288, 280, 290, 185, 213, 204, 216, 201, 273, 266, 272, 294, 256, 222, 289, 194, 208, 282, 265, 269, 278, 200, 214, 295, 280, 265, 226, 279, 282, 278, 280, 256, 173, 282, 280, 297, 284, 194, 207, 204, 203, 227 };
    assertEquals(324705, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case35() {
    int m = 192;
    int[] x = { 158, 109, 144, 10, 108, 151, 16, 9, 11, 149, 143, 101, 19, 104, 105, 106 };
    int[] y = { 133, 156, 132, 40, 145, 131, 36, 39, 41, 135, 136, 159, 42, 154, 146, 156 };
    assertEquals(92851, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case36() {
    int m = 230;
    int[] x = { 138, 130, 130, 128, 108, 192, 189, 112, 136, 133, 110, 199, 180, 130, 139, 192, 126, 196, 192, 134, 180, 117, 184, 189, 125, 191, 124, 109, 113, 135, 115, 133, 190, 194, 198, 123, 128, 123, 109, 126, 193, 130, 109, 192, 120, 198, 116, 202, 100, 107 };
    int[] y = { 145, 137, 148, 134, 197, 83, 89, 205, 136, 141, 196, 93, 81, 143, 140, 91, 139, 88, 76, 140, 82, 187, 76, 70, 149, 87, 137, 198, 198, 141, 199, 139, 83, 79, 93, 198, 150, 196, 188, 138, 81, 144, 185, 82, 194, 78, 180, 83, 192, 182 };
    assertEquals(859487, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case37() {
    int m = 300;
    int[] x = { 98, 92, 135, 27, 143, 116, 98, 135, 31, 93, 126, 103, 22, 93, 83, 25, 40, 143, 101, 20, 121, 91, 35, 139, 96, 129, 107, 130, 95, 25, 132, 81, 134, 38, 129, 21, 40, 30, 92, 92, 140, 103, 24, 107, 78, 20, 136, 124, 18, 26 };
    int[] y = { 284, 285, 225, 138, 231, 223, 271, 222, 138, 284, 223, 285, 127, 297, 297, 127, 145, 234, 289, 142, 240, 286, 146, 217, 287, 230, 283, 223, 280, 139, 225, 290, 224, 139, 220, 142, 140, 125, 284, 274, 229, 293, 136, 284, 276, 130, 217, 236, 130, 142 };
    assertEquals(115659, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case38() {
    int m = 168;
    int[] x = { 54, 151, 50, 150, 46, 48, 155, 39, 47, 44, 161, 141, 151, 151, 147, 43, 48, 151, 150, 48, 50, 49, 150, 49, 161, 157, 41, 48, 44, 150, 46, 156, 147, 47, 154, 151, 42, 39, 145, 153, 148, 148, 157, 151, 46, 156, 48, 157, 47, 148 };
    int[] y = { 67, 153, 69, 144, 67, 70, 144, 62, 65, 71, 140, 31, 140, 137, 27, 69, 68, 149, 143, 65, 68, 63, 39, 69, 149, 145, 72, 72, 70, 33, 64, 138, 149, 68, 145, 135, 72, 66, 38, 145, 29, 32, 30, 143, 58, 39, 66, 144, 67, 145 };
    assertEquals(11289, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case39() {
    int m = 85;
    int[] x = { 43, 8, 34, 8, 39, 31, 3, 10, 43, 38, 31, 10, 32, 37, 11, 40, 3, 10, 34, 36, 8, 9, 6, 35, 6, 31, 12, 15, 40, 11, 12, 2, 8, 33, 8, 3 };
    int[] y = { 23, 4, 37, 5, 30, 35, 34, 2, 22, 27, 23, 27, 25, 28, 29, 26, 12, 33, 27, 31, 28, 4, 27, 25, 13, 29, 33, 25, 25, 24, 8, 10, 2, 27, 31, 28 };
    assertEquals(1723, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case40() {
    int m = 32;
    int[] x = { 27, 30, 3, 24, 26, 25, 6, 29, 29, 29, 26, 26, 26, 5, 28, 4, 24, 24, 4, 25, 23, 27, 5, 26, 28, 8, 27 };
    int[] y = { 1, 2, 4, 8, 1, 10, 6, 7, 2, 1, 9, 7, 3, 6, 7, 7, 10, 1, 3, 8, 11, 10, 7, 2, 1, 4, 4 };
    assertEquals(15, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case41() {
    int m = 300;
    int[] x = { 295, 187, 149, 180, 288, 290, 36, 168, 155, 166, 270, 131, 181, 133, 297, 53 };
    int[] y = { 55, 180, 199, 185, 58, 55, 105, 184, 184, 173, 82, 195, 176, 197, 71, 124 };
    assertEquals(7544, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case42() {
    int m = 39;
    int[] x = { 30, 30, 18, 32, 31, 14, 17, 17, 30, 15, 15, 18, 10, 14, 31, 16, 16, 31, 29, 19, 14, 13, 12, 18, 19, 29, 29, 16, 15, 17, 31, 12, 21, 33, 18, 28 };
    int[] y = { 11, 8, 19, 11, 10, 6, 7, 19, 10, 8, 18, 22, 6, 3, 8, 20, 8, 13, 7, 16, 5, 4, 8, 21, 21, 8, 10, 18, 5, 6, 9, 3, 18, 9, 20, 8 };
    assertEquals(2423, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case43() {
    int m = 256;
    int[] x = { 143, 224, 164, 155, 157, 216, 199, 173, 215, 215, 208, 170, 208, 207, 164, 168, 169, 146, 213, 209, 173, 152, 197, 219, 151, 202 };
    int[] y = { 239, 74, 120, 235, 250, 232, 226, 121, 71, 244, 223, 121, 83, 64, 236, 116, 123, 229, 76, 68, 111, 233, 73, 240, 241, 68 };
    assertEquals(83107, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case44() {
    int m = 163;
    int[] x = { 83, 45, 91, 100, 81, 95, 56, 84, 85, 98, 40, 97, 41, 39, 90 };
    int[] y = { 154, 36, 157, 37, 156, 39, 55, 152, 154, 40, 31, 45, 32, 33, 39 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case45() {
    int m = 153;
    int[] x = { 57, 61, 130, 134, 137, 125, 127, 130, 67, 71, 55, 59, 128, 135, 136, 127, 62, 127, 118, 56, 68, 131, 143, 127, 61, 132, 124, 65, 62, 60, 56, 140, 75, 126, 137, 133, 121, 136, 63 };
    int[] y = { 134, 126, 7, 9, 7, 121, 122, 109, 10, 20, 137, 134, 114, 2, 4, 110, 7, 112, 114, 128, 13, 119, 11, 116, 128, 113, 115, 11, 124, 127, 137, 7, 18, 109, 1, 5, 115, 5, 124 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case46() {
    int m = 58;
    int[] x = { 56, 41, 55, 57, 54, 37, 56, 57, 55, 56, 53, 52, 57, 37, 38, 37, 54, 56, 56, 37, 54, 38, 38, 38, 37, 35, 56, 39, 37, 55, 39, 55, 40, 41, 40, 57, 53, 57, 55, 53, 56, 39, 53, 35, 40, 56, 39, 36, 40, 38 };
    int[] y = { 49, 24, 54, 53, 57, 24, 48, 56, 57, 50, 53, 56, 50, 45, 23, 22, 55, 51, 52, 44, 56, 24, 47, 43, 47, 47, 54, 23, 46, 46, 24, 49, 23, 22, 45, 55, 55, 48, 56, 56, 56, 21, 54, 44, 24, 55, 26, 43, 22, 45 };
    assertEquals(200, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case47() {
    int m = 300;
    int[] x = { 67, 58, 23, 58, 55, 66, 36, 31, 32, 63, 58, 34, 78, 78, 23, 41, 45, 41, 33, 31, 49, 52, 54, 43, 41, 43, 41, 55, 55, 48, 26, 31, 51, 72, 52, 74, 25, 74, 74, 85, 23, 78, 52, 50, 48, 54, 49 };
    int[] y = { 226, 86, 224, 227, 48, 9, 91, 48, 247, 19, 64, 89, 10, 243, 58, 52, 264, 86, 99, 79, 245, 274, 25, 108, 89, 91, 87, 84, 45, 52, 7, 96, 84, 8, 236, 33, 234, 5, 259, 61, 64, 236, 57, 107, 241, 68, 62 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case48() {
    int m = 300;
    int[] x = { 111, 197, 279, 283, 170, 198, 176, 102, 120, 287, 237, 260, 181, 285, 83, 274, 232, 103, 110, 155, 281, 192, 129, 220, 120, 195, 136, 114, 283, 274, 112, 117, 197, 283, 253, 231, 224, 280, 270, 220, 83 };
    int[] y = { 158, 202, 181, 156, 249, 165, 223, 175, 190, 166, 166, 165, 223, 126, 155, 153, 139, 162, 151, 216, 155, 243, 139, 134, 176, 254, 173, 161, 161, 161, 133, 149, 212, 179, 142, 144, 147, 190, 150, 141, 184 };
    assertEquals(54660, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case49() {
    int m = 263;
    int[] x = { 170, 72, 84, 178, 61, 41, 61, 3, 66, 168, 91, 70, 36, 184, 162, 49, 182, 46, 5, 40, 4, 171, 80, 187, 161, 66, 38, 170, 172, 67, 8, 63, 73, 76, 164, 67, 65, 52, 66, 52, 172, 14, 57, 15, 7, 67, 77, 84, 63, 71 };
    int[] y = { 71, 63, 63, 35, 136, 164, 67, 132, 145, 55, 150, 158, 59, 57, 32, 41, 73, 42, 126, 160, 126, 41, 60, 27, 42, 77, 145, 40, 44, 58, 131, 163, 37, 64, 49, 57, 148, 46, 140, 154, 50, 109, 131, 127, 126, 61, 131, 71, 59, 36 };
    assertEquals(22339, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case50() {
    int m = 125;
    int[] x = { 107, 111, 98, 118, 122, 112, 109, 116, 42, 117, 108, 121, 9, 123, 5, 102, 49, 120, 124, 2, 115, 19, 52, 116, 118, 108, 4, 14, 120, 111, 14, 119, 115, 12, 17, 54, 119, 112, 107 };
    int[] y = { 27, 29, 23, 52, 57, 24, 32, 41, 122, 21, 28, 54, 75, 48, 83, 23, 124, 53, 51, 84, 36, 76, 109, 48, 41, 25, 62, 79, 52, 27, 72, 53, 20, 80, 85, 122, 61, 29, 34 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case51() {
    int m = 255;
    int[] x = { 22, 11, 13, 26, 37, 35 };
    int[] y = { 73, 146, 231, 243, 170, 85 };
    assertEquals(267769, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case52() {
    int m = 255;
    int[] x = { 8, 2, 6, 174, 178, 12 };
    int[] y = { 45, 180, 226, 254, 252, 3 };
    assertEquals(1, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case53() {
    int m = 255;
    int[] x = { 5, 80, 87, 253, 240, 15 };
    int[] y = { 47, 242, 254, 171, 162, 42 };
    assertEquals(1, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case54() {
    int m = 7;
    int[] x = { 1, 1, 6, 6 };
    int[] y = { 1, 6, 1, 6 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case55() {
    int m = 300;
    int[] x = { 117, 183, 181, 118, 132, 128, 184, 150, 168, 121, 179, 132, 168, 182, 119, 117, 180, 120, 175, 177, 116, 175, 128, 163, 181, 178, 123, 118, 172, 143, 163, 157, 179, 122, 121, 119, 157, 122, 150, 180, 137, 177, 125, 123, 172, 125, 137, 143, 120, 178 };
    int[] y = { 157, 157, 132, 163, 181, 180, 150, 116, 181, 125, 125, 119, 119, 163, 132, 143, 172, 172, 179, 178, 150, 121, 120, 118, 168, 123, 178, 137, 120, 117, 182, 117, 175, 177, 175, 168, 183, 123, 184, 128, 118, 122, 179, 122, 180, 121, 182, 183, 128, 177 };
    assertEquals(21690886, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case56() {
    int m = 300;
    int[] x = { 117, 183, 181, 118, 132, 128, 184, 150, 168, 121, 179, 132, 168, 182, 119, 117, 180, 120, 175, 177, 116, 175, 128, 163, 181, 178, 123, 118, 172, 143, 163, 157, 179, 122, 121, 119, 157, 122, 150, 180, 137, 177, 125, 123, 172, 125, 137, 143, 120, 178 };
    int[] y = { 157, 158, 132, 163, 181, 180, 150, 116, 181, 125, 125, 119, 119, 163, 132, 143, 172, 172, 179, 178, 150, 121, 120, 118, 168, 123, 178, 137, 120, 117, 182, 117, 175, 177, 175, 168, 183, 123, 184, 128, 118, 122, 179, 122, 180, 121, 182, 183, 128, 177 };
    assertEquals(21689702, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case57() {
    int m = 299;
    int[] x = { 117, 183, 181, 118, 132, 128, 184, 150, 168, 121, 179, 132, 168, 182, 119, 117, 180, 120, 175, 177, 116, 175, 128, 163, 181, 178, 123, 118, 172, 143, 163, 157, 179, 122, 121, 119, 157, 122, 150, 180, 137, 177, 125, 123, 172, 125, 137, 143, 120, 178 };
    int[] y = { 157, 157, 132, 163, 181, 180, 150, 116, 181, 125, 125, 119, 119, 163, 132, 143, 172, 172, 179, 178, 150, 121, 120, 118, 168, 123, 178, 137, 120, 117, 182, 117, 175, 177, 175, 168, 183, 123, 184, 128, 118, 122, 179, 122, 180, 121, 182, 183, 128, 177 };
    assertEquals(21348812, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case58() {
    int m = 300;
    int[] x = { 187, 39, 230, 93, 135, 254, 122, 35, 90, 97, 216, 244, 234, 211, 41, 219, 11, 235, 65, 20, 242, 4, 199, 118, 297, 246, 233, 143, 277, 12, 86, 140, 190, 160, 162, 139, 94, 140, 117, 86, 126, 292, 221, 227, 205, 119, 152, 161, 97, 252 };
    int[] y = { 254, 227, 25, 213, 88, 17, 34, 272, 87, 62, 109, 25, 278, 76, 133, 193, 171, 227, 75, 49, 270, 242, 191, 41, 38, 183, 209, 196, 119, 223, 253, 16, 167, 255, 79, 266, 257, 223, 82, 141, 98, 183, 266, 96, 228, 73, 245, 141, 93, 141 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case59() {
    int m = 300;
    int[] x = { 150 };
    int[] y = { 150 };
    assertEquals(53640600, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case60() {
    int m = 300;
    int[] x = { 116, 175, 128, 163, 181, 178, 123, 118, 172, 143, 163, 157, 179, 122, 121, 119, 157, 122, 150, 180, 137, 177, 125, 123, 172, 125, 137, 143, 120, 178, 299, 125, 101, 131 };
    int[] y = { 150, 121, 120, 118, 168, 123, 178, 137, 120, 117, 182, 117, 175, 177, 175, 168, 183, 123, 184, 128, 118, 122, 179, 122, 180, 121, 182, 183, 128, 177, 295, 124, 102, 135 };
    assertEquals(67126, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case61() {
    int m = 300;
    int[] x = { 1 };
    int[] y = { 1 };
    assertEquals(358202, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case62() {
    int m = 300;
    int[] x = { 299, 183, 181, 118, 132, 128, 184, 150, 168, 121, 179, 132, 168, 182, 119, 117, 186, 120, 175, 177, 116, 175, 128, 163, 181, 178, 294, 118, 172, 140, 283, 157, 179, 122, 121, 119, 157, 122, 150, 180, 137, 175, 125, 123, 172, 295, 137, 143, 12, 298 };
    int[] y = { 1, 157, 132, 163, 181, 180, 150, 116, 181, 125, 125, 293, 119, 163, 132, 143, 172, 233, 179, 178, 150, 121, 120, 22, 168, 123, 178, 137, 120, 117, 182, 117, 1, 177, 175, 168, 183, 123, 184, 128, 118, 235, 179, 122, 180, 288, 2, 183, 128, 177 };
    assertEquals(0, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case63() {
    int m = 300;
    int[] x = { 1, 2, 3, 4 };
    int[] y = { 4, 5, 6, 7 };
    assertEquals(578685, enclosingtrianglecolorful.getNumber(m, x, y));
  }

  @Test
  public void case64() {
    int m = 300;
    int[] x = { 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151 };
    int[] y = { 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165 };
    assertEquals(46538106, enclosingtrianglecolorful.getNumber(m, x, y));
  }

}
