package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class MayTheBestPetWinTest {
  MayTheBestPetWin maythebestpetwin = new MayTheBestPetWin();

  @Test
  public void case1() {
    int[] A = { 3, 4, 4, 7 };
    int[] B = { 3, 4, 4, 7 };
    assertEquals(2, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case2() {
    int[] A = { 1, 3, 5, 4, 5 };
    int[] B = { 2, 5, 6, 8, 7 };
    assertEquals(5, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case3() {
    int[] A = { 4184, 4202 };
    int[] B = { 6933, 7208 };
    assertEquals(3024, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case4() {
    int[] A = { 1859, 4221, 568 };
    int[] B = { 2205, 4264, 9622 };
    assertEquals(5901, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case5() {
    int[] A = { 3614, 4326, 6021, 5881 };
    int[] B = { 9988, 7408, 6393, 6939 };
    assertEquals(5494, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case6() {
    int[] A = { 885, 653, 3887, 453, 6993 };
    int[] B = { 8121, 8289, 4556, 2606, 9631 };
    assertEquals(12196, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case7() {
    int[] A = { 4872, 3753, 1882, 1157, 442, 7236 };
    int[] B = { 5879, 8669, 6232, 4147, 9909, 8282 };
    assertEquals(11945, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case8() {
    int[] A = { 937, 1208, 4868, 7507, 424, 3542, 4992 };
    int[] B = { 9137, 4306, 5203, 9030, 5916, 4422, 9633 };
    assertEquals(12877, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case9() {
    int[] A = { 110, 8141, 7241, 1925, 4988, 1357, 1874, 569 };
    int[] B = { 9997, 8263, 7289, 6049, 6174, 1483, 9251, 1027 };
    assertEquals(11860, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case10() {
    int[] A = { 1032, 4259, 1076, 1791, 4300, 4509, 7105, 5118, 4534 };
    int[] B = { 6906, 8608, 8729, 2781, 8822, 6569, 8674, 5569, 4775 };
    assertEquals(13907, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case11() {
    int[] A = { 993, 1691, 4044, 3482, 7526, 1764, 55, 3715, 2963, 393 };
    int[] B = { 5493, 8739, 7208, 8658, 9582, 2551, 1295, 7579, 5487, 5947 };
    assertEquals(17997, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case12() {
    int[] A = { 6084, 1280, 593, 3104, 2452, 2901, 5316, 2641, 1315, 8260, 4893 };
    int[] B = { 6304, 1758, 9848, 8509, 8348, 7931, 9942, 7331, 3426, 9253, 6718 };
    assertEquals(20271, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case13() {
    int[] A = { 1606, 6894, 2460, 1318, 2410, 6373, 2967, 745, 2502, 1046, 907, 4181 };
    int[] B = { 7013, 8891, 5676, 2054, 8211, 9456, 4624, 1166, 8059, 5769, 5946, 9299 };
    assertEquals(21380, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case14() {
    int[] A = { 7211, 5504, 7904, 1280, 74, 4047, 6425, 2972, 2653, 1365, 1733, 887, 1766 };
    int[] B = { 9392, 7800, 9909, 9608, 1138, 8238, 7334, 9038, 2929, 6604, 6281, 6241, 6344 };
    assertEquals(23520, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case15() {
    int[] A = { 3925, 2693, 9256, 5, 1010, 7553, 1568, 2284, 3257, 3292, 2494, 982, 516, 8235 };
    int[] B = { 5224, 9962, 9995, 4302, 6463, 9531, 7355, 3373, 5809, 9302, 6327, 9840, 7862, 9207 };
    assertEquals(28743, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case16() {
    int[] A = { 7512, 2666, 2605, 6493, 178, 304, 262, 67, 7084, 5267, 8068, 304, 5188, 1859, 1037 };
    int[] B = { 8746, 6053, 9773, 8398, 6585, 6480, 7443, 7221, 9878, 8380, 9007, 5249, 9055, 7531, 7414 };
    assertEquals(34163, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case17() {
    int[] A = { 176, 7668, 6814, 2024, 5591, 3960, 6595, 674, 1865, 4529, 2032, 4241, 7004, 3145, 3176, 1938 };
    int[] B = { 7371, 7762, 9499, 3390, 8266, 6797, 7327, 2619, 4476, 8424, 5956, 7776, 9270, 5385, 4241, 2088 };
    assertEquals(19608, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case18() {
    int[] A = { 5094, 2994, 5409, 7877, 2535, 3571, 6048, 1018, 5782, 3941, 8411, 2107, 96, 1080, 6446, 4485, 4376 };
    int[] B = { 6327, 4328, 8403, 8302, 7173, 7752, 7206, 4139, 7869, 7323, 9852, 2868, 5991, 4367, 8479, 6205, 8739 };
    assertEquals(22028, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case19() {
    int[] A = { 5927, 8530, 579, 3976, 5556, 4364, 1283, 621, 2740, 881, 208, 4800, 6359, 856, 1127, 1492, 2333, 1767 };
    int[] B = { 7869, 9328, 3881, 5378, 6766, 4996, 8558, 5375, 6172, 9756, 8502, 7246, 9838, 8877, 6716, 2231, 8479, 2450 };
    assertEquals(34510, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case20() {
    int[] A = { 918, 4710, 5172, 3218, 4008, 6571, 57, 693, 1414, 2693, 7560, 7658, 3881, 216, 4819, 7373, 5950, 3559, 445 };
    int[] B = { 932, 5050, 5546, 4035, 6515, 7485, 435, 851, 7651, 3479, 9715, 8264, 7771, 8130, 8011, 9444, 7014, 4619, 6488 };
    assertEquals(20260, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case21() {
    int[] A = { 3809, 171, 4429, 3786, 1279, 2921, 859, 4948, 4685, 1740, 3228, 2038, 3792, 3353, 832, 1973, 1002, 8926, 1613, 2612 };
    int[] B = { 7274, 7484, 7154, 8381, 3095, 7161, 4155, 5537, 9322, 6491, 6981, 5323, 9137, 4957, 9843, 7584, 7880, 9855, 3699, 9476 };
    assertEquals(41397, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case22() {
    int[] A = { 1819, 5116, 5050, 7097, 19, 2750, 2974, 919, 6234, 3104, 370, 4577, 1595, 2512, 1254, 2372, 7094, 444, 1679, 4188, 4833 };
    int[] B = { 9861, 6639, 7304, 7526, 9120, 7001, 4526, 4833, 8782, 7828, 5607, 7987, 5909, 6634, 9820, 9594, 7817, 5779, 8192, 7373, 9164 };
    assertEquals(45648, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case23() {
    int[] A = { 1471, 2084, 4043, 1670, 2871, 3069, 2149, 4367, 3261, 6077, 1253, 4333, 5145, 2238, 5496, 1171, 2286, 4979, 5055, 2329, 5635, 2030 };
    int[] B = { 7645, 6318, 7361, 6040, 6985, 4953, 4022, 9088, 8742, 6479, 2861, 4691, 7687, 3715, 9525, 4144, 4760, 9575, 7095, 9617, 6132, 9605 };
    assertEquals(37014, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case24() {
    int[] A = { 5060, 3452, 712, 1517, 1517, 7019, 7681, 6715, 631, 5282, 8066, 848, 1238, 1809, 1449, 3674, 2281, 6579, 6629, 1233, 1249, 2154, 2026 };
    int[] B = { 5165, 4751, 1905, 2662, 6691, 9596, 8891, 9079, 8345, 8160, 9335, 6865, 7557, 7091, 7192, 4983, 9357, 7311, 9533, 5730, 8146, 9002, 3569 };
    assertEquals(41048, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case25() {
    int[] A = { 617, 2113, 30, 1597, 927, 1577, 6848, 4242, 4810, 7738, 1283, 495, 497, 1054, 2902, 3499, 517, 304, 330, 106, 1114, 2134, 1834, 3520 };
    int[] B = { 6287, 9849, 4551, 5319, 4630, 1718, 7849, 9686, 5860, 7900, 4337, 7383, 1536, 1428, 8578, 8478, 4495, 6116, 916, 3485, 5759, 2608, 8056, 9702 };
    assertEquals(43219, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case26() {
    int[] A = { 666, 4416, 4217, 1238, 2266, 1851, 6294, 6753, 1508, 5800, 256, 7761, 4520, 135, 528, 5493, 396, 667, 8780, 4417, 405, 4238, 4040, 2354, 2231 };
    int[] B = { 9979, 7591, 4913, 2497, 7640, 2434, 7921, 8072, 2359, 6396, 4968, 8835, 5084, 2595, 1573, 5968, 9264, 7709, 9240, 6979, 9651, 5479, 4503, 7159, 3635 };
    assertEquals(35607, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case27() {
    int[] A = { 243, 324, 1507, 5805, 5274, 2121, 221, 597, 4060, 4974, 470, 4922, 2872, 2217, 1642, 2234, 5358, 4962, 1957, 4570, 1215, 3888, 2823, 4876, 1617, 2837 };
    int[] B = { 7014, 694, 1552, 6399, 9878, 5487, 6755, 1588, 6637, 6073, 8775, 7427, 4262, 4445, 7704, 7532, 7383, 7835, 6965, 5450, 3769, 8425, 8774, 6778, 8343, 6750 };
    assertEquals(44554, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case28() {
    int[] A = { 840, 3260, 2648, 6343, 128, 114, 9804, 1810, 1196, 4143, 6256, 5404, 3992, 1522, 3261, 2034, 1377, 1392, 1196, 429, 5688, 4077, 8437, 7378, 2278, 4277, 3658 };
    int[] B = { 8849, 3991, 7947, 8510, 9986, 7363, 9937, 2379, 5168, 8709, 7654, 6502, 6072, 6517, 8051, 5205, 4531, 3469, 1520, 5291, 8146, 9199, 9756, 9583, 3128, 8596, 6904 };
    assertEquals(45011, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case29() {
    int[] A = { 8398, 2310, 1051, 343, 925, 2741, 5424, 5923, 1167, 5082, 7065, 547, 5741, 1993, 2256, 2093, 1771, 706, 3152, 415, 4025, 6151, 7935, 1028, 809, 606, 213, 6917 };
    int[] B = { 8679, 7473, 3201, 3963, 8009, 9671, 9323, 6910, 2452, 7648, 9761, 8120, 6558, 4665, 6016, 2626, 3761, 6984, 3332, 4304, 5038, 8551, 8293, 8999, 2189, 9453, 736, 9315 };
    assertEquals(44622, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case30() {
    int[] A = { 205, 1117, 1058, 1029, 660, 4938, 3192, 5656, 2143, 1748, 3030, 1796, 2846, 1440, 3911, 937, 5298, 572, 5012, 593, 3055, 2346, 3801, 8111, 3538, 5438, 2652, 2046, 2147 };
    int[] B = { 6370, 8560, 9005, 6503, 1903, 5005, 7915, 7185, 9505, 6567, 6772, 4538, 7377, 3901, 7789, 3165, 7493, 4861, 8384, 1068, 3233, 2588, 7806, 8462, 7424, 5601, 8797, 9545, 9392 };
    assertEquals(53200, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case31() {
    int[] A = { 7494, 2201, 1952, 4249, 1851, 6068, 1903, 3800, 4298, 696, 729, 6079, 6442, 3013, 7247, 2100, 3008, 8548, 3928, 2565, 850, 4168, 2744, 2030, 700, 1001, 7677, 2431, 2067, 241 };
    int[] B = { 9900, 3718, 4288, 9834, 5206, 7088, 8377, 8643, 6185, 6785, 8469, 9491, 9320, 4541, 9030, 3818, 3944, 9778, 9220, 6607, 5541, 5318, 6373, 3034, 1825, 5817, 8788, 8546, 4538, 633 };
    assertEquals(46288, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case32() {
    int[] A = { 2370, 6004, 3867, 3865, 1221, 3649, 3235, 3552, 4093, 250, 6144, 1650, 7589, 3135, 449, 4145, 4479, 1963, 433, 6336, 681, 3297, 3429, 5033, 117, 1395, 6247, 3810, 21, 4596, 1606 };
    int[] B = { 4166, 8706, 4528, 9415, 7034, 5910, 3959, 9535, 5680, 6684, 6202, 2030, 7638, 9410, 5712, 9358, 7626, 9833, 8969, 9400, 1868, 8209, 5265, 7141, 2258, 7000, 9492, 4104, 7925, 9447, 7614 };
    assertEquals(56729, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case33() {
    int[] A = { 2907, 949, 1674, 6092, 8608, 5186, 2630, 970, 1050, 2415, 1923, 2697, 5571, 6941, 8065, 4710, 716, 756, 5185, 1341, 993, 5092, 248, 1895, 4223, 1783, 3844, 3531, 2431, 1755, 2837, 4015 };
    int[] B = { 7296, 6954, 4407, 9724, 8645, 8065, 9323, 8433, 1352, 9618, 6487, 7309, 9297, 8999, 9960, 5653, 4721, 7623, 6017, 7320, 3513, 6642, 6359, 3145, 7233, 5077, 6457, 3605, 2911, 4679, 5381, 6574 };
    assertEquals(52873, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case34() {
    int[] A = { 6, 6744, 181, 193, 751, 6461, 5595, 7079, 1202, 2678, 2135, 22, 2244, 5553, 1926, 4814, 2782, 4665, 1046, 719, 2747, 399, 838, 1143, 2097, 7228, 4299, 2136, 3492, 2706, 2295, 5846, 1415 };
    int[] B = { 8624, 7120, 4305, 6251, 3953, 7398, 7981, 7153, 4492, 3629, 4263, 5523, 8014, 8392, 6722, 6951, 7382, 6874, 7300, 4270, 4438, 5725, 2805, 1597, 8177, 9147, 9529, 4931, 3900, 4666, 3561, 9106, 7910 };
    assertEquals(54326, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case35() {
    int[] A = { 3395, 1864, 3617, 160, 3521, 1468, 3302, 4271, 6114, 211, 1528, 1566, 866, 661, 1453, 2887, 1875, 2574, 1138, 5492, 4407, 4321, 5314, 8670, 6615, 4170, 1518, 4139, 1040, 6047, 3531, 192, 4413, 5798 };
    int[] B = { 7351, 8987, 8539, 6458, 4226, 3492, 3346, 7983, 7546, 5040, 4587, 4293, 3057, 9575, 2042, 3801, 5987, 4493, 1831, 9303, 6458, 7598, 8175, 9805, 8153, 8264, 4131, 8318, 3289, 9779, 4266, 9465, 8393, 7619 };
    assertEquals(53756, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case36() {
    int[] A = { 2947, 3055, 1651, 4291, 3060, 1795, 7701, 1262, 4487, 4836, 5613, 2432, 656, 4530, 3227, 1022, 2169, 2885, 5889, 582, 2047, 776, 4325, 4790, 4862, 7050, 3350, 1330, 3601, 4617, 1757, 8503, 5560, 5533, 1810 };
    int[] B = { 7694, 6067, 2462, 8203, 8144, 3137, 9419, 2287, 8163, 9487, 5882, 9279, 858, 8545, 9783, 5156, 9050, 9236, 9172, 3169, 2555, 4367, 7764, 6051, 7576, 9392, 7693, 1776, 4598, 7084, 9500, 8620, 7900, 5921, 7618 };
    assertEquals(54804, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case37() {
    int[] A = { 4843, 1612, 593, 7480, 3210, 4553, 6264, 4624, 2099, 3397, 4859, 831, 2828, 977, 8349, 1481, 1962, 3294, 391, 952, 1933, 7737, 4280, 1300, 5658, 5335, 8174, 4804, 7450, 1353, 9669, 6290, 7430, 1025, 5886, 7786 };
    int[] B = { 7174, 4733, 4712, 9429, 4480, 6541, 8174, 8372, 7639, 4918, 5580, 3840, 5744, 2325, 9208, 4253, 3699, 9269, 8130, 5314, 7211, 8395, 6452, 5926, 7813, 8767, 9321, 8085, 9299, 8220, 9719, 7550, 9878, 9764, 6379, 8962 };
    assertEquals(52283, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case38() {
    int[] A = { 3990, 5476, 2739, 3157, 7724, 8558, 1841, 4846, 8517, 1698, 3488, 4715, 218, 919, 3809, 994, 715, 5785, 2793, 2346, 2564, 981, 3357, 129, 3679, 5456, 3759, 4289, 652, 240, 4264, 3441, 6099, 3899, 267, 675, 296 };
    int[] B = { 9462, 9021, 4740, 8540, 8840, 8860, 2812, 8452, 8893, 2160, 3728, 7682, 6796, 9232, 6890, 9451, 7058, 7198, 9553, 8054, 8407, 3347, 5648, 4436, 7409, 8849, 6239, 9807, 1903, 1736, 4883, 8927, 7036, 7194, 7257, 9041, 4366 };
    assertEquals(67766, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case39() {
    int[] A = { 3193, 7284, 3234, 518, 2310, 275, 4640, 2816, 5851, 3625, 78, 443, 6634, 606, 4068, 321, 244, 5280, 5, 1975, 7914, 6037, 2911, 1822, 4214, 3931, 266, 6845, 2768, 1223, 49, 525, 2826, 2828, 7336, 2337, 3149, 915 };
    int[] B = { 9759, 7864, 8502, 666, 2799, 5690, 6939, 7625, 8353, 7540, 1106, 3275, 7713, 7322, 5689, 5296, 500, 9013, 6516, 2240, 8018, 9176, 8111, 5807, 7888, 8349, 7517, 9937, 7154, 4337, 4601, 6340, 5615, 8194, 8338, 7930, 9352, 9497 };
    assertEquals(69636, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case40() {
    int[] A = { 1871, 1504, 3014, 1054, 642, 7402, 1613, 1386, 4014, 1045, 3250, 2339, 2929, 481, 4036, 844, 5226, 5327, 418, 303, 1013, 1630, 1547, 1284, 2865, 4992, 2641, 3530, 1505, 2525, 2260, 3242, 1454, 4839, 5427, 5105, 4000, 2652, 217 };
    int[] B = { 2928, 4203, 8653, 2903, 7550, 9011, 9907, 4759, 5863, 8776, 3251, 4853, 3339, 7941, 5685, 2718, 5824, 7087, 740, 1205, 1206, 3480, 8495, 6811, 9211, 9004, 3858, 9486, 8106, 4796, 3172, 9269, 1615, 8424, 7413, 7664, 5602, 5521, 2384 };
    assertEquals(60644, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case41() {
    int[] A = { 301, 5478, 2842, 1453, 6307, 4204, 7000, 1806, 3341, 1348, 5714, 2349, 18, 5543, 176, 3248, 163, 424, 2426, 1700, 725, 2470, 4229, 810, 1815, 2766, 79, 4697, 3974, 5272, 1624, 8627, 5399, 3783, 6923, 1150, 153, 6318, 1599, 345 };
    int[] B = { 4986, 5646, 4771, 4192, 6708, 9121, 7900, 6963, 9999, 4590, 7190, 6114, 9749, 9206, 3245, 9248, 1975, 6180, 5277, 3228, 2849, 4020, 6812, 9131, 2729, 3147, 6374, 7365, 5887, 6285, 8773, 8888, 9161, 4653, 7146, 3925, 1643, 8265, 3364, 1138 };
    assertEquals(59622, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case42() {
    int[] A = { 5343, 4264, 1464, 847, 1163, 4282, 739, 5701, 6283, 5056, 3184, 998, 3500, 1063, 2265, 3930, 1418, 1040, 371, 7575, 2386, 6550, 3864, 3320, 2166, 5888, 1223, 1128, 707, 1987, 807, 7340, 8766, 2055, 1274, 3330, 7196, 2275, 216, 8691, 4269 };
    int[] B = { 9119, 7108, 3497, 8702, 6196, 9297, 858, 6165, 6286, 7563, 5570, 9365, 4250, 6516, 7131, 9053, 8661, 1519, 1756, 8387, 6919, 8896, 3868, 3830, 3572, 6360, 3354, 1620, 2267, 4316, 6833, 8906, 9144, 2755, 5786, 8556, 7750, 4490, 1779, 9247, 4829 };
    assertEquals(53076, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case43() {
    int[] A = { 4765, 2549, 6349, 627, 3171, 1437, 6950, 1851, 531, 3924, 3271, 837, 6458, 4484, 2734, 3854, 5994, 4195, 8344, 3948, 7996, 2440, 2843, 7153, 2192, 6019, 2799, 1146, 6427, 2010, 1920, 3371, 1464, 2973, 3021, 5032, 2842, 1084, 1312, 6450, 4638, 393 };
    int[] B = { 8033, 3960, 8486, 7788, 3953, 2984, 7622, 7768, 8163, 5893, 7706, 8267, 7646, 6804, 9182, 8860, 8338, 8881, 9225, 6057, 8890, 8843, 4468, 9083, 7432, 9601, 4880, 8658, 9466, 8339, 5089, 4843, 8688, 5175, 5258, 6040, 9127, 1591, 3588, 8983, 5473, 6586 };
    assertEquals(71960, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case44() {
    int[] A = { 2761, 2811, 5661, 2900, 2546, 2827, 849, 4934, 1255, 7526, 2869, 207, 2142, 5278, 7246, 3594, 1094, 4494, 4371, 3738, 1558, 1157, 4401, 7106, 554, 6494, 771, 1772, 598, 2914, 8309, 5188, 1466, 2505, 3728, 18, 5562, 378, 2667, 3065, 5207, 3599, 370 };
    int[] B = { 7684, 4468, 8462, 3017, 4509, 9264, 5241, 5742, 6066, 7532, 8016, 211, 3977, 7011, 7823, 5661, 4784, 7281, 8108, 7081, 6546, 7781, 5383, 9011, 2626, 9821, 1670, 2898, 1002, 7157, 9249, 5634, 4304, 3420, 7001, 9810, 5664, 1859, 2776, 7356, 6075, 4486, 3567 };
    assertEquals(54272, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case45() {
    int[] A = { 1203, 5762, 5868, 1482, 8654, 3223, 5561, 4887, 2439, 2919, 106, 5770, 2954, 6038, 3655, 1254, 5423, 766, 3399, 9211, 5648, 5191, 9491, 4924, 2249, 2064, 3021, 5141, 2387, 7081, 4913, 646, 1489, 2096, 2637, 3374, 9328, 4610, 2414, 591, 613, 3120, 1031, 2480 };
    int[] B = { 1346, 5778, 8354, 3886, 9328, 8239, 8202, 9565, 5706, 6093, 3057, 7738, 9262, 8336, 8918, 3464, 9346, 1352, 6684, 9509, 9405, 7470, 9955, 9579, 8613, 5612, 5645, 8512, 5156, 8544, 6162, 9635, 3926, 4361, 9392, 4330, 9788, 4710, 9292, 3335, 2273, 7018, 3245, 2718 };
    assertEquals(62863, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case46() {
    int[] A = { 7143, 2100, 4896, 6676, 706, 2351, 724, 1143, 1523, 1829, 3514, 5721, 8692, 4118, 847, 3013, 3918, 4096, 5331, 8415, 4843, 3823, 576, 4745, 5376, 1719, 5650, 7976, 2709, 3322, 4203, 3782, 7598, 337, 7688, 2523, 7538, 1422, 3055, 2062, 547, 3286, 4876, 2085, 7227 };
    int[] B = { 9920, 9178, 9412, 8985, 8792, 5759, 5101, 6601, 4877, 7148, 4562, 8940, 9688, 7219, 5696, 5201, 6972, 8625, 9318, 9960, 7304, 6898, 6789, 9016, 5377, 9580, 7796, 9991, 7036, 9509, 7533, 7279, 9018, 509, 8882, 3923, 9296, 8372, 8617, 9250, 1762, 9976, 8477, 8263, 9614 };
    assertEquals(83149, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case47() {
    int[] A = { 543, 8331, 4282, 2595, 5209, 1315, 5546, 1654, 5636, 2406, 283, 4966, 4485, 4435, 5255, 1719, 566, 7950, 8956, 3115, 2415, 760, 2890, 1102, 3259, 921, 2827, 322, 68, 6877, 2156, 6094, 886, 2966, 3484, 802, 8181, 7548, 14, 4058, 3952, 6031, 2086, 2832, 2340, 3703 };
    int[] B = { 5466, 9174, 9679, 8859, 8181, 6213, 8294, 8573, 7761, 6746, 9321, 9330, 7922, 6771, 6307, 2439, 4324, 8432, 9954, 7160, 6101, 5972, 7798, 3827, 9074, 9307, 6027, 3187, 5872, 8935, 5858, 9748, 1470, 8502, 7886, 5709, 9617, 9823, 1699, 6676, 7556, 7999, 5509, 6016, 9820, 9974 };
    assertEquals(86524, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case48() {
    int[] A = { 812, 2352, 3313, 3816, 193, 2565, 2855, 3477, 3913, 3921, 4781, 1572, 5930, 2641, 208, 1204, 7233, 5589, 4761, 4191, 3658, 3385, 401, 999, 5784, 5478, 5917, 3575, 2165, 6977, 315, 708, 2978, 24, 3800, 3827, 1646, 2730, 1882, 6008, 6, 7943, 192, 4514, 1206, 3565, 1228 };
    int[] B = { 2264, 4905, 8133, 6813, 4121, 6854, 4488, 4089, 3961, 9919, 8722, 7784, 7016, 5694, 268, 9686, 9660, 5887, 6589, 5587, 8774, 6959, 9073, 4140, 9453, 6565, 9586, 4128, 7976, 9203, 5128, 6992, 7961, 2229, 4119, 4238, 9946, 4393, 9062, 6628, 2482, 8683, 6713, 5639, 8282, 7228, 6051 };
    assertEquals(78917, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case49() {
    int[] A = { 1945, 5558, 3406, 1992, 2023, 3474, 2044, 1043, 2615, 3012, 1550, 698, 1987, 5281, 6710, 4913, 8635, 3573, 3447, 4013, 5514, 9230, 480, 4600, 1506, 2724, 6615, 466, 810, 6627, 2168, 2520, 7173, 2003, 3882, 7441, 4231, 1706, 2074, 3365, 5062, 7122, 8241, 1909, 1375, 6537, 3339, 1658 };
    int[] B = { 8282, 8843, 4952, 4148, 6483, 7467, 6505, 3433, 7659, 3787, 6544, 5357, 5287, 6920, 6872, 8030, 8959, 7697, 6570, 7240, 7701, 9646, 4987, 8997, 2294, 5743, 9255, 9084, 4993, 7216, 9755, 6370, 9169, 3257, 8870, 8470, 5774, 3538, 8450, 6831, 6099, 8428, 8924, 2988, 3722, 8386, 3755, 1685 };
    assertEquals(68563, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case50() {
    int[] A = { 5182, 1690, 4194, 249, 298, 5573, 7422, 1418, 3601, 4272, 2891, 2570, 4367, 6224, 6830, 2473, 1304, 2149, 2406, 4029, 3568, 4922, 1640, 1702, 581, 1904, 1528, 3852, 613, 4759, 167, 378, 1728, 8298, 6642, 2335, 1611, 2385, 4532, 6206, 1094, 5690, 4177, 5, 3493, 1867, 1427, 669, 2960 };
    int[] B = { 8535, 8058, 9644, 7504, 5432, 7237, 9720, 9362, 9846, 7120, 9066, 4444, 9279, 9709, 7727, 9861, 9440, 2953, 8179, 4206, 9014, 8778, 2574, 7891, 5507, 2025, 4318, 5146, 4461, 5151, 8588, 6560, 8356, 9751, 9188, 4481, 6645, 3465, 6443, 6491, 4645, 8683, 9718, 9300, 7111, 4942, 3280, 2432, 3982 };
    assertEquals(93187, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case51() {
    int[] A = { 4660, 1657, 635, 3841, 358, 3407, 838, 5344, 2153, 1523, 1244, 2035, 5725, 7710, 1142, 8699, 8349, 5396, 7544, 1427, 741, 633, 4844, 304, 1063, 2304, 7491, 413, 481, 1417, 4494, 3671, 4452, 1847, 1989, 8063, 3738, 853, 2543, 7429, 2885, 2987, 3503, 2944, 6288, 1122, 2425, 7882, 5009, 4126 };
    int[] B = { 7227, 5597, 8498, 4347, 9711, 5482, 8856, 9275, 8603, 9945, 6836, 4579, 6430, 8762, 2790, 8893, 9079, 7022, 8377, 4232, 9553, 2492, 8706, 4807, 5353, 3639, 8959, 1247, 7704, 7547, 8381, 7329, 5550, 6467, 7007, 9768, 8050, 4449, 4905, 9995, 4265, 7251, 8460, 6955, 7428, 4826, 4680, 8770, 9484, 4945 };
    assertEquals(85943, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case52() {
    int[] A = { 1, 1 };
    int[] B = { 10000, 10000 };
    assertEquals(9999, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case53() {
    int[] A = { 10000, 10000 };
    int[] B = { 10000, 10000 };
    assertEquals(0, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case54() {
    int[] A = { 1, 1 };
    int[] B = { 1, 1 };
    assertEquals(0, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case55() {
    int[] A = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] B = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    assertEquals(0, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case56() {
    int[] A = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] B = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    assertEquals(249975, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case57() {
    int[] A = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    int[] B = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    assertEquals(0, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case58() {
    int[] A = { 162, 150, 25, 3, 114, 48, 63, 10, 35, 100, 124, 115, 38, 168, 44, 3, 73, 52, 69, 75, 139, 51, 51, 36, 180, 8, 50, 69, 72, 40, 163, 91, 19, 119, 134, 110, 106, 23, 140, 30, 6, 69, 39, 23, 35, 98, 151, 67, 62, 86 };
    int[] B = { 173, 181, 195, 162, 136, 95, 125, 148, 178, 165, 140, 175, 47, 191, 160, 138, 93, 200, 165, 185, 199, 74, 116, 155, 200, 155, 119, 167, 157, 180, 183, 171, 183, 131, 135, 194, 112, 51, 168, 140, 27, 125, 43, 77, 177, 187, 197, 165, 188, 145 };
    assertEquals(1818, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case59() {
    int[] A = { 281, 199, 167, 277, 64, 28, 203, 6, 41, 341, 117, 160, 75, 124, 43, 84, 6, 31, 17, 58, 165, 113, 84, 135, 68, 64, 67, 229, 88, 47, 43, 95, 350, 190, 28, 8, 293, 69, 111, 44, 287, 282, 273, 117, 201, 138, 246, 209, 106, 84 };
    int[] B = { 316, 357, 275, 327, 342, 154, 246, 20, 139, 373, 189, 389, 263, 220, 125, 192, 86, 389, 280, 211, 393, 364, 168, 331, 92, 216, 206, 253, 218, 80, 392, 303, 386, 339, 357, 362, 351, 72, 283, 186, 337, 363, 300, 335, 203, 145, 284, 354, 362, 174 };
    assertEquals(3273, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case60() {
    int[] A = { 491, 316, 60, 112, 173, 423, 32, 362, 305, 377, 53, 217, 223, 86, 227, 117, 132, 121, 235, 66, 378, 81, 193, 147, 198, 515, 49, 478, 80, 399, 429, 57, 154, 435, 4, 201, 327, 494, 510, 196, 102, 31, 295, 416, 66, 506, 233, 294, 92, 363 };
    int[] B = { 562, 481, 536, 559, 575, 487, 420, 450, 531, 456, 441, 279, 405, 165, 486, 425, 418, 252, 345, 80, 470, 397, 355, 187, 218, 545, 65, 585, 544, 458, 519, 578, 269, 440, 137, 388, 339, 559, 594, 443, 125, 207, 469, 574, 175, 560, 247, 340, 242, 531 };
    assertEquals(4031, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case61() {
    int[] A = { 168, 284, 17, 498, 127, 268, 369, 53, 32, 406, 151, 275, 39, 259, 504, 201, 555, 254, 140, 230, 260, 531, 321, 366, 71, 59, 124, 733, 105, 618, 436, 91, 176, 215, 644, 82, 470, 359, 117, 2, 70, 543, 108, 525, 4, 139, 338, 730, 234, 303 };
    int[] B = { 710, 704, 214, 631, 380, 509, 372, 685, 751, 446, 351, 767, 455, 693, 698, 548, 671, 641, 550, 537, 769, 653, 444, 751, 251, 693, 383, 782, 242, 728, 743, 768, 225, 627, 734, 395, 667, 746, 377, 792, 561, 693, 457, 572, 327, 686, 433, 748, 311, 621 };
    assertEquals(7444, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case62() {
    int[] A = { 46, 436, 30, 16, 13, 564, 121, 90, 527, 112, 98, 839, 485, 608, 141, 106, 772, 702, 723, 176, 356, 772, 401, 196, 156, 788, 47, 67, 136, 274, 175, 378, 491, 246, 513, 573, 483, 905, 374, 88, 239, 253, 11, 139, 99, 82, 32, 306, 64, 149 };
    int[] B = { 275, 551, 951, 456, 503, 902, 636, 490, 797, 238, 873, 892, 931, 943, 670, 579, 857, 765, 872, 307, 439, 965, 831, 231, 693, 909, 149, 664, 695, 377, 610, 540, 802, 305, 821, 818, 900, 985, 448, 912, 438, 783, 412, 889, 118, 616, 933, 844, 677, 174 };
    assertEquals(8534, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case63() {
    int[] A = { 200, 1013, 275, 384, 248, 461, 504, 809, 786, 750, 121, 403, 376, 703, 264, 702, 30, 258, 174, 246, 281, 642, 864, 254, 223, 617, 353, 225, 859, 290, 499, 418, 712, 186, 81, 500, 279, 486, 546, 39, 357, 467, 1029, 386, 296, 1056, 241, 29, 108, 430 };
    int[] B = { 879, 1110, 752, 532, 1197, 596, 826, 1039, 995, 946, 1116, 1105, 390, 1013, 751, 930, 1194, 1123, 564, 318, 1129, 1145, 991, 972, 395, 803, 689, 326, 1005, 828, 1018, 917, 722, 708, 772, 621, 605, 582, 640, 130, 1093, 959, 1086, 626, 481, 1122, 361, 45, 135, 710 };
    assertEquals(8766, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case64() {
    int[] A = { 24, 11, 578, 966, 39, 143, 97, 292, 842, 64, 651, 453, 1083, 26, 354, 89, 452, 277, 317, 1176, 645, 584, 444, 687, 52, 363, 78, 437, 44, 87, 597, 520, 235, 414, 531, 469, 1325, 194, 63, 358, 420, 1206, 756, 165, 668, 283, 726, 495, 56, 273 };
    int[] B = { 1027, 553, 657, 1150, 1229, 328, 1218, 1215, 974, 1254, 855, 849, 1185, 1260, 1201, 1032, 1254, 522, 798, 1222, 1364, 875, 446, 775, 445, 824, 426, 553, 622, 484, 636, 1006, 404, 1117, 1147, 573, 1387, 525, 621, 1355, 524, 1311, 859, 218, 885, 1145, 770, 692, 314, 1236 };
    assertEquals(11107, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case65() {
    int[] A = { 39, 187, 758, 41, 425, 209, 114, 1055, 45, 375, 802, 559, 735, 275, 1111, 676, 570, 14, 827, 97, 248, 257, 259, 112, 1015, 228, 71, 1068, 250, 650, 322, 692, 316, 320, 306, 951, 355, 874, 333, 999, 737, 139, 211, 319, 250, 325, 557, 1083, 315, 613 };
    int[] B = { 795, 431, 784, 900, 1486, 646, 818, 1256, 148, 726, 986, 843, 1168, 802, 1136, 1394, 1173, 626, 1219, 232, 1025, 556, 1238, 795, 1152, 1457, 80, 1542, 1544, 1426, 459, 1509, 793, 1023, 339, 1332, 447, 992, 1378, 1202, 846, 1510, 1039, 756, 538, 463, 586, 1149, 1129, 1241 };
    assertEquals(12013, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case66() {
    int[] A = { 147, 408, 1684, 634, 98, 722, 87, 763, 518, 1253, 640, 4, 550, 1133, 262, 45, 902, 1342, 1408, 238, 364, 728, 89, 565, 678, 363, 1165, 297, 367, 1068, 795, 558, 563, 144, 417, 490, 757, 297, 1504, 874, 494, 315, 983, 140, 1004, 746, 498, 728, 1146, 508 };
    int[] B = { 1573, 1547, 1799, 1104, 639, 1023, 1504, 1431, 1690, 1438, 1303, 1061, 1087, 1743, 1120, 404, 1784, 1384, 1793, 904, 1118, 1481, 1039, 673, 783, 1638, 1610, 509, 1699, 1729, 1679, 574, 850, 1796, 1788, 1614, 816, 925, 1630, 977, 563, 1159, 1587, 317, 1032, 1589, 561, 886, 1316, 1167 };
    assertEquals(14977, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case67() {
    int[] A = { 642, 1489, 150, 611, 89, 288, 976, 344, 982, 1444, 532, 260, 745, 642, 437, 66, 364, 1251, 946, 1399, 455, 981, 362, 1480, 5, 877, 330, 829, 71, 1073, 1506, 861, 469, 1373, 457, 1125, 682, 215, 140, 167, 1334, 383, 879, 1620, 557, 294, 216, 1121, 1369, 113 };
    int[] B = { 1287, 1543, 943, 819, 1751, 1677, 1975, 664, 1317, 1692, 1442, 476, 1625, 1874, 1834, 1292, 881, 1406, 1254, 1676, 1396, 1894, 1538, 1741, 1180, 1505, 595, 1131, 1480, 1531, 1818, 1583, 1818, 1415, 760, 1981, 916, 311, 1388, 1667, 1334, 509, 1805, 1861, 1345, 1125, 678, 1326, 1876, 1272 };
    assertEquals(16603, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case68() {
    int[] A = { 901, 1244, 622, 50, 187, 274, 291, 1317, 1054, 739, 433, 438, 825, 2014, 36, 858, 148, 1002, 566, 1769, 661, 551, 319, 286, 88, 485, 358, 1324, 991, 1206, 365, 1013, 864, 1576, 271, 1496, 80, 1701, 1035, 679, 76, 896, 421, 10, 481, 907, 515, 313, 1291, 145 };
    int[] B = { 2104, 1374, 1850, 789, 1771, 1972, 373, 1756, 1915, 2009, 2136, 1236, 1111, 2115, 1320, 898, 647, 1356, 1782, 2186, 897, 1096, 1110, 1269, 2078, 854, 1635, 1542, 1118, 1290, 791, 1908, 873, 2028, 1467, 2196, 1373, 1709, 1651, 1506, 1355, 2091, 1981, 1724, 1186, 935, 803, 1555, 1735, 1868 };
    assertEquals(19576, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case69() {
    int[] A = { 388, 274, 745, 65, 43, 1327, 1681, 711, 1396, 1253, 512, 34, 196, 990, 1399, 1280, 160, 432, 3, 569, 1397, 505, 340, 1730, 180, 1073, 720, 1292, 9, 961, 772, 111, 1681, 868, 872, 1148, 2133, 461, 1824, 761, 382, 1346, 819, 402, 344, 671, 2221, 334, 399, 742 };
    int[] B = { 2291, 2116, 1927, 2120, 1055, 2135, 2189, 1306, 2189, 1320, 2397, 265, 937, 2201, 2209, 2180, 1117, 1263, 236, 1751, 2004, 688, 1411, 1934, 242, 1088, 1451, 1703, 420, 2285, 1935, 1537, 2392, 2209, 1502, 1835, 2140, 599, 2300, 1433, 585, 1684, 952, 1367, 1297, 1885, 2299, 335, 2112, 904 };
    assertEquals(18888, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case70() {
    int[] A = { 664, 540, 302, 286, 326, 1075, 1535, 2029, 1637, 1500, 516, 1402, 1350, 383, 1702, 675, 527, 1052, 477, 144, 596, 502, 242, 471, 1648, 1902, 571, 726, 526, 1853, 443, 1236, 363, 81, 29, 984, 812, 331, 22, 875, 1024, 585, 2123, 855, 1302, 1224, 127, 770, 579, 649 };
    int[] B = { 965, 1455, 2331, 420, 2195, 1699, 1744, 2319, 2071, 1871, 2524, 2072, 2475, 2549, 2557, 1043, 2083, 1715, 1447, 1293, 698, 1862, 1545, 478, 1733, 2510, 983, 1097, 1713, 2420, 1892, 1332, 2361, 2420, 86, 2417, 858, 675, 520, 1474, 2347, 1845, 2307, 1225, 1580, 2411, 262, 784, 814, 941 };
    assertEquals(19423, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case71() {
    int[] A = { 470, 729, 1135, 1679, 955, 409, 1171, 590, 841, 1210, 33, 645, 86, 1225, 1034, 2074, 697, 1471, 641, 2072, 1206, 647, 291, 619, 167, 457, 89, 206, 2320, 475, 181, 56, 139, 488, 1921, 692, 1011, 1118, 978, 1237, 595, 188, 598, 691, 1085, 1851, 524, 350, 714, 1021 };
    int[] B = { 2719, 1886, 1636, 2402, 1396, 2291, 2275, 1578, 2480, 1761, 842, 2102, 619, 2435, 1709, 2352, 1185, 1807, 734, 2208, 2243, 1960, 2725, 1508, 2053, 849, 2605, 227, 2562, 2129, 826, 318, 2204, 2633, 2058, 900, 1928, 2187, 2363, 2426, 2050, 1003, 2207, 2232, 2471, 2759, 2521, 2236, 2009, 1537 };
    assertEquals(26532, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case72() {
    int[] A = { 2634, 2591, 203, 230, 540, 1549, 118, 664, 539, 633, 285, 1560, 1968, 1161, 1725, 327, 296, 738, 61, 1702, 1472, 522, 2184, 853, 825, 136, 1768, 1136, 425, 22, 310, 2016, 517, 1606, 15, 133, 1395, 932, 319, 199, 1553, 428, 128, 422, 1178, 434, 1140, 1958, 2630, 168 };
    int[] B = { 2638, 2974, 1608, 2365, 1677, 2316, 755, 1073, 1613, 2035, 578, 1689, 1971, 2212, 1942, 1588, 807, 1360, 471, 1869, 2017, 699, 2928, 1746, 1894, 1626, 2658, 1866, 1014, 1695, 1820, 2462, 1516, 1766, 168, 1327, 1399, 2556, 2994, 2824, 2576, 1443, 2033, 2384, 2288, 2833, 1569, 2032, 2935, 2486 };
    assertEquals(23374, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case73() {
    int[] A = { 1349, 545, 352, 326, 1477, 1240, 213, 943, 2268, 1589, 2051, 357, 704, 793, 580, 2431, 1542, 901, 242, 247, 2180, 1561, 887, 733, 2083, 482, 953, 207, 1230, 495, 1435, 1165, 848, 632, 659, 2540, 787, 677, 287, 2566, 65, 1017, 134, 429, 2508, 1855, 1720, 1614, 1909, 2992 };
    int[] B = { 2486, 1398, 2397, 2480, 2729, 1492, 2801, 2527, 2972, 2591, 2701, 1615, 3117, 2584, 1306, 2594, 1774, 1567, 718, 2753, 2655, 3119, 2923, 2988, 2788, 891, 2315, 1057, 2049, 554, 2792, 2605, 1428, 2486, 2023, 2995, 921, 2647, 624, 2824, 391, 1360, 469, 2290, 2870, 2856, 2378, 2364, 2370, 3054 };
    assertEquals(25444, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case74() {
    int[] A = { 182, 307, 136, 2430, 232, 1419, 781, 1701, 556, 1392, 185, 677, 1038, 196, 728, 1571, 339, 1591, 269, 564, 2760, 442, 1639, 427, 2427, 604, 1499, 2449, 916, 703, 1176, 2019, 743, 1031, 1849, 1374, 523, 216, 1055, 2347, 1955, 1697, 1727, 191, 737, 1327, 2569, 3198, 533, 365 };
    int[] B = { 576, 2564, 2758, 2522, 894, 2205, 3234, 1761, 2379, 3238, 1119, 2388, 1679, 519, 3248, 1602, 2593, 2902, 891, 1243, 2821, 3222, 2659, 1335, 3060, 2770, 2878, 3048, 2423, 1256, 1861, 2908, 2752, 2571, 3280, 3041, 3317, 969, 1978, 2354, 2480, 2198, 2363, 1285, 1961, 2313, 3239, 3279, 2238, 2801 };
    assertEquals(29092, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case75() {
    int[] A = { 463, 879, 1388, 1477, 2815, 2736, 1347, 623, 866, 24, 2506, 2216, 111, 973, 591, 1888, 1813, 911, 1298, 171, 971, 2909, 2121, 550, 3190, 953, 175, 612, 1614, 1252, 2010, 2414, 1004, 993, 476, 1348, 1265, 1091, 423, 605, 400, 343, 1939, 546, 156, 104, 172, 2362, 411, 247 };
    int[] B = { 3063, 1948, 3428, 1830, 2833, 3299, 2551, 1672, 3562, 3249, 3528, 3549, 1791, 1364, 868, 3103, 2393, 2445, 3515, 3497, 3048, 3524, 2647, 3439, 3343, 1900, 3538, 1629, 3255, 3098, 2082, 3474, 3234, 1937, 1511, 3233, 2146, 3057, 2978, 2618, 2497, 1589, 3068, 1491, 2092, 2770, 2824, 2586, 1000, 2253 };
    assertEquals(36799, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case76() {
    int[] A = { 24, 2465, 177, 1967, 357, 931, 811, 2046, 1559, 2909, 740, 1902, 233, 807, 1759, 3331, 811, 358, 607, 868, 754, 982, 1871, 316, 2229, 1312, 998, 2151, 2045, 1423, 707, 1927, 125, 658, 170, 1209, 2277, 1573, 651, 3107, 1273, 1024, 3328, 242, 1798, 2947, 1075, 1216, 675, 3236 };
    int[] B = { 2910, 2768, 3239, 2323, 3074, 1846, 3153, 3108, 3089, 3520, 2801, 2028, 3617, 1851, 1942, 3523, 2492, 2457, 2104, 2791, 3346, 2096, 3587, 1878, 3280, 2254, 1301, 3432, 2712, 2706, 1056, 3164, 1798, 837, 1155, 2060, 2507, 3362, 1084, 3543, 3088, 1685, 3430, 1984, 3052, 3304, 1154, 1630, 2317, 3716 };
    assertEquals(29597, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case77() {
    int[] A = { 1705, 1537, 680, 2452, 201, 222, 2136, 223, 1974, 2193, 871, 279, 57, 909, 2374, 140, 7, 1052, 886, 372, 1349, 1163, 3172, 1336, 1358, 603, 376, 1641, 636, 1115, 485, 841, 948, 1116, 457, 1317, 975, 2748, 2164, 797, 303, 301, 615, 2310, 1023, 1312, 194, 535, 1100, 1191 };
    int[] B = { 3771, 2184, 1923, 2607, 2899, 2651, 3268, 1752, 2520, 2629, 2943, 2821, 526, 1274, 3345, 3804, 2694, 2887, 2841, 3639, 3038, 2754, 3205, 3352, 1504, 1053, 2681, 2649, 672, 3730, 3387, 3545, 2292, 3167, 3963, 3664, 990, 3215, 2484, 1551, 3019, 2303, 1157, 2488, 2945, 3095, 3694, 1821, 3038, 3254 };
    assertEquals(39469, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case78() {
    int[] A = { 347, 1366, 2178, 3270, 1801, 2264, 625, 3472, 1368, 384, 1026, 45, 2049, 2070, 2008, 1182, 2156, 15, 2275, 3631, 1250, 2084, 2515, 3948, 528, 2031, 3970, 2128, 1066, 1241, 217, 928, 6, 3639, 171, 1867, 457, 1945, 523, 231, 2974, 446, 1375, 693, 2059, 653, 1707, 406, 512, 937 };
    int[] B = { 1417, 2307, 3775, 3822, 4051, 3799, 2092, 4093, 2771, 993, 1729, 2073, 3739, 3865, 2926, 3368, 3044, 3495, 2893, 3784, 2761, 3631, 2590, 4150, 1986, 4128, 4176, 3529, 2321, 2972, 1085, 3826, 1757, 4190, 1052, 3619, 1040, 4188, 2766, 1158, 3312, 3665, 1378, 1960, 2469, 3896, 3087, 2104, 2033, 2107 };
    assertEquals(33467, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case79() {
    int[] A = { 2242, 726, 4200, 1346, 2298, 2283, 2970, 292, 1328, 3135, 1697, 2700, 163, 387, 3698, 1874, 442, 166, 2167, 3549, 1184, 3216, 2089, 142, 2330, 38, 2657, 400, 417, 54, 2143, 2455, 1311, 123, 38, 398, 821, 1335, 1574, 40, 1585, 2342, 88, 2611, 2036, 1307, 712, 3369, 1554, 2190 };
    int[] B = { 2699, 817, 4394, 2831, 3464, 3562, 3658, 2892, 2919, 4301, 2385, 3640, 3767, 2921, 4082, 4179, 2564, 768, 2571, 3696, 2081, 3237, 4241, 1168, 2967, 1998, 3303, 3107, 3448, 860, 3145, 3830, 3505, 3153, 1664, 1865, 2997, 1525, 3233, 1819, 3675, 2707, 1280, 3961, 3967, 2307, 1495, 3573, 3380, 4391 };
    assertEquals(33885, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case80() {
    int[] A = { 472, 1933, 407, 557, 1755, 2766, 1056, 4049, 451, 2480, 1993, 706, 2531, 3635, 1183, 2448, 1008, 4203, 2053, 1410, 1851, 2038, 3170, 3998, 1406, 3051, 546, 3460, 917, 468, 982, 1433, 2956, 2655, 2110, 1438, 1007, 2239, 1, 1367, 2490, 655, 630, 971, 1909, 3124, 1341, 3108, 1011, 81 };
    int[] B = { 2345, 4578, 2001, 4449, 2127, 3745, 2628, 4213, 807, 4057, 2680, 2316, 2924, 3771, 2493, 3818, 4431, 4388, 3292, 2704, 3739, 2747, 3400, 4145, 2298, 4285, 3809, 3541, 2328, 4025, 4037, 4174, 3854, 3290, 3294, 2281, 3371, 3430, 101, 3675, 3482, 4476, 2440, 1568, 3274, 3496, 1710, 4229, 3772, 2725 };
    assertEquals(35627, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case81() {
    int[] A = { 1855, 1763, 69, 1306, 456, 835, 1476, 1530, 1027, 209, 963, 1514, 2927, 532, 2673, 1749, 2454, 1921, 2524, 472, 618, 308, 1480, 2369, 981, 2620, 334, 3159, 2045, 131, 1414, 425, 1156, 49, 1119, 3526, 2285, 3497, 600, 2014, 164, 2262, 1822, 4056, 1499, 2567, 1168, 767, 3391, 44 };
    int[] B = { 2252, 2155, 4549, 3563, 4185, 4636, 3571, 2658, 4549, 3768, 3747, 2705, 3131, 3528, 4774, 4199, 4497, 3122, 3314, 1690, 2525, 1735, 4476, 3707, 1485, 2930, 2229, 4713, 3574, 650, 4640, 1678, 3000, 1184, 1125, 4068, 2599, 4745, 2688, 3374, 4769, 3914, 3949, 4389, 4557, 3284, 2365, 3070, 3483, 2979 };
    assertEquals(44176, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case82() {
    int[] A = { 394, 1408, 3615, 2092, 2807, 1417, 4513, 1094, 1560, 3082, 1653, 1533, 2484, 617, 3099, 1102, 1522, 1108, 600, 1785, 436, 3787, 2569, 2566, 1757, 603, 81, 1184, 2088, 1831, 2402, 2030, 639, 194, 965, 607, 3239, 3062, 1069, 981, 2935, 3325, 1570, 2544, 1999, 3057, 969, 1123, 1587, 2868 };
    int[] B = { 4054, 3762, 3807, 4075, 4147, 3617, 4758, 1970, 3752, 3383, 2602, 2565, 2515, 4573, 3156, 4664, 4542, 2785, 4130, 2010, 1365, 4041, 3614, 4028, 2055, 3953, 4486, 4739, 4717, 3547, 4047, 4806, 1569, 350, 4197, 3557, 4755, 3482, 3659, 4651, 3538, 3904, 1626, 4861, 4117, 4503, 4440, 3115, 4013, 4258 };
    assertEquals(44654, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case83() {
    int[] A = { 3687, 2219, 158, 3674, 3283, 158, 386, 1601, 1783, 2077, 143, 437, 1705, 1891, 4068, 1496, 152, 1437, 1044, 1810, 328, 492, 4358, 926, 358, 609, 2582, 404, 4667, 146, 1215, 498, 4352, 1023, 2900, 3142, 78, 958, 745, 2782, 841, 896, 4224, 3886, 2143, 3299, 361, 1610, 1418, 1582 };
    int[] B = { 4464, 2632, 1985, 5096, 3377, 2214, 4060, 2621, 4140, 2858, 889, 4322, 3676, 4939, 4277, 3858, 1723, 4716, 5148, 2026, 4403, 4250, 4389, 3032, 994, 4232, 3377, 1025, 5003, 1057, 4602, 2628, 5107, 2590, 3510, 4316, 2325, 3268, 3529, 2944, 4805, 2349, 5080, 4939, 3093, 4705, 1545, 2576, 4426, 2168 };
    assertEquals(42628, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case84() {
    int[] A = { 378, 426, 871, 4884, 2003, 834, 2569, 193, 309, 2885, 912, 3756, 1845, 3351, 176, 3370, 1268, 194, 723, 4, 990, 3696, 716, 4425, 1502, 436, 505, 1328, 1708, 1320, 719, 883, 3836, 3618, 892, 347, 584, 3751, 1712, 2576, 397, 694, 1166, 3922, 768, 1538, 253, 2748, 3010, 657 };
    int[] B = { 5360, 3890, 4907, 5386, 3038, 2299, 4886, 1818, 4320, 4778, 2590, 4062, 2921, 3655, 3852, 3995, 2610, 1857, 4807, 3878, 1310, 4644, 1042, 4975, 2847, 1539, 3340, 1789, 4963, 3598, 3101, 1533, 4405, 5108, 4647, 3459, 3018, 5244, 4227, 2723, 669, 2417, 3525, 4443, 2282, 3436, 3742, 4905, 4179, 2730 };
    assertEquals(46551, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case85() {
    int[] A = { 948, 2043, 3817, 1834, 1526, 787, 1682, 2708, 142, 2771, 3234, 3487, 2402, 2693, 1746, 1717, 1458, 1861, 4096, 2097, 1835, 1681, 1256, 3196, 3200, 1105, 1856, 674, 2646, 1918, 498, 3767, 129, 2959, 1887, 493, 360, 174, 547, 1255, 1469, 4992, 536, 1249, 675, 4157, 1167, 1135, 2221, 3416 };
    int[] B = { 1236, 2254, 4324, 3520, 3153, 2206, 1832, 4859, 5412, 3409, 4408, 4917, 4677, 5426, 3867, 4755, 3226, 2317, 4357, 5424, 3860, 3707, 2568, 4118, 4360, 1721, 4109, 1928, 5417, 5349, 2145, 5435, 131, 3448, 5510, 5581, 1925, 3564, 2543, 4875, 4597, 5013, 3424, 2523, 4016, 4329, 4885, 2324, 3932, 5508 };
    assertEquals(46461, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case86() {
    int[] A = { 950, 382, 461, 2863, 2891, 2794, 4732, 1614, 3939, 454, 2872, 1473, 2560, 1996, 2799, 346, 1129, 1307, 3933, 79, 993, 528, 381, 1607, 2208, 1264, 1546, 1479, 2502, 846, 2814, 300, 1620, 3650, 2924, 3018, 5404, 68, 2672, 3499, 5457, 394, 4748, 848, 1097, 212, 152, 3174, 4175, 1097 };
    int[] B = { 1495, 2260, 2065, 5232, 3821, 4495, 5699, 5421, 4207, 2494, 3185, 5242, 5659, 2522, 4296, 3455, 4645, 2619, 5626, 480, 1944, 1334, 1184, 2197, 3290, 3322, 3855, 1558, 3870, 5207, 4012, 4604, 3887, 4728, 4537, 5351, 5568, 5343, 2693, 4317, 5591, 957, 4942, 2354, 3355, 965, 3817, 3472, 4527, 5159 };
    assertEquals(41304, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case87() {
    int[] A = { 656, 3531, 4001, 1570, 462, 37, 2665, 306, 4298, 536, 1181, 2689, 4851, 806, 4167, 1882, 3298, 1760, 1366, 860, 671, 3114, 364, 2696, 2550, 710, 4193, 52, 901, 4199, 1590, 577, 3431, 3241, 2177, 1658, 1936, 712, 1757, 2060, 672, 946, 1813, 3355, 438, 4303, 127, 2680, 2740, 139 };
    int[] B = { 5323, 5625, 4759, 4161, 5451, 797, 5118, 2300, 5125, 1732, 3701, 3775, 5266, 4657, 5496, 3456, 5379, 5428, 4821, 878, 2766, 3747, 690, 2708, 4677, 4359, 4807, 3190, 4927, 5929, 2149, 3550, 4399, 3530, 4708, 2616, 3022, 5713, 3316, 3468, 1524, 4109, 2443, 5368, 1636, 4554, 1345, 2703, 3668, 947 };
    assertEquals(44546, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case88() {
    int[] A = { 364, 372, 966, 2005, 4589, 4426, 1370, 781, 4865, 1716, 2782, 1463, 216, 4423, 69, 3403, 142, 470, 3193, 376, 3950, 3372, 1328, 2040, 588, 2942, 1640, 1360, 4172, 1830, 1189, 1588, 4458, 3144, 3616, 1774, 3202, 3079, 916, 2628, 3284, 3155, 1330, 5352, 238, 3251, 2876, 242, 5148, 3263 };
    int[] B = { 2408, 1896, 5774, 5596, 5614, 5257, 2844, 5112, 6190, 1853, 5753, 2975, 3083, 5349, 4021, 5893, 3302, 5366, 5492, 3633, 4017, 4948, 3634, 2094, 5360, 2945, 6000, 5455, 4186, 3112, 1850, 4390, 4547, 3629, 5646, 3845, 5602, 5166, 6034, 4850, 4754, 3455, 5526, 6095, 3901, 6130, 5898, 1945, 5679, 3477 };
    assertEquals(53318, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case89() {
    int[] A = { 308, 5473, 765, 1704, 881, 2830, 130, 503, 1031, 2949, 1138, 3639, 2059, 3943, 4678, 2439, 4105, 1124, 3839, 2925, 4096, 2762, 559, 468, 400, 5785, 11, 527, 1832, 5048, 1467, 2705, 3359, 763, 4780, 126, 656, 1713, 366, 1774, 4164, 3808, 4154, 1871, 2661, 457, 1290, 5246, 2341, 494 };
    int[] B = { 2376, 5688, 1706, 6128, 1543, 5553, 2773, 3522, 3328, 4314, 2057, 4363, 2617, 5063, 6399, 5159, 5544, 4724, 5534, 3349, 5383, 4110, 3893, 474, 5086, 6311, 3634, 791, 3120, 5982, 4165, 5641, 3374, 3718, 6154, 6193, 1352, 4762, 1508, 5042, 5566, 6168, 4268, 6235, 4348, 3124, 3501, 6050, 3359, 2916 };
    assertEquals(47911, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case90() {
    int[] A = { 823, 523, 570, 3, 2416, 1123, 2399, 4526, 4185, 505, 3330, 1914, 4173, 2884, 197, 4377, 1585, 1217, 2148, 363, 2127, 2447, 1417, 2662, 1360, 5139, 762, 4369, 478, 2285, 85, 1664, 17, 1416, 1043, 3038, 3254, 1203, 1948, 6143, 2869, 1808, 738, 1040, 2214, 161, 694, 3530, 2235, 1706 };
    int[] B = { 5388, 4625, 3608, 1697, 5655, 6220, 2912, 5115, 5132, 4365, 6152, 4094, 5419, 5510, 951, 5172, 6442, 4975, 6000, 836, 3127, 2466, 1543, 5249, 2805, 5448, 2718, 4753, 978, 3923, 5822, 3711, 5792, 2421, 4018, 3411, 3915, 3527, 5969, 6363, 4658, 6555, 3284, 4081, 3796, 1519, 4321, 4035, 6340, 6155 };
    assertEquals(56929, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case91() {
    int[] A = { 674, 2100, 817, 1654, 1215, 3282, 606, 5294, 3910, 1112, 3219, 3901, 801, 273, 3201, 4267, 4074, 2966, 870, 883, 1228, 501, 2587, 3138, 4955, 2354, 1629, 947, 3851, 3553, 632, 831, 1274, 188, 234, 2014, 1543, 3429, 184, 2727, 2202, 4171, 252, 4412, 2446, 3713, 4255, 1616, 4566, 1400 };
    int[] B = { 3686, 4901, 6218, 3088, 5054, 3328, 4224, 5686, 4952, 1599, 4656, 6156, 4167, 6353, 4496, 6483, 6626, 4441, 3664, 3356, 6258, 5637, 3614, 4528, 5985, 6660, 3113, 6546, 5320, 6241, 3376, 3754, 3833, 863, 2270, 2635, 4481, 4915, 5583, 4141, 3237, 5077, 4131, 6186, 4817, 6355, 4963, 4621, 4854, 2593 };
    assertEquals(58885, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case92() {
    int[] A = { 6077, 3327, 1960, 993, 458, 5112, 632, 391, 3846, 4785, 4554, 1892, 1843, 2123, 2680, 1642, 1737, 3600, 119, 381, 3580, 3969, 855, 4846, 3468, 1266, 2627, 583, 925, 1005, 126, 1587, 1447, 2403, 4026, 2209, 2456, 839, 3821, 665, 1605, 3256, 3421, 5257, 813, 3806, 6094, 6617, 2778, 4063 };
    int[] B = { 6174, 6254, 3898, 5833, 6747, 5731, 2896, 6495, 5739, 6853, 5563, 3935, 2443, 3580, 6978, 2691, 3466, 5490, 5857, 2661, 6573, 4536, 4232, 6960, 6493, 5402, 6281, 5070, 6029, 6710, 1494, 5437, 5134, 5164, 6193, 4236, 5620, 6615, 4478, 3169, 3228, 6617, 4255, 5837, 5182, 4716, 6795, 6777, 6288, 5732 };
    assertEquals(65986, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case93() {
    int[] A = { 876, 5182, 1538, 1100, 1736, 784, 2219, 2572, 5215, 2061, 1767, 2162, 407, 1271, 3142, 1635, 1204, 1519, 1766, 3168, 2248, 1991, 3914, 1508, 983, 595, 4983, 2304, 314, 1113, 6022, 3348, 1718, 1079, 314, 516, 2627, 4289, 2337, 1382, 1721, 1596, 200, 2089, 1946, 1929, 4455, 3513, 817, 3596 };
    int[] B = { 5490, 6713, 4065, 1735, 5234, 1168, 4543, 3188, 5621, 2747, 5675, 4331, 6815, 2135, 3436, 1777, 1760, 6803, 3884, 4714, 6690, 2539, 6101, 5535, 2199, 4480, 6881, 3095, 1684, 1460, 7025, 4559, 2280, 3137, 6195, 5424, 6779, 5272, 7060, 1889, 2794, 6300, 6269, 6381, 3924, 2684, 4961, 5869, 6699, 5583 };
    assertEquals(58406, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case94() {
    int[] A = { 2038, 4933, 1031, 1385, 4857, 182, 451, 522, 1189, 3104, 3281, 3792, 890, 672, 1097, 1155, 286, 5479, 916, 2005, 3536, 2700, 314, 579, 966, 3869, 4090, 1714, 1437, 748, 3415, 1775, 1131, 1208, 3490, 1626, 176, 2522, 280, 2316, 1702, 1503, 1819, 2603, 997, 3682, 3524, 727, 1589, 3687 };
    int[] B = { 3233, 5325, 1687, 6766, 6706, 6466, 1423, 4027, 5168, 5931, 6930, 6313, 4823, 4199, 3547, 2818, 5497, 7085, 4797, 7233, 4100, 4538, 6212, 3613, 1420, 6984, 5699, 3392, 6431, 3483, 6818, 6128, 4998, 2908, 3788, 5024, 946, 4118, 762, 5082, 7098, 6387, 3444, 5020, 2006, 4915, 5386, 2362, 6137, 5172 };
    assertEquals(67678, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case95() {
    int[] A = { 3427, 1445, 122, 986, 3608, 1095, 1561, 2030, 2402, 630, 3083, 4401, 748, 2241, 2676, 3173, 5861, 2888, 651, 6383, 629, 4093, 5078, 739, 1661, 4067, 4091, 2698, 4967, 2472, 574, 2548, 4176, 995, 1143, 5634, 1913, 1807, 1357, 1195, 370, 6185, 6075, 5045, 2584, 82, 3256, 630, 3142, 3996 };
    int[] B = { 5311, 7264, 204, 4051, 6668, 6443, 3481, 4928, 7255, 7258, 6629, 6953, 2552, 4651, 4077, 4190, 7422, 4949, 7295, 6818, 6549, 4217, 6889, 5392, 2202, 5373, 7183, 6594, 6937, 3325, 1291, 3473, 6760, 6506, 5902, 6665, 2620, 5310, 4976, 3789, 3010, 7129, 6581, 5075, 6593, 7060, 6461, 4940, 4584, 4991 };
    assertEquals(67082, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case96() {
    int[] A = { 2685, 4722, 2606, 1242, 952, 1382, 2350, 38, 5300, 5166, 762, 5816, 4209, 1533, 1415, 1759, 260, 706, 5213, 5679, 775, 1387, 4817, 6036, 2303, 1428, 2593, 2797, 5832, 1303, 331, 880, 3354, 6586, 6997, 1057, 500, 4890, 4532, 663, 1007, 368, 3123, 3554, 1018, 1005, 294, 2341, 1395, 2265 };
    int[] B = { 6861, 7135, 5960, 1635, 6017, 6045, 3731, 3468, 7392, 5909, 1936, 6484, 5626, 3926, 1953, 4621, 7364, 908, 5407, 7102, 4182, 2214, 6811, 7307, 5913, 4645, 4027, 3617, 6951, 2770, 489, 3814, 5165, 6983, 7538, 7467, 5116, 4992, 4705, 6944, 3681, 3323, 3244, 3927, 3532, 6434, 903, 4756, 3359, 5278 };
    assertEquals(55171, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case97() {
    int[] A = { 4451, 5466, 960, 106, 2301, 2344, 1106, 3452, 1549, 15, 370, 381, 2921, 3251, 2309, 4384, 1122, 730, 3813, 1059, 84, 920, 3927, 3430, 3320, 2459, 1127, 2780, 6979, 1494, 1374, 3565, 3420, 559, 325, 3226, 1669, 7025, 5069, 1900, 1133, 1632, 1655, 6368, 455, 925, 1704, 1135, 3714, 405 };
    int[] B = { 4785, 6291, 4884, 2885, 6440, 2650, 1499, 6847, 7614, 6012, 1854, 5689, 5120, 4839, 7872, 5345, 1725, 6714, 4997, 4475, 6653, 5546, 5430, 4533, 5410, 7573, 1559, 3050, 7930, 7516, 5253, 5993, 6895, 4310, 744, 4225, 1863, 7266, 6437, 2629, 2747, 7228, 4698, 7586, 3798, 1662, 6665, 3426, 4851, 2923 };
    assertEquals(64534, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case98() {
    int[] A = { 1696, 1103, 3128, 3118, 358, 2677, 2169, 1617, 3096, 5666, 5321, 1835, 1988, 5235, 4451, 2669, 3720, 5990, 7765, 2074, 1837, 1018, 2204, 4398, 244, 1383, 3916, 2315, 1020, 2061, 2000, 1049, 6893, 3333, 1422, 578, 6129, 378, 1976, 5609, 1913, 742, 1010, 3689, 1814, 1015, 3416, 2719, 3596, 3021 };
    int[] B = { 6016, 4080, 5405, 5558, 6979, 2982, 5725, 6634, 6480, 6978, 6530, 7288, 5339, 6504, 7351, 2726, 7833, 7630, 8124, 3548, 7499, 5424, 4175, 8140, 5761, 7613, 5236, 6817, 3569, 3013, 2296, 5087, 7807, 3889, 4829, 8021, 6291, 5788, 6070, 7881, 5174, 3901, 6645, 6423, 3290, 2011, 6131, 3405, 4979, 4741 };
    assertEquals(71621, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case99() {
    int[] A = { 6931, 3415, 4159, 1506, 1333, 6345, 1350, 4701, 562, 3084, 3998, 6610, 1479, 2676, 2816, 1076, 5089, 1964, 3020, 1608, 2214, 3857, 378, 1607, 3822, 4751, 4160, 416, 2182, 6139, 507, 4354, 45, 2048, 1601, 784, 3463, 3646, 5998, 772, 5197, 1488, 532, 4766, 3539, 7127, 3242, 3887, 7359, 7948 };
    int[] B = { 6934, 5644, 4522, 4950, 2125, 8396, 7066, 7465, 2310, 6511, 8137, 8269, 6185, 4063, 5703, 6415, 6480, 1993, 5125, 4919, 3930, 7479, 2046, 7868, 5396, 7263, 6339, 4690, 7056, 6294, 3043, 5711, 6495, 3145, 2302, 5693, 6357, 6554, 8211, 1714, 6418, 6237, 4507, 7747, 3560, 7665, 3298, 6617, 7499, 8168 };
    assertEquals(60482, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case100() {
    int[] A = { 2385, 545, 750, 999, 138, 422, 4072, 3839, 2971, 4520, 6940, 5511, 355, 5635, 5448, 5739, 2023, 337, 5542, 1575, 3669, 1186, 1643, 3262, 4097, 1800, 6481, 688, 4938, 2392, 3091, 3851, 2339, 1759, 5199, 1089, 5698, 1131, 3973, 6241, 2095, 2394, 3602, 4478, 1474, 2579, 3142, 4743, 3773, 1692 };
    int[] B = { 3580, 1883, 7218, 3698, 5080, 3305, 6897, 6038, 8087, 7574, 8353, 5922, 6293, 7171, 8032, 6533, 5722, 5467, 6935, 5580, 7011, 3272, 1712, 7403, 6016, 5587, 7466, 5382, 7812, 2397, 5732, 8477, 2377, 2588, 5421, 5485, 6782, 7043, 5673, 7781, 2844, 5800, 5467, 7261, 3085, 8179, 6737, 5809, 8215, 3588 };
    assertEquals(66763, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case101() {
    int[] A = { 6239, 1864, 393, 49, 7890, 1881, 2, 2751, 4616, 3209, 2324, 990, 6251, 1883, 274, 6365, 1968, 4751, 1521, 643, 3439, 5531, 2004, 4460, 2251, 2280, 5185, 2558, 4197, 5942, 1337, 3083, 2775, 2005, 1937, 2731, 2497, 1433, 1426, 1926, 6, 2455, 7259, 491, 2663, 4877, 3771, 3359, 6434, 2151 };
    int[] B = { 8722, 3065, 6781, 3086, 8182, 2025, 2090, 3697, 5352, 5839, 5354, 6264, 8504, 7216, 3803, 6594, 8745, 6093, 7650, 1482, 4228, 7610, 2125, 5429, 2346, 8122, 6992, 8372, 8099, 7476, 6136, 5849, 3325, 8193, 5417, 6025, 6484, 7683, 1430, 6046, 1973, 3564, 8785, 2681, 6586, 8422, 3844, 7435, 6860, 4892 };
    assertEquals(67323, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case102() {
    int[] A = { 2452, 224, 4873, 2213, 5467, 1866, 470, 924, 6309, 4347, 1544, 1185, 361, 249, 4687, 4082, 1509, 2634, 3902, 727, 1200, 234, 4703, 1492, 5169, 1914, 4298, 5015, 3296, 1362, 4641, 1774, 1349, 3782, 1230, 237, 1965, 4074, 275, 929, 496, 4205, 2589, 1274, 759, 807, 3605, 3023, 729, 5322 };
    int[] B = { 4772, 4045, 8332, 5120, 7233, 7629, 4869, 8097, 6687, 8107, 8805, 7061, 7201, 5875, 5708, 6153, 7809, 4383, 4489, 6187, 3515, 8281, 6335, 7570, 5743, 1938, 6554, 5807, 7808, 2576, 5456, 6915, 7068, 4365, 1740, 1245, 6635, 7318, 5008, 5215, 6638, 4535, 7361, 7589, 2743, 2303, 6493, 7598, 5011, 7123 };
    assertEquals(85638, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case103() {
    int[] A = { 2452, 5610, 2465, 3013, 924, 483, 2623, 3088, 905, 4071, 3981, 5343, 6122, 3067, 723, 5816, 2013, 4123, 2304, 5600, 6586, 2417, 6884, 3736, 521, 1176, 7270, 3028, 712, 6469, 5618, 3868, 4943, 4311, 7039, 5777, 481, 5388, 381, 3084, 6718, 1749, 927, 1241, 6965, 4607, 337, 5797, 4701, 6798 };
    int[] B = { 8618, 5884, 6143, 6860, 2047, 5497, 7338, 3729, 2510, 4811, 6929, 6365, 7497, 8261, 3328, 7704, 5262, 8596, 8765, 6624, 7111, 3993, 7140, 8058, 9159, 8031, 9035, 7168, 8583, 8299, 8707, 7332, 6480, 4856, 8828, 8514, 1468, 6833, 5238, 4282, 8105, 8824, 6164, 8627, 8004, 6031, 3646, 8080, 6620, 7851 };
    assertEquals(74790, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case104() {
    int[] A = { 442, 3060, 1497, 1351, 2345, 4428, 5729, 3280, 4969, 151, 3736, 4456, 448, 2050, 66, 7553, 16, 8520, 3446, 5430, 691, 5172, 2277, 2419, 1201, 1107, 3281, 7363, 1274, 171, 5468, 3645, 685, 6176, 1761, 7599, 3826, 1291, 6864, 2806, 1556, 2803, 1443, 1734, 992, 3841, 2404, 227, 1289, 3152 };
    int[] B = { 1366, 6627, 8807, 1938, 7854, 5503, 7505, 6313, 8193, 6464, 8434, 8553, 2709, 6153, 652, 8614, 7491, 8873, 5289, 5964, 4450, 9110, 4268, 3875, 5493, 2373, 3301, 7564, 2524, 4790, 6163, 6696, 4605, 6961, 1777, 9375, 6721, 1601, 9018, 6313, 4124, 3968, 6483, 4398, 4767, 3900, 5633, 397, 3236, 6014 };
    assertEquals(62855, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case105() {
    int[] A = { 1311, 4162, 1515, 5318, 4554, 4023, 9563, 6352, 6422, 4644, 3093, 3997, 788, 1126, 3103, 3908, 1508, 3180, 7190, 707, 4880, 2743, 1, 5514, 3357, 7294, 4472, 2342, 5538, 3142, 800, 315, 1087, 1307, 1076, 1675, 2155, 2435, 1873, 4945, 1109, 1039, 8452, 54, 1576, 609, 579, 5098, 663, 2922 };
    int[] B = { 6429, 8565, 8842, 9107, 8839, 6485, 9575, 8447, 9204, 7071, 7383, 8098, 9515, 6956, 8058, 8128, 6845, 7313, 7617, 9000, 7745, 6575, 2640, 9068, 6296, 8516, 9261, 6589, 7992, 9148, 3951, 6856, 6611, 5322, 2685, 9381, 8916, 2631, 7403, 5870, 6130, 8980, 8890, 5299, 4900, 3044, 4246, 7694, 2949, 7849 };
    assertEquals(99699, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case106() {
    int[] A = { 2848, 2443, 2588, 4190, 2408, 7757, 7278, 1014, 2262, 5662, 836, 72, 2101, 3664, 6886, 6490, 5433, 1720, 14, 83, 1506, 4461, 856, 4518, 4719, 2636, 6372, 1129, 796, 1510, 2414, 4126, 5141, 1798, 2732, 1025, 8215, 6341, 2846, 936, 1688, 1389, 993, 7370, 917, 2296, 558, 636, 1067, 1015 };
    int[] B = { 7146, 6476, 9050, 5349, 3436, 9436, 7415, 9345, 2439, 6758, 7038, 1536, 5747, 6263, 7198, 6972, 9343, 7294, 249, 2945, 6696, 5019, 2220, 5390, 7532, 3395, 7029, 9139, 1227, 1934, 7982, 7166, 7434, 2318, 5822, 5103, 9708, 8045, 9770, 9130, 8298, 6943, 2162, 8444, 8713, 9751, 3611, 8821, 2185, 2259 };
    assertEquals(78463, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case107() {
    int[] A = { 1226, 3427, 4161, 8477, 7359, 28, 6885, 1492, 5958, 4714, 618, 7146, 3197, 2982, 5671, 2376, 8021, 6033, 4094, 1773, 5512, 1369, 1897, 134, 2759, 5541, 6698, 131, 557, 5771, 4592, 3738, 1247, 5138, 1540, 4640, 1503, 6000, 1106, 143, 4345, 1725, 4104, 1399, 4979, 4748, 2309, 1958, 3436, 7974 };
    int[] B = { 6831, 6875, 5787, 8843, 7928, 9051, 9397, 5090, 7181, 6637, 6277, 7870, 8650, 7880, 7670, 4122, 9713, 6796, 7591, 5291, 7427, 6481, 2834, 4777, 4419, 5833, 7857, 5067, 9391, 7421, 6123, 9361, 7845, 8943, 9162, 9763, 9337, 8856, 6239, 3266, 7027, 5903, 9459, 3117, 9738, 8985, 3829, 7179, 3639, 9512 };
    assertEquals(85820, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case108() {
    int[] A = { 4, 2, 4, 12, 2, 7, 19, 7, 2, 9, 6, 10, 10, 17, 1, 2, 2, 1, 8, 5, 7, 3, 3, 1, 1, 5, 1, 11, 12, 1, 2, 9, 17, 11, 1, 7, 1, 18, 12, 9, 2, 4, 3, 8, 6, 13, 14, 4, 13, 16 };
    int[] B = { 19, 16, 10, 19, 8, 19, 20, 9, 13, 16, 9, 13, 17, 18, 18, 18, 14, 15, 11, 14, 10, 4, 12, 8, 17, 17, 15, 11, 20, 15, 19, 12, 20, 14, 17, 20, 11, 19, 20, 13, 18, 20, 14, 13, 7, 16, 15, 13, 17, 17 };
    assertEquals(198, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case109() {
    int[] A = { 20, 12, 14, 5, 11, 16, 9, 1, 1, 14, 4, 8, 13, 7, 11, 2, 3, 12, 6, 8, 5, 6, 2, 4, 16, 5, 10, 9, 10, 1, 14, 15, 7, 15, 11, 7, 4, 5, 2, 2, 6, 5, 13, 13, 1, 3, 11, 1, 6, 9 };
    int[] B = { 20, 17, 19, 16, 12, 20, 9, 14, 20, 17, 12, 20, 15, 10, 14, 6, 4, 20, 7, 8, 8, 14, 20, 19, 19, 13, 17, 19, 12, 20, 19, 15, 20, 19, 14, 10, 11, 14, 3, 4, 8, 20, 16, 19, 5, 20, 20, 18, 8, 12 };
    assertEquals(161, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case110() {
    int[] A = { 5, 9, 12, 10, 9, 10, 1, 3, 1, 9, 15, 11, 10, 12, 12, 14, 9, 5, 5, 14, 11, 10, 8, 15, 2, 16, 13, 9, 5, 14, 7, 10, 3, 3, 6, 7, 1, 1, 14, 3, 3, 7, 13, 4, 17, 1, 6, 4, 1, 10 };
    int[] B = { 15, 18, 16, 17, 18, 16, 17, 17, 15, 9, 19, 16, 18, 14, 18, 20, 11, 18, 19, 18, 16, 16, 10, 20, 18, 19, 15, 12, 13, 18, 19, 12, 15, 16, 7, 13, 14, 16, 19, 15, 15, 8, 19, 11, 20, 11, 13, 18, 15, 17 };
    assertEquals(190, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case111() {
    int[] A = { 14, 1, 1, 8, 8, 6, 8, 4, 18, 18, 7, 1, 10, 15, 5, 3, 11, 14, 6, 2, 10, 13, 5, 4, 1, 2, 11, 13, 9, 17, 1, 5, 5, 3, 12, 4, 9, 8, 6, 6, 16, 3, 1, 8, 3, 4, 11, 11, 13, 1 };
    int[] B = { 14, 7, 11, 13, 16, 17, 19, 6, 18, 20, 8, 15, 13, 16, 5, 5, 20, 19, 13, 6, 18, 13, 8, 9, 4, 19, 14, 17, 10, 20, 16, 14, 15, 17, 20, 13, 17, 18, 20, 19, 19, 13, 14, 10, 5, 6, 19, 13, 15, 16 };
    assertEquals(159, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case112() {
    int[] A = { 7, 3, 12, 9, 11, 11, 19, 14, 17, 3, 5, 5, 1, 4, 11, 13, 13, 3, 2, 10, 1, 4, 1, 11, 14, 2, 4, 8, 2, 3, 3, 4, 8, 7, 3, 4, 4, 1, 10, 7, 12, 8, 16, 5, 10, 15, 3, 7, 11, 8 };
    int[] B = { 20, 7, 13, 13, 17, 20, 20, 18, 20, 18, 12, 12, 19, 9, 13, 20, 20, 18, 4, 10, 17, 17, 10, 18, 16, 19, 8, 9, 4, 5, 13, 6, 13, 11, 20, 12, 18, 17, 19, 20, 19, 16, 17, 11, 20, 16, 18, 20, 17, 10 };
    assertEquals(185, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case113() {
    int[] A = { 6, 15, 8, 4, 15, 2, 5, 1, 14, 4, 4, 8, 5, 3, 17, 8, 1, 2, 3, 7, 3, 14, 4, 10, 8, 11, 2, 5, 3, 5, 4, 9, 13, 16, 5, 13, 7, 8, 2, 5, 5, 4, 1, 3, 5, 9, 5, 7, 14, 2 };
    int[] B = { 13, 18, 12, 18, 17, 7, 18, 9, 17, 8, 20, 13, 18, 20, 20, 11, 17, 8, 14, 14, 16, 17, 9, 19, 15, 15, 12, 9, 9, 8, 12, 12, 14, 17, 15, 19, 10, 9, 19, 9, 12, 13, 7, 4, 15, 20, 6, 14, 20, 6 };
    assertEquals(170, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case114() {
    int[] A = { 1, 4, 5, 6, 5, 11, 3, 2, 6, 18, 5, 4, 4, 19, 5, 3, 7, 1, 8, 1, 2, 2, 11, 9, 7, 9, 6, 4, 7, 4, 16, 7, 6, 4, 4, 5, 5, 2, 13, 19, 3, 6, 16, 4, 3, 8, 2, 1, 10, 8 };
    int[] B = { 5, 6, 18, 9, 10, 14, 7, 5, 19, 19, 20, 18, 10, 19, 18, 12, 9, 6, 19, 18, 12, 11, 20, 14, 8, 19, 9, 20, 16, 7, 18, 11, 12, 15, 6, 7, 10, 20, 20, 20, 10, 20, 16, 4, 6, 20, 3, 8, 15, 14 };
    assertEquals(166, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case115() {
    int[] A = { 4, 6, 3, 18, 15, 4, 17, 12, 15, 18, 9, 8, 2, 10, 7, 1, 13, 7, 1, 4, 2, 1, 16, 11, 1, 3, 8, 13, 17, 7, 14, 18, 8, 12, 17, 11, 3, 11, 5, 3, 1, 5, 12, 12, 13, 13, 5, 3, 2, 4 };
    int[] B = { 16, 17, 12, 19, 17, 10, 19, 14, 20, 20, 16, 10, 6, 18, 17, 9, 16, 14, 16, 8, 19, 19, 19, 16, 18, 12, 18, 20, 18, 13, 20, 20, 10, 20, 17, 17, 15, 15, 7, 4, 8, 9, 17, 13, 13, 16, 8, 4, 11, 17 };
    assertEquals(151, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case116() {
    int[] A = { 6, 6, 5, 4, 1, 3, 10, 1, 13, 2, 10, 4, 5, 4, 7, 4, 4, 4, 18, 7, 6, 4, 5, 1, 9, 2, 3, 8, 8, 7, 10, 10, 11, 9, 1, 9, 8, 10, 12, 8, 2, 16, 3, 10, 10, 14, 1, 12, 7, 8 };
    int[] B = { 17, 11, 20, 12, 10, 12, 20, 13, 20, 5, 13, 7, 15, 20, 19, 12, 12, 18, 20, 20, 16, 12, 10, 15, 19, 6, 6, 18, 10, 13, 19, 12, 12, 10, 20, 16, 14, 20, 17, 19, 11, 18, 17, 14, 16, 19, 10, 12, 14, 9 };
    assertEquals(189, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case117() {
    int[] A = { 3, 14, 14, 1, 3, 6, 11, 11, 7, 2, 8, 16, 14, 11, 10, 4, 12, 1, 4, 2, 13, 7, 3, 11, 3, 4, 4, 12, 9, 2, 11, 1, 3, 13, 2, 4, 8, 3, 6, 14, 9, 2, 8, 3, 7, 4, 15, 6, 4, 11 };
    int[] B = { 20, 17, 16, 4, 13, 7, 16, 20, 18, 6, 13, 16, 20, 17, 16, 5, 15, 14, 16, 12, 16, 7, 12, 12, 9, 16, 6, 20, 14, 18, 19, 16, 16, 17, 14, 17, 13, 11, 20, 14, 20, 18, 20, 12, 12, 12, 17, 10, 16, 18 };
    assertEquals(184, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case118() {
    int[] A = { 13, 6, 2, 14, 15, 12, 3, 15, 10, 3, 4, 5, 3, 3, 1, 17, 2, 8, 2, 12, 7, 16, 1, 6, 2, 4, 13, 7, 4, 5, 13, 9, 6, 3, 9, 7, 18, 5, 2, 6, 17, 1, 8, 16, 11, 3, 4, 4, 7, 13 };
    int[] B = { 19, 17, 12, 15, 20, 14, 19, 18, 18, 10, 6, 7, 8, 18, 11, 19, 20, 11, 7, 20, 10, 19, 20, 20, 3, 11, 19, 11, 11, 16, 17, 17, 11, 11, 16, 15, 19, 10, 6, 16, 19, 3, 13, 19, 17, 9, 19, 18, 14, 20 };
    assertEquals(171, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case119() {
    int[] A = { 5, 3, 8, 1, 5, 4, 9, 2, 7, 3, 1, 7, 4, 2, 12, 9, 3, 2, 6, 5, 1, 10, 10, 9, 12, 1, 12, 6, 9, 4, 1, 5, 2, 1, 2, 14, 2, 18, 11, 9, 13, 7, 5, 2, 7, 7, 8, 14, 6, 5 };
    int[] B = { 5, 13, 14, 14, 19, 10, 14, 5, 15, 20, 6, 13, 13, 10, 15, 15, 5, 13, 18, 19, 15, 18, 19, 11, 18, 15, 15, 20, 13, 9, 2, 18, 19, 13, 12, 14, 18, 19, 17, 9, 16, 13, 6, 11, 7, 17, 20, 14, 14, 10 };
    assertEquals(184, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case120() {
    int[] A = { 6, 10, 1, 4, 12, 1, 9, 10, 11, 9, 2, 2, 8, 1, 11, 7, 13, 12, 6, 17, 5, 7, 14, 6, 1, 12, 8, 11, 4, 2, 4, 10, 3, 5, 3, 2, 14, 9, 9, 6, 2, 16, 9, 3, 3, 9, 14, 2, 9, 17 };
    int[] B = { 17, 11, 20, 12, 14, 17, 10, 11, 12, 15, 3, 4, 18, 10, 13, 8, 16, 18, 6, 20, 12, 18, 17, 9, 2, 17, 19, 15, 18, 7, 11, 12, 19, 18, 6, 5, 17, 11, 14, 15, 8, 17, 11, 12, 15, 17, 17, 15, 13, 20 };
    assertEquals(146, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case121() {
    int[] A = { 7, 13, 11, 4, 6, 18, 7, 14, 4, 6, 18, 2, 2, 2, 9, 17, 4, 1, 1, 2, 15, 2, 4, 16, 9, 3, 16, 3, 12, 4, 12, 8, 6, 8, 2, 2, 1, 13, 9, 3, 7, 10, 12, 9, 6, 2, 3, 6, 10, 8 };
    int[] B = { 18, 15, 18, 6, 14, 19, 19, 18, 17, 7, 20, 10, 20, 15, 11, 20, 18, 4, 20, 15, 17, 4, 17, 20, 10, 5, 20, 14, 13, 5, 19, 20, 20, 13, 16, 14, 18, 20, 15, 11, 20, 19, 20, 19, 12, 10, 16, 7, 19, 8 };
    assertEquals(188, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case122() {
    int[] A = { 5, 15, 3, 3, 11, 2, 11, 6, 15, 6, 5, 7, 8, 3, 15, 4, 8, 6, 8, 5, 8, 8, 9, 2, 3, 10, 3, 7, 8, 13, 4, 1, 9, 10, 14, 7, 3, 16, 1, 2, 1, 13, 6, 19, 15, 13, 5, 2, 8, 7 };
    int[] B = { 16, 20, 5, 7, 12, 9, 13, 9, 17, 17, 16, 16, 17, 20, 17, 20, 9, 7, 11, 14, 19, 10, 20, 9, 8, 15, 14, 7, 10, 13, 7, 16, 19, 11, 19, 12, 4, 19, 18, 14, 10, 17, 19, 20, 18, 17, 12, 11, 10, 18 };
    assertEquals(158, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case123() {
    int[] A = { 7, 2, 3, 11, 2, 4, 2, 3, 3, 13, 1, 5, 2, 10, 7, 13, 2, 13, 16, 11, 6, 8, 2, 9, 5, 15, 6, 2, 3, 6, 1, 3, 11, 7, 6, 5, 3, 1, 12, 5, 8, 10, 5, 8, 1, 1, 6, 9, 13, 11 };
    int[] B = { 12, 11, 8, 14, 15, 5, 20, 15, 18, 20, 4, 20, 6, 18, 18, 15, 13, 19, 19, 11, 10, 15, 14, 19, 6, 17, 16, 13, 3, 20, 4, 10, 13, 17, 17, 17, 9, 7, 14, 19, 14, 16, 11, 18, 2, 3, 10, 10, 15, 16 };
    assertEquals(169, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case124() {
    int[] A = { 6, 6, 6, 9, 6, 7, 4, 4, 8, 1, 13, 15, 4, 3, 9, 4, 7, 8, 13, 5, 10, 5, 6, 8, 8, 5, 9, 9, 2, 10, 6, 3, 2, 16, 6, 6, 2, 2, 2, 12, 1, 12, 11, 6, 14, 3, 13, 6, 4, 1 };
    int[] B = { 20, 11, 18, 10, 13, 14, 12, 10, 17, 20, 16, 20, 4, 20, 9, 4, 16, 19, 18, 6, 13, 20, 16, 15, 18, 6, 13, 19, 6, 11, 9, 8, 20, 16, 9, 18, 10, 13, 2, 13, 18, 16, 11, 7, 17, 8, 16, 19, 10, 10 };
    assertEquals(163, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case125() {
    int[] A = { 11, 4, 6, 2, 5, 18, 3, 9, 4, 8, 3, 5, 5, 12, 5, 8, 5, 3, 2, 1, 2, 1, 16, 13, 1, 3, 9, 8, 11, 5, 6, 7, 14, 14, 4, 9, 13, 13, 2, 4, 7, 6, 5, 1, 6, 3, 7, 13, 10, 5 };
    int[] B = { 12, 11, 10, 3, 20, 19, 4, 16, 10, 13, 11, 9, 13, 16, 13, 17, 9, 15, 9, 2, 7, 11, 20, 19, 15, 13, 16, 18, 15, 6, 16, 9, 18, 18, 7, 16, 20, 16, 5, 16, 13, 15, 13, 18, 11, 7, 15, 18, 17, 17 };
    assertEquals(160, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case126() {
    int[] A = { 16, 10, 9, 3, 4, 1, 1, 6, 3, 1, 3, 4, 2, 1, 5, 4, 5, 11, 7, 14, 3, 4, 6, 5, 10, 6, 1, 5, 1, 4, 5, 9, 2, 6, 2, 4, 2, 18, 2, 8, 15, 15, 5, 4, 14, 5, 11, 1, 9, 11 };
    int[] B = { 16, 15, 13, 6, 20, 14, 8, 16, 11, 5, 12, 7, 16, 13, 12, 19, 9, 16, 18, 18, 4, 13, 14, 17, 18, 10, 19, 13, 3, 6, 10, 16, 17, 18, 4, 14, 16, 19, 6, 10, 16, 17, 9, 15, 20, 8, 19, 6, 13, 14 };
    assertEquals(173, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case127() {
    int[] A = { 3, 3, 1, 7, 1, 10, 5, 1, 4, 4, 2, 3, 16, 3, 1, 7, 6, 14, 4, 8, 9, 12, 1, 2, 10, 17, 2, 9, 4, 10, 14, 6, 9, 8, 14, 2, 7, 15, 4, 17, 1, 6, 10, 6, 2, 5, 15, 8, 5, 9 };
    int[] B = { 16, 6, 2, 7, 4, 11, 7, 10, 11, 4, 11, 11, 16, 9, 4, 19, 12, 18, 13, 12, 11, 15, 7, 8, 12, 20, 16, 17, 16, 12, 18, 20, 16, 18, 15, 17, 14, 17, 15, 18, 13, 20, 11, 12, 11, 11, 16, 16, 9, 18 };
    assertEquals(150, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case128() {
    int[] A = { 2, 2, 6, 3, 2, 8, 3, 2, 2, 4, 9, 1, 3, 8, 9, 1, 12, 11, 3, 7, 11, 4, 1, 1, 5, 1, 10, 6, 15, 3, 14, 4, 20, 3, 5, 4, 5, 12, 1, 3, 8, 12, 8, 4, 18, 8, 19, 11, 11, 8 };
    int[] B = { 20, 9, 11, 8, 9, 9, 12, 18, 13, 15, 19, 14, 5, 9, 16, 2, 14, 16, 16, 15, 16, 14, 18, 17, 10, 4, 10, 19, 18, 7, 20, 20, 20, 18, 9, 9, 13, 20, 18, 13, 17, 17, 18, 9, 20, 10, 20, 20, 14, 15 };
    assertEquals(185, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case129() {
    int[] A = { 11, 8, 9, 8, 16, 1, 12, 7, 7, 7, 2, 1, 6, 15, 14, 6, 8, 3, 19, 4, 10, 8, 10, 6, 6, 9, 20, 1, 14, 11, 5, 15, 2, 10, 1, 13, 3, 4, 9, 11, 6, 2, 2, 17, 1, 1, 13, 7, 3, 9 };
    int[] B = { 12, 11, 16, 17, 17, 19, 15, 10, 16, 19, 6, 20, 14, 16, 18, 7, 12, 17, 20, 8, 20, 17, 15, 17, 10, 18, 20, 18, 20, 18, 9, 16, 3, 12, 12, 19, 6, 19, 14, 11, 8, 20, 19, 19, 15, 15, 17, 11, 16, 10 };
    assertEquals(171, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case130() {
    int[] A = { 3, 12, 5, 1, 2, 13, 9, 1, 12, 12, 15, 7, 3, 7, 1, 1, 17, 11, 1, 5, 11, 5, 2, 6, 6, 9, 3, 6, 17, 12, 6, 10, 13, 1, 2, 11, 1, 12, 19, 11, 12, 7, 10, 4, 7, 8, 5, 3, 11, 11 };
    int[] B = { 16, 13, 15, 20, 7, 18, 14, 6, 14, 17, 18, 7, 12, 20, 20, 3, 18, 18, 5, 18, 16, 19, 10, 12, 13, 17, 6, 20, 19, 16, 18, 16, 18, 7, 5, 16, 10, 16, 19, 18, 19, 9, 11, 15, 11, 15, 11, 19, 14, 12 };
    assertEquals(164, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case131() {
    int[] A = { 1, 6, 1, 6, 6, 12, 17, 3, 6, 3, 7, 1, 7, 12, 11, 4, 1, 14, 4, 10, 1, 9, 4, 14, 10, 7, 9, 10, 7, 3, 1, 2, 1, 7, 15, 10, 8, 5, 13, 13, 14, 11, 7, 1, 9, 5, 18, 10, 6, 1 };
    int[] B = { 11, 7, 20, 17, 20, 20, 20, 14, 7, 16, 15, 12, 19, 13, 19, 7, 11, 17, 4, 11, 19, 13, 11, 18, 13, 18, 10, 15, 15, 19, 11, 20, 13, 8, 18, 13, 19, 12, 17, 20, 15, 18, 18, 18, 10, 12, 19, 12, 13, 6 };
    assertEquals(180, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case132() {
    int[] A = { 10, 1, 3, 5, 3, 18, 5, 11, 14, 1, 1, 1, 19, 12, 8, 10, 7, 5, 15, 6, 6, 5, 7, 3, 15, 7, 10, 3, 15, 6, 13, 6, 19, 12, 11, 11, 18, 9, 16, 9, 5, 9, 11, 3, 7, 2, 3, 5, 3, 3 };
    int[] B = { 10, 5, 8, 11, 17, 19, 6, 15, 20, 11, 1, 14, 20, 19, 9, 11, 16, 14, 19, 13, 18, 18, 16, 8, 20, 11, 18, 15, 17, 11, 19, 15, 19, 16, 20, 19, 20, 12, 18, 12, 14, 11, 20, 14, 13, 14, 11, 19, 6, 6 };
    assertEquals(151, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case133() {
    int[] A = { 9, 13, 11, 3, 8, 6, 2, 6, 7, 2, 7, 6, 3, 11, 9, 2, 6, 3, 7, 10, 4, 1, 3, 15, 9, 1, 5, 9, 14, 3, 18, 2, 6, 1, 3, 4, 6, 5, 11, 3, 4, 20, 2, 7, 9, 1, 10, 13, 8, 5 };
    int[] B = { 14, 18, 14, 8, 19, 8, 8, 20, 15, 4, 11, 11, 19, 18, 10, 14, 20, 3, 17, 17, 15, 9, 16, 19, 10, 3, 15, 20, 19, 20, 19, 9, 8, 7, 4, 14, 12, 14, 16, 9, 14, 20, 13, 19, 14, 17, 17, 13, 14, 20 };
    assertEquals(177, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case134() {
    int[] A = { 19, 8, 2, 2, 4, 17, 10, 6, 11, 9, 3, 1, 15, 11, 15, 10, 5, 1, 6, 5, 10, 1, 16, 10, 15, 4, 10, 6, 14, 14, 12, 12, 4, 2, 6, 7, 1, 2, 8, 14, 8, 4, 3, 9, 5, 3, 15, 4, 6, 15 };
    int[] B = { 19, 11, 4, 7, 13, 17, 17, 11, 20, 15, 10, 6, 18, 15, 18, 14, 14, 13, 8, 9, 19, 16, 16, 11, 15, 15, 13, 9, 19, 16, 14, 12, 16, 3, 14, 14, 2, 15, 12, 17, 13, 16, 9, 20, 15, 17, 20, 5, 6, 18 };
    assertEquals(133, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case135() {
    int[] A = { 7, 3, 8, 3, 4, 7, 4, 1, 4, 5, 6, 2, 17, 14, 5, 4, 4, 2, 1, 1, 10, 11, 2, 2, 3, 10, 8, 5, 6, 9, 2, 14, 4, 18, 3, 16, 2, 4, 3, 3, 2, 4, 13, 2, 6, 7, 5, 3, 7, 3 };
    int[] B = { 8, 4, 19, 4, 17, 8, 11, 8, 7, 20, 14, 18, 19, 16, 17, 10, 7, 7, 18, 6, 15, 13, 4, 13, 10, 12, 13, 6, 15, 10, 6, 15, 8, 19, 7, 20, 13, 6, 10, 12, 16, 9, 14, 20, 16, 15, 6, 20, 9, 7 };
    assertEquals(154, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case136() {
    int[] A = { 9, 8, 11, 14, 9, 13, 3, 3, 5, 5, 8, 3, 5, 11, 6, 13, 3, 7, 8, 4, 15, 13, 1, 2, 13, 17, 7, 6, 1, 3, 6, 4, 17, 4, 4, 10, 8, 9, 6, 11, 6, 9, 2, 3, 4, 4, 11, 2, 9, 6 };
    int[] B = { 14, 10, 19, 19, 18, 14, 4, 6, 7, 14, 17, 17, 20, 13, 14, 20, 5, 9, 10, 6, 15, 20, 15, 10, 18, 19, 14, 8, 7, 11, 18, 20, 20, 6, 13, 18, 16, 20, 6, 18, 11, 9, 17, 12, 12, 6, 12, 4, 10, 11 };
    assertEquals(146, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case137() {
    int[] A = { 11, 2, 8, 7, 11, 5, 5, 13, 3, 14, 4, 3, 12, 8, 7, 7, 7, 10, 16, 7, 7, 1, 10, 1, 1, 13, 2, 12, 2, 9, 1, 4, 7, 16, 1, 4, 1, 16, 5, 1, 6, 8, 11, 12, 17, 12, 9, 3, 12, 11 };
    int[] B = { 18, 2, 15, 15, 14, 7, 6, 20, 20, 15, 16, 6, 17, 17, 11, 19, 20, 10, 17, 11, 9, 15, 10, 20, 12, 15, 7, 16, 19, 19, 1, 11, 11, 19, 19, 5, 2, 20, 13, 2, 7, 19, 14, 19, 18, 18, 10, 10, 15, 19 };
    assertEquals(148, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case138() {
    int[] A = { 2907, 949, 1674, 6092, 8608, 5186, 2630, 970, 1050, 2415, 1923, 2697, 5571, 6941, 8065, 4710, 716, 756, 5185, 1341, 993, 5092, 248, 1895, 4223, 1783, 3844, 3531, 2431, 1755, 2837, 4015 };
    int[] B = { 7296, 6954, 4407, 9724, 8645, 8065, 9323, 8433, 1352, 9618, 6487, 7309, 9297, 8999, 9960, 5653, 4721, 7623, 6017, 7320, 3513, 6642, 6359, 3145, 7233, 5077, 6457, 3605, 2911, 4679, 5381, 6574 };
    assertEquals(52873, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case139() {
    int[] A = { 3, 4, 4, 7 };
    int[] B = { 3, 4, 4, 7 };
    assertEquals(2, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case140() {
    int[] A = { 1, 3, 5, 4, 5 };
    int[] B = { 2, 5, 6, 8, 7 };
    assertEquals(5, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case141() {
    int[] A = { 3588, 3123, 4791, 6435, 6846, 4185, 2601, 2385, 1437, 8235, 3129, 3723, 4380, 93, 6420, 396, 5409, 6576, 2034, 3225, 5127, 4308, 4041, 5844, 7725, 3720, 7230, 510, 6036, 105, 1752, 693, 6456, 7404, 8562, 7800, 1683, 2733, 3192, 7410, 8610, 6933, 1254, 3603, 3171, 3753, 2793, 1788, 4893, 5910 };
    int[] B = { 3846, 4605, 7719, 7794, 8688, 5538, 7518, 5928, 6504, 8382, 6048, 5232, 4818, 2682, 8850, 5016, 7323, 8193, 7149, 4071, 6246, 8817, 6936, 7647, 8943, 6297, 7749, 8244, 8748, 6693, 7416, 4968, 8478, 7425, 8853, 8232, 3096, 2949, 3231, 7578, 8613, 7053, 3687, 3666, 6135, 6261, 7293, 2961, 7320, 8778 };
    assertEquals(56085, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case142() {
    int[] A = { 12, 2241, 988, 253, 1698, 1410, 1329, 383, 6641, 779, 905, 3036, 2499, 1843, 289, 95, 53, 1171, 4781, 901, 1135, 781, 279, 108, 52, 1053, 163, 4951, 4956, 3549, 3286, 535, 225, 1487, 57, 1928, 4967, 1077, 6896, 6519, 8241, 1944, 813, 302, 5538, 2879, 693, 2083, 6422, 2804 };
    int[] B = { 42, 8468, 6335, 6501, 9170, 5725, 1479, 9359, 6963, 4465, 5706, 8146, 3282, 6828, 9962, 492, 2996, 1943, 4828, 5437, 2392, 4605, 3903, 154, 293, 2383, 7422, 8717, 9719, 9896, 5448, 1727, 4772, 1539, 1870, 9913, 5668, 6300, 7036, 9895, 8704, 3812, 1323, 334, 7674, 4665, 5142, 7712, 8254, 6869 };
    assertEquals(79619, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case143() {
    int[] A = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 100, 1000, 10000, 100, 10000 };
    int[] B = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    assertEquals(18900, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case144() {
    int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 3, 4, 5, 6, 7, 8, 9, 3, 2, 4, 5, 6, 7, 8, 9, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 4, 3, 2, 1, 2, 3, 4, 5, 6, 5 };
    int[] B = { 9, 12, 13, 13, 14, 15, 15, 16, 16, 15, 14, 14, 14, 154, 51, 15, 61, 61, 43, 43, 43, 43, 43, 43, 43, 43, 43, 32, 23, 435, 5443, 23, 45, 54, 2343, 454, 32, 45, 45, 44, 25, 54, 542, 54, 34, 65, 43, 54, 65, 76 };
    assertEquals(5348, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case145() {
    int[] A = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 10000 };
    int[] B = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    assertEquals(1, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case146() {
    int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 5, 6 };
    int[] B = { 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12 };
    assertEquals(179, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case147() {
    int[] A = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    int[] B = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
    assertEquals(25, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case148() {
    int[] A = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] B = { 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 };
    assertEquals(200, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case149() {
    int[] A = { 2907, 949, 1674, 6092, 8608, 5186, 2630, 970, 1050, 2415, 1923, 2697, 5571, 6941, 8065, 4710, 716, 756, 5185, 1341, 993, 5092, 248, 1895, 4223, 1783, 3844, 3531, 2431, 1755, 2837, 4015, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23 };
    int[] B = { 7296, 6954, 4407, 9724, 8645, 8065, 9323, 8433, 1352, 9618, 6487, 7309, 9297, 8999, 9960, 5653, 4721, 7623, 6017, 7320, 3513, 6642, 6359, 3145, 7233, 5077, 6457, 3605, 2911, 4679, 5381, 6574, 24, 25, 26, 45, 65, 45, 32, 23, 34, 345, 45, 45, 56, 56, 65, 56, 56, 56 };
    assertEquals(53216, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case150() {
    int[] A = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    int[] B = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    assertEquals(0, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case151() {
    int[] A = { 1, 2, 3, 1000 };
    int[] B = { 10000, 2, 3, 1000 };
    assertEquals(8995, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case152() {
    int[] A = { 4, 3, 2, 1 };
    int[] B = { 5, 5, 5, 5 };
    assertEquals(5, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case153() {
    int[] A = { 2907, 949, 1674, 6092, 8608, 5186, 2630, 970, 1050, 2415, 1923, 2697, 5571, 6941, 8065, 4710, 716, 756, 5185, 1341, 993, 5092, 248, 1895, 4223, 1783, 3844, 3531, 2431, 1755, 2837, 4015, 123, 444, 787 };
    int[] B = { 7296, 6954, 4407, 9724, 8645, 8065, 9323, 8433, 1352, 9618, 6487, 7309, 9297, 8999, 9960, 5653, 4721, 7623, 6017, 7320, 3513, 6642, 6359, 3145, 7233, 5077, 6457, 3605, 2911, 4679, 5381, 6574, 2323, 6768, 4456 };
    assertEquals(58970, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case154() {
    int[] A = { 1123, 1354, 1274, 1634, 1234, 1345, 1234, 1874, 1345, 1456, 1456, 1345, 1935, 1824, 1234, 1684, 1345, 1835, 1345, 1255, 1237, 1137, 1285, 1248, 1248, 1143, 1975, 1526, 1248, 1356, 1234, 1276, 1356, 1243, 1572, 1438, 1577, 1498, 1242, 1769, 1187, 1657, 1896, 1779, 1187, 1484, 1975, 1108, 1347 };
    int[] B = { 2148, 2573, 2183, 2902, 2407, 2310, 2289, 2574, 2823, 2650, 2198, 2237, 2498, 2012, 2475, 2843, 2961, 2098, 2327, 2403, 2981, 2275, 2874, 2601, 2983, 2274, 2128, 2740, 2823, 2752, 2438, 2751, 2237, 2489, 2413, 2764, 2892, 2435, 2403, 2192, 2874, 2098, 2732, 2650, 2591, 2832, 2740, 9218, 2476 };
    assertEquals(30104, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case155() {
    int[] A = { 9383, 886, 2777, 6915, 7793, 8335, 5386, 492, 6649, 1421, 2362, 27, 8690, 59, 7763, 3926, 540, 3426, 9172, 5736, 5211, 5368, 2567, 6429, 5782, 1530, 2862, 5123, 4067, 3135, 3929, 9802, 4022, 3058, 3069, 8167, 1393, 8456, 5011, 8042, 6229, 7373, 4421, 4919, 3784, 8537, 5198, 4324, 8315, 4370 };
    int[] B = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    assertEquals(126885, maythebestpetwin.calc(A, B));
  }

  @Test
  public void case156() {
    int[] A = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] B = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
    assertEquals(249975, maythebestpetwin.calc(A, B));
  }

}
