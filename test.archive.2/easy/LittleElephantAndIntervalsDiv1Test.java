package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class LittleElephantAndIntervalsDiv1Test {
    LittleElephantAndIntervalsDiv1 littleelephantandintervalsdiv1 = new LittleElephantAndIntervalsDiv1();

    @Test
    public void case1() {
        int M = 4;
        int[] L = { 1, 2, 3 };
        int[] R = { 1, 2, 3 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case2() {
        int M = 3;
        int[] L = { 1, 1, 2 };
        int[] R = { 3, 1, 3 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case3() {
        int M = 1000;
        int[] L = { 47 };
        int[] R = { 747 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case4() {
        int M = 1000;
        int[] L = { 1, 50, 100 };
        int[] R = { 50, 100, 200 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case5() {
        int M = 1;
        int[] L = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] R = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case6() {
        int M = 1000;
        int[] L = { 1 };
        int[] R = { 1000 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case7() {
        int M = 42;
        int[] L = { 5, 23, 4, 1, 15, 2, 22, 26, 13, 16, 28, 13, 27, 9, 18, 4, 10, 3, 4, 4, 3, 4, 1, 18, 18, 2, 38, 4, 10, 12, 3, 30, 11, 38, 2, 13, 1, 13, 18, 16, 13, 2, 14, 27, 13, 3, 26, 19, 5, 10 };
        int[] R = { 30, 41, 17, 1, 21, 6, 28, 30, 15, 19, 31, 28, 35, 27, 30, 13, 31, 5, 8, 25, 40, 10, 3, 26, 23, 9, 40, 8, 40, 23, 12, 37, 35, 39, 11, 34, 10, 21, 22, 21, 24, 5, 39, 27, 17, 16, 26, 35, 25, 36 };
        assertEquals(256L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case8() {
        int M = 116;
        int[] L = { 79, 71, 45, 1, 16, 2, 6, 90, 13, 5, 55, 72, 23, 85, 59, 5, 47, 12, 26, 18, 4, 90, 9, 71, 7, 11, 53, 18, 3, 2, 2, 76, 90, 5, 9, 1, 5, 60, 45, 43, 2, 12, 27, 20, 2, 26, 22, 39, 77, 15 };
        int[] R = { 116, 85, 58, 6, 34, 13, 7, 98, 110, 91, 114, 84, 108, 88, 91, 6, 47, 20, 28, 30, 30, 98, 78, 94, 43, 15, 58, 89, 87, 11, 17, 89, 104, 7, 84, 95, 73, 89, 65, 46, 54, 87, 57, 32, 17, 57, 60, 43, 78, 42 };
        assertEquals(4096L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case9() {
        int M = 936;
        int[] L = { 65, 560, 53, 241, 141, 56, 559, 604, 124, 627, 105, 484, 12, 135, 6, 65, 5, 30, 39, 251, 255, 232, 32, 243, 620, 329, 11, 39, 134, 469, 237, 173, 474, 30, 103, 54, 99, 556, 650, 422, 206, 395, 113, 235, 51, 167, 30, 252, 141, 159 };
        int[] R = { 604, 570, 669, 352, 713, 786, 879, 830, 304, 652, 144, 865, 67, 141, 306, 207, 14, 223, 125, 780, 642, 576, 425, 280, 763, 400, 183, 207, 354, 487, 481, 175, 868, 84, 397, 54, 417, 639, 662, 649, 430, 512, 290, 926, 539, 358, 45, 283, 342, 442 };
        assertEquals(256L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case10() {
        int M = 693;
        int[] L = { 380, 638, 297, 17, 214, 163, 81, 42, 234, 449, 110, 429, 230, 137, 85, 62, 80, 114, 20, 1, 29, 384, 145, 295, 18, 289, 215, 162, 586, 61, 12, 360, 121, 213, 70, 14, 127, 69, 50, 418, 119, 95, 121, 227, 100, 34, 398, 521, 392, 23 };
        int[] R = { 636, 663, 512, 347, 236, 201, 341, 56, 374, 463, 194, 526, 567, 234, 675, 97, 132, 243, 156, 1, 220, 447, 156, 602, 85, 482, 328, 200, 685, 86, 264, 652, 622, 514, 588, 20, 317, 90, 77, 634, 501, 144, 306, 229, 118, 53, 558, 589, 449, 378 };
        assertEquals(2048L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case11() {
        int M = 193;
        int[] L = { 43, 94, 56, 25, 23, 120, 12, 35, 10, 166, 9, 63, 3, 2, 32, 21, 12, 14, 37, 14, 3, 106, 3, 3, 65, 47, 18, 10, 2, 64, 11, 64, 81, 41, 40, 44, 45, 63, 5, 10, 117, 6, 56, 3, 22, 40, 122, 41, 3, 4 };
        int[] R = { 90, 182, 101, 47, 117, 188, 58, 93, 27, 188, 101, 143, 21, 181, 62, 95, 28, 147, 92, 36, 6, 185, 9, 3, 79, 55, 79, 13, 9, 94, 186, 139, 190, 126, 51, 120, 178, 92, 103, 14, 193, 152, 84, 150, 102, 86, 138, 102, 155, 11 };
        assertEquals(16L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case12() {
        int M = 927;
        int[] L = { 275, 850, 760, 127, 525, 306, 123, 310, 419, 23, 354, 103, 450, 818, 916, 720, 335, 556, 16, 866, 521, 785, 511, 284, 163, 700, 184, 601, 695, 846, 881, 667, 462, 322, 128, 71, 49, 3, 804, 166, 137, 285, 754, 912, 798, 41, 370, 580, 494, 139 };
        int[] R = { 296, 872, 780, 151, 538, 307, 127, 323, 422, 30, 354, 117, 460, 842, 924, 732, 335, 559, 25, 881, 525, 791, 511, 294, 179, 707, 191, 622, 706, 868, 893, 688, 478, 326, 143, 78, 54, 15, 813, 188, 156, 298, 762, 922, 821, 54, 387, 591, 494, 139 };
        assertEquals(70368744177664L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case13() {
        int M = 922;
        int[] L = { 353, 587, 436, 803, 574, 749, 719, 150, 812, 407, 301, 46, 884, 399, 452, 409, 4, 688, 94, 711, 611, 181, 270, 782, 673, 651, 746, 394, 875, 3, 195, 462, 230, 196, 142, 325, 466, 53, 280, 38, 815, 593, 546, 386, 21, 70, 86, 613, 397, 347 };
        int[] R = { 354, 592, 436, 807, 592, 761, 725, 151, 824, 413, 314, 51, 901, 410, 476, 411, 25, 703, 94, 729, 628, 193, 289, 797, 683, 673, 761, 397, 876, 22, 205, 479, 244, 199, 142, 342, 490, 64, 297, 42, 828, 594, 561, 399, 45, 87, 106, 615, 397, 370 };
        assertEquals(4398046511104L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case14() {
        int M = 971;
        int[] L = { 462, 562, 831, 852, 272, 302, 513, 823, 795, 747, 751, 121, 304, 708, 962, 59, 581, 184, 69, 799, 752, 131, 924, 913, 160, 863, 742, 936, 412, 772, 830, 920, 422, 29, 102, 31, 77, 195, 618, 609, 831, 825, 553, 182, 69, 749, 653, 558, 621, 144 };
        int[] R = { 484, 565, 844, 865, 293, 317, 530, 836, 799, 754, 756, 135, 326, 730, 971, 73, 581, 196, 72, 811, 762, 150, 939, 921, 180, 886, 764, 948, 425, 775, 832, 939, 437, 47, 115, 43, 90, 201, 635, 619, 839, 838, 568, 200, 89, 766, 661, 559, 634, 148 };
        assertEquals(4398046511104L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case15() {
        int M = 925;
        int[] L = { 24, 585, 717, 156, 352, 676, 477, 247, 266, 218, 339, 672, 98, 732, 380, 231, 213, 494, 312, 467, 445, 178, 314, 431, 207, 267, 162, 487, 726, 360, 179, 503, 788, 830, 910, 382, 25, 514, 904, 731, 209, 106, 465, 902, 85, 787, 899, 704, 371, 449 };
        int[] R = { 47, 592, 736, 174, 363, 681, 501, 256, 280, 218, 356, 695, 99, 755, 384, 232, 213, 509, 323, 481, 451, 189, 321, 446, 212, 267, 174, 502, 738, 378, 195, 511, 796, 833, 913, 405, 42, 523, 904, 749, 209, 117, 468, 920, 87, 801, 906, 728, 373, 455 };
        assertEquals(17592186044416L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case16() {
        int M = 970;
        int[] L = { 969, 579, 692, 606, 315, 676, 879, 113, 608, 422, 869, 80, 546, 688, 59, 392, 568, 306, 871, 143, 923, 566, 235, 621, 732, 656, 621, 764, 698, 857, 894, 332, 754, 29, 529, 222, 635, 664, 934, 159, 947, 521, 400, 807, 417, 478, 490, 322, 97, 727 };
        int[] R = { 970, 598, 695, 612, 332, 689, 893, 126, 618, 431, 880, 98, 565, 707, 59, 406, 583, 321, 885, 156, 927, 576, 259, 636, 748, 660, 644, 777, 705, 871, 902, 347, 767, 38, 529, 232, 656, 681, 954, 159, 951, 544, 418, 812, 441, 481, 504, 327, 113, 728 };
        assertEquals(35184372088832L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case17() {
        int M = 967;
        int[] L = { 78, 625, 852, 59, 263, 109, 864, 734, 819, 456, 665, 768, 133, 46, 522, 701, 349, 20, 143, 204, 249, 175, 138, 223, 695, 86, 711, 315, 230, 588, 890, 525, 419, 20, 58, 449, 831, 755, 96, 493, 142, 541, 708, 865, 25, 558, 314, 56, 487, 230 };
        int[] R = { 84, 640, 873, 80, 272, 111, 888, 754, 842, 462, 683, 775, 139, 57, 536, 710, 364, 41, 147, 212, 265, 181, 152, 245, 715, 105, 724, 333, 239, 599, 902, 533, 440, 32, 80, 451, 854, 772, 99, 495, 149, 556, 720, 876, 43, 561, 330, 80, 495, 250 };
        assertEquals(8796093022208L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case18() {
        int M = 941;
        int[] L = { 390, 697, 915, 719, 402, 246, 487, 170, 20, 230, 560, 61, 906, 738, 47, 317, 331, 121, 342, 918, 459, 161, 603, 539, 316, 164, 341, 435, 202, 462, 684, 423, 467, 167, 604, 4, 3, 60, 892, 42, 220, 675, 714, 897, 336, 876, 534, 120, 70, 862 };
        int[] R = { 412, 702, 932, 723, 423, 267, 506, 183, 35, 230, 563, 81, 920, 750, 71, 336, 354, 129, 352, 929, 462, 172, 617, 563, 321, 168, 364, 455, 220, 472, 707, 442, 468, 189, 619, 23, 14, 74, 907, 52, 220, 684, 730, 921, 336, 899, 545, 138, 76, 863 };
        assertEquals(4398046511104L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case19() {
        int M = 911;
        int[] L = { 402, 581, 778, 795, 299, 454, 15, 475, 403, 40, 680, 133, 663, 755, 102, 665, 447, 502, 772, 826, 16, 335, 48, 388, 481, 384, 292, 1, 467, 715, 555, 530, 674, 201, 138, 171, 727, 110, 483, 247, 805, 128, 496, 440, 385, 304, 96, 80, 809, 552 };
        int[] R = { 426, 591, 785, 815, 323, 456, 25, 497, 425, 42, 685, 152, 681, 761, 124, 668, 459, 510, 780, 835, 20, 354, 68, 404, 498, 396, 298, 23, 475, 721, 563, 553, 692, 221, 145, 186, 751, 112, 501, 249, 823, 149, 499, 441, 407, 307, 104, 88, 822, 570 };
        assertEquals(17592186044416L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case20() {
        int M = 914;
        int[] L = { 566, 451, 801, 225, 332, 46, 348, 355, 865, 224, 608, 179, 655, 139, 410, 190, 62, 161, 763, 615, 757, 168, 816, 192, 1, 817, 155, 611, 244, 885, 118, 281, 125, 472, 700, 296, 882, 275, 522, 535, 703, 552, 369, 617, 870, 907, 105, 169, 211, 680 };
        int[] R = { 566, 462, 825, 229, 338, 63, 366, 377, 870, 241, 610, 181, 661, 162, 433, 210, 64, 171, 771, 627, 760, 176, 826, 203, 11, 820, 171, 614, 259, 891, 118, 304, 136, 478, 703, 306, 882, 286, 532, 558, 720, 567, 379, 641, 887, 910, 124, 188, 213, 687 };
        assertEquals(8796093022208L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case21() {
        int M = 936;
        int[] L = { 657, 690, 506, 634, 189, 697, 196, 554, 57, 631, 240, 115, 721, 384, 62, 859, 578, 676, 859, 610, 746, 86, 289, 446, 772, 854, 538, 906, 389, 31, 864, 282, 642, 649, 801, 849, 720, 784, 843, 444, 682, 723, 772, 277, 870, 262, 101, 24, 728, 1 };
        int[] R = { 671, 708, 521, 648, 201, 720, 220, 570, 61, 653, 245, 121, 736, 408, 70, 876, 580, 686, 874, 620, 761, 102, 299, 449, 793, 877, 558, 907, 404, 34, 882, 291, 666, 654, 818, 851, 740, 805, 865, 463, 688, 736, 788, 279, 874, 274, 111, 28, 739, 24 };
        assertEquals(4398046511104L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case22() {
        int M = 933;
        int[] L = { 393, 710, 213, 242, 59, 37, 699, 766, 751, 518, 521, 13, 757, 813, 697, 589, 295, 575, 74, 839, 929, 526, 54, 279, 789, 635, 277, 542, 683, 695, 826, 115, 237, 158, 173, 792, 325, 267, 648, 450, 85, 880, 580, 120, 493, 535, 756, 884, 500, 533 };
        int[] R = { 399, 713, 217, 245, 61, 39, 700, 770, 751, 523, 524, 19, 763, 814, 701, 593, 295, 576, 77, 840, 931, 526, 57, 282, 790, 640, 283, 543, 688, 696, 831, 120, 241, 164, 174, 793, 329, 270, 648, 451, 85, 886, 582, 120, 496, 540, 762, 890, 501, 536 };
        assertEquals(281474976710656L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case23() {
        int M = 911;
        int[] L = { 333, 366, 103, 162, 317, 537, 252, 360, 288, 207, 306, 846, 661, 568, 613, 243, 335, 774, 770, 706, 26, 864, 402, 144, 615, 648, 479, 440, 171, 226, 535, 856, 553, 471, 34, 668, 644, 802, 157, 708, 291, 738, 472, 607, 881, 211, 856, 362, 160, 385 };
        int[] R = { 333, 372, 103, 167, 319, 539, 257, 362, 292, 211, 306, 848, 665, 572, 614, 245, 341, 776, 771, 712, 27, 868, 408, 150, 620, 653, 480, 444, 174, 232, 537, 860, 558, 476, 37, 673, 648, 804, 161, 714, 292, 739, 476, 611, 887, 213, 861, 362, 161, 389 };
        assertEquals(562949953421312L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case24() {
        int M = 967;
        int[] L = { 496, 77, 58, 133, 366, 344, 188, 466, 787, 76, 695, 949, 817, 866, 340, 319, 365, 652, 946, 493, 32, 384, 599, 546, 368, 107, 33, 74, 543, 62, 587, 704, 523, 351, 187, 799, 438, 117, 580, 955, 97, 38, 756, 353, 609, 138, 662, 141, 726, 588 };
        int[] R = { 593, 171, 146, 217, 444, 359, 272, 472, 884, 166, 780, 967, 827, 879, 425, 399, 432, 696, 953, 520, 63, 455, 692, 583, 372, 113, 55, 74, 580, 150, 676, 785, 607, 412, 204, 881, 503, 121, 675, 967, 178, 44, 799, 433, 677, 151, 713, 220, 766, 621 };
        assertEquals(268435456L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case25() {
        int M = 980;
        int[] L = { 84, 194, 136, 115, 376, 157, 826, 309, 337, 193, 641, 3, 403, 857, 823, 281, 317, 134, 707, 274, 61, 293, 708, 87, 69, 509, 777, 30, 497, 143, 743, 283, 429, 909, 895, 551, 20, 336, 101, 680, 292, 842, 914, 670, 183, 484, 135, 485, 370, 245 };
        int[] R = { 143, 230, 201, 135, 456, 212, 897, 368, 339, 198, 716, 88, 483, 954, 831, 321, 375, 174, 781, 371, 96, 293, 763, 128, 150, 524, 802, 42, 552, 186, 764, 295, 447, 926, 945, 586, 89, 339, 180, 685, 353, 894, 947, 757, 236, 504, 153, 548, 422, 314 };
        assertEquals(268435456L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case26() {
        int M = 971;
        int[] L = { 441, 624, 52, 933, 883, 546, 142, 92, 764, 652, 505, 640, 184, 875, 313, 458, 688, 321, 156, 728, 629, 376, 4, 100, 576, 638, 643, 868, 530, 517, 352, 172, 925, 915, 162, 235, 741, 683, 481, 715, 638, 910, 942, 145, 268, 330, 864, 363, 389, 65 };
        int[] R = { 488, 711, 128, 971, 971, 556, 187, 162, 853, 730, 511, 675, 280, 963, 392, 548, 753, 326, 223, 762, 686, 421, 22, 144, 639, 702, 666, 872, 557, 609, 415, 235, 971, 960, 257, 257, 792, 738, 519, 797, 692, 917, 971, 235, 322, 353, 942, 444, 422, 159 };
        assertEquals(16777216L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case27() {
        int M = 931;
        int[] L = { 227, 585, 238, 8, 551, 733, 218, 47, 269, 374, 132, 252, 608, 559, 155, 641, 677, 595, 114, 844, 340, 96, 127, 452, 489, 640, 857, 322, 145, 723, 250, 882, 631, 799, 892, 447, 261, 441, 7, 791, 554, 34, 365, 623, 931, 564, 479, 600, 93, 629 };
        int[] R = { 314, 590, 288, 46, 586, 742, 242, 84, 289, 467, 166, 308, 692, 641, 196, 725, 756, 662, 139, 881, 359, 133, 183, 512, 582, 676, 931, 406, 164, 799, 301, 931, 703, 888, 931, 540, 324, 444, 83, 886, 622, 117, 380, 716, 931, 592, 578, 691, 136, 672 };
        assertEquals(268435456L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case28() {
        int M = 950;
        int[] L = { 803, 553, 238, 692, 364, 17, 813, 627, 878, 611, 106, 764, 846, 211, 539, 696, 126, 840, 714, 103, 550, 127, 599, 621, 909, 857, 132, 220, 107, 146, 192, 539, 801, 573, 884, 826, 770, 855, 736, 634, 41, 1, 273, 612, 889, 459, 453, 480, 384, 503 };
        int[] R = { 910, 694, 384, 729, 364, 107, 948, 637, 950, 800, 180, 886, 950, 249, 550, 763, 193, 950, 861, 120, 573, 130, 650, 657, 950, 862, 294, 395, 238, 190, 195, 654, 920, 764, 950, 868, 870, 933, 793, 727, 144, 34, 344, 802, 930, 506, 511, 582, 574, 671 };
        assertEquals(32768L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case29() {
        int M = 923;
        int[] L = { 282, 472, 129, 625, 796, 899, 2, 655, 532, 790, 465, 738, 399, 917, 761, 693, 39, 692, 274, 520, 161, 196, 128, 554, 643, 759, 122, 630, 914, 409, 683, 114, 710, 341, 606, 197, 798, 244, 740, 573, 388, 44, 688, 226, 47, 192, 66, 472, 391, 518 };
        int[] R = { 417, 633, 323, 813, 838, 923, 71, 835, 696, 851, 538, 800, 501, 923, 913, 842, 83, 741, 339, 672, 231, 343, 197, 652, 795, 812, 244, 793, 923, 449, 775, 294, 726, 519, 621, 395, 833, 327, 842, 593, 410, 85, 776, 343, 145, 341, 255, 491, 394, 546 };
        assertEquals(8388608L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case30() {
        int M = 932;
        int[] L = { 610, 923, 293, 180, 790, 515, 316, 868, 65, 10, 263, 878, 516, 835, 872, 396, 503, 117, 907, 362, 538, 32, 30, 434, 256, 351, 176, 692, 560, 389, 275, 531, 3, 85, 228, 419, 71, 230, 928, 637, 291, 215, 41, 686, 917, 711, 568, 727, 239, 142 };
        int[] R = { 762, 932, 300, 208, 880, 692, 352, 911, 98, 103, 337, 932, 577, 897, 932, 419, 620, 220, 932, 421, 724, 197, 70, 531, 306, 372, 357, 763, 759, 568, 375, 592, 8, 113, 250, 579, 206, 244, 932, 798, 429, 353, 196, 857, 932, 744, 633, 728, 398, 290 };
        assertEquals(262144L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case31() {
        int M = 974;
        int[] L = { 287, 272, 546, 940, 319, 681, 639, 934, 738, 682, 126, 250, 470, 623, 539, 592, 680, 647, 115, 179, 266, 328, 618, 507, 368, 860, 378, 289, 119, 358, 41, 599, 27, 556, 115, 883, 72, 767, 656, 604, 15, 181, 668, 179, 669, 644, 833, 793, 436, 170 };
        int[] R = { 480, 409, 636, 974, 346, 870, 718, 974, 807, 880, 162, 373, 601, 684, 724, 608, 784, 800, 138, 371, 314, 458, 632, 534, 372, 934, 484, 478, 128, 405, 59, 774, 116, 622, 155, 959, 113, 818, 843, 689, 65, 336, 796, 256, 693, 716, 918, 839, 514, 295 };
        assertEquals(2097152L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case32() {
        int M = 966;
        int[] L = { 349, 493, 332, 370, 19, 458, 879, 806, 179, 71, 203, 268, 860, 50, 480, 246, 752, 220, 321, 286, 840, 544, 497, 326, 676, 195, 549, 816, 629, 94, 815, 385, 850, 431, 853, 515, 712, 929, 653, 849, 95, 685, 648, 470, 47, 822, 494, 52, 878, 198 };
        int[] R = { 594, 614, 452, 543, 270, 594, 880, 816, 269, 242, 338, 450, 966, 262, 678, 508, 966, 367, 524, 401, 898, 789, 596, 498, 938, 468, 687, 966, 632, 219, 966, 467, 886, 670, 966, 678, 966, 966, 814, 951, 290, 701, 855, 754, 306, 966, 762, 171, 966, 262 };
        assertEquals(4096L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case33() {
        int M = 924;
        int[] L = { 448, 374, 96, 525, 40, 517, 218, 437, 711, 161, 578, 255, 395, 465, 95, 290, 849, 6, 58, 624, 849, 7, 728, 530, 243, 443, 603, 857, 125, 102, 916, 197, 787, 589, 459, 201, 709, 13, 19, 772, 73, 707, 50, 707, 614, 87, 30, 153, 66, 21 };
        int[] R = { 720, 615, 311, 782, 140, 810, 347, 564, 735, 435, 663, 425, 624, 674, 118, 290, 924, 118, 125, 801, 924, 241, 749, 664, 385, 629, 624, 924, 379, 210, 924, 263, 825, 608, 649, 340, 717, 191, 306, 924, 100, 895, 348, 809, 718, 243, 163, 414, 352, 306 };
        assertEquals(16384L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case34() {
        int M = 943;
        int[] L = { 926, 473, 572, 245, 805, 277, 657, 495, 644, 822, 664, 464, 579, 345, 354, 40, 711, 493, 885, 342, 609, 188, 533, 755, 668, 546, 37, 882, 613, 806, 151, 118, 318, 589, 799, 715, 379, 490, 914, 229, 279, 36, 617, 188, 317, 569, 43, 357, 187, 326 };
        int[] R = { 943, 593, 850, 358, 896, 292, 718, 706, 695, 943, 771, 648, 580, 403, 644, 152, 771, 565, 943, 515, 660, 416, 794, 858, 675, 597, 229, 901, 620, 943, 434, 227, 356, 660, 943, 829, 608, 656, 943, 499, 545, 119, 770, 279, 503, 698, 160, 413, 439, 492 };
        assertEquals(8192L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case35() {
        int M = 1000;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] R = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case36() {
        int M = 1000;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] R = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case37() {
        int M = 1000;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] R = { 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case38() {
        int M = 100;
        int[] L = { 1, 50, 50 };
        int[] R = { 50, 100, 50 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case39() {
        int M = 1000;
        int[] L = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 };
        int[] R = { 4, 4, 8, 8, 12, 12, 16, 16, 20, 20 };
        assertEquals(1024L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case40() {
        int M = 1000;
        int[] L = { 3, 1, 7, 5, 11, 9, 15, 13, 19, 17 };
        int[] R = { 4, 4, 8, 8, 12, 12, 16, 16, 20, 20 };
        assertEquals(32L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case41() {
        int M = 1000;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] R = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case42() {
        int M = 50;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 };
        int[] R = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 };
        assertEquals(137438953472L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case43() {
        int M = 10;
        int[] L = { 1, 2 };
        int[] R = { 4, 3 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case44() {
        int M = 1000;
        int[] L = { 1, 21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341, 361, 381, 401, 421, 441, 461, 481, 501, 521, 541, 561, 581, 601, 621, 641, 661, 681, 701, 721, 741, 761, 781, 801, 821, 841, 861, 881, 901, 921, 941, 961, 981 };
        int[] R = { 1, 21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341, 361, 381, 401, 421, 441, 461, 481, 501, 521, 541, 561, 581, 601, 621, 641, 661, 681, 701, 721, 741, 761, 781, 801, 821, 841, 861, 881, 901, 921, 941, 961, 981 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case45() {
        int M = 50;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] R = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case46() {
        int M = 1000;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] R = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 998, 1000, 999 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case47() {
        int M = 1;
        int[] L = { 1 };
        int[] R = { 1 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case48() {
        int M = 2;
        int[] L = { 2 };
        int[] R = { 2 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case49() {
        int M = 100;
        int[] L = { 3, 6, 1 };
        int[] R = { 4, 7, 2 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case50() {
        int M = 1000;
        int[] L = { 1, 2 };
        int[] R = { 4, 2 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case51() {
        int M = 6;
        int[] L = { 1, 2 };
        int[] R = { 2, 4 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case52() {
        int M = 1000;
        int[] L = { 177, 344, 131, 130, 176, 210, 299, 295, 24, 431, 61, 81, 222, 175, 230, 359, 265, 381, 19, 213, 251, 288, 414, 79, 183, 349, 323, 298, 292, 118, 440, 477, 373, 294, 278, 354, 423, 19, 429, 148, 294, 246, 142, 490, 353, 372, 141, 73, 433, 259 };
        int[] R = { 532, 824, 865, 617, 950, 559, 666, 664, 841, 843, 862, 616, 670, 948, 558, 855, 652, 888, 791, 645, 739, 601, 652, 632, 501, 862, 718, 789, 902, 569, 513, 622, 678, 530, 747, 818, 506, 613, 655, 628, 684, 693, 653, 744, 692, 545, 622, 806, 736, 784 };
        assertEquals(128L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case53() {
        int M = 50;
        int[] L = { 10, 5, 17 };
        int[] R = { 20, 13, 25 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case54() {
        int M = 5;
        int[] L = { 1, 2, 3 };
        int[] R = { 5, 4, 3 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case55() {
        int M = 10;
        int[] L = { 1, 3 };
        int[] R = { 8, 6 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case56() {
        int M = 10;
        int[] L = { 2, 3, 4, 1 };
        int[] R = { 2, 3, 4, 10 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case57() {
        int M = 100;
        int[] L = { 1, 2 };
        int[] R = { 4, 3 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case58() {
        int M = 10;
        int[] L = { 1, 5 };
        int[] R = { 2, 6 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case59() {
        int M = 5;
        int[] L = { 1, 2 };
        int[] R = { 4, 3 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case60() {
        int M = 1000;
        int[] L = { 3, 5 };
        int[] R = { 100, 10 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case61() {
        int M = 100;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] R = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(1125899906842624L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case62() {
        int M = 100;
        int[] L = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        int[] R = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        assertEquals(562949953421312L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case63() {
        int M = 1000;
        int[] L = { 1, 2, 3, 4 };
        int[] R = { 14, 13, 12, 11 };
        assertEquals(16L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case64() {
        int M = 7;
        int[] L = { 1, 2, 3, 4 };
        int[] R = { 7, 6, 5, 4 };
        assertEquals(16L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case65() {
        int M = 2;
        int[] L = { 2, 1 };
        int[] R = { 2, 2 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case66() {
        int M = 1000;
        int[] L = { 1, 500 };
        int[] R = { 1000, 500 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case67() {
        int M = 1000;
        int[] L = { 97, 629, 788, 178, 9, 696, 179, 539, 375, 99, 77, 399, 204, 21, 166, 367, 111, 73, 27, 66 };
        int[] R = { 950, 677, 847, 653, 723, 875, 417, 921, 962, 649, 684, 565, 416, 476, 247, 995, 988, 577, 300, 458 };
        assertEquals(128L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case68() {
        int M = 1000;
        int[] L = { 4, 2, 3, 1 };
        int[] R = { 4, 2, 3, 1 };
        assertEquals(16L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case69() {
        int M = 10;
        int[] L = { 1, 2 };
        int[] R = { 10, 8 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case70() {
        int M = 4;
        int[] L = { 1, 1, 4 };
        int[] R = { 4, 1, 4 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case71() {
        int M = 1000;
        int[] L = { 1000, 1000 };
        int[] R = { 1000, 1000 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case72() {
        int M = 3;
        int[] L = { 1, 1, 2 };
        int[] R = { 3, 1, 3 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case73() {
        int M = 4;
        int[] L = { 1, 2, 3 };
        int[] R = { 1, 2, 3 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case74() {
        int M = 6;
        int[] L = { 2, 3 };
        int[] R = { 4, 3 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case75() {
        int M = 4;
        int[] L = { 1, 2 };
        int[] R = { 3, 2 };
        assertEquals(4L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case76() {
        int M = 10;
        int[] L = { 1, 2, 1 };
        int[] R = { 1, 2, 2 };
        assertEquals(2L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case77() {
        int M = 1000;
        int[] L = { 1, 2, 5, 6 };
        int[] R = { 1000, 2, 5, 6 };
        assertEquals(16L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

    @Test
    public void case78() {
        int M = 10;
        int[] L = { 3, 4, 1 };
        int[] R = { 3, 4, 2 };
        assertEquals(8L, littleelephantandintervalsdiv1.getNumber(M, L, R));
    }

}
