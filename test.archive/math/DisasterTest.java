package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class DisasterTest {
  double DELTA = 1.0e-09;
  Disaster disaster = new Disaster();

  @Test
  public void case1() {
    double b = 1.0;
    String[] roads = { "1 0 1", "0 1 0", "1 .9 1" };
    assertEquals(0.13333333333333336, disaster.expected(b, roads), DELTA * 0.13333333333333336);
  }

  @Test
  public void case2() {
    double b = 0.5;
    String[] roads = { "1 0 1 0", "0 1 0 0", "0 0 1 0", "1 .9 1 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case3() {
    double b = 0.8;
    String[] roads = { "1 .8 .6", "1 1 1", "1 1 1" };
    assertEquals(0.25, disaster.expected(b, roads), DELTA * 0.25);
  }

  @Test
  public void case4() {
    double b = 0.01;
    String[] roads = { "1 .6 1", "0 1 0", "1 1 1" };
    assertEquals(15.0, disaster.expected(b, roads), DELTA * 15.0);
  }

  @Test
  public void case5() {
    double b = 0.01;
    String[] roads = { "1 .58 1", "0 1 0", "1 1 1" };
    assertEquals(14.814814814814813, disaster.expected(b, roads), DELTA * 14.814814814814813);
  }

  @Test
  public void case6() {
    double b = 0.8;
    String[] roads = { "1 .0300 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 .0517 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0740 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0973 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1214 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1465 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1725 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1995 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0", "1 .2275 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0", "1 .2567 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0", "1 .2869 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0", "1 .3182 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0", "1 .3507 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0", "1 .3843 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0", "1 .4192 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0", "1 .4554 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0", "1 .4929 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0", "1 .5317 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0", "1 .5718 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0", "1 .6134 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98", "1 .6565 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" };
    assertEquals(0.009382592592592593, disaster.expected(b, roads), DELTA * 0.009382592592592593);
  }

  @Test
  public void case7() {
    double b = 0.7;
    String[] roads = { "1 .0300 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 .0517 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0740 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0973 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1214 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1465 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1725 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1995 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0", "1 .2275 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0", "1 .2567 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0", "1 .2869 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0", "1 .3182 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0", "1 .3507 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0", "1 .3843 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0", "1 .4192 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0", "1 .4554 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0", "1 .4929 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0", "1 .5317 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0", "1 .5718 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0", "1 .6134 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98", "1 .6575 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" };
    assertEquals(0.010730635484897288, disaster.expected(b, roads), DELTA * 0.010730635484897288);
  }

  @Test
  public void case8() {
    double b = 0.23;
    String[] roads = { "1 .0300 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 .0517 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0740 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0973 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1214 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1465 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1725 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1995 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0", "1 .2275 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0", "1 .2567 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0", "1 .2869 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0", "1 .3182 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0", "1 .3507 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0", "1 .3843 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0", "1 .4192 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .99 0 0 0 0 0", "1 .4554 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0", "1 .4929 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0", "1 .5317 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0", "1 .5718 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0", "1 .6134 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98", "1 .6565 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" };
    assertEquals(0.03294457305575863, disaster.expected(b, roads), DELTA * 0.03294457305575863);
  }

  @Test
  public void case9() {
    double b = 0.45;
    String[] roads = { "1 .0300 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 .0517 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0740 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .0973 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1214 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1465 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1725 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0 0", "1 .1995 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0 0", "1 .2275 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0 0", "1 .2567 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0 0", "1 .2869 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0 0 0", "1 .3182 1 1 1 1 1 1 1 1 1 1 1 .97 0 0 0 0 0 0 0 0", "1 .3507 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0 0", "1 .3843 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0 0", "1 .4192 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0 0", "1 .4554 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0 0", "1 .4929 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0 0", "1 .5317 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0 0", "1 .5718 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98 0", "1 .6134 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .98", "1 .6565 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" };
    assertEquals(0.016680164609053503, disaster.expected(b, roads), DELTA * 0.016680164609053503);
  }

  @Test
  public void case10() {
    double b = 0.5287881684554546;
    String[] roads = { "1 0 .43 .42 0 .78 .64 0 .40 .36 0 0 .82", "0 1 0 0 .82 .57 .77 .37 .78 0 .92 .35 .03", ".40 .25 1 .24 0 .96 .22 .43 .75 .59 0 0 .53", ".38 0 0 1 0 .96 .14 .32 .43 .81 .28 .18 .63", ".39 .62 .59 0 1 .83 .83 0 .40 .93 0 .80 .10", ".69 0 .78 .94 .76 1 .75 0 0 .06 .09 .67 .91", "1 .42 0 0 0 0 1 .91 0 .68 .18 0 0", "0 .65 0 .08 .24 0 0 1 .87 0 .87 .99 .93", "0 0 .34 0 .13 .94 0 .47 1 .84 .03 0 .48", ".59 .08 0 .70 .27 .04 0 0 .95 1 0 0 .64", "0 .03 0 .29 0 .24 0 .84 .99 0 1 .09 0", ".16 .02 .09 0 0 .63 0 0 .90 .38 0 1 .33", ".92 .11 0 .14 .68 .40 .09 .15 0 .84 0 .12 1" };
    assertEquals(0.07550518786496525, disaster.expected(b, roads), DELTA * 0.07550518786496525);
  }

  @Test
  public void case11() {
    double b = 0.18183864583147522;
    String[] roads = { "1 0 .3776", ".4820 1 .5247", ".5105 .9486 1" };
    assertEquals(0.2918267809574799, disaster.expected(b, roads), DELTA * 0.2918267809574799);
  }

  @Test
  public void case12() {
    double b = 0.5736668127579901;
    String[] roads = { "1 0 0 0 0 0 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 0 0 0 0", "0 0 1 0 0 0 0 0 0 0 .50 0", "0 0 0 1 0 0 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 .75 0 0 0", "0 0 .85 0 0 1 0 .21 0 0 0 0", ".31 0 0 0 0 0 1 0 0 0 0 .22", "0 0 .73 0 .41 0 0 1 0 0 0 0", "0 0 .22 0 0 0 0 0 1 0 0 0", "0 0 0 0 0 0 0 .99 0 1 .75 0", "0 0 0 0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case13() {
    double b = 0.9859405530351704;
    String[] roads = { "1 0 0 0 .27 0 0 0 0 0 0", "0 1 .63 0 0 0 .41 .52 0 0 0", "0 .33 1 0 0 0 .19 0 0 .91 0", "0 0 .09 1 0 0 0 0 .45 0 0", "0 0 .32 0 1 0 0 0 0 .08 0", ".03 .51 0 0 0 1 0 0 0 0 .75", "0 0 0 0 .18 0 1 .04 0 .14 0", "0 .70 0 0 .72 .62 0 1 .83 .11 0", "0 0 0 0 0 0 .96 .86 1 0 .85", "0 0 0 0 0 0 .02 0 0 1 0", ".37 0 .52 0 0 .46 0 0 0 0 1" };
    assertEquals(0.0030500064032691543, disaster.expected(b, roads), DELTA * 0.0030500064032691543);
  }

  @Test
  public void case14() {
    double b = 0.27354244957113777;
    String[] roads = { "1 0 .6833 0 .5552 0", ".6987 1 .7907 .7494 .9788 .2589", ".9363 .4939 1 .1746 .3049 .4815", ".4176 0 .8909 1 .4715 0", ".5491 .6894 .7690 0 1 .6542", ".0510 .5761 .0632 .2034 .2308 1" };
    assertEquals(0.2072966252790686, disaster.expected(b, roads), DELTA * 0.2072966252790686);
  }

  @Test
  public void case15() {
    double b = 0.712556106857055;
    String[] roads = { "1 0", ".8738 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case16() {
    double b = 0.8264949411328035;
    String[] roads = { "1 0 .8792 0 .8908 0 .7540 .3355 0", ".6532 1 0 .3304 .4633 .2131 0 0 .0256", "0 0 1 .4123 .3611 .7744 .2669 .9421 .2147", ".3519 .1920 .0945 1 .4920 .0871 0 .6675 .2192", ".8473 .5613 .7084 .4360 1 .0829 .5543 .0929 0", ".1447 0 0 .7851 .9050 1 .8874 .2565 .7897", ".4721 .7814 .8823 .8678 .1167 0 1 .3716 .0960", ".9560 .9727 .8382 .6880 .6332 .0351 0 1 .0870", ".5513 0 .7684 0 .2988 .3357 .2760 0 1" };
    assertEquals(0.10560896350368448, disaster.expected(b, roads), DELTA * 0.10560896350368448);
  }

  @Test
  public void case17() {
    double b = 0.9357773266275589;
    String[] roads = { "1 0 .1878 .8340 0", "0 1 .7816 0 0", "0 0 1 0 0", "0 0 .3344 1 0", ".4439 0 .1486 .0571 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case18() {
    double b = 0.1951616243605009;
    String[] roads = { "1 0 0 .8215 .5066", ".1918 1 .7356 .6510 .2751", ".8639 .2489 1 0 .3152", ".4648 .2680 .1388 1 0", ".7379 0 .7324 0 1" };
    assertEquals(0.16712605615714443, disaster.expected(b, roads), DELTA * 0.16712605615714443);
  }

  @Test
  public void case19() {
    double b = 0.8510475019320802;
    String[] roads = { "1 0", ".8323 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case20() {
    double b = 0.04729817639409591;
    String[] roads = { "1 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 1 0 .77 0 0 0 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 1 .28 0 0 0 0 0 0 0", "0 0 0 0 0 0 1 0 0 0 0 0 .58 0", "0 0 0 0 0 0 0 1 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 1 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 1 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 1 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 1 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case21() {
    double b = 0.5818591206453829;
    String[] roads = { "1 0 .8979 .1945 .0989 .6572 .2043 .8562", ".8072 1 .0244 .3659 0 0 0 .2757", "0 .6548 1 .1000 .1605 .1680 .0635 0", "0 .6473 .3023 1 .2214 .2823 .7682 .9028", ".1175 .1082 0 .6524 1 .5178 .6133 .5048", ".7832 .7317 .6209 .5560 .7966 1 .6642 .8589", ".3742 .4506 .6893 .7036 .4510 .7270 1 .5507", ".2971 .1826 .9558 .5442 .7279 0 .1652 1" };
    assertEquals(0.14969766395428985, disaster.expected(b, roads), DELTA * 0.14969766395428985);
  }

  @Test
  public void case22() {
    double b = 0.5849998756139348;
    String[] roads = { "1 0 .8021 .6057 .5244", ".3699 1 .0855 .5050 .9897", ".9844 .5479 1 .1570 .2911", ".3061 .1684 0 1 .7369", ".3794 .3145 .9509 .6987 1" };
    assertEquals(0.11129362037170872, disaster.expected(b, roads), DELTA * 0.11129362037170872);
  }

  @Test
  public void case23() {
    double b = 0.6935673812863622;
    String[] roads = { "1 0 0 .59 .78 .01 0 0 0 0 .42 .04", ".89 1 0 .76 .59 .59 .53 0 0 0 .58 .00", "0 0 1 0 0 .38 .11 0 0 0 .87 .35", ".33 0 0 1 .79 .47 0 .77 0 .85 .70 .05", "0 0 0 .33 1 0 .75 .82 0 .70 .02 0", "0 .83 .68 0 0 1 .90 .75 0 0 0 .64", "0 0 .41 .71 .50 .90 1 .58 .89 0 0 .77", ".11 0 .79 0 0 .40 0 1 .47 .41 .96 .49", ".76 .82 0 0 0 0 0 .20 1 0 0 0", "0 .38 .34 .33 0 0 .85 .62 0 1 0 0", ".20 0 .14 0 .79 .14 .78 0 0 0 1 0", "0 .52 0 0 0 0 .06 0 .72 .55 0 1" };
    assertEquals(0.0516152162946362, disaster.expected(b, roads), DELTA * 0.0516152162946362);
  }

  @Test
  public void case24() {
    double b = 0.4102094163602575;
    String[] roads = { "1 0 0 0", ".1275 1 .6365 0", "0 .9669 1 0", "0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case25() {
    double b = 0.20436940436367568;
    String[] roads = { "1 0 .1556 .5451 .9835 .2298", ".0092 1 .0827 .4361 .6721 .2141", ".0423 .9605 1 0 .4330 0", ".7423 .1023 .6409 1 .0991 .5064", ".1369 .2445 .5113 .3801 1 .6692", "0 .2649 .9625 .1466 .7010 1" };
    assertEquals(0.24926163870336066, disaster.expected(b, roads), DELTA * 0.24926163870336066);
  }

  @Test
  public void case26() {
    double b = 0.6555715875152343;
    String[] roads = { "1 0 .8735 0 0 0 0 0 0", ".8959 1 0 0 0 0 0 0 .9874", "0 0 1 .3725 0 .8880 0 0 0", ".0861 0 0 1 0 0 0 0 0", "0 0 0 .7213 1 0 0 .1767 0", "0 .5855 0 0 0 1 .0217 0 0", "0 0 0 0 .8222 0 1 0 0", "0 0 0 .2590 0 0 0 1 0", "0 0 0 .4130 0 0 .4152 0 1" };
    assertEquals(0.07306450567528511, disaster.expected(b, roads), DELTA * 0.07306450567528511);
  }

  @Test
  public void case27() {
    double b = 0.3773860752844673;
    String[] roads = { "1 0 0 0 0 0 0", "0 1 0 0 0 0 0", "0 0 1 0 0 .3442 0", "0 0 0 1 0 0 0", "0 0 0 0 1 0 0", "0 0 0 0 0 1 0", "0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case28() {
    double b = 0.46157370927772307;
    String[] roads = { "1 0 .0918 0 0 0 .2302 0 .8086", "0 1 .1936 .4808 .1881 0 0 0 .5325", "0 0 1 0 .4491 0 0 .5647 .4599", ".1368 .0629 .5899 1 .3341 .1192 .0693 .3799 .3584", "0 .1716 0 .4074 1 0 .8741 .2494 .4915", ".3198 0 0 .0426 0 1 .2599 .6575 .9384", "0 .1250 .2078 .3642 .3767 .5932 1 .4931 0", ".7839 .0586 0 .6386 .5593 .3305 0 1 .0536", ".7017 .4934 0 .4444 0 .9968 .3172 .9008 1" };
    assertEquals(0.1280524951858167, disaster.expected(b, roads), DELTA * 0.1280524951858167);
  }

  @Test
  public void case29() {
    double b = 0.8152032555608186;
    String[] roads = { "1 0 0 0 .1882 0 .1031 .0110", ".7150 1 .3671 0 0 .9862 0 0", ".3994 .6577 1 0 0 .5763 .2346 0", "0 0 0 1 0 .5596 .8472 0", "0 0 .1282 .1113 1 .9891 0 .0252", "0 0 .4532 0 .1713 1 0 .2578", ".4615 .2476 0 .0407 .3471 .6833 1 0", "0 .1835 .6506 .1134 .7970 .5835 .4519 1" };
    assertEquals(0.00557572829243987, disaster.expected(b, roads), DELTA * 0.00557572829243987);
  }

  @Test
  public void case30() {
    double b = 0.4087793785785778;
    String[] roads = { "1 0 0 0", "0 1 0 .7663", ".6305 0 1 0", ".3402 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case31() {
    double b = 0.3821629815565936;
    String[] roads = { "1 0 .65 0 .17 0 .38 .37 .20 0 .05 .66 .87 .10", ".91 1 0 .54 .02 0 .39 .79 0 .12 .39 .31 .71 .67", ".68 .19 1 0 .58 0 .95 0 .58 .83 .88 .35 0 0", ".72 .41 .51 1 .18 0 0 0 .54 0 0 .84 .79 .94", ".48 0 .43 .26 1 0 1 0 .36 .49 .23 0 0 .54", "0 .95 .16 0 0 1 .05 0 .24 0 .74 0 .77 0", "0 0 .29 0 .15 0 1 .92 .67 0 .82 0 0 .54", ".70 .45 0 .55 .85 .74 .37 1 0 .41 0 0 0 0", ".78 .81 .84 .32 0 0 0 .44 1 0 .12 .32 0 .95", "0 .83 0 0 .68 .83 .33 0 .75 1 .74 .49 .51 0", ".41 .11 .70 .77 .21 .82 .55 0 0 .65 1 0 .07 0", "0 0 .07 .63 .46 0 .59 .32 .87 .28 .01 1 .60 .63", ".70 .16 .14 .06 .33 .94 .78 0 .26 .34 .87 .84 1 0", ".76 .64 .46 .19 .99 .13 .36 .68 .26 .65 .90 0 0 1" };
    assertEquals(0.21441042308375896, disaster.expected(b, roads), DELTA * 0.21441042308375896);
  }

  @Test
  public void case32() {
    double b = 0.25972304134913543;
    String[] roads = { "1 0 0 .6035 .5299", "0 1 .6717 0 0", ".9049 0 1 .2915 .6994", ".3834 .1914 .6718 1 .2731", ".9233 .4551 .9223 .8724 1" };
    assertEquals(0.13755820573319533, disaster.expected(b, roads), DELTA * 0.13755820573319533);
  }

  @Test
  public void case33() {
    double b = 0.09101970403941273;
    String[] roads = { "1 0", ".0083 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case34() {
    double b = 0.9948028483994009;
    String[] roads = { "1 0 0 0", "0 1 0 0", "0 0 1 0", ".5795 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case35() {
    double b = 0.899765695043575;
    String[] roads = { "1 0 .0100 .3158 .6200 .4958 .3206 .1854 .4933", ".5824 1 .6566 .1822 .7269 .8719 .3654 .5292 .1603", ".7355 .7478 1 .9556 .3551 0 .2757 .1469 .6141", ".3546 .5305 .8500 1 .4854 .8856 .1262 .1980 0", ".7342 .3193 .8137 .4518 1 .7188 .2682 .6552 .4301", ".0201 .3463 .7184 .1214 .0432 1 .9004 .4396 .1493", ".2928 .1192 .7315 .9901 .3250 .9590 1 .4647 .8480", ".1671 .6410 .0149 .7280 .9600 .5350 0 1 .8501", ".7589 .7112 .6278 .5231 .4979 .4360 .7337 0 1" };
    assertEquals(0.057765649341757264, disaster.expected(b, roads), DELTA * 0.057765649341757264);
  }

  @Test
  public void case36() {
    double b = 0.9716584993767248;
    String[] roads = { "1 0 0 .40 0 0 0 0 0 0 0 0 0", "0 1 0 0 0 .60 0 .41 0 0 0 0 0", "0 0 1 0 0 0 0 0 0 .24 0 0 0", "0 0 0 1 0 0 0 0 .80 0 0 0 0", "0 0 .83 0 1 0 .35 .18 .33 0 0 0 .42", "0 0 0 0 0 1 0 0 .90 .37 .78 0 0", "0 0 .29 0 0 0 1 0 0 0 0 .59 0", ".28 0 0 0 0 .04 0 1 0 0 0 .39 0", ".73 .07 0 0 0 .13 0 0 1 0 0 0 0", "0 0 0 .87 0 .36 0 0 0 1 0 .79 0", "0 0 0 0 0 0 0 0 0 0 1 0 0", "0 .66 0 .37 0 0 .06 0 0 0 .70 1 .81", "0 0 0 .27 .55 0 0 0 0 0 0 0 1" };
    assertEquals(0.0024314098024310372, disaster.expected(b, roads), DELTA * 0.0024314098024310372);
  }

  @Test
  public void case37() {
    double b = 0.8396458506358353;
    String[] roads = { "1 0 .31 0 0 .33 .90 .19 .78 .54 0", ".83 1 0 .96 .85 0 .20 0 0 .21 0", ".29 0 1 .57 .18 .65 0 .06 .84 0 0", ".14 .87 0 1 .56 .13 .60 .80 .09 .97 0", "0 0 .82 .50 1 0 .62 0 .29 .30 .80", ".98 .88 0 .79 .46 1 0 .25 .98 .22 .94", ".48 0 .49 .23 .33 0 1 .94 0 .92 .08", ".54 0 0 0 0 .92 .99 1 .35 .31 .36", "0 .67 .94 0 0 0 .82 0 1 .46 .67", ".93 .25 .23 .34 .99 0 .03 0 0 1 .15", ".30 0 0 0 .11 0 0 .64 .20 .39 1" };
    assertEquals(0.09220818773009244, disaster.expected(b, roads), DELTA * 0.09220818773009244);
  }

  @Test
  public void case38() {
    double b = 0.6580979300791807;
    String[] roads = { "1 0 0", "0 1 .0910", ".6903 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case39() {
    double b = 0.24845415862889916;
    String[] roads = { "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .49 0 .93 0 0 0", "0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .76 0", "0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 .82 0 0 0 0", "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 .52", "0 0 .45 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 .65 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 .50 0 1 0 0 0 .65 0 0 .84 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 .26 0 0 0 0 1 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 .70 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 .76 0 0", "0 0 0 0 .96 0 0 0 0 .67 0 0 0 .56 0 .89 0 1 0 0 0", "0 0 0 0 0 .50 0 0 0 0 0 0 0 0 0 .71 0 0 1 .07 0", "0 0 0 0 0 0 0 .45 0 0 0 0 0 0 0 0 .53 .53 .70 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case40() {
    double b = 0.22788266886779707;
    String[] roads = { "1 0", ".8738 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case41() {
    double b = 0.4991586150325484;
    String[] roads = { "1 0 .0973 .1743 .1207 .5463", ".7255 1 .5913 .2482 .7230 .9472", ".2967 .2123 1 0 .1979 .6729", ".0768 0 .9673 1 .1125 .2532", ".3296 .9729 .0019 .8089 1 .0269", ".2710 .2184 .7782 .6585 .6051 1" };
    assertEquals(0.06795349285004441, disaster.expected(b, roads), DELTA * 0.06795349285004441);
  }

  @Test
  public void case42() {
    double b = 0.5491406816418968;
    String[] roads = { "1 0 0 0 0 0 .4651 0 .8693", "0 1 0 0 0 0 0 0 0", "0 0 1 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0", "0 0 0 0 1 0 0 0 0", "0 0 0 0 0 1 .2819 0 0", "0 0 0 0 0 0 1 0 0", "0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case43() {
    double b = 0.7158273192866523;
    String[] roads = { "1 0", ".4951 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case44() {
    double b = 0.5478962079240809;
    String[] roads = { "1 0 0 .7314 0 0 .1949 0 0 .1018", ".0115 1 0 0 .2623 0 .8970 0 .5655 .9297", ".5824 .1428 1 0 .4403 .8782 0 .5355 .4030 .4481", ".3133 .8226 0 1 0 0 0 0 0 0", "0 0 0 0 1 .3959 .0667 .6541 0 0", "0 0 .4249 .1363 0 1 .4711 .6772 0 .8003", "0 .1110 .1401 0 .8196 0 1 .1351 .2882 .8948", "0 0 0 .9261 0 .8796 .6193 1 0 0", "0 0 0 .6493 .9608 .2715 0 0 1 .9971", "0 .5455 .3013 .0184 0 0 .0080 0 0 1" };
    assertEquals(0.16268278318208537, disaster.expected(b, roads), DELTA * 0.16268278318208537);
  }

  @Test
  public void case45() {
    double b = 0.4800022235422439;
    String[] roads = { "1 0 0 0 0 .75 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 0 0 0 0", "0 0 1 0 0 0 0 0 0 0 0 0", "0 0 0 1 .41 0 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 0 0 0 0", "0 0 0 0 0 1 0 0 0 .66 0 0", "0 0 0 0 0 0 1 0 0 0 0 0", "0 0 0 0 0 0 0 1 0 0 0 0", "0 0 0 0 0 0 0 0 1 0 .31 0", ".61 0 0 0 0 0 0 0 0 1 0 .91", "0 0 0 0 0 0 0 0 0 .79 1 0", "0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case46() {
    double b = 0.39537686081592166;
    String[] roads = { "1 0 .43 .42 .07 .91 .98 0 .30 .11 .31 .09 .07", ".23 1 .29 .63 .32 .88 .57 .60 .76 .21 .37 0 .38", ".55 .66 1 0 .17 .34 .08 .05 .82 .58 .79 0 .46", "0 0 0 1 .85 .94 .25 0 0 .60 0 0 0", ".16 .54 .62 .75 1 .56 .44 .75 0 .49 .80 .93 .85", ".20 .79 .38 .97 .53 1 .86 .59 .14 .10 0 .08 0", ".86 .05 0 .05 0 .21 1 0 .53 .05 0 .15 .51", "0 .91 .65 .81 .33 0 .24 1 .90 .09 .72 .75 0", ".82 .93 .17 0 .96 .37 .15 .50 1 0 0 .73 .79", ".22 0 .12 .23 0 0 .30 .42 .07 1 .71 0 .08", ".40 1 0 .72 .62 .87 .19 .52 0 .16 1 .85 0", ".13 .89 .21 .29 .11 .44 .69 .96 .16 0 .05 1 .24", ".23 .41 0 .19 0 .43 .24 .79 .66 .11 .09 .67 1" };
    assertEquals(0.2693726271282461, disaster.expected(b, roads), DELTA * 0.2693726271282461);
  }

  @Test
  public void case47() {
    double b = 0.23729729974730548;
    String[] roads = { "1 0 0", "0 1 .4843", "0 .4235 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case48() {
    double b = 0.046036462121687584;
    String[] roads = { "1 0 .7075 0 0 0 0 .7687 0 .3532", "0 1 .2973 0 0 0 .7348 0 0 .3989", ".1093 0 1 0 0 0 .5692 0 .8641 0", "0 0 .5887 1 0 .1245 .2519 0 0 0", "0 0 0 .9027 1 0 0 .1055 0 0", "0 0 0 0 0 1 0 .3085 0 .3625", "0 0 0 0 0 0 1 0 .5787 0", "0 0 0 0 0 .4594 0 1 0 0", "0 0 0 0 0 0 0 0 1 .0268", "0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case49() {
    double b = 0.6580521321872358;
    String[] roads = { "1 0 0 0", ".3378 1 0 .3304", ".0877 0 1 0", ".7671 .6300 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case50() {
    double b = 0.3406392254343651;
    String[] roads = { "1 0 0 0 .1645 .8834 0", "0 1 0 0 .9155 .4702 .8418", ".1525 0 1 .5889 0 .0984 .2264", ".9014 0 .2427 1 .3674 0 0", "0 .0122 0 .4286 1 0 0", ".1282 .5273 0 0 0 1 0", ".8895 0 0 .1618 0 0 1" };
    assertEquals(0.20258940869555314, disaster.expected(b, roads), DELTA * 0.20258940869555314);
  }

  @Test
  public void case51() {
    double b = 0.2651133389705319;
    String[] roads = { "1 0 .49 0 0 .40 0 0 0 0 .00 0 .49 .95", "0 1 0 0 0 .43 .73 .23 0 0 0 .21 0 .16", "0 0 1 .39 .14 0 0 0 0 .37 0 0 0 0", ".58 0 0 1 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 1 .42 0 0 0 .48 0 .41 .56 0", ".87 0 .80 0 .77 1 0 0 .44 0 .04 .77 0 .89", "0 0 .38 0 0 0 1 0 0 .84 0 0 0 0", "0 0 .84 .16 0 0 .59 1 .89 0 .71 .16 0 0", ".91 .52 .32 .42 .35 .57 .66 0 1 .09 .07 0 .18 .99", "0 0 0 .11 .92 .44 .43 0 0 1 0 .64 .79 .81", ".44 0 .90 .11 0 0 .05 .89 .39 0 1 0 .95 .20", ".78 0 0 0 0 0 0 0 0 .39 0 1 0 .25", "0 0 0 .08 .07 0 .59 0 0 .58 .72 0 1 0", "0 0 0 0 0 .41 .09 .85 0 0 0 0 0 1" };
    assertEquals(0.11547666835203219, disaster.expected(b, roads), DELTA * 0.11547666835203219);
  }

  @Test
  public void case52() {
    double b = 0.8834670062963866;
    String[] roads = { "1 0 .2662 0 .5615 .6317", "0 1 0 0 .3067 .0828", "0 0 1 .2009 .1033 0", "0 .5395 0 1 0 0", ".8643 0 0 0 1 0", ".5210 .7859 .2814 .1871 0 1" };
    assertEquals(0.08324996464255383, disaster.expected(b, roads), DELTA * 0.08324996464255383);
  }

  @Test
  public void case53() {
    double b = 0.4549121299771853;
    String[] roads = { "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 1 0 0 0 .78 0 0 0 0 0 .76 0 0 0", ".83 0 1 0 0 .56 0 0 0 0 0 0 0 0 0", ".82 0 0 1 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 1 0 .28 0 0 0 0 0 0 0 0", ".37 0 0 0 0 1 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 1 0 0 .88 0 .43 0 0 0", ".92 0 0 0 0 0 0 1 .22 0 0 0 0 .74 0", "0 0 0 0 0 0 0 0 1 .77 0 .05 .73 0 0", "0 0 0 0 0 0 0 0 0 1 0 .29 .44 0 0", "0 .57 0 0 0 0 0 0 0 0 1 0 0 0 0", "0 0 0 0 0 0 0 .23 .17 0 0 1 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 1 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 .87 0 0 0 0 0 .18 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case54() {
    double b = 0.10032593731559084;
    String[] roads = { "1 0 0 0 0 0 0 .26 0 0 0 0 0 .82 .92 .14 0 0 0", "0 1 0 0 0 0 0 0 0 0 0 0 .81 0 0 0 .48 0 .92", "0 0 1 0 0 0 0 0 0 0 .73 0 0 0 0 0 .33 0 0", ".04 0 0 1 0 0 0 .45 .44 0 0 .24 0 .75 0 0 0 0 0", "0 0 0 0 1 .55 0 .44 0 0 0 0 0 .88 .84 0 0 0 0", ".21 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 1 0 0 0 0 0 .87 0 0 .27 0 0 0", "0 0 0 0 0 0 0 1 .61 .35 .20 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 1 0 0 .92 0 0 0 0 0 0 0", "0 0 0 .54 .73 0 0 0 0 1 0 0 0 0 0 0 0 0 0", "0 0 .75 0 0 0 .73 0 0 0 1 0 .20 0 0 0 .60 0 0", "0 .46 0 0 .80 0 0 0 0 0 0 1 0 .90 0 0 0 0 0", "0 0 0 0 0 0 .61 0 .04 0 0 .57 1 0 .85 .90 0 0 0", "0 0 0 0 .15 0 0 0 0 0 .15 0 .92 1 0 0 0 0 .49", ".17 0 0 .73 0 0 0 0 .25 0 .81 .03 0 0 1 .12 0 0 0", "0 0 0 0 0 0 0 0 .78 0 0 0 .41 0 0 1 0 .94 0", "0 0 0 0 0 0 0 0 .03 0 0 0 0 0 0 0 1 0 0", ".20 0 0 0 0 0 0 0 0 0 0 0 0 0 .74 0 0 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 .45 0 0 .38 1" };
    assertEquals(0.16151433915466504, disaster.expected(b, roads), DELTA * 0.16151433915466504);
  }

  @Test
  public void case55() {
    double b = 0.21541046029942096;
    String[] roads = { "1 0 .76 .11 .54 .09 .18 .63 0 .83 .05 .04 .07 .78", "0 1 0 .74 .85 .46 .98 .83 .61 .87 .78 .33 .63 .27", "0 .63 1 0 0 0 .73 0 .18 .60 .15 0 .49 .92", "0 .65 0 1 .32 .87 .60 0 .34 .21 .28 0 .65 .33", ".70 .68 .98 .30 1 .99 .38 .89 0 0 .39 .05 .84 .77", ".11 0 .40 .83 .29 1 .57 .81 .15 .05 .40 .46 .97 0", "0 .72 0 0 .45 .15 1 0 .17 0 .94 .37 .94 .11", "0 .62 .55 .90 0 .93 .56 1 .65 .19 0 0 0 .99", "0 .16 0 .12 .93 .20 .28 .78 1 .97 .54 0 .74 .13", ".82 .16 0 .37 .17 .67 0 0 0 1 .77 .36 .48 .11", "0 .74 .35 0 .45 .85 .78 .19 .69 0 1 .23 0 .05", ".84 .90 .36 0 0 0 0 0 .09 0 .83 1 .78 .70", "0 0 .27 0 .14 .93 .83 .86 .83 0 .20 .75 1 .95", ".50 .98 .16 .62 0 0 .58 .24 .61 0 .32 0 0 1" };
    assertEquals(0.525714695038646, disaster.expected(b, roads), DELTA * 0.525714695038646);
  }

  @Test
  public void case56() {
    double b = 0.5112842463888153;
    String[] roads = { "1 0 0 0 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 .1700 0", "0 .0118 1 .0881 0 0 0 0 0 0", ".4142 0 0 1 0 0 0 0 0 0", ".1497 .5970 0 .2676 1 0 .7906 0 0 .9086", "0 .3762 0 0 .9797 1 0 0 .8707 .8567", ".5095 0 0 0 0 0 1 0 0 0", "0 .6830 0 .4764 0 .6880 .4746 1 0 0", "0 .7178 .0276 0 .9493 .8332 .7163 0 1 .6827", "0 0 0 .1272 0 0 .3251 .2913 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case57() {
    double b = 0.5422188638357884;
    String[] roads = { "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .52 0 0", "0 1 0 0 0 0 0 0 0 .71 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 1 0 0 0 .32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 .17 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 .20 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 .67 0 0", "0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 .95", "0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 .05 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0", "0 0 0 0 0 0 0 0 0 .21 0 0 0 0 0 0 0 0 0 1 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .42 0 0 0 0 1 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .97 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case58() {
    double b = 0.6528254419870323;
    String[] roads = { "1 0 0 .0179 0 .4352 .0075", ".3049 1 0 0 .1150 0 .1285", ".8237 .1509 1 0 0 0 .5193", ".3668 0 .6329 1 0 .3384 0", ".5456 0 0 .0753 1 .5890 .9085", "0 0 .1207 .7736 .6557 1 0", ".7908 .4041 .6860 0 0 0 1" };
    assertEquals(0.013146214816765875, disaster.expected(b, roads), DELTA * 0.013146214816765875);
  }

  @Test
  public void case59() {
    double b = 0.2527521846311086;
    String[] roads = { "1 0 .7449 0 .3222", ".4342 1 .0705 .6142 .1527", ".2012 .3312 1 .0414 .7757", ".7281 .6361 0 1 .6220", ".5030 .2649 .6833 .8193 1" };
    assertEquals(0.14460709826640797, disaster.expected(b, roads), DELTA * 0.14460709826640797);
  }

  @Test
  public void case60() {
    double b = 0.07517045700480884;
    String[] roads = { "1 0 0 0 0 0 0", "0 1 .1935 0 0 0 0", ".4571 .5440 1 .1327 .3522 .3879 0", "0 0 .5809 1 0 0 0", "0 .7024 0 .3589 1 0 0", "0 .9041 0 0 .5643 1 0", "0 0 0 0 0 .6442 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case61() {
    double b = 0.19793340281960825;
    String[] roads = { "1 0 .5982 .8747 .6828 .5444 .1812 .8499", ".2450 1 .7377 .4316 .4050 .1985 .7667 0", ".9042 .8363 1 .4202 .7121 .0848 .2315 0", ".0769 .2997 .3893 1 0 .9655 0 0", ".2940 .5831 0 .1114 1 .0204 0 .7360", ".0451 .3706 .1017 .2383 0 1 0 .0411", ".2840 .1713 .4428 0 0 .8947 1 .3278", ".4596 .9187 .8778 .9894 .1996 .0237 0 1" };
    assertEquals(0.5844114036841006, disaster.expected(b, roads), DELTA * 0.5844114036841006);
  }

  @Test
  public void case62() {
    double b = 0.3517338707431035;
    String[] roads = { "1 0 .9743", ".8399 1 0", "0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case63() {
    double b = 0.7302390881032544;
    String[] roads = { "1 0 .9582", ".5928 1 .1604", ".6700 .5989 1" };
    assertEquals(0.1164237625830856, disaster.expected(b, roads), DELTA * 0.1164237625830856);
  }

  @Test
  public void case64() {
    double b = 0.2681899672431925;
    String[] roads = { "1 0 0 .29 .70 .57 0 0 .91 0 .10 0 .72 0", "0 1 0 0 0 0 .75 0 0 0 0 0 0 0", "0 0 1 0 0 0 0 0 0 0 0 0 .00 .50", "0 .82 0 1 0 0 0 .31 0 0 .27 0 0 0", "0 0 .58 0 1 0 0 .87 0 0 0 .09 0 0", "0 0 0 0 0 1 0 0 .62 0 0 .37 0 0", "0 0 0 0 0 0 1 .29 0 0 0 0 0 0", "0 .66 .54 .01 0 0 0 1 0 .31 0 0 0 .28", ".33 0 0 .59 0 0 .87 .29 1 0 0 0 0 0", "0 0 0 0 .17 0 0 .20 0 1 0 0 0 0", "0 0 0 .54 0 .34 0 0 .42 0 1 0 .09 0", "0 0 .49 0 .38 .38 0 0 0 0 .19 1 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 1 0", ".69 0 0 0 .67 0 0 0 0 .07 .57 0 .72 1" };
    assertEquals(0.17313645776836428, disaster.expected(b, roads), DELTA * 0.17313645776836428);
  }

  @Test
  public void case65() {
    double b = 0.33099374661509173;
    String[] roads = { "1 0 0 0 0 0 0 .7417 .9443", ".6602 1 0 0 .9443 0 .2223 0 0", ".1730 .4364 1 0 0 .0576 0 0 .4932", ".0181 .2015 0 1 .9398 0 0 .4500 0", ".2687 .6103 .9573 0 1 .6072 0 .3133 0", ".1868 .8228 .0018 0 .8189 1 .7634 0 0", "0 .7156 0 0 0 0 1 0 0", ".0012 0 .3221 .9555 0 0 0 1 0", "0 0 .8860 .2472 0 .8238 0 0 1" };
    assertEquals(0.20395298708006088, disaster.expected(b, roads), DELTA * 0.20395298708006088);
  }

  @Test
  public void case66() {
    double b = 0.2219734457908916;
    String[] roads = { "1 0 0 0 .8656 0 0 .1731", ".6068 1 .2107 .3694 0 .1351 .6017 .8801", ".6302 .0442 1 .9319 0 .0415 .4636 0", "0 .2707 0 1 .4370 0 0 .5319", "0 .1593 .4121 .6945 1 0 .1011 .7881", ".8968 .8772 .4548 .3916 .2772 1 .6167 0", ".9479 .8349 .5394 .0083 .4866 .8997 1 .1626", "0 0 .7364 .4772 .4681 .0528 .4199 1" };
    assertEquals(0.09202974674387039, disaster.expected(b, roads), DELTA * 0.09202974674387039);
  }

  @Test
  public void case67() {
    double b = 0.8361868073838215;
    String[] roads = { "1 0 0 0 .23 0 .37 0 0 0 0 0 0", "0 1 0 0 0 0 0 .46 0 0 0 0 0", "0 0 1 0 0 0 0 0 0 .47 0 0 0", "0 0 0 1 0 0 0 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 0 0 0 0 0", "0 0 0 0 0 1 0 0 0 0 0 0 0", "0 0 0 0 0 0 1 0 0 0 0 0 0", "0 0 0 0 0 0 0 1 .61 0 0 0 0", "0 0 0 0 0 0 0 0 1 0 .19 0 0", "0 0 0 0 0 0 0 0 0 1 0 0 0", "0 0 0 0 0 0 .28 0 0 0 1 0 0", "0 0 0 0 0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case68() {
    double b = 0.26906637032499164;
    String[] roads = { "1 0 0 0 0 0 .8296", "0 1 .6043 .6957 .0004 .7876 0", "0 0 1 0 .7905 .1000 0", "0 .9012 .9009 1 0 0 0", "0 0 .3075 .5044 1 .4641 0", "0 0 .3898 .3440 .0867 1 0", "0 0 0 .4329 0 0 1" };
    assertEquals(0.12686501960146462, disaster.expected(b, roads), DELTA * 0.12686501960146462);
  }

  @Test
  public void case69() {
    double b = 0.7609720882611859;
    String[] roads = { "1 0 0 .23 .51 .17 0 .23 0 .43 .58 .65 .31", ".73 1 0 0 .15 .94 .33 .48 .91 .27 .58 .71 0", ".44 .18 1 0 .32 0 .26 0 .71 .18 .29 .92 .19", ".92 .22 0 1 .85 0 .75 0 .63 0 .53 .68 .38", "0 .90 .71 .50 1 .75 .60 0 .44 .97 0 .74 .92", ".33 .39 0 .47 .39 1 .12 .69 .42 .02 .45 .80 0", ".86 .27 .46 .10 .13 .01 1 .65 .38 0 0 0 .62", ".28 .99 .39 0 .65 .57 0 1 .94 .39 0 .77 .90", ".90 .29 .18 .95 .70 .77 .22 .49 1 .79 .26 .79 .51", "0 .49 .98 0 0 .98 .36 .65 .88 1 .81 .16 0", ".89 .04 .71 0 .62 .50 .95 .16 .90 .11 1 .92 .03", "0 .77 0 .70 .72 .43 .65 0 .59 .73 .75 1 .39", "0 0 .20 .43 .71 .86 .77 .78 .47 .79 0 .88 1" };
    assertEquals(0.09743872251290582, disaster.expected(b, roads), DELTA * 0.09743872251290582);
  }

  @Test
  public void case70() {
    double b = 0.9274303381592114;
    String[] roads = { "1 0 0 .11 0 0 0 0 0 0 .51 .95 .68 0 .67", "0 1 0 1 0 0 .39 .16 .21 0 0 .83 0 0 .81", ".57 0 1 .76 0 .47 0 .48 0 0 0 .32 .84 .95 0", ".67 .34 .53 1 0 .29 0 .57 0 .67 0 .69 .24 0 0", ".94 0 .37 .86 1 0 0 .97 0 .24 .09 .66 .46 .29 0", ".36 .83 0 0 0 1 0 .72 0 .06 .80 0 0 .67 0", ".96 .12 0 .13 0 0 1 0 .91 0 0 0 .86 0 .07", ".70 .56 0 .12 0 .24 .47 1 .78 0 0 .71 0 0 .15", "0 .85 .06 .32 .78 .53 .51 0 1 0 0 .72 0 0 .88", ".31 .47 0 0 .39 .32 .81 .26 0 1 .75 0 0 .82 .34", "0 .51 0 .62 .10 .28 .32 0 0 .33 1 0 0 .12 .64", "0 0 .67 0 .02 0 .47 .02 0 0 .99 1 .95 0 0", ".47 0 .63 0 0 .06 .30 .52 .57 0 0 0 1 .69 0", "0 .92 0 0 .76 .92 0 0 .81 0 0 .70 .10 1 0", ".50 .01 .29 0 .32 .68 .02 .08 .99 0 .69 .67 0 0 1" };
    assertEquals(0.06411673863481257, disaster.expected(b, roads), DELTA * 0.06411673863481257);
  }

  @Test
  public void case71() {
    double b = 0.14477311002050317;
    String[] roads = { "1 0 .51 .09 0 0 0 .52 0 .06 .11 .46", "0 1 .22 0 0 0 .46 .83 0 .30 0 .51", "0 0 1 .85 0 0 0 .83 0 0 0 0", ".79 0 0 1 0 .16 0 0 0 0 0 0", "0 0 0 0 1 0 .46 0 0 0 0 .72", ".66 .87 0 0 .72 1 0 0 0 0 0 0", "0 0 .04 0 0 0 1 0 .05 0 .53 0", "0 .30 0 0 .89 .19 0 1 0 0 0 0", ".68 0 .37 0 0 0 .30 0 1 .14 0 .92", "0 .96 0 0 0 .50 0 .57 0 1 0 0", "0 0 .44 .47 .20 .12 0 0 0 0 1 0", "0 .94 0 0 0 0 0 .19 0 0 0 1" };
    assertEquals(0.44248036980200955, disaster.expected(b, roads), DELTA * 0.44248036980200955);
  }

  @Test
  public void case72() {
    double b = 0.4490601082853654;
    String[] roads = { "1 0 0 .2362 0", ".8885 1 0 .1107 .8669", "0 .0137 1 .0999 0", ".1267 0 0 1 .7835", ".4482 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case73() {
    double b = 0.45562586925073256;
    String[] roads = { "1 0 .9659 0 .9438 .5937", ".1040 1 .3555 .2111 .7384 .1504", ".9927 .3418 1 .0558 .9587 .9154", ".1116 .1986 .8727 1 .6709 .3906", "0 .6190 .8022 .7704 1 .2346", ".8110 .0214 .5922 .5925 .4965 1" };
    assertEquals(0.18995838778400614, disaster.expected(b, roads), DELTA * 0.18995838778400614);
  }

  @Test
  public void case74() {
    double b = 0.703545753782502;
    String[] roads = { "1 0", "0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case75() {
    double b = 0.5490436573711872;
    String[] roads = { "1 0 .38 .50 0 0 0 .24 0 0 0 .58 0 0 .78", ".34 1 0 .12 0 0 0 .49 0 0 0 0 .54 .16 0", "0 0 1 .96 0 0 0 .49 0 .33 .62 .40 .98 0 0", "0 0 .46 1 0 0 0 0 0 0 .82 .57 0 0 0", "0 0 0 0 1 0 0 0 .58 0 .17 .24 .04 .35 .07", "0 0 0 0 .28 1 0 0 0 .94 0 0 .60 .52 0", "0 0 .38 0 0 .91 1 0 0 0 .37 .79 0 .98 0", "0 0 .42 .26 0 .89 0 1 0 .40 0 0 0 0 .37", ".91 0 0 .70 0 0 0 .38 1 .65 0 .44 .39 0 0", "0 .18 .03 .97 0 0 .91 .24 .15 1 .23 0 .34 0 .96", "0 .35 0 .19 0 .85 .26 .33 .62 .69 1 .97 0 0 0", "0 0 0 .97 0 0 0 .18 .47 0 0 1 .70 0 0", ".27 .10 0 0 0 0 .15 0 .65 0 .40 .73 1 0 0", ".38 0 0 .41 0 .94 .39 .65 0 .48 .95 0 0 1 0", "0 0 0 .65 0 .06 .52 0 0 .81 0 0 0 .00 1" };
    assertEquals(0.02756568703018086, disaster.expected(b, roads), DELTA * 0.02756568703018086);
  }

  @Test
  public void case76() {
    double b = 0.38031002914053375;
    String[] roads = { "1 0 0 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 0", "0 0 1 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0", "0 0 0 0 1 0 0 0 0", "0 0 0 0 0 1 0 0 0", "0 0 0 0 .8962 0 1 0 0", "0 0 0 0 0 .8340 0 1 0", "0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case77() {
    double b = 0.2857089757656629;
    String[] roads = { "1 0 0 .34 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 1 0 0 0 0 0 0 0 .57 0 0 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 1 0 0 0 0 0 0 0 .40 0 0 0 0", "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 1 .45 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 .55 0 0 1 0 0 0 0 0 0 0 0 0", "0 .48 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 .82 0 0 0", ".45 0 0 0 0 0 0 .43 0 0 0 0 0 0 0 1 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case78() {
    double b = 0.5709198541250895;
    String[] roads = { "1 0 .1728 .6760 .3279 .2535", ".2147 1 .0354 .4704 .3678 0", ".5026 .3603 1 .6233 .9109 .1706", ".7273 .4177 0 1 .6371 .7239", ".9937 .3768 0 .7410 1 .8348", ".6086 0 .9019 .8818 .7718 1" };
    assertEquals(0.07327102250733088, disaster.expected(b, roads), DELTA * 0.07327102250733088);
  }

  @Test
  public void case79() {
    double b = 0.46427996728574766;
    String[] roads = { "1 0 .7475", ".6315 1 .0283", "0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case80() {
    double b = 0.7734802991866496;
    String[] roads = { "1 0 0 0 .0457 0 .1696 0 .3298 0", "0 1 0 0 0 0 .3476 0 0 0", ".9588 0 1 0 .2757 .3443 0 .5294 0 0", "0 0 .6633 1 .7078 .7221 0 0 .3964 0", "0 0 0 0 1 .5475 0 .9475 0 0", "0 0 0 .1669 0 1 0 0 0 0", ".0161 0 .1970 .0852 0 .0151 1 .4776 .9154 .7228", ".3387 0 .4914 .8530 .6999 0 .3172 1 .0625 0", ".3983 0 .8699 0 0 .4346 .6663 .7392 1 .5596", "0 .9141 .7883 .0900 .6895 .4848 0 .8675 .5840 1" };
    assertEquals(0.023003642435031987, disaster.expected(b, roads), DELTA * 0.023003642435031987);
  }

  @Test
  public void case81() {
    double b = 0.17340876607858444;
    String[] roads = { "1 0 0 0 0 .55 .73 0 0 0 .56 0 .06 0 0 .47 0", "0 1 0 0 0 .19 0 0 0 0 0 0 0 .31 .64 0 0", ".89 0 1 0 0 0 0 0 .66 0 0 0 0 0 .13 0 0", "0 0 0 1 0 0 .33 .05 .43 .34 .34 0 .54 0 0 0 .15", "0 .26 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0", "0 .55 0 0 0 1 0 0 0 0 .46 0 0 0 .67 0 0", "0 0 0 0 0 0 1 0 0 .68 0 .71 .95 0 0 .93 0", ".42 0 0 0 0 .05 0 1 0 0 0 0 .04 0 0 0 .09", "0 0 0 .20 .68 .61 0 0 1 .25 .50 .98 0 0 0 0 0", "0 0 0 0 0 .95 0 0 0 1 0 .47 0 .84 .71 0 0", "0 0 0 0 .78 .43 .43 .51 .41 0 1 .15 0 0 1 0 .89", "0 0 0 .62 .01 0 0 0 .33 0 0 1 .49 .10 0 0 .08", "0 0 0 .28 0 0 0 0 .08 0 .24 0 1 0 0 .57 .79", "0 0 0 0 0 0 0 0 0 .09 .05 0 0 1 0 0 0", ".75 0 0 0 0 0 0 0 0 0 .29 .44 0 0 1 .95 0", ".08 .89 .20 0 0 0 0 0 0 0 0 0 0 0 .59 1 .39", "0 0 0 .78 0 0 .57 .61 0 0 .72 .46 .72 0 0 0 1" };
    assertEquals(0.36749257280840586, disaster.expected(b, roads), DELTA * 0.36749257280840586);
  }

  @Test
  public void case82() {
    double b = 0.43790689814671446;
    String[] roads = { "1 0 0 0 0 0 0 0 0", "0 1 0 0 0 .2655 0 0 0", "0 0 1 0 0 0 0 0 0", "0 .1402 0 1 0 0 0 0 0", "0 0 0 0 1 0 0 0 .9855", ".7717 0 0 .4810 0 1 0 0 0", "0 0 0 0 0 0 1 0 .5470", "0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case83() {
    double b = 0.042475310025799774;
    String[] roads = { "1 0 0 0 0 0 0 0 0", "0 1 0 0 0 0 0 0 0", "0 0 1 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0", "0 0 0 0 1 0 0 .9022 0", "0 .9579 0 0 0 1 0 0 0", "0 0 0 0 0 0 1 0 0", "0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case84() {
    double b = 0.8615237019751689;
    String[] roads = { "1 0 .6285 0 .3579 .2298 .8360 .7945 .5760", "0 1 0 .3918 .3112 .0530 0 .5014 0", ".6874 .1390 1 .6221 .0954 .0201 .9128 .1990 .4239", "0 0 .9412 1 .0166 .8903 .0232 .4714 .0656", ".0325 .2193 .9838 0 1 .7902 .6807 0 0", ".9684 .2900 .7533 .4915 .7334 1 .2732 0 0", ".3004 .8028 .9356 .2904 .5789 0 1 .6524 .9512", ".0642 .8372 0 .9889 .5125 .6620 .0251 1 .6676", ".6231 0 .4362 .0031 .9579 0 .3417 .0679 1" };
    assertEquals(0.11540978668226172, disaster.expected(b, roads), DELTA * 0.11540978668226172);
  }

  @Test
  public void case85() {
    double b = 0.44924623375191153;
    String[] roads = { "1 0 0 0 0", "0 1 0 .3386 0", "0 0 1 .2701 0", "0 0 0 1 0", "0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case86() {
    double b = 0.6986260446712396;
    String[] roads = { "1 0 0 0 0 0 0 0 0 0 0 0 0", "0 1 0 0 0 .53 .39 0 .04 .87 0 .07 .85", "0 .02 1 0 0 .94 0 0 0 0 .41 0 0", "0 0 0 1 0 0 .71 .32 0 0 .06 0 0", "0 0 0 0 1 .02 0 0 0 0 0 0 0", "0 0 0 0 0 1 0 0 0 0 0 .02 0", "0 .14 0 0 .07 0 1 0 0 .23 0 .34 0", "0 0 0 .30 0 .42 0 1 0 0 .10 0 0", "0 0 0 0 0 0 .68 0 1 0 0 0 0", "0 .68 0 .96 0 0 0 .32 0 1 .81 0 0", "0 .92 0 0 0 .66 0 0 0 0 1 .98 0", ".81 0 0 0 0 0 0 0 0 0 0 1 0", "0 .62 0 .43 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case87() {
    double b = 0.7910942127967158;
    String[] roads = { "1 0 .1586 .6620 .0108 0 .0928", ".5634 1 .7519 .7260 .6095 .9934 0", ".2072 .1107 1 .3383 .9478 .7061 0", ".9270 0 .8985 1 0 0 .8668", ".1212 .4565 .6695 0 1 .1715 .4895", ".3834 .1050 .8849 .6738 .1515 1 0", ".4276 .7736 0 0 .8437 .6580 1" };
    assertEquals(0.05918190554951103, disaster.expected(b, roads), DELTA * 0.05918190554951103);
  }

  @Test
  public void case88() {
    double b = 0.45374598585487014;
    String[] roads = { "1 0 .25 0 0 .71 0 0 0 0 0 0 0", "0 1 0 0 0 0 .87 0 0 0 0 0 0", "0 0 1 0 0 0 0 .31 0 0 0 0 .10", ".40 0 .45 1 0 0 0 0 0 0 .63 0 0", ".78 .08 0 0 1 .58 .94 0 0 .66 0 0 0", "0 0 0 0 .72 1 0 0 0 0 0 0 0", "0 .47 0 0 0 0 1 .55 0 0 .04 .85 0", ".75 .17 0 0 0 0 0 1 .61 0 0 0 0", "0 .76 0 0 0 .24 .18 0 1 0 0 0 0", "0 0 0 0 0 0 0 .57 0 1 0 0 0", "0 0 .39 0 0 0 0 .96 .00 .88 1 0 0", "0 0 0 0 .91 0 0 0 0 0 .89 1 .66", ".82 0 .58 .63 0 0 0 0 .18 0 .04 0 1" };
    assertEquals(0.04077497508290391, disaster.expected(b, roads), DELTA * 0.04077497508290391);
  }

  @Test
  public void case89() {
    double b = 0.7511531805680572;
    String[] roads = { "1 0 0 0 0 0 0 .45 0 0 0 .31 0 0 0 .38 0 0", "0 1 0 0 0 0 0 0 0 .48 0 0 0 0 0 .36 0 0", "0 0 1 .66 0 .58 0 .85 0 0 0 0 0 0 0 0 0 0", "0 0 0 1 0 0 0 0 0 0 0 .11 0 0 0 0 0 0", "0 0 0 0 1 0 0 0 0 0 0 0 0 0 .42 0 0 0", "0 0 0 0 .87 1 0 0 0 0 0 0 0 0 0 0 0 .08", "0 0 .64 0 0 0 1 0 .18 0 0 0 0 0 0 0 .22 .95", "0 0 .49 0 0 0 0 1 0 0 0 0 .25 0 .15 0 0 0", "0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 .51 0", "0 0 0 0 .21 0 0 0 .80 1 0 0 0 0 0 0 0 0", "0 0 .80 0 0 0 0 .56 .70 0 1 0 0 0 0 .64 0 0", "0 0 0 0 0 0 0 0 0 0 0 1 0 0 .56 0 .68 0", "0 0 .24 0 0 0 0 0 0 0 .50 .35 1 .57 0 0 0 0", "0 0 0 0 0 0 .27 0 0 0 0 .64 0 1 0 .60 0 0", "0 .71 0 0 0 .94 .61 0 0 0 0 .58 0 0 1 0 0 0", "0 0 0 0 0 0 0 .64 0 0 0 0 0 0 0 1 0 0", ".03 0 0 0 0 0 0 0 .97 0 0 0 0 .18 .60 .99 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.017306265334813664, disaster.expected(b, roads), DELTA * 0.017306265334813664);
  }

  @Test
  public void case90() {
    double b = 0.5761766891634059;
    String[] roads = { "1 0 0 .72 0 0 0 0 .15 .61 0", ".69 1 0 .23 0 0 .19 0 0 0 0", "0 .72 1 0 0 .52 0 .66 0 0 0", "0 0 0 1 0 0 0 0 0 0 0", "0 0 0 .52 1 0 0 0 0 0 .98", "0 0 .45 .02 0 1 0 0 0 0 0", "0 0 0 0 0 0 1 0 0 0 .10", "0 0 0 0 .49 0 .08 1 0 .92 .68", "0 0 0 0 0 0 0 0 1 0 .91", ".97 0 0 .41 0 0 0 0 0 1 0", ".53 .28 0 0 .43 .99 .22 0 .44 0 1" };
    assertEquals(0.006996144934035658, disaster.expected(b, roads), DELTA * 0.006996144934035658);
  }

  @Test
  public void case91() {
    double b = 0.9283839485225726;
    String[] roads = { "1 0 0 0 0 0 .89 0 .09 0 .77 .48 .81", "0 1 0 0 .31 .90 0 0 0 0 .82 .88 .71", "0 0 1 0 .03 0 .61 0 .61 .28 .84 .88 0", "0 0 .44 1 .92 .25 0 0 .92 .95 .42 0 0", ".77 0 0 .26 1 0 0 0 0 0 .30 0 0", ".44 0 0 0 .39 1 0 .50 .25 0 0 0 0", "0 0 .08 .49 .03 .53 1 0 0 0 0 0 0", ".00 0 0 .31 0 .93 0 1 0 0 0 0 0", "0 .02 .31 0 0 .64 0 .22 1 .85 0 .85 0", "0 .70 .45 0 0 0 0 0 0 1 .85 .06 0", "0 .80 .93 0 .99 .02 0 0 0 0 1 0 .35", ".70 0 0 .35 0 .19 .39 .21 .57 0 .94 1 .54", ".79 0 .27 0 .21 0 .23 0 0 0 .16 .93 1" };
    assertEquals(0.09829904901359937, disaster.expected(b, roads), DELTA * 0.09829904901359937);
  }

  @Test
  public void case92() {
    double b = 0.3011572357781898;
    String[] roads = { "1 0 0 0 0 0 0", "0 1 .6919 0 0 0 0", "0 0 1 .9630 0 0 0", "0 0 .2837 1 0 0 0", "0 0 0 0 1 0 0", ".8841 0 0 0 0 1 .0459", ".1443 0 0 .6025 0 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case93() {
    double b = 0.7270478002284111;
    String[] roads = { "1 0 0 .3014 0", "0 1 0 0 0", ".3891 .4908 1 0 0", "0 0 .9622 1 0", ".1897 0 .6660 0 1" };
    assertEquals(0.02064780968988052, disaster.expected(b, roads), DELTA * 0.02064780968988052);
  }

  @Test
  public void case94() {
    double b = 0.8662928314335264;
    String[] roads = { "1 0 .1161 .3195 .9022 .3569 .0819", ".6283 1 .5432 .9870 .0583 .6476 .7267", ".3010 .0280 1 .4338 .1183 .6731 .7930", ".2254 .4940 .3818 1 .8419 .6206 .4383", ".0545 .1022 .8415 .2797 1 0 .9033", ".4054 .6833 .7502 .9753 .4459 1 .6762", ".1993 .1349 .5724 .8052 .1781 .7270 1" };
    assertEquals(0.04170512960961413, disaster.expected(b, roads), DELTA * 0.04170512960961413);
  }

  @Test
  public void case95() {
    double b = 0.8251017107538617;
    String[] roads = { "1 0 0 0 0 0 .03 .35 .29 0 .50", "0 1 0 .49 .86 .66 0 0 .83 .35 .84", ".83 0 1 0 .81 0 0 0 .68 .52 0", ".06 0 0 1 .59 .14 .75 0 .11 0 .40", ".71 .37 .28 .38 1 .68 0 .18 0 0 0", "0 .60 0 0 .49 1 0 .53 .13 0 .47", "0 0 0 .84 .64 .45 1 .77 .38 .23 .38", "0 .80 0 0 0 .80 0 1 .63 .44 .87", "0 0 .20 0 .27 0 .41 0 1 .11 .98", ".04 .30 .74 .92 0 .63 0 0 0 1 .94", ".60 0 .56 0 .24 0 0 .39 0 0 1" };
    assertEquals(0.05027438549797885, disaster.expected(b, roads), DELTA * 0.05027438549797885);
  }

  @Test
  public void case96() {
    double b = 0.6282654152564556;
    String[] roads = { "1 0", "0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case97() {
    double b = 0.9190097792904205;
    String[] roads = { "1 0 .4266 .1481", ".7828 1 0 .6300", "0 0 1 .6680", ".6312 .0530 0 1" };
    assertEquals(0.001733312421174585, disaster.expected(b, roads), DELTA * 0.001733312421174585);
  }

  @Test
  public void case98() {
    double b = 0.3788231016375791;
    String[] roads = { "1 0 .3163 .2724", ".8352 1 .1193 .6286", ".9765 0 1 .8920", ".2047 .9530 .5250 1" };
    assertEquals(0.1015219089812482, disaster.expected(b, roads), DELTA * 0.1015219089812482);
  }

  @Test
  public void case99() {
    double b = 0.2518264264526773;
    String[] roads = { "1 0 0 0", ".3166 1 .2182 .5666", ".8727 0 1 .7834", ".1895 .3133 .0475 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case100() {
    double b = 0.23719560705400208;
    String[] roads = { "1 0 0 .03 .72 0 0 0 0 0 .99 0 0 0 0 0", "0 1 0 0 .22 .43 0 0 0 .60 0 0 0 0 0 0", ".01 .80 1 0 .19 0 0 0 0 0 0 0 0 0 0 .68", "0 0 0 1 .97 .66 0 0 0 0 0 0 0 .95 0 .66", "0 0 .68 0 1 0 .36 0 .72 0 0 0 0 0 0 .35", "0 0 0 0 0 1 0 .14 .30 0 0 0 0 0 0 0", "0 .47 0 0 .28 0 1 0 .43 0 0 0 0 .16 0 .18", "0 .79 0 .41 .92 .50 .99 1 0 0 0 0 0 .42 .19 0", "0 0 0 0 0 0 .90 0 1 0 0 0 0 0 0 0", "0 .28 0 0 .10 .09 0 .42 .71 1 0 0 0 0 .21 0", "0 0 0 .90 0 0 0 0 0 0 1 0 0 0 .30 0", "0 0 .22 0 .77 0 0 .76 .21 .65 0 1 .56 0 .35 0", "0 0 .96 0 0 0 0 0 .42 0 .11 0 1 0 0 0", ".01 0 0 0 0 0 .60 .71 0 0 0 .79 0 1 .83 0", "0 0 .78 .94 0 0 .38 .11 0 .31 0 0 0 .35 1 0", "0 0 0 0 .62 0 .82 0 0 0 0 0 .69 0 0 1" };
    assertEquals(0.17416005512528315, disaster.expected(b, roads), DELTA * 0.17416005512528315);
  }

  @Test
  public void case101() {
    double b = 0.7614714007206613;
    String[] roads = { "1 0", "0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case102() {
    double b = 0.4633999961440479;
    String[] roads = { "1 0 0", "0 1 0", ".5580 0 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case103() {
    double b = 0.7688737297005007;
    String[] roads = { "1 0 0 1 .59 .72 .43 .87 .81 .57 .90", ".72 1 .41 0 .94 .64 .86 .07 .60 .58 .18", ".40 .46 1 0 .54 .04 0 .86 .35 .02 .51", ".26 .84 0 1 .46 .66 0 .13 .09 .28 .38", ".76 .36 .73 .24 1 .83 .57 .05 .51 .59 .08", ".57 .93 .92 .65 .03 1 .59 .47 .58 .67 .79", ".16 0 0 .62 .35 .04 1 0 .74 .16 0", ".96 0 .13 .96 .73 .12 .85 1 .28 .91 .48", ".91 .59 .64 0 0 0 .82 .35 1 .65 .35", ".02 .29 .70 .59 .13 .82 .68 .63 .96 1 .47", ".29 .37 .38 .97 .79 .41 .54 .17 .91 .39 1" };
    assertEquals(0.16185290202712388, disaster.expected(b, roads), DELTA * 0.16185290202712388);
  }

  @Test
  public void case104() {
    double b = 0.9377095421052769;
    String[] roads = { "1 0 0 .02 .92 0 .95 .82 .31 0 0", ".50 1 .66 .98 0 0 .09 .84 0 .95 .57", ".21 .25 1 0 0 .17 0 .04 0 .78 .84", "0 .27 .68 1 .08 .91 0 .76 0 .19 .76", ".76 .46 .48 .84 1 .45 .13 .25 0 0 .67", "0 .34 0 .63 .21 1 0 .49 0 0 0", "0 .22 .04 0 0 0 1 0 0 .85 0", "0 0 .42 .94 .13 .74 .94 1 .64 0 .41", "0 0 0 0 0 .11 0 .97 1 .16 .42", ".27 .67 0 .69 0 0 .27 0 0 1 .83", ".99 0 .73 0 .02 .85 .48 .05 .09 .28 1" };
    assertEquals(0.06686110515153249, disaster.expected(b, roads), DELTA * 0.06686110515153249);
  }

  @Test
  public void case105() {
    double b = 0.9183418530984014;
    String[] roads = { "1 0 0 0", "0 1 0 0", "0 0 1 0", "0 0 .4694 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case106() {
    double b = 0.48157627231180344;
    String[] roads = { "1 0 0 .49 .65 .21 .98 0 0 0 .07 0 0 .51 0 0 .69", ".29 1 0 0 0 0 0 0 .43 0 .47 0 .80 0 0 .73 0", ".90 0 1 .12 0 .99 .90 .30 0 .73 0 0 0 0 .44 0 0", ".86 0 0 1 .70 0 0 .66 .53 0 0 0 0 0 .49 0 0", "0 0 0 0 1 0 .21 .91 0 0 0 0 0 0 0 0 .44", ".82 0 0 0 .92 1 0 .20 0 .67 0 0 0 0 .76 0 .35", ".56 0 0 0 0 0 1 0 .68 .60 0 .87 0 .35 .75 .64 .70", "0 .15 0 0 0 0 .41 1 0 0 0 .80 .57 .32 0 .61 0", "0 0 0 0 0 0 0 0 1 0 0 0 .99 .83 0 0 0", ".70 0 0 0 .42 0 0 .73 0 1 0 0 0 0 0 0 .65", "0 .76 0 0 0 0 0 0 .29 .54 1 0 0 0 0 0 0", "0 0 0 0 .56 0 0 .56 0 .82 0 1 0 .20 0 .18 .56", "0 0 .21 0 0 .39 .97 0 0 .62 0 0 1 0 0 0 .59", ".07 .59 0 0 0 0 .46 0 0 0 0 0 0 1 0 0 0", "0 0 .49 0 0 0 .79 0 0 0 0 0 .03 0 1 .70 0", ".40 .57 .42 0 .77 0 0 .61 0 .44 0 0 .26 0 .51 1 0", "0 0 0 .99 .36 0 0 0 0 0 0 0 0 0 0 0 1" };
    assertEquals(0.09256639153707155, disaster.expected(b, roads), DELTA * 0.09256639153707155);
  }

  @Test
  public void case107() {
    double b = 0.15093491471694437;
    String[] roads = { "1 0 .75 .90 0 .29 0 0 .96 .17 0 .05 .53", ".14 1 .20 .45 .16 .71 .30 0 0 .17 .74 .45 .42", ".65 .61 1 .55 .84 .62 .01 .30 .75 .43 0 0 0", "0 .87 .36 1 0 0 .52 .41 0 .36 .44 .79 .39", ".61 .03 .24 .28 1 .81 .64 .41 .53 0 .42 .81 .81", ".82 .71 0 .71 .61 1 .27 .76 .12 .59 .29 .44 0", ".01 .19 .65 .84 .50 .21 1 .46 .22 .87 .28 .52 .83", ".27 .89 0 .91 .23 .70 0 1 .72 .61 .99 .44 .14", ".48 0 .38 .26 .21 0 .18 .60 1 .69 .87 0 .37", "0 0 .43 0 0 .16 .79 .80 .29 1 .72 0 .95", ".46 .63 0 .07 .03 .50 .62 .87 .27 0 1 .43 .68", ".82 .72 0 .80 0 .58 .74 .40 .73 0 .37 1 0", ".03 .80 .94 0 .98 .74 .64 .41 .05 .86 .72 .55 1" };
    assertEquals(0.768543184441721, disaster.expected(b, roads), DELTA * 0.768543184441721);
  }

  @Test
  public void case108() {
    double b = 0.04695763615570305;
    String[] roads = { "1 0", ".3931 1" };
    assertEquals(0.0, disaster.expected(b, roads), DELTA);
  }

  @Test
  public void case109() {
    double b = 0.01;
    String[] roads = { "1 1", ".0930 1" };
    assertEquals(25.0, disaster.expected(b, roads), DELTA * 25.0);
  }

}
