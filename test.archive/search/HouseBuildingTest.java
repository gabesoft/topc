package topc.test.search;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.search.*;

public class HouseBuildingTest {
    HouseBuilding housebuilding = new HouseBuilding();

    @Test
    public void case1() {
        String[] area = { "10", "31" };
        assertEquals(2, housebuilding.getMinimum(area));
    }

    @Test
    public void case2() {
        String[] area = { "54454", "61551" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case3() {
        String[] area = { "989" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case4() {
        String[] area = { "90" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case5() {
        String[] area = { "5781252", "2471255", "0000291", "1212489" };
        assertEquals(53, housebuilding.getMinimum(area));
    }

    @Test
    public void case6() {
        String[] area = { "0" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case7() {
        String[] area = { "9" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case8() {
        String[] area = { "8427767619778260529688926613519233225632053", "4891046783796656370142238906277172742764046", "9914201466380550835775077597111361517389627", "0554930646454707386315445739697968856813543", "8660845882224247767839555626695881919952384", "8004469420543915372388952159961568351840961", "0286356899410495787751549526952193569185276", "0368073086000576876194330784207489427911548", "6232222689848399090492535951952339695711488", "4103240138536363543039935124416419640003735", "3590575470619284675937181662095705895879321", "5183541118660701179516218069560173093277788", "8779424107402621151276293402417480535234021", "7936445765482381468471951376669226135805805", "5157850517432027819660935248536210253892940", "5277563891814484987305490172976408584387567", "3526072190908313790010810026330974420693993", "2298433241363018549547941269489149329261840", "9478960313455598457994887222182887811650644", "9098918580274978472424427429319669316251823", "8727517098299678737801009776405915791889501", "9458557670068429060969049180919857934718864", "0821944437048606416041878795609171917639876", "0115544069453441059663376974914442147825732", "6005279313510398749949389564730061481674472", "6570825857132589805397798569099690230015990", "5405200442584747644760116688690463624683051", "3657424054930699014566409584129004864649870", "6095373057434361519702584505367541121427880", "5821700652724088087866713209047621441116665", "5906878608083793579493065590330684141646913", "2984377605916651122850266331927813200558844", "2599124242444565188427658415789967836249436", "3237235185334617831252688765129453794013628", "4320699414131068223644951147945535111294396", "0687351073767946098538575638293800868487929", "6046345408476856567609055519836848265325498", "5847477602830410016556323195389259068768677", "2255829775099967150486890916118667509747372", "0813229600218872258696323491716825625220060", "7964795471948076121470843733014689564361047", "8909347255562849555984430589320191627635850" };
        assertEquals(3587, housebuilding.getMinimum(area));
    }

    @Test
    public void case9() {
        String[] area = { "5115307784486194059621489738352249846", "6590437464919347013936831318719407272" };
        assertEquals(145, housebuilding.getMinimum(area));
    }

    @Test
    public void case10() {
        String[] area = { "285461731253009280012564096602697455698854", "719612717614233975639798334033877085631609", "006172107948061956745281561053301619023155", "790556736236773520841426460263020993610670", "468006515926635513743103489889258880870333", "655269835440832507755693921212417662297537", "798448465842130424150648060250651989221695", "706554750804412758355520934499279023907399", "253801440431356926157293120981250223976667", "490508688522183942393626151990548845363434", "218335416951685182546053597956062831476645", "398625659224273140909837741502056031734017", "455886407562261625571878340125218105644897", "524770836698256974827898025075467176794500", "259950217308120269834783138393503596852794", "959936302292542472061145929384940681778893", "089501980013584496774948391332978976275959", "822493960314747461137564286777045730155466", "055532049174357055240471637904605833384154", "222217327660690589331477844066837768548558", "759884534611561784907592141958616820725983", "100256601437208068639243151376404653004245", "892429513658883931439683057111506110595492", "575037524143246287476427713476751326018479", "752812109102523383057946079635847984476029", "265501166039824970073414786207588839633961", "298733433946152023515717704529921730331356", "068218665776617267457533981774874042867249", "146886985003501188047444078866778529525874", "313216501362387835774466074355285092435198", "711011516211989473344058091485602631573010", "010742080016792684350156929170037410950200", "911320432944140587410226191833250105043102", "141358136697620376777470743970380871211248" };
        assertEquals(2792, housebuilding.getMinimum(area));
    }

    @Test
    public void case11() {
        String[] area = { "51032105477235733094318169435930073009641549641", "19132625110782118115548718875922358405841087523", "07671865353050236734088248661491939126144285756", "63511951527402086884695734249785672087885267272", "13958281178928449354363814117249911639617313058", "33323025271177624491855188551082012949978494763", "07497786535517474202482992312150023204669403697", "52572088457329092578297181596669424716883094248", "56858075849845762135296082366154796488031015088", "52837491551818817041188172912764434774550661361", "81792595099253144828202975479246521602288772288", "57627660992887583197537907483942010574252505766", "81437426985186921546787216684372040434054433194", "08736381469052815323755940074268862865990808047", "32895539528656697007595368523524258039402015277", "16889115642831862791279636534454137328287234255", "67961141664391384265142341497018827258203622018", "00542022796977855520145321061392874715672638907", "99169516629144971411238377874757858244720193851", "12596274461406355097333277542197179144630574273", "37623735915863357726763647874246779008036908728", "56130117721463008346273513412734400112809293812", "61666197342590941727400973494254829040246897856", "35765969689005205180730104891419967717699523065", "48611449290262010469031714057350373526612381297", "82003698628271935450421045419679114070269361524", "90107523043307305511237797681397253161178353911", "39119453366410459517964875419287633468520145659", "33942672135700995569709739696039393825882495998", "46891390960891336796828678930779225417004095937", "80287271227153539791711678383850498452203269631", "08648974652541295948165470217855330597637598950", "09656279092107510827230746582952717557207468605", "59205010355357906017835396971746281819184632237", "18935633162484948634772086693599513579455350015", "76250026740316873785279144455675539870766200196", "96951199180521504820645527485624388750611728694", "04148125823420934563677601824337593810120127229", "59578238214731051056533031719735606189791637474", "36415189108289397165351436442495201881906546955", "50837511632321614629241842931687288033352646136", "87278203561882437973404167116287442146083646424", "93048211488492060116218582795317840819723368260", "74575020203594025973879036467392715638280923309", "27917935150563461299405773761142064962858437481", "16859311443404820679573787457307594481251653644", "77194280427590384560330305195898781807495959446" };
        assertEquals(4365, housebuilding.getMinimum(area));
    }

    @Test
    public void case12() {
        String[] area = { "650378998879855161633917147717642190", "621187792606578195353600899309762130", "648217092880317639625149668039698818", "274632307130136524887575964494282844", "715892257281133185477366713374192648", "339400106577046265024471659217355197", "473497834585111391881995832265623606", "670874834119382926170486937226338069", "858321489490103758955621502350837020", "507333363428288682919442221009132742", "821548684817841858769444395631729689", "370988286945893070628601878211060911", "593934667309487944863609030832495452", "903183439077142647732417998977711190", "913395822119449077216105462251278965", "824664071773528296880231482472036366", "908195043599851854338991758652789452", "476104468375469385666457654111532026", "492654750393631386839091117149961684", "430900368224548527204900002142926026", "535202213442410101375353934623295537", "861496926242298704353700203797260955", "920271924113281117906630416983537649", "618573065460317663555353675575244415", "560036453601887685588579545484136427", "880375545552714665911630053386755399", "073015834716356020968399093522810952", "298161690892743787248439668907700792", "283334391005904391893396806414387928", "489264855118856464061153541209783002", "312679154864001632777187401790374884", "066507792993701145800683809133838562", "666870420530936608105901358181888773", "335832149996993244647730819425420470", "915631546941625887487118853939279818", "275982874783521429607706389033918359", "204274792361910525990334731249314528", "737642308002361329936532276232769888", "191748069157492789620649454843335412", "384882033570718697758461461877789004", "077397286576770551234685437299957031", "818756703498792403898235753007716963", "049711967012489971668778864067482443", "152376091801731589835272970953385613", "363764486294663577406226797770150280", "892334712152366850627300974256131808", "400835228992788576688373957735013984", "338199838178232122611978843939761005", "757089513201983749914286091299672039", "005824513795571286830692063896476179" };
        assertEquals(3673, housebuilding.getMinimum(area));
    }

    @Test
    public void case13() {
        String[] area = { "2216813915362383562473658686621951", "4349134776921366329525475320608426", "6490616030699525026652601505545282" };
        assertEquals(177, housebuilding.getMinimum(area));
    }

    @Test
    public void case14() {
        String[] area = { "4004741993458931119666564311", "1123799973711144079035633501", "4655463596953244241502267503", "5956301772390903208479705616", "7732951653119203365251165381", "4032119618514612858544186851", "4012775326703579256650427567", "2117129236604939297165491155", "0695557400482771098944969031", "4539639009445494959421412942", "1565904227888035042186116627", "9524947884814234091402767618", "2457759239450741177885527210", "9749448744333366011007766826", "0151049208475655402027908425", "6978120197980924113598604888", "9225733930892383110797309645", "7182200695632834119827533731", "3007162615278615224912253766", "2226317128020511075986452663", "9939937216951978615748964874", "3586670627669215591554211086", "2273632828709894310735380796", "2984043853283085431090730651", "8124253962025444629977582308", "5971155442938136613396587859", "0031014451979032732281953837", "3075913251740583913339795099", "9862529243939856909719346473", "7396333736792860383083528675", "9696313176463277000798792715", "0256266180128200548265707083", "5362789183184796071672036269", "9711008517937405743787894482", "8622369633781916374092312086" };
        assertEquals(1985, housebuilding.getMinimum(area));
    }

    @Test
    public void case15() {
        String[] area = { "97734091719799002579398132223", "84518831078480763314970464155", "96886132358943640896061845309", "45642377018563651792017819407", "76573584794950191640812077983", "21180846848711441372823084112", "45603989356884712348187889319", "50640151880935050113662197625", "18759499787462223616189895029", "44168799813601745912263112023", "95121796940887146799075444808", "46655577964024607491844406826", "40130136445611971354079661965", "95321044294244210123407447666", "71179638519808059919063614194", "90088251588047041412074062273", "73330145669611180806425574409", "68781768153601728019614570925", "03717156068070397127406516228", "63260538570648492694215019968", "87352657212085503513004134151", "74421721738710761591355774542", "74747481858837405994710634932", "92785738616644050314343136144", "29695305025771003987863914531", "90553241101091575735805492871", "74824054745863635372364412776", "23102299900702953816662534500", "49044303361929250331876715156", "00753352450983346137190382567", "44468982672979828829147148122", "89617707002841320901082381880", "16269813249961383380144215671", "82681827823373509397137084736", "95599306127447769594602462672", "65689178534280927038809342874", "30947840622335327824470171876", "40396559415771724154484948615", "43453563678391850688361837502", "32982351262287115062902584540", "20430726164439552230604212532", "35478309728453521869606452079", "85390557979111685813302583967", "15248444086322164122756653207", "11139871874152334896168096307", "13288214683172076583571849325" };
        assertEquals(2664, housebuilding.getMinimum(area));
    }

    @Test
    public void case16() {
        String[] area = { "7687579482505973968747", "0398084762316049945704", "6968492964240957859804", "8626616676259658085643", "5558561980237188591575", "7214028841253266626405", "8318396590417424033351", "6539048592389039963632", "4741099855224955716254", "1771025428863177932476", "3808238921841591100131", "7561994698873386871837", "0504140435489317127853", "6211655340994944780521", "3507300267405465725273", "5778739729558289927261", "0199475774811203556225", "1647309144428246256608", "2894986926625127262767", "9497858275923271374744", "0580964250260099941560", "7671457638803532140119", "1932640863087277135445", "1202214138194128673576", "9825516379294648519986", "5026457581755704926750", "2984126900482644302969", "0736437608431816411331", "1664383909477749770197", "6817712360995341639065", "3926463508772698764887", "1900355189286405498587", "1296878884440074924295" };
        assertEquals(1425, housebuilding.getMinimum(area));
    }

    @Test
    public void case17() {
        String[] area = { "7343675710185", "8223800817497", "6422600042149", "3945162017704", "7698194706249", "7405397138894", "1630617214889", "4010826402056", "8540323279441", "9760238634410", "1150071522495", "1399046481949", "2675081412470", "5712066327278", "7587752847859", "5966341368523", "1351285957458", "2296420895121", "3530300736659", "5593570579784" };
        assertEquals(518, housebuilding.getMinimum(area));
    }

    @Test
    public void case18() {
        String[] area = { "2349231587636913863005117961138065817118", "3188960877423954745288026516919550907791", "7975056859997675551563444259541278934324" };
        assertEquals(237, housebuilding.getMinimum(area));
    }

    @Test
    public void case19() {
        String[] area = { "815784649460907572", "733002041711844222" };
        assertEquals(71, housebuilding.getMinimum(area));
    }

    @Test
    public void case20() {
        String[] area = { "917541288273665944237007477187270013780308975", "214545713083595802806715841511275493844999488", "008663556778756541628487435803550385834840904", "488184700267016163320734365090577752017666837", "743673687263644485878759826011440193768275690", "069955944970511957533351037135917773017991668", "169559728829375872307276642927625430325960350", "765172144570735552215289659585147662583587757", "815150571336433147386103694700653076152644659", "762250740543801945541630747769764937393353245", "833231899286319212518356071202457682216132038", "056779063626237492535735484209339512501820397", "203677163026254195909803444555770224395225338", "073606956111007274361866457314855915237002298", "283654963561230981792887756681744929249979477", "842658201581111606405946214469782622424269610", "670978022564306518322089352497159161939832899", "778624350525538968891512110755686753549843225", "385010064263799190790022045845324775036906082", "615376959466665405139204769869123771880180841", "266541914251601681737134446490644881503034955", "666663343584435125443533114408864660561432854", "638522037992536924791517608274672744059346206", "514015593954328814257902685006363590530582987", "715646874497414719344018958981399417746880276", "841009390169205181122360866458545243088051366", "291237913544873545641238654620017741704647193", "862154688943735497211679183992439769379101992", "626660823548184265862984259397241606388316226", "682966556420245792942942974281228880785788839" };
        assertEquals(2567, housebuilding.getMinimum(area));
    }

    @Test
    public void case21() {
        String[] area = { "3206930513268860278435817478054590", "9555515948372977958954449351867548", "8659643914187612346868835964771740", "1306745760890527971024241159193125", "8939893376085856853627754284763091", "4297748996897309864683830117396812", "8852181304071652118892242834901447", "7800679731308519663364202202128237", "1309497605026231052834717900852627", "5102186944281385083368466407058375", "2673505082368961474882232930485199", "7028459128744859812458565523217001", "9536154156518828008588509561765924", "0556500364606586325235638670271826", "2419960677810480522708344957332625", "4298188489134582059624611037475021", "8489015243372342914341919503737623", "1546759526982944963059747470388941", "8441286692406955648826086466316346", "5342705926907107529178802245701205", "3645237405818711420104711071590273", "1585722630481929386765158707344360", "6561891039487725593192616170597084", "9321601279714800360427407410543434", "8652777624140982456198584092944075", "3323886747546048979905648124284711", "2193130495246852088934886697526173" };
        assertEquals(1812, housebuilding.getMinimum(area));
    }

    @Test
    public void case22() {
        String[] area = { "68772507055520600", "70575525470623518", "72418803907979096" };
        assertEquals(108, housebuilding.getMinimum(area));
    }

    @Test
    public void case23() {
        String[] area = { "9754065019319233054879422439394604853624208340", "9768085471263604128679084803683678946788471744", "3407218152410421132384203852435514993176346447", "0424910661278481591049788722888198755160891471", "0773681122404462653987955872634929820833879008", "3879126805266411567892855533727642770814896150", "8523616978290486174649696046182890110979750096", "6757142198247370873652100337331912291126190062", "6703334501558906674991125427231634528063128622", "2736517556941457215466436125360423011044234871", "7530897757032854323735493659738648592066534836", "6180553619801426647470519168686666799498833980", "3865657797746971516967661762936521890803814173", "4807906873970709547049927774404650378162919989", "1268246157834479910767636716064653959802885713", "1545806776596731500476853284436035588139636364", "1294473170836851275970939695166737761071033041", "3872344761776052031208457374493661738758385612", "1685182256509026301560112617291725805647504884", "2069286642615915780379443950177145602805656001", "0778492521815304548749705407588420650357923360", "1191484511990875425927015503085533218789130545", "3217375540286279118394153026140359889827879822", "8077089940559479664067694398134760753140883567", "6661869474357088936932907696946880242700772778", "9729448896366540627757811459756147626190803118", "5960909649026124925528835946636447150122619360", "5100871256286264883685193718371515543691630201", "4433736600455982212768768532446671415809163424", "9361299725502800140673256469938315580921237215", "0365504905595921296186555620173619906682567473", "4349012520547207647641825643147335521280307622", "3281381218683809958113906405434091121464076636", "1434045844828679611730890164901733275137439401", "3265314546438180620867739878493412788818650371", "2497160922951296849959735037705013039367788221", "8543091395874501308648661110133449973059478064", "1618146520816353781849751566248692788810781352", "6078736615378108670950829775882780269483107748", "4777051984981324841556068979544573536348669784", "8328996247424409048822552721881682418233355714", "5399020474369329571910362834965290136498093616", "5409667653059679225782890607497940635924819165", "0466045276990692626601555686603630896583392779", "3682410196896457983493751471784491030347392277", "6929718391413517575321074984461380852694720192", "3959071047265381462716254532655754594153584538" };
        assertEquals(4267, housebuilding.getMinimum(area));
    }

    @Test
    public void case24() {
        String[] area = { "3982488", "5729739", "1625989", "6556220", "5701152", "4579775", "9188463", "4339126", "2500282", "2469306", "7343150" };
        assertEquals(150, housebuilding.getMinimum(area));
    }

    @Test
    public void case25() {
        String[] area = { "347820439014591277190446", "168143948895538606521358", "638441838375473033994858", "481998669610636086718766", "178214010105633536839860", "510579296219277727289841", "509408016393853891624056", "474159357134387704326054", "108848996788262640605732", "459875956205725215855656", "023238101358057362711404", "682955884356400530433390", "307252969914420753168701", "959451134573571117457711", "361011819001750598211164", "991824409153986221411262", "203470931353012703778236", "622799644559657517726777", "983906770485714463302377", "817008863793217565630968", "626051412357552517879603", "534517973102176403357976", "882458210179472538002859", "533002300572002443146773", "646819501710942019973894", "379613115966404638212446", "898402375889263110368340", "603129711069071237837306", "200180998063568862278188" };
        assertEquals(1415, housebuilding.getMinimum(area));
    }

    @Test
    public void case26() {
        String[] area = { "056006162056044345531859199692048", "047324439190215742971347275128681", "761429073445636007498466845195606", "877531149171961237671380310631431", "604872168814717128864191037757028", "669396736308967874256170857100549", "671053787690206938847411137539521", "391923609333819352321911693878766", "303927216435887168636788963433409", "293046009104924782554538972826630", "525755194455072718051161723237685", "725783488296940749560810945699974", "104315346229193397927430586048844", "875904285393144154806873961763279", "259936522099287779137917489673244" };
        assertEquals(998, housebuilding.getMinimum(area));
    }

    @Test
    public void case27() {
        String[] area = { "5", "8", "5", "2", "1", "8", "3", "0", "4", "4", "9", "2", "2", "0", "6", "6", "5", "6" };
        assertEquals(31, housebuilding.getMinimum(area));
    }

    @Test
    public void case28() {
        String[] area = { "330643669977522732022934924", "307926585906906953102425712", "781180640253603237832762041", "725250826088957633183784539", "314685644373530694275985848" };
        assertEquals(255, housebuilding.getMinimum(area));
    }

    @Test
    public void case29() {
        String[] area = { "37199752531249329648855603650542629597057006010", "45122463521758635994003743724926223845158277988", "41141539324188220568051599695161491653405312265", "48965373370286537105700911619236416825286929992", "10020710281504060331678016104204476039800545609", "15852484331268400847184178623401566733239238014", "99508197734785706062644103275413860373091623817", "93978671841960769744254988281810857020357407539", "80704044967329420077745096404708568043491320816", "44183776459693857221692894754256329873453545475", "44777905234244081958891375435894268690032567415", "48029205481014875435344851914842248133025113429", "95178090137009779337377166251111156447494169855", "28504879450565797731483202794884809811711130030", "92874632521690652331676703631144476205470122833", "41148564610886120362040982619700417474527523716", "70828090875639747230864675394693721623554363309", "66990249066360344805508482610853673374220156841", "74049447648820718115150592915533517101176114505", "51645420005524663508570595162715186653616019062", "56330678445464933503750663932271636042521288663", "39973840176224784234095534439338816447593121735", "34733188112388175928037511385056065125523485644", "54377142938654696518875581200017629073910750339", "76900169498491351804498919401878694025818965099", "26532094875943484235115502349944262381285297984", "76651694044168194400888401288645687030196779162", "12702776759474669462903820975061717027632408737", "86574047654931644795531951491268121406621387809", "84230407051134783871387483938497581602233440602", "68887698285062762422728918344118657848820553611", "47502151558615901995517745960862300990857803618", "87925028102042093444152281644404078412669018203", "51815008340681139867052391473147313190442810879", "53400770401095208429870135301478291640259599081", "12101415269236057132055027070919543550807882816", "16358262887601225645705309304228812207424363291", "35872752633503034019700502399140204688234645867", "44587435339220799222487536222164945682558676338", "34248126481399463906978208801835191932243847251" };
        assertEquals(3722, housebuilding.getMinimum(area));
    }

    @Test
    public void case30() {
        String[] area = { "703507390916303685401317323793185775", "905078283228395155035488579169890907", "588932847266673545009477763149027357", "963939756006507442311761381620996609", "748152523309771427738332486231874155", "281453069367982200707996836480017038", "333169603749381663198438909178919335", "886747134499743070225808675465416882", "542250244196089592417082880683109600", "780906801442211229315447901234009778", "889117669607864633661992113272584302", "879937907505676906044121081898233572", "559792663108017817620379609637849062", "786090862768231220855199543089469111", "109368626665151901824029526138706733", "754049128485298814686511728453212691", "512911178954412856490185850761357180", "663712784892283841731649321971096943", "066889818546668976184082836543459585", "763546736522201296576862012363029238", "749670474723553847080507562735878162", "764707835200336295894280099429540244", "957838720942427726649191019218978180", "409304004347258164994630132858907663", "643232888377563722253808217652007768", "598637283852042177717114051298416363", "551708775267847778692281798966945469", "041287390039338100967130172142257006", "044034863298601651799154893049887175", "718902050646209199471207012753768791", "269404584993161244175818119653956205" };
        assertEquals(2352, housebuilding.getMinimum(area));
    }

    @Test
    public void case31() {
        String[] area = { "641858871251756849217497189320524396136337710383", "117879857707814963481908642179044225987473633290", "061812103775373987575538544277054867311372798862", "590826186928615226180717306377372560015224678715", "602587577839043900045654541624940222562242960496", "042723152810603260485921179827911742376859147487", "833832194261622332135144557604006699499949460442", "863778751723999616884863300636301714195026107698", "686270760713265240763057428387373845839818517341", "066116108038179026686135373871143764931513935396", "123860530870028115433813063526888889689193254562", "678390549052206961330068501709626082040536030272", "914279132234094387205281010044448293126181555814", "862346208500025658780380195924590045439171852214", "833565338933346793061278378815572780498323058689", "582871072296844985277272753726855479712420370691", "606469574959765900674252302146424361033994602768", "859446570675757410941314844419095264284254281041", "347947526162552424036920553584618297661463780153", "184903283547418209695830767806199828456706039699", "383823609492241605004744914919921892507723088401", "532735285639808633894422055480889960147123824497", "204510291434309302637998409251296344220475565727", "702193434506375094784044770184748419670079314733", "469843310048686158893133257968172872696001754318", "091497568382148831953968759337518857309364460735", "909773007477421203495483869766361111721770845520", "056618372963789406675515104711094641955601464926", "779929176895895852292784523100414094140764720922", "460229715441971264839598577255361039697237399808", "272638269317918863839598005107004193545494252335", "564822416574689869381391256950201579393451815048", "086752420199968273403323495808477600438369858090", "313493070852826647784806067311594257343371241327", "845232315402833437163665189886175139656842092301", "510902184866751787574741136081641617536934639960", "179704558843276711664162669353492868347689972258", "534738494004147554751200212639498606057139588131", "274777308963599453082983567030231772119639548925", "629031505219078918818225698784700424896661063715", "732735058337186580867356085271854124999658676979", "902122313199751737088785184271615319797840978980" };
        assertEquals(4051, housebuilding.getMinimum(area));
    }

    @Test
    public void case32() {
        String[] area = { "4331241690067029514733413201994005412272", "4902812539447260662178255302314191677772", "4449353709346637759886535899669990298833", "0808251419785454725272581802218589114274", "5863607522984238252070428238419224013032", "3823265013846556253506716949582997354050", "5881071891166490645478657023030738608555", "5897010840715614631875622355831953030044", "8862922699207635477776350318307999583074", "6091568096112726307236884484434445329159", "4462758915440797671780263750969847497583", "1391745290305708630626155035575925043064", "9128838928070642203283458937916419947562", "3988107819281783249843461542590105981536", "1621117716633399369616863930344265182467", "4222498490406946312153904508381552650022", "5412003763021156857298074995175427964401", "4630923231713992759367066175403119931988", "2836502861366516138682286911099103337239", "9156248745159168711831793721594509017382", "2448137577793809163664500581704389785151", "7572555166359658302324549305630096319087", "2358156042483930268276029561884326518527", "9749959381984318474839579636750589639350", "2793192289903938469165031520059230115932", "0581561478537204180137093131386387528806", "2044195564099428104444291729616515518149", "1932892005796724519339366535433693782549", "3155556116994649258429451765070084379563", "2738451216702284165162114933073281326192" };
        assertEquals(2387, housebuilding.getMinimum(area));
    }

    @Test
    public void case33() {
        String[] area = { "853260545963182015294567516708898653483232", "535850996902086778238202943365465449355329", "712416188133916520817659332138846981289860", "109626210421244279797258406429858898826226", "979480592471036175768759526121061542482370", "890881754754606564936412278605701091171356", "663878658387999129324172902884241459521034", "369930556133077498108909878631966794370165", "133601765977348192102476243310530230810632", "839352285337521049644203104500598823326798", "764449454208693882778176578378983392668579", "460952111140358071017768415278861977591729", "399329400881837301068552721271847615098196", "775346223552747985594554957845096567894099", "281583773451554987364450771180840065216206", "108904102086567614184860423690651896959119", "328006119700978694999519920775572340670739", "098359853327357744675528227932832874333326", "129187657326516495235417033564964918299307", "448305156408922079996291115126965016747046", "724416047467773401251399001102671054214246", "575280567173871198897021532661124291502782", "165400434095109772535741647389443086174740", "876898597580279490491901759712176161800403", "815944778116352596452140519582888603403428", "453739626916349521241990918281717633727529", "084495305769746970572215624840146613932556", "105203171597648904998553327980433355404205", "488719365730155790994092602348735690452493", "955999353227435509862816651162431599381056", "686327149712276056863353281607474281233977", "657234709422101985209527756373051510958284", "867992186313214603657474092841830327403405", "184232759499267364421883932189597106517024", "731082021601626723772064234283734168727973", "576467546384768079713944441237940882606502", "130511264357493687140082830934604668299398", "814746128419441450830996466876337510782172", "363157052522331809472271089427091286991592", "180854965499033653280926371445714914442247", "019699021744353499998854308734988787978282", "465445871200519569833154979402532865731130", "153383580695831751387699410568633555975715", "245097265068846200898943271832634334240112", "132729830596361557157658508499133853207732", "540393011188337031114555088409264804954810", "607038326959710678352786486925512909151953", "245009009758227570474206987058023844103779", "908690186607866632995583361696755144562906", "184401526208825999824326867157673593159713" };
        assertEquals(4220, housebuilding.getMinimum(area));
    }

    @Test
    public void case34() {
        String[] area = { "653120763040798894055652065", "869444927324537833264939793", "656552388283127505682979995", "091702149698486861889951802", "675978242631495680845393313", "896480682376576972758650402", "687514333554018532006031619", "975401661859654183655047017", "604925479930811321136010080", "753211214477774470199105947" };
        assertEquals(540, housebuilding.getMinimum(area));
    }

    @Test
    public void case35() {
        String[] area = { "5050944154215805548475668401172933314468", "1234514222989102951583854532441159486236", "3030861652088726812174312433382517127644", "1908484094514965613881866554712967165765", "3499351572328808761173513045064410214049", "1002236855026612377283635894511374325170", "7063061931164299772956426296866479494673", "3446230021709616845559450019513804313717", "8075550416453719213777661656996596930912", "8665626279704793083334341540042432513190", "8358673454668764445340226538176577765447", "5666985719525671303317721594313109403162", "1911918293927705701321784120728998473254", "5860819046636459242672207081930837918007", "9697671679905424102462163273057043883283", "2983523695783649739666170927413489686507", "6951799769085669120518599258689951687600", "5544847859503834893975566169939013231503", "4114091547139120875784204908273873353338", "4492168456322106687622643428074700980366", "8083548869282019612162056790054202806937" };
        assertEquals(1631, housebuilding.getMinimum(area));
    }

    @Test
    public void case36() {
        String[] area = { "50761108", "71375942", "00601770", "27856304", "59240402", "87858149", "11690093", "30163032", "72836098", "78693576", "16215223", "22657861", "14883325", "02494097", "98859386", "13927959", "89898981", "67667803", "28792143", "26864293", "76788375", "74651183", "55591303", "77598663", "61923282", "35874279", "36581472", "67763269", "89346014", "41222287", "84282762", "18371896", "92861232", "42332758", "78161448", "25131622" };
        assertEquals(590, housebuilding.getMinimum(area));
    }

    @Test
    public void case37() {
        String[] area = { "759207606930", "528568090810", "266317137942", "312536351757", "700649592100", "091801165862" };
        assertEquals(161, housebuilding.getMinimum(area));
    }

    @Test
    public void case38() {
        String[] area = { "92652166527764", "87427872917392", "28343891032936", "51729420038860", "92314905532588", "95801124294219", "37479354929238", "67054274494697" };
        assertEquals(225, housebuilding.getMinimum(area));
    }

    @Test
    public void case39() {
        String[] area = { "671765540110060895939734752844076436686200", "492480150075295480104017224193550891896515", "470509258673009507295691585622752940332656", "589585151962312232149730691223971111789395", "953035475674176009106761660122421555053588", "556706283784650813770240972356303207697418", "241032010389409289753990879524194015847201", "221241734209687040281258521095723261632252", "439454240747453866514232185136986669861318", "201825618844170335486059273583055167115641", "158237961561837010011177247562297587213876", "323839531123590831931420528873664918539901", "863039106227219669945079073087518115765052", "093487620079631877085992519430694413797662", "264726497959531905675301543909806944579563", "518991418331518098790011451570578746396087", "006744697393027524573488761555946731178407", "526814664388410531370064480464277069985265", "450638314798268730147349924930116795212510" };
        assertEquals(1612, housebuilding.getMinimum(area));
    }

    @Test
    public void case40() {
        String[] area = { "32290882758991643770871725", "53016498486076441858107152", "00486289365579519268235348", "09445714905974737397264807", "17419901751456550597164118", "92674634552969159663162681", "56367346879957261991765895", "40531372343656419697426387", "68704809199951261517765013", "86606227960980975959446554", "89173845997404888353978415" };
        assertEquals(545, housebuilding.getMinimum(area));
    }

    @Test
    public void case41() {
        String[] area = { "715537731084615603181282212923", "149231873242835458862276800343", "208688057463228393648904309134", "371837622494849881079737635311", "836995645772019090202102681426", "113444968708165404432994006607", "499435258207117438030955344007", "717917524902145430535219959418" };
        assertEquals(483, housebuilding.getMinimum(area));
    }

    @Test
    public void case42() {
        String[] area = { "08555834462675296981559559432", "98553608273590982624707581617", "29189693529958226143709848230" };
        assertEquals(170, housebuilding.getMinimum(area));
    }

    @Test
    public void case43() {
        String[] area = { "31849882454076480293168674361513847584744", "57716110375394126313126018122282167588134", "85621428896377000025983398736950785574800", "24219857241286952664003839995540048449634", "71589883874687507321887733843029515393517", "84686741373416869989151720281191030541491", "11099891286529872599606709695539379051258", "31188331067752711351787429654413904726017", "16782732826199603995272652148644752874391", "52113224091487570356613416391865186807574", "16190343547754547375371244214394347894879", "26687832801171985239632114527502714356479", "61855334360163368031054661499210793245158", "58870522831747509904836142551414460922976", "74416349131628053811715732236855794684084", "66025572880288090852646220830855186727844", "78952539907437772311832373853508416426201", "73151496237550749343783672269627947254015", "34020980666414169763184355798273369084778", "76636627942877704679143342055211926660244", "05979431978484353115228459731499945198775", "75065127323895656404242304136040172957536", "50179642187631500842979392913412584628922", "53056485524292035024983365241859350475784", "82053146744131081385065494226259461110853", "93124564393330043621897618651031865889543", "80400700494518023355298977663584315029922", "62384035061199377556257763699433668044473", "18869685615897059019266269298260953336390", "17459494061741079203761679030615425237914", "29802625344998384774381324587539122860083", "46060101001459942270905712185147343224607", "73117622123252079637500035613635003009526", "73221234925407146069252293445311894966715", "80781652793248852781936317794707828862301", "87093632141522961985855900602256766559447" };
        assertEquals(2865, housebuilding.getMinimum(area));
    }

    @Test
    public void case44() {
        String[] area = { "971269662253782746015376505053988670696106492215", "153352097688558250590723593161123998003122172927", "690497418314263260617353322354451044532219587712", "949422691063722142833206880800766443480597370387", "449227025647056895016036324760734720716320692262", "841631328754111857028805831584967709394101805372", "322353848168641160486008752029826402167606778490", "590810012514140086037147047603384939290201682403", "907656789023241958024004422900799500526809927141", "892089429511058772815753353476789600843556148749", "441190767078568908836272505368191535134045750473", "500288005393833796356620800974594982152932507375", "254904159125432187525857335067992682501403855721", "268399919230098773565946759200978149074433838839", "916959009258254612568020235106281415144675269265", "817791399556421523108328513419367961169221874477", "663081266857743865326778365732813096581784124668", "406583180667794095775911234964482185159610067679", "782033943899447203339203160962321235034701928508", "786989641804459097946040326331284380838405734104", "597631793320614435928067479787329675313847647484", "009837412581455693711867570336525856526047402593", "299874301393601110104014699247116784112893203991", "215125874424769391390619880931546742011058247371", "708703531964611532172434620050728841886900225116", "351364110267272492637522022997161502951891589997", "388688149654504807680419801152733456800370700333", "322017935956566787395340234385865514459879246930", "377789753481300495561524710535729823426608876598", "112251723640774176116100915666499527030837597516", "480631429618793951848452510138910091076880361625", "511806992818372797974994852160581627083387842513", "685018927655232062917682130325480697589485768174", "268804827559859286068796045899961719168607883047", "381550445760978299735770070724740844175172615458", "509429286753933360927674461059831978414662841077", "386458989549103685718899678048830478122363007862", "017882825091828974267253061214237671992594774809", "211485828788215905021665353335466418703292093763", "811923881544291935510383593765795796968016719986", "196705855030712463735514381160648561795981773453", "131247717587583562572615023675806250397857559528", "355462306899720821922529142740532560089261979470", "958628994696505844863228461719800040287405878110", "437778902298790237779262219857523756727227233802", "635130387109538082773571175531117692627414479150", "783948459630621525667337600696271051086657713325", "962940611590969154621471291068104910728440957312", "161094785837861500108183643038867223624522197222", "644468551098681893615445029937854666248743329022" };
        assertEquals(4909, housebuilding.getMinimum(area));
    }

    @Test
    public void case45() {
        String[] area = { "5610285509", "9257614670", "4808653156", "4513205750" };
        assertEquals(72, housebuilding.getMinimum(area));
    }

    @Test
    public void case46() {
        String[] area = { "94537742106775867189427", "15994205159191996861370", "67924817478759340616236", "61919568907167567627069", "23996545496915191967676", "34983367065760545248643", "02190945841631755375426", "26646371904917356972245", "64614377525758864078398", "16341205169601755172251", "07347435603471861105978", "97846399489655291552806", "39051402564009009190803", "29946363925146082554772", "94205226254986032742884", "48443913562595539059543", "90020952342938456675786", "55640653711760377549252", "84514811877966326485536", "18568429304576685238173", "86407892677048481766373", "38014794549682143678997" };
        assertEquals(948, housebuilding.getMinimum(area));
    }

    @Test
    public void case47() {
        String[] area = { "2902249", "8444814", "0083169", "7614073", "7179495", "9209988", "5474095", "1275558", "5444919", "3633767", "8892043", "9509381", "0145132", "1551049", "0139126", "5832969", "6100391", "7441045", "0863865" };
        assertEquals(277, housebuilding.getMinimum(area));
    }

    @Test
    public void case48() {
        String[] area = { "83268895094534851709440831395768992780103708918513", "23194319095742889301588757708279405810228986581492", "51192443973228049648280319575311740324040096172747", "32319280897733830308183679025492888787029607280427", "59014104855711322578742186742475232686800278368742", "34538956654478429456822594006161531707299863090774", "24096838782793713662444644654746276077629185226127", "63045995660136970718029939032739073180560442353448", "15128742441086667543787203903887582963366042071392", "80430449674190862731775999023773624974987785082711", "77591001086729271680688125927137513994554450238992", "53819778886147983220371553309845406091490263598280", "77532096233564124628564910746009671399949922948303", "36044375292659501005156720508564135181886948036827", "81670137395484656797068786346779750613491881590348", "00073191591313268210562911079643997780382983641134", "85416678013056736608531775963980632276122103341405", "19541122422892069512279453290105525352453758693481", "64945044055834186739515802614498980463610933147274", "00448080554765272613141525795282305160513240428884", "08477525246708605931174014172369542518496323963396", "34852894979324921444831530733626250118348917624891", "12536769181959100024247501642970714489519759353781", "17187453027824657059885758129652777354927521165078", "10223134545484893191386597063848227509447191881098", "45893566641437551218013431579518215376917750221348", "48655596282869862463326167559051772426996060951791", "65757144031988155071969936370922169107372783051159", "94750240072496533317352845371135951588034803879140", "97089794113576032676866126877662893564603663812473", "57512497719740895859141208716791677954952732951642", "78377193412742008746034869825241793125110357884604", "15081491186529719738484681639897593738976141612155", "27820522999036432031401827319719770493770527888128", "40817950718407735067675215044256616475875110004031", "25116830466004580697747251699949272714629333424767", "55724898434746220144069335853440382729172879185087", "10213470176504945710419999198064496381848243476078", "41112613532258012471575781291653542745650735857764", "08008064265800001475160196787063635646418398967057", "10240815833902270995865296953190972604235834292900", "76918052992907433309432127546017638258758639845765", "33293595938249035755635977988966112367597548742325", "92620059265553425672947490712630420509850540039150", "20680521361565692619784205404098998247090146414257", "29081373261454734000332523104496658688695023382903", "63269126351825035917663448387860852942337423885550", "74451818528634262710505695248707067872895264338582", "03655036001496975630666261431018050517751050680688", "07201912024205640585341121926888364725610660145852" };
        assertEquals(5017, housebuilding.getMinimum(area));
    }

    @Test
    public void case49() {
        String[] area = { "24527055941737312509431820728988343574541908886178", "35919461020300951719896544167863633133348940342824", "43065839024107015427515109337528549007459463120440", "93091000589241591568960383475377163235105735646063", "76256450114621325762226143466686050133933600475569", "49192637467446469825835593538734191819144067723969", "73595781353086700627344261655944662890512394790753", "73764706420224920804754509104740267507077032569742", "63937795671383034479263189564414620820848747413572", "65698869280819862823825047827071723904723638920375", "76547344587860137698622213731265795656342504612178", "09588654562239219501505996966999673936504720900288", "14449705118684108325952871942888265613212958114037", "23937981340472543598057656891123112387478205987621", "81102347760408140909256019441992786955326357154258", "97288813713221309720250416961632367974948708856853", "25615998176916286416621748630020296650163955706918", "30040365537282762697994233627736813013537885876264", "79941810852651277250426614579329126937458177721716", "11007539853026265835306731336514199634197576269630", "48436727832035151433645488280622076403001742252984", "89296126507265963642857168824809468604830731935573", "51286032672083179158097143564751636389801497297500", "80805034092725798365379982825362264648179825104382", "26678317801761432983363191236571344287358111588465", "92915890490121341438524209297177565915592704980821", "87259949850658330336278645729643996389714355304983", "26316143610273436973152509514232460000617653735330", "07530174279393509729768918063573446050121666874576", "55284899659570240860674474509057654854130843882110", "85315501772110524869312347594283114045249202524079", "18793308216966101049295222701639315611488760422120", "14515665607921353091702240925077746696766224411917", "62783613667143598150526245127704633606744943700312", "24737361565793848005406022412868999426995846708627", "47147350098640152695063122680190360119281023347444", "36955456277368183289621881114937598813186482300998", "62862907178695828743946904516328445926762836092924", "62381716380361765502251138864674410284384475391728", "35991403113006028005657224020650396276041494866188", "27152568563944220967991124725209886764678044212840", "56996765395799652722067140768402138423806513074189", "03384411588490920036901419591581142185650329430552", "36415319691120863946187401007672048111087834701348", "89533246688053367562906024437444225637424543220691", "11974515598185017053157137335099309627853136587909", "98083209446407458083960015809387894941588817591723", "36752613293021553324337369784805406560199119188444", "71530910449048858525337903509582439155254855554368", "09437900245301382396990698725030684698921926531647" };
        assertEquals(4938, housebuilding.getMinimum(area));
    }

    @Test
    public void case50() {
        String[] area = { "85754756307423960189278469276703149444059041699144", "99874684335787070301368359639117636085050692158116", "16887292959780026576385892117446649083322704984368", "28720889813269936279834782834752908556221678191329", "89161721733130712617208457563398264533082307218877", "61848564202277434330555576076089517000120709894030", "96785167278335720459946103239068665134400174802609", "53152927055887350181346487674306650901744428939106", "72468424842009231547153159638050527112125189164558", "08897192571728524458395722912646601344651943162876", "96937025051075719742377032413168638757692128483915", "66683802953008956043670267281381408157775820963358", "82296770749006813550587140859584467301353008867748", "88818181795948063513900175997477405122830459497284", "56632042058374258183187112802012826272723336129863", "29813371011974830172492016044634883611751471642547", "71179954995052145737778455842989438401688720609106", "11706510154475087980626201767019148344630281616490", "34610056928280408307917709864979820315219994828816", "32582015723462393498809217160091789708455176696238", "81493207341678757271481980164958117875081683787411", "61766175520789994126222288593391348795306257937122", "86601474921609815623570902533990513391399031609266", "78521435560255596229663808938485559176734517622063", "98775106418655324805356388968356073034428090467929", "79736915033914699632338488246276147083516178347226", "32997794093451565954004771957317739389324732038549", "32230933343784857857144693870466056948953016754028", "01502870157975677644428902186246786631567213410675", "85913992743804519809120115545482380909786526964366", "17141132805805945493862934105156805020278371651764", "62126729971433261757833313882134559219323050468447", "96797698367677729991855278502419767989718086209808", "36161212582365478779546815793539895118694091149377", "93639699543016608118070595569239005326231255345104", "37799745709247474278708372038988626970924193186891", "74581146481258890076466647720381991964315467334389", "55229666460033965338743655883942584347025933745196", "63000360531732798108637227879819518968430219980711", "28678324914900516621280462051302354820825852126725", "44975560650570515866042557949783358241168370837126", "13867442771212270997343962552958979594406895305077", "78775817909261405050659972508404002030452903771412", "65955225314058842729227094664168402466173873222234", "98103088820078612391585445713353641045284994243118", "12351271428166276674147095216229823610968365219298", "13745855045054247751130133964695015950533397456043", "49648615915688686355570715255929356290646165143345", "55998935177874804926287081372853631327872784152005", "42706441475720228381696584860324187476779441866139" };
        assertEquals(5031, housebuilding.getMinimum(area));
    }

    @Test
    public void case51() {
        String[] area = { "44873678605419825924636919556425246903401076284790", "03338613680623955284028136709608721042715921045556", "57681478653133831389629903942776521765248363864456", "16872884110700721064109326539446216509734533679590", "58521276220272626408252532482901216856456458159917", "49626080045535024273642286311840617297107700005916", "14962573984690764208011770947131989550068112720074", "74884208867453590181118163031193172275343336447131", "75716829931858065238704055599588752537233467591877", "72011843245322270374404492876527783728717762748404", "55061421762881161396182043071862479780350460790481", "92926061217680344279847079089576147343687541796513", "94752946624899303692454863214013503137996555149469", "19547368472409470684175392693135169983802619626695", "44369708757449698028989795858202243592862417927322", "34207738121212466853253903423779297680609763894591", "24074742697229887151678736768559856755756221212637", "28164164555672075489852278124751701822226574730213", "57955865562066830212171930626695059866504495250659", "14654743845889091506605411880015746308851291934554", "77816469385533477412915968591027410492423132389927", "87234931370552220754544854235902527118041137889774", "15157129493077758810259103204748006653876028550525", "45438745985513626000199545450412166935083697052626", "18088084576070816206123583691405843467475746047817", "87849658416040136760005815211266259083154821956889", "77809655727238642011525520476222686905836570927895", "24549130784892839183554523367214942589853308177717", "41735749357533023436446398667337309774825259134499", "88977480368816759158453350705792108651512191749065", "88364122959040715772335520057865154159949957076175", "82150791602388306445463465995660639737434065950620", "00472818590220356485336739547054561407164860632188", "77189614544471615742987725259650778072186234207799", "80109288447019889124148757868694423023198028780525", "09657484268711027793580916192432267636058932243355", "52475452602841558184064497732714972277543277475186", "10135419572216470022735988796719907866374336124081", "51220427054089262896164353597006242149684636258206", "67316905585319687377715163951332767438596857525841", "00115976917851884241923661761248792586907006401055", "62234228148211217879747688319720455596952933688464", "76966618722277744973579648300706050612015282315715", "91835189276292147550117467358129561410432979696889", "82349011531097236965041695251387135167161708099304", "47823757622757764553172516003588847722434825653381", "93218862579121491402765571304299077337140754881503", "26803865650235608854475053468191227187410181280374", "04167222929281233331856836672714709272560523093494", "89572058463194434059701288345578078241875645426009" };
        assertEquals(4854, housebuilding.getMinimum(area));
    }

    @Test
    public void case52() {
        String[] area = { "81094805848258831769168116236639533057234778311607", "45478271089680212462424038791852138879669687651895", "08159922360768766166115525851327326020609252417859", "04182188871850283519786161567162566411594932954995", "52746901027686424360272525233115591338330261412432", "90801563632170579282798689012278660610718606172247", "14099039306221782618309249854657672085217504681667", "23732944896442774156496964192588723970522521601543", "42276120041548365339721565187088518313958831007809", "19924863316227090780044211169119150770163932954132", "39699371483296771022890969207106404016586242760821", "56879246521290894684447853075131437787926778406077", "88187774910047828911781427991989929061078039189767", "66062250399245217215109105698066413751893705650451", "09339059358668577681662529784864385609340333651136", "37684724596179496864281460344856179850478234294317", "64346924839683785762110458794518325611158565108906", "86404425183433733946023728460333506567880137558082", "84365310972389175871777776969669072157170148356831", "38800003327684846704058370040981647032855683750930", "33524824037884856511664658525848154531606693285807", "17518950969407926331219703280887044006695600716603", "91968197250726511018015472452029395555608769969382", "77680536224125403310348580836556773579200276698360", "48906709195184192261165097727243491969676041030856", "27018851491972292196521668493838538840603231076175", "09295676830857246256294955043796661164864380441706", "56239713767969574505087187159598789858719522175489", "66168626411560794360168544608565217347845981057055", "73910527256268755586790535874148094249665150662309", "83907495077809534876312023697679695837409844455673", "78693062255798087699336067700027485708204112212422", "50824427465859411973502364578952988556489087613795", "83683999597211874315316193957112771329466915152993", "39349839426152290223276661705435336823874327063719", "71212502517048857348536121067296393608884094494784", "31414301779700721996012416032237516136000602085050", "70547820046371469646742526649207096083996078305937", "43522987629471435185843427417165834211697101561323", "13498889956360769240538105320508838256406204795705", "83187515795851406264883505584652978093590384517927", "99727804975566456638564069634206456733050384619467", "09261715453223121886287130856356055494991611341057", "59982742840277631192241809060860900793351320002796", "74597401998570417596170841116280566875485166079429", "94618015729240445930848246408838954208993317584751", "49407263326384044304955312779228050005902772850286", "94125553081415606616715746618377736230320155099260", "37601749260153048438847710764484903030094349288869", "48104236725658211364810927864873917589791216999042" };
        assertEquals(5065, housebuilding.getMinimum(area));
    }

    @Test
    public void case53() {
        String[] area = { "06997660603182069709701253870417169776270787886703", "81771927450098182510977542806981503705621297108126", "01301822400831231387873118622278128184200461000359", "77231840521681647056142947248979117174024994999081", "38507505878250554263861771454648588392693363853294", "71494304097582370242825494885422004800751272069001", "28358733743550961837917948670263809022488880862182", "55000230851117916460363853492828935683282987319789", "75291704034151274363246085340492956315539674747647", "07103900544040497949533679939807833086440079698317", "17823229474997706286573561277212117313177674723723", "49437328406784925577730752830304681353604898807812", "10410200015575939653714177360057735145129094004899", "95962009246730591453744721736360990198541423502066", "47125650303435964628210862351860999852901909721323", "25331387972644176988529900159868364459992609551069", "78768466835317956503825432714177324216054687241506", "97208808801824819304396514475700271377972052700446", "05480929303738908578390777894689326423050043051879", "63678845175693979398638711342696893757930280954021", "74620885404240612321321008951012466887685844424105", "83953372236668191703051053769503239762936253520015", "48427828232201524006434660462830684678838888548256", "64375102814172530654138606256512886422835821476190", "65760712467222841903404570576590743025476101544832", "98139257370052697210540073180622185162358745344956", "50747166770534891439877768481451183676318757218601", "26671214180466848375419272403856637257628518356155", "02949953277281931725825092600978229891086408083780", "23081277006517481503251739634312443608337256626335", "06126020230814712686271926886093467063316648244444", "98968651311774432828544422132262671228052939336074", "97788821236256803938541290778369889540450875533883", "03571372250588186058582216948033027094845238432161", "79643656008301115453995367683785948661815399835172", "44068730653756536559009478011283586866825585959638", "83091918436783535029109828866152217085362148101576", "05619378574723667785237556084000664823942640932983", "48326149421005959999796924136511807296425893415931", "93107832398697007113104909749424671102765238898061", "99790023043792576207586423500385581997634775771356", "56074828298423383358238940008934938079010483372839", "96379229236769634579645347623484541610272993836686", "07580251245421355946442060314149207165719661771776", "44176541302459011844757716455099414727744008801607", "61138126410110001810647413797277207714892012183429", "70110578951415321770381347522560120740449774806624", "68141988899936120815610460803576998827531883601915", "06213966197043933233768324860209086190010334272012", "39515902107104799100764845825659908156643425291310" };
        assertEquals(5121, housebuilding.getMinimum(area));
    }

    @Test
    public void case54() {
        String[] area = { "20839669753171355463151307217286422971435618549585", "68481354564550881688729149401753230046740951359900", "86607473969187576550730589217414913862871088231339", "47315791392726626924036586521972709843750128872784", "58478878946024806590768522166752129958115894273952", "55228617140136448670435005169979296049423393951616", "52234450241984388193408163140716634693888587137693", "89779966970444658751759692866380563979787538562419", "99332056096627166974491159578086362159717773121750", "10924481503039188295558625631039413258213977094026", "81378383851962708761788396425153760538989525188789", "78127069719519030412116787609923605457839523577994", "10981585256370075030831781570092197972535221326726", "85352824269941936953502070268092590604659780737621", "02751916939729365559505626492434866303042322658573", "69372202755778189922552249577981378019558450254759", "84158415854202764739117016024648671910768965163484", "41646138683575071590360991118804547854965423992876", "19494406555667773448875298552900638589780208685763", "95123532770668604471790586211631628714394509253582", "51104430696857114136145495829450528400136763829372", "17531711087207308139990786547895332381660719574570", "93414017118106766651108505336386691958950919077147", "35851059724966220801910168344150841312165604559320", "24689878484029069661798468434551754787756092484118", "63880195052631348077467882273666594699009893123579", "60851767648090657358919581087662032428847042827189", "90941940141210787283949203166789797035754938036091", "96134005477303956708136087716883022292547078016056", "07541122571666273369748102679009077547132615109581", "53281525042330364674912894016792960310370737729786", "75206647612877340817906130075190197553649830321328", "37910291972199392567671080943231520290767336857763", "49025533020465179749190116994402386726935838033083", "78473400621365343252375722022558847911426972395475", "99630490643837441287168837137863494322908286382121", "43548384465965307854432620981934084866522343506540", "68983486740177692164570541772511237444707444392465", "26738428668997348119672223155549931959564644749467", "39780483656550303727896992405262661033546121372016", "00275696689627670760777456128453395842972849699847", "81266998273340515998566161170388746602858985154341", "90750823311078189974969186642592114220743784550900", "31937476134566575904944390498004710426121578200188", "18843162926773320470828655616652454116814340377708", "24111633595463728988960229320061309226639348637314", "74875046734168248432994485134435689887523644969185", "38060242312401364466384314062384622930426835311848", "72647838591253314697916263292068723696805875274936", "91577888141669823342056308862617193646019401402041" };
        assertEquals(4996, housebuilding.getMinimum(area));
    }

    @Test
    public void case55() {
        String[] area = { "40894331663387744438686278684379299188670183038214", "37703866974513710697445239780986199629986414419050", "26921486952508630689670938625734172769593564847635", "75386706074792773044797592194407750970097485589515", "48167562923578342180479734986117689649218921642736", "89724203895449975803118386302999516216033878393322", "76193882254200341587140879193877363913405776811052", "45650163860753004384755040433259356878836987782573", "44956809142304256887870074743425943080224210664347", "96888604944226399303405020589721206095211357129468", "07999109120735619626770663707697740003207347471618", "47894737322810254526345960528101036505641448952316", "86184392996022663693582603183844237293591127008763", "42389855753732857542639824467612990674327397382084", "64363682513377150368243465436379232940552283107301", "36653915260281634421462751826234713376693841731753", "44269938430303707460032343860259654652964413535764", "73204816037025338284750149298111874487102188810806", "12958841913895840221150788699920892002048640215673", "11332441262079122399912548017385179707748622889277", "04515989684255259837208911574436054952247478186880", "02193890727441866002802331034078110429229986355899", "22903785080112750695338714813119562538700131059016", "69043229798139747797182983638250883626136729035929", "58147096361552851125773165158474716181562672054776", "93511405855267073316541251216696126703588352237650", "21732790035841667376801033989628214511275373601321", "77858999005069908955909054913253113610735882263466", "75986354620773429842410342849647771929766478370100", "23963765932676643155411151255718746204155463076465", "09629414455774289188229154144977811315716426233954", "97522823309970393542603509052835803879152658306425", "47837156863026518866640022900580712938104080117875", "26767050643881048271150909250822370860524375904823", "72207188076230906780362388654983488731392430703219", "13517408034204527616315936628835135495384625658255", "46934290791002160495170438644335693565897954452815", "36060920223941497920570753289657436304034074706083", "52323902059699763171698118287465360476505924509454", "44503236289627339121446397684637138581481129282748", "12726289816426913735500007162863159683069781030531", "14463901547031330631243631394824579144906210199106", "94428892332838091691858431808649008550870628896468", "69293353072656388306759197105664114506843409566967", "73049111217380910102097607048451873793361279998018", "75935766274106576456918968385832887863263700432320", "14435697508563247411191796394034537869954136840000", "34675426395174472110994942905109138712400744920309", "90263908895562401562806643267236165373263212631412", "35296810447163745358372030999849829071419863762360" };
        assertEquals(5023, housebuilding.getMinimum(area));
    }

    @Test
    public void case56() {
        String[] area = { "05141479108824621577478413919218629791517724157200", "70651458726758707979064946904287464087121502853384", "76685913267236309725366456780290141724937863009271", "85742663722958824128926507784107127188404345346307", "51577341571580830703250192948150956129511523746570", "33338772098868278265382546708248669478553212647929", "57108191064475641352478081178432535106020898555017", "12124833260531812562759161769114721217527472630117", "87671801334338294924725113568857202575776895770591", "68635494833149327809251562996132634324704642927705", "69243702518284033843364275920229177913015199256601", "34751714348639259296232530643276730691985586118936", "04553070010792911359438144279665620949839857235786", "27014916949652910869926872178056533501738603893132", "65994854613241070881621334836553264959891544266478", "62745001393459057961181116344202304231798724508337", "40496394393125135483291274385825388746461855900175", "91382967884639984919012097385629368453622294187576", "12731240592592741512212988405665235009254365660171", "36603789924805147862237922961922178302782030194339", "25475688894813439154093840631165259513732303254370", "26568256790593533709982273391014280306696262021506", "70245793423671584880089526689411387495289861310154", "50715109782491950546306153062493711222320871373485", "06709377564522751421050389592934182281602533678697", "95289586728146398092497125653312103625590612196846", "74850587029710571701938855531308398221832551988040", "58681345417342882319259437959129199157305235399322", "66172691454982009159072425666049587713862925921091", "56403088748189626785578668956893159429763571484028", "35490334392463343443085692844536515205075304010871", "28449457104854621108428802149771128635304012468685", "41348526951835950882550803282379229944152666882788", "10351396311971880751215931792586300607780769166602", "65348543296200711742143669072919015159679952689884", "59119589948396427953057819377056930546278201970432", "83430837486530269666370020142891622907298662803584", "25423738632304248562886226080252584778105731679850", "69265807802107412050216992964923542308826872300852", "75544016315467511197089607673794662418717110553730", "73612834314560559740362268520277878748922954237304", "97637243539293050369991509460381656437601424383684", "51189661671574463955594645939456681124234522084494", "61872087828380860050058361764910426358837908645060", "25872360783300779783317671111753640069236243916380", "41252036879545356596184430543158436369034137397044", "19074662680746466512829725473422100951585961308318", "79790033991659845705869456273177506987893817985391", "66947678209950067365065230775131017298069489421867", "19932242645557700899072376497514123846982432720331" };
        assertEquals(4982, housebuilding.getMinimum(area));
    }

    @Test
    public void case57() {
        String[] area = { "11486542945143174808652491372807986887176960881589", "15584409482550794204278133716131933022319772296904", "79387569789454132841117800713679716037803733269772", "23380936043054000345756252365200575604216562342482", "83879904710300008925985445215496939509390773493252", "92734022946179739790770721238386441925642435376218", "36730722353645124760798388155381100990504838704838", "19208074303311586952706796440868045715028156025137", "40572991991318317713364950193425098686106550490227", "28806908367406472298811409566938575772103030851325", "46575360229745705129100235541311053970643460950033", "07314971169598508796852507460468391399096109191030", "85651023801233069166523487235648927743580613091143", "01752642559807197315733332027009016912048983101676", "66359300631559245862785837503007600995896104323236", "04985878674220712166152789131247559638131409111316", "99718105370903328978876516914012665362552455205920", "22805747269110713746741381664491435294577615173546", "20533838150907808455102438888263265195705844813577", "65989692953469077591662069103679452653811289861732", "69758214827796017718460739349765724141843774734775", "96691352070011482454316906951195749907044243850072", "75839582270764326818330416484823957423387305378696", "00726422241985296559580468016652551201772495917822", "42053305335206926081158836248180605505466520405978", "21773327396114646773139248307481211438484751976256", "07029151323237251971187966092027447040133560483484", "26671676855349416854875202800782118489864206706314", "41130842349098679513950159438976539200679851746060", "58821545903251750911620583029567014379956819850362", "26395786093106397687137416732329164597938933944358", "99723988105159946766020459154473927687365531485796", "88471750946588334930494489403543473596018522200533", "10708603154873955196613887991420274359992623945734", "30082934592729374200940747794447785440626399967403", "06716720257178711470985279988602710563361390760240", "12262415023491731074164861618614569644325603326431", "90152243586999349019539819057611005185909358816347", "67309254038236765325439598570570823624948969898642", "54270720497482469897603190527212829608795203921034", "58748499420839292330931322016497896279398989479351", "09440318847136611381286569822964774302036537898529", "80037937782784678064448201267132079243750556481066", "01368614187901150547991680513450977379165198664334", "85260917672936443204585272524542091144488579338565", "70219162064652787933640720794902063619572432651597", "02709230659612126337385559548586558897268579992812", "86588671103850034720012997158365938334058918468543", "19193482872589619739099472230999984437359209063603", "27224624635956307517780836075998638086562152003996" };
        assertEquals(5085, housebuilding.getMinimum(area));
    }

    @Test
    public void case58() {
        String[] area = {};
        assertEquals(10000, housebuilding.getMinimum(area));
    }

    @Test
    public void case59() {
        String[] area = { "5781252", "2471255", "0000291", "1212489" };
        assertEquals(53, housebuilding.getMinimum(area));
    }

    @Test
    public void case60() {
        String[] area = { "90" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case61() {
        String[] area = { "13749471030583894", "47845082644938745", "24358693485738945", "23434574950534543", "35960347507692057", "34857934690485703", "43579760845709345", "60827107486589345", "23478945706893785", "13749471030583894", "47845082644938745", "24358693485738945", "23434574950534543", "35960347507692057", "24358693485738945", "23434574950534543", "35960347507692057" };
        assertEquals(462, housebuilding.getMinimum(area));
    }

    @Test
    public void case62() {
        String[] area = { "997" };
        assertEquals(1, housebuilding.getMinimum(area));
    }

    @Test
    public void case63() {
        String[] area = { "1", "2", "3", "4", "5" };
        assertEquals(4, housebuilding.getMinimum(area));
    }

    @Test
    public void case64() {
        String[] area = { "2" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case65() {
        String[] area = {};
        assertEquals(9600, housebuilding.getMinimum(area));
    }

    @Test
    public void case66() {
        String[] area = { "123456789", "987654321" };
        assertEquals(32, housebuilding.getMinimum(area));
    }

    @Test
    public void case67() {
        String[] area = { "00", "09" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case68() {
        String[] area = { "88", "18" };
        assertEquals(6, housebuilding.getMinimum(area));
    }

    @Test
    public void case69() {
        String[] area = { "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "1111111111", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999", "9999999999" };
        assertEquals(1750, housebuilding.getMinimum(area));
    }

    @Test
    public void case70() {
        String[] area = { "1119" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case71() {
        String[] area = { "900" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case72() {
        String[] area = { "99999", "88880" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case73() {
        String[] area = { "22", "11" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case74() {
        String[] area = { "00", "00" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case75() {
        String[] area = { "989" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case76() {
        String[] area = { "222", "333", "444", "999" };
        assertEquals(18, housebuilding.getMinimum(area));
    }

    @Test
    public void case77() {
        String[] area = { "202" };
        assertEquals(1, housebuilding.getMinimum(area));
    }

    @Test
    public void case78() {
        String[] area = { "9" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case79() {
        String[] area = { "099" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case80() {
        String[] area = { "033" };
        assertEquals(2, housebuilding.getMinimum(area));
    }

    @Test
    public void case81() {
        String[] area = { "11", "91" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case82() {
        String[] area = { "123", "456", "789" };
        assertEquals(16, housebuilding.getMinimum(area));
    }

    @Test
    public void case83() {
        String[] area = { "0", "8", "8", "8", "9", "9" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case84() {
        String[] area = { "10", "31" };
        assertEquals(2, housebuilding.getMinimum(area));
    }

    @Test
    public void case85() {
        String[] area = { "1", "2", "3", "4" };
        assertEquals(2, housebuilding.getMinimum(area));
    }

    @Test
    public void case86() {
        String[] area = { "22", "44" };
        assertEquals(2, housebuilding.getMinimum(area));
    }

    @Test
    public void case87() {
        String[] area = { "1666666666666666666666666666666666666666669" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case88() {
        String[] area = { "009" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case89() {
        String[] area = { "919", "111" };
        assertEquals(14, housebuilding.getMinimum(area));
    }

    @Test
    public void case90() {
        String[] area = { "012" };
        assertEquals(1, housebuilding.getMinimum(area));
    }

    @Test
    public void case91() {
        String[] area = { "177777" };
        assertEquals(5, housebuilding.getMinimum(area));
    }

    @Test
    public void case92() {
        String[] area = { "0999" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case93() {
        String[] area = { "01001010", "10100010", "89898998", "98898989", "01010101", "98989898" };
        assertEquals(170, housebuilding.getMinimum(area));
    }

    @Test
    public void case94() {
        String[] area = { "0009" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case95() {
        String[] area = { "9896325", "9998958", "0012011", "0231212", "2251242", "9789789", "6582525" };
        assertEquals(118, housebuilding.getMinimum(area));
    }

    @Test
    public void case96() {
        String[] area = { "19999" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case97() {
        String[] area = { "11889" };
        assertEquals(13, housebuilding.getMinimum(area));
    }

    @Test
    public void case98() {
        String[] area = { "02" };
        assertEquals(1, housebuilding.getMinimum(area));
    }

    @Test
    public void case99() {
        String[] area = { "018" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case100() {
        String[] area = {};
        assertEquals(8750, housebuilding.getMinimum(area));
    }

    @Test
    public void case101() {
        String[] area = { "9999", "0000", "5555" };
        assertEquals(32, housebuilding.getMinimum(area));
    }

    @Test
    public void case102() {
        String[] area = { "78900" };
        assertEquals(15, housebuilding.getMinimum(area));
    }

    @Test
    public void case103() {
        String[] area = { "0000", "9999" };
        assertEquals(32, housebuilding.getMinimum(area));
    }

    @Test
    public void case104() {
        String[] area = {};
        assertEquals(10000, housebuilding.getMinimum(area));
    }

    @Test
    public void case105() {
        String[] area = { "01" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case106() {
        String[] area = { "90", "00" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case107() {
        String[] area = { "11", "19" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case108() {
        String[] area = { "199" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case109() {
        String[] area = { "9111" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case110() {
        String[] area = { "169" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case111() {
        String[] area = { "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999" };
        assertEquals(10000, housebuilding.getMinimum(area));
    }

    @Test
    public void case112() {
        String[] area = { "00000000000", "11111111111", "22222222222", "33333333333", "44444444444", "55555555555", "66666666666", "77777777777", "88888888888", "99999999999", "00123456789" };
        assertEquals(244, housebuilding.getMinimum(area));
    }

    @Test
    public void case113() {
        String[] area = { "0000008888899999" };
        assertEquals(47, housebuilding.getMinimum(area));
    }

    @Test
    public void case114() {
        String[] area = {};
        assertEquals(1800, housebuilding.getMinimum(area));
    }

    @Test
    public void case115() {
        String[] area = { "33322", "44888" };
        assertEquals(14, housebuilding.getMinimum(area));
    }

    @Test
    public void case116() {
        String[] area = { "0008" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case117() {
        String[] area = { "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "00009" };
        assertEquals(8, housebuilding.getMinimum(area));
    }

    @Test
    public void case118() {
        String[] area = { "9997000" };
        assertEquals(24, housebuilding.getMinimum(area));
    }

    @Test
    public void case119() {
        String[] area = { "5" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case120() {
        String[] area = { "0", "0", "0", "8" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case121() {
        String[] area = { "789" };
        assertEquals(1, housebuilding.getMinimum(area));
    }

    @Test
    public void case122() {
        String[] area = { "119" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case123() {
        String[] area = {};
        assertEquals(8750, housebuilding.getMinimum(area));
    }

    @Test
    public void case124() {
        String[] area = { "911" };
        assertEquals(7, housebuilding.getMinimum(area));
    }

    @Test
    public void case125() {
        String[] area = { "3888888", "9999999", "9999999", "8888899" };
        assertEquals(5, housebuilding.getMinimum(area));
    }

    @Test
    public void case126() {
        String[] area = { "000", "000" };
        assertEquals(0, housebuilding.getMinimum(area));
    }

    @Test
    public void case127() {
        String[] area = { "99", "91", "99", "11" };
        assertEquals(21, housebuilding.getMinimum(area));
    }

}
