package topc.test.greedy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.greedy.*;

public class ApplesAndOrangesEasyTest {
    ApplesAndOrangesEasy applesandorangeseasy = new ApplesAndOrangesEasy();

    @Test
    public void case1() {
        int N = 3;
        int K = 2;
        int[] info = {  };
        assertEquals(2, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case2() {
        int N = 10;
        int K = 3;
        int[] info = { 3, 8 };
        assertEquals(2, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case3() {
        int N = 9;
        int K = 4;
        int[] info = { 1, 4 };
        assertEquals(5, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case4() {
        int N = 9;
        int K = 4;
        int[] info = { 2, 4 };
        assertEquals(4, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case5() {
        int N = 23;
        int K = 7;
        int[] info = { 3, 2, 9, 1, 15, 23, 20, 19 };
        assertEquals(10, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case6() {
        int N = 1541;
        int K = 641;
        int[] info = { 1037, 866, 1024, 41, 1027, 165, 1452, 1267, 888, 1308, 988, 1494, 785, 473, 551, 536, 1060, 687, 155, 643, 377, 207, 946, 510, 264, 628, 680, 1079, 364, 46, 491, 1028, 595, 86, 1216, 485, 1285, 767, 845, 1276, 120, 171, 1379, 735, 512, 639, 345, 1378, 351, 881, 334, 997, 1302, 434, 1020, 755, 383, 323, 202, 548, 83, 1520, 105, 370, 1000, 765, 379, 135, 1353, 1055, 1148, 163, 740, 354, 431, 606, 182, 304, 407, 73, 1087, 322, 416, 985, 1226, 1453, 274, 784, 824, 357, 940, 626, 196, 1233, 1529, 1466, 79, 1061, 945, 412, 89, 195, 722, 1208, 1095, 1019, 1432, 864, 475, 294, 1398, 998, 635, 243, 1122, 1039, 944, 1193, 1493, 817, 992, 1416, 1200, 1066, 1431, 557, 417, 622, 1418, 1230, 331, 631, 1415, 724, 217, 376, 1217, 1126, 30, 394, 715, 1541, 625, 937, 1016, 474, 644, 591, 795, 57, 21, 1514, 279, 176, 747, 446, 1346, 928, 751, 177, 910, 1358, 140, 695, 1053, 670, 1228, 841, 1100, 1275, 48, 1284, 1172, 798, 1132, 803, 1221, 674, 1241, 614, 969, 1139, 464, 762, 133, 739, 1430, 468, 1234, 1484, 1469, 1097, 737, 975, 1517, 877, 697, 1288, 1409, 1519, 1099, 926, 675, 771, 316, 678, 1192, 930, 369, 813, 1309, 268, 489, 1287, 1176, 744, 137, 252, 833, 710, 388, 1042, 209, 72, 481, 303, 158, 1478, 25, 1093, 215, 38, 479, 442, 1033, 823, 638, 1252, 627, 599, 332, 1412, 1062, 248, 590, 230, 620, 1400, 363, 90, 1362, 1138, 1249, 636, 1094, 1117, 1403, 999, 1507, 853, 1278, 1129, 984, 1417, 650, 1377, 927, 1468, 1533, 224, 67, 821, 288, 1043, 1459, 1473, 1522, 1360, 1447, 1109, 1315, 240, 1310, 662, 931, 847, 1084, 1539, 453, 115, 459, 1196, 261, 1166, 292, 125, 1185, 799, 542, 1250, 317, 106, 1322, 1319, 257, 758, 1106, 1198, 312, 1029, 1115, 101, 1440, 989, 164, 1482, 934, 1392, 870, 117, 669, 1480, 732, 122, 242, 544, 516, 611, 440, 701, 523, 194, 827, 477, 890, 210, 507, 1121, 94, 773, 826, 1159, 974, 579, 301, 838, 1311, 546, 462, 973, 774, 1067, 277, 582, 214, 1365, 623, 565, 1163, 1153, 584, 1399, 1434, 753, 65, 1261, 278, 493, 543, 272, 99, 886, 9, 340, 482, 1209, 77, 1364, 805, 1213, 905, 894, 1467, 914, 1113, 883, 1177, 1359, 344, 1022, 54, 126, 1540, 534, 1133, 78, 81, 110, 390, 1532, 6, 180, 1036, 1246, 302, 1171, 232, 1382, 1086, 1111, 1237, 16, 1289, 1523, 1488, 652, 45, 1325, 1329, 314, 138, 226, 676, 834, 347, 406, 1151, 1272, 1295, 759, 143, 587, 814, 1277, 503, 897, 1356, 664, 1402, 205, 978, 451, 121, 342, 818, 124, 18, 1406, 1071, 941, 707, 1375, 29, 91, 348, 50, 501, 1462, 1242, 1298, 811, 1134, 825, 1058, 399, 1424, 250, 1070, 605, 1189, 352, 62, 1470, 1170, 149, 289, 1089, 1269, 1045, 1180, 107, 564, 567, 637, 1397, 777, 265, 1143, 466, 262, 1427, 1049, 520, 23, 1465, 157, 787, 1135, 1436, 711, 425, 1158, 549, 528, 159, 1396, 1002, 284, 55, 593, 1344, 467, 384, 1347, 562, 1218, 172, 1511, 1489, 281, 366, 852, 1063, 1444, 1191, 509, 458, 775, 1101, 1232, 706, 938, 253, 875, 663, 783, 1219, 1082, 980, 92, 855, 1300, 486, 574, 915, 899, 1492, 1150, 295, 511, 533, 356, 1245, 1215, 1348, 280, 1312, 385, 705, 884, 942, 684, 812, 1368, 959, 761, 768, 699, 1475, 659, 788, 756, 108, 1509, 208, 328, 573, 178, 231, 1186, 465, 558, 570, 1313, 1442, 714, 313, 947, 320, 1264, 193, 1178, 374, 568, 1146, 26, 355, 935, 1405, 1408, 1404, 134, 1332, 1118, 104, 704, 983, 1054, 1072, 306, 1142, 1342, 879, 84, 1316, 1064, 1385, 222, 1486, 691, 244, 1088, 922, 428, 1046, 725, 1238, 530, 153, 1461, 1299, 20, 1371, 531, 487, 387, 12, 305, 539, 1389, 373, 1443, 903, 736, 2, 1268, 882, 993, 410, 577, 405, 1040, 1390, 723, 515, 1373, 876, 97, 700, 148, 1318, 438, 419, 1026, 896, 902, 1144, 907, 939, 555, 189, 790, 800, 561, 819, 815, 970, 588 };
        assertEquals(784, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case7() {
        int N = 1263;
        int K = 840;
        int[] info = { 641, 143, 64, 782, 214, 875, 346, 1246, 528, 1070, 246, 259, 548, 1010, 1090, 773, 249, 634, 1084, 739, 622, 1261, 1144, 982, 975, 415, 476, 1019, 906, 1099, 1184, 352, 998, 1213, 534, 145, 71, 936, 1263, 341, 892, 928, 43, 653, 800, 365, 1163, 356, 422, 742, 18, 454, 1160, 1223, 812, 771, 574, 990, 977, 1043, 575, 818, 7, 135, 1193, 283, 428, 386, 769, 13, 492, 1260, 2, 330, 1045, 1164, 61, 54, 1008, 313, 1181, 533, 1005, 716, 538, 1158, 1230, 199, 243, 1108, 587, 1142, 1180, 1100, 981, 529, 269, 1044, 256, 516, 888, 227, 683, 353, 826, 264, 874, 380, 503, 1041, 862, 205, 823, 632, 406, 290, 1107, 40, 29, 843, 120, 922, 65, 491, 720, 689, 331, 329, 567, 464, 523, 808, 379, 611, 22, 1257, 591, 969, 221, 1215, 1182, 758, 284, 1017, 20, 569, 128, 980, 654, 104, 551, 965, 730, 1187, 360, 573, 294, 1046, 342, 755, 1167, 949, 677, 46, 881, 1085, 1178, 282, 357, 399, 976, 598, 552, 1216, 617, 621, 87, 639, 1155, 606, 722, 844, 597, 177, 566, 277, 60, 1052, 391, 287, 334, 323, 902, 1096, 247, 1154, 665, 244, 1211, 774, 202, 485, 882, 388, 660, 605, 457, 885, 505, 1020, 612, 319, 39, 870, 490, 1120, 685, 314, 910, 681, 645, 729, 797, 4, 663, 788, 757, 801, 614, 471, 775, 673, 72, 695, 125, 166, 162, 23, 1233, 203, 241, 655, 1129, 237, 92, 1074, 662, 806, 307, 229, 447, 510, 822, 544, 418, 154, 1259, 983, 79, 877, 188, 478, 9, 1151, 1173, 298, 161, 225, 539, 1077, 1247, 456, 616, 498, 152, 1065, 57, 427, 1132, 222, 615, 285, 345, 272, 470, 1122, 293, 47, 767, 991, 705, 439, 992, 8, 432, 265, 728, 340, 1170, 886, 315, 1128, 36, 1022, 493, 747, 131, 766, 112, 953, 804, 652, 1104, 927, 310, 496, 571, 1226, 779, 311, 810, 440, 570, 1102, 631, 474, 413, 608, 349, 499, 148, 233, 419, 1248, 816, 396, 583, 15, 592, 1081, 1012, 1177, 85, 577, 1141, 325, 796, 952, 920, 737, 223, 643, 28, 100, 651, 193, 412, 90, 805, 727, 126, 385, 1253, 861, 1190, 150, 33, 151, 1033, 1112, 1189, 137, 291, 770, 304, 1243, 1146, 871, 504, 594, 482, 682, 102, 1066, 107, 750, 190, 584, 628, 1242, 1092, 1038, 688, 746, 178, 1229, 172, 996, 777, 397, 58, 175, 897, 813, 1069, 252, 423, 522, 165, 753, 1239, 1051, 798, 564, 519, 950, 430, 1116, 987, 889, 218, 425, 857, 297, 972, 701, 187, 669, 230, 473, 200, 14, 508, 819, 743, 811, 1110, 1114, 261, 563, 26, 610, 749, 947, 19, 1200, 180, 1048, 670, 262, 863, 867, 278, 459, 1119, 1003, 147, 679, 1168, 712, 984, 855, 155, 734, 322, 434, 475, 328, 206, 603, 536, 1212, 86, 869, 1134, 24, 201, 893, 224, 122, 362, 697, 600, 1097, 756, 923, 401, 303, 1138, 925, 1080, 266, 731, 501, 216, 242, 212, 568, 780, 192, 194, 350, 497, 937, 589, 407, 607, 511, 512, 48, 1106, 453, 1156, 394, 646, 103, 924, 253, 1039, 78, 1205, 891, 1209, 635, 231, 433, 326, 1053, 899, 257, 1241, 348, 993, 979, 1186, 316, 1256, 1194, 789, 21, 602, 854, 733, 864, 1166, 366, 1262, 629, 273, 1098, 411, 542, 236, 400, 752, 601, 378, 859, 907, 545, 160, 260, 633, 1202, 814, 1121, 790, 1078, 1172, 732, 706, 276, 726, 354, 994, 136, 876, 793, 333, 1185, 620, 375, 410, 671, 41, 384, 1101, 99, 1217, 852, 945, 1176, 1148, 17, 1183, 1029, 132, 803, 524, 1206, 847, 451, 799, 335, 51, 1087, 502, 296, 940, 251, 1007, 292, 926, 1068, 215, 1111, 52, 668, 664 };
        assertEquals(635, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case8() {
        int N = 1396;
        int K = 47;
        int[] info = { 354, 437, 1098, 17, 52, 340, 9, 1039, 1385, 871, 166, 448, 738, 1187, 265, 747, 1366, 808, 571, 1038, 1234, 1209, 966, 517, 1085, 1376, 148, 674, 901, 399, 1140, 910, 1064, 776, 58, 1149, 488, 520, 1325, 1230, 1361, 1352, 752, 640, 297, 1239, 170, 1001, 386 };
        assertEquals(687, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case9() {
        int N = 556;
        int K = 416;
        int[] info = { 50, 21, 298, 340, 14, 119, 398, 41, 154, 1, 305, 267, 144, 386, 481, 473, 329, 184, 51, 294, 251, 22, 437, 137, 324, 142, 189, 68, 326, 509, 15, 100, 375, 84, 56, 231, 65, 314, 79, 526, 160, 174, 197, 429, 425, 75, 76, 527, 336, 203, 327, 313, 125, 159, 393, 482, 282, 192, 431, 544, 146, 353, 9, 456, 379, 67, 182, 396, 391, 220, 214, 208, 548, 218, 59, 188, 210, 494, 48, 23, 234, 454, 468, 132, 36, 344, 52, 532, 361, 302, 183, 551, 323, 493, 378, 2, 374, 276, 529 };
        assertEquals(348, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case10() {
        int N = 1020;
        int K = 25;
        int[] info = { 273, 491, 673, 533, 87, 703, 761, 613, 884, 629, 562, 510, 610, 604, 994, 337, 585, 434, 319, 519, 333, 511, 414, 408, 915, 320, 112, 640, 21, 219, 846, 644, 1010, 603, 591, 441, 443, 139, 105, 277, 977, 734, 839, 850, 137, 336, 901, 96, 719, 1003, 223, 343, 72, 254, 741, 433, 982, 639, 909, 620, 997, 287, 748, 387, 136, 294, 534, 392, 791, 458, 252, 292, 226, 952, 866, 843, 771, 670, 807, 720, 593, 193, 385, 961, 527, 339, 144, 38, 715, 406, 375, 264, 816, 122, 627, 482, 835, 391, 573, 634, 985, 135, 810, 318, 818, 106, 517, 379, 455, 435, 169, 409, 594, 431, 293, 298, 309, 934, 378, 2, 284, 931 };
        assertEquals(486, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case11() {
        int N = 1752;
        int K = 1206;
        int[] info = { 588, 464, 673, 115, 732, 1526, 940, 1701, 1714, 486, 11, 948, 32, 900, 242, 1732, 855, 973, 547, 1254, 1558, 1547, 124, 333, 1359, 1089, 28, 480, 194, 487, 609, 189, 621, 237, 850, 630, 79, 874, 1211, 1433, 880, 1596, 1442, 885, 254, 1494, 1110, 617, 1518, 800, 946, 910, 757, 801, 503, 190, 592, 820, 243, 329, 1123, 290, 574, 611, 814, 356, 147, 1691, 714, 724, 61, 1008, 822, 1304, 490, 1366, 712, 1117, 157, 1588, 564, 1527, 1434, 1510, 651, 1422, 1220, 1138 };
        assertEquals(1149, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case12() {
        int N = 1803;
        int K = 575;
        int[] info = { 1081, 1426, 1677, 723, 891, 1550, 685, 827, 196, 1607, 111, 286, 1422, 211, 82, 1664, 562, 1042, 1077, 1280, 1614, 445, 622, 1771, 688, 56, 1072, 1371, 1162, 79, 421, 712, 1532, 980, 1055, 1486, 345, 1109, 1744, 61, 1094, 1702, 1010, 218, 761, 469, 1798, 237, 426, 1108, 452, 951, 232, 180, 1411, 1225, 1547, 18, 1431, 859, 1711, 773, 937, 53, 233, 1131, 1330, 1534, 601, 1056, 1745, 1415, 257, 649, 1709, 1195, 398, 124, 1004, 949, 618, 63, 384, 366, 585, 1726, 837, 1483, 228, 1434, 919, 1152, 728, 453, 910, 1133, 1666, 1135, 157, 20, 23, 987, 49, 739, 1183, 448, 311, 1400, 1770, 1118, 578, 187, 477, 60, 429, 707, 650, 444, 1122, 1368, 979, 1348, 528, 890, 857, 1387, 633, 382, 1372, 768, 1533, 1544, 821, 74, 1442, 230, 938, 1644, 169, 1620, 263, 94, 472, 5, 1591, 1476, 352, 1141, 167, 392, 681, 1579, 240, 853, 1780, 872, 533, 1303, 371, 1731, 843, 222, 1468, 177, 823, 564, 573, 895, 262, 1312, 876, 1578, 22, 1445, 1139, 692, 1315, 1209, 1204, 1048, 1562, 1654, 144, 458, 8, 289, 673, 1708, 1232, 1646, 996, 389, 898, 1239, 216, 1301, 741, 406, 1354, 1463, 540, 434, 1112, 611, 606, 1215, 1159, 1691, 1065, 1656, 934, 319, 1513, 972, 727, 1781, 1378, 664, 1234, 887, 1449, 925, 1617, 1243, 1086, 1521, 754, 73, 1134, 1273, 1465, 1390, 1192, 580, 556, 1304, 195, 377, 1730, 118, 1704, 1090, 1742, 1345, 1146, 785, 755, 1564, 660, 634, 1792, 1187, 1567, 270, 1196, 1510, 1062, 1598, 588, 291, 1736, 738, 138, 1038, 646, 1714, 725, 407, 795, 992, 968, 913, 1282, 1688, 535, 626, 1639, 1732, 587, 545, 855, 381, 249, 1599, 1295, 403, 176, 402, 31, 110, 1497, 1601, 324, 400, 1034, 419, 1539, 1447, 200, 1258, 148, 225, 552, 1458, 1554, 1237, 480, 1373, 314, 546, 1612, 582, 420, 493, 544, 1625, 1092, 1241, 1503, 1512, 408, 659, 1375, 953, 298, 902, 1546, 251, 149, 1522, 613, 1689, 700, 272, 1271, 1430, 1450, 1230, 482, 309, 1682, 658, 1575, 1120, 173, 1170, 1803, 508, 1399, 1269, 743, 847, 512, 1123, 323, 740, 1328, 391, 1721, 570, 373, 449, 1427, 526, 1287, 1637, 1007, 1488, 1734, 1053, 1508, 893, 466, 1548, 1136, 791, 1361, 883, 424, 1525, 1324, 539, 903, 128, 1205, 1132, 1469, 208, 1479, 960, 476, 145, 1291, 1437, 936, 1275, 625, 86, 917, 527, 1566, 1392, 467, 549, 641, 153, 571, 1480, 133, 989, 29, 1543, 463, 961, 1526, 446, 786, 417, 348, 834, 801, 1635, 351, 343, 1161, 81, 742, 814, 1655, 1743, 985, 959, 806, 1660, 358, 16, 1501, 550, 798, 2, 360, 899, 1031, 236, 1396, 524, 1467, 1182, 43, 1360, 715, 432, 1492, 668, 878, 1679, 1560, 505, 1489, 1754, 645, 468, 393, 1565, 152, 1772, 561, 1597, 1000, 1643, 1502, 670, 1049, 198, 1151, 882, 1444, 935, 1557, 510, 496, 667, 776, 779, 58, 1645, 775, 759, 501, 1455, 1393, 1017, 665, 116, 1769, 908, 586, 963, 1582, 1788, 412, 803, 264, 223, 64, 1624, 941, 523, 1021, 1505, 698, 927, 316, 499, 62, 1033, 1377, 182, 423, 427, 1272, 584, 1144, 1419, 672, 47, 861, 487, 1353, 811 };
        assertEquals(939, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case13() {
        int N = 1769;
        int K = 287;
        int[] info = { 1711, 902, 1009, 295, 555, 1616, 123, 332, 603, 1300, 704, 1135, 926, 1035, 423, 754, 507, 930, 226, 1252, 266, 1735, 839, 17, 1186, 1323, 1011, 643, 1492, 1374, 1421, 895, 1670, 1199, 1443, 992, 807, 8, 751, 1247, 1231, 1604, 394, 663, 1366, 575, 1673, 1038, 1000, 151, 376, 1355, 1201, 1553, 1540, 824, 1080, 1640, 1493, 233, 956, 1138, 448, 1146, 1412, 733, 1401, 1545, 1725, 264, 120, 833, 1075, 31, 477, 261, 406, 638, 509, 245, 554, 546, 1477, 279, 162, 1025, 59, 813, 1450, 1496, 1005, 1558, 382, 552, 1241, 1018, 939, 941, 968, 1549, 1404, 1260, 1557, 472, 1057, 533, 907, 1398, 744, 1676, 270, 1631, 860, 181, 90, 823, 26, 13, 250, 747, 1582, 595, 1757, 1078, 1316, 1227, 237, 1346, 957, 350, 940, 835, 1006, 1535, 1480, 1541, 241, 112, 401, 9, 1150, 217, 929, 474, 1027, 1603, 1556, 176, 1607, 1583, 694, 1331, 705, 1579, 1763, 729, 656, 1281, 947, 456, 1397, 1484, 1538, 1498, 1172, 1195, 1185, 147, 886, 654, 579, 1110, 796, 1455, 1098, 1042, 573, 1587, 463, 117, 826, 377, 545, 504, 499, 1290, 19, 324, 1052, 1432, 1765, 212, 23, 543, 1576, 454, 1750, 400, 434, 1192, 1387, 55, 1095, 578, 1454, 1622, 922, 1580, 580, 1539, 274, 313, 1456, 166, 1262, 1760, 1169, 699, 1274, 1239, 1068, 1488, 505, 1499, 344, 597, 75, 265, 1295, 599, 1310, 131, 1605, 1203, 887, 874, 37, 1114, 925, 91, 1120, 1332, 179, 200, 498, 632, 953, 898, 33, 11, 432, 1304, 140, 41, 1400, 338, 1489, 16, 993, 1513, 417, 1343, 1001, 1234, 866, 755, 1384, 268, 779, 542, 1315, 977, 155, 1409, 114, 1094, 100, 1156, 1769, 1125, 846, 21, 1569, 568, 1453, 108, 1720, 1041, 904, 1682, 7, 431, 1710, 724, 178, 870, 1685, 609 };
        assertEquals(905, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case14() {
        int N = 1766;
        int K = 414;
        int[] info = { 607, 152, 1615, 246, 1566, 181, 1372, 813, 942, 18, 24, 10, 57, 1635, 1072, 276, 828, 1181, 598, 302, 1688, 216, 1731, 609, 1599, 1619, 1436, 1278, 1008, 1044, 878, 1725, 842, 297, 1676, 1601, 838, 1709, 576, 14, 1188, 1591, 866, 488, 1169, 1534, 648, 1205, 97, 290, 781, 194, 1391, 1678, 1739, 408, 708, 1545, 107, 119, 21, 1288, 251, 212, 169 };
        assertEquals(938, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case15() {
        int N = 1032;
        int K = 225;
        int[] info = { 49, 858, 788, 313, 117, 294, 141, 825, 308, 711, 645, 312, 237, 373, 154, 115, 668, 1001, 329, 995, 688, 907, 326, 689, 636, 511, 82, 763, 828, 997, 803, 488, 480, 697, 770, 432, 849, 991, 924, 447, 259, 289, 765, 85, 111, 834, 603, 673, 92, 613, 1026, 374, 666, 409, 591, 450, 864, 423, 467, 99, 78, 548, 959, 81, 469, 650, 189, 64, 220, 893, 577, 580, 305, 12, 567, 173, 384, 121, 93, 963, 509, 531, 840, 742, 268, 692, 393, 589, 434, 69, 804, 357, 519, 10, 358, 1016, 122, 854, 1014, 687, 420, 351, 753, 48, 752, 750, 290, 214, 940, 946, 987, 710, 113, 321, 427, 461, 593, 130 };
        assertEquals(545, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case16() {
        int N = 1468;
        int K = 334;
        int[] info = { 789, 202, 446, 257, 472, 497, 1201, 1313, 636, 535, 667, 1396, 66, 2, 1278, 934, 81, 1272, 870, 815, 896, 662, 738, 1102, 260, 235, 1097, 116, 167, 1190, 996, 646, 1239, 160, 1218, 65, 820, 1275, 946, 1008, 203, 1408, 410, 91, 1057, 877, 330, 474, 179, 1147, 1168, 13, 252, 1454, 763, 882, 1191, 19, 951, 548, 47, 680, 262, 798, 838, 804, 817, 889, 275, 661, 1084, 1151, 1185, 52, 391, 303, 853, 25, 341, 792, 1310, 1447, 1225, 215, 1285, 106, 386, 1137, 696, 1391, 1460, 450, 207, 1000, 1066, 383, 1016, 1406, 1182, 1090, 610, 1169, 1297, 767, 686, 1037, 1154, 807, 1139, 120, 549, 805, 1422, 339, 599, 1298, 938, 663, 378, 847, 55, 278, 1238, 1263, 778, 1253, 722, 648, 1060, 315, 139, 1189, 1222, 762, 1262, 709, 913, 468, 7, 174, 1435, 726, 745, 1350, 41, 912, 1445, 858, 520, 754, 30, 145, 1106, 982, 569, 1136, 1415, 588, 209, 1332, 604, 434, 961, 1179, 1230, 1197, 878, 654, 111, 8, 816, 795, 924, 372, 1074, 899, 507, 1288, 1370, 15, 366, 1048, 727, 476, 280, 499, 533, 672, 1410, 336, 99, 128, 98, 631, 1021, 534, 1324, 1361, 581, 399, 702, 357, 269, 900, 1455, 48, 869, 1467, 1300, 302, 990, 220, 169, 970, 362, 824, 454, 832, 112, 1453, 1107, 359, 1, 988, 388, 700, 1434, 144, 5, 890, 467, 1043, 1202, 1194, 688, 142, 1161, 1193, 151, 597, 901, 545, 627, 135, 1069, 630, 54, 501, 194, 585, 578, 170, 884, 1004, 1423, 785, 1006, 424, 812, 617, 960, 639, 385, 38, 956, 1299, 1019, 671, 1081, 363, 526, 452, 435, 18, 104, 143, 1013, 1375, 574, 68, 514, 1232, 547, 995, 1051, 1233, 198, 506, 1184, 1417, 1198, 206, 873, 1065, 1248, 281, 1101, 843, 781, 1177, 529, 608, 379, 221, 525, 172, 1234, 1311, 102, 307, 737, 247, 1354, 1215, 968, 605, 1385, 123, 1131, 108, 117, 9, 790, 580, 598, 911, 825, 286, 1321, 1098, 1250, 168, 253, 61, 771, 1122, 528, 933, 122, 331, 1128, 1340, 1073, 225, 17, 318, 433, 1431, 455, 844, 862, 1268, 249, 802, 175, 1373, 1022, 659, 633, 1200, 1412, 1001, 360, 119, 213, 16, 1421, 457, 136, 1281, 1114, 607, 583, 1317, 530, 768, 675, 1293, 480, 725, 484, 444, 59, 1463, 620, 542, 83, 1329, 308, 470, 1427, 904, 222, 885, 1430, 1398, 297, 562, 201, 466, 29, 184, 954, 1276, 967, 1258, 131, 51, 300, 518, 1344, 1405, 1292, 1387, 947, 945, 1150, 56, 747, 1156, 508, 842, 229, 210, 690, 782, 546, 469, 423, 240, 966, 3, 1457, 698, 310, 836, 575, 369, 852, 1314, 1149, 458 };
        assertEquals(760, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case17() {
        int N = 1831;
        int K = 1714;
        int[] info = { 249, 515, 804, 313, 1398, 829, 86, 66, 1535, 1205, 941, 831, 220, 1457, 1066, 1716, 1343, 790, 93, 1622, 36, 1496, 339, 87, 1587, 617, 10, 1340, 601, 1242, 1426, 777, 49, 1548, 184, 1734, 1489, 680, 1480, 1631, 15, 698, 718, 1351, 1292, 534, 1379, 659, 326, 982, 635, 107, 42, 1802, 695, 677, 255, 1565, 1396, 1436, 1319, 145, 525, 1448, 498, 1049, 1303, 322, 787, 1519, 1210, 1812, 459, 901, 862, 895, 954, 1302, 44, 577, 102, 1581, 756, 197, 240, 1746, 1123, 625, 1105, 427, 675, 927, 22, 1752, 552, 1149, 1720, 54, 1159, 352, 564, 791, 938, 571, 1593, 580, 1180, 1220, 1813, 507, 1168, 1401, 970, 489, 1345, 1561, 1445, 1410, 353, 74, 689, 949, 1341, 457, 542, 629, 1647, 741, 276, 1542, 551, 1338, 819, 1211, 70, 218, 1823, 950, 17, 713, 630, 893, 1257, 162, 1353, 127, 282, 1344, 730, 1004, 1609, 861, 1297, 1099, 925, 529, 142, 1329, 977, 943, 1438, 1584, 398, 662, 1215, 496, 299, 332, 1385, 1425, 980, 735, 144, 1085, 1784, 611, 349, 21, 431, 1271, 1254, 1173, 479, 419, 643, 1199, 575, 272, 684, 171, 1039, 1307, 395, 324, 1773, 1764, 1781, 526, 1523, 167, 1634, 198, 64, 1308, 776, 806, 1200, 1040, 847, 1482, 912, 1176, 1487, 63, 597, 992, 737, 853, 336, 1014, 867, 826, 1476, 1429, 734, 1231, 1030, 402, 1348, 1797, 1139, 1133, 443, 1062, 891, 432, 584, 62, 426, 679, 1025, 1467, 1522, 1582, 1363, 1111, 1253, 1100, 458, 133, 522, 1250, 1384, 452, 1101, 1334, 252, 1001, 271, 1508, 665, 1825, 1465, 1794, 554, 396, 209, 1815, 1598, 1787, 1614, 786, 153, 131, 1321, 1357, 156, 981, 993, 1721, 411, 996, 798, 1495, 1195, 594, 1252, 1235, 1212, 973, 528, 1003, 931, 1732, 1474, 1604, 445, 1323, 76, 686, 771, 1550, 485, 1525, 334, 681, 1512, 205, 986, 1247, 1454, 1233, 189, 779, 418, 748, 759, 1664, 400, 141, 1067, 566, 1140, 1442, 105, 1623, 1574, 80, 711, 1294, 863, 295, 1588, 669, 1096, 1113, 248, 348, 176, 1400, 108, 1399, 1161, 794, 856, 917, 1569, 1537, 1327, 1045, 1372, 1171, 1300, 1, 99, 119, 11, 391, 77, 422, 1650, 1546, 487, 32, 306, 307, 722, 987, 1544, 474, 1204, 957, 1484, 833, 1090, 1466, 166, 942, 1326, 1120, 1130, 965, 1607, 114, 415, 467, 384, 1275, 103, 30, 1494, 82, 1097, 1431, 1060, 514, 1769, 303, 712, 1119, 876, 1807, 1500, 116, 1240, 433, 1753, 25, 1665, 1117, 933, 1263, 1135, 1092, 1052, 1287, 545, 1034, 1632, 1760, 947, 1526, 129, 656, 1316, 821, 1501, 1717, 1285, 314, 344, 521, 767, 159, 1158, 960, 94, 1186, 312, 351, 600, 1269, 16, 1780, 328, 191, 1378, 1381, 1414, 1264, 1433, 1272, 898, 882, 615, 1313, 1243, 1301, 1283, 583, 1576, 1638, 1022, 1554, 1518, 808, 609, 1058, 387, 1606, 740, 978, 1310, 1534, 28, 527, 1514, 1207, 1528, 56, 830, 358, 742, 290, 1455, 852, 265, 769, 716, 839, 999, 899, 1610, 1181, 1449, 610, 484, 317, 908, 442, 572, 79, 896, 576, 1011, 214, 251, 490, 1472, 233, 460, 228, 9, 936, 618, 373, 1366, 871, 92, 906, 1306, 78, 1594, 1035, 1750, 1820, 1293, 1144, 964, 517, 1443, 783, 859, 60, 956, 1268, 1459 };
        assertEquals(974, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case18() {
        int N = 1910;
        int K = 825;
        int[] info = { 1710, 1227, 1282, 673, 1403, 1226, 978, 486, 1478, 377, 196, 1616, 113, 1835, 1274, 1166, 1807, 1861, 1697, 582, 128, 922, 1201, 18, 1529, 1207, 83, 1083, 1688, 379, 1441, 805, 1475, 680, 1845, 1700, 816, 305, 1159, 1714, 420, 755, 39, 1690, 539, 318, 1777, 1589, 1022, 1830, 1010, 721, 1356, 500, 1570, 602, 100, 1864, 1813, 1442, 1810, 1504, 1219, 112, 1315, 1704, 1232, 1881, 37, 468, 652, 934, 1443, 1884, 1430, 328, 841, 1251, 96, 1786, 278, 455, 1450, 431, 1814, 1205, 965, 863, 736, 1879, 1174, 1467, 858, 405, 466, 351, 630, 1338, 1404, 1163, 1548, 720, 657, 1033, 1411, 643, 740, 963, 1607, 1658, 59, 1494, 1029, 1258, 654, 308, 1837, 140, 315, 1525, 607, 806, 234, 611, 1599, 485, 885, 1425, 1753, 1424, 695, 822, 1461, 312, 726, 1862, 1070, 408, 1456, 913, 199, 333, 1106, 480, 1018, 738, 301, 201, 849, 1362, 1301, 947, 843, 1654, 622, 1568, 1755, 111, 1668, 734, 1632, 1629, 1530, 1419, 1136, 883, 1073, 1343, 887, 1323, 10, 1897, 1052, 226, 435, 1246, 1757, 1372, 625, 65, 1701, 1612, 1564, 1195, 553, 1351, 1686, 478, 837, 603, 936, 1055, 1537, 1, 933, 304, 1505, 1399, 743, 572, 751, 1903, 1003, 77, 206, 995, 852, 1640, 344, 275, 1898, 1556, 1781, 1427, 870, 1643, 483, 1259, 595, 534, 608, 599, 335, 704, 861, 228, 994, 1486, 1636, 1341, 432, 302, 167, 1125, 1183, 618, 1796, 163, 991, 126, 529, 1769, 1816, 1099, 1546, 1761, 1909, 467, 1016, 675, 767, 1685, 641, 1823, 119, 1887, 594, 1431, 1646, 915, 1021, 1746, 787, 513, 941, 517, 1687, 251, 1644, 774, 1764, 192, 744, 1511, 803, 1438, 903, 110, 1311, 1107, 1590, 218, 471, 1366, 961, 470, 1134, 1400, 1206, 653, 235, 1001, 117, 1885, 760, 1137, 540, 106, 592, 269, 418, 1518, 980, 397, 392, 699, 944, 1507, 1026, 1050, 1558, 265, 1565, 1204, 1102, 1276, 1032, 1817, 78, 1391, 645, 1459, 818, 1389, 742, 1336, 1765, 791, 395, 896, 371, 1028, 587, 134, 1104, 1025, 1066, 801, 812, 1364, 1076, 449, 1040, 977, 1624, 103, 557, 739, 1498, 789, 1635, 1652, 60, 1451, 240, 1740, 1396, 1534, 1297, 376, 97, 1455, 942, 81, 1309, 839, 752, 748, 1524, 1782, 1617, 613, 968, 1497, 1167, 833, 821, 1123, 1653, 1633, 419, 427, 1429, 823, 1747, 1762, 490, 1613, 1846, 948, 503, 1289, 569, 1890, 358, 1248, 565, 555, 1600, 914, 825, 716, 615, 1502, 1094, 1421, 311, 1216, 225, 1414, 1374, 1482, 430, 874, 1345, 1490, 1767, 1186, 8, 703, 104, 188, 1559, 511, 36, 1049, 1295, 313, 1549, 1485, 387, 640, 623, 859, 931, 54, 23, 477, 808, 58, 1023, 1177, 138, 122, 205, 1185, 766, 1622, 401, 1791, 1005, 461, 1822, 1732, 209, 1583, 1213, 1236, 479, 107, 687, 1268, 530, 545, 1711, 20, 556, 1580, 1128, 559, 319, 528, 1045, 1041, 674, 667, 876, 411, 233, 1322, 889, 428, 246, 382, 1002, 1307, 1707, 1146, 899, 16, 49, 1062, 1527, 1155, 1506, 270, 1409, 277, 663, 484, 881, 346, 590, 33, 1554, 1828, 600, 588, 1462, 1749, 519, 131, 381, 1824, 1561, 990, 1477, 1305, 494, 243, 1415, 1292, 359, 406, 1316, 1615, 1848, 1138, 1733, 458, 21, 1722, 1169, 1412, 443, 1313, 969, 1689, 1368, 552, 1727, 574, 44, 1499, 337, 1501, 82, 606, 1669, 1663, 533, 216, 696, 1303, 1187, 1834, 1802, 1352, 1437, 1328, 1696, 796, 1262, 960, 561, 1385, 1522, 1131, 99, 460, 1241, 352, 92, 1244, 1410, 629, 1867, 799, 1152, 1387, 605, 1584, 1000, 1420, 253, 189, 1579, 1161, 472, 390, 1731, 217, 1354, 733, 1560, 1278, 573, 879, 930, 1605, 1655, 1214, 210, 518, 1269, 1840, 325, 1327, 454, 598, 1172, 169, 1156, 1395, 403, 1863, 1181, 1019, 62, 324, 482, 992, 1875, 593, 1734, 1436, 1265, 400, 1030, 1718, 444, 1759, 151, 872, 624, 737, 1380, 1103, 628, 788, 316, 614, 186, 26, 1465, 84, 547, 932, 1199, 421, 285, 1821, 678, 1857, 1321, 1886, 5, 1483, 780, 906, 1386, 632, 1284, 1190, 1267, 1910, 997, 149, 661, 1793, 1095, 1271, 1630, 139, 782, 758, 1376, 402, 1628, 838, 15, 702, 952, 1059 };
        assertEquals(1019, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case19() {
        int N = 1609;
        int K = 31;
        int[] info = { 492, 1143, 1015, 956, 129, 1213, 1024, 213, 989, 851, 509, 821, 232, 1585, 1079, 1566, 999, 185, 1593, 1112, 1457, 619, 1561, 756, 652, 293, 313, 164, 834, 1111, 1209, 771, 678, 1520, 1082, 1183, 1511, 1043, 326, 410, 1181, 483, 1451, 1594, 976, 66, 536, 127, 139, 34, 643, 80, 1555, 848, 948, 47, 1592, 1218, 966, 502, 902, 1148, 714, 1190, 325, 1100, 1365, 401, 446, 1075, 743, 1524, 420, 412, 1073, 1232, 965, 888, 660, 1107, 1599, 609, 1366, 886, 458, 895, 1098, 712, 852, 1271, 1321, 1295, 1314, 82, 10, 1581, 122, 1290, 1262, 1513, 1155, 1138, 1568, 352, 1198, 864, 1401, 63, 766, 298, 1158, 730, 1132, 762, 425, 802, 289, 1406, 1167, 830, 1174, 639, 328, 1276, 1051, 103, 991, 540, 953, 846, 1229, 45, 413, 1333, 423, 1408, 482, 728, 558, 278, 125, 566, 198, 793, 431, 154, 750, 576, 36, 1131, 1164, 934, 1041, 1048, 1, 811, 205, 1322, 655, 1219, 1535, 267, 462, 1032, 1577, 713, 1033, 1127, 253, 32, 1023, 1448, 1596, 589, 1286, 165, 1264, 727, 477, 155, 1590, 588, 807, 857, 1326, 676, 242, 72, 553, 1030, 521, 567, 83, 97, 156, 1608, 1380, 680, 883, 1302, 789, 39, 531, 348, 54, 135, 1545, 1449, 262, 302, 373, 1597, 1410, 327, 583, 1433, 1573, 1460, 1217, 570, 1317, 332, 935, 1509, 1560, 768, 617, 215, 1546, 1576, 408, 661, 259, 1543, 522, 881, 1349, 1473, 1010, 625, 515, 1255, 369, 256, 1354, 18, 44, 491, 157, 854, 897, 1336, 1243, 1430, 361, 640, 356, 1465, 877, 675, 758, 606, 584, 192, 376, 1584, 131, 1137, 797, 1144, 1308, 798, 201, 942, 117, 28, 780, 538, 1342, 1407, 55, 1438, 506, 1293, 1205, 718, 829, 563, 1055, 1145, 556, 905, 114, 1518, 1334, 1552, 987, 1045, 1292, 939, 189, 1387, 1536, 1355, 364, 468, 1215, 210, 874, 513, 534, 720, 224, 221, 1244, 1251, 320, 89, 311, 214, 330, 60, 1175, 1452, 1250, 1605, 1320, 900, 292, 270, 455, 466, 936, 1092, 598, 1230, 940, 487, 294, 1122, 1488, 982, 465, 177, 16, 395, 1150, 842, 1141, 1417, 486, 1350, 1176, 1575, 382, 85, 1252, 923, 1444, 5, 973, 970, 183, 1547, 603, 636, 416, 22, 49, 1435, 1352, 850, 1019, 564, 503, 130, 1311, 938, 193, 1281, 1325, 770, 692, 1530, 1248, 552, 662, 393, 984, 831, 673, 825, 809, 14, 1390, 1059, 367, 1303, 833, 1034, 451, 1194, 196, 958, 70, 1474, 550, 759, 585, 977 };
        assertEquals(760, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case20() {
        int N = 1104;
        int K = 27;
        int[] info = { 826, 501, 252, 310, 268, 26, 439, 802, 485, 424, 297, 745, 58, 782, 101, 714, 554, 13, 989, 312, 564, 346, 492, 88, 104, 63, 73, 49, 628, 287, 730, 361, 139, 539, 878, 363, 627, 111, 672, 33, 823, 356, 872, 154, 1101, 777, 93, 937, 184, 973, 454, 450, 1006, 684, 169, 771, 358, 868, 890, 636, 756, 907, 731, 574, 765, 534, 31, 340, 1097, 687, 558, 933, 1051, 466, 259, 744, 448, 613, 623, 888, 928, 334, 951, 932, 38, 579 };
        assertEquals(530, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case21() {
        int N = 1728;
        int K = 20;
        int[] info = { 842, 1489, 841, 1272, 185, 1187, 240, 672, 1648, 626, 607, 753, 433, 1157, 926, 638, 1457, 900, 1713, 388, 600, 568, 1236, 1109, 1281, 833, 798, 1227, 1135, 1213, 9, 1141, 12, 179, 1009, 63, 175, 562, 41, 946, 1086, 1439, 68, 1078, 234, 36, 852, 1198, 1307, 14, 319, 616, 163, 28, 1170, 750, 1496, 1311, 851, 413, 526, 330, 246, 370, 1501, 103, 656, 1267, 1024, 788, 1031, 975, 155, 1435, 643, 367, 1308, 172, 881, 1237, 162, 1243, 1177, 844, 893, 1424, 383, 1181, 1235, 464, 460, 652, 703, 1726, 91, 575, 1162, 1465, 83, 763, 735, 877, 1681, 919, 866, 1182, 287, 1100, 424, 1378, 290, 193, 1587, 598, 728, 989, 1398, 139, 224, 412, 1017, 1193, 88, 426, 434, 679, 1540, 1331, 940, 942, 739, 1229, 1420, 1289, 223, 1698, 1283, 1508, 1149, 1323, 582, 657, 1249, 914, 1318, 1466, 947, 678, 1423, 860, 438, 1472, 446, 108, 242, 1535, 1330, 421, 1070, 320, 1689, 911, 756, 1301, 34, 116, 733, 962, 787, 816, 375, 1097, 789, 1405, 991, 195, 22, 1073, 358, 1390, 241, 973, 1589, 254, 1293, 1659, 1142, 808, 680, 840, 1215, 741, 993, 1428, 1473, 1125, 311, 1513, 1262, 830, 428, 1172, 897, 705, 1522, 376, 1026, 807, 1597, 1431, 1212, 1163, 1205, 37, 694, 1534, 587, 66, 362, 1116, 549, 1391, 1451, 725, 1610, 215, 1718, 702, 982, 502, 1270, 1255, 718, 1169, 159, 686, 1657, 390, 1324, 1542, 979, 280, 3 };
        assertEquals(852, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case22() {
        int N = 1929;
        int K = 652;
        int[] info = { 1822, 490, 1282, 1013, 620, 1881, 504, 792, 65, 1708, 1783, 1814, 964, 407, 1619, 462, 1217, 1675, 500, 717, 1142, 1201, 341, 1061, 1263, 1356, 879, 1533, 1579, 526, 1460, 1580, 1025, 32, 690, 1113, 1409, 913, 1676, 192, 925, 1066, 586, 1341, 59, 378, 1711, 562, 1320, 582, 1595, 775, 833, 317, 358, 1781, 1656, 1626, 9, 473, 119, 1035, 1506, 1563, 1583, 573, 1901, 1002, 1465, 1819, 1322, 772, 364, 435, 1589, 972, 835, 790, 146, 982, 1915, 741, 305, 1523, 178, 938, 306, 1199, 382, 1078, 1249, 411, 1917, 1592, 220, 1032, 1361, 785, 1274, 1245, 452, 483, 1914, 238, 181, 1719, 272, 1153, 1095, 343, 158, 789, 1686, 489, 28, 629, 997, 1747, 1218, 159, 899, 873, 1888, 1178, 352, 691, 1005, 304, 1800, 1571, 583, 405, 1056, 392, 1874, 1582, 1404, 401, 854, 604, 175, 153, 1722, 826, 457, 1760, 222, 618, 1907, 123, 1541, 1449, 745, 1242, 122, 1763, 1808, 95, 138, 1350, 518, 649, 1464, 400, 320, 1757, 1367, 636, 129, 1051, 572, 427, 1462, 118, 893, 117, 1115, 895, 934, 720, 297, 1391, 1650, 1748, 481, 1353, 1502, 706, 276, 1294, 1474, 713, 861, 642, 1230, 1261, 1008, 758, 840, 77, 926, 784, 419, 1070, 1681, 1851, 416, 643, 48, 1852, 1647, 1635, 714, 1118, 148, 1366, 516, 172, 692, 1507, 213, 206, 1038, 1034, 820, 140, 1090, 1104, 471, 1887, 216, 1096, 245, 1705, 991, 975, 849, 813, 1211, 709, 104, 978, 819, 1510, 662, 354, 413, 388, 637, 1832, 1026, 941, 1856, 1137, 808, 542, 867, 1041, 791, 1637, 110, 210, 1699, 69, 760, 1463, 549, 1758, 746, 1279, 1488, 1085, 425, 1538, 766, 1730, 729, 837, 1895, 603, 396, 595, 1014, 460, 780, 499, 824, 768, 707, 1821, 331, 816, 633, 619, 917, 1823, 36, 402, 399, 1468, 1073, 403, 1689, 1212, 809, 10, 634, 588, 923, 540, 309, 870, 939, 136, 696, 650, 293, 519, 1105, 168, 1403, 1899, 1549, 1000, 237, 1475, 1342, 930, 1632, 115, 1127, 240, 786, 1692, 609, 1176, 794, 275, 116, 315, 335, 1607, 386, 1364, 290, 1285, 1287, 1788 };
        assertEquals(968, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case23() {
        int N = 1349;
        int K = 422;
        int[] info = { 674, 577, 446, 1318, 570, 1018, 546, 41, 1245, 1333, 950, 1261, 917, 1304, 1197, 196, 1235, 590, 773, 757, 740, 1054, 1053, 206, 799, 1114, 1009, 857, 340, 617, 1203, 57, 154, 739, 939, 780, 10, 30, 1230, 984, 452, 597, 953, 466, 175, 609, 1012, 1343, 940, 18, 1262, 1298, 573, 997, 756, 476, 767, 22, 352, 1175, 145, 557, 253, 157, 315, 616, 1216, 1084, 786, 891, 250, 32, 720, 538, 749, 330, 1138, 1007, 380, 455, 457, 311, 1280, 513, 1201, 82, 1134, 802, 728, 588, 368, 194, 955, 316, 61, 1130, 54, 817, 264, 1260, 1089, 1330, 169, 1223, 1107, 20, 987, 860 };
        assertEquals(716, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case24() {
        int N = 1987;
        int K = 1109;
        int[] info = { 93, 493, 26, 112, 1879, 1759, 319, 301, 913, 1471, 1913, 454, 1928, 1723, 1937, 1769, 1608, 969, 9, 560, 1924, 906, 1302, 1254, 1561, 943, 1391, 1375, 505, 682, 1540, 187, 1110, 1927, 296, 1297, 475, 364, 413, 1364, 1436, 1154, 1253, 223, 271, 1818, 1972, 834, 707, 433, 470, 167, 441, 844, 1644, 703, 922, 1059, 684, 798, 568, 1530, 1761, 236, 1962, 226, 64, 1207, 1587, 1126, 340, 120, 1072, 1877, 1488, 416, 1411, 1692, 1524, 304, 35, 1350, 215, 1516, 1651, 962, 1268, 1840, 351, 990, 1550, 1275, 1422, 1792, 1708, 29, 1889, 1111, 307, 1485, 52, 476, 76, 1437, 451, 369, 968, 1814, 123, 610, 1244, 797, 189, 982, 1163, 1872, 1777, 1413, 1775, 1029, 1857, 582, 985, 948, 812, 964, 28, 1534, 1601, 1416, 265, 564, 1217, 376, 1695, 709, 15, 1280, 453, 733, 1531, 708, 55, 1776, 1543, 293, 1489, 1599, 375, 1004, 232, 23, 1742, 1728, 1975, 1311, 143, 33, 13, 300, 841, 1738, 1393, 105, 268, 598, 1477, 1864, 412, 811, 387, 339, 2, 898, 19, 1730, 239, 183, 1166, 1757, 673, 291, 899, 1582, 272, 1860, 1198, 1271, 1250, 427, 503, 784, 574, 1869, 766, 169, 1958, 1307, 14, 946, 116, 468, 1420, 1446, 1693, 292, 1189, 934, 816, 1170, 20, 1831, 335, 1362, 1613, 572, 524, 466, 874, 1586, 1251, 545, 359, 482, 1947, 1145, 1246, 1124, 196, 1490, 1070, 72, 144, 1206, 1720, 495, 713, 1000, 1241, 1318, 801, 644, 883, 1682, 1055, 852, 164, 139, 831, 808, 674, 362, 1677, 432, 368, 477, 609, 71, 498, 589, 977, 88, 892, 134, 1181, 663, 1182, 1315, 675, 40, 77, 608, 974, 34, 251, 1617, 381, 999, 374, 360, 528, 353, 282, 1352, 1455, 358, 1347, 1797, 464, 396, 1152, 1188, 1048, 1868, 1063, 137, 344, 1861, 1640, 1459, 1040, 210, 576, 1835, 246, 1976, 1807, 1600, 107, 900, 1301, 521, 1356, 676, 1267, 1554, 1866, 1740, 1744, 1474, 548, 1053, 840, 1568, 944, 74, 1235, 125, 1838, 43, 1747, 1470, 633, 599, 1402, 1010, 1395, 1870, 1196, 1005, 1763, 371, 886, 1212, 691, 804, 1666, 1506, 1457, 1172, 410, 1502, 443, 769, 419, 537, 714, 597, 1176, 1313, 1006, 1950, 1852, 1505, 473, 267, 756, 1458, 315, 285, 31, 204, 430, 1839, 219, 1778, 57, 1635, 1203, 1332, 472, 496, 390, 1257, 1899, 1521, 497, 1783, 1321, 1926, 1050, 102, 1465, 50, 680, 1781, 1165, 1156, 1418, 261, 1848, 639, 24, 21 };
        assertEquals(1069, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case25() {
        int N = 1207;
        int K = 162;
        int[] info = { 292, 136, 799, 435, 926, 13, 715, 450, 1058, 273, 134, 406, 959, 244, 935, 692, 82, 687, 71, 758, 89, 987, 927, 200, 850, 1113, 661, 1004, 855, 72, 1040, 1017, 1090, 169, 627, 807, 172, 835, 1157, 789, 888, 1087, 477, 97, 1143, 1065, 630, 666, 712, 88, 421, 264, 455, 176, 268, 321, 190, 56, 206, 478, 642, 1007, 921, 1160, 36, 989, 544, 624, 188, 659, 186, 1195, 1046, 92, 25, 431, 842, 999, 548, 894, 1039, 104, 1152, 403, 335, 942, 8, 365, 559, 545, 193, 239, 701, 1164, 963, 939, 861, 1184, 325, 665, 243, 125, 949, 1020, 838, 208, 1088, 1171, 464, 882, 1089, 133, 577, 824, 1054, 873, 1159, 433, 1093, 901, 330, 396, 381, 737, 905, 514, 1192, 166, 213, 962, 955, 487, 1153, 601, 913, 118, 621, 22, 585, 611, 401, 84, 690, 472, 1083, 879, 750, 1073, 534, 343, 83, 856, 485, 889, 313, 353, 727, 1161, 122, 1191, 389, 988, 953, 804, 696, 1147, 173, 1110, 947, 907, 706, 695, 202, 1120, 526, 684, 552, 395, 660, 583, 1133, 114, 731, 382, 260, 266, 566, 19, 500, 95, 602, 1086, 1114, 817, 968, 170, 1053, 210, 520, 307, 973, 290, 793, 819, 557, 1070, 862, 598, 231, 110, 823, 584, 521, 137, 220, 798, 531, 1183, 887, 920, 961, 1201, 700, 752, 364, 324, 342, 153, 340, 492, 259, 301, 1027, 572, 923, 420, 483, 854, 776, 1008, 582, 738, 1116, 300, 681, 516, 772, 555, 869, 384, 956, 830, 285, 1172, 1112, 81, 613, 1094, 1047, 591, 1174, 1206, 149, 1060, 938, 336, 599, 916, 223, 422, 1, 527, 756, 145, 954, 1178, 539, 462, 578, 519, 773, 495, 211, 1129, 639, 1122, 240, 127, 297, 252, 899, 12, 569, 725, 106, 714, 397, 977, 1019, 417, 908, 571, 845, 886, 164, 1158, 179, 651, 629, 885, 457, 451, 38, 360, 392, 524, 390, 314, 442, 55, 144, 1079, 876, 3, 20, 556, 766, 685, 983, 419, 788, 62, 284, 368, 326, 669, 1042, 728, 563, 634, 96, 187, 900, 374, 895, 158, 152, 461, 722, 890, 356, 641, 1010, 286, 1064, 676, 377, 523, 289, 168, 612, 235, 655, 735, 1200, 982, 1059, 818, 573, 586, 465, 1127, 1190, 357, 744, 64, 934, 836, 501, 293, 139, 877, 33, 11, 964, 839, 203, 446, 18, 1063, 1028, 280, 447, 806, 1099, 41, 562, 7, 1182, 604, 271, 247, 73, 494, 1012, 648, 468, 67, 558, 1048, 70, 269, 1119, 317, 204, 981, 970, 1106, 564, 1130 };
        assertEquals(604, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case26() {
        int N = 1921;
        int K = 701;
        int[] info = { 498, 1143, 1609, 1022, 1335, 353, 151, 883, 129, 735, 454, 1011, 436, 1892, 415, 994, 1464, 1210, 400, 935, 1569, 72, 1503, 1253, 114, 1866, 934, 985, 1857, 580, 1895, 256, 1656, 919, 1081, 794, 789, 1073, 1067, 1481, 501, 182, 83, 1195, 812, 1720, 1547, 1138, 1215, 790, 571, 441, 1783, 47, 407, 206, 605, 879, 1871, 1549, 1317, 618, 1759, 583, 66, 886, 906, 1643, 1229, 464, 540, 78, 300, 1282, 1390, 45, 141, 90, 48, 357, 160, 327, 1389, 967, 14, 731, 42, 549, 1448, 524, 1231, 848, 1227, 887, 622, 1263, 1388, 378, 463, 539, 830, 173, 1731, 156, 74, 1293, 533, 905, 1658, 314, 1897, 1127, 1387, 491, 1281, 924, 1041, 126, 1430, 210, 1280, 1845, 36, 39, 963, 766, 1447, 388, 286, 1201, 752, 443, 309, 1715, 347, 1798, 1646, 892, 1342, 1118, 438, 1475, 321, 1340, 1695, 1420, 1563, 749, 614, 1222, 1030, 1078, 898, 82, 260, 1355, 1132, 910, 1817, 1083, 421, 24, 923, 1462, 376, 1637, 576, 1806, 764, 643, 135, 595, 793, 1633, 757, 1265, 582, 476, 1641, 1846, 1792, 1460, 496, 292, 1012, 1664, 1654, 596, 190, 331, 1232, 203, 828, 1218, 1842, 803, 209, 1368, 128, 1439, 75, 262, 1153, 1679, 1131, 553, 895, 1478, 51, 457, 43, 1763, 1008, 1755, 65, 835, 745, 411, 1300, 445, 556, 144, 1726, 332, 304, 1537, 1513, 1408, 1586, 612, 1026, 207, 1257, 8, 598, 529, 1901, 725, 1033, 490, 235, 1346, 468, 1055, 1669, 238, 867, 397, 570, 1750, 1535, 1858, 337, 1305, 1786, 1903, 1884, 1560, 1918, 456, 668, 1539, 269, 134, 458, 555, 1670, 660, 510, 944, 843, 1725, 1053, 242, 1650, 1179, 243, 1260, 1247, 1339, 1722, 625, 874, 1379, 575, 247, 1766, 164, 961, 627, 99, 1103, 631, 1181, 852, 414, 381, 102, 1912, 202, 1486, 218, 1622, 999, 954, 1173, 136, 1823, 1399, 460, 1237, 1487, 1824, 236, 30, 978, 1312, 721, 1328, 1202, 1835, 1023, 739, 212, 435, 452, 916, 97, 18, 474, 279, 1861, 1233, 1623, 1825, 320, 629, 1457, 233, 186, 1406, 1788, 1754, 1820, 1479, 1146, 574, 915, 514, 948, 86, 1836, 383, 305, 1101, 1398, 1708, 642, 1306, 1480, 1211, 1239, 938, 105, 148, 459, 487, 662, 342, 716, 1491, 921, 1090, 93, 1579, 753, 284, 349, 669, 1414, 1114, 1196, 515, 1536, 1844, 805, 878, 1827, 1666, 754, 1684, 750, 67, 261, 646, 412, 1821, 560, 1356, 1098, 231, 16, 1149, 880, 1061, 1769, 1039, 461, 1867, 7, 229, 1688, 969, 1007, 929, 1068, 1374, 1628, 311, 661, 1400, 534, 1800, 1784, 1592, 1318, 1568, 1283, 983, 1826, 591, 1336, 1758, 185, 263, 275, 578, 1795, 538, 1498, 1070, 1541, 1364, 1522, 1886, 1277, 522, 1141, 1301, 1764, 1752, 1690, 1094, 821, 1838, 248, 1789, 1753, 1573, 1484, 1840, 1765, 1818, 340, 1243, 1681, 658, 46, 158, 466, 176, 1423, 1169, 1226, 1175, 1002, 532, 997, 1431, 422, 402, 1353, 719, 137, 1013, 5, 429, 1850, 761, 1733, 1809, 1634, 1010, 1713, 425, 1193, 1538, 1338, 1361, 797, 1230, 1145, 881, 401, 1874, 1577, 70, 1837, 767, 1402, 1262, 645, 600, 1032, 838, 60, 303, 1834, 170, 1076, 972, 1428, 1737, 550, 1604, 1437, 679, 69, 1412, 442, 624, 1741, 649, 1296, 939, 1250, 84, 334, 1691, 1489, 604, 773, 19, 1109, 477, 672, 1120, 333, 650, 249, 769, 617, 1590, 979, 817, 628, 825, 993, 245, 896, 1502, 335, 1214, 493, 71, 1274, 707, 31, 1024, 987, 637, 1190, 232, 1801, 1833, 783, 800, 1217, 792, 1887, 94, 150, 1476, 1718, 1148, 1205, 1533, 648, 1710, 720, 677, 1087, 104, 379, 1370, 1100, 404, 1376, 386, 365, 802, 255, 1391, 1570, 904, 344, 225, 142, 1258, 1271, 900, 831, 1875, 1251, 1492, 1050, 33, 453, 634, 776, 760, 199, 599, 352, 424, 1194, 1558, 444, 1154, 1509, 847, 38, 371, 775, 854, 652, 1839, 1432, 1294, 1813, 1025, 1621, 73, 1192, 1062, 68, 246, 899, 1351, 1603, 795, 282, 1384, 762, 763, 1808, 1678, 20, 1225, 214, 1396, 937, 22, 502, 41, 1683, 1500, 674, 1610, 138, 1735, 1748, 726, 1667, 891, 1532, 1571, 1811, 1128, 1527, 276, 230, 120, 1548, 1793, 1392, 1410, 1249, 1494, 1907, 1508, 1176, 1594, 1404, 1615, 4, 1814, 846, 1891, 1889, 955, 482, 1089, 1405, 1001, 369, 1822, 508, 706, 364, 1005, 940, 615, 741, 298, 585, 1449, 147, 161, 1830, 1056, 989, 296, 1495, 462, 1272, 561, 884, 1700, 1071, 1360, 1156, 470, 1069, 1369, 1097, 1651, 1409, 587, 1680, 1330, 903, 295, 804, 430, 1048, 406, 505, 172, 485, 962, 278, 959, 664, 1220, 447, 1135, 1465, 351, 657, 288, 811, 289, 1612, 655, 1849, 1774, 385, 1077, 779, 506, 1490, 1629, 1341, 163, 265, 1781, 1671, 1198, 841, 1525, 299, 1911, 1302, 448, 1197, 1728, 58, 984, 588, 53, 389, 368, 1805, 780, 1709, 1287, 1082, 1259, 1757, 1890, 1636, 1740, 465, 1326, 124, 1415, 1084, 1520, 1164, 1185, 1921, 1171, 1665, 408, 756, 1902, 1474, 1373, 366, 863, 712, 484, 1511, 620, 1207, 1631, 455, 1187, 116, 106, 1106, 372, 1427, 180, 1371, 928, 729 };
        assertEquals(968, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case27() {
        int N = 1510;
        int K = 1235;
        int[] info = { 512, 545, 551, 760, 1179, 418, 65, 1141, 1049, 1299, 98, 1129, 396, 610, 496, 668, 1326, 388, 755, 1188, 1484, 313, 168, 382, 1286, 491, 157, 795, 269, 36, 195, 1361, 579, 1028, 982, 973, 1160, 807, 605, 526, 498, 286, 431, 1350, 124, 183, 316, 740, 39, 23, 265, 18, 672, 1002, 683, 1337, 628, 1312, 1245, 906, 928, 1416, 383, 342, 19, 133, 153, 460, 247, 384, 1408, 501, 1171, 428, 165, 1491, 174, 698, 1239, 1379, 478, 1446, 872, 55, 1121, 1015, 1469, 1401, 772, 101, 389, 905, 641, 103, 566, 733, 798, 1462, 636, 483, 140, 275, 1347, 567, 273, 1120, 960, 37, 675, 1005, 1039, 1288, 300, 816, 1275, 182, 959, 391, 309, 1403, 886, 218, 172, 1310, 1174, 1147, 794, 289, 79, 925, 737, 1422, 492, 996, 736, 1177, 1332, 595, 590, 208, 1352, 113, 1481, 238, 1072, 1111, 1055, 856, 360, 898, 761, 609, 738, 119, 727, 857, 1411, 978, 303, 161, 447, 1319, 175, 240, 1164, 1367, 972, 884, 206, 31, 592, 775, 833, 1274, 216, 1349, 694, 299, 502, 321, 849, 1082, 651, 1353, 953, 137, 341, 765, 617, 1334, 209, 874, 38, 58, 914, 1087, 387, 660, 839, 1463, 1030, 1130, 1455, 1314, 1035, 35, 331, 353, 778, 427, 728, 532, 865, 509, 1456, 1475, 1322, 880, 315, 983, 73, 445, 830, 701, 470, 1386, 1173, 993, 280, 1428, 357, 301, 1181, 1053, 194, 1279, 707, 346, 966, 72, 646, 714, 1324, 477, 187, 1421, 754, 546, 1273, 398, 722, 343, 25, 97, 68, 895, 497, 934, 1132, 640, 1470, 435, 81, 1000, 190, 1449, 1373, 866, 284, 458, 1507, 1029, 555, 1011, 785, 104, 414, 709, 1370, 1382, 1153, 352, 485, 324, 1155, 254, 15, 797, 538, 82, 277, 255, 1358, 578, 1251, 201, 1357, 1109, 771, 804, 1301, 386, 684, 950, 708, 225, 259, 883, 348, 1019, 1044, 1085, 838, 1508, 77, 680, 1143, 920, 139, 440, 1467, 940, 591, 1405, 129, 1017, 338, 815, 439, 764, 1472, 607, 1488, 612, 1426, 652, 169, 988, 521, 107, 678, 1399, 1369, 827, 250, 1355, 325, 783, 1387, 349, 522, 80, 620, 1162, 955, 481, 534, 659, 1360, 1165, 939, 252, 130, 846, 946, 272, 373, 1012, 1045, 1262, 233, 16, 658, 1354, 1187, 69, 575, 184, 1088, 1176, 796, 921, 1170, 385, 902, 57, 27, 1068, 7, 468, 853, 811, 596, 1126, 626, 731, 1180, 559, 294, 616, 1248, 919, 1136, 935, 766, 687, 285, 662, 952, 1022, 568, 235, 122, 1372, 1439, 614, 4, 1250, 33, 544, 310, 307, 858, 1474, 297, 1412, 271, 563, 577, 1413, 1110, 693, 1004, 141, 1103, 279, 594, 464, 916, 305, 1060, 405, 936, 1341, 156, 963, 1148, 236, 1074, 1064, 164, 1183, 62, 231, 364, 947, 774, 669, 962, 377, 999, 1065, 401, 493, 981, 618, 1393, 1280, 189, 1156, 213, 179, 730, 334, 410, 569, 1402, 1442, 507, 44, 214, 1509, 221, 1380, 230, 541, 93, 417, 436, 720, 688, 817, 1255, 347, 721, 1071, 433, 556, 1308, 1259, 894, 344, 1466, 915, 504, 770, 748, 1113, 971, 1328, 547, 1254, 47, 455, 1037, 1115, 1154, 937, 71, 1394, 990, 1398, 1395, 1182, 868, 671, 888, 686, 956, 570, 224, 995, 288, 211, 716, 144, 1010, 674, 773, 457, 379, 941, 376, 1447, 494, 200, 1031, 1061, 160, 965, 78, 718, 735, 1381, 1461, 85, 984, 1440, 649, 812, 212, 530, 1056, 204, 870, 159, 335, 887, 1459, 432, 729, 1340, 94, 63, 132, 885, 1102, 702, 320, 448, 1388, 14, 1077, 847, 274, 964, 762, 365, 1343, 904, 1133, 467, 1294, 121, 897, 1323, 1499, 1139, 1091, 1268, 253, 525, 820, 1270, 400, 1107, 424, 1389, 1144, 1009, 1023, 1321, 1285, 691, 1089, 654, 462, 351, 663, 533, 882, 653, 1282, 223, 697, 1078, 957, 442, 408, 108, 1431, 527, 842, 1453, 1415, 692, 1266, 355, 601, 543, 985, 56, 782, 406, 176, 443, 514, 518, 756, 1075, 1277, 517, 266, 1123, 1006, 942, 361, 1417, 444, 679, 757, 511, 1083, 10, 1094, 75, 336, 841, 851, 461, 752, 852, 750, 1494, 922, 818, 476, 1362, 1290, 276, 589, 587, 117, 1119, 118, 1149, 51, 862, 1159, 26, 945, 871, 1309, 413, 1376, 943, 229, 1048, 202, 860, 932, 1032, 908, 411, 1506, 1152, 142 };
        assertEquals(779, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case28() {
        int N = 1963;
        int K = 164;
        int[] info = { 1258, 1497, 247, 1341, 1402, 338, 1655, 1094, 269, 1015, 458, 1684, 1459, 1720, 105, 783, 689, 352, 1286, 53, 1451, 109, 231, 1268, 1695, 802, 420, 1285, 43, 353, 1429, 529, 10, 502, 294, 357, 1962, 1553, 1436, 473, 7, 1767, 887, 1046, 1284, 1419, 1665, 1168, 1562, 786, 1812, 417, 106, 771, 58, 1581, 1458, 1260, 1542, 1555, 1654, 875, 1104, 582, 1828, 1857, 720, 590, 538, 252, 743, 1474, 413, 551, 1834, 557, 374, 1920, 1312, 345, 356, 1112, 508, 678, 246, 1245, 886, 1675, 1188, 664, 567, 1105, 1165, 350, 729, 1821, 1193, 32, 1232, 929, 1616, 1487, 1202, 248, 836, 1681, 1883, 705, 711, 884, 996, 1070, 1705, 1009, 311, 426, 265, 1472, 1940, 290, 908, 68, 972, 1569, 894, 270, 389, 1945, 1473, 1878, 1885, 95, 1907, 453, 717, 1787, 1064, 1929, 1038, 1640, 654, 3, 20, 1588, 1752, 715, 64, 882, 1425, 492, 460, 642, 543, 816, 917, 1468, 1865, 387, 1219, 1593, 1103, 217, 668, 1734, 1430, 525, 821, 228, 1757, 484, 1145, 798, 1938, 675, 46, 1824, 810, 994, 1005, 676, 28, 1045, 841, 1222, 1111, 1313, 951, 234, 961, 1106, 1932, 915, 981, 1336, 111, 1814, 1332, 739, 1058, 603, 422, 1527, 446, 1195, 1849, 243, 583, 381, 289, 1383, 1519, 421, 1561, 962, 450, 1900, 732, 928, 1781, 919, 1053, 1736, 1648, 589, 209, 1583, 1778, 1149, 89, 92, 830, 1197, 987, 62, 569, 738, 864, 843, 1085, 550, 1141, 1236, 1677, 1447, 1625, 632, 1921, 120, 853, 1288, 223, 1216, 273, 966, 1361, 549, 796, 1178, 897, 1052, 610, 1755, 1280, 1836, 548, 1391, 1832, 694, 61, 748, 1448, 192, 33, 375, 1217, 17, 78, 963, 282, 1006, 682, 1685, 823, 327, 828, 1115, 576, 249, 91, 1740, 359, 343, 1587, 604, 263, 785, 1687, 1099, 1409, 835, 425, 1669, 1717, 1880, 1369, 1644, 628, 400, 448, 1433, 1131, 110, 1841, 822, 1004, 1898, 57, 1831, 1761, 1491, 581, 1869, 1513, 792, 1861, 1749, 30, 494, 532, 1482, 714, 1532, 1205, 191, 1054, 1342, 891, 383, 26, 1557, 546, 1633, 454, 842, 1161, 1743, 598, 1704, 1689, 1124, 978, 433, 644, 1225, 1597, 131, 1098, 1862, 471, 847, 1062, 221, 1950, 196, 1246, 826, 1747, 419, 693, 267, 1642, 1606, 25, 320, 621, 98, 616, 1434, 660, 756, 236, 1355, 1150, 1012, 503, 298, 1373, 470, 998, 1399, 834, 1667, 1926, 102, 1417, 1955, 292, 995, 833, 2, 812, 733, 1079, 1816, 1892, 958, 1072, 912, 878, 643, 1844, 83, 753, 1259, 1531, 69, 1596, 1380, 870, 22, 976, 1435, 167, 314, 948, 1709, 1552, 1858, 207, 13, 1848, 212, 1215, 1609, 393, 1927, 1522, 1930, 1721, 1276, 1242, 279, 468, 1919, 1686, 1075, 239, 90, 702, 1475, 921, 1638, 1710, 1851, 1061, 1305, 686, 1049, 1102, 226, 34, 1353, 94, 71, 1084, 1502, 14, 1647, 1738, 227, 703, 1137, 225, 555, 808, 232, 50, 1617, 1358, 1575, 369, 1293, 761, 721, 1166, 746, 1214, 1688, 899, 1493, 478, 100, 519, 593, 124, 1337, 1476, 960, 1893, 1902, 885, 769, 1959, 187, 1539, 388, 309, 947, 1143, 1068, 1192, 1957, 1698, 1683, 1854, 1209, 868, 1798, 1656, 1403, 268, 220, 965, 1356, 99, 1742, 710, 55, 395, 861, 200, 1847, 1579, 1167, 814, 337, 23, 1101, 539, 1786, 1652, 275, 399, 63, 1324, 1404, 514, 88, 40, 1169, 459, 1481, 650, 1788, 1496, 1624, 1817, 931, 1261, 1805, 1326, 1025, 570, 1797, 1956, 620, 291, 1407, 21, 465, 132, 1544, 1635, 865, 790, 1139, 1839, 573, 168, 77, 536, 627, 1093, 1363, 1386, 52, 241, 1114, 615, 1699, 1903, 1023, 1466, 1199, 1277, 1503, 257, 1599, 1535, 1573, 206, 130, 67, 1157, 1643, 193, 1886, 775, 1611, 435, 402, 1859, 584, 789, 1604, 72, 1156, 1160, 837, 36, 625, 1649, 655, 1266, 1789, 636, 1253, 1942, 1791, 619, 5, 1923, 39, 237, 1278, 1529, 1830, 293, 1331, 358, 669, 1780, 1908, 409, 1822, 461, 1441, 691, 133, 1323, 35, 1037, 1047, 1494, 622, 84, 745, 1060, 1207, 641, 1243, 516, 572, 1309, 645, 1576, 791, 949, 1308, 447, 1835, 368, 566, 999, 1877, 1076, 1887, 430, 990, 336, 1480, 475, 493, 1775, 1450, 1238, 1746, 1708, 1517, 1032, 442, 42, 322, 180, 424, 75, 1287, 591, 1646, 1177, 744, 1173, 881, 1208, 933, 8, 1679, 774, 1958, 953, 384, 1826, 19, 1438, 1040, 587, 942, 415, 914, 1739, 696, 1042, 1467, 328, 1918, 850, 1297, 349, 716, 1641, 1250, 1273, 434, 1367, 633, 1525, 74, 1339, 1904, 284, 1533, 466, 901, 1682, 1763, 1706, 1454, 1272, 782, 597, 1765, 595, 457, 1333, 895, 1876, 1783, 1602, 1274, 1221, 238, 278, 1504, 524, 838, 1344, 1229, 1707, 354, 1247, 1800, 1321, 1801, 1931, 661, 907, 1833, 1774, 444, 1108, 418, 806, 101, 640, 1095, 440, 690, 1729, 1385, 1138, 1227, 846, 323, 992, 1610, 1300, 407, 1922, 449, 747, 565, 76, 1316, 1340, 585, 968, 788, 629, 997, 1393, 38, 1671, 1241, 186, 1806, 876, 1029, 1632, 1566, 511, 1636, 1190, 634, 1371, 1572 };
        assertEquals(967, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case29() {
        int N = 881;
        int K = 401;
        int[] info = { 733, 37, 78, 673, 281, 374, 252, 320, 270, 224, 614, 17, 300, 691, 215, 474, 304, 805, 178, 337, 152, 339, 581, 111, 353, 295, 684, 349, 602, 218, 370, 772, 8, 184, 648, 405, 239, 261, 504, 99, 133, 785, 41, 589, 781, 375, 675, 674, 181, 769, 742, 364, 716, 759, 695, 866, 185, 617, 308, 856, 806, 180, 480, 71, 27, 249, 386, 266, 454, 367, 195, 663, 175, 670, 562, 598, 699, 840, 202, 83, 283, 696, 128, 599, 357, 843, 316, 158, 542, 465, 322, 721, 783, 791, 656, 793, 720, 470, 343, 358, 870, 538, 453, 153, 558, 484, 520, 285, 336, 810, 476, 572, 65, 462, 501, 833, 766, 687, 779, 412, 360, 206, 257, 228, 238, 165, 845, 315, 852, 635, 247, 169, 653, 442, 837, 490, 48, 226, 332, 549, 497, 609, 60, 679, 744, 689, 636, 879, 210, 646, 46, 877, 379, 722, 829, 818, 723, 154, 19, 33, 306, 393, 659, 676, 487, 842, 819, 530, 481, 660, 662, 452, 141, 717, 348, 183, 352, 634, 797, 277, 828, 390, 492, 864, 546, 51, 740, 677, 727, 640, 287, 571, 346, 137, 865, 248, 116, 525, 134, 334, 57, 611, 880, 297, 644, 223, 485, 280, 735, 729, 1, 758, 443, 629, 604, 472, 666, 624, 438, 421, 621, 100, 369, 103, 420, 279, 544, 547, 75, 422, 196, 186, 508, 28, 816, 872, 11, 189, 145, 564, 522, 77, 704, 234, 64, 260, 792, 862, 823, 67, 429, 342, 582, 191, 545, 458, 568, 59, 310 };
        assertEquals(479, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case30() {
        int N = 1008;
        int K = 617;
        int[] info = { 213, 251, 482, 699, 779, 153, 64, 170, 995, 731, 392, 344, 135, 269, 776, 451, 735, 522, 581, 847, 239, 14, 975, 481, 672, 796, 760, 861, 159, 604, 538, 673, 940, 215, 755, 946, 596, 713, 286, 720, 602, 194, 255, 652, 549, 545, 331, 725, 911, 308, 327, 609, 827, 139, 894, 196, 452, 580, 987, 523, 929, 833, 771, 384, 210, 514, 299, 93, 486, 697, 912, 326, 207, 743, 426, 958, 173, 457, 276, 270, 156, 849, 356, 972, 267, 473, 23, 441, 95, 58, 536, 410, 378, 351, 645, 430, 667, 793, 880, 82, 7, 552, 66, 364, 922, 108, 280, 390, 332, 394, 718, 981, 505, 150, 348, 230, 578, 986, 112, 649, 377, 965, 668, 349, 711, 974, 107, 571, 544, 945, 543, 960, 798, 1005, 195, 314, 631, 72, 125, 726, 60, 927, 541, 644, 247, 651, 539, 157, 180, 996, 59, 424, 663, 303, 416, 576, 284, 209, 797, 167, 309, 367, 34, 208, 87, 182, 498, 46, 577, 585, 749, 973, 115, 43, 954, 305, 428, 233, 127, 42, 695, 949, 288, 770, 674, 289, 338, 407, 877, 438, 79, 442, 761, 531, 702, 881, 557, 690, 729, 624, 140, 162, 759, 132, 854, 889, 756, 250, 300, 898, 565, 197, 54, 848, 621, 491, 67, 248, 471, 102, 49, 897, 515, 676, 339, 203, 485, 190, 155, 701, 582, 337, 867, 784, 178, 92, 952, 397, 817, 976, 138, 883, 404, 88, 354, 560, 825, 764, 33, 321, 171, 914, 706, 477, 386, 892, 243, 842, 259, 947, 237, 134, 400, 569, 220, 449, 217, 777, 136, 855, 160, 317, 736, 2, 174, 454, 852, 524, 48, 510, 741, 409, 211, 943, 476, 970, 661, 221, 1000, 773, 795, 546, 979, 440, 605, 236, 265, 266, 712, 336, 778, 113, 805, 166, 807, 176, 591, 28, 143, 118, 283, 434, 553, 788, 508, 57, 606, 27, 909, 216, 647, 936, 737, 941, 839, 547, 393, 933, 435, 381, 126, 511, 916, 740, 184, 520, 29, 886, 551, 686, 879, 328, 32, 517, 45, 556, 870, 413, 403, 244, 868, 923, 228, 313, 748 };
        assertEquals(534, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case31() {
        int N = 931;
        int K = 68;
        int[] info = { 889, 601, 335, 108, 296, 434, 728, 178, 567, 744, 506, 274, 485, 106, 38, 221, 795, 827, 2, 254, 759, 514, 502, 895, 648, 444, 258, 120, 7, 865, 852, 19, 101, 342, 380, 727, 609, 447, 48, 102, 870, 211, 431, 831, 830, 805, 56, 861, 929, 492, 17, 875, 919, 99, 261, 819, 203, 536, 300, 368, 803, 588, 491, 610, 318, 244, 218, 415, 791, 243, 641, 748, 798, 836, 585, 213, 322, 735, 73, 208, 643, 521, 359, 456, 426, 315, 75, 478, 105, 617, 814, 304, 571, 89, 475, 339, 769, 338, 582, 894, 854, 336, 23, 98, 88, 394, 153, 270, 6, 309, 214, 470, 127, 833, 361, 158, 762, 816, 764, 807, 497, 84, 435, 87, 525, 694, 723, 169, 817, 414, 880, 904, 624, 568, 719, 718, 147, 333, 224, 293, 180, 515, 77, 554, 520, 194, 793, 741, 905, 711, 177, 115, 271, 223, 512, 559, 550, 439, 107, 312, 443, 697, 717, 145, 264, 398, 305, 877, 297, 345, 923, 151, 255, 702, 487, 86, 332, 637, 150, 614, 729, 619, 187, 683, 159, 367, 669, 631, 675, 840, 409, 181, 262, 219, 925, 236, 67, 348, 595, 382, 417, 130, 154, 400, 647, 82, 578, 66, 908, 824, 901, 607, 33, 441, 773, 172, 680, 907, 376, 548, 139, 866, 4, 790, 252, 546, 462, 599, 672, 537, 917, 157, 740, 627, 70, 623, 241, 837, 734, 341, 421, 496, 887, 174, 784, 123, 825, 883, 162, 282, 201, 5, 406, 230, 896, 639, 353, 396, 765, 103, 411, 902, 846, 143, 700, 802, 476, 660, 452, 867, 61, 316, 464, 81, 276, 263, 539, 534, 924, 351, 498, 34, 508, 818, 527, 104, 755, 40, 524, 580, 714, 666, 477, 914, 749, 815, 331, 575, 354 };
        assertEquals(461, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case32() {
        int N = 1250;
        int K = 675;
        int[] info = { 468, 1118, 1077, 1211, 1105, 570, 596, 840, 585, 882, 1071, 1031, 1191, 612, 1123, 338, 360, 166, 1218, 87, 240, 3, 755, 323, 207, 772, 120, 918, 436, 76, 618, 382, 111, 158, 222, 953, 718, 798, 328, 987, 332, 162, 209, 494, 56, 838, 536, 276, 396, 630, 553, 186, 760, 518, 643, 1244, 796, 376, 136, 993, 946, 488, 595, 266, 84, 289, 407, 352, 1208, 546, 426, 640, 1058, 307, 1182, 970, 257, 996, 393, 525, 371, 824, 1078, 967, 562, 1050, 1206, 100, 1028, 1032, 610, 617, 1144, 152, 1095, 774, 507, 473, 438, 113, 82, 532, 503, 994, 1239, 535, 482, 475, 597, 452, 1109, 363, 1146, 47, 1169, 1009, 287, 1039, 652, 778, 926, 635, 1190, 637, 201, 1229, 173, 74, 538, 1065, 10, 901, 925, 891, 388, 830, 1045, 1068, 30, 1073, 250, 1213, 397, 865, 505, 1241, 403, 1012, 941, 603, 1129, 1017, 242, 825, 1027, 462, 1205, 122, 544, 402, 1221, 105, 34, 357, 315, 512, 484, 149, 932, 251, 67, 781, 567, 1, 689, 184, 939, 1061, 861, 255, 963, 311, 989, 400, 1096, 974, 1074, 960, 476, 636, 1159, 551, 1122, 823, 295, 633, 619, 547, 676, 792, 386, 729, 446, 1186, 442, 98, 620, 40, 646, 572, 306, 1106, 314, 859, 493, 268, 656, 144, 333, 259, 486, 1036, 317, 390, 1119, 1037, 444, 1117, 411, 945, 1067, 456, 1216, 581, 549, 1227, 83, 750, 777, 827, 146, 406, 69, 139, 128, 937, 204, 1234, 846, 188, 621, 1052, 1143 };
        assertEquals(651, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case33() {
        int N = 1853;
        int K = 837;
        int[] info = { 1692, 476, 226, 1161, 1003, 1476, 1286, 40, 277, 467, 1495, 741, 469, 625, 1247, 1448, 149, 1099, 917, 1171, 524, 649, 1626, 1128, 1374, 77, 1207, 1396, 624, 1089, 1532, 1607, 1435, 688, 262, 379, 1506, 1137, 450, 974, 1845, 767, 1373, 163, 1302, 1054, 1307, 972, 1437, 1591, 1633, 1276, 73, 1441, 857, 507, 1255, 697, 336, 935, 558, 1077, 1658, 1494, 329, 1191, 1606, 211, 477, 65, 320, 1665, 245, 779, 546, 162, 1837, 680, 384, 1618, 569, 502, 676, 361, 258, 345, 48, 1754, 1650, 1836, 112, 1129, 660, 539, 51, 630, 132, 919, 1778, 1488, 1079, 406, 1735, 533, 511, 1775, 46, 376, 206, 672, 485, 144, 1269, 959, 850, 1378, 133, 1208, 351, 907, 138, 433, 1086, 371, 1719, 1212, 1206, 1703, 1673, 731, 1479, 1165, 1800, 1585, 243, 134, 208, 1264, 1096, 1725, 1317, 67, 928, 1587, 1094, 1140, 1109, 1442, 544, 84, 995, 1182, 1209, 1614, 1579, 443, 1155, 1143, 1508, 657, 269, 409, 415, 1424, 136, 306, 1301, 1649, 614, 468, 1588, 1291, 1504, 1138, 748, 1179, 525, 918, 414, 455, 803, 881, 218, 758, 664, 470, 1164, 8, 1315, 453, 340, 1753, 1601, 62, 639, 1458, 973, 1604, 1005, 1844, 1789, 1825, 16, 1808, 744, 1072, 1406, 512, 640, 722, 143, 1159, 1306, 1736, 721, 344, 772, 763, 1654, 1453, 1225, 1113, 585, 1455, 1635, 1114, 947, 1118, 771, 1797, 38, 911, 212, 796, 452, 1446, 1010, 325, 916, 1782, 1771, 230, 1846, 413, 1047, 1381, 446, 1668, 54, 1391, 1679, 668, 1827, 202, 1235, 1518, 773, 1640, 1232, 268, 521, 1683, 1546, 1084, 914, 1019, 1346, 970, 169, 1101, 1009, 1270, 526, 139, 873, 80, 6, 116, 1788, 1142, 1569, 1629, 1646, 177, 457, 419, 1379, 1447, 117, 398, 854, 1293, 1298, 931, 1616, 1146, 559, 1490, 1511, 308, 941, 1062, 1512, 1332, 1551, 92, 59, 609, 572, 390, 1106, 1226, 1597, 895, 1390, 1115, 178, 1261, 936, 15, 598, 551, 764, 1850, 434, 1153, 514, 1034, 1229, 1675, 1505, 883, 982, 1087, 517, 899, 338, 610, 1071, 720, 179, 1667, 590, 1000, 867, 505, 1652, 879, 495, 1820, 1151, 9, 252, 155, 333, 1634, 236, 486, 1215, 1555, 58, 1523, 841, 354, 951, 531, 1826, 159, 1082, 185, 1272, 667, 1211, 1481, 1366, 613, 1230, 1312, 545, 440, 1475, 161, 504, 1216, 1582, 735, 355, 1456, 1625, 1818, 681, 170, 1552, 963, 1457, 1659, 1275, 10, 1482, 589, 637, 1835, 1689, 1334, 1731, 583, 1433, 661, 312, 1064, 99, 247, 104, 1695, 987, 250, 85, 1274, 1111, 448, 602, 417, 897, 271, 1166, 617, 670, 1351, 13, 1706, 1361, 186, 1156, 868, 300, 425, 257, 587, 1359, 1059, 1619, 799, 1851, 1125, 701, 1095, 1288, 780, 734, 790, 1318, 1243, 770, 1169, 1154, 1041, 762, 885, 1718, 1801, 464, 1184, 843, 1709, 642, 246, 1385, 498, 1608, 225, 1056, 1223, 626, 472, 1822, 1231, 228, 1602, 203, 238, 537, 321, 175, 1666, 1290, 292, 392, 1699, 567, 14, 547, 571, 55, 1249, 190, 794, 746, 977, 74, 1131, 1574, 1278, 152, 1813, 1487, 1431, 1188, 650, 1829, 1577, 709, 1578, 291, 1325, 943, 1783, 488, 1682, 1454, 1847, 1023, 1790, 343, 1838, 1747, 1376, 1187, 189, 49, 1022, 487, 1248, 380, 1489, 1350, 244, 352, 1090, 368, 1520, 275, 1069, 120, 1043, 234, 168, 129, 1785, 1145, 231, 1712, 985, 962, 12, 214, 605, 1016, 1397, 310, 1573, 150, 327, 454, 1763, 1550, 444, 63, 714, 1828, 1001, 201, 147, 1529, 506, 1395, 903, 806, 523, 807, 1178, 945, 1227, 378, 592, 285, 1464, 253, 438, 385, 1815, 227, 1493, 1219, 407, 196, 393, 1104, 264, 130, 1571, 1399, 125, 1467, 1100, 752, 430, 193, 946, 503, 564, 492, 760, 1262, 875, 595, 1190, 1343, 191, 1595, 696, 604, 939, 307, 522, 386, 81, 1292, 1116, 1459, 1547, 1443, 167, 1697, 131, 509, 1645, 1075, 387, 317, 1740, 410, 1345, 473, 1044, 4, 427, 318, 326, 1421, 934, 1280, 812, 1720, 1076, 471, 60, 1637, 1563, 1707, 578, 736, 1449, 156, 1832, 1311, 1693, 260, 396, 802, 1365, 216, 370, 1055, 1371, 1224, 757, 83, 621, 707, 582, 1263, 1521, 860, 1411, 1702, 1007, 1377, 1251, 749, 1430, 1710, 1540, 1380, 232, 1050, 279, 1471, 171, 1423, 791, 1553, 1121, 988, 478, 682, 1726, 1123, 500, 1245, 1122, 1333, 423, 1284, 675, 686, 1277, 750, 1738, 43, 1409, 1316, 529, 555, 36, 151, 1594, 711, 274, 845, 102, 556, 241, 1798, 603, 706, 284, 154, 1030, 290, 1600, 1061, 24, 1664, 111, 1685, 615, 869, 121, 1420, 896, 1234, 374, 298, 404, 280, 1429, 1250, 631, 69, 31, 2, 1193, 1806, 993, 1593, 554, 865, 1717, 703, 532, 1483, 1011, 493, 1727, 785, 884, 1228, 27, 1690, 612, 1358, 1680, 1031, 1279, 1831, 499, 1516, 304, 1533, 1834, 166, 792, 299, 224, 1830, 219, 560, 1528, 1741, 1134, 1839, 1698, 1136, 53, 1410, 1824, 994, 877, 137, 986, 1329, 1417, 323, 1554, 110, 1586, 1468, 981, 1705, 1107, 999, 633, 1287, 1452, 1802, 513, 634, 891, 1053, 1271, 1542, 1466, 926, 119, 1853, 276, 777, 389, 713, 422, 880, 288, 1724, 1570, 892, 497, 57, 622, 474, 1092, 910, 182, 991, 1321, 1132, 1200, 1530, 395, 140, 424, 989, 314, 1360, 652, 1405, 1561, 702, 91, 420, 94, 921, 105, 1714, 658, 1314, 122, 1205, 78, 565, 1761, 693, 160, 1669, 1662, 882, 801, 1472, 952, 1246, 1814 };
        assertEquals(936, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case34() {
        int N = 1850;
        int K = 691;
        int[] info = { 703, 596, 1685, 1469, 1351, 607, 1747, 1671, 1544, 1608, 573, 164, 1028, 1786, 1781, 230, 813, 1410, 1489, 1816, 1363, 357, 799, 353, 65, 444, 744, 1449, 71, 221, 634, 630, 886, 1655, 1256, 14, 1288, 1123, 1440, 983, 807, 1746, 161, 150, 1096, 1580, 562, 1254, 1720, 460, 1587, 464, 1535, 1570, 423, 1574, 77, 738, 324, 1676, 561, 83, 1112, 1507, 856, 1273, 614, 1358, 1755, 1329, 1283, 883, 1694, 732, 1179, 28, 78, 1244, 1615, 801, 253, 474, 1590, 821, 963, 390, 769, 75, 1797, 1061, 1572, 1159, 1162, 1739, 1099, 271, 174, 100, 581, 602, 46, 707, 1529, 136, 30, 945, 1750, 416, 1657, 219, 766, 575, 1080, 1321, 868, 1232, 1811, 1451, 1060, 13, 1715, 144, 587, 407, 916, 1478, 1626, 1241, 1231, 987, 482, 252, 1518, 1278, 894, 488, 497, 355, 1319, 327, 1072, 1033, 1793, 236, 1431, 745, 1312, 1678, 1555, 1020, 61, 412, 283, 1576, 1806, 1736, 1744, 535, 1401, 172, 73, 82, 1016, 246, 1357, 1545, 942, 459, 625, 1579, 1456, 475, 903, 304, 1760, 1195, 1024, 1658, 1322, 330, 959, 395, 1038, 97, 96, 1074, 447, 1436, 940, 520, 871, 1588, 470, 167, 1661, 427, 1681, 740, 1346, 155, 882, 1117, 39, 822, 312, 1276, 26, 345, 225, 380, 1723, 386, 968, 1360, 298, 128, 715, 693, 500, 705, 721, 417, 829, 1178, 1448, 382, 1403, 1085, 208, 831, 1347, 59, 1152, 159, 557, 1307, 85, 1581, 1188, 1741, 1286, 212, 888, 1606, 833, 1229, 1624, 371, 884, 865, 266, 1101, 1510, 291, 397, 1689, 787, 624, 499, 1620, 933, 485, 1601, 1120, 1062, 421, 1406, 156, 998, 233, 1633 };
        assertEquals(1004, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case35() {
        int N = 1382;
        int K = 166;
        int[] info = { 338, 1000, 234, 491, 329, 783, 8, 1345, 495, 32, 1322, 182, 1321, 834, 262, 1154, 950, 972, 912, 933, 15, 1007, 658, 1050, 293, 520, 255, 529, 1011, 1204, 1314, 590, 1119, 706, 189, 1221, 968, 436, 836, 1283, 561, 215, 116, 506, 445, 90, 657, 171, 96, 279, 1129, 248, 168, 652, 677, 678, 77, 240, 465, 888, 799, 180, 394, 1047, 718, 1262, 645, 222, 868, 1051, 516, 1364, 335, 446, 791, 877, 986, 1028, 1083, 784, 466, 99, 195, 176, 356, 1191, 1127, 98, 1226, 14, 400, 735, 452, 114, 144, 52, 809, 111, 147, 714, 1233, 1320, 898, 19, 832, 917, 1121, 194, 1114, 729, 598, 202, 549, 690, 1341, 911, 299, 1247, 442, 952, 573, 876, 709, 439, 91, 1180, 1231, 1064, 1242, 411, 1225, 151, 1008, 153, 1372, 360, 264, 569, 567, 1217, 688, 751, 711, 384, 629, 698, 135, 280, 412, 1303, 1142, 179, 228, 1369, 1024, 328, 1055, 881, 212, 166, 942, 7, 564, 1346, 508, 1237, 909, 755, 1241, 1260, 935, 509, 1184, 631, 1224, 201, 615, 145, 1009, 563, 1090, 350, 272, 526, 277, 408, 1108, 1073, 1072, 1285, 426, 741, 39, 1046, 730, 570, 367, 374, 267, 1218, 87, 814, 983, 798, 1077, 1162, 612, 319, 833, 816, 1150, 359, 550, 347, 515, 481, 827, 105, 855, 440, 921, 551, 1380, 1343, 530, 1337, 1141, 692, 433, 1301, 575, 1284, 131, 89, 1066, 1336, 1236, 765, 884, 245, 1211, 542, 1348, 769, 29, 513, 681, 160, 895, 805, 430, 611, 461, 344, 1297, 18, 297, 1361, 1206, 489, 981, 811, 308, 995, 863, 1123, 1062, 369, 148, 866, 139, 274, 1271, 792, 788, 256, 843, 162, 173, 1265, 851, 1104, 320, 1079, 1249, 1352, 949, 852, 479, 785, 998, 1145, 480, 302, 386 };
        assertEquals(705, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case36() {
        int N = 1337;
        int K = 66;
        int[] info = { 53, 57, 1236, 559, 451, 631, 114, 1201, 867, 855, 37, 435, 574, 620, 717, 1288, 172, 626, 1097, 714, 438, 401, 1300, 1232, 672, 680, 557, 38, 967, 456, 738, 541, 1098, 313, 1010, 1309, 174, 788, 710, 253, 888, 564, 476, 823, 692, 1329, 595, 1225, 442, 566, 1067, 288, 1327, 531, 7, 47, 917, 6, 113, 522, 311, 169, 475, 395, 1257, 873, 463, 458, 1144, 751, 360, 965, 850, 416, 1002, 96, 230, 219, 350, 153, 291, 3, 120, 307, 679, 651, 1195, 227, 126, 144, 347, 1231, 501, 1045, 927, 601, 339, 1084, 497, 1072, 538, 205, 76, 634, 824, 1261, 55, 1332, 325, 315, 1099, 484, 1031, 1050, 324, 607, 134, 393, 1178, 819, 1295, 427, 662, 222, 1210, 376, 322, 731, 383, 793, 750, 1253, 1154, 959, 691, 413, 567, 558, 1278, 665, 657, 1277, 1127, 623, 512, 67, 293, 472, 741, 1027, 137, 708, 745, 171, 1307, 504, 31, 26, 1326, 1095, 1152, 846, 976, 928, 894, 1019, 386, 218, 460, 1145, 861, 925, 506, 1180, 1183, 1285, 228, 949, 1094, 27, 1296, 728, 587, 783, 271, 912, 151, 816, 336, 459, 197, 32, 774, 206, 163, 1167, 1187, 529, 831, 330, 661, 1273, 157, 1017, 1012, 1245, 803, 611, 746, 889, 302, 690, 955, 576, 1294, 125, 1115, 1197, 111, 1134, 1169, 1157, 418, 683, 781, 54, 341, 848, 329, 69, 354, 725, 953, 149, 786, 596, 810, 1107, 658, 748, 1334, 510, 507, 68, 1165, 461, 779, 1018, 1078, 736, 1085, 716, 723, 943, 1160, 1241, 1064, 242, 654, 328, 772, 28, 44, 265, 127, 1286, 915, 105, 23, 275, 33, 869, 1186, 534, 154, 1302, 551, 192, 1068, 580, 537, 1318, 1005, 414, 704, 1061, 479, 1004, 179, 1041, 675, 511, 785, 548, 1188, 1252, 1034, 128, 364, 389 };
        assertEquals(666, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case37() {
        int N = 831;
        int K = 638;
        int[] info = { 53, 376, 37, 709, 211, 331, 580, 385, 649, 205, 375, 347, 18, 213, 489, 777, 156, 352, 513, 109, 535, 652, 510, 650, 574, 13, 578, 517, 101, 467, 488, 418, 484, 251, 699, 611, 123, 465, 56, 557, 361, 231, 455, 731, 562, 328, 549, 771, 259, 294, 546, 1, 566, 621, 257, 630, 60, 752, 92, 183, 602, 770, 672, 675, 793, 52, 584, 786, 522, 175, 83, 525, 126, 82, 555, 365, 629, 429, 696, 499, 508, 757, 325, 127, 163, 169, 405, 279, 413, 461, 787, 286, 161, 547, 407, 764, 512, 369, 198, 614, 713, 228, 491, 717, 226, 544, 607, 781, 761, 831, 760, 45, 81, 674, 221, 387, 55, 46, 270, 426, 201, 803, 84, 716, 129, 462, 190, 719, 388, 821, 160, 406, 155, 435, 150, 417, 559, 384, 676, 427, 503, 500, 591, 278, 267, 146, 357, 403, 645, 733, 265, 558, 209, 313, 486, 464, 556, 275, 367, 80, 359, 300, 26, 282, 354, 815, 237, 14, 79, 271, 364, 63, 620, 775, 372, 665, 121, 438, 483, 828, 458, 264, 242, 171, 827, 727, 91, 759, 659, 627, 612, 11, 804, 326, 450, 576, 182, 726, 816, 178, 420, 383, 111, 715, 740, 723, 356, 711, 799, 36, 678, 689, 430, 373, 323, 246, 468, 487, 415, 720, 481, 342, 625, 554, 297, 593, 476, 273, 208, 496, 302, 274, 581, 98, 456, 829, 393, 552, 749, 324, 15, 49, 524, 722, 382, 664, 657, 526, 795, 346, 301, 641, 272, 339, 284, 780, 561, 263, 567, 277, 149, 35, 6, 718, 75, 38, 704, 396, 677, 746, 411, 505, 471, 774, 451, 93, 783, 637, 173, 493, 495, 194, 249, 62, 7, 159, 548, 644, 223, 479, 293, 85, 224, 594, 773, 680, 125, 470, 540, 747, 199, 686, 100, 174, 528, 806, 90, 269, 794, 29, 321, 741, 541, 577, 636, 788, 449, 392, 509, 564, 70, 290, 189, 705 };
        assertEquals(456, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case38() {
        int N = 954;
        int K = 711;
        int[] info = { 659, 200, 792, 295, 293, 93, 147, 500, 548, 429, 302, 66, 609, 84, 808, 558, 819, 893, 651, 620, 260, 552, 42, 934, 338, 710, 516, 231, 177, 632, 662, 264, 894, 579, 394, 561, 222, 948, 551, 686, 206, 847, 116, 367, 741, 506, 49, 908, 916, 723, 841, 913, 218, 382, 807 };
        assertEquals(598, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case39() {
        int N = 1949;
        int K = 10;
        int[] info = { 962, 1192, 1717, 1232, 22, 1052, 1623, 1726, 1143, 1540, 388, 718, 620, 800, 637, 821, 1369, 1131, 1576, 60, 1263, 949, 46, 438, 802, 542, 230, 1620, 368, 286, 1764, 869, 1095, 1146, 1400, 1066, 738, 145, 467, 1108, 1150, 66, 1610, 955, 1454, 1495, 774, 249, 1279, 1614, 486, 196, 547, 1946, 1025, 182, 313, 807, 1519, 143, 715, 351, 102, 504, 348, 987, 1549, 421, 107, 727, 1221, 1309, 813, 1785, 310, 1437, 457, 1417, 468, 146, 207, 1046, 1412, 960, 1457, 678, 1354, 273, 1359, 708, 1268, 1484, 1787, 380, 181, 55, 1823, 1779, 1587, 469, 948, 1084, 817, 370, 770, 523, 13, 1770, 1398, 803, 1498, 827, 1598, 1090, 339, 1599, 160, 1465, 75, 1137, 1297, 1559, 321, 1503, 228, 1777, 734, 847, 1294, 1167, 1120, 878, 337, 1477, 1577, 69, 618, 1431, 925, 1909, 250, 1343, 1347, 442, 898, 729, 1530, 1452, 1839, 1063, 1191, 1884, 1282, 502, 1821, 1891, 45, 1824, 1295, 1907, 1683, 324, 1526, 488, 435, 1220, 1266, 1162, 363, 511, 553, 1115, 327, 236, 601, 563, 1406, 1039, 1903, 664, 473, 276, 197, 848, 915, 1253, 1208, 1236, 1345, 112, 1522, 1367, 1153, 1739, 758, 1305, 757, 35, 1249, 773, 888, 247, 1483, 8, 1035, 549, 1694, 225, 1110, 136, 754, 267, 1009, 1411, 1074, 1289, 1807, 1281, 1135, 983, 636, 611, 484, 797, 101, 568, 463, 1673, 999, 812, 1355, 1382, 1768, 394, 1912, 1611, 238, 607, 942, 1172, 1409, 541, 10, 1142, 1945, 1481, 1257, 1252, 1594, 1368, 1072, 791, 956, 560, 300, 420, 289, 921, 1716, 1272, 794, 168, 210, 1283, 1079, 1056, 1408, 654, 753, 1193, 674, 1588, 952, 402, 578, 1938, 1656, 857, 838, 79, 1127, 508, 1000, 932, 842, 284, 1508, 1029, 522, 1124, 1902, 912, 870, 561, 412, 384, 1097, 1737, 498, 1111, 1528, 1685, 290, 1451, 135, 1021, 638, 1418, 884, 891, 1166, 673, 1427, 1869, 1373, 854, 499, 1344, 1237, 65, 1513, 1947, 309, 540, 164, 1157, 1099, 705, 43, 398, 702, 81, 1042, 858, 1211, 1539, 558, 1628, 1936, 1544, 1676, 175, 409, 1511, 1306, 1800, 1568, 16, 294, 1845, 76, 1619, 1586, 1748, 1243, 1596, 1608, 581, 1197, 887, 198, 582, 831, 1501, 686, 1660, 747, 5, 1834, 121, 1618, 501, 1116, 1163, 391, 1736, 1804, 692, 1781, 1337, 595, 274, 899, 1233, 1637, 1718, 1318, 1841, 1383, 1101, 1324, 1794, 1708, 1719, 1019, 1300, 1831, 20, 405, 552, 71, 395, 993, 278, 437, 1068, 1219, 728, 1879, 619, 515, 1693, 539, 2, 331, 36, 1006, 1460, 244, 1662, 1890, 938, 1688, 342, 1897, 1316, 263, 1055, 603, 975, 936, 252, 1489, 667, 663, 343, 1541, 907, 1880, 1505, 1887, 810, 756, 1247, 633, 1136, 792, 1207, 1388, 1866, 417, 536, 1332, 1444, 895, 1609, 1273, 1913, 1933, 657, 1554, 1775, 1829, 1050, 358, 1168, 1761, 602, 1721, 1104, 1859, 1686, 1771, 828, 1036, 666, 1509, 1543, 1911, 1651, 39, 1799, 105, 1395, 1390, 706, 1900, 843, 74, 235, 1260, 29, 777, 1467, 357, 1357, 1515, 382, 494, 877, 1809 };
        assertEquals(925, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case40() {
        int N = 690;
        int K = 151;
        int[] info = { 147, 31, 366, 288, 19, 67, 616, 645, 250, 172, 304, 374, 354, 111, 423, 80, 257, 82, 319, 570, 577, 258, 284, 578, 620, 315, 556, 648, 228, 572, 254, 194, 449, 604, 552, 320, 417, 211, 160, 638, 522, 369 };
        assertEquals(366, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case41() {
        int N = 442;
        int K = 57;
        int[] info = { 32, 297, 31, 165, 305, 246, 49, 326, 64, 218, 338, 280, 217, 4, 397, 144, 361, 143, 309, 267, 119, 20, 78, 158, 354, 83, 9, 249, 427, 121, 242, 71, 19, 319, 81, 369, 25, 61, 428, 399, 210, 304, 103, 422, 247, 438, 394, 166, 228, 348, 425, 208, 125, 294, 134, 306, 86, 315, 390, 184, 75, 413, 135, 191, 140, 312, 400, 76, 227, 182, 293, 132, 45, 131, 328, 322, 92, 216, 136, 290, 22, 262, 163, 240, 42, 72, 124, 271, 332, 27, 154, 323, 344, 383, 60, 346, 420, 48, 380, 266, 333, 206, 101, 351, 94, 198, 381, 40, 205, 232, 73, 433, 277, 3, 172, 299, 429, 93, 386, 389, 30, 287, 13, 321, 176 };
        assertEquals(217, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case42() {
        int N = 1723;
        int K = 101;
        int[] info = { 549, 1013, 1474, 956, 194, 1274, 521, 1585, 138, 844, 54, 544, 692, 578, 80, 1603, 227, 317, 1007, 164, 795, 1162, 1694, 485, 1658, 1407, 244, 320, 786, 915, 954, 1523, 135, 697, 1612, 1591, 1568, 1566, 813, 717, 1199, 1197, 995, 731, 621, 395, 207, 766, 161, 1105, 418, 1403, 238, 1536, 1562, 1719, 1410, 460, 736, 1281, 1466, 1038, 1170, 1253, 628, 1357, 1125, 152, 476, 273, 181, 523, 831, 1325, 1692, 1067, 992, 158, 982, 747, 428, 827, 46, 229, 1475, 1066, 1445, 440, 1302, 510, 40, 586, 102, 859, 352, 850, 1111, 328, 434, 1348, 650, 790, 860, 1151, 644, 1025, 125, 1113, 252, 642, 1448, 1431, 1422, 1328, 304, 1433, 1039, 1372, 390, 516, 1156, 168, 1090, 1373, 921, 897, 979, 1202, 401, 1491, 248, 601, 1483, 149, 944, 973, 1330, 1430, 712, 128, 365, 674, 1163, 776, 146, 20, 31, 880, 964, 106, 616, 787, 385, 1061, 1286, 130, 283, 702, 1321, 958, 479, 204, 937, 1165, 611, 986, 1615, 739, 966, 1208, 1292, 253, 1389, 438, 1377, 1649, 1526, 1666, 491, 1427, 839, 1233, 374, 1713, 842, 1557, 572, 1632, 1583, 722, 1024, 213, 449, 1707, 1320, 7, 22, 1087, 823, 585, 1364, 85, 343, 809, 606, 662, 976, 1538, 707, 459, 641, 1415, 456, 1016, 1181, 72, 289, 943, 414, 1355, 21, 1634, 1057, 587, 1416, 879, 581, 1110, 1300, 1650, 1318, 936, 1168, 1150, 75, 470, 299, 1164, 383, 60, 493, 1635, 1009, 1394, 680, 837, 433, 573, 1365, 351, 1388, 1609, 232, 1026, 1313, 39, 970, 1598, 61, 686, 678, 1400, 1190, 1269, 550, 148, 874, 1688, 716, 1391, 1234, 501, 240, 422, 377, 804, 1216, 163, 1259, 1682, 1255, 1627, 1371, 658, 1669, 483, 1315, 741, 1204, 270, 1084, 1710, 1058, 679, 1260, 1353, 1623, 1469, 657, 1413, 91, 1674, 111, 531, 366, 708, 1127, 134, 1050, 1104, 1003, 332, 356, 373, 894, 1293, 561, 816, 1406, 57, 829, 1560, 1123, 1468, 805, 1264, 1074, 1689, 329, 464, 557, 165, 1299, 27, 539, 415, 746, 613, 782, 469, 355, 37, 1691, 1712, 285, 710, 846, 286, 321, 1103, 425, 1279, 978, 743, 453, 1178, 774, 123, 1034, 92, 738, 1169, 828, 688, 1185, 247, 234, 755, 1147, 917, 50, 834, 70, 1217, 1512, 1311, 1012, 259, 677, 1046, 1661, 1546, 1587, 463, 346, 1056, 336, 1652, 1704, 896, 455, 512, 466, 676, 852, 684, 904, 947, 1283, 1228, 933, 647, 884, 968, 1130, 127, 1423, 42, 308, 1175, 1092, 1155, 1307, 626, 551, 1071, 987, 1171, 1435, 94, 815, 121, 629, 1136, 1287, 1573, 1390, 18, 1182, 634, 1503, 596, 751, 231, 675, 864, 379, 554, 9, 486, 1362, 526, 941, 1051, 883, 1476, 338, 781, 1514, 1019, 817, 1656, 1419, 843, 108, 803, 1358, 147, 468, 600, 576, 137, 892, 1530, 845, 636, 714, 155, 758, 310, 349, 1621, 1241, 1667, 88, 1347, 735, 942, 1037, 1705, 150, 1629, 645, 82, 32, 1265, 241, 1189, 495, 996, 1122, 1655, 1219, 49, 178, 275, 1282, 1718, 1501, 1396, 822, 902, 907, 1049, 342, 876, 502, 451, 309, 729, 67, 293, 1495, 407, 730, 399, 478, 1664, 748, 1209, 1408, 1602, 224, 1341, 773, 87, 1183, 1076, 605, 71, 107, 339, 475, 1714, 1043, 1643, 24, 908, 1291, 1230, 315, 318, 1463, 443, 1507, 1203, 801, 1191, 448, 1243, 1525, 603, 514, 498, 192, 768, 1, 325, 1620, 480, 1534, 744, 1528, 1344, 548, 836, 175, 863, 672, 306, 640, 1700, 1343, 206, 932, 1633, 171, 1401, 890, 278, 819, 1063, 659, 221, 543, 1442, 239, 446, 924, 1381, 1618, 872, 906, 250, 1060, 570, 362, 73, 1581, 703, 211, 1040, 269, 1266, 109, 1119, 690, 1246, 393, 1590, 274, 1081, 1334, 140, 865, 110, 599, 923, 1544, 1605, 1580, 615, 1272, 1258, 1108, 569, 1471, 637, 1565, 1458, 972, 588, 775, 955, 1359, 1604, 1011, 1221, 1195, 220, 471, 1405, 1235, 1447, 1398, 980, 704, 408, 226, 545, 1701, 68, 1206, 934, 1484, 918, 442, 268, 1567, 1639, 1515, 431, 1519, 1112, 25, 574, 1288, 1240, 530, 1540 };
        assertEquals(840, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case43() {
        int N = 1229;
        int K = 823;
        int[] info = { 523, 1148, 546, 567, 221, 210, 661, 218, 513, 1032, 208, 683, 456, 980, 473, 294, 822, 973, 355, 33, 536, 251, 1100, 778, 416, 496, 1140, 351, 526, 666, 332, 388, 1161, 1028, 1210, 605, 584, 173, 153, 288, 646, 672, 75, 245, 975, 562, 322, 99 };
        assertEquals(802, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case44() {
        int N = 1385;
        int K = 527;
        int[] info = { 1211, 684, 791, 418, 1219, 296, 1236, 961, 38, 416, 901, 1338, 10, 624, 1204, 487, 32, 1180, 661, 687, 940, 1051, 604, 337, 831, 909, 239, 743, 325, 301, 73, 147, 590, 61, 476, 1359, 1309, 468, 91, 939, 1262, 1176, 1270, 933, 1214, 1071, 589, 721, 1138, 764, 7, 1322, 230, 692, 215, 1224, 563, 457, 1316, 1368, 720, 612, 1069, 492, 1358, 400, 1077, 137, 1073, 1221, 108, 54, 250, 475, 247, 693, 312, 778, 383, 140, 712, 224, 620, 89, 197, 297, 630, 938, 1124, 171, 1314, 311, 189, 538, 1378, 377, 550, 782, 703, 1220, 207, 936, 1141, 205, 775, 294, 446, 702, 1047, 167, 426, 234, 584, 685, 759, 1310, 746, 370, 742, 1365, 555, 160, 506, 512, 84, 876, 469, 309, 1208, 843, 1192, 424, 13, 929, 1275, 656, 985, 543, 441, 473, 428, 396, 420, 566, 1274, 627, 957, 20, 235, 801, 461, 453, 950, 257, 664, 713, 1383, 58, 897, 886, 710, 1248, 231, 798, 181, 1229, 125, 948, 489, 254, 581, 1054, 881, 1217, 372, 896, 1083, 1285, 1324, 564, 1300, 856, 776, 51, 1194, 122, 1320, 196, 968, 983, 757, 717, 500, 965, 491, 128, 1203, 192, 817, 820, 323, 1341, 1147, 1094, 788, 452, 1084, 1332, 535, 844, 1008, 1121, 917, 44, 304, 378, 320, 1025, 1035, 633, 1313, 1055, 806, 1312, 536, 652, 462, 991, 191, 560, 541, 1243, 113, 700, 1328, 221, 1260, 1372, 194, 597, 771, 1044, 43, 385, 1097, 343, 35, 458, 1122, 42, 1086, 934, 1085, 1206, 1327, 241, 86, 949, 602, 632, 395, 217, 1311, 824, 161, 1231, 1299, 359, 870, 508, 1198, 1134, 284, 1148, 546, 1013, 1384, 900, 877, 78, 474, 159, 996, 816, 532, 1092, 163, 483, 665, 716, 144, 201, 1101, 268, 345, 303, 1070, 1126, 1349, 34, 11, 932, 466, 439, 48, 1145, 977, 979, 871, 974, 1280, 724, 96, 1304, 486, 8, 910, 283, 1158, 972, 1154, 341, 255, 741, 1266, 863, 173, 1114, 1089, 980, 1131, 99, 121, 682, 449, 349, 64, 736, 1296, 1333, 29, 548, 380, 839, 1183, 120, 306, 22, 542, 1195, 322, 1, 335, 998, 80, 1303, 75, 691, 1023, 789, 593, 1234, 47, 677, 263, 1146, 415, 1027, 485, 1197, 1289, 808, 1177, 509, 203, 1033, 850, 12, 1064, 727, 21, 631, 1191, 218, 707, 728, 259, 354, 164, 651, 382, 381, 155, 737, 70, 1142, 127, 1028, 827, 679, 625, 330, 511, 830, 588, 556, 260, 18, 767, 436, 6, 363, 639, 918, 769, 513, 562, 694, 1246, 958, 307, 800, 953, 1363, 299, 1331, 1288, 399, 1245, 750, 338, 103, 990, 787, 647, 751, 986, 130, 533, 481, 326, 887, 1137, 1053, 310, 815, 63, 19, 56, 79, 805, 1049, 907, 30, 1283, 200, 417, 39, 963, 819, 1024, 551, 162, 580, 1273, 1238, 690, 115, 387, 118, 374, 848, 401, 451, 52, 1353, 154, 357, 594, 214, 459, 784, 528, 1174, 1306, 1294, 220, 87, 45, 558, 557, 1046, 117, 232, 185, 613, 1135, 1334 };
        assertEquals(719, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case45() {
        int N = 1415;
        int K = 211;
        int[] info = { 364, 704, 8, 1389, 1066, 789, 487, 1246, 713, 249, 708, 36, 721, 18, 652, 1293, 602, 766, 436, 298, 636, 26, 722, 1114, 167, 370, 1297, 104, 148, 1132, 532, 476, 332, 1011, 1265, 326, 720, 255, 3, 925, 918, 566, 430, 1343, 1115, 790, 2, 120, 995, 755, 1401, 552, 1188, 1113, 1377, 1295, 1411, 1100, 1164, 107, 599, 254, 870, 457, 526, 1017, 1076, 848, 65, 449, 1299, 966, 259, 970, 222, 689, 412, 834, 139, 425, 903, 1305, 1024, 305, 1323, 150, 648, 1260, 1107, 1060, 1399, 1210, 1043, 468, 572, 556, 262, 152, 693, 1112, 801, 1320, 74, 67, 1402, 632, 499, 492, 439, 592, 135, 660, 218, 379, 958, 288, 474, 1053, 863, 828, 1397, 738, 565, 513, 416, 161, 992, 27, 647, 1375, 355, 1052, 608, 805, 1391, 587, 833, 785, 114, 176, 19, 1247, 9, 937, 908, 230, 132, 1166, 698, 10, 390, 975, 1181, 231, 1296, 1192, 1279, 1079, 1135, 1310, 144, 954, 1091, 876, 947, 1384, 767, 1356, 1176, 539, 1394, 140, 960, 292, 263, 488, 586, 14, 1144, 1385, 297, 243, 61, 427, 672, 611, 932, 963, 1232, 959, 730, 1140, 1294, 331, 335, 656, 253, 29, 810, 341, 1331, 477, 312, 589, 1259, 1231, 154, 560, 1174, 1078, 1396, 470, 1159, 244, 943, 506, 33, 246, 666, 96, 133, 986, 458, 342, 469, 889, 909, 1222, 773, 633, 568, 375, 1290, 858, 165, 1021, 977, 610, 571, 1036, 877, 434, 57, 582, 174, 156, 803, 1395, 1327, 1147, 1142, 1300, 408, 717, 228, 1026, 899, 731, 625, 816, 319, 543, 944, 1329, 338, 1313, 175, 520, 115, 569, 261, 576, 658, 981, 1030, 622, 997, 169, 25, 426, 1156, 78, 671, 396, 968, 136, 497, 838, 1152, 936, 49, 711, 99, 1380, 400, 383, 1311, 307, 77, 233, 942, 1241, 635, 927, 1234, 525, 87, 40, 336, 387, 1072, 851, 337, 744, 1332, 1127, 1372, 1109, 1227, 299, 719, 130, 1099, 990, 143, 242, 212, 579, 736, 517, 1012, 799, 729, 137, 641, 1217, 32, 1180, 642, 279, 813, 1195, 691, 59, 850, 369, 95, 129, 1364, 93, 1264, 1273, 34, 1122, 561, 1242, 1117, 1228, 1171, 1214, 1408, 631, 1361, 105, 1056, 1358, 1123, 895, 64, 1010, 1382, 237, 991, 45, 1128, 301, 1073, 1338, 473, 81, 659, 117, 173, 973, 1085, 17, 1185, 443, 530, 442, 1272, 291, 603, 395, 681, 1233, 1138, 30, 270, 984, 1130, 591, 786, 60, 1218, 507, 300, 1029, 271, 428, 778, 409, 917, 1157, 815, 302, 597, 854, 1283, 1172, 496, 485, 450, 847, 361, 180, 862, 974, 853, 871, 743, 861, 953, 1039, 696, 277, 1216, 1116, 1175, 1014, 245, 775, 1153, 1340, 1383, 1349, 345, 825, 998, 118, 843, 285, 1183, 264, 1318, 726, 553, 678, 904, 1068, 644, 629, 831, 1070, 663, 6, 377, 912, 1151, 44, 668, 606, 68, 512, 1077, 287, 1255, 503, 381, 11, 769, 844, 1137, 699, 92, 1059, 54, 859, 269, 322, 680, 650, 1271, 108, 832, 756, 982, 878, 177, 547, 71, 215, 882, 349, 687, 559 };
        assertEquals(708, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case46() {
        int N = 865;
        int K = 470;
        int[] info = { 219, 189, 743, 318, 54, 703, 686, 266, 430, 348, 767, 701, 306, 61, 272, 563, 158, 812, 849, 552, 53, 574, 134, 82, 727, 718, 403, 766, 538, 95, 64, 738, 286, 507, 570, 291, 352, 131, 321, 177, 831, 799, 666, 216, 842, 565, 558, 239, 702, 122, 415, 714, 35, 294, 236, 228, 753, 862, 395, 125, 260, 50, 88, 57, 665, 186, 167, 387, 501, 623, 573, 337, 797, 18, 51, 89, 328, 44, 670, 225, 159, 832, 128, 581, 24, 559, 45, 97, 813, 346, 287, 658, 191, 863, 711, 70, 341, 344, 168, 245, 314, 243, 500, 587, 688, 726, 302, 295, 261, 250, 232, 782, 741, 594, 822, 409, 248, 264, 433, 109, 553, 592, 653, 46, 556, 364, 477, 844, 152, 343, 843, 858, 7, 133, 586, 815, 52, 193, 436, 326, 580, 499, 508, 568, 369, 851, 835, 284, 141, 316, 116, 289, 280, 176, 342, 227, 412, 584, 823, 579, 40, 143, 807, 746, 144, 320, 819, 669, 194, 432, 315, 222, 609, 828, 398, 10, 181, 172, 371, 224, 789, 112, 79, 86, 356, 297, 530, 213, 423, 758, 71, 709, 418, 102, 340, 561, 850, 166, 505, 599, 606, 502, 279, 16, 630, 263, 270, 361, 67, 195, 43, 332, 541, 422, 281, 575, 397, 414, 627, 301, 100, 808, 620, 531, 117, 474, 104, 760, 259, 113, 713, 830, 825, 482, 3, 617, 212, 164, 698, 184, 282, 731, 585, 96, 178, 48, 31, 756, 408, 220, 717, 410, 485, 126, 111, 42, 165, 546, 230, 694, 29, 678 };
        assertEquals(454, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case47() {
        int N = 1791;
        int K = 1140;
        int[] info = { 1159, 835, 1104, 1513, 310, 1603, 298, 629, 1013, 983, 497, 181, 1010, 1198, 343, 1038, 173, 1433, 693, 924, 470, 1502, 1342, 1338, 529, 1371, 1493, 123, 496, 302, 287, 146, 1701, 1227, 1637, 628, 1048, 157, 1652, 71, 1259, 266, 1782, 443, 814, 1100, 831, 1397, 1666, 944, 369, 927, 1073, 751, 1537, 724, 1400, 294, 1363, 600, 637, 1746, 1601, 612, 1279, 1043, 1740, 734, 1121, 179, 1034, 341, 52, 1667, 330, 705, 149, 1562, 138, 1769, 1635, 1585, 85, 846, 417, 802, 539, 834, 636, 100, 1439, 957, 283, 1685, 667, 533, 977, 1348, 1530, 1463, 1755, 1239, 1548, 1388, 319, 1492, 374, 633, 1722, 95, 726, 728, 1373, 1443, 1357, 1477, 189, 832, 185, 1764, 393, 1512, 336, 544, 258, 1488, 618, 1018, 440, 968, 261, 231, 1229, 1610, 1471, 147, 890, 436, 933, 607, 1261, 1448, 622, 17, 1731, 568, 392, 1157, 1406, 1507, 394, 254, 1343, 758, 1047, 129, 823, 1676, 536, 828, 360, 1290, 1613, 1696, 1217, 948, 1424, 1197, 1712, 242, 638, 1181, 1600, 1309, 787, 657, 1505, 92, 493, 500, 1413, 881, 1020, 116, 212, 1426, 253, 1552, 1323, 1490, 288, 1195, 920, 1508, 1534, 1169, 53, 297, 7, 1645, 1395, 1346, 1472, 1401, 1362, 603, 1692, 1077, 782, 1726, 945, 1554, 1299, 223, 200, 23, 630, 1255, 1571, 1081, 1372, 35, 1417, 1523, 1144, 390, 1076, 559, 709, 800, 1620, 115, 1148, 130, 1266, 1327, 348, 1520, 435, 1304, 581, 748, 1526, 1294, 462, 153, 1682, 759, 402, 562, 596, 530, 1496, 1191, 117, 1209, 572, 1485, 1166, 952, 218, 1158, 522, 361, 8, 1329, 1188, 251, 1314, 1234, 993, 518, 1514, 216, 1049, 1579, 1339, 106, 780, 1383, 1418, 1651, 869, 425, 1009, 694, 777, 537, 960, 1778, 1067, 137, 259, 1686, 166, 1155, 284, 206, 1449, 263, 105, 804, 1775, 331, 801, 1596, 104, 241, 742, 652, 594, 767, 769, 950, 59, 1014, 296, 1151, 165, 196, 1642, 1257, 1349, 721, 574, 127, 712, 3, 867, 969, 1216, 747, 1616, 586, 48, 1136, 598, 1783, 1256, 26, 90, 1153, 214, 549, 1035, 356, 1311, 1393, 1688, 1442, 32, 749, 213, 490, 125, 1008, 1272, 878, 306, 495, 1416, 1544, 1717, 337, 255, 1729, 144, 786, 1649, 1728, 1721, 447, 13, 913, 668, 711, 1025, 756, 1192, 1263, 1618, 1354, 606, 1720, 857, 608, 353, 875, 1273, 887, 1605, 504, 366, 1476, 274, 1330, 978, 1124, 1706, 972, 1633, 1054, 665, 1557, 1469, 1154, 840, 454, 992, 1080, 51, 615, 542, 1114, 1462, 1004, 98, 89, 958, 1051, 872, 1745, 1437, 1689, 439, 458, 1308, 1116, 29, 1208, 1378, 765, 941, 1268, 466, 1580, 444, 326, 1518, 763, 410, 550, 1211, 324, 580, 1574, 935, 874, 624, 1762, 1531, 28, 532, 342, 757, 277, 735, 1501, 54, 837, 1262, 1007, 1673, 76, 986, 553, 1042, 1687, 610, 355, 1219, 364, 152, 344, 313, 314, 1700, 1250, 954, 634, 50, 1457, 1510, 1237, 303, 112, 475, 272, 641, 1527, 521, 556, 1533, 1564, 210, 99, 1555, 78, 1305, 976, 481, 791, 642, 1434, 312, 839, 1454, 1718, 68, 715, 485, 172, 82, 163, 498, 663, 503, 1106, 1756, 1456, 1403, 1569, 1790, 1435, 554, 632, 295, 352, 1143, 1315, 1461, 81, 1246, 779, 1539, 469, 1716, 1683, 226, 1583, 964, 799, 971, 1665, 910, 625, 1763, 1258, 233, 584, 784, 349, 675, 1446, 691, 1206, 916, 699, 1638, 257, 1631, 1125, 797, 940, 240, 1094, 732, 1306, 1285, 405, 1252, 22, 1006, 1022, 858, 1460, 1558, 1044, 1108, 821, 1597, 1705, 681, 764, 94, 517, 1451, 432, 864, 289, 833, 91, 722, 190, 1779, 868, 1724, 966, 452, 161, 1182, 6, 695, 526, 1749, 573, 1432, 1547, 1333, 12, 1586, 685, 912, 136, 1780, 139, 664, 264, 280, 1033, 1730, 1031, 803, 1071, 1606, 135, 714, 1440, 815, 300, 551, 1220, 18, 1777, 1425, 967, 1241, 1131, 1298, 1270, 708, 713, 808, 563, 84 };
        assertEquals(974, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case48() {
        int N = 1487;
        int K = 742;
        int[] info = { 1355, 6, 598, 119, 1001, 204, 694, 1350, 880, 757, 1190, 859, 458, 1278, 591, 921, 736, 165, 856, 1045, 23, 1194, 467, 1412, 1077, 95, 1206 };
        assertEquals(745, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case49() {
        int N = 1756;
        int K = 1519;
        int[] info = { 299, 1171, 127, 1411, 440, 69, 1093, 1456, 579, 678, 1088, 131, 697, 623, 624, 759, 12, 1320, 209, 1494, 1553, 478, 1187, 167, 315, 904, 316, 180, 382, 360, 1265, 1051, 840, 491, 1704, 87, 908, 910, 321, 231, 247, 806, 1623, 1417, 1488, 241, 723, 980, 1206, 421, 1674, 336, 1137, 941, 1396, 1440, 1202, 631, 1065, 1344, 36, 246, 693, 213, 713, 754, 1715, 1290, 959, 741, 1270, 818, 216, 449, 1277, 590, 1358, 1677, 526, 1087, 755, 1610, 1591, 1333, 1291, 1181, 1723, 599, 22, 1330, 1542, 745, 1454, 1491, 1217, 200, 1413, 1331, 374, 920, 921, 1656, 442, 1250, 1727, 1365, 937, 1504, 1196, 688, 437, 1195, 768, 1267, 533, 1149, 883, 878, 232, 1650, 1059, 1574, 1163, 17, 604, 414, 704, 861, 1312, 593, 648, 122, 1249, 1443, 176, 1636, 1313, 1178, 549, 1058, 1524, 1369, 854, 1635, 470, 1516, 1307, 863, 1503, 528, 1139, 1132, 1580, 1418, 182, 155, 1253, 390, 805, 10, 369, 1577, 1699, 879, 655, 885, 1465, 342, 1683, 333, 720, 70, 1247, 1314, 789, 1475, 202, 988, 1255, 1716, 1657, 1572, 251, 67, 1143, 1190, 408, 1466, 173, 868, 276, 163, 521, 1125, 972, 187, 629, 483, 934, 1225, 1278, 499, 481, 60, 856, 490, 217, 1005, 270, 773, 1099, 862, 1429, 561, 383, 1684, 1675, 1306, 849, 1435, 208, 1624, 469, 1124, 999, 290, 825, 1297, 844, 312, 1546, 1539, 1111, 1162, 1197, 1697, 235, 955, 1262, 1402, 616, 1694, 537, 1213, 30, 1492, 1593, 340, 1523, 444, 586, 694, 553, 1119, 957, 1021, 147, 443, 606, 1754, 1482, 1655, 1142, 192, 1489, 148, 115, 581, 1406, 1422, 634, 1662, 271, 1734, 83, 119, 1687, 556, 473, 441, 876, 929 };
        assertEquals(996, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case50() {
        int N = 1080;
        int K = 162;
        int[] info = { 858, 527, 808, 574, 764, 848, 211, 511, 493, 966, 51, 1064, 92, 186, 839, 884, 1042, 522, 1022, 75, 1058, 354, 578, 1046, 947, 69, 719, 803, 1063, 1026, 668, 962, 478, 928, 623, 117, 687, 829, 142, 691, 1072, 530, 981, 125, 651, 670, 554, 599, 769, 776, 957, 718, 832, 541, 471, 608, 673, 657, 402, 406, 503, 868, 1079, 1073, 501, 67, 605, 482, 435, 891, 261, 407, 672, 750, 973, 788, 457, 880, 451, 4, 294, 490, 509, 463, 59, 105, 896, 583, 345, 901, 388, 870, 557, 740, 2, 243, 784, 964, 921, 708, 454, 133, 882, 319, 684, 624, 995, 8, 475, 968, 1039, 915, 197, 420, 484, 348, 1034, 380, 499, 699, 68, 400, 783, 796, 1009, 716, 223, 363, 222, 276, 616, 384, 152, 462, 437, 342, 1003, 42, 971, 1061, 1012, 367, 754, 809, 288, 993, 401, 498, 358, 917, 877, 710, 381, 704, 488, 714, 1048, 90, 215, 346, 748, 3, 912, 284, 974, 169, 45, 569, 54, 821, 535, 225, 166, 834, 328, 144, 762, 153, 229, 199, 879, 72, 1065, 532, 1033, 306, 1019, 266, 778, 111, 53, 12, 251, 209, 914, 815, 327, 842, 427, 293, 301, 107, 592, 721, 713, 642, 965, 46, 428, 516, 29, 634, 972, 495, 128, 103, 441, 161, 677, 800, 664, 431, 600, 526, 705, 789, 321, 538, 986, 693, 456, 338, 483, 692, 1021, 614, 539, 1008, 151, 25, 129, 580, 64, 110, 994, 934, 292, 549, 94, 961, 606, 477, 452, 955, 88, 370, 78, 940, 22, 336, 230, 542, 121, 318, 341, 603, 643, 697, 15, 837, 923, 720, 40, 982, 1, 700, 1028, 465, 963, 956, 422, 696, 33, 242, 38, 1051, 927, 573, 170, 362, 426, 786, 653, 231, 667, 741, 425, 513, 579, 340, 869, 711, 570, 1059, 806, 860, 353, 167, 1054, 695, 486, 360, 192, 918, 709, 436, 73, 838, 396, 1000, 168, 631, 1053, 555, 80, 641, 171, 519, 6, 39, 383, 194, 814, 610, 355, 738, 135, 309, 851, 409, 680, 618, 751, 193, 1047, 791, 798, 508, 213, 20, 189, 638, 675, 76, 339, 1078, 678, 178, 866, 85, 1069, 136, 74, 83, 344, 744, 941, 61, 735, 375, 1002, 298, 909, 894, 28, 256, 460, 564, 887, 224, 347, 41, 652, 408, 1014, 1052, 115, 755, 414, 118, 226, 27, 779, 250, 351, 686, 191, 545, 258, 845, 881, 207, 919, 890, 620, 1020, 893, 679, 793, 131, 349, 552, 447, 581, 1057, 722, 855, 771, 669, 960, 291 };
        assertEquals(540, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case51() {
        int N = 1841;
        int K = 280;
        int[] info = { 233, 184, 1130, 828, 1451, 830, 462, 948, 555, 973, 522, 887, 413, 1438, 57, 1687, 198, 1599, 936, 427, 905, 753, 1786, 831, 1379, 1063, 873, 1400, 1113, 1557, 463, 79, 1416, 42, 464, 1088, 157, 507, 1188, 1652, 1655, 424, 1814, 1532, 528, 954, 1234, 822, 943, 1147, 858, 70, 241, 1703, 566, 127, 1658, 1273, 1477, 975, 1173, 428, 848, 1212, 732, 882, 1555, 672, 942, 1396, 1466, 472, 1203, 1695, 25, 1442, 1263, 1552, 1299, 3, 1272, 1041, 336, 216, 628, 195, 196, 1409, 910, 458, 199, 1430, 482, 1760, 1102, 909, 842, 677, 1638, 476, 664, 1423, 1657, 392, 291, 1425, 1763, 508, 1756, 1723, 1802, 794, 1795, 1402, 319, 598, 1133, 819, 1682, 1258, 577, 926, 1581, 1725, 1827, 92, 763, 1505, 1792, 1156, 1543, 1735, 1352, 781, 1707, 687, 960, 989, 1207, 870, 30, 466, 388, 1838, 1596, 264, 416, 109, 810, 149, 1193, 1559, 488, 120, 1794, 1228, 1713, 1051, 1452, 570, 250, 317, 1059, 1524, 450, 589, 805, 649, 1521, 255, 1565, 90, 147, 14, 1172, 518, 73, 764, 115, 17, 1168, 350, 996, 191, 95, 958, 863, 1773, 1109, 857, 895, 726, 1688, 673, 1810, 1464, 1834, 1408, 410, 1171, 1605, 865, 971, 1832, 1733, 539, 1475, 727, 1722, 1734, 1187, 746, 1478, 521, 860, 680, 315, 1797, 1039, 809, 1013, 515, 890, 1750, 406, 1805, 1758, 1583, 1154, 145, 1361, 10, 755, 929, 97, 1167, 1691, 1282, 242, 759, 405, 1549, 454, 1132, 659, 1533, 248, 1530, 1825, 1098, 1286, 993, 1576, 361, 1339, 1106, 1470, 1313, 817, 1117, 820, 509, 1209, 1836, 1096, 545, 1514, 1640, 1116, 503, 403, 850, 548, 1693, 1241, 1427, 797, 1764, 1287, 1579, 1118, 329, 1664, 213, 1752, 234, 1468, 1406, 332, 452, 1632, 285, 855, 1839, 372, 1163, 121, 504, 791, 1145, 665, 1338, 719, 473, 1378, 1264, 429, 1536, 871, 1032, 949, 398, 2, 426, 1550, 363, 444, 1577, 334, 1439, 208, 1047, 290, 1678, 880, 1251, 1186, 112, 437, 990, 1437, 1242, 661, 1026, 714, 1093, 1417, 1647, 276, 1757, 1123, 498, 371, 1556, 1392, 1293, 1079, 635, 1033, 514, 790, 1811, 1420, 1002, 1540, 438, 1471, 1512, 919, 546, 83, 471, 308, 1050, 516, 1196, 1369, 621, 1355, 1801, 166, 901, 1014, 135, 1634, 1496, 1043, 838, 1083, 267, 1424, 483, 1745, 599, 631, 143, 1006, 486, 441, 1768, 47, 69, 1206, 1564, 970, 1818, 801, 230, 106, 411, 1501, 1590, 584, 107, 553, 1230, 189, 360, 1479, 453, 574, 1608, 131, 717, 699, 558, 1275, 440, 1531, 692, 616, 1216, 1620, 590, 1401, 1177, 1238, 537, 674, 383, 1769, 447, 1631, 1767, 391, 1730, 1135, 998, 803, 601, 1208, 366, 852, 609, 804, 306, 219, 1561, 1595, 1445, 744, 152, 494, 16, 193, 1405, 737, 572, 1336, 256, 807, 1766, 542, 1497, 192, 322, 1007, 1240, 1690, 641, 898, 469, 896, 436, 713, 1731, 1351, 1198, 301, 232, 1659, 1343, 775, 1813, 125, 595, 614, 400, 51, 1413, 1153, 638, 984, 1443, 1783, 1114, 903, 45, 594, 26, 1498, 927, 1316, 289, 1066, 571, 1024, 212, 826, 771, 46, 1089, 728, 1572, 585, 1670, 1259, 1459, 31, 922, 997, 55, 23, 1588, 917, 752, 1345, 1319, 321, 854, 983, 1297, 841, 1036, 1804, 999, 955, 1315, 525, 1124, 1265, 1210, 54, 1204, 1675, 547, 1806, 1064, 1353, 272, 1671, 1368, 1529, 825, 148, 1277, 1269, 1190, 851, 853, 1785, 544, 704, 96, 309, 1350, 1450, 314, 354, 28, 183, 1472, 607, 1493, 636, 1205, 81, 1491, 1181, 100, 530, 1676, 33, 265, 1292, 1307, 587, 671, 1323, 886, 376, 1309, 86, 1360, 200, 693, 449, 798, 397, 1597, 1091, 1463, 492, 1239, 53, 1753, 1715, 1225, 1642, 94, 505, 1618, 443, 1048, 133, 353, 527, 1791, 1218, 1165, 77, 758, 894, 1080, 908, 156, 612, 1103, 1373, 1291, 786, 1120, 273, 1354, 1535, 243, 351, 408, 685, 725, 1347, 1602, 1374, 252, 298, 1134, 859, 1737, 1214, 1219, 1149, 904, 1184, 1056, 1509, 1217, 1384, 735, 1534, 1578, 1375, 1072, 1254, 1252, 656, 1125, 1589, 721, 134, 1606, 1362, 878, 1587, 1372, 175, 286, 823, 757, 461, 613, 543, 1356, 1528, 1617, 500, 931, 384, 1195, 9, 1793, 1623, 12, 144, 925, 637, 800, 1609, 1490, 1236, 1633, 119, 181, 1227, 1367, 1635, 493, 1680, 122, 777, 1097, 1058, 261, 580, 1018, 1426, 1462, 784, 1702, 1279, 1629, 358, 923, 844, 1142, 1513, 333, 1077, 888, 395, 1057, 937, 709, 489, 221, 1553, 697, 1494, 824, 1233, 1694, 1151, 1078, 1289, 1440, 1584, 1648, 1787, 921, 802, 487, 1807, 1428, 1800, 38, 907, 1646, 1525, 985, 988, 1625, 1511, 945, 1390, 683, 592, 1215, 39, 165, 63, 519, 93, 818, 1245, 76, 1489, 236, 1009, 645, 186, 171, 1755, 204, 412, 105, 1155, 338, 1837, 1448 };
        assertEquals(917, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case52() {
        int N = 1008;
        int K = 26;
        int[] info = { 223, 231, 176, 415, 492, 208, 28, 804, 387, 853, 443, 18, 298, 496, 847, 625, 8, 721, 88, 961, 400, 201, 409, 812, 440, 568, 491, 93, 515, 623, 271, 343, 729, 477, 985, 849, 292, 214, 534, 70, 572, 926, 723, 791, 943, 335, 112, 697, 139, 428, 811, 707, 657, 142, 36, 832, 6, 834, 376, 73, 563, 672, 680, 439, 911, 308, 845, 923, 178, 105, 403, 989, 992, 441, 589, 196, 973, 754, 407 };
        assertEquals(501, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case53() {
        int N = 1683;
        int K = 771;
        int[] info = { 239, 510, 418, 481, 721, 1112, 54, 1105, 1218, 703, 267, 872, 1168, 1259, 1345, 1518, 1511, 683, 944, 377, 639, 1415, 792, 1411, 1649, 1058, 529, 746, 197, 954, 1243, 1680, 1364, 918, 215, 987, 3, 405, 1647, 382, 1375, 1626, 211, 22, 1398, 907, 403, 1558, 570, 1513, 352, 706, 244, 1116, 1292, 904, 93, 1617, 495, 981, 145, 1664, 780, 1623, 280, 1240, 1372, 686, 1162, 776, 1175, 1135, 1602, 296, 1304, 1614, 1265, 1305, 177, 713, 993, 875, 445, 164, 158, 1316, 251, 1381, 1289, 1433, 499, 1657, 212, 1059, 765, 335, 827, 1049, 1417, 351, 387, 270, 1084, 595, 891, 1429, 975, 1460, 337, 53, 112, 666, 203, 1165, 794, 1519, 853, 1167, 1512, 547, 620, 571, 1285, 1063, 741, 728, 389, 1011, 1088, 1486, 250, 282, 883, 1654, 286, 1432, 245, 1060, 188, 1298, 1358, 1520, 1144, 1052, 1038, 161, 309, 1263, 1012, 1593, 1096, 132, 14, 663, 1326, 950, 897, 487, 1264, 768, 736, 544 };
        assertEquals(911, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case54() {
        int N = 1954;
        int K = 481;
        int[] info = { 214, 1590, 106, 941, 1653, 1336, 258, 176, 369, 562, 267, 1852, 1725, 715, 640, 590, 1195, 658, 1870, 1049, 1623, 288, 998, 701, 765, 1748, 732, 1138, 1724, 862, 379, 844, 387, 942, 600, 1397, 1209, 257, 1638, 922, 1065, 1436, 1039, 1670, 1035, 806, 1073, 401, 783, 449, 963, 938, 1583, 1212, 1726, 253, 1435, 86, 1381, 309, 300, 1433, 672, 73, 1199, 649, 812, 760, 743, 668, 1177, 543, 1622, 1757, 1780, 822, 1804, 441, 464, 558, 815, 595, 1759, 985, 1320, 375, 1400, 705, 116, 1899, 1265, 1658, 1693, 1318, 1222, 1338, 948, 979, 1173, 1398, 1516, 943, 1220, 277, 997, 782, 1357, 625, 207, 483, 484, 551, 1391, 1112, 709, 835, 1868, 131, 1686, 1892, 1728, 1370, 982, 974, 1155, 1218, 112, 30, 1844, 393, 1001, 1603, 1286, 237, 1678, 517, 1316, 227, 305, 263, 254, 1707, 1522, 111, 20, 996, 1237, 1931, 1680, 479, 710, 973, 63, 419, 1946, 1665, 1233, 533, 1292, 255, 678, 1359, 1727, 225, 190, 1255, 384, 654, 407, 761, 529, 104, 1551, 201, 1020, 1540, 1015, 107, 2, 354, 284, 1593, 68, 197, 1249, 748, 953, 1640, 585, 1343, 362, 102, 609, 1281, 1470, 950, 1492, 318, 960, 1842, 1432, 1894, 766, 498, 1915, 703, 635, 1057, 1890, 1251, 259, 467, 553, 460, 495, 1639, 205, 1346, 91, 1898, 385, 552, 108, 1633, 1588, 693, 442, 1355, 1787, 152, 1809, 1585, 1806, 537, 1033, 391, 395, 1403, 900, 200, 1681, 1562, 866, 1621, 163, 1327, 1228, 1216, 1932, 1720, 1389, 1749, 330, 124, 1022, 970, 515, 1830, 1380, 528, 226, 1310, 1287, 1361, 892, 458, 839, 1799, 1553, 1789, 1718, 535, 1072, 763, 1421, 482, 1269, 860, 1139, 1059, 1225, 1611, 864, 274, 181, 1486, 848, 1627, 1434, 51, 1862, 1119, 905, 1041, 1943, 1144, 727, 1706, 430, 1319, 631, 1108, 1342, 686, 749, 1181, 447, 821, 1542, 1700, 657, 165 };
        assertEquals(990, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case55() {
        int N = 650;
        int K = 12;
        int[] info = { 500, 160, 368, 409, 514, 377, 167, 51, 429, 245, 1, 647, 17, 358, 307, 570, 327, 415, 243, 567, 370, 96, 203, 496, 186, 76, 152, 344, 7, 509, 596, 285, 555, 554, 412, 183, 325, 616, 353, 151, 208, 101, 295, 612, 87, 190, 406, 615, 178, 563, 576, 527, 70, 549, 628, 418, 269, 32, 253, 63, 194, 205, 256, 342, 466, 80, 192, 22, 68, 445, 619, 30, 453, 568, 260, 413, 579, 189, 19, 423, 391, 229, 275, 359, 85, 163, 140, 162, 642, 341, 104, 303, 411, 315, 44, 538, 371, 233, 278, 522, 361, 316, 153, 71, 276, 97, 537, 613, 244, 323, 340, 252, 624, 13, 21, 439, 117, 435, 450, 92, 4, 556, 38, 584, 139, 217, 88, 577, 483, 213, 469, 643, 593, 557, 442, 25, 349, 631, 626, 441, 313, 486, 474, 264, 263, 452, 228, 237, 565, 291, 545, 143, 476, 649, 287, 464, 566, 502, 630, 195, 116, 50, 580, 489, 400, 57, 376, 283, 594, 219, 541, 114, 107, 172, 357, 181 };
        assertEquals(310, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case56() {
        int N = 1572;
        int K = 139;
        int[] info = { 996, 1020, 1172, 1258, 1115, 781, 607, 617, 1158, 1144, 950, 740, 388, 1127, 293, 1324, 903, 1552, 1403, 1402, 929, 1169, 346, 679, 627, 1149, 724, 146, 1570, 777, 63, 64, 190, 460, 761, 1550, 116, 35, 1442, 844, 457, 1500, 1388, 1294, 949, 400, 765, 897, 428, 1366, 1146, 1483, 1070, 911, 632, 842, 754, 209, 947, 110, 497, 1308, 1154, 1267, 53, 1022, 1095, 165, 290, 1122, 480, 655, 89, 381, 364, 92, 988, 995, 390, 500, 288, 255, 789, 933, 118, 1492, 216, 465, 810, 1065, 1409, 838, 1422, 440, 975, 584, 152, 1333, 530, 695, 1157, 563, 1329, 189, 1420, 229, 1327, 367, 898, 835, 581, 1136, 958, 1499, 17, 1079, 6, 1457, 1163, 162, 62, 1179, 345, 14, 94, 1284, 1360, 730, 904, 726, 1044, 546, 635, 1225, 669, 10, 1083, 1443, 616, 869, 20, 496, 403, 946, 678, 1424, 771, 492, 487, 922, 228, 169, 175, 1369, 698, 292, 466, 832, 580, 1534, 861, 1256, 324, 1531, 1439, 476, 624, 905, 461, 1251, 356, 69, 1314, 1102, 34, 978, 828, 87, 184, 211, 431, 908, 707, 1133, 99, 819, 705, 1021, 399, 924, 1300, 1343, 1250, 1268, 704, 421, 219, 370, 1353, 785, 1432, 1365, 1150, 590, 102, 1513, 994, 579, 849, 1514, 630, 744, 1381, 15, 1436, 749, 1506, 1539, 1123, 570, 999, 1401, 1061, 885, 179, 160, 1100, 70, 295, 1374, 674, 46, 787, 1012, 1445, 1255, 91, 1484, 1358, 397, 943, 1181, 1112, 1107, 217, 1153, 11, 593, 1543, 1156, 769, 545, 1000, 226, 201, 1224, 213, 954, 423, 776, 760, 770, 368, 1162, 544, 732, 21, 309, 262, 72, 1475, 1232, 1286, 930, 1547, 1054, 1454, 166, 424, 111, 508, 1234, 1463, 1451, 1235, 55, 866, 1527, 334, 1393, 472, 1533, 1444, 1160, 1140, 1230, 1316, 1315, 407, 591, 199, 142, 1318, 1325, 1266, 1568, 535, 1509, 1032, 1549, 503, 474, 577, 214, 940, 719, 1538, 647, 88, 741, 825, 605, 919, 1558, 1270, 1023, 1285, 79, 413, 731, 502, 893, 1001, 889, 304, 822, 1346, 852, 47, 596, 1028, 39, 1340, 735, 4, 725, 736, 1523, 1320, 238, 746, 339, 303, 874, 454, 1210, 289, 156, 1555, 205, 1430, 191, 1339, 332, 773, 615, 509, 196, 1036 };
        assertEquals(792, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case57() {
        int N = 1506;
        int K = 785;
        int[] info = { 1253, 263, 144, 315, 503, 1292, 1017, 900, 710, 738, 1453, 571, 92, 102, 1146, 1004, 177, 1190, 536, 581, 1257, 113, 812, 1477, 1404, 646, 528, 252, 1130, 1455, 932, 588, 866, 222, 72, 423, 1207, 591, 119, 1134, 199, 1395, 131, 739, 296, 1187, 1050, 743, 998, 529, 1378, 849, 593, 284, 1181, 1282, 898, 1150, 390, 22, 1074, 1275, 268, 293, 351, 929, 1242, 406, 800, 447, 29, 350, 257, 968, 1437, 1324, 661, 375, 854, 359, 1118, 1109, 1397, 227, 625, 388, 1133, 442, 175, 1383, 1497, 623, 1323, 754, 380, 586, 398, 317, 249, 1064, 773, 522, 42, 1209, 1164, 605, 91, 1505, 643, 1137, 1281, 314, 1167, 811, 259, 402, 755, 1252, 1115, 1451, 1236, 290, 1217, 786, 1305, 816, 601, 711, 5, 246, 1025, 1415, 1421, 515, 513, 505, 44, 418, 769, 465, 793, 1103, 240, 585, 549, 1429, 1177, 664, 124, 201, 908, 1205, 1302, 514, 160, 1248, 145, 403, 117, 782, 436, 480, 1501, 386, 1200, 1461, 861, 986, 1337, 761, 916, 421, 939, 115, 109, 435, 509, 16, 776, 1372, 823, 1096, 541, 621, 697, 373, 239, 561, 49, 1355, 196, 836, 1244, 328, 819, 1095, 23, 728, 278, 1448, 658, 668, 245, 1370, 1285, 1131, 280, 996, 3, 1203, 374, 1023, 766, 482, 1357, 385, 81, 408, 833, 1376, 180, 488, 791, 626, 1411, 960, 1286, 804, 1102, 1354, 654, 1452, 1401, 500, 376, 499, 756, 1410, 758, 1287, 817, 57, 535, 368, 524, 1195, 1202, 694, 1031, 1368, 1077, 1179, 682, 300, 1105, 169, 952, 712, 1042, 1149, 1048, 464, 954, 486, 878, 414, 729, 989, 657, 1192, 1060, 1374, 1168, 617, 600, 1191, 834, 1231, 752, 1328, 1384, 279, 1414, 653, 1108, 809, 938, 341, 703, 525, 1045, 247, 1385, 80, 211, 339, 1438, 485, 58, 1229, 173, 614, 1261, 839, 1422, 387, 852, 733, 134, 992, 736, 230, 777, 321, 1325, 440, 168, 796, 651, 412, 358, 203, 182, 879, 292, 476, 618, 383, 348, 449, 719, 30, 1240, 888, 1343, 1430, 1026, 1009, 870, 953, 1490, 1496, 1100, 391, 909, 1119, 1314, 40, 170, 638, 2, 1494, 985, 78, 656, 15, 365, 798, 90, 219, 379, 1183, 681, 1312, 1003, 672, 26, 224, 1228, 178, 343, 1027, 1013, 995, 958, 610, 722, 1498, 31, 1221, 1153, 641, 946, 1208, 166, 519, 1396, 1265, 171, 1408, 705, 231, 85, 832, 622, 63, 947, 116, 322, 1071, 1345, 294, 483, 903, 517, 20, 1204, 1053 };
        assertEquals(764, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case58() {
        int N = 1275;
        int K = 128;
        int[] info = { 1141, 524, 227, 384, 641, 399, 956, 1085, 283, 431, 980, 453, 228, 1198, 161, 635, 503, 1210, 309, 790, 229, 604, 1004, 1137, 380, 943, 286, 1076, 613, 634, 1180 };
        assertEquals(638, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case59() {
        int N = 1297;
        int K = 363;
        int[] info = { 549, 435, 889, 1118, 1073, 925, 629, 656, 254, 590, 461, 780, 237, 1125, 369, 854, 596, 521, 462, 13, 1022, 916, 1025, 867, 1071, 1269, 1162, 702, 536, 778, 450, 605, 253, 1038, 151, 496, 1214, 955, 1293, 448, 724, 717, 1278, 1138, 573, 1057, 694, 677, 1227, 217, 792, 1202, 548, 797, 301, 302, 504, 653, 898, 861, 338, 620, 601, 591, 1083, 198, 316, 377, 288, 293, 1081, 1139, 442, 154, 751, 666, 981, 244, 1145, 1244, 959, 449, 1154, 1076, 278, 466, 839, 1055, 1052, 202, 1249, 641, 696, 1140, 112, 795, 985, 939, 104, 1070, 833, 1290, 569, 218, 1190, 587, 627, 15, 593, 69, 291, 505, 45, 1062, 1192, 359, 756, 991, 44, 1295, 1275, 977, 1165, 992, 433, 384, 152, 1122, 540, 111, 53, 978, 1270, 843, 1157, 339, 201, 1114, 404, 1155, 552, 405, 1283, 922, 420, 1245, 570, 362, 381, 510, 1101, 884, 687, 1010, 813, 355, 1257, 17, 938, 430, 399, 1069, 363, 1016, 138, 1289, 1056, 1204, 177, 453, 714, 80, 840, 1106, 506, 190, 773, 740, 255, 1167, 120, 252, 748, 1248, 873, 574, 188, 989, 910, 1024, 836, 815, 581, 737, 968, 909, 236, 557, 1197, 760, 845, 445, 305, 323, 556, 454, 732, 349, 425, 1046, 882, 292, 594, 987, 483, 146, 485, 247, 324, 1148, 550, 490, 460, 982, 1043, 169, 586, 927, 73, 846, 479, 242, 758, 509, 544, 1258, 969, 7, 19, 468, 626, 143, 577, 129, 864, 32, 945, 1104, 923, 284, 1041, 48, 79, 1036, 1004, 329, 665, 276, 409, 1111, 1134, 986, 119, 313, 1213, 287, 142, 1082, 334, 602, 767, 1188, 791, 1078, 660, 1177, 1231, 759, 730, 1209, 295, 789, 1107, 877, 97, 715, 1284, 819, 1191, 1160, 98, 300, 931, 219, 984, 895, 865, 51, 311, 153, 380, 1255, 885, 1189, 564, 979, 12, 974, 640, 546, 486, 514, 661, 1109, 1006, 25, 1143, 229, 728, 415, 240, 1199, 351, 372, 734, 848, 1032, 78, 563, 18, 824, 539, 134, 565, 958, 859, 54, 414, 1090, 578, 315, 708, 1027, 857, 407, 456, 248, 328, 801, 4, 227, 213, 330, 410, 783, 439, 1219, 185, 897, 241, 892, 167, 647, 52, 312, 1066, 55, 713, 289, 1079, 332, 572, 319, 183, 1124, 529, 375, 239, 868, 1237, 1281, 1187, 876, 59, 766, 1059, 85, 1136, 858, 847, 140, 745, 580, 474, 89, 92, 81, 621, 257, 957, 114, 613, 172, 912, 676, 1000, 1262, 1228, 128, 924, 170, 28, 47, 1196, 181, 33, 306, 1092, 199, 532, 156, 155, 1095, 159, 692, 234, 11, 793, 354, 822, 960, 826, 1233, 1047, 475, 599, 83, 929, 639, 438, 1178, 187, 1282, 36, 1163, 971, 844, 260, 1212, 658, 1048, 383, 396, 84, 794, 742, 493, 1184, 513, 1280, 625, 209, 1253, 949, 1, 619, 503, 102, 150, 374, 551, 888, 567, 956, 817, 197, 1017, 1135, 75, 123, 88, 622, 772, 68, 781, 886, 221, 973, 194, 1238, 774, 1009, 249, 820, 427, 10, 259, 162, 1149 };
        assertEquals(655, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case60() {
        int N = 708;
        int K = 316;
        int[] info = { 203, 160, 539, 577, 491, 277, 685, 198, 483, 205, 103, 588, 153, 36, 145, 256, 363, 101, 93, 81, 134, 498, 370, 242, 269, 278, 88, 56, 118, 37, 589, 238, 254, 195, 700, 492, 341, 274, 335, 459, 631, 473, 395, 639, 162, 706, 644, 562, 121, 22, 406, 596, 61, 258, 444, 135, 615, 355, 123, 664, 613, 386, 470, 220, 422, 119, 64, 420, 516, 689, 180, 641, 659, 607, 593, 236, 79, 233, 446, 394, 275, 77, 550, 643, 181, 555, 131, 528, 334, 435, 629, 222, 598, 536, 43, 261, 449, 380, 133, 410, 117, 535, 497, 357, 98, 547, 257, 143, 526, 91, 213, 392, 4, 106, 30, 608, 571, 202, 667, 286, 688, 95, 515, 493, 437, 197, 252, 628, 62, 452, 625, 42, 568, 665, 253, 136, 124, 651, 445, 471, 431, 3, 114, 375, 280, 248, 436, 364, 49, 59, 544, 496, 518, 227, 430, 421, 708, 682, 237, 701, 137, 694, 16, 87, 462, 7, 243, 169, 510, 251, 635, 67, 686, 104, 609, 442, 507, 241, 388, 579, 39, 626, 400, 92, 120, 389, 51, 542, 655, 505, 90, 54, 333, 487, 671, 451 };
        assertEquals(392, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case61() {
        int N = 1507;
        int K = 1009;
        int[] info = { 310, 895, 1443, 116, 1458, 420, 202, 1145, 693, 512, 209, 1350, 1126, 449, 1176, 1125, 1456, 90, 1142, 176, 643, 52, 482, 64, 1006, 375, 1105, 732, 252, 642, 908, 214, 1194, 1257, 898, 1034, 378, 915, 1507, 131, 1128, 1234, 743, 1353, 938, 103, 311, 132, 1132, 1100, 706, 1316, 989, 543, 542, 531, 1391, 768, 912, 545, 832, 862, 395, 1466, 757, 811, 873, 370, 559, 224, 1063, 71, 262, 22, 1389, 1043, 393, 1011, 1150, 146, 575, 994, 798, 664, 983, 658, 59, 1246, 902, 1450, 747, 327, 1292, 735, 945, 74, 580, 1262, 492, 820, 133, 1267, 125, 957, 1204, 1164, 382, 172, 605, 410, 688, 1127, 1195, 1037, 452, 540, 302, 1220, 1095, 967, 417, 987, 581, 320, 775, 1091, 933, 622, 485, 845, 351, 1416, 1238, 1334, 1363, 997, 1101, 1032, 624, 1489, 751, 1031, 1023, 930, 1208, 1109, 759, 584, 203, 139, 966, 200, 443, 1467, 179, 700, 337, 1036, 1193, 1081, 824, 201, 246, 394, 560, 618, 491, 1406, 329, 1025, 234, 8, 1405, 563, 1364, 418, 363, 691, 156, 91, 92, 298, 196, 459, 1046, 730, 1072, 1388, 1457, 464, 129, 1306, 81, 1417, 680, 1453, 694, 977, 1469, 1483, 1452, 607, 421, 1000, 918, 894, 872, 381, 615, 942, 927, 301, 1495, 1392, 1485, 95, 106, 212, 508, 602, 921, 805, 1209, 51, 27, 13, 79, 219, 1239, 110, 244, 1413, 1284, 710, 1008, 258, 195, 1379, 596, 1227, 1251, 857, 904, 593, 400, 1274, 1088, 1367, 969, 478, 1333, 578, 850, 326, 849, 1268, 185, 744, 707, 1282, 386, 442, 785, 210, 1114, 1331, 68, 556, 1504, 1184, 639, 806, 1024, 980, 70, 1278, 1235, 792, 861, 183, 314, 963, 431, 1219, 779, 1089, 96, 841, 522, 1, 1168, 1501, 1327, 154, 1201, 266, 523, 676, 734, 536, 499, 1111, 843, 1166, 496, 827, 1411, 1026, 281, 481, 1505, 297, 204, 1280, 1355, 437, 842, 1436, 54, 408, 319, 1470, 1408, 818, 913, 39, 799, 1035, 633, 1233, 557, 1460, 112, 973, 216, 1474, 441, 84, 1423, 1479, 1058, 1005, 738, 83, 1073, 1057, 884, 472, 626, 836, 1264, 939, 324, 271, 1249, 1369, 795, 513, 663, 975, 934, 682, 211, 990, 667, 69, 346, 1357, 1033, 456, 926, 413, 591, 371, 49, 1438, 1019, 379, 1335, 278, 1020, 863, 105, 949, 501, 701, 1313, 834, 537, 260, 1064, 988, 19, 48, 88, 1393, 574, 403, 1326, 359, 497, 1298, 749, 344, 976, 698, 438, 1365, 1122, 793, 1231, 569, 228, 588, 269, 490, 1347, 888, 846, 587, 383, 470, 1092, 484, 73, 567, 14, 250, 1344, 1435, 361, 1155, 606, 494, 645, 1185, 1206, 1328, 669, 721, 535, 164, 506, 831, 1139, 729, 583, 1315, 184, 1445, 962, 796, 223, 1294, 358, 1258, 1099, 826, 150, 80, 530, 555, 852, 576, 899, 1078, 1002, 964, 1096, 142, 674, 901, 840, 1067, 1484, 268, 1336, 889, 181, 23, 350, 1141, 876, 970, 974, 1136, 462, 780, 946, 616, 1468, 1291, 1374, 1305, 753 };
        assertEquals(829, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case62() {
        int N = 1565;
        int K = 284;
        int[] info = { 252, 453, 1485, 35, 942, 1527, 1476, 462, 116, 1311, 88, 1283, 1549, 363, 1060, 1558, 1304, 642, 133, 1406, 634, 379, 982, 631, 485, 932, 67, 1347, 269, 1350, 1559, 534, 936, 620, 1373, 375, 1109, 194, 9, 653, 904, 1457, 1054, 466, 956, 1013, 652, 21, 1017, 247, 1295, 767, 427, 1408, 947, 739, 1377, 177, 15, 1542, 1104, 626, 627, 1034, 1423, 283, 1012, 109, 578, 1105, 906, 1077, 772, 624, 574, 692, 590, 1471, 468, 310, 384, 1322, 595, 290, 351, 879, 70, 211, 856, 112, 1321, 3, 317, 1484, 632, 139, 141, 1430, 190, 1269, 771, 573, 583, 22, 599, 30, 243, 278, 889, 1204, 417, 1023, 548, 52, 238, 644, 816, 1460, 248, 1526, 385, 658, 423, 1107, 1110, 1562, 922, 13, 399, 424, 170, 1265, 280, 832, 1508, 1014, 490, 233, 1029, 826, 969, 1342, 902, 111, 824, 1561, 1079, 332, 1182, 343, 941, 643, 268, 1166, 1435, 301, 1463, 1376, 1280, 696, 769, 44, 789, 1181, 434, 1494, 874, 274, 872, 297, 209, 1157, 1075, 164, 1411, 1307, 1159, 633, 357, 841, 120, 215, 1488, 1299, 174, 404, 988, 683, 794, 1058, 1490, 62, 1073, 510, 1309, 888, 702, 1260, 168, 781, 519, 1387, 957, 963, 731, 1132, 1184, 304, 222, 770, 1114, 580, 264, 838, 814, 1262, 779, 356, 714, 261, 1220, 1250, 1480, 338, 392, 588, 198, 765, 130, 1090, 1179, 389, 117, 147, 1258, 721, 1050, 308, 514, 705, 1125, 1366, 1093, 908, 1361, 347, 1219, 393, 24, 489, 32, 493, 119, 1426, 1112, 1455, 1454, 1035, 638, 86, 1131, 293, 1191, 764, 1187, 497, 365, 732, 213, 1289, 737, 687, 1544, 891, 459, 28, 1056, 733, 410, 1506, 1329, 1293, 1552, 1144, 1211, 1113, 1404, 1286, 817, 946, 716, 950, 1099, 870, 1057, 1364, 606, 554, 1469, 919, 1083, 1431, 971, 400, 655, 536, 1381, 421, 382, 383, 387, 1042, 129, 302, 405, 1306, 360, 330, 520, 650, 515, 651, 1496, 795, 239, 710, 549, 1412, 701, 407, 552, 200, 1190, 730, 270, 152, 103, 1155, 820, 836, 1428, 1237, 1161, 135, 435, 41, 1305, 1069, 1006, 305, 1275, 930, 1555, 1026, 1261, 36, 240, 102, 1448, 1102, 1370, 1270, 943, 5, 131, 754, 577, 1051, 231, 1068, 998, 799, 636, 1518, 984, 1238, 324, 910, 115, 728, 776, 1037, 97, 1158, 666, 1000, 935 };
        assertEquals(800, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case63() {
        int N = 1713;
        int K = 180;
        int[] info = { 332, 1130, 853, 222, 313, 1206, 751, 931, 151, 1246, 693, 1331, 102, 202, 1059, 51, 1087, 253, 1328, 329, 834, 943, 740, 1002, 1193, 662, 1461, 765, 670, 913, 355, 859, 737, 1646, 1304, 518, 1519, 514, 1549, 1525, 282, 120, 171, 1264, 643, 910, 1529, 636, 164, 1456, 75, 1592, 215, 1450, 677, 110, 1094, 18, 112, 1103, 251, 361, 1322, 681, 515, 269, 694, 46, 154, 243, 1088, 43, 688, 346, 40, 778, 1653, 1310, 1370, 135, 815, 1617, 1293, 1348, 152, 28, 842, 101, 1073, 703, 229, 1074, 368, 614, 1365, 1407, 940, 1295, 563, 1504, 782, 1244, 1086, 1487, 1306, 260, 1451, 1211, 950, 1108, 576, 1496, 1523, 1499, 1373, 1705, 1277, 903, 1279, 850, 1710, 1608, 1379, 865, 128, 964, 1355, 1082, 1139, 86, 1402, 1351, 194, 1145, 292, 674, 1033, 1273, 1099, 1027, 1135, 1658, 1114, 1199, 938, 631, 398, 771, 124, 1118, 470, 1663, 23, 371, 887, 1427, 1046, 1503, 206, 1670, 374, 1182, 1054, 537, 1528, 1106, 76, 845, 13, 1283, 157, 630, 350, 89, 1411, 1660, 174, 729, 1131, 1060, 467, 1031, 583, 1340, 968, 526, 1428, 952, 308, 78, 1590, 16, 907, 1657, 356, 1142, 437, 150, 899, 1408, 939, 1629, 1544, 1542, 178, 1709, 1327, 578, 846, 525, 898, 1121, 1386, 671, 316, 548, 1501, 890, 802, 474, 15, 1358, 672, 1655, 1063, 911, 701, 521, 1603, 186, 876, 99, 320, 590, 994, 22, 1399, 695, 1581, 1452, 389, 998, 227, 749, 113, 1712, 1210, 118, 1300, 184, 725, 961, 788, 1672, 373, 158, 541, 897, 923, 1071, 297, 1395, 829, 405, 234, 768, 1095, 20, 1706, 340, 1329, 339, 1454, 1153, 1079, 32, 1589, 869, 519, 669, 1564, 179, 266, 1486, 1133, 1237, 1536, 984, 707, 1049, 1690, 1115, 238, 1220, 1184, 1654, 536, 1556, 1201, 1547, 1436, 299, 1004, 1123, 463, 357, 616, 334, 1477, 1243, 627, 1042, 281, 341, 716, 414, 875, 198, 793, 196, 919, 1225, 761, 444, 95, 641, 1540, 136, 1505, 598, 1346, 1478, 342, 678, 820, 823, 214, 131, 1637, 858, 1068, 1245, 1149, 148, 877, 80, 404, 397, 436, 817, 443, 1318, 1263, 315, 278, 488, 839, 189, 1111, 1217, 424, 1302, 307, 579, 1566, 1338, 289, 491, 140, 1040, 1030, 912, 42, 1401, 1628, 1272, 962, 1353, 456, 544, 1554, 445, 1483, 1534, 1174, 1466, 921, 1563, 594, 205, 406, 383, 885, 1701, 464, 1003, 1137, 1208, 1548, 1134, 892, 1267, 1492, 569, 1392, 601, 1028, 1673, 591, 1510, 403, 1022, 1156, 555, 1018, 888, 1489, 1344, 1270, 1467, 908, 902, 1037, 33, 586, 516, 1065, 1613, 711, 1491, 29, 1296, 1681, 451, 665, 1366, 504, 84, 714, 91, 904, 1289, 655, 1169, 167, 67, 330, 870, 1361, 946, 19, 59, 1669, 963, 310, 169, 808, 648, 1579, 730, 941, 239, 813, 1531, 1423, 277, 1098, 53, 1154, 442, 988, 954, 1261, 1075, 1253, 1508, 1323, 553, 303, 480, 1141, 933, 1214, 760, 949, 647, 1650, 1578, 256, 1285, 1464, 247, 1485, 457, 957, 1577, 731, 629, 743, 1257, 216, 1316, 996, 290, 1136, 400, 17, 1036, 434, 106, 854, 1652, 1621, 759, 764, 1083, 1104, 477, 133, 1537, 1205, 240, 503, 1605, 323, 265, 1105, 137, 168, 311, 70, 1455, 691, 410, 1638, 1341, 1151, 624, 1700, 539, 484, 976, 258, 296, 430, 723, 1282, 1381, 1177, 1488, 735, 554, 250, 676, 947, 767, 927, 529, 1256, 1555, 653, 25, 1247, 739, 791, 960, 337, 715, 26, 718, 642, 1622, 1616, 1446, 915, 446, 1671, 511, 1045, 874, 657, 1350, 628, 1513, 1448, 1116, 1081, 1576, 237, 262, 973, 1053, 1449, 7, 11, 146, 1473, 1439, 860 };
        assertEquals(853, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case64() {
        int N = 1792;
        int K = 1137;
        int[] info = { 907, 88, 1452, 1539, 1496, 1314, 554, 94, 1327, 1154, 1035, 52, 47, 994, 1454, 1771, 1476, 1693, 729, 6, 539, 443, 755, 1025, 1220, 305, 17, 974, 240, 118, 82, 946, 416, 1328, 762, 1538, 20, 437, 1335, 139, 409, 1258, 572, 58, 323, 61, 1433, 850, 753, 1559, 812, 63, 113, 1449, 254, 242, 375, 389, 773, 961, 1680, 1122, 431, 293, 1263, 454, 1457, 468, 575, 397, 1143, 488, 77, 819, 639, 1661, 1497, 1603, 1418, 38, 1696, 951, 808, 993, 909, 1204, 615, 570, 782, 78, 596, 258, 1628, 967, 1614, 1702, 1443, 546, 188, 830, 95, 1380, 1219, 1560, 490, 828, 585, 972, 680, 1020, 960, 768, 22, 25, 259, 1002, 1463, 697, 1194, 442, 472, 1602, 18, 403, 497, 1306, 1688, 486, 1671, 361, 747, 238, 1188, 226, 439, 790, 173, 1486, 934, 26, 169, 1361, 396, 558, 1262, 1413, 1513, 275, 702, 594, 417, 1226, 1590, 1247, 1730, 1170, 1622, 1271, 1464, 792, 1775, 904, 99, 687, 624, 1046, 858, 1784, 1412, 244, 621, 1344, 132, 301, 135, 988, 741, 1630, 1240, 1343, 1402, 1405, 910, 1018, 523, 1442, 1386, 1114, 838, 1126, 299, 65, 32, 37, 1783, 456, 1078, 793, 1482, 810, 638, 422, 1299, 102, 906, 476, 165, 378, 320, 1357, 785, 475, 1739, 407, 39, 772, 1202, 1121, 479, 1612, 1453, 1430, 689, 627, 1273, 471, 1705, 1608, 391, 1500, 1159, 566, 1235, 1171, 1529, 371, 701, 120, 62, 803, 899, 162, 383, 918, 1370, 1596, 1075, 966, 629, 1289, 1562, 1748, 530, 129, 104, 1421, 1475, 1203, 345, 473, 769, 21, 355, 651, 1517, 1231, 91, 1360, 676, 859, 256, 1229, 1316, 159, 249, 1301, 1745, 1434, 1163, 775, 150, 926, 445, 1326, 1777, 1083, 1403, 1146, 155, 612, 314, 831, 673, 30, 1213, 1211, 1440, 1396, 1425, 1394, 1639, 602, 1637, 316, 1588, 373, 303, 1005, 1187, 29, 1345, 1390, 659, 109, 679, 42, 157, 1334, 777, 206, 1395, 1193, 1684, 1123, 441, 839, 601, 1320, 53, 1200, 1568, 634, 458, 978, 1292, 1151, 871, 281, 1717, 328, 1780, 55, 1600, 263, 935, 1026, 1131, 265, 1108, 34, 168, 368, 990, 48, 500, 1164, 1135, 1675, 698, 893, 390, 435, 1591, 324, 953, 571, 506, 1726, 809, 1785, 1230, 49, 336, 610, 1199, 1107, 616, 1779, 1534, 1245, 268, 1736, 720, 1477, 1358, 1686, 544, 745, 446, 1134, 721, 865, 1485, 1168, 1528, 1192, 236, 153, 666, 1248, 343, 1139, 1458, 346, 578, 949, 855, 682, 842, 1516, 1721, 922, 247, 984, 79, 16, 735, 903, 496, 852, 630, 399, 1364, 1321, 1350, 1636, 724, 837, 1526, 1352, 1086, 1743, 1333, 204, 654, 1714, 1752, 1385, 681, 1594, 267, 823, 705, 1329, 636, 3, 1223, 80, 453, 801, 332, 628, 1302, 1119, 1156, 956, 535, 1707, 1027, 278, 1003, 1296, 297, 432, 1004, 1782, 647, 891, 1624, 233, 556, 1037, 786, 1290, 1436, 692, 1291, 143, 1141, 27, 1124, 1756, 884, 1322, 1510, 1593, 1058, 940, 987, 699, 531, 1224, 1256, 51, 1278, 1604, 1571, 1699, 326, 520, 76, 1460, 1182, 1759, 1414, 245, 1727, 912, 304, 818, 1597, 1685, 1359 };
        assertEquals(1009, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case65() {
        int N = 1020;
        int K = 424;
        int[] info = { 694, 266, 407, 934, 569, 736, 721, 106, 792, 1013, 906, 940, 302, 138, 970, 602, 696, 938, 910, 234, 39, 643, 739, 921, 108, 143, 397, 359, 719, 852, 512, 848, 773, 1009, 255, 478, 345, 219, 354, 164, 277, 432, 702, 816, 157, 898, 519, 316, 190, 224, 819, 307, 441, 186, 191, 452, 832, 443, 706, 226, 497, 22, 312, 9, 390, 681, 812, 798, 660, 436, 383, 628, 817, 401, 782, 620, 442, 44, 644, 728, 506, 223, 263, 321, 645, 109, 668, 233, 1003, 482, 488, 454, 159, 462, 905, 424, 470, 447, 66, 835, 729, 568, 105, 498, 110, 174, 445, 232, 71, 759, 985, 150, 320, 371, 619, 41, 557, 24, 299, 147, 745, 753, 427, 610, 992, 553, 824, 253, 986, 101, 45, 743, 561, 669, 734, 731, 458, 139, 419, 481, 28, 259, 860, 878, 1017, 293, 317, 19, 502, 599, 888, 434, 838, 868, 376, 912, 151, 184, 201, 603, 335, 115 };
        assertEquals(592, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case66() {
        int N = 1728;
        int K = 250;
        int[] info = { 408, 187, 1616, 478, 827, 67, 612, 1566, 21, 1276, 1361, 1378, 109, 1664, 608, 1493, 1261, 305, 855, 185, 482, 1568, 619, 1422, 1305, 202, 953, 329, 1398, 1263, 1639, 881, 247, 327, 969, 960, 1570, 609, 153, 1306, 1058, 1373, 1644, 1219, 591, 1509, 1284, 155, 406, 816, 1605, 444, 1699, 893, 1268, 164, 44, 236, 488, 1273, 337, 788, 1290, 404, 1099, 1719, 451, 272, 1029, 1145, 1560, 1474, 634, 1217, 690, 1549, 1153, 138, 264, 1388, 1294, 956, 60, 290, 959, 753, 994, 1673, 1349, 1402, 47, 438, 1346, 1027, 852, 705, 582, 1101, 1201, 1051, 1522, 1623, 1594, 820, 446, 150, 1579, 142, 1435, 116, 492, 1460, 833, 1725, 625, 357, 519, 1631, 1567, 227, 952, 25, 895, 386, 546, 1141, 675, 448, 48, 1489, 1581, 40, 107, 949, 301, 641, 452, 1409, 1403, 979, 80, 759, 792, 1401, 1675, 920, 1225, 1498, 964, 890, 1068, 727, 1310, 421, 1100, 750, 1636, 115, 1002, 588, 1060, 1380, 1082, 1524, 1043, 77, 1657, 1434, 624, 200, 1124, 894, 942, 1624, 1049, 541, 136, 1054, 401, 178, 1632, 288, 1442, 875, 238, 1674, 1451, 923, 1661, 1295, 1123, 511, 653, 841, 1622, 885, 118, 910, 1176, 1544, 252, 883, 1717, 1494, 145, 747, 1023, 829, 330, 655, 268, 683, 385, 983, 1514, 1251, 114, 350, 1150, 196, 1478, 1077, 413, 460, 356, 1255, 348, 1165, 1213, 774, 1461, 319, 830, 1393, 103, 1538, 817, 240, 573, 467, 179, 216, 922, 632, 54, 90, 825, 1396, 1260, 132, 635, 1075, 121, 1407, 346, 1552, 667, 341, 1433, 1372, 49, 1458, 779, 603, 8, 766, 1069, 1439, 1030, 1307, 253, 1649, 1142, 1171, 1653, 1089, 380, 100, 159, 927, 1516, 784, 946, 113, 1323, 117, 204, 1709, 69, 1297, 1542, 1091, 599, 772, 1476, 1503, 928, 850, 449, 234, 1081, 1016, 360, 1063, 1603, 210, 907, 351, 776, 256, 1106, 760, 1359, 592, 92, 190, 925, 1565, 1518, 1569, 489, 502, 432, 91, 169, 723, 803, 1117, 676, 801, 325, 283, 3, 1637, 967, 906, 714, 125, 1724, 1210, 596, 866, 1341, 777, 1248, 1357, 1483, 81, 1484, 428, 840, 97, 1537, 456, 563, 1231, 1608, 1143, 1479, 1490, 1374, 244, 1228, 1309, 324, 569, 932, 431, 689, 933, 1375, 1191, 976, 310, 197, 823, 1198, 947, 1022, 382, 796, 254, 20, 995, 915, 743, 770, 542, 911, 66, 583, 836, 29, 1371, 561, 780, 1163, 1376, 1183, 263, 1227, 529, 1572, 681, 1711, 659, 570, 1693, 999, 457, 552, 1429, 1052, 1281, 465, 740, 392, 259, 1352, 186, 1718, 267, 1308, 461, 1450, 1122, 1682, 686, 1387, 414, 262, 1610, 687, 9, 668, 958, 37, 173, 892, 909, 1215, 1596, 146, 1147, 806, 218, 861, 101, 469, 352, 480, 1229, 1499, 568, 427, 1533, 677, 611, 1333, 565, 466, 326, 990, 1510, 27, 1120, 874, 1072, 1189, 251, 43, 1327, 1041, 504, 1342, 1326, 527, 55, 374, 587, 1508, 878, 1179, 1726, 75, 309, 435, 219, 1535, 713, 1588, 1315, 184, 514, 575, 1438, 600, 1005, 250, 270, 1204, 246, 278, 73, 487, 508, 744, 479, 844, 898, 6, 845, 1721, 15, 139, 680, 749, 674, 701, 1554, 22, 1470, 1656, 500, 490, 560, 1172, 396, 905, 316, 930, 1137, 398, 1454, 1087, 1548, 235, 1181, 966, 1138, 540, 1704, 198, 505, 673, 1626, 1519, 2, 1447, 258, 1465, 1302, 1154, 1280, 1527, 1441, 721, 1162, 477, 1585, 1128, 462, 306, 1250, 1299, 1275, 1298, 1658, 156, 1707, 1037, 1534, 10, 640, 789, 862, 876, 39, 839, 1628, 1267, 343, 1127, 1690, 1286, 873, 416, 1009, 1158, 1216, 1182, 1192, 372, 1020, 1540, 459, 810, 32, 333, 85, 41, 802, 945, 1611, 819, 279, 276, 1338, 313, 18, 1728, 1088, 367, 998, 1190, 1246, 711, 5, 637, 1617, 110, 1266, 1012, 507, 846, 773, 831, 1152, 1044, 549, 951, 971, 1000, 590, 929, 1155, 756, 359, 1073, 1116, 1223, 913, 1362, 731, 555, 95, 1324, 1701, 1240, 1633, 12, 217, 328, 957, 1613, 1513, 494, 699, 1320, 1625, 1021, 530, 1344, 797, 148, 453, 1683, 567, 709, 399, 580, 1436, 26, 1539, 1194, 140, 501, 515, 1105, 593, 1001, 141, 786, 1655, 1360, 443, 837, 1149, 207, 665, 271, 1652, 748 };
        assertEquals(863, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case67() {
        int N = 1932;
        int K = 1246;
        int[] info = { 1196, 1879, 629, 148, 98, 938, 789, 1510, 1001, 1277, 989, 516, 347, 491, 1662, 1646, 1889, 1471 };
        assertEquals(1241, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case68() {
        int N = 1892;
        int K = 394;
        int[] info = { 1032, 818, 1090, 1606, 1048, 1629, 1042, 657, 1192, 1453, 1508, 238, 867, 1711, 479, 79, 850, 987, 592, 82, 685, 68, 1340, 1374, 1429, 655, 1655, 277, 1267, 1468, 1119, 949, 1812, 229, 187, 701, 664, 134, 307, 547, 523, 712, 1575, 1111, 1543, 1542, 1694, 1377, 1763, 326, 898, 476, 709, 1433, 673, 1258, 1001, 1261, 1212, 444, 1116, 540, 1833, 26, 305, 550, 1581, 1217, 152, 123, 888, 1627, 417, 205, 490, 489, 488, 161, 643, 955, 1642, 156, 1385, 780, 726, 1702, 1167, 83, 802, 740, 1002, 968, 1602, 1764, 1114, 1296, 1600, 1858, 502, 316, 584, 172, 610, 1576, 1314, 1234, 1462, 340, 1573, 148, 1175, 465, 1186, 1304, 1108, 1311, 658, 1696, 1478, 1124, 593, 1523, 1052, 1741, 1751, 1559, 1083, 1815, 1235, 25, 1805, 160, 508, 1767, 171, 624, 449, 193, 1036, 1465, 639, 1560, 675, 1145, 447, 909, 1722, 728, 1402, 1028, 293, 845, 570, 482, 654, 1486, 1661, 73, 609, 1622, 773, 1739, 1029, 1265, 315, 1830, 1068, 1802, 839, 497, 1360, 115, 1749, 892, 270, 947, 941, 1538, 852, 1220, 951, 779, 784, 1461, 1251, 704, 905, 1350, 618, 1624, 468, 1601, 495, 1141, 252, 300, 21, 241, 1492, 794, 157, 1744, 942, 1637, 337, 170, 787, 411, 218, 313, 207, 1514, 1351, 492, 695, 246, 296, 260, 1799, 1713, 135, 903, 1481, 180, 1278, 301, 917, 926, 28, 1335, 1619, 1828, 546, 1231, 149, 650, 1426, 670, 1849, 953, 1398, 1441, 1775, 101, 746, 749, 240, 716, 41, 1338, 934, 182, 1105, 1482, 251, 1214, 220, 414, 1056, 1076, 1804, 91, 16, 1226, 74, 1082, 1463, 1031, 1413, 1872, 837, 1122, 1216, 215, 1268, 1367, 1747, 1504, 295, 1137, 1337, 118, 923, 1161, 1228, 1539, 344, 982, 1230, 1586, 937, 1511, 792, 882, 1645, 672, 636, 243, 419, 1701, 49, 1058, 863, 785, 1285, 175, 1007, 836, 276, 1406, 1348, 1639, 30, 1127, 1339, 1396, 173, 1510, 273, 1185, 8, 1522, 169, 1867, 314, 964, 1131, 893, 660, 129, 398, 1498, 452, 1658, 1521, 1062, 1450, 1147, 1081, 999, 1596, 630, 263, 1674, 1403, 1455, 1877, 245, 1754, 223, 302, 525, 939, 1817, 666, 1329, 1494, 1197, 442, 545, 80, 786, 481, 110, 1871, 1604, 1153, 1130, 487, 615, 50, 264, 1607, 1869, 63, 1842, 280, 1, 424, 333, 199, 272, 1397, 1315, 1044, 231, 339, 1835, 59, 1868, 1020, 1435, 1375, 739, 1209, 1798, 1834, 741, 558, 343, 889, 477, 1443, 806, 456, 708, 217, 881, 614, 730, 943, 1080, 1092, 1404, 1306, 890, 1846, 762, 813, 1861, 1863, 1241, 1300, 833, 143, 494, 1546, 870, 268, 1548, 1213, 986, 1810, 225, 721, 1100, 827, 876, 1233, 738, 1880, 1725, 1298, 879, 418, 1282, 1334, 1021, 1780, 1158, 1566, 1401, 1174, 1424, 9, 332, 1654, 147, 1784, 177, 1516, 713, 126, 139, 1148, 601, 1414, 1495, 912, 1386, 1143, 1717, 1755, 1735, 285, 804, 1732, 76, 1823, 579, 239, 72, 1589, 820, 594, 412, 1513, 1874, 2, 1571, 347, 283, 1724, 40, 1649, 1857, 336, 1678, 1569, 12, 95, 1687, 1819, 1121, 278, 844, 554, 668, 535, 1312, 1289, 608, 186, 1567, 1820, 1502, 1564, 1205, 644, 1072, 743, 137, 448, 1372, 395, 1210, 703, 433, 1054, 612, 284, 403, 868, 158, 751, 338, 988, 281, 1723, 981, 1232, 1294, 911, 1684, 310, 4, 436, 565, 1795, 1207, 179, 505, 938, 248, 174, 1737, 776, 321, 963, 578, 902, 1716, 52, 526, 1330, 234, 1580, 1643, 916, 1452, 924, 1667, 891, 288, 1677, 720, 958, 1537, 908, 443, 1342, 560, 43, 689, 1734, 1789, 1695, 496, 1017, 775, 729, 1865, 1881, 705, 549, 257, 849, 1431, 1087, 1671, 567, 1526, 1206, 877, 227, 1034, 1060, 312, 880, 483, 807, 520, 1530, 1866, 309, 1204, 1656, 1177, 606, 1248, 815, 1320, 396, 1608, 1693, 258, 493, 1276, 259, 1037, 324, 462, 54, 1785, 884, 1613, 1165, 1067, 613, 1193, 1551, 458, 702, 1445, 959, 1331, 168, 1672, 438, 255, 463, 977, 697, 1715, 459, 99, 1444, 1069, 1428, 1757, 529, 599, 1668, 1281, 662, 322, 90, 1535, 484, 1598, 1107, 130, 290, 472, 875, 524, 1163, 178, 1489, 1692, 1392, 1524, 970, 679, 1393, 819, 682, 715, 1509, 1776, 291, 1477, 1093, 873, 38, 1485, 583, 330, 1347, 206, 1563, 1806, 274, 1814, 61, 821, 769, 1308, 1557, 1218, 1588, 1474, 1650, 97, 1123, 42, 1379, 1700, 507, 31, 1826, 1761, 788, 1479, 1191, 1816, 831, 1458, 1553, 1088, 261, 534, 1110, 44, 765, 809, 611, 1811, 1679, 1686, 1253, 1653, 961, 1707, 17 };
        assertEquals(945, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case69() {
        int N = 1642;
        int K = 54;
        int[] info = { 428, 439, 223, 1539, 1152, 27, 1236, 435, 1331, 380, 1302, 951, 1049, 1292, 1127, 716, 1433, 617, 1264, 971, 135, 43, 82, 743, 1156, 1136, 401, 549, 7, 1220, 1206, 984, 746, 821, 1627, 507, 512, 760, 1310, 52, 1111, 322, 251, 639, 1037, 108, 732, 144, 175, 660, 1368, 406, 1387, 529, 543, 1300, 922, 1566, 1595, 1339, 1353, 930, 240, 737, 309, 684, 875, 445, 1361, 327, 717, 1263, 933, 771, 279, 1099, 1608, 856, 622, 46, 64, 1541, 116, 433, 898, 1431, 1577, 1077, 696, 610, 1017, 452, 858, 1072, 193, 661, 174, 1505, 1114, 1041, 1291, 267, 1359, 1535, 68, 1429, 149, 609, 1139, 532, 8, 522, 1113, 814, 1634, 1289, 1395, 383, 1480, 392, 1124, 565, 693, 557, 981, 983, 766, 54, 642, 1228, 733, 495, 938, 633, 246, 139, 1561, 798, 999, 388, 1248, 470, 1597, 742, 413, 855, 1337, 1146, 843, 556, 788, 257, 964, 962, 745, 132, 1490, 422, 949, 872, 1025, 1492, 880, 1403, 1479, 1233, 709, 59, 1150, 1459, 977, 71, 791, 972, 431, 680, 706, 1418, 890, 658, 417, 630, 204, 179, 514, 98, 681, 1184, 58, 31, 1002, 1591 };
        assertEquals(818, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case70() {
        int N = 1945;
        int K = 252;
        int[] info = { 144, 1696, 151, 1076, 165, 471, 1776, 2, 1187, 100, 1462, 1672, 1020, 628, 183, 1892, 1616, 118, 1393, 838, 1023, 94, 376, 1742, 1263, 1154, 24, 407, 1170, 211, 99, 1222, 768, 912, 901, 1039, 369, 1473, 212, 1158, 1902, 1063, 1175, 1606, 1412, 296, 1612, 1303, 381, 1309, 936, 1544, 1827, 729, 1249, 1387, 699, 1178, 1575, 1422, 617, 525, 1365, 1890, 103, 1703, 782, 519, 1529, 265, 1269, 1447, 1532, 1714, 262, 998, 643, 529, 884, 1358, 1409, 200, 1188, 1466, 1917, 835, 950, 916, 1111, 1777, 1099, 1196, 1114, 1338, 1461, 1354, 555, 1620, 1831, 62, 1767, 334, 859, 1623, 1794, 63, 557, 1820, 633, 1584, 509, 954, 1004, 506, 1413, 626, 178, 1417, 1908, 441, 1494, 1650, 298, 716, 537, 1514, 594, 258, 816, 314, 417, 786, 1800, 850, 140, 1057, 1701, 1559, 56, 1334, 1082, 1336, 972, 1688, 1133, 1862, 344, 393, 1475, 745, 1744, 1091, 1699, 1830, 1863, 1176, 959, 1450, 1702, 1476, 1089, 1223, 779, 361, 1136, 1632, 965, 1279, 1062, 1847, 1637, 440, 1137, 1233, 1848, 931, 1364, 844, 514, 1675, 350, 1349, 1560, 655, 1392, 1289, 1758, 1014, 762, 645, 947, 621, 101, 102, 1806, 1126, 940, 489, 266, 315, 1715, 1571, 352, 1472, 618, 1390, 1499, 603, 1945, 1234, 531, 1421, 466, 1443, 539, 1434, 1328, 1446, 398, 793, 499, 1595, 119, 496, 1359, 1589, 444, 775, 1850, 30, 724, 753, 363, 1205, 920, 1673, 1877, 1059, 1100, 711, 1048, 394, 41, 290, 1372, 684, 814, 182, 804, 757, 1685, 1427, 511, 1110, 569, 1537, 438, 1191, 1105, 847, 646, 873, 450, 256, 870, 1801, 1615, 414, 1251, 1923, 790, 587, 1094, 1405, 1728, 152, 784, 1112, 220, 516, 1873, 747, 1836, 185, 1286, 416, 857, 158, 425, 1851, 671, 1119, 1348, 1363, 351, 1268, 1704, 988, 1322, 888, 862, 339, 1366, 703, 877, 1340, 953, 1330, 1481, 1880, 573, 997, 1807, 1874, 661, 1747, 1881, 1379, 1394, 431, 1149, 1926, 319, 1138, 342, 1662, 264, 513, 1617, 1243, 1271, 1139, 750, 65, 79, 1467, 61, 313, 494, 1534, 424, 1259, 6, 1220, 1072, 47, 427, 340, 1737, 26, 1567, 705, 1746, 326, 202, 1284, 1442, 1420, 904, 21, 38, 493, 502, 889, 191, 663, 1868, 58, 179, 1165, 168, 924, 1173, 632, 1095, 1161, 1368, 963, 1757, 620, 893, 125, 660, 1864, 1143, 203, 956, 517, 611, 107, 447, 639, 409, 76, 1930, 348, 1739, 1454, 268, 136, 917, 139, 720, 1569, 368, 945, 981, 582, 23, 32, 278, 1678, 1172, 66, 944, 205, 436, 1929, 163, 318, 1264, 819, 1295, 1181, 1010, 1894, 815, 970, 28, 1198, 110, 1713, 53, 1323, 115, 1157, 1845, 858, 1687, 848, 1282, 291, 276, 320, 177, 83, 106, 1257, 510, 1331, 771, 1116, 1343, 746, 8, 1265, 542, 1700, 1435, 446, 36, 1501, 1734, 612, 865, 1463, 225, 636, 1656, 59, 667, 1129, 1513, 1155, 476, 1636, 288, 565, 1772, 1156, 1074, 780, 1131, 1605, 787, 1162, 1060, 1682, 777, 198, 1030, 614, 1527, 562, 1194, 1736, 1396, 31, 1671, 34, 980, 652, 218, 297, 11, 1132, 1000, 1786, 576, 323, 1248, 1333, 1360, 420, 681, 1012, 70, 1898, 895, 601, 1841, 923, 973, 1231, 1142, 1802, 571, 550, 1380, 443, 772, 911, 1641, 1718, 707, 1505, 341, 357, 284, 1071, 1591, 1684, 312, 403, 42, 679, 1468, 1281, 387, 432, 154, 1520, 902, 946, 1729, 797, 122, 605, 137, 1780, 1657, 1043, 160, 1630, 962, 1027, 1145, 1829, 856, 545, 1287, 1933, 1568, 1465, 408, 1400, 635, 673, 146, 1521, 710, 1370, 1239, 1079, 71, 458, 817, 693, 1262, 1763, 928, 1097, 566, 1867, 190, 1614, 90, 354, 383, 1378, 98, 457, 1899, 708, 1402, 974, 400, 113, 1556, 878, 1887, 1397, 1389, 1871, 969, 1866, 698, 1583, 960, 1551, 515, 795, 921, 875, 1388, 1693, 1891, 112, 678, 1163, 1236, 1576, 89, 1939, 360, 338, 607, 586, 551, 1618, 385, 809, 1886, 1486 };
        assertEquals(975, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case71() {
        int N = 1277;
        int K = 168;
        int[] info = { 817, 847, 958, 90, 368, 227, 1263, 187, 443, 677, 200, 897, 1034, 26, 879, 898, 662, 417, 1110, 627, 1203, 43, 878, 338, 1025, 697, 849, 106, 243, 605, 882, 1242, 624, 1026, 909, 406, 93, 9, 123, 45, 1065, 931, 865, 1136, 734, 396, 211, 263, 1151, 890, 110, 1220, 916, 1178, 387, 112, 1158, 1143, 17, 924, 233, 397, 1239, 478, 874, 998, 541, 629, 1051, 14, 76, 201, 862, 363, 781, 463, 20, 460, 332, 740, 69, 1252, 1216, 557, 1128, 803, 467, 595, 444, 429, 711, 797, 1230, 929, 1095, 522, 960, 1126, 813, 603, 981, 617, 686, 228, 1262, 295, 279, 361, 1063, 68, 1171, 301, 439, 523, 1137, 22, 1009, 930, 1102, 192, 432, 494, 793, 1117, 517, 1274, 103, 446, 802, 395, 274, 5, 574, 248, 182, 696, 971, 872, 412, 675, 1188, 316, 634, 1140, 306, 351, 462, 89, 330, 19, 1139, 889, 928, 179, 572, 380, 488, 708, 977, 308, 597, 1105, 785, 341, 744, 143, 420, 328, 1184, 1112, 372, 562, 97, 776, 60, 612, 871, 952, 1016, 864, 1030, 381, 665, 975, 1089, 794, 772, 23, 992, 53, 375, 999, 1022, 108, 146, 1268, 908, 207, 109, 294, 636, 92, 801, 536, 153, 1067, 129, 727, 589, 267, 1161, 499, 473, 755, 738, 963, 1116, 972, 296, 414, 1235, 497, 286, 881, 672, 689, 935, 1122, 569, 609, 669, 687, 29, 71, 1121, 441, 67, 827, 814, 75, 481, 815, 745, 500, 846, 566, 1072, 1052, 454, 391, 125, 777, 1073, 235, 275, 350, 982, 529, 913, 944, 1153, 1202, 576, 544, 360, 1069, 660, 742, 85, 309, 119, 461, 147, 1012, 337, 966, 234, 36, 973, 101, 899, 1142, 1231, 1196, 923, 1075, 138, 91, 1113, 484, 1061, 834, 231, 226, 148, 371, 1124, 657, 1054, 800, 1270, 1247, 528, 925, 823, 40, 1195, 402, 543, 7, 135, 431, 259, 891, 1114, 901, 1241, 94, 118, 384, 519, 713, 843, 130, 922, 445, 953, 288, 946, 798, 54, 433, 56, 965, 218, 560, 1240, 868, 127, 608, 104, 199, 735, 1006, 198, 280, 1176, 782, 577, 403, 1074, 788, 1097, 547, 24, 1119, 1001, 784, 590, 131, 1277, 1048, 305, 1132, 515, 1267, 816, 586, 1086, 28, 760, 410, 980, 416, 266, 599, 96, 1053, 1059, 994, 641, 1068, 408, 327, 643, 196, 27, 16, 1180, 437, 715, 222, 421, 559, 367, 392, 63, 1226, 348, 720, 1191, 887, 72, 459, 347, 377, 352, 64 };
        assertEquals(638, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case72() {
        int N = 1945;
        int K = 1756;
        int[] info = { 1135, 1589, 177, 1275, 1035, 1693, 208, 297, 1112, 160, 834, 961, 28, 853, 63, 898, 1789, 815, 185, 925, 913, 1353, 1378, 101, 127, 1047, 1502, 1855, 1640, 1628, 1061, 1078, 929, 966, 1410, 1661, 1923, 258, 883, 76, 990, 860, 680, 1522, 541, 112, 1654, 435, 115, 1836, 1604, 1062, 114, 75, 1768, 1421, 1608, 980, 1582, 1366, 1462, 199, 616, 64, 1834, 331, 1925, 1386, 1603, 1694, 1436, 1059, 1394, 935, 531, 543, 1448, 460, 1580, 1111, 1455, 1916, 1833, 668, 178, 1691, 577, 336, 857, 254, 507, 890, 30, 656, 313, 1354, 1110, 289, 1158, 1156, 1330, 717, 1018, 92, 804, 1666, 1853, 1872, 1926, 1042, 1075, 1357, 1332, 327, 689, 1870, 406, 1391, 1053, 1316, 1725, 615, 657, 322, 421, 332, 1565, 1225, 1409, 1108, 1863, 1182, 865, 1373, 1231, 464, 1164, 1525, 1320, 379, 874, 1769, 741, 1370, 1567, 965, 1900, 1147, 953, 1708, 1862, 1642, 776, 1660, 1707, 1250, 1824, 168, 485, 318, 15, 1921, 1672, 104, 751, 711, 371, 125, 856, 584, 1073, 1030, 794, 645, 995, 892, 914, 954, 1010, 846, 511, 924, 1517, 1301, 1148, 369, 909, 1024, 508, 1008, 996, 1721, 884, 808, 994, 1629, 548, 1299, 445, 839, 483, 469, 66, 1529, 519, 153, 428, 1532, 1621, 154, 1883, 236, 1036, 1702, 213, 778, 417, 1899, 1634 };
        assertEquals(1067, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case73() {
        int N = 1762;
        int K = 1348;
        int[] info = { 426, 128, 226, 522, 396, 668, 162, 381, 1084, 961, 277, 1743, 924, 1434, 792, 1707, 948, 456, 394, 1094, 410, 591, 896, 1250, 1037, 853, 652, 1099, 336, 136, 93, 1054, 106, 541, 1394, 279, 177, 568, 1653, 447, 1285, 890, 135, 1230, 957, 1630, 1179, 1512, 1725, 11, 835, 7, 1224, 230, 1398, 862, 477, 763, 1113, 1547, 283, 701, 204, 1471, 912, 97, 1202, 1562, 1441, 1502, 127, 247, 256, 1521, 806, 1391, 180, 837, 31, 276, 1518, 1001, 826, 1207, 118, 139, 1663, 1469, 206, 4, 313, 981, 188, 1091, 1755, 1409, 977, 518, 855, 1232, 1166, 34, 797, 1160, 101, 887, 390, 1266, 870, 538, 378, 352, 1486, 379, 421, 722, 737, 1407, 211, 1397, 634, 1007, 1631, 833, 67, 1381, 842, 947, 1239, 1206, 1064, 1211, 179, 1017, 1421, 1022, 55, 1667, 1673, 494, 1147, 69, 1572, 1222, 199, 110, 1401, 108, 619, 589, 838, 926, 406, 1350, 576, 980, 168, 1464, 1071, 46, 677, 1585, 626, 1543, 805, 958, 1178, 643, 65, 1369, 1696, 126, 1117, 1609, 213, 54, 501, 32, 183, 950, 1712, 1244, 1735, 13, 984, 573, 1021, 374, 5, 976, 551, 39, 1095, 552, 944, 43, 882, 35, 1399, 459, 104, 1690, 1155, 1056, 497, 819, 1358, 702, 462, 1355, 1156, 663, 676, 567, 490, 153, 1379, 1615, 1286, 113, 1140, 685, 1373, 713, 1214, 741, 417, 604, 156, 224, 463, 908, 58, 1510, 291, 286, 109, 409, 249, 1645, 1722, 1130, 863, 1, 758, 229, 723, 1192, 1367, 820, 356, 1149, 680, 1591, 1011, 798, 260, 624, 1133, 335, 452, 678, 885, 911, 670, 282, 825, 884, 1595, 869, 129, 505, 380, 579, 455, 877, 413, 1648, 1472, 779, 834, 930, 1422, 1558, 818, 1014, 1193, 150, 242, 759, 1553, 499, 871, 669, 1419, 1016, 296, 672, 203, 255, 1477, 500, 502, 22, 914, 1516, 1466, 1617, 934, 1614, 1299, 303, 19, 1205, 1002, 1212, 1620, 1478, 1473, 1698, 25, 98, 1720, 692, 1638, 744, 12, 1247, 783, 922, 217, 974 };
        assertEquals(1088, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case74() {
        int N = 1211;
        int K = 392;
        int[] info = { 546, 676, 990, 484, 719, 88, 580, 1089, 331, 894, 245, 278, 169, 207, 508, 412, 724, 561, 1111, 721, 75, 170, 1152, 96, 320, 928, 196, 874, 21, 55, 1078, 404, 1138, 323, 305, 309, 1006, 318, 1109, 938, 815, 778, 856, 1040, 291, 419, 726, 683, 353, 371, 345, 220, 750, 984, 624, 32, 78, 1159, 791, 410, 1082, 922, 469, 280, 619, 41, 218, 891, 1146, 1120, 526, 437, 1155, 219, 936, 718, 760, 26, 80, 390, 705, 583, 1210, 828, 264, 925, 492, 840, 622, 1130, 643, 890, 247, 664, 159, 958, 814, 338, 8, 251, 809, 556, 476, 566, 523, 963, 377, 966, 579, 365, 1064, 27, 447, 702, 563, 853, 604, 671, 923, 200, 1198, 823, 945, 180, 125, 1121, 140, 363, 600, 1062, 337, 224, 500, 903, 732, 227, 1117, 937, 393, 1063, 932, 154, 919, 933, 1053, 1020, 631, 386, 414, 658, 1187, 1086, 918, 335, 616, 868, 482, 135, 232, 157, 592, 1030, 368, 586, 645, 594, 554, 713, 326, 679, 690, 659, 1189, 429, 558, 84, 505, 205, 539, 644, 97, 312, 1008, 576, 817, 848, 1150, 672, 793, 407, 1137, 258, 898, 319, 695, 801, 1061, 727, 214, 557, 168, 61, 976, 1177, 478, 16, 211, 1162, 813, 913, 603, 432, 816, 908, 914, 153, 202, 654, 67, 858, 1165, 1123, 572, 120, 1035, 565, 164, 568, 929, 47, 771, 799, 720, 506, 167, 795, 111, 160, 709, 122, 775, 503, 1203, 1092, 700, 413, 462, 279, 458, 1173, 912, 379, 1174, 590, 395, 317, 474, 538, 223, 442, 93, 585, 195, 497, 1180, 461, 924, 628, 680, 288, 443, 249, 774, 453, 1033, 69, 463, 117, 1026, 1045, 382, 352, 403, 504, 240, 1002, 201, 64, 1047, 401, 553, 134, 785, 234, 656, 457, 275, 522, 1125, 213, 1019, 1205, 244, 98, 916, 1206, 104, 612, 59, 737, 907, 334, 52, 1054, 633, 1036, 209, 759, 1134, 870, 1118, 83, 1151, 1024, 1110, 459, 152, 1192, 1087, 49, 807, 1140, 930, 354, 286, 682, 896, 360, 14, 960, 357, 1116, 611, 448, 177, 449, 832, 231, 888, 1091, 46, 1115, 663, 468, 1052, 872, 833, 818, 107, 347, 734, 1085, 70, 716, 948, 18, 931, 254, 1, 678, 40, 964, 803, 789, 1181, 465, 829, 138, 741, 203, 900, 855, 183, 665, 1204, 56, 704, 269, 1083, 710, 339, 372, 460, 480, 496, 1004, 1081, 880, 927, 171, 439, 472, 740, 947, 330, 375, 270, 627, 236, 256, 844, 110, 670, 885, 487, 790, 1141, 185, 773, 302, 2, 979, 951, 570, 17, 667, 420, 45, 130, 316, 68, 252, 1179, 324, 13, 608, 528, 625, 972, 485, 451, 1097, 962, 51, 267, 178, 50, 1050, 694, 986, 647 };
        assertEquals(623, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case75() {
        int N = 1763;
        int K = 261;
        int[] info = { 85, 219, 107, 630, 1747, 569, 82, 1518, 580, 546, 753, 601, 1673, 383, 1604, 748, 125, 1109, 1080, 754, 1461, 1635, 607, 368, 1028, 101, 1280, 392, 1538, 1578, 9, 114, 262, 123, 854, 1034, 1019, 1471, 1268, 127, 934, 314, 709, 1069, 1375, 760, 443, 19, 1035, 1113, 1065, 1138, 716, 1365, 905, 118, 844, 1443, 142, 1098, 1315, 29, 1305, 1116, 1398, 1338, 860, 1198, 1623, 563, 609, 404, 1432, 991, 784, 1605, 824, 1696, 1271, 1003, 635, 393, 802, 309, 715, 786, 780, 978, 1334, 213, 7, 952, 269, 955, 1593, 1256, 156, 1752, 981, 1356, 95, 1542, 171, 865, 775, 11, 371, 1107, 1708, 1649, 684, 398, 1554, 1621, 198, 724, 452, 703, 572, 956, 719, 149, 380, 1194, 20, 279, 694, 794, 932, 1437, 472, 1133, 741, 1472, 574, 1310, 1701, 188, 514, 743, 131, 670, 525, 1033, 636, 710, 552, 949, 1455, 1419, 1001, 137, 67, 1608, 1276, 290, 467, 1142, 206, 1273, 1201, 1041, 1144, 538, 1614, 1179, 129, 1148, 1339, 1564, 951, 394, 1451, 147, 1693, 1674, 263, 357, 1104, 63, 1729, 1255, 412, 23, 440, 561, 1214, 41, 1602, 954, 840, 1295, 1063, 518, 450, 1103, 174, 1221, 1571, 734, 24, 1014, 1534, 48, 1473, 673, 776, 1272, 1683 };
        assertEquals(895, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case76() {
        int N = 896;
        int K = 3;
        int[] info = { 692, 456, 528, 417, 482, 128, 873, 204, 116, 846, 800, 832, 185, 93, 169, 109, 28, 96, 689, 640, 336, 192, 316, 840, 408, 99, 237, 653, 761, 59, 597, 5, 125, 435, 566, 562, 594, 23, 463, 49, 554, 102, 572, 240, 106, 857, 297, 207, 803, 779, 396, 696, 889, 438, 683, 749, 122, 534, 313, 700, 460, 453, 163, 84, 31, 796, 285, 806, 153, 735, 869, 309, 584, 820, 166, 174, 450, 715, 675, 345, 261, 131, 380, 537, 621, 414, 278, 388, 817, 827, 569, 709, 160, 211, 300, 866, 628, 66, 545, 616, 656, 489, 516, 587, 724, 150, 138, 135, 508, 373, 227, 20, 523, 474, 56, 485, 201, 62, 727, 504, 752, 613, 306, 294, 80, 447, 141, 721, 215, 666, 718, 850, 290, 558, 421, 427, 788, 405, 411, 77, 791, 275, 230, 69, 368, 319, 252, 255, 607, 339, 496, 333, 189, 376, 144, 782, 860, 424, 385, 712, 739, 322, 679, 686, 703, 647, 471, 264, 281, 248, 603, 843, 363, 224, 785, 401, 767, 258, 73, 303, 88, 634, 349, 809, 468, 660, 775, 663, 581, 732, 46, 493, 706 };
        assertEquals(264, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case77() {
        int N = 1518;
        int K = 144;
        int[] info = { 1090, 646, 20, 1288, 409, 960, 105, 879, 929, 53, 897, 1100, 1366, 383, 1317, 1394, 876, 25, 632, 751, 86, 510, 613, 568, 60, 704, 721, 486, 1262, 261, 539, 971, 985, 1018, 446, 1188, 727, 637, 976, 197, 233, 1027, 442, 559, 634, 266, 654, 1492, 1092, 884, 827, 1168, 700, 1159, 1481, 1131, 342, 950, 1130, 29, 553, 909, 67, 43, 1050, 382, 438, 322, 1261, 76, 1233, 1291, 198, 1124, 1405, 470, 1453, 1026, 1177, 802, 1397, 304, 1490, 1463, 972, 1480, 1276, 905, 1157, 1422, 256, 89, 538, 1232, 998, 1513, 1392, 736, 376, 1005, 349, 54, 696, 1416, 1039, 1470, 951, 69, 116, 188, 633, 981, 982, 35, 1396, 223, 1080, 5, 431, 420, 588, 405, 1443, 150, 127, 384, 232, 1482, 871, 1082, 429, 839, 57, 974, 722, 941, 363, 1511, 682, 737, 24, 571, 697, 97, 1199, 679, 583, 487, 1251, 850, 1380, 203, 611, 1287, 631, 695, 1336, 476, 1410, 113, 900, 401, 267, 1468, 360, 748, 504, 44, 1247, 619, 660, 1109, 1373, 75, 126, 296, 1335, 1324, 854, 1295, 1517, 649, 533, 1363, 1440, 1192, 1036, 836, 657, 437, 502, 720, 159, 526, 148, 794, 776, 1312, 115, 670, 1125, 173, 334, 643, 1272, 527, 703, 864, 630, 259, 877, 767, 1084, 809, 1269, 815, 397, 111, 456, 1372, 1146, 823, 975, 207, 355, 1446, 608, 315, 683, 422, 757, 450, 1403, 272, 914, 872, 313, 973, 1390, 892, 1184, 1419, 1445, 698, 1309, 265, 181, 636, 319, 1467, 1254, 577, 260, 58, 128, 251, 857, 940, 1509, 540, 1116, 688, 939, 328, 1391, 1147, 1485, 326, 1487, 149, 1456, 451, 651, 1344, 321, 195, 543, 599, 21, 1465, 763, 738, 816, 575, 681, 1298, 1198, 2, 1346, 146, 186, 31, 306, 782, 813, 1053, 1451, 1339, 1281, 1102, 485, 650, 380, 1475, 908, 1407, 1322, 1435, 94, 247, 187, 1263, 1331, 201, 1420, 946, 1283, 1193, 717, 835, 271, 419, 987, 1311, 175, 240, 152, 1069, 615, 862, 4, 1180, 891, 1460, 1181, 591, 1406, 979, 379, 1449, 436, 468, 1179, 786, 392, 986, 685, 593, 325, 3, 347, 226, 1122, 45, 215, 542, 30, 204, 1484, 1282, 1275, 780, 678, 242, 1382, 1483, 601, 213, 837, 858, 1497, 1202, 733, 1185, 674, 77, 1319, 1075, 1334, 821, 1350, 1010, 1499, 766, 647, 686, 1259, 1227, 99, 765, 819, 621, 830, 1369, 396, 1081, 492, 199, 34, 1360, 623, 689, 183, 753, 299, 83, 1112, 290, 385, 362, 625, 560, 391, 1437, 1371, 671, 114, 984, 95, 594, 865, 1286, 1320, 112, 1387, 284, 110, 465, 424, 339, 1158, 1296, 788, 530, 581, 1476, 1341, 263, 314, 430, 875, 702, 253, 1114, 506, 1057, 701, 1438, 124, 565, 1013, 358, 1450, 1170, 36, 1234, 745, 668, 459, 300, 1310, 1245, 471, 209, 1466, 920, 1493, 1113, 1402, 959, 801, 1068, 1143, 896, 238, 68, 923, 387, 759, 224, 407, 531, 834, 268, 1425, 130, 576, 341, 298, 158, 537, 1191, 913, 1297, 851, 1063, 1454, 860, 917, 131, 1498, 235, 1165, 1510, 499, 435, 491, 1128, 1164, 887, 378, 932, 64, 1228, 353, 928, 481, 270, 824, 1161, 795, 42, 52, 555, 346, 280, 80, 658, 628, 106, 898, 453, 1379, 1110, 255, 294, 352, 1516, 100, 1343, 51, 1119, 104, 964, 276, 1006, 1132, 728, 117, 1167, 817, 1300, 818, 965, 550, 1035, 1388, 367, 182, 365, 548, 1189, 1218, 411, 995, 1441, 254, 164, 653, 168, 14, 1009, 1210, 1337, 88, 15, 1248, 176, 1197 };
        assertEquals(751, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case78() {
        int N = 1100;
        int K = 606;
        int[] info = { 989, 722, 999, 252, 975, 120, 340, 67, 871, 94, 220, 206, 814, 1039, 590, 865, 152, 30, 106, 512, 314, 323, 677, 716, 843, 417, 315, 745, 208, 1058, 162, 931, 864, 558, 297, 393, 687, 760, 293, 916, 157, 769, 264, 734, 73, 144, 240, 662, 953, 138, 18, 111, 223, 318, 750, 840, 1026, 384, 841, 799, 331, 546, 547, 674, 119, 194, 772, 257, 828, 508, 149, 683, 824, 1017, 448, 540, 112, 584, 259, 429, 775, 1074, 455, 141, 912, 878, 496, 363, 856, 185, 1013, 564, 172, 1010, 212, 636, 101, 610, 521, 771, 581, 645, 579, 573, 81, 462, 479, 17, 515, 209, 255, 466, 962, 1028, 406, 260, 1038, 419, 63, 803, 433, 994, 214, 188, 396, 860, 1051, 1055, 977, 301, 502, 1004, 11, 618, 224, 373, 740, 124, 150, 449, 236, 644, 278, 1009, 93, 33, 654, 85, 1100, 829, 945, 303, 544, 806, 401, 907, 1047, 386, 426, 726, 77, 651, 530, 656, 679, 827, 391, 75, 586, 498, 620, 847, 243, 344, 22, 955, 394, 901, 1042, 1048, 666, 532, 129, 388, 699, 58, 491, 169, 1041, 54, 242, 725, 485, 397, 334, 271, 929, 346, 36, 580, 531, 924, 365, 756, 217, 31, 453, 49, 783, 895, 123, 957, 724, 358, 830, 153, 972, 950, 1060, 655, 705, 698, 1045, 884, 227, 927, 588, 294, 680, 747, 582, 95, 492, 1007, 355, 537, 291, 435, 48, 1035, 1011, 930, 524, 967, 351, 311, 897, 23, 566, 695, 539, 1064, 729, 921, 7, 503, 5, 635, 782, 535, 718, 186, 578, 165, 276, 84, 246, 848, 682, 675, 500, 308, 177, 628, 926, 92, 176, 221, 615, 483, 414, 919, 86, 538, 302, 822, 229, 1024, 481, 518, 818, 215, 489, 91, 845, 501, 431, 742, 60, 400, 763, 13, 44, 526, 114, 832, 1043, 460, 428, 154, 1094, 256, 626, 1072, 1018, 807, 979, 776, 548, 79, 1014, 390, 57, 956, 465, 910, 1059, 688, 201, 943, 707, 110, 773, 52, 239, 928, 882, 795, 831, 1037, 371, 808, 404, 219, 1066, 646, 668, 554, 20, 97, 382, 780, 719, 444, 659, 225, 35, 488, 310, 629, 342, 690, 839, 366, 534, 321, 183, 649, 842, 1052, 341, 1056, 968, 160, 76, 672, 765, 761, 1071, 425, 313, 992, 557, 577, 1095, 287, 671, 38, 692, 204, 1091, 66, 781, 846, 27, 281, 383, 405, 332, 309, 850, 522, 1049, 712, 1096, 1068, 452, 703 };
        assertEquals(563, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case79() {
        int N = 1729;
        int K = 309;
        int[] info = { 110, 1329, 371, 809, 980, 106, 683, 342, 526, 1368, 899, 1029, 670, 777, 720, 806, 435, 588, 609, 1245, 1375, 1301, 962, 10, 244, 1652, 153, 124, 539, 31, 1450, 1248, 445, 1295, 1247, 846, 497, 392, 250, 973, 1651, 612, 1563, 1137, 534, 1712, 1101, 537, 1107, 834, 972, 1414, 53, 314, 631, 856, 857, 883, 394, 231, 582, 204, 976, 114, 349, 1370, 347 };
        assertEquals(913, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case80() {
        int N = 1970;
        int K = 217;
        int[] info = { 59, 355, 664, 1080, 55, 683, 44, 707, 1342, 1615, 1937, 1329, 1903, 1544, 1651, 838, 1944, 919, 1681, 1516, 130, 1512, 1346, 1469, 1860, 1122, 1521, 973, 901, 1147, 1030, 1012, 917, 1893, 382, 498, 1434, 1414, 45, 249, 1219, 360, 714, 1200, 1095, 1605, 547, 1322, 1171, 1775, 420, 252, 146, 803, 740, 211, 1188, 1267, 1127, 622, 1828, 133, 1440, 1637, 1299, 1186, 595, 1148, 1655, 1680, 466, 1062, 1234, 293, 88, 1835, 328, 527, 1470, 1834, 1332, 1272, 1525, 785, 1902, 90, 1818, 1173, 868, 1838, 109, 1851, 1891, 1459, 897, 346, 136, 550, 1613, 1694, 654, 22, 1165, 347, 1751, 1707, 530, 855, 769, 442, 198, 755, 1465, 1058, 25, 1253, 1419, 551, 305, 953, 1710, 698, 43, 800, 1686, 294, 771, 311, 1510, 353, 1067, 1789, 1338, 662, 957, 1712, 1504, 871, 985, 836, 222, 1490, 446, 1281, 1856, 777, 989, 1208, 999, 158, 1940, 74, 767, 706, 992, 1507, 1509, 873, 459, 1369, 583, 1052, 1562, 489, 31, 128, 101, 1845, 1056, 1232, 406, 762, 1609, 1644, 661, 81, 69, 1049, 1912, 1213, 1901, 1091, 898, 1693, 1520, 934, 174, 607, 1480, 1910, 326, 564, 637, 1767, 488, 1209, 862, 695, 602, 312, 1598, 916, 1245, 842, 1772, 1199, 1031, 764, 1597, 1925, 1176, 1195, 1695, 1121, 12, 1868, 1793, 390, 1870, 515, 362, 1438, 1428, 636, 895, 1801, 1305, 681, 1553, 1798, 394, 768, 1757, 1295, 765, 1205, 1289, 227, 716, 571, 1376, 1149, 618, 1431, 859, 281, 1493, 1844, 1350, 1685, 851, 734, 576, 1897, 285, 1087, 1731, 1714, 358, 1065, 21, 410, 1388, 1451, 1727, 926, 1876, 190, 329, 1078, 1139, 881, 385, 1617, 1424, 828, 464, 1587, 392, 749, 817, 1492, 1379, 1716, 356, 337, 327, 1719, 1669, 1524, 1237, 1654, 374, 758, 644, 1745, 86, 840, 1326, 468, 1220, 928, 1215, 1036, 1255, 1096, 99, 177, 491, 350, 1387, 475, 1880, 1705, 994, 1239, 1138, 1265, 1024, 1916, 937, 568, 606, 296, 1744, 1349, 1612, 1284, 1057, 1204, 1027, 1968, 301, 889, 582, 78, 678, 1697, 245, 971, 650, 1046, 1658, 756, 176, 1081, 631, 1951, 832, 35, 444, 781, 965, 610, 1784, 1114, 630, 772, 1825, 1528, 452, 1684, 906, 388, 1475, 335, 1363, 1622, 266, 1895, 289, 521, 242, 1448, 481, 1643, 531, 1519, 924, 1932, 1404, 1591, 1938, 1042, 816, 229, 1746, 1325, 334, 460, 110, 1131, 1115, 773, 1033, 157, 802, 277, 317, 365, 742, 76, 163, 185, 1638, 49, 389, 1280, 677, 107, 243, 789, 85, 925, 1106, 274, 779, 524, 395, 117, 867, 1908, 320, 1513, 1128, 1698, 667, 641, 1458, 66, 1920, 1787, 359, 1506, 813, 792, 1366, 936, 1630, 943, 1650, 731, 1785, 414, 1335, 1386, 432, 51, 1476, 1539, 105, 1191, 1117, 1243, 26, 1238, 1556, 1752, 1527, 1565, 440, 1249, 826, 1802, 1463, 1375, 282, 1808, 1763, 668, 905, 1667, 1582, 684, 931, 692, 398, 228, 1206, 295, 1967, 152, 575, 322, 1168, 1331, 807, 1678, 1269, 1415, 581, 8, 1355, 510, 1579, 6, 1429, 1532, 1482, 1037, 915, 1372, 283, 543, 711, 1898, 267, 1733, 1435, 1833, 1890, 821, 1732, 1110, 1616, 1291, 309, 474, 721, 1315, 1409, 839, 1427, 1815, 1303, 1909, 1618, 104, 40, 1842, 955, 1829, 137, 416, 1866, 1418, 3, 408, 1941, 960, 993, 853, 1546, 837, 318, 188, 759, 724, 72, 169, 1172, 990, 1760, 596, 1207, 96, 248, 1885, 97, 42, 1962, 1170, 1107, 1167, 483, 437, 1001, 1004, 30, 1009, 1955, 1154, 1692, 864, 670, 1717, 1606, 196, 94, 1034, 1819, 192, 102, 1151, 1120, 964, 1780, 1603, 865, 426, 1196, 525, 1217, 688, 1653, 1561, 774, 532, 1063, 1831, 609, 597, 1252, 801, 1258, 425, 1738, 887, 1797, 1311, 1301, 386, 653, 1142, 1026, 746, 1216, 1919, 1010, 1039, 292, 448, 1703, 548, 325, 909, 1914, 1473, 36, 1433, 1633, 967, 1328, 546, 850, 1040, 700, 809, 1854, 910, 1097, 370, 954, 1607, 1626, 262, 843, 1354, 896, 705, 747, 1408, 208, 84, 882, 1365, 1450, 50, 1592, 1158, 1805, 366, 224, 1406, 200, 1583, 1874, 1911, 1395, 323, 1136, 753, 997, 689, 291, 187, 1869, 893, 1950, 1636, 782, 19, 77, 995, 265, 560, 1675, 37, 1823, 125, 665, 214, 1865, 1623, 129, 1934, 1194, 984, 1943, 33, 1352, 387, 987, 230, 1747, 1531, 1837, 1022, 1563, 1184, 1722, 1596, 1401, 463, 1927, 1718, 264, 1279, 276, 666, 542, 219, 1542, 260, 1777, 247, 1053, 921, 485, 963, 1351, 1333, 875, 1491, 1783, 1202, 820, 1312, 1050, 539, 1657, 914, 1494, 1792, 235, 484, 569, 920, 1472, 23, 1108, 704, 814, 411, 1816, 556, 833, 579, 696, 257, 786, 383, 1262, 1836, 1337, 1505, 1811, 754, 686, 131, 433, 1357, 314, 685, 1645, 202, 253, 304, 950, 1537, 340, 600, 364, 206, 1882, 67, 1691, 1935, 735, 918, 1156, 1665, 10, 1498, 538, 1776, 1392, 138, 1864, 691, 1501, 1083, 1728, 1155, 1212, 1347, 280, 1581, 615, 658, 638, 1595, 959, 1872, 165, 745 };
        assertEquals(976, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case81() {
        int N = 1859;
        int K = 378;
        int[] info = { 44, 493, 1249, 692, 1239, 1286, 730, 1125, 1270, 1059, 497, 134, 428, 1626, 67, 414, 1215, 261, 358, 377, 389, 686, 1183, 1654, 1645, 430, 1513, 1010, 492, 815, 613, 1040, 1808, 289, 742, 35, 1049, 1051, 491, 1667, 1242, 25, 1392, 1726, 1348, 965, 517, 439, 465, 1189, 1593, 540, 1821, 1601, 1313, 642, 229, 1162, 998, 151, 1418, 495, 1557, 79, 1166, 1254, 1297, 1382, 1554, 469, 1455, 706, 1119, 1641, 1729, 1376, 339, 1496, 605, 572, 1121, 833, 1401, 476, 298, 1427, 1596, 840, 1095, 1365, 1030, 1564, 778, 1432, 575, 535, 1195, 278, 1431, 1813, 1412, 442, 947, 433, 594, 813, 1797, 779, 1788, 1801, 1187, 1524, 1806, 1755, 58, 69, 764, 96, 356, 1426, 145, 418, 95, 196, 756, 1110, 1088, 324, 1259, 137, 1164, 1250, 1371, 696, 714, 71, 45, 795, 305, 1566, 1766, 243, 1675, 1015, 746, 162, 1550, 271, 320, 1150, 832, 1056, 1074, 57, 470, 604, 524, 1592, 699, 1093, 786, 1580, 1617, 1544, 663, 1850, 119, 1649, 748, 1577, 1793, 70, 1108, 623, 112, 685, 1129, 310, 72, 1231, 1448, 373, 1493, 921, 975, 1118, 1498, 732, 971, 1483, 163, 13, 1610, 1034, 1832, 1646, 1362, 362, 1854, 328, 1835, 417, 1829, 1352, 1146, 687, 844, 774, 682, 784, 1456, 1332, 1279, 1244, 1457, 1063, 1659, 1022, 698, 1565, 724, 1410, 393, 1123, 1014, 562, 1760, 624, 735, 1077, 952, 1508, 474, 1761, 1510, 326, 482, 325, 1358, 1754, 854, 135, 210, 448, 1045, 1235, 1379, 1005, 1068, 376, 1711, 790, 1144, 1441, 1688, 507 };
        assertEquals(933, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case82() {
        int N = 1695;
        int K = 55;
        int[] info = { 670, 1599, 185, 858, 684, 1314, 119, 1001, 737, 1304, 1391, 62, 1629, 882, 1430, 1426, 1675, 804, 1522, 563, 651, 1288, 1196, 361, 857, 382, 230, 774, 1559, 1413, 861, 674, 1276, 277, 998, 1108, 255, 465, 991, 686, 723, 1482, 1262, 1169, 300, 458, 454, 443, 11, 1266, 172, 1456, 1115, 532, 657, 163, 417, 513, 673, 637, 1240, 108, 354, 271, 625, 450, 1155, 939, 734, 677, 1610, 1167, 151, 1340, 188, 681, 1082, 110, 852, 1253, 1092, 340, 896, 461, 1382, 523, 208, 438, 219, 893, 398, 564, 1663, 632, 1213, 1229, 943, 1158, 1312, 1653, 1692, 913, 1236, 1532, 799, 1140, 839, 1523, 967, 1142, 1256, 1507, 770, 409, 61, 785, 1190, 197, 498, 246, 900, 1173, 478, 51, 1199, 1116, 756, 787, 1515, 243, 493, 1301, 739, 480, 1485, 1027, 1531, 484, 1538 };
        assertEquals(830, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case83() {
        int N = 1771;
        int K = 672;
        int[] info = { 511, 1029, 901, 1451, 643, 349, 253, 1621, 851, 1369, 279, 1263, 1596, 1327, 1285, 1008, 316, 1456, 299, 75, 525, 1607, 1434, 379, 325, 93, 883, 1222, 917, 641, 1755, 5, 1506, 867, 454, 950, 691, 1202, 497, 743, 1486, 398, 1312, 1174, 286, 346, 572, 772, 679, 1068, 811, 724, 191, 77, 764, 495, 806, 1405, 1668, 561, 111, 1283, 1532, 396, 358, 437, 329, 285, 829, 29, 326, 833, 34, 40, 584, 239, 1236, 26, 1620, 282, 1036, 128, 1513, 1441, 1548, 880, 868, 545, 420, 1567, 403, 1675, 248, 193, 1522, 760, 1707, 348, 1006, 1032, 1561, 1250, 998, 441, 400, 697, 447, 249, 11, 392, 574, 13, 802, 1086, 1458, 115, 1419, 1350, 147, 306, 1579, 321, 1162, 1483, 709, 1362, 1598, 853, 649, 394, 913, 457, 1054, 736, 200, 288, 1292, 331, 427, 211, 718, 133, 1190, 648, 533, 1470, 1535, 378, 492, 366, 1332, 962, 949, 1001, 604, 189, 877, 127, 1109, 686, 1204, 1674, 1066, 121, 494, 707, 138, 95, 1050, 660, 368, 620, 50, 518, 1081, 227, 1272, 1711, 1420, 1371, 1489, 318, 448, 125, 1409, 1085, 1304, 377, 1047, 782, 101, 1238, 1015, 1065, 61, 863, 895, 559, 916, 918, 1693, 1020, 505, 959, 1403, 1467, 776, 1214, 746, 1275, 1003, 1623, 1497, 1639, 6, 865, 1628, 388, 891, 1445, 1653, 1249, 283, 1622, 884, 320, 805, 674, 999, 719, 1111, 879, 1519, 1549, 1524, 963, 481, 205, 512, 1647, 1407, 1583, 1301, 1117, 38, 780, 1746, 1227, 462, 1594, 1195, 1432, 597, 60, 1019, 1520, 1558, 452, 1255, 872, 733, 72, 220, 513, 914, 1404, 71, 520, 41, 984, 212, 682, 1491, 470, 1569, 528, 327, 278, 795, 267, 1342, 769, 861, 579, 575, 626, 817, 1573, 699, 1698, 625, 1764, 1221, 1299, 791, 928, 1071, 1245, 1515, 1374, 237, 793, 367, 1323, 179, 1108, 1597, 839, 1233, 1226, 1216, 1564, 941, 1345, 541, 290, 537, 787, 534, 172, 485, 1324, 521, 1125, 143, 565, 356, 317, 1207, 803, 9, 25, 1163, 1330, 569, 416, 763, 968, 384, 912, 1007, 1691, 218, 1555, 667, 137, 336, 1487, 681, 489, 888, 467, 1554, 1759, 1357, 1317, 154, 1492, 1084, 155, 81, 710, 1344, 134, 46, 208, 1517, 234, 1242, 1335, 281, 1643, 689, 925, 815, 890, 796, 1166, 1461, 716, 701, 945, 1502, 343, 605, 738, 171, 231, 841, 1399, 1448, 972, 322, 259, 1706, 624, 1656, 1758, 560, 903, 1733, 855, 68, 1014, 985, 765, 168, 431, 1529, 251, 1735, 1665, 1284, 1507, 1366, 1158, 48, 1604, 526, 1447, 721, 1331, 90, 458, 37, 595, 214, 1468, 1017, 69, 608, 862, 849, 18, 109, 1477, 65, 550, 1183, 380, 225, 344, 1288, 529, 1260, 1613, 122, 1603, 1701, 1683, 1090, 1239, 656, 978, 140, 1087, 1258, 142, 1726, 1398, 1013, 435, 370, 1082, 484, 583, 1684, 1511, 464, 216, 1503, 858, 748, 1376, 1401, 1574, 932, 190, 1053, 1537, 1390, 284, 1712, 747, 473, 850, 794, 1253, 304, 739, 1297, 773, 44, 741, 1624, 312, 260, 837, 30, 386, 1459, 1565, 823, 1752, 1073, 568, 213, 621, 958, 634, 587, 335, 1089, 1676, 446, 169, 1754, 1194, 1186, 1021, 1058, 354, 948, 779, 592, 1667, 1243, 792, 678, 618, 988, 1030, 219, 809, 1302, 2, 1254, 1593, 1259, 445, 1124, 1256, 145, 508, 694, 1692, 992, 705, 99, 1689, 636, 444, 1137, 1338, 1580, 955, 1512, 827, 910, 94, 486, 943, 814, 471, 1541, 555, 1540, 1617, 1637, 1516, 1578, 1122, 412, 907, 1722, 538, 1203, 1496, 623, 646, 846, 1638, 622, 1762, 1237, 1479, 527, 1393, 8, 1142, 544, 1257, 591, 859, 1742, 843, 1049, 1010, 1466, 114, 361, 490, 1645, 1141, 1721, 580, 116, 1358, 600, 1118, 1281, 1666, 330, 1469, 130, 1699, 55, 1064, 1051, 1039, 734, 1326, 442, 31, 185, 1428, 488, 1412, 1536, 543, 1052, 1329, 207, 1200, 1763, 1710, 1738, 257, 174, 1663, 1416, 728, 315, 1394, 785, 589, 1696, 1577, 103, 309, 1171, 935, 1270, 1128, 1386, 1518, 1354, 410, 961, 964, 1114, 633, 1004, 1523, 1094, 197, 1771, 1364, 360, 375, 519, 1208, 188, 1442, 523, 1009, 298, 1191, 1107, 63, 49, 1387, 126, 1757, 645, 1280, 801, 503, 1438, 1559, 226, 1100, 976, 557, 797, 302, 1361, 562, 666, 885, 1612, 1170, 775, 1431, 254, 1083, 871, 1218, 369, 1704, 531, 515, 807, 1169, 67, 1740, 1037, 112, 690, 1588, 7, 19, 57, 1293, 385, 1504, 166, 1544, 1650, 323, 1690, 1078, 1589, 740, 1294, 1770, 1179, 931, 404, 1096, 449, 1379, 799, 266, 482, 1375, 1572, 1131, 1180, 836, 974, 761, 244, 332, 1642, 894, 1719, 1743, 1219, 1188, 1682, 397, 1210, 1217, 553, 383, 965, 552, 1298, 22, 1408, 997, 1687, 461, 289, 1034, 906, 663, 1395, 468, 1509, 1498, 1768, 1484, 1727, 1264, 1119, 472, 421, 1160, 1633, 217, 162, 1027, 100, 149, 56, 1041, 243, 514, 106, 1615, 971, 1560, 1508, 186, 307, 465, 292, 1198, 1751, 1769, 1101, 1651, 206, 586, 350, 886, 816, 1732, 1592, 1694, 573, 64, 337, 824, 45, 148, 504, 1321, 43, 944, 1356 };
        assertEquals(887, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case84() {
        int N = 825;
        int K = 431;
        int[] info = { 71, 742, 150, 111, 357, 63, 354, 306, 294, 631, 178, 721, 353, 701, 317, 418, 802, 221, 529, 134, 500, 211, 661, 196, 518, 130, 787, 795, 560, 671, 572, 333, 729, 595, 61, 310, 698, 27, 690, 700, 759, 792, 733, 542, 159, 80, 462, 302, 328, 776, 536, 604, 128, 166, 643, 132, 549, 129, 565, 458, 366, 1, 711, 293, 230, 445, 738, 612, 649, 203, 125, 809, 820, 405, 344, 570, 692, 696, 121, 559, 214, 287, 629, 62, 85, 637, 243, 716, 91, 432, 207, 296, 342, 552, 198, 174, 60, 592, 512, 660, 477, 213, 216, 414, 554, 616, 226, 143, 123, 647, 770, 639, 564, 9, 315, 663, 155, 664, 628, 108, 96, 209, 122, 75, 208, 819, 375, 252, 298, 463, 416, 31, 148, 330, 544, 104, 798, 281, 494, 268, 688, 289, 823, 56, 580, 727, 89, 297, 168, 282, 667, 434, 138, 312, 568, 755, 397, 370, 68, 800, 765, 507, 793, 389, 95, 712, 141, 413, 467, 240, 707, 471, 735, 499, 674, 437, 288, 752, 589, 157, 81, 319, 286, 504, 238, 573, 113, 644, 766, 757, 487, 538, 3, 24, 666, 769, 484, 718, 398, 613, 435, 165, 745, 441, 322, 97, 697, 215, 680, 182, 303, 299, 140, 669, 587, 170, 23, 391, 799, 546, 662, 407, 550, 37, 33, 627, 388, 648, 516, 449, 521, 724, 232, 183, 49, 332, 548, 490, 264, 395, 641, 668, 691, 372, 233, 371, 624, 338, 509, 53, 654, 350, 803, 139, 4, 606, 163, 17, 197, 632, 66, 513, 511, 343, 187, 591, 83, 152, 19, 778, 147, 349, 38, 11, 314, 523, 773, 285, 160, 779, 390, 44, 74, 316, 783, 393, 561, 818, 93, 265, 506, 785, 615, 290, 218, 706, 47, 109, 791, 172, 21, 498, 617, 13, 36, 18, 206, 2, 347, 175, 351, 227, 468, 313, 340, 524, 743, 410, 381, 609, 780, 801, 212, 781, 192, 179, 50, 488, 32, 710, 645, 598, 501, 185, 137, 84 };
        assertEquals(420, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case85() {
        int N = 1940;
        int K = 800;
        int[] info = { 1145, 960, 1834, 572, 413, 1936, 1139, 1499, 345, 170, 1769, 1153, 1385, 758, 590, 1672, 141, 998, 1926, 1931, 1316, 1252, 884, 936, 930, 1625, 206, 5, 603, 737, 561, 399, 648, 1065, 132, 1336, 1362, 704, 218, 510, 527, 900, 1554, 555, 1185, 1197, 260, 1413, 75, 741, 658, 1205, 1406, 1031, 1708, 487, 1485, 1394, 926, 1900, 1624, 1526, 1004, 1210, 368, 362, 1903, 7, 1841, 906, 553, 1370, 230, 334, 1092, 458, 234, 1342, 1100, 1126, 444, 443, 914, 740, 116, 1184, 793, 910, 1531, 1620, 1910, 827, 1739, 1442, 1777, 1260, 1727, 855, 1640, 772, 556, 396, 726, 109, 1788, 351, 790, 1503, 11, 1350, 1541, 1909, 1356, 379, 1098, 744, 1922, 681, 563, 371, 479, 1868, 342, 1228, 221, 118, 677, 847, 270, 1379, 427, 1842, 1383, 40, 188, 1710, 1734, 1055, 624, 1617, 1867, 1542, 654, 1616, 1516, 81, 1773, 983, 606, 1546, 1852, 453, 36, 1794, 1369, 322, 1775, 1795, 732, 1933, 832, 607, 1660, 1538, 598, 1638, 1685, 414, 1605, 1824, 1346, 617, 1923, 582, 480, 327, 565, 1312, 1831, 478, 1015, 1550, 687, 449, 475, 1555, 1420, 883, 1882, 464, 112, 1136, 12, 317, 142, 619, 296, 1125, 911, 267, 1242, 707, 417, 1014, 452, 1360, 838, 1147, 918, 1560, 789, 471, 34, 1340, 107, 848, 1911, 1792, 664, 309, 1802, 866, 1005, 1053, 745, 104, 429, 481, 456, 1736, 860, 1894, 288, 1343, 1097, 913, 251, 484, 1375, 1502, 496, 143, 211, 693, 268, 876, 1798, 144, 51, 1407, 1524, 622, 418, 1364, 120, 1467, 801, 60, 1325, 1837, 1938, 1757, 1062, 445, 1519, 194, 353, 280, 387, 1908, 286, 1635, 1940, 920, 283, 294, 928, 1409, 19, 374, 462, 1402, 1093, 931, 1302, 110, 1793, 1606, 263, 181, 595, 470, 964, 264, 447, 356, 763, 1077, 628, 650, 1498, 919, 1315, 1279, 1556, 277, 705, 1236, 1626, 1439, 1196, 1644, 437, 1698, 1161, 806, 817, 77, 706, 1009, 1288, 1599, 1767, 235, 615, 1130, 1648, 300, 1799, 1751, 106, 1719, 1057, 1121, 255, 57, 1446, 1735, 1113, 122, 1838, 1073, 195, 1670, 1457, 237, 1515, 1291, 873, 636, 894, 1512, 350, 1762, 1761, 58, 1475, 1429, 1858, 248, 1924, 173, 529, 1118, 1079, 1203, 1613, 1272, 55, 781, 1494, 1296, 1054, 581, 1317, 1180, 182, 1304, 1322, 1780, 1741, 864, 743, 1247, 1733, 639, 301, 1828, 1878, 1101, 1087, 1646, 1018, 1506, 314, 1564, 841, 513, 1399, 1157, 176, 713, 273, 1025, 1776, 517, 980, 1380, 1290, 1238, 1321, 752, 63, 10, 1458, 1702, 76, 1691, 646, 768, 1669, 1510, 715, 519, 1253, 1019, 1376, 1354, 1263, 1000, 828, 1351, 1573, 1334, 1278, 1508, 1022, 1681, 24, 180, 1463, 1049, 640, 1543, 714, 538, 557, 1529, 320, 298, 868, 1217, 1309, 364, 407, 675, 1372, 1930, 971, 287, 939, 33, 710, 1884, 422, 1663, 386, 1865, 1817, 1604, 78, 1821, 1551, 70, 435, 204, 594, 1904, 1174, 526, 782, 591, 762, 1237, 207, 1430, 1058, 216, 1714, 293, 539, 82, 446, 372, 343, 1245, 302, 683, 354, 363, 1140, 1240, 137, 319, 1243, 491, 1382, 1095, 1280, 1522, 490, 1308, 1678, 1307, 1378, 1270, 1496, 1720, 1264, 637, 1034, 1632, 1771, 1597, 567, 71, 854, 1198, 229, 645, 279, 265, 1027, 504, 366, 1804, 330, 1043, 783, 1548, 1807, 59, 1224, 811, 503, 1600, 289, 1218, 1481, 146, 669, 1885, 226, 395, 1513, 857, 1225, 1466, 1797, 1456, 400, 835, 223, 1637, 1026, 53, 1822, 495, 1038, 1080, 509, 1768, 1265, 420, 1423, 1833, 1059, 1170, 1029, 236, 638, 1642, 531, 367, 915, 1395, 243, 168, 881, 812, 2, 540, 1146, 1195, 1514, 469, 1187, 154, 1928, 1724, 42, 1404, 1273, 1023, 834, 520, 1713, 1106, 1347, 1386, 172, 1758, 1179, 217, 1046, 1517, 668, 643, 1078, 765, 942, 1920, 1534, 1772, 1889, 956, 436, 416, 573, 1249, 1705, 1658, 151, 533, 183, 717, 800, 1067, 6, 791, 74, 385, 784, 1607, 872, 1782, 1847, 185, 1572, 438, 692, 1261, 1341, 101, 1345, 398, 537, 1137, 97, 909, 1158, 904, 1152, 945, 459, 959, 1827, 17, 1311, 856, 1487, 1488, 1818, 1929, 805, 1919, 1836, 304, 1808, 1231, 65, 1262, 1201, 893, 1629, 616, 1552, 1165, 623, 1250, 1040, 329, 999, 651, 394, 128, 1008, 153, 577, 932, 338, 986, 689, 1649, 1881, 105, 1255, 1433, 1434, 850, 192, 29, 830, 1628, 164, 981, 1190, 1455, 1614, 324, 1045, 1193, 1189, 1521, 313, 1472, 411, 376, 96, 938, 747, 977, 1683, 895, 461, 1287, 1359, 285 };
        assertEquals(1014, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case86() {
        int N = 1819;
        int K = 1397;
        int[] info = { 115, 1547, 145, 302, 162, 1560, 744, 1681, 1289, 1108, 1106, 977, 1649, 1692, 782, 523, 1689, 882, 289, 172, 1002, 475, 272, 794, 524, 1495, 921, 358, 515, 276, 137, 401, 1706, 1537, 291, 534, 1146, 480, 1551, 1030, 1084, 1505, 224, 843, 984, 212, 1320, 1647, 1577, 1080, 640, 78, 1381, 1375, 1741, 1310, 599, 853, 1591, 1373, 928, 1755, 935, 1806, 60, 764, 662, 1385, 824, 1614, 161, 1151, 74, 1767, 1567, 1371, 957, 1536, 1202, 85, 1594, 1698, 1460, 1742, 1244, 477, 896, 1804, 487, 992, 397, 463, 372, 714, 138, 588, 726, 1256, 710, 1369, 352, 179, 1663, 346, 978, 1627, 627, 1684, 1040, 937, 720, 1573, 537, 922, 386, 1280, 866, 338, 436, 796, 631, 826, 349, 507, 959, 369, 686, 713, 1297, 301, 1201, 490, 586, 414, 982, 773, 1247, 1540, 1083, 1399, 952, 295, 1326, 219, 1562, 493, 1344, 176, 81, 1572, 1519, 1006, 1161, 1053, 642, 1471, 112, 930, 503, 143, 899, 531, 1598, 1535, 1491, 1761, 700, 1142, 222, 1368, 696, 448, 549, 1396, 1655, 264, 9, 1300, 1750, 1351, 1787, 1128, 334, 99, 419, 1276, 1127, 1440, 1184, 1203, 1510, 612, 556, 1753, 1350, 1009, 434, 1342, 192, 551, 11, 1392, 1674, 322, 719, 834, 40, 1571, 781, 1347, 539, 784, 1019, 1488, 859, 920, 1378, 129, 1530, 975, 1809, 25, 525, 1101, 217, 1308, 653, 839, 1818, 1557, 1192, 812, 83, 973, 384, 370, 398, 1042, 1793, 1277, 494, 37, 1489, 962, 1107, 772, 1330, 1332, 1304, 1526, 887, 218, 171, 432, 66, 1654, 96, 119, 385, 1118, 413, 1238, 1252, 913, 240, 382, 873, 1456, 1677, 197, 12, 1581, 864, 912, 944, 708, 237, 407, 1667, 1713, 1708, 1348, 800, 1521, 1048, 743, 1576, 326, 1188, 830, 1112, 418, 1595, 647, 980, 466, 1481, 1646, 1578, 426, 1430, 1451, 430, 645, 341, 1088, 284, 1090, 255, 1473, 303, 1668, 1419, 144, 22, 717, 870, 27, 154, 1672, 1428, 1788, 681, 893, 1608, 253, 124, 1762, 1358, 1523, 1365, 914, 216, 750, 594, 1452, 1286, 1501, 315, 404, 787, 557, 1123, 1805, 1580, 277, 152, 1114, 1554, 1207, 684, 875, 65, 1270, 332, 1217, 793, 1197, 1437, 1035, 72, 400, 156, 1196, 1739, 1612, 883, 390, 321, 92, 1643, 1379, 58, 155, 1172, 637, 1582, 1301, 1556, 1520, 542, 209, 189, 1651, 1061, 736, 55, 592, 1394, 841, 498, 424, 483, 207, 1364, 1325, 46, 827, 157, 1070, 1355, 1807, 1191, 208, 848 };
        assertEquals(1120, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case87() {
        int N = 1891;
        int K = 159;
        int[] info = { 191, 1782, 1274, 1173, 1452, 325, 1691, 1492, 1249, 1627, 340, 138, 1846, 1603, 1789, 51, 1176, 1243, 1002, 974, 594, 201, 1602, 1546, 1263, 1282, 467, 6, 956, 1530, 1155, 279, 696, 1764, 1302, 106, 379, 748, 1628, 85, 996, 7, 1818, 654, 1801, 370, 1712, 1276, 646, 1045, 1584, 1531, 1359, 617, 1734, 1140, 1154, 647, 886, 366, 978, 579, 347, 1043, 461, 371, 270, 473, 424, 732, 55, 196, 681, 1239, 1178, 755, 327, 401, 1164, 1512, 1621, 1129, 1793, 1722, 27, 1069, 1315, 1233, 1478, 1529, 648, 38, 669, 576, 23, 249, 892, 914, 253, 420, 372, 1624, 1335, 992, 583, 932, 1190, 68, 1179, 436, 91, 322, 1553, 1366, 1721, 1772, 885, 355, 961, 819, 879, 1025, 254, 1650, 770, 965, 663, 828, 1149, 190, 48, 489, 180, 692, 1617, 369, 160, 1245, 510, 688, 404, 1130, 1080, 2, 209, 229, 682, 1700, 1284, 1533, 831, 449, 1746, 1159, 890, 987, 178, 969, 8, 948, 244, 1063, 49, 297, 318, 917, 639, 1380, 396, 1268, 829, 859, 154, 1709, 519, 1625, 737, 21, 1110, 1844, 925, 1435, 1256, 1358, 946, 1326, 1419, 582, 1352, 588, 332, 1694, 227, 1207, 349, 927, 1626, 1078, 282, 1699, 1833, 1260, 1877, 375, 1288, 491, 1252, 1135, 112, 162, 512, 1635, 41, 1605, 1127, 1491, 622, 847, 1509, 1373, 1642, 779, 665, 632, 982, 541, 1591, 1488, 1573, 287, 907, 1597, 1667, 1217, 1527, 408, 1835, 1431, 1748, 447, 539, 1010, 290, 1693, 1451, 796, 1145, 731, 306, 536, 1391, 1254, 1486, 871, 1248, 388, 614, 1610, 501, 868, 1289, 52, 1278, 1420, 1696, 1052, 554, 775, 350, 1550, 891, 220, 122, 1588, 1403, 1157, 1102, 1620, 1644, 1604, 709, 1331, 653, 459, 1735, 854, 1834, 520, 239, 267, 1668, 1575, 551, 1374, 1733, 25, 452, 910, 1547, 1306, 90, 542, 1377, 1454, 1089, 1630, 124, 855, 363, 1350, 133, 1220, 82, 1109, 926, 128, 786, 83, 1637, 1388, 1206, 1727, 1495, 1713, 1041, 740, 901, 1225, 1118, 1432, 168, 1167, 141, 1472, 1866, 537, 713, 1708, 742, 1707, 555, 434, 330, 397, 1806, 1349, 838, 1639, 392, 852, 1586, 1736, 636, 454, 47, 1401, 953, 1498, 1612, 592, 1461, 176, 56, 804, 339, 815, 292, 1397, 650, 1438, 1221, 1365, 488, 398, 824, 1416, 1187, 9, 437, 1262, 384 };
        assertEquals(936, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case88() {
        int N = 1639;
        int K = 212;
        int[] info = { 1419, 390, 242, 50, 1347, 20, 1342, 496, 830, 1025, 686, 1020, 438, 382, 521, 1481, 415, 675, 727, 108, 1420, 859, 491, 1232, 1089, 994, 1259, 1211, 683, 38, 205, 1390, 412, 1047, 774, 1522, 507, 44, 451, 198, 1629, 1367, 1179, 1573, 1468, 142, 651, 1209, 241, 968, 1143, 1486, 1578, 951, 348, 1428, 1298, 840, 1378, 1247, 1597, 953, 1061, 852, 1158, 959, 1084, 1266, 506, 1549, 1536, 1600, 321, 362, 110, 264, 1543, 981, 995, 293, 7, 685, 641, 805, 427, 528, 286, 633, 1204, 746, 1160, 1225, 25, 138, 574, 1253, 1147, 1271, 910, 1478, 358, 931, 853, 355, 1245, 106, 265, 123, 1447, 317, 1154, 713, 687, 556, 642, 139, 1327, 566, 965, 836, 632, 1236, 1286, 1558, 800, 1034, 832, 1401, 663, 1116, 156, 360, 980, 587, 315, 922, 104, 71, 376, 1621, 756, 1635, 1413, 694, 787, 771, 785, 1131, 486, 1556, 1537, 929, 1261, 1273, 1571, 863, 928, 839, 1424, 868, 1267, 366, 453, 304, 1029, 101, 558, 998, 707, 17, 70, 809, 426, 739, 1024, 539, 1311, 1161, 318, 1117, 340, 31, 578, 117, 1510, 1585, 702, 765, 46, 1287, 1514, 268, 782, 478, 849, 629, 1383, 187, 457, 1183, 635, 1152, 1120, 1545, 1180, 350, 1203, 1631, 1219, 1374, 545, 1575, 1638, 786, 518, 1565, 1352, 1163, 582, 1243, 837, 567, 177, 1376, 248, 692, 1353, 1234, 1333, 1617, 672, 1454, 1276, 848, 1291, 576, 287, 1300, 1400, 1460, 1182, 47, 962, 1176, 231, 1482, 1455, 1397, 1098, 749, 219, 722, 170, 259, 271, 493, 327, 1097, 1087, 1483, 89, 1404, 1282, 199, 586, 639, 1373, 778, 454, 1452, 206, 535, 667, 1049, 838, 1349, 1636, 1033, 568, 134, 243, 413, 1035, 881, 1251, 534, 763, 1582, 716, 305, 532, 399, 630, 1139, 247, 1326, 1331, 781, 711, 531, 282, 1239, 1599, 1108, 699, 126, 892, 957, 1045, 917, 1226, 349, 1068, 1321, 1605, 529, 745, 1111, 705, 189, 1006, 986, 1593, 1602, 646, 900, 1198, 899, 708, 316, 420, 562, 972, 1512, 679, 689, 143, 1145, 977, 1279, 1574, 514, 131, 140, 871, 1242, 1222, 1395, 659, 1246, 668, 417, 359, 759, 159, 886, 1528, 731, 1491, 710, 1205, 1623, 1241, 920, 363, 1416, 950, 1371, 1458, 591, 29, 257, 1113, 815, 861, 1540, 1524, 85, 171, 860, 153, 625, 807, 948, 744, 465, 64, 573, 1501, 82, 1052, 13, 1178, 1446, 1214, 1135, 857, 94, 186, 1488, 851, 834, 997, 1439, 202, 522, 1193, 133, 240, 1403, 1628, 1302, 889, 137, 1470, 704, 842, 898, 431, 487, 844, 124, 691, 874, 37, 30, 430, 12, 403, 615, 1438, 1579, 421, 472, 611, 1244, 463, 1418, 406, 643, 441, 237, 4, 1235, 1336, 799, 1088, 1388, 249, 1518, 288, 653, 407, 1414, 69, 789, 1107, 53, 388, 367, 1194, 476, 1075, 250, 1004, 1067, 1177, 255, 1190, 715, 602, 811, 1126, 446, 1167, 418, 1445, 915, 24, 1399, 184, 551, 1534, 1626, 1255, 1433, 1073, 443, 1594, 147, 65, 1191, 494, 1338, 1610, 1289, 1142, 515, 996, 1136 };
        assertEquals(816, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case89() {
        int N = 1613;
        int K = 1132;
        int[] info = { 1391, 648, 1232, 1214, 188, 310, 1425, 139, 93, 478, 1590, 1333, 501, 533, 977, 153, 14, 322, 184, 321, 1211, 757, 529, 844, 53, 1412, 909, 464, 55, 289, 714, 842, 1275, 865, 670, 430, 413, 1508, 506, 1482, 252, 263, 1252, 789, 927, 398, 634, 612, 1591, 752, 1360, 60, 1538, 701, 704, 419, 1209, 189, 1256, 176, 1231, 165, 682, 23, 1575, 1466, 347, 408, 857, 890, 292, 517, 1013, 1592, 827, 1578, 1022, 32, 988, 883, 971, 1311, 432, 279, 31, 1264, 1522, 307, 124, 698, 1449, 793, 739, 1353, 877, 336, 95, 1160, 756, 35, 288, 1341, 136, 784, 476, 22, 1269, 949, 393, 285, 708, 1291, 859, 1464, 74, 1140, 232, 101, 1045, 422, 821, 404, 613, 649, 853, 790, 1570, 186, 1403, 267, 554, 203, 174, 241, 744, 831, 758, 441, 198, 335, 569, 1000, 1263, 894, 213, 225, 131, 157, 1322, 794, 1189, 1598, 627, 424, 872, 874, 855, 716, 1190, 227, 81, 945, 386, 516, 417, 990, 48, 543, 495, 1305, 1240, 1506, 683, 459, 553, 142, 1376, 838, 485, 904, 206, 936, 207, 702, 1552, 484, 280, 782, 453, 116, 549, 1349, 1540, 1047, 1442, 631, 127, 1265, 732, 141, 699, 138, 919, 705, 299, 434, 1196, 1562, 1585, 1320, 528, 169, 1370, 915, 86, 120, 340, 1181, 983, 242, 1484, 1331, 772, 158, 106, 602, 91, 238, 1378, 411, 449, 412, 908, 1576, 397, 492, 1495, 293, 94, 1185, 1582, 359, 1535, 1159, 1610, 1287, 931, 717, 566, 1021, 1577, 1394, 180, 577, 466, 394, 416, 783, 592, 1473, 1358, 914, 585, 1503, 1574, 66, 1569, 1439, 323, 1611, 724, 177, 1166, 980, 1037, 494, 77, 365, 845, 257, 668, 858, 1014, 345, 1334, 1318, 951, 287, 542, 1480, 997, 889, 306, 1507, 1555, 1393, 572, 126, 596, 629, 296, 962, 1244, 576, 1173, 130, 575, 98, 1026, 1547, 1350, 1445, 1519, 996, 475, 504, 906, 1197, 1038, 942, 338, 1513, 1027, 719, 1448, 678, 771, 1564, 1329, 635, 834, 1001, 1561, 168, 1191, 662, 1234, 774, 1437, 40, 371, 78, 873, 1238, 583, 973, 1035, 154, 953, 582, 1458, 899, 597, 939, 1018, 677, 1432, 148, 283, 630, 1612, 1446, 392, 1410, 1271, 1476, 445, 134, 1605, 665, 276, 1008, 1426, 1039, 700, 888, 1046, 1357, 4, 1170, 693, 1433, 761, 30, 245, 799, 1402, 1281, 568, 626, 298, 818, 1479, 266, 355, 659, 991, 137, 96, 1455, 226, 1525, 1148, 1583, 1505, 13, 75, 1206, 1296, 672, 1007, 1274, 979, 500, 852, 56, 1152, 1388, 841, 403, 937, 223, 570, 159, 325, 364, 301, 190, 1144, 895, 1384, 199, 1414, 898, 1510, 396, 863, 62, 381, 1295, 982, 217 };
        assertEquals(966, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case90() {
        int N = 1569;
        int K = 133;
        int[] info = { 638, 1106, 874, 1088, 280, 942, 825, 589, 1301, 1332, 527, 719, 390, 236, 23, 84, 1091, 170, 1514, 407, 225, 1225, 328, 220, 1425, 1275, 591, 1480, 1224, 37, 1431, 1189, 1086, 554, 1507, 815, 688, 1422, 994, 47, 663, 410, 174, 612, 985, 1390, 333, 1208, 177, 34, 1523, 318, 1297, 887, 1369, 1097, 1300, 227, 796, 465, 1489, 26, 685, 571, 906, 402, 837, 311, 492, 778, 235, 1180, 1098, 1336, 1421, 1152, 398, 859, 1214, 1501, 1468, 97, 1070, 1291, 1555, 1095, 999, 1419, 428, 1068, 677, 335, 199, 373, 1493, 1112, 472, 66, 827, 101, 21, 424, 292, 1, 256, 1305, 503, 1256, 884, 1141, 526, 439, 6, 889, 1499, 41, 634, 904, 661, 82, 39, 899, 998, 597, 303, 462, 1379, 931, 63, 258, 435, 996, 1403, 670, 1567, 161, 35, 10, 1121, 501, 156, 107, 966, 1137, 627, 1048, 1231, 1123, 626, 1436, 1333, 297, 145, 804, 535, 1223, 1353, 1258, 799, 1101, 331, 911, 1414, 1427, 845, 766, 1131, 376, 1316, 726, 833, 764, 489, 1140, 436, 1440, 902, 301, 990, 630, 1051, 836, 621, 11, 909, 378, 1151, 964, 583, 694, 495, 103, 167, 781, 211, 406, 1314, 274, 1167, 259, 508, 1356, 451, 1216, 1122, 1238, 987, 1099, 150, 190, 502, 918, 561, 32, 295, 1299, 1109, 820, 1307, 997, 679, 613, 786, 968, 1171, 476, 988, 1263, 290, 546, 1155, 910, 736, 928, 425, 482, 1470, 704, 1456, 153, 266, 173, 484, 310, 963, 314, 42, 1444, 1458, 834, 785, 180, 715, 355, 244, 1102, 1144, 849, 20, 877, 498, 747, 252, 1559, 1533, 461, 1065, 1415, 780, 1365, 28, 193, 1149, 1466, 1090, 1343, 1539, 1335, 1191, 1363, 713, 684, 944, 95, 1351, 1474, 405, 646, 329, 500, 848, 1254, 413, 1420, 722, 440, 1399, 316, 1544, 1175, 1274, 881, 249, 565, 1432, 432, 393, 1220, 852, 471, 442, 2, 16, 162, 1296, 793, 1558, 1410, 203, 141, 1288, 520, 1426, 29, 1049, 601, 1139, 45, 603, 1154, 18, 164, 265, 151, 473, 901, 1416, 1064, 1373, 798, 1041, 703, 643, 254, 1017, 608, 1500, 362, 1542, 857, 1538, 1323, 540, 1371, 374, 575, 1302, 336, 1465, 514, 775, 1561, 864, 593, 65, 614, 85, 572, 1516, 1182, 1283, 1042, 609, 38, 31, 1483, 1058, 17, 1292, 930, 976, 445, 1249, 767, 1174, 306, 1329, 787, 962, 763, 880, 76, 553, 448, 1229, 771, 1126, 1085, 247, 633, 1298, 4, 53, 1199, 364, 1498, 890, 1104, 1564, 557, 854, 792, 470, 1534, 979, 403, 397, 338, 334, 641, 1289, 678, 581, 1067, 459, 1228, 702, 1515, 154, 1488, 194, 1486, 1255, 951, 1397, 1266, 75, 1129, 50, 782, 325, 758, 139, 984, 1320, 1253, 108, 14, 1057, 1120, 100, 481, 981, 309, 1347, 654, 1247, 1227, 434, 523, 1479, 88, 695, 1190, 1164, 469, 1007, 1252, 1478, 189, 293, 92, 898, 1207, 1052, 299, 243, 1092, 86, 878, 714, 387, 43, 541, 828, 1541, 433, 700, 875, 483, 83, 1389, 807, 1348, 1195, 1029, 823, 422, 479, 1251, 618, 926, 91, 558, 276, 371, 1443, 429, 67, 1128, 478, 693, 1367, 1264, 188, 216, 99, 1512, 219, 168, 1522, 493, 1200, 356, 1450, 1203, 734, 941, 134, 332, 64, 1547, 1428, 818, 1400, 179, 936, 1277, 89, 533, 897, 1187, 200, 616, 716, 1505, 970, 629, 1267, 969, 304, 277 };
        assertEquals(775, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case91() {
        int N = 1903;
        int K = 1347;
        int[] info = { 261, 850, 410, 24, 1046, 1757, 550, 1687, 1032, 1447, 1539, 552, 1119, 855, 194, 98, 1035, 1167, 617, 1101, 1747, 862, 928, 1225, 1743, 478, 212, 327, 279, 1898, 1336, 1524, 631, 143, 1670, 1764, 477, 130, 455, 1598, 1064, 859, 1333, 1332, 604, 654, 1714, 491, 1422, 1467, 1030, 1115, 1525, 784, 890, 1124, 699, 1845, 109, 1244, 227, 1282, 499, 1227, 128, 1849, 1153, 91, 1453, 1846, 645, 867, 965, 1033, 551, 1061, 335, 1361, 1580, 1806, 349, 616, 1311, 891, 1504, 1286, 35, 740, 372, 1409, 29, 701, 760, 360, 1241, 1129, 692, 623, 1200, 1896, 646, 1270, 470, 189, 592, 1258, 839, 759, 1654, 870, 1020, 1417, 1568, 1500, 716, 1824, 1291, 1449, 728, 86, 1297, 925, 812, 464, 538, 332, 79, 1880, 402, 1699, 1759, 917, 1709, 1702, 362, 1406, 503, 926, 280, 998, 273, 847, 1235, 504, 1430, 1718, 344, 1236, 1651, 495, 1844, 532, 437, 347, 1265, 1410, 236, 644, 587, 1787, 1575, 999, 537, 513, 352, 1202, 795, 1753, 1103, 825, 1094, 682, 122, 1628, 1259, 142, 1689, 436, 954, 221, 427, 1754, 1594, 195, 885, 84, 138, 448, 1337, 635, 184, 108, 461, 399, 602, 1341, 343, 1150, 880, 1186, 1492, 1171, 1143, 744, 240, 826, 1535, 747, 101, 621, 1108, 447, 69, 555, 1185, 289, 544, 523, 1859, 632, 1494, 1377, 910, 1163, 1756, 1847, 312, 803, 201, 1160, 1503, 1778, 430, 1723, 912, 614, 1151, 350, 1366, 405, 1858, 575, 237, 986, 1819, 1634, 987, 1154, 689, 501, 1893, 1442, 1037, 705, 147, 1305, 757, 246, 939, 1888, 1051, 562, 535, 1711, 454, 832, 1644, 370, 1067, 908, 905, 643, 439, 125, 1783, 414, 1596, 527, 854, 167, 1049, 1166, 1233, 1728, 1317, 113, 681, 647, 1526, 498, 1855, 1691, 597, 1045, 766, 25, 204, 83, 241, 1626, 1328, 913, 1784, 1726, 618, 1394, 688, 916, 920, 731, 931, 87, 743, 438, 783, 1386, 119, 714, 458, 593, 1354, 1077, 1621, 1608, 403, 1184, 1864, 1513, 1527, 469, 1686, 900, 80, 1538, 1132, 462, 610, 1157, 1228, 355, 1021, 671, 1547, 1660, 93, 1412, 594, 1491, 929, 1791, 1268, 88, 704, 533, 244, 977, 1240, 762, 752, 1707, 1299, 1521, 247, 314, 1473, 75, 206, 264, 892, 390, 115, 231, 276, 566, 141, 418, 690, 1682, 1295, 1822, 793, 158, 639, 315, 767, 866 };
        assertEquals(1178, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case92() {
        int N = 1449;
        int K = 838;
        int[] info = { 1440, 920, 1034, 1116, 494, 517, 1274, 1437, 598, 1082, 91, 523, 617, 1357, 230, 785, 1192, 838, 185, 766, 834, 912, 1047, 274, 589, 1424, 1394, 554, 344, 924, 356, 1080, 1354, 259, 907, 295, 1385, 616, 183, 528, 227, 1449, 1084, 1231, 310, 978, 1284, 1042, 591, 1277, 1198, 1001, 1428, 218, 1390, 684, 1057, 452, 697, 169, 1164, 1049, 148, 916, 207, 981, 236, 1358, 253, 1069, 818, 1360, 737, 826, 1318, 1396, 507, 793, 890, 350, 87, 572, 832, 219, 1073, 52, 1343, 1293, 1241, 581, 1115, 321, 693, 1061, 724, 1384, 738, 1117, 154, 324, 1325, 513, 239, 1092, 1113, 334, 111, 105, 943, 145, 79, 84, 584, 115, 122, 868, 206, 1356, 799, 1075, 933, 713, 1245, 845, 134, 69, 1063, 610, 1097, 1005, 780, 759, 387, 27, 732, 1106, 625, 736, 1118, 1168, 1254, 1251, 63, 531, 639, 1436, 628, 645, 892, 1212, 1418, 936, 394, 75, 770, 198, 631, 655, 349, 136, 446, 700, 1169, 331, 626, 292, 209, 441, 280, 1204, 615, 753, 613, 1158, 1055, 304, 1338, 586, 249, 117, 1301, 588, 451, 1295, 314, 957, 1146, 231, 612, 372, 340, 530, 1287, 200, 954, 637, 411, 1311, 1328, 466, 459, 418, 417, 1195, 558, 90, 774, 498, 1273, 887, 1330, 193, 283, 197, 775, 284, 222, 776, 820, 1128, 688, 904, 1187, 1202, 1185, 534, 309, 1170, 308, 990, 1377, 376, 143, 112, 1435, 730, 1351, 871, 254, 893, 1133, 311, 551, 409, 571, 605, 78, 1220, 559, 192, 237, 285, 653, 756, 1409, 970, 413, 883, 319, 326, 847, 412, 1238, 865, 1077, 787, 392, 1010, 619, 1234, 434, 801, 1213, 604, 436, 1000, 1011, 972, 1114, 1233, 1142, 1145, 816, 805, 1344, 42, 110, 577, 533, 1197, 1242, 1347, 1372, 599, 1210, 716, 203, 410, 1025, 1112, 594, 211, 137, 681, 1127, 1143, 1317, 1218, 1323, 155, 242, 66, 224, 1154, 165, 642, 953, 951, 467, 611, 663, 300, 1050, 464, 1200, 14, 510, 404, 823, 937, 500, 367, 989, 706, 565, 489, 268, 341, 1291, 1219, 991, 1147, 1316, 400, 1076, 882, 94, 942, 388, 401, 271, 889, 1362, 761, 40, 359, 1098, 782, 742, 1072, 779, 900, 1425, 380, 1305, 208, 47, 650, 529, 1267, 171, 317, 54, 109, 863, 804, 395, 465, 213, 167, 561, 138, 788, 1175, 550, 731, 765, 967, 1414, 1173, 1191, 25, 830, 1448, 1329, 34, 1286, 492, 168, 365, 95, 815, 408, 609, 1007, 1205, 1434, 184, 723, 955, 1018, 448, 593, 74, 277, 1312, 190, 178, 1102, 449, 1068, 260, 1269, 1422, 975, 1359, 381, 22, 73, 215, 454, 1247, 673, 1319, 41, 497, 1162, 505, 992, 1036, 157, 262, 974, 811, 1373, 1130, 330, 182, 1326, 908, 1079, 699, 1417, 267, 160, 402, 506, 235, 802, 323, 519, 255, 240, 383, 470, 216, 549, 477, 275, 366, 1177, 536, 1253, 687, 1032, 325, 556, 396, 1411, 538, 998, 895, 89, 88, 1444, 1280, 979, 33, 1432, 524, 602, 555, 1014, 421, 718, 1058, 644, 641, 484, 702, 1342, 836, 1366, 764, 1019, 1180, 855, 161, 1397, 662, 1194, 1426, 214, 279, 46, 99, 447, 709, 698, 1038, 807, 1243, 514, 1167, 1260, 1160, 722, 1302, 305, 1331, 1021, 186, 1339, 1416, 1369, 142, 316, 1095, 163, 353, 1211, 971, 564, 386, 1043, 647, 896, 9, 520, 1288, 1217, 652, 880, 17, 1132, 1201, 995, 146, 244, 438, 553, 1227, 921, 501, 6, 463, 547, 333, 585, 170, 537, 354, 634, 940, 949, 1441, 704, 1066, 1071, 703, 35, 672, 1174, 187, 987, 315, 835, 420, 1026, 320, 397, 1051, 878, 298, 1144, 797, 968, 521, 1228, 229, 278, 363, 752, 977, 678, 281, 739, 964, 705, 26, 809, 1104, 1209, 116, 1065, 1067, 852, 829, 119, 312, 85, 405, 840, 358, 772, 624, 665, 480, 576, 453, 44, 251, 336, 141, 771, 1365, 966, 842, 1030 };
        assertEquals(737, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case93() {
        int N = 1966;
        int K = 262;
        int[] info = { 1513, 588, 785, 1912, 520, 1100, 1424, 1345, 887, 1785, 144, 1285, 1936, 1718, 526, 741, 1864, 786, 43, 1638, 1458, 131, 701, 501, 676, 1713, 1680, 959, 1580, 736, 1715, 1655, 407, 1465, 495, 1736, 336, 1196, 394, 1114, 1110, 1595, 1518, 568, 200, 1688, 1389, 1553, 811, 308, 342, 1333, 800, 1267, 1658, 691, 138, 666, 1668, 1705, 1853, 1205, 534, 752, 1005, 850, 1485, 966, 998, 1710, 906, 1848, 497, 571, 1563, 1320, 1490, 1203, 490, 214, 658, 291, 56, 793, 345, 477, 1387, 45, 1138, 1188, 1879, 1296, 1040, 1489, 1133, 1942, 770, 1923, 1558, 1076, 975, 538, 1091, 1178, 929, 1763, 1486, 1362, 1720, 1393, 1470, 325, 1193, 329, 1612, 1364, 873, 806, 1503, 825, 698, 221, 518, 920, 1336, 633, 1872, 1893, 1295, 186, 849, 1439, 1232, 474, 686, 851, 1323, 651, 142, 1629, 1221, 1258, 579, 436, 286, 109, 374, 511, 1628, 475, 1905, 1360, 1440, 843, 523, 1105, 216, 693, 1406, 318, 246, 784, 190, 897, 700, 300, 610, 769, 1911, 544, 483, 1884, 1118, 1533, 272, 1540, 1801, 52, 963, 402, 158, 1784, 531, 275, 907, 1116, 898, 564, 820, 1068, 1102, 1676, 1816, 481, 779, 1248, 1437, 1528, 1777, 421, 1269, 507, 1698, 347, 1932, 1754, 1504, 485, 409, 20, 355, 1891, 967, 319, 1074, 1646, 1081, 637, 166, 70, 675, 925, 1827, 1400, 74, 1946, 1176, 1066, 726, 1662, 1189, 247, 238, 1275, 1883, 1459, 1678, 1061, 185, 595, 1070, 1455, 188, 244, 1590, 1850, 1182, 1842, 735, 1913, 782, 21, 1588, 310, 606, 1756, 1234, 1538, 1158, 703, 150, 1171, 530, 631, 758, 7, 1750, 1882, 1929, 1532, 1329, 413, 804, 405, 547, 1314, 79, 1514, 766, 717, 232, 266, 656, 1120, 1169, 922, 1506, 1792, 1542, 1512, 428, 1934, 1380, 1236, 1135, 1549, 696, 805, 969, 1215, 191, 1062, 1181, 1341, 183, 803, 1289, 1052, 1700, 1527, 1766, 330, 84, 1525, 1852, 1405, 432, 1191, 1834, 1761, 745, 62, 239, 1966, 311, 857, 1614, 1878, 1615, 1410, 869, 540, 465, 1660, 1930, 31, 1301, 228, 796, 1363, 1210, 743, 206, 227, 558, 1284, 1717, 1319, 1752, 38, 586, 991, 1783, 723, 44, 1020, 814, 189, 1461, 976, 1670, 962, 1307, 305, 826, 368, 1753, 509, 1682, 644, 1391, 426, 954, 1142, 1415, 1015, 13, 1098, 1435, 1146, 1358, 951, 1172, 435, 121, 1353, 1716, 104, 1006, 669, 946, 510, 1961, 1174, 1944, 834, 367, 1379, 557, 1637, 1334, 1253, 1072, 712, 85, 201, 1346, 1397, 1774, 1644, 641, 1089, 529, 853, 419, 1054, 1386, 598, 875, 338, 1703, 1633, 1965, 1640, 1441, 1292, 597, 687, 585, 169, 458, 730, 352, 999, 172, 1835, 1873, 1220, 393, 1649, 1208, 1021, 1795, 767, 808, 941, 482, 151, 582, 1277, 1192, 1122, 1368, 271, 886, 1620, 940, 671, 463, 1111, 570, 636, 748, 167, 559, 1343, 1817, 1012, 592, 854, 75, 695, 1791, 1382, 449, 302, 1308, 905, 1625, 1737, 1940, 1772, 1137, 1283, 1313, 1599, 1900, 181, 1617, 545, 1419, 1460, 1962, 8, 705, 1832, 699, 1768, 269, 1206, 241, 1051, 1908, 82, 1305, 462, 210, 229, 870, 1584, 230, 1787, 1204, 226, 563, 1101, 639, 737, 634, 893, 888, 670, 97, 1573, 1507, 290, 1607, 60, 492, 160, 1418, 660, 450, 1539, 566, 335, 1231, 964, 182, 903, 1033, 733, 23, 51, 839, 1623, 484, 953, 942, 971, 840, 835, 1004, 1019, 410, 1383, 1157, 1924, 94, 515, 794, 974, 1575, 1877, 48, 1436, 168, 1818, 685, 1274, 1413, 326, 16, 996, 1802, 866, 93, 119, 945, 836, 41, 522, 1630, 1572, 1648, 775, 889, 1058, 1443, 1694, 416, 1949, 1322, 1624, 778, 1136, 1243, 1767, 1365, 1340, 878, 471, 1016, 516, 902, 1294, 911, 1065, 203, 1162, 1030, 388, 1011, 1404, 488, 1250, 768, 164, 1288, 1035, 524, 1822, 787, 847, 1589, 1825, 1690, 1017, 1412, 1251, 828, 1918, 193, 1347, 1306, 293, 1805, 955, 113, 199, 1268, 1550, 1467, 740, 129, 68, 9, 874, 373, 192, 1920, 502, 1155, 225, 1082, 1557, 358, 623, 1427, 27, 1760, 135, 1709, 469, 956, 615, 127, 1661, 1372, 112, 1373, 177, 1945, 1344, 1651, 1679, 126, 1793, 1714, 147, 1408, 1027, 424, 98, 478, 1659, 1224, 397, 1095, 376, 114, 1748, 1355, 924, 630, 235, 1537, 742, 1721, 988, 605, 243, 136, 178, 629, 1739, 1702, 278, 819, 1632, 54, 1762, 101, 1047, 661, 1886, 724, 1240, 1708, 382, 1395, 611, 1271, 731, 149, 1150, 1611, 1697, 1915, 517, 614, 1466, 1036, 1064, 404, 1286, 1738, 157, 1960, 331, 599, 697, 993, 438, 63, 754 };
        assertEquals(975, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case94() {
        int N = 1140;
        int K = 667;
        int[] info = { 372, 854, 1132, 16, 311, 722, 562, 142, 270, 32, 510, 376, 1006, 717, 69, 738, 1052, 452, 417, 296, 848, 1051, 1056, 67, 349, 362, 306, 582, 920, 447, 222, 611, 740, 220, 851, 439, 1092, 695, 224, 23, 514, 215, 1009, 375, 414, 62, 632, 664, 385, 384, 750, 859, 993, 47, 1055, 291, 724, 365, 623, 1028, 1, 162, 789, 698, 161, 292, 749, 267, 755, 558, 780, 1131, 598, 619, 225, 665, 95, 193, 670, 128, 459, 472, 165, 877, 588, 592, 763, 167, 769, 283, 298, 293, 644, 549, 1023, 497, 268, 737, 1027, 228, 73, 265, 170, 894, 820, 177, 553, 547, 504, 629, 103, 995, 1098, 527, 403, 348, 262, 930, 787, 956, 436, 886, 27, 1049, 1107, 245, 760, 1032, 179, 427, 83, 898, 969, 335, 989, 1022, 743, 148, 1076, 962, 908, 621, 463, 625, 29, 981, 116, 60, 1125, 43, 662, 466, 355, 678, 435, 236, 307, 506, 721, 994, 669, 656, 959, 145, 804, 445, 1096, 390, 682, 164, 771, 1016, 774, 637, 778, 238, 373, 831, 1072, 442, 130, 934, 1135, 503, 584, 971, 773, 596, 289, 1091, 643, 21, 1057, 158, 1088, 654, 1137, 498, 194, 977, 109, 610, 478, 949, 601, 555, 38, 539, 1068, 464, 910, 1020, 467, 229, 272, 507, 1102, 84, 608, 1095, 764, 175, 399, 1024, 404, 488, 753, 341, 624, 857, 74, 18, 1005, 208, 627, 752, 689, 713, 712, 1053, 911, 86, 276, 902, 836, 816, 486, 590, 1040, 880, 152, 569, 779, 1138, 477, 1133, 586, 561, 687, 638, 121, 347, 138, 946, 146, 919, 777, 847, 1021, 1025, 835, 100, 628, 125, 881, 709, 487, 288, 980, 198, 551, 597, 327, 714, 567, 991, 530, 795, 748, 703, 756, 850, 761, 499, 958, 433, 904, 710, 53, 577, 471, 153, 864, 537, 1110, 559, 550, 844, 1081, 526, 57, 338, 817, 951, 163, 72, 641, 680, 942, 180, 529, 906, 832, 575, 37, 1014, 309, 143, 935, 556, 746, 1000, 718, 247, 20, 889, 1054, 762, 212, 360, 379, 1134, 405, 954, 1043, 907, 421, 133, 785, 772, 939, 997, 781, 594, 325, 697, 211, 92, 172, 48, 107, 865, 473, 305, 725, 992, 1018, 681, 70, 957, 843, 468, 251, 1060, 140, 647, 1118, 603, 719, 861, 521, 541, 123, 249, 1062, 578, 998, 216, 932, 476, 1075, 257, 150, 635, 866, 34, 963, 50, 465, 453, 97, 929, 300, 815, 316, 425, 918, 1012, 583, 1086, 830, 985, 331, 520, 519, 337, 119, 61, 633, 334, 415, 371, 728, 882, 1087, 102, 340, 204, 19, 874, 563, 420, 525, 493, 868, 342, 408, 260, 359, 461, 15, 974, 101, 81, 250, 829, 872, 899, 64, 364, 76, 509, 870, 7, 1058, 508, 1115, 909, 1127, 406, 1109, 1099, 517, 1111, 984, 501, 402, 186, 1066, 205, 650, 814, 120, 281, 274, 871, 852, 888, 960, 457, 1101, 176, 1077, 931, 1038, 13, 961, 256, 98, 912, 392, 878, 317, 810, 1093, 181, 351, 684, 89, 1033, 110, 290, 671, 166, 727, 168, 8, 1045, 607, 1041, 1036, 444, 41, 823, 297, 775, 137, 124, 495, 862, 686, 766, 416, 708, 134, 716, 269, 169, 944, 808, 266, 248, 242, 395, 46, 1003, 237, 324, 91, 700, 496, 159, 798, 1050, 279, 195, 535, 491, 200 };
        assertEquals(574, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case95() {
        int N = 1806;
        int K = 1686;
        int[] info = { 1733, 1578, 196, 1513, 286, 395, 1197, 1610, 750, 1294, 1046, 1613, 1234, 1087, 706 };
        assertEquals(963, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case96() {
        int N = 1182;
        int K = 89;
        int[] info = { 997, 632, 386, 206, 501, 595, 286, 330, 569, 420, 1094, 847, 45, 408, 18, 883, 887, 1099, 1042, 335, 844, 587, 873, 1123, 152, 1095, 422, 747, 6, 594, 885, 546, 455, 801, 3, 1007, 1133, 1020, 748, 34, 601, 431, 845, 1039, 129, 530, 769, 973, 209, 578, 952, 259, 715, 41, 560, 681, 1034, 1066, 1138, 802, 170, 1119, 171, 643, 419, 522, 213, 437, 383, 897, 772, 771, 515, 623, 120, 224, 691, 161, 248, 987, 242, 73, 307, 142, 539, 1154, 183, 825, 984, 412, 72, 998, 290, 375, 1107, 478, 895, 932, 619, 1160, 970, 864, 673, 85, 798, 580, 356, 211, 773, 608, 743, 697, 160, 212, 392, 274, 1046, 251, 878, 965, 84, 1017, 657, 567, 132, 906, 97, 544, 318, 777, 64, 660, 9, 200, 387, 444, 396, 836, 271, 826, 1158, 485, 909, 59, 288, 433, 945, 188, 808, 617, 994, 1177, 688, 1090, 285, 301, 162, 526, 384, 1148, 535, 241, 908, 776, 787, 368, 582, 727, 961, 720, 157, 63, 78, 591, 116, 725, 186, 487, 472, 365, 683, 1068, 453, 1014, 1071, 82, 184, 800, 762, 621, 792, 306, 198, 27, 928, 166, 199, 790, 916, 854, 863, 163, 470, 789, 990, 295, 751, 629, 988, 654, 566, 933, 357, 40, 645, 31, 1015, 136, 708, 953, 898, 99, 677, 674, 868, 380, 542, 862, 158, 71, 67, 797, 1121, 334, 60, 414, 914, 1091, 1096, 1082, 626, 390, 842, 938, 1035, 1074, 439, 1114, 884, 1129, 723, 925, 1108, 128, 276, 131, 706, 553, 1126, 642, 552, 395, 537, 1, 975, 153, 350 };
        assertEquals(583, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case97() {
        int N = 1920;
        int K = 22;
        int[] info = { 432, 1062, 910, 1249, 1296, 1487, 933, 1417, 156, 1619, 31, 578, 1834, 1747, 1516, 913, 1580, 144, 480, 692, 843, 962, 351, 158, 336, 263, 1102, 1466, 1324, 678, 867, 1293, 13, 317, 1416, 598, 1757, 771, 84, 727, 1437, 278, 1853, 1764, 886, 1386, 1348, 1520, 1597, 731, 1852, 522, 1438, 1578, 970, 706, 1613, 1688, 852, 1431, 192, 215, 1871, 1710, 460, 1600, 1155, 803, 669, 301, 593, 1151, 138, 1116, 1654, 188, 1536, 1171, 1596, 875, 941, 418, 749, 1007, 429, 1181, 1798, 122, 15, 1622, 1781, 1667, 148, 1168, 730, 362, 1647, 1209, 1553, 1887, 1663, 1383, 1076, 1502, 686, 1453, 224, 1849, 62, 750, 1422, 1034, 1666, 1610, 1858, 33, 681, 1736, 1463, 1909, 281, 1113, 914, 818, 322, 1411, 570, 992, 786, 1290, 856, 1193, 1413, 180, 372, 1861, 10, 1739, 937, 1460, 424, 1681, 332, 1641, 1005, 1388, 1267, 123, 1263, 385, 1125, 5, 8, 1645, 1056, 1884, 347, 486, 1230, 35, 1207, 1533, 1745, 359, 1274, 1545, 161, 146, 1571, 571, 472, 1542, 207, 1818, 269, 766, 674, 295, 1051, 450, 125, 552, 1127, 193, 1475, 1190, 714, 1133, 1492, 422, 1435, 1313, 1561, 1103, 1592, 1111, 840, 500, 576, 1053, 53, 1361, 746, 1260, 296, 1250, 1703, 400, 1731, 1716, 1568, 634, 1693, 1839, 1717, 1763, 242, 81, 979, 1070, 1059, 1786, 457, 549, 942, 512, 1038, 59, 339, 1895, 1407, 448, 851, 1246, 922, 1910, 1759, 1281, 1389, 321, 1576, 896, 179, 632, 1518, 43, 255, 142, 1, 1002, 793, 1037, 893, 235, 857, 1114, 399, 763, 1030, 882, 473, 1761, 285, 240, 529, 1376, 812, 1656, 1322, 1903, 1156, 1245, 1092, 431, 169, 1344, 597, 1633, 87, 888, 1196, 76, 625, 524, 205, 713, 484, 755, 1191, 903, 862, 401, 503, 760, 777, 1918, 4, 663, 1387, 1558, 995, 98, 183, 1292, 1726, 77, 908, 380, 1888, 683, 1444, 528, 29, 1075, 504, 231, 1019, 526, 68, 1870, 1302, 1140, 112, 449, 1540, 1638, 741, 572, 226, 1530, 1877, 726, 490, 1257, 660, 1118, 1091, 1607, 705, 1148, 1101, 1790, 1327, 458, 1441, 912, 1128, 1010, 1057, 670, 1040, 1052, 416, 1268, 1336, 986, 246, 405, 14, 898, 177, 298, 1698, 12, 963, 343, 1384, 354, 1585, 546, 1351, 1173, 54, 1539, 1810, 1499, 413, 1660, 1705, 879, 1204, 50, 293, 764, 1778, 1234, 1495, 1169, 716, 815, 410, 1881, 601, 1480, 396, 1180, 829, 934, 930, 502, 664, 1366, 773, 1415, 1029, 1264, 1501, 446, 1635, 454, 42, 1201, 779, 831, 507, 1665, 1406, 881, 1320, 1332, 1719, 1673, 323, 615, 1077, 116, 1550, 387, 280, 1609, 1500, 673, 1390, 145, 734, 1795, 809, 826, 1874, 113, 621, 305, 1338, 945, 1615, 1339, 1310, 583, 1700, 990, 1813, 889, 561, 832, 551, 1208, 776, 841, 1182, 1572, 1722, 1273, 386, 1447, 659, 1772, 75, 100, 1714, 869, 88, 1801, 331, 1367, 1831, 742, 1291, 1543, 1661, 1135, 1642, 1241, 534, 1523, 476, 428, 227, 790, 901, 1418, 724, 704, 747, 1456, 918, 30, 961, 718, 1862, 953, 539, 1566, 1359, 1769, 1848, 1556, 229, 1132, 292, 237, 383, 1082, 975, 637, 304, 374, 1511, 866, 653, 373, 426, 382, 1100, 744, 1728, 1307, 1025, 708, 1123, 106, 702, 787, 1697, 1551, 935, 1689, 1519, 55, 535, 437, 592, 989, 1598, 712, 533, 837, 99, 1549, 1668, 1804, 464, 1898, 1469, 1136, 596, 1063, 1217, 791, 1223, 220, 649, 944, 1212, 1278, 324, 987, 320, 97, 273, 1084, 998, 1742, 1238, 357, 11, 1424, 830, 468, 1784, 1830, 355, 691, 1805, 265, 1486, 769, 303, 1832, 1374, 49, 1064, 167, 414, 1864, 406, 74, 736, 218, 957, 58, 800, 510, 505, 1371, 140, 1139, 1086, 493, 1349, 756, 966, 291, 1760, 754, 1899, 1651, 1210, 1449, 1824, 783, 115, 796, 1734, 1727, 1811, 1461, 1259, 627, 230, 1471, 1591, 1508, 648, 1857, 920, 1919, 1792, 709, 104, 241, 602, 1840, 1318, 90, 1720, 972, 1385, 210, 553, 254, 48, 623, 83, 1629, 984, 1819, 950, 133, 1680, 190, 515, 1631, 628, 1752, 477, 1060, 1682, 199, 952, 1751, 1108, 1285, 108, 251, 402, 330, 1779, 1236, 1297, 82, 647, 983, 147, 1612, 1345, 1162, 1785, 1397, 574, 1525, 1354, 636, 605, 482, 1694, 1362, 838, 1767, 276, 816, 892, 37, 1646, 1917, 1816, 1904, 676, 1194, 1841, 509, 635, 864, 931, 997, 1827, 805, 1314, 1886, 633, 353, 860, 655, 1046, 389, 613, 684, 926, 162, 499, 976, 1087, 1776, 1709, 170, 182, 1126, 1032, 1146, 1350, 590, 1822, 1289, 153, 874, 257, 1149, 591, 1564, 1232, 1213, 1618, 884, 821, 131, 1621, 833, 1147, 1614, 1850, 1498, 1639, 848, 1184, 166 };
        assertEquals(895, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case98() {
        int N = 1777;
        int K = 946;
        int[] info = { 497, 1587, 326, 1285, 701, 1498, 631, 350, 782, 1081, 411, 1501, 367, 325, 464, 751, 95, 1765, 215, 999, 405, 622, 68, 960, 278, 1273, 768, 448, 1662, 1389, 883, 521, 427, 1610, 1776, 202, 1269, 289, 1437, 613, 1591, 1045, 1255, 413, 1707, 679, 612, 1185, 929, 11, 951, 282, 1173, 1528, 1755, 44, 1021, 220, 117, 1759, 1065, 873, 93, 692, 420, 1179, 1744, 548, 991, 38, 1392, 1513, 337, 1459, 34, 375, 717, 310, 389, 1388, 2, 433, 1192, 508, 674, 97, 1039, 385, 644, 1767, 643, 1430, 1199, 1379, 1260, 1773, 1520, 388, 460, 1370, 695, 1742, 94, 1535, 1180, 1127, 1219, 1451, 441, 1721, 905, 16, 1011, 683, 1249, 673, 544, 1681, 397, 974, 1438, 576, 395, 1287, 330, 1209, 789, 332, 884, 842, 915, 1649, 1100, 982, 1000, 82, 468, 1281, 1737, 436, 1217, 214, 1424, 1129, 26, 340, 266, 794, 260 };
        assertEquals(939, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case99() {
        int N = 1128;
        int K = 432;
        int[] info = { 1115, 323, 784, 491, 240, 957, 19, 20, 798, 842, 359, 963, 1058, 60, 603, 791, 476, 617, 167, 218, 535, 819, 1124, 789, 524, 287, 958, 361, 928, 849, 449, 43, 389, 955, 140, 551, 191, 860, 973, 642, 325, 850, 806, 872, 531, 988, 839, 503, 522, 1046, 324, 94, 572, 946, 131, 171, 56, 638, 855, 904, 205, 526, 274, 822, 330, 665, 670, 576, 513, 548, 987, 700, 123, 349, 977, 639, 778, 1003, 310, 845, 12, 578, 610, 835, 318, 759, 68, 393, 1078, 936, 795, 999, 505, 532, 440, 442, 1028, 13, 980, 575, 647, 741, 1071, 141, 740, 1053, 942, 538, 699, 997, 406, 1083, 938, 707, 1092 };
        assertEquals(625, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case100() {
        int N = 1544;
        int K = 676;
        int[] info = { 215, 822, 906, 712, 1399, 43, 70, 345, 1140, 221, 1078, 1291, 990, 631, 1297, 709, 1281, 232, 801, 1540, 163, 267, 1247, 803, 564, 488, 861, 828, 888, 1153, 598, 624, 804, 33, 223, 453, 1232, 459, 1490, 1039, 386, 456, 1347, 1342, 211, 492, 394, 1453, 909, 1102, 732, 521, 93, 1190, 374, 954, 1401, 212, 1022, 1458, 1221, 1531, 1290, 1143, 1360, 1471, 137, 678, 66, 50, 725, 132, 515, 1311, 151, 1220, 1018, 1298, 1112, 731, 1266, 1257, 161, 1519, 407, 1463, 569, 1172, 1505, 1019, 1244, 874, 542, 814, 1174, 1402, 1448, 754, 1231, 1069, 1496, 544, 1098, 426, 1096, 929, 1199, 361, 980, 596, 1209, 688, 1427, 136, 333, 54, 604, 44, 726, 539, 401, 891, 883, 812, 1273, 1412, 455, 901, 531, 305, 1383, 999, 203, 380, 766, 226, 885, 48, 717, 94, 320, 730, 131, 248, 543, 960, 940, 540, 633, 620, 611, 427, 430, 277, 1288, 1159, 618, 1367, 1107, 535, 703, 185, 369, 1055, 428, 415, 169, 879, 1442, 254, 1246, 1404, 705, 560, 460, 379, 1179, 1191, 412, 745, 779, 1436, 584, 200, 85, 541, 63, 170, 1170, 1154, 216, 1228, 1355, 68, 884, 1393, 1488, 26, 518, 890, 943, 205, 1225, 296, 748, 1051, 930, 1486, 13, 1537, 45, 1251, 28, 621, 436, 383, 1204, 122, 289, 1477, 258, 836, 399, 617, 207, 691, 204, 1278, 1080, 1027, 435, 826, 1037, 952, 1180, 330, 337, 1233, 273, 563, 628, 1348, 715, 449, 854, 213, 1542, 425, 1503, 71, 478, 768, 354, 1084, 638, 863, 877, 19, 605, 126, 1418, 276, 264, 817, 1426, 775, 1031, 1520, 672, 608, 450, 721, 1073, 1114, 1532, 935, 987, 467, 452, 253, 1123 };
        assertEquals(868, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case101() {
        int N = 1935;
        int K = 32;
        int[] info = { 1634, 12, 1303, 1354, 494, 1154, 1906, 1134, 935, 1396, 423, 657, 1739, 597, 955, 660, 859, 669, 744, 1711, 29, 480, 1619, 71, 1126, 1334, 518, 505, 1574, 511, 1885, 995, 1440, 1367, 639, 384, 173, 40, 1137, 1113, 623, 1578, 1046, 719, 1684, 1087, 964, 364, 705, 1744, 22, 313, 1514, 211, 1420, 1453, 806, 1153, 391, 331, 1335, 1450, 832, 924, 1282, 831, 288, 193, 588, 1839, 36, 1091, 1114, 1799, 328, 1924, 1636, 1073, 636, 1186, 432, 367, 1403, 1623, 736, 14, 1537, 525, 791, 1121, 1032, 1436, 68, 1918, 1676, 1016, 57, 878, 1215, 439, 1546, 690, 1462, 1097, 400, 836, 706, 1803, 1386, 843, 679, 1625, 583, 1713, 1167, 1704, 1669, 1015, 617, 640, 889, 176, 723, 1366, 451, 1505, 409, 939, 91, 1717, 724, 1779, 1398, 1587, 178, 594, 64, 1681, 503, 1368, 1861, 1549, 1766, 15, 410, 413, 311, 1671, 1773, 783, 590, 759, 1413, 134, 347, 1029, 1141, 1041, 1418, 757, 1201, 867, 915, 536, 53, 665, 813, 95, 102, 1833, 559, 1490, 1726, 1120, 1001, 1068, 928, 1094, 1513, 651, 549, 988, 957, 343, 1901, 942, 981, 460, 1775, 458, 1843, 1361, 856, 625, 1388, 1889, 1788, 901, 59, 1583, 180, 829, 811, 1701, 635, 1228, 857, 1754, 228, 1243, 1035, 1237, 1532, 1653, 1675, 72, 1488, 468, 1322, 1062, 210, 11, 1469, 1904, 186, 1027, 1777, 290, 891, 781, 1336, 1475, 433, 267, 1694, 1248, 1055, 285, 1690, 566, 44, 1611, 1257, 1753, 293, 882, 1784, 1603, 1572, 1851, 771, 1795, 1836, 356, 1563, 94, 1060, 1290, 19, 851, 1856, 1341, 945, 726, 375, 205, 1256, 1834, 534, 117, 1631, 1581, 265, 869, 300, 1601, 282, 202, 39, 349, 919, 1365, 517, 399, 1372, 1014, 589, 1781, 233, 671, 999, 1255, 1343, 1921, 807, 1820, 362, 295, 1270, 1276, 1263, 1159, 1103, 1536, 492, 10, 1204, 1883, 1316, 1615, 216, 169, 632, 462, 698, 689, 1642, 1710, 424, 584, 1520, 539, 1360, 229, 1382, 232, 1, 1021, 1022, 1736, 90, 1406, 887, 1405, 1495, 1145, 243, 107, 842, 163, 5, 649, 1894, 683, 1935, 742, 960, 766, 1264, 506, 976, 378, 1718, 159, 868, 824, 1463, 1599, 543, 1277, 17, 1534, 1566, 4, 595, 319, 997, 425, 1383, 1374, 704, 315, 1643, 1013, 968, 989, 952, 777, 1311, 542, 1312, 226, 1349, 67, 921, 604, 1376, 1048, 1227, 900, 1790, 883, 1714, 1830, 699, 943, 1841, 1725, 798, 1692, 1867, 667, 923, 1579, 445, 562, 1748, 256, 752, 746, 1135, 1538, 1506, 1641, 396, 1763, 1421, 1911, 877, 318, 1165, 519, 187, 1385, 1872, 739, 1232, 1452, 1348, 656, 780, 1078, 1825, 1441, 61, 1163, 1047, 970, 1552, 1093, 119, 56, 1528, 1902, 1915, 716, 747, 419, 1734, 1211, 1489, 1547, 1654, 1278, 508, 1707, 436, 220, 365, 136, 858, 1457, 1539, 1160, 949, 309, 937, 1162, 1333, 894, 814, 333, 1268, 1205, 598, 1602, 713, 1545, 909, 1674, 1637, 116, 1092, 1609, 1387, 1931, 1099, 1571, 109, 174, 1554, 821, 702, 1771, 1871, 1930, 1425, 430, 1896, 1808, 222, 264, 355, 1767, 1800, 1101, 926, 1655, 407, 1582, 1174, 755, 733, 1660, 237, 194, 1187, 1414, 127, 1650, 1604, 260, 1832, 1430, 1314, 469, 1026, 557, 980, 422, 1649, 1298, 235, 1402, 1246, 1132, 142, 85, 593, 1685, 1194, 63, 1460, 1588, 495, 903, 1339, 947, 258, 1614, 1473, 1595, 1025, 104, 192, 386, 1272, 1897, 463, 833, 1657, 1380, 685, 1639, 1340, 277, 1695, 1226, 368, 1164, 1920, 786, 551, 620, 762, 570, 1806, 1845, 688, 1216, 269, 334, 1149, 1306, 452, 65, 1064, 484, 181, 607, 1218, 325, 944, 1903, 1542, 470, 1401, 314, 1080, 1125, 922, 1177, 296, 975, 1020, 1730, 1774, 538, 540, 1059, 1476, 678, 1484, 668, 1323, 297, 840, 526, 145, 101, 486, 672, 466, 1474, 1147, 1667, 1464, 1325, 655, 1057, 610, 681, 351, 1500, 1529, 1865, 1327, 1297, 13, 246, 478, 1493, 524, 996, 1438, 490, 1112, 62, 892, 1802, 1570, 1757, 575, 18, 979, 1300, 161, 1079, 34, 1708, 785, 1138, 1888, 1456, 738, 248, 1627, 1721, 239, 84, 185, 634, 330, 854, 984, 1199, 172, 1837, 1817, 504, 1515, 666, 404, 722, 454, 1086, 1077, 1569, 1071, 860, 465, 473, 1501, 302, 491, 1621, 453, 823, 342, 447, 52, 1109, 965, 1862, 397, 774, 530, 1036, 545, 393, 1656, 1423, 502, 819, 1925, 1067, 529, 1269, 758, 1502, 125, 322, 973, 1176, 195, 1455, 55 };
        assertEquals(923, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case102() {
        int N = 1351;
        int K = 326;
        int[] info = { 274, 1293, 635, 1047, 1199, 294, 718, 624, 778, 1345, 822, 1138, 952, 736, 558, 652, 984, 67 };
        assertEquals(699, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case103() {
        int N = 1301;
        int K = 372;
        int[] info = { 967, 442, 228, 316, 633, 1199, 303, 846, 39, 1057, 1050, 962, 518, 992, 1187, 646, 1228, 719, 531, 1217, 961, 185, 1218, 46, 594, 261, 1031, 1085, 387, 647, 1164, 424, 1169, 109, 1222, 663, 810, 285, 392, 611, 338, 652, 848, 38, 1024, 471, 780, 408, 128, 514, 63, 456, 1230, 53, 710, 183, 1224, 369, 882, 790, 712, 849, 466, 222, 938, 627, 580, 277, 727, 164, 482, 135, 399, 616, 1227, 550, 1212, 246, 1046, 778, 1124, 249, 889, 275, 955, 476, 3, 838, 472, 1029, 722, 1038, 916, 725, 718, 337, 959, 530, 876, 1097, 1127, 804, 532, 840, 1152, 395, 179, 489, 746, 1276, 648, 683, 1288, 1081, 563, 213, 468, 54, 1242, 946, 658, 1012, 937, 290, 146, 965, 281, 910, 834, 942, 1223, 529, 1220, 1181, 1250, 575, 507, 407, 61, 1256, 16, 1282, 701, 798, 208, 964, 425, 936, 11, 526, 1249, 1248, 1286, 1003, 491, 12, 1268, 592, 602, 738, 520, 852, 495, 1261, 33, 819, 671, 81, 169, 32, 475, 932, 326, 1264, 460, 1045, 108, 590, 1021, 156, 124, 510, 1002, 220, 1056, 995, 773, 314, 1185, 294, 319, 503, 1052, 649, 7, 433, 1235, 29, 474, 1090, 949, 388, 138, 464, 1221, 731, 335, 453, 739, 5, 814, 1132, 166, 1141, 726, 791, 449, 1112, 1018, 1225, 685, 494, 1236, 601, 100, 231, 1279, 552, 309, 110, 600, 282, 565, 659, 1054, 1204, 1032, 93, 776, 1247, 879, 216, 355, 295, 861, 675, 866, 584, 1030, 15, 895, 751, 922, 1172, 233, 574, 132, 188, 313, 1260, 375, 394, 1231, 67, 328, 301, 702, 951, 1160, 1289, 462, 788, 252, 160, 65, 371, 533, 1178, 150, 134, 1118, 1111, 1096, 871, 430, 311, 1119, 698, 439, 1086, 148, 320, 43, 273, 78, 855, 269, 356, 1143, 2, 527, 564, 1008, 1197, 478, 694, 1290, 748, 362, 957, 792, 268, 1151, 98, 944, 431, 429, 673, 254, 1158, 403, 421, 1105, 612, 30, 1246, 384, 613, 19, 928, 953, 121, 1122, 585, 118, 1134, 96, 588, 1238, 793, 744, 1123, 666, 162, 1138, 769, 69, 1071, 1269, 66, 1244, 640, 436, 194, 820, 274, 59, 817, 1001, 434, 461, 349, 1219, 1080, 736, 717, 1136, 1208, 432, 117, 279, 1121, 234, 364, 1094, 83, 1027, 210, 976, 825, 42, 1047, 815, 90, 102, 116, 1251, 1101, 1028, 77, 1233, 152, 84, 498, 101, 1091, 1026, 589, 358, 515, 1296, 699, 896, 1017, 373, 284, 672, 321, 229, 935, 883, 862, 975, 241, 908, 339, 149, 211, 18, 638, 452, 1263, 874, 823, 1201, 1099, 716, 771, 1280, 129, 940, 9, 642, 200, 1191, 396, 217, 270, 255, 841, 1189, 963, 40, 561, 242, 690, 272, 952, 914, 1076, 950, 147, 626, 709, 854, 578, 386, 336, 1146, 1274, 1202, 1273, 1195, 622, 1126, 543, 300, 189, 331, 860, 617, 393, 835, 168, 1025, 743, 106, 126, 966, 991, 864, 960, 984, 92, 629, 836, 525, 785, 419, 1102, 826, 343, 797, 641, 1265, 332, 1270, 317, 89, 87, 422, 900, 676, 923, 801, 742, 691, 1148, 405, 1294, 161, 899, 488, 91, 480, 202, 973, 982, 21, 917, 23, 863, 631, 144, 389, 875, 644, 608, 996, 1013, 1034, 843, 1062, 502, 763, 1226, 368, 869, 761, 524, 379, 868, 85, 654, 22, 688, 178, 980, 570, 467, 901, 1060, 198, 667, 747, 558, 597, 36, 48, 1293, 44, 681, 224, 237, 140, 141, 929, 521, 360, 1037 };
        assertEquals(652, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case104() {
        int N = 1750;
        int K = 849;
        int[] info = { 1030, 1007, 1164, 1288, 147, 924, 607, 124, 992, 324, 633, 886, 645, 77, 1253, 1166, 414, 306, 326, 1545, 120, 103, 297, 1467, 1455, 743, 787, 1346, 1525, 317, 948, 693, 481, 385, 947, 1738, 640, 953, 2, 1382, 170, 410, 247, 1634, 1445, 62, 271, 219, 1356, 670, 344, 198, 457, 383, 677, 474, 577, 494, 286, 1181, 896, 506, 714, 1218, 1423, 155, 259, 510, 1509, 1583, 883, 264, 897, 1714, 1351, 1726, 49, 1666, 1586, 573, 130, 148, 864, 486, 1364, 187, 1032, 1086, 1061, 938, 1098, 596, 931, 749, 183, 713, 1091, 950, 377, 1589, 487, 1097, 94, 313, 128, 680, 375, 366, 371, 1595, 969, 1339, 658, 930, 473, 1252, 683, 238, 498, 1542, 1363, 273, 525, 175, 1748, 173, 804, 1402, 585, 623, 1122, 1562, 428, 1731, 638, 405, 629, 1662, 1175, 1178, 1539, 406, 1233, 1429, 1038, 11, 1691, 860, 1126, 1028, 381, 651, 138, 725, 1322, 1004, 663, 908, 964, 361, 1082, 648, 1679, 176, 1541, 1015, 584, 1625, 1023, 511, 1410, 64, 131, 715, 1394, 1297, 664, 488, 480, 516, 484, 979, 1615, 956, 878, 1744, 1248, 1563, 500, 1746, 935, 452, 6, 109, 681, 1439, 1698, 579, 875, 1219, 1690, 1065, 404, 616, 877, 1657, 1076, 1334, 988, 705, 307, 985, 177, 1417, 66, 1087, 359, 555, 1448, 1502, 1468, 450, 512, 161, 1222, 119, 1548, 1624, 1500, 1632, 216, 1169, 557, 1532, 1182, 707, 1689, 1104, 1713, 1171, 87, 576, 1656, 1740, 197, 390, 759, 552, 1292, 1174, 533, 1165, 1270, 160, 1310, 973, 1213, 1676, 593, 135, 1096, 751, 1146, 1520, 599, 1084, 75, 1047, 1072, 1269, 1271, 1390, 189, 298, 1262, 1062, 435, 1088, 737, 308, 1159, 24, 1737, 1016, 1557, 507, 1715, 432, 1560, 1153, 1263, 1152, 1081, 305, 1506, 1298, 1045, 1680, 1428, 508, 803, 1148, 863, 1675, 26, 547, 1644, 41, 739, 1220, 534, 1348, 5, 1323, 1318, 275, 1129, 388, 966, 539, 919, 35, 621, 1151, 1362, 1490, 1594, 605, 1671, 647, 1255, 898, 212, 1221, 1361, 111, 1324, 719, 346, 1053, 15, 1200, 459, 1319, 1044, 378, 1064, 928, 866, 468, 531, 157, 619, 1333, 196, 712, 1173, 1232, 441, 1199, 873, 624, 1119, 521, 1343, 735, 1031, 97, 1681, 1485, 496, 686, 1042, 202, 1433, 236, 51, 1434, 1093, 442, 1708, 349, 560, 1537, 1492, 32, 1131, 105, 100, 22, 1115, 665, 1330, 558, 1329, 1302, 235, 42, 1338, 329, 1089, 182, 1229, 436, 1712, 144, 598, 1670, 915, 1327, 1261, 1408, 1458, 1147, 499, 1513, 524, 1450, 747, 769, 91, 118, 614, 774, 1179, 279, 1719, 411, 726, 1106, 223, 701, 1522, 1546, 802, 639, 455, 367, 1565, 139, 790, 662, 1406, 1600, 1136, 458, 1523, 1592, 984, 1389, 1652, 1478, 895, 1158, 300, 1358, 1533, 1306, 1304, 1258, 1462, 597, 652, 1207, 1574, 580, 1693, 47, 530, 162, 763, 253, 550, 257, 1391, 438, 1732, 270, 1706, 549, 752, 1449, 909, 151, 1006, 1374, 571, 1160, 1008, 627, 581, 1521, 654, 1215, 14, 971, 688, 141, 609, 1674, 1725, 1436, 478, 1162, 1127, 669, 942, 1650, 1124, 61, 1265, 722, 564, 1117, 471, 336, 389, 587, 179, 1070, 1622, 1068, 717, 1484, 1648, 243, 795, 745, 30, 777, 1110, 509, 1642, 208, 376, 1635, 1277, 1192, 666, 84, 955, 1376, 140, 1464, 1369, 893, 756, 650, 201, 1155, 337, 430, 1413, 1587, 1527, 53, 981, 695, 1116, 60, 172, 1384, 1664, 469, 171, 1628, 79, 314, 615, 982, 528, 350, 766, 748, 698, 1707, 1649, 1682, 1529, 1504, 355, 27, 193, 1421, 57, 696, 240, 67, 1368, 1414, 1639, 402, 315, 1036, 1507, 974, 673, 1444, 319, 771, 278, 1736, 143, 354, 420, 538, 1128, 920, 1697, 1743, 277, 45, 68, 255, 262, 1344, 1300, 1524, 347, 150, 601, 649, 1056, 788, 1470, 732, 332, 1686, 1341, 1576, 1695, 1278, 194, 1075, 1108, 1373, 543, 1489, 1000, 149, 975, 1742, 444, 1543, 422, 50, 791, 793, 206, 1134, 204, 296, 25, 153, 1405, 594, 548, 968, 419, 1420, 899, 764, 102, 1074, 608, 729, 40, 1471, 630, 1630, 590, 1345, 65, 697, 356, 874, 1729, 374, 48, 1734, 199, 667, 567, 1231, 734, 1499, 1638, 1735, 1475, 1658, 1606, 869, 1684, 532, 394, 205, 418, 1034, 740, 1677, 989, 17, 628, 28, 98 };
        assertEquals(900, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case105() {
        int N = 1689;
        int K = 351;
        int[] info = { 1351, 144, 57, 42, 652, 484, 1212, 1421, 901, 1214, 23, 626, 470, 879, 498, 1340, 365, 1369, 881, 54, 113, 124, 660, 44, 290, 1158, 576, 958, 976, 1218, 1679, 960, 1540, 1488, 1502, 1453, 1673, 447, 1428, 147, 1231, 128, 765, 908, 1255, 181, 1544, 1172, 1097, 912, 962, 616, 1563, 486, 1169, 1595, 1592, 471, 1319, 488, 634, 1233, 1352, 973, 723, 1537, 80, 1398, 689, 296, 177, 884, 265, 1295, 161, 505, 1011, 659, 967, 418, 904, 690, 1437, 932, 222, 1249, 1490, 768, 49, 617, 629, 1256, 75, 1054, 392, 388, 270, 684, 922, 1498, 156, 254, 542, 487, 451, 643, 1074, 136, 722, 1683, 804, 1432, 685, 1335, 725, 1370, 557, 1665, 306, 1659, 834, 3, 402, 489, 1065, 1000, 1479, 697, 1386, 1420, 1646, 1012, 483, 399, 249, 695, 844, 1208, 204, 88, 175, 1512, 1671, 1622, 1277, 897, 1416, 582, 1577, 79, 905, 746, 750, 380, 1373, 1013, 1299, 304, 508, 1650, 1363, 280, 359, 1472, 1144, 805, 199, 1481, 1200, 1021, 427, 819, 494, 775, 554, 667, 143, 438, 245, 134, 1418, 769, 1483, 977, 785, 227, 414, 1649, 766, 683, 698, 1062, 376, 43, 194, 1424, 1575, 302, 1259, 1647, 1282, 917, 266, 894, 312, 949, 532, 1621, 551, 774, 422, 1125, 875, 1349, 1088, 1092, 1133, 1550, 446, 277, 1046, 307, 1135, 303, 1293, 366, 674, 1221, 500, 533, 946, 699, 673, 1477, 450, 1494, 1332, 619, 1140, 314, 1467, 808, 1302, 462, 1505, 1286, 439, 1534, 1272, 1458, 1292, 1655, 915, 1308, 5, 1377, 81, 125, 1526, 1545, 1441, 1470, 710, 584, 1030, 1491, 41, 162, 786, 1390, 931, 864, 1047, 89, 813, 169, 716, 286, 106, 1506, 47, 203, 111, 675, 839, 737, 1520, 694, 961, 1131, 148, 930, 1290, 1594, 1043, 1495, 1222, 731, 621, 129, 1137, 332, 1316, 687, 198, 66, 240, 1168, 1601, 1006, 692, 31, 969, 833, 1527, 187, 436, 46, 1517, 83, 407, 461, 1080, 110, 382, 1042, 233, 253, 1044, 419, 910, 506, 1376, 866, 180, 70, 475 };
        assertEquals(851, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case106() {
        int N = 2000;
        int K = 2;
        int[] info = { 982, 694, 972, 1935, 1241, 583, 1010, 1012, 799, 1763, 1001, 405, 1108, 865, 1501, 958, 1019, 1315, 218, 396, 235, 308, 970, 1899, 96, 1202, 93, 675, 1806, 1603, 1662, 297, 575, 1522, 1771, 550, 1649, 554, 1997, 122, 1914, 1098, 423, 1254, 835, 1025, 1699, 1693, 924, 964, 40, 60, 1965, 999, 716, 794, 839, 1601, 1391, 471, 1812, 13, 1972, 1761, 1516, 1017 };
        assertEquals(986, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case107() {
        int N = 2000;
        int K = 1500;
        int[] info = { 873, 287, 1821, 1044, 631, 1718, 1925, 1629, 1420, 1133, 679, 658, 1575, 406, 142, 378, 1615, 943, 481, 31, 300, 1673, 1402, 60, 492, 365, 1667, 1814, 1198, 4, 1254, 217, 1079, 35, 1329, 85, 1631, 1260, 1396, 1170, 1486, 1073, 1232, 1051, 866, 1849, 969, 473, 434, 1747, 1560, 1076, 1975, 1917, 944, 1531, 1330, 1524, 1610, 1298, 701, 1490, 502, 938, 1119, 877, 1158, 302, 1006, 82, 1715, 290, 239, 262, 227, 1273, 1008, 105, 1744, 1735, 218, 1195, 663, 93, 157, 49, 1240, 1297, 295, 1834, 777, 1262, 835, 643, 660, 1571, 1857, 684, 746, 1478, 255, 410, 1206, 1136, 1597, 380, 1151, 1305, 527, 107, 112, 1457, 1588, 757, 880, 362, 1167, 680, 266, 1621, 214, 913, 117, 1242, 834, 318, 23, 1485, 528, 545, 953, 1760, 1144, 1255, 231, 508, 582, 1966, 1573, 1059, 84, 654, 34, 897, 1695, 1492, 1259, 1416, 677, 1574, 1174, 46, 110, 16, 1092, 1417, 648, 1562, 327, 688, 1781, 1086, 1641, 397, 976, 1496, 1443, 1022, 948, 1841, 1797, 554, 1247, 1864, 833, 1912, 1542, 950, 623, 1317, 855, 1139, 553, 986, 1173, 161, 176, 475, 1820, 1815, 1220, 421, 1945, 942, 1300, 1009, 73, 1030, 1347, 1088, 1375, 28, 306, 1706, 177, 644, 981, 187, 294, 1188, 1177, 1164, 319, 1869, 59, 1368, 32, 824, 1415, 349, 61, 242, 521, 1085, 1181, 895, 180, 1722, 1314, 1333, 114, 1463, 1152, 970, 1584, 97, 649, 1265, 1656, 1147, 379, 193, 1617, 1226, 611, 1309, 1537, 1316, 288, 1207, 405, 463, 91, 1651, 1723, 1280, 1635, 13, 507, 1742, 883, 1543, 937, 30, 1697, 36, 169, 144, 292, 1335, 538, 1504, 606, 821, 1939, 1211, 1894, 714, 1448, 603, 503, 1020, 571, 1968, 14, 173, 1737, 1278, 1776, 215, 1852, 352, 1594, 819, 1954, 207, 65, 966, 1118, 1977, 246, 1992, 38, 1178, 1456, 1786, 452, 978, 997, 1565, 1779, 1516, 574, 350, 630, 1548, 1928, 1720, 1101, 1634, 40, 918, 233, 1434, 1909, 813, 1168, 1843, 1976, 1027, 934, 1587, 1004, 784, 685, 1568, 1135, 260, 24, 755, 1505, 1290, 647, 540, 1296, 1231, 1870, 408, 1752, 629, 589, 232, 1292, 1148, 700, 1021, 313, 748, 1491, 1991, 1926, 1725, 941, 213, 126, 741 };
        assertEquals(1250, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case108() {
        int N = 2000;
        int K = 2000;
        int[] info = { 1053, 3, 798, 1549, 1366, 1107, 1333, 176, 1252, 1294, 721, 720, 1307, 406, 1179, 1773, 975, 1756, 395, 1257, 1792, 1341, 1559, 846, 904, 1950, 550, 1453, 1214, 1065, 1800, 833, 407, 1355, 419, 1075, 1317, 1351, 209, 1558, 1694, 1540, 370, 465, 964, 1414, 1751, 1904, 460, 1410, 647, 991, 359, 554, 606, 1889, 1157, 175, 517, 1717, 136, 253, 620, 1069, 1338, 1567, 4, 1296, 444, 1470, 575, 409, 1956, 58, 328, 326, 1740, 1056, 473, 1809, 93, 1401, 1457, 169, 51, 269, 275, 14, 519, 1948, 391, 969, 343, 32, 1386, 286, 1244, 1211, 654, 197, 706, 1387, 1255, 1173, 1520, 306, 315, 1912, 945, 1493, 1247, 1705, 1806, 703, 1200, 75, 622, 38, 524, 229, 1293, 131, 1160, 322, 568, 1514, 1101, 1936, 1677, 1620, 1835, 1902, 1138, 1176, 1402, 1656, 996, 1816, 368, 1750, 1882, 1708, 13, 1780, 1225, 993, 1299, 617, 1870, 984, 1658, 206, 1606, 440, 551, 641, 163, 1571, 696, 937, 355, 475, 1024, 936, 1433, 1971, 393, 1592, 21, 103, 923, 746, 211, 576, 434, 142, 340, 1859, 1108, 1424, 1237, 946, 731, 73, 1700, 173, 1928, 1223, 1509, 927, 1883, 187, 1086, 1325, 1479, 1880, 865, 1251, 988, 128, 725, 655, 216, 682, 1920, 91, 1897, 1735, 1189, 1239, 666, 294, 754, 981, 1605, 1269, 172, 1152, 1761, 567, 530, 1873, 585, 387, 1447, 267, 288, 266, 1148, 279, 972, 1205, 698, 1593, 726, 1439, 1885, 1529, 1757, 618, 390, 653, 1661, 1175, 125, 730, 1675, 1091, 1226, 847, 1427, 287, 1315, 1497, 1616, 1744, 1339, 1194, 718, 1714, 123, 1758, 1280, 384, 940, 645, 560, 1501, 1348, 1907, 1657, 79, 121, 1395, 117, 1281, 1345, 1687, 775, 1092, 1077, 1645, 491, 1711, 232, 579, 1396, 1003, 153, 496, 1460, 674, 941, 1358, 1095, 1701, 600, 1318, 76, 958, 1068, 763, 1016, 1580, 1753, 85, 777, 867, 1268, 212, 59, 869, 310, 1190, 1377, 1939, 1783, 458, 1542, 1652, 855, 1029, 1722, 1679, 898, 1511, 1508, 1823, 915, 349, 357, 1604, 1731, 1556, 1334, 564, 1719, 546, 246, 22, 388, 1911, 155, 36, 623, 601, 1087, 1603, 494, 1000, 34, 365, 1626, 132, 1353, 883, 1019, 1738, 1347, 794, 116, 1390, 445, 1380, 791, 1072, 1910, 860, 245, 1842, 1821, 1585, 948, 736, 1833, 759, 1787, 544, 249, 868, 80, 1028, 1270, 1563, 514, 430, 1006, 1671, 911, 1297, 1266, 1786, 237, 970, 1772, 963, 321, 1042, 1554, 308, 189, 1154, 764, 129, 397, 374, 1663, 1391, 747, 992, 1841, 1893, 1191, 457, 1607, 1942, 443, 428, 64, 162, 1660, 1356, 1598, 642, 1261, 1564, 198, 1551, 757, 29, 1760, 499, 46, 1465, 1519, 213, 1166, 165, 1309, 913, 1754, 594, 503, 1666, 1084, 1213, 70, 821, 1804, 1944, 1037, 1535, 1188, 693, 769, 301, 1624, 109, 1674, 1397, 1793, 1854, 66, 405, 880, 1871, 1547, 669, 661, 481, 9, 508, 1240, 1464, 657, 1863, 1649, 1710, 425, 818, 506, 323, 297, 788, 1890, 1192, 140, 526, 501, 1726, 122, 192, 1849, 314, 451, 1094, 1474, 208, 1227, 1201, 31, 671, 200, 569, 896, 542, 48, 118, 1146, 1153, 1418, 201, 493, 1023, 1584, 1720, 1480, 1336, 1207, 1510, 290, 99, 536, 929, 28, 1221, 1132, 1796, 977, 1782, 1478, 442, 776, 1905, 971, 1419, 1350, 872, 1174, 84, 1126, 480, 660, 1420, 1110, 609, 1354, 1284, 765, 1076, 1462, 1969, 1860, 171, 1232, 831, 1746, 893, 934, 115, 1507, 427, 1303, 5, 1560, 616, 448, 1340, 1829, 439, 133, 793, 1161, 1357, 1218, 592, 65, 1256, 552, 512, 543, 492 };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case109() {
        int N = 2000;
        int K = 2;
        int[] info = { 209, 1928, 380, 332, 1181, 113, 593, 1130, 1412, 1745, 1403, 1973, 1550, 1628, 1214, 629, 104, 1925, 992, 266, 1103, 665, 1463, 302, 1529, 1046, 71, 785, 1343, 440, 572, 1472, 182, 1244, 1205, 656, 1433, 167, 968, 263, 1520, 11, 278, 890, 1283, 1775, 53, 461, 653, 1256, 1469, 1025, 1970, 1040, 1688, 527, 1304, 1760, 1034, 1553, 86, 1316, 611, 644, 317, 1493, 287, 359, 596, 1364, 1514, 1373, 1634, 800, 908, 920, 797, 953, 299, 707, 911, 1826, 1646, 335, 791, 566, 383, 218, 1457, 152, 578, 1226, 743, 1337, 1637, 704, 1559, 1616, 815, 1679, 1139, 470, 1217, 479, 272, 1442, 1145, 1094, 1232, 887, 509, 401, 1016, 1406, 92, 371, 146, 884, 1694, 38, 1586, 1187, 956, 197, 932, 1118, 1958, 296, 1733, 101, 365, 257, 1982, 641, 533, 1349, 269, 1655, 341, 1517, 1079, 1322, 1382, 59, 1631, 1004, 416, 1481, 599, 83, 575, 284, 149, 1931, 1148, 368, 161, 1076, 962, 1664, 686, 428, 1880, 47, 65, 539, 896, 1955, 1313, 1949, 1241, 869, 713, 1127, 1964, 1943, 1319, 1592, 128, 1886, 1877, 62, 1022, 632, 230, 581, 701, 1043, 584, 1778, 446, 836, 872, 1922, 590, 842, 626, 830, 1445, 1535, 710, 395, 824, 1715, 524, 1247, 1919, 356, 551, 80, 419, 1859, 749, 143, 1967, 1160, 1673, 557, 1865, 1193, 422, 1070, 260, 1898, 110, 839, 1895, 1661, 1013, 494, 1892, 1271, 1142, 443, 1286, 1568, 1907, 1430, 1223, 1415, 1358, 308, 1010, 377, 548, 137, 1883, 1361, 1397, 50, 1562, 1811, 1649, 1751, 1448, 1685, 779, 404, 1829, 1676, 506, 986, 386, 185, 1268, 1307, 1097, 683, 827, 1952, 821, 275, 1946, 251, 995, 716, 125, 1154, 1994, 1604, 1121, 899, 1424, 854, 1691, 1682, 857, 224, 1730, 1496, 1532, 755, 2, 761, 170, 1367, 731, 1478, 608, 1862, 620, 1112, 1823, 674, 947, 1916, 1613, 1709, 1409, 1724, 764, 425, 1901, 1091, 914, 1544, 998, 1394, 659, 602, 1856, 5, 449, 542, 1766, 488, 647, 23, 200, 1601, 1940, 680, 719, 662, 434, 311, 1727, 809, 98, 1979, 188, 1052, 698, 1235, 614, 1721, 1172, 1763, 239, 1115, 329, 14, 1088, 689, 1910, 668, 1169, 1436, 1178, 1082, 848, 1280, 245, 1106, 1508, 1838, 173, 1808, 1484, 1301, 1379, 1934, 236, 1640, 851, 254, 1460, 677, 1538, 587, 806, 2000, 314, 398, 794, 1997, 20, 1109, 1400, 752, 1658, 374, 1250, 503, 971, 1835, 179, 392, 437, 140, 1202, 1868, 1667, 1796, 1607, 410, 1799, 1289, 923, 617, 1439, 119, 1067, 560, 1832, 26, 158, 833, 1652, 491, 1580, 1421, 818, 1625, 1211, 1571, 746, 1388, 740, 734, 530, 959, 1844, 1595, 1265, 1295, 1610, 1772, 650, 350, 1064, 1136, 935, 1547, 1262, 281, 1985, 1511, 431, 638, 455, 8, 1565, 1757, 203, 1451, 893, 1055, 563, 116, 1037, 695, 206, 1817, 467, 938, 1346, 56, 1754, 1739, 353, 1742, 518, 326, 227, 215, 980, 1574, 1805, 1556, 1976, 1352, 194, 29, 1340, 1157, 293, 497, 1475, 1124, 1331, 782, 1049, 1505, 1697, 305, 1133, 803, 17, 1385, 875, 1793, 1706, 452, 1802, 866, 485, 1820, 902, 545, 107, 1334, 860, 1622, 965, 1328, 554, 1229, 68, 1850, 233, 1208, 44, 1502, 1526, 1100, 929, 1748, 1889, 536, 941, 1028, 878, 74, 347, 926, 1871, 1175, 1427, 671, 1220, 1874, 692, 1490, 221, 32, 1190, 41, 389, 1784, 413, 1700, 1589, 35, 212, 605, 767, 1073, 905, 1499, 1781, 77, 1598, 1718, 776, 1031, 863, 458, 1847, 338, 1466, 95, 1643, 1904, 131, 1787, 770, 1292, 917, 1577, 290, 983, 773, 1619, 1166, 1712, 248, 1355, 1583, 1736, 242, 1961, 989, 1310, 881, 500, 944, 1061, 1298, 1085, 737, 1937, 320, 1790, 1199, 1019, 512, 812, 1988, 1196, 1487, 1991, 1163, 1151, 1277, 1913, 515, 758, 1370, 1418, 1703, 521, 323, 1523, 164, 1670, 977, 482, 1814, 134, 191, 725, 728, 476, 176, 122, 845, 950, 89, 1253, 635, 1058, 1274, 407, 1769, 1376, 1007, 1454, 788, 344, 473, 1841, 1001, 1325, 464, 722, 1853, 155, 623, 1184, 1238, 1541, 569, 1391, 362, 974, 1259 };
        assertEquals(667, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case110() {
        int N = 2000;
        int K = 3;
        int[] info = { 953, 1488, 1953, 283, 88, 1373, 728, 168, 898, 318, 808, 1723, 1998, 1813, 1698, 578, 1863, 678, 1178, 1978, 1538, 1378, 1543, 1288, 1313, 1423, 43, 1048, 1968, 213, 1268, 333, 1678, 1218, 1873, 1618, 263, 1408, 773, 1568, 1463, 338, 1858, 1983, 1608, 1893, 1383, 1083, 1163, 23, 1238, 1943, 1053, 1033, 378, 933, 1923, 1338, 1658, 443, 638, 1763, 1993, 33, 703, 758, 633, 1688, 998, 1843, 1128, 1493, 373, 468, 1743, 1523, 1063, 1168, 1693, 1988, 188, 128, 1263, 1828, 463, 718, 1098, 1918, 113, 1188, 358, 1008, 383, 923, 1503, 178, 538, 1878, 918, 1958, 313, 348, 288, 1453, 1088, 988, 433, 663, 903, 1938, 1433, 8, 1908, 308, 608, 473, 1133, 583, 1273, 1603, 1243, 838, 53, 488, 1318, 738, 1798, 1928, 1783, 1728, 1013, 768, 1553, 1328, 558, 1848, 1173, 1248, 548, 1888, 1483, 493, 1213, 813, 1403, 1838, 133, 793, 958, 1578, 253, 298, 1973, 1593, 853, 83, 928, 1823, 618, 483, 268, 828, 1768, 1208, 963, 1668, 1518, 593, 1118, 623, 228, 1158, 1653, 1788, 63, 1278, 1803, 873, 118, 1673, 628, 513, 78, 1138, 1833, 1778, 1808, 1193, 1203, 93, 1103, 138, 1363, 533, 238, 1633, 743, 1708, 1078, 353, 453, 343, 408, 1293, 1023, 983, 403, 1558, 1298, 688, 908, 73, 1198, 1353, 1148, 1683, 1643, 1638, 1308, 1413, 1853, 693, 108, 163, 648, 763, 1663, 418, 948, 1598, 143, 783, 1428, 673, 1468, 553, 1438, 528, 48, 1573, 568, 1498, 1368, 1648, 1548, 68, 233, 393, 1003, 1533, 1903, 1153, 1703, 1143, 1583, 658, 798, 148, 893, 153, 563, 1393, 1588, 778, 1333, 1183, 243, 423, 1233, 1058, 1028, 428, 123, 1758, 1038, 1258, 1018, 1073, 748, 1508, 603, 508, 848, 643, 3, 38, 103, 1793, 1113, 198, 1818, 818, 1773, 733, 833, 498, 978, 1068, 588, 938, 943, 258, 788, 1443, 388, 323, 1563, 13, 863, 1898, 1283, 1348, 158, 683, 363, 1623, 1358, 1093, 913, 698, 598, 1253, 1868, 273, 1738, 1513, 1948, 413, 1343, 708, 1448, 888, 653, 1628, 1418, 1613, 173, 868, 1123, 1883, 1733, 543, 448, 193, 218, 1398, 248, 523, 1478, 573, 328, 368, 458, 223, 28, 878, 753, 823, 723, 98, 303, 1228, 1458, 208, 278, 843, 503, 713, 518, 438, 1108, 1223, 883, 968, 613, 203, 803, 1388, 1913, 1963, 1713, 1718, 1753, 858, 1933, 293, 993, 18, 1528, 1748, 478, 1323, 1043, 58, 183, 1473, 668, 973, 398, 1303 };
        assertEquals(400, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case111() {
        int N = 2000;
        int K = 2;
        int[] info = { 1119, 395, 1161, 1735, 29, 1157, 963, 1793, 1249, 1677, 701, 1383, 1577, 169, 849, 1467, 1371, 1573, 1533, 261, 1353, 421, 1379, 573, 663, 1837, 847, 1555, 1989, 1809, 887, 75, 863, 1847, 1833, 1123, 493, 375, 85, 283, 1313, 861, 999, 667, 725, 981, 387, 1307, 571, 1493, 1305, 1627, 409, 1141, 1981, 1479, 1031, 741, 977, 853, 1711, 1831, 45, 1661, 1147, 601, 1571, 235, 1495, 133, 303, 843, 35, 1175, 1261, 1817, 1501, 823, 921, 1319, 831, 1737, 737, 1631, 1911, 391, 1213, 1821, 1335, 1807, 1407, 163, 307, 753, 1947, 1117, 199, 1617, 1691, 777, 1681, 413, 1659, 1509, 249, 1909, 1769, 875, 1315, 123, 1949, 643, 1399, 295, 93, 749, 153, 271, 231, 1499, 1689, 505, 689, 1527, 833, 1675, 549, 1455, 1223, 1057, 661, 1339, 917, 1357, 581, 209, 1081, 1413, 891, 1103, 1893, 1895, 223, 291, 959, 585, 251, 1075, 953, 1709, 1401, 1779, 1043, 1705, 473, 1, 1845, 13, 905, 205, 1881, 819, 185, 1395, 1853, 137, 801, 1765, 471, 1073, 1719, 969, 15, 1201, 1637, 1655, 1451, 349, 1255, 1477, 1549, 1623, 359, 589, 865, 1525, 1345, 439, 151, 117, 755, 1439, 633, 1663, 557, 71, 1271, 1279, 1887, 885, 1163, 351, 1009, 1515, 181, 1867, 1783, 695, 1137, 1485, 1945, 1341, 103, 147, 285, 411, 805, 1347, 1855, 1097, 1481, 1265, 615, 1203, 1885, 1011, 397, 273, 1377, 551, 927, 1785, 845, 731, 165, 1217, 1537, 1715, 669, 665, 1429, 1505, 1309, 1721, 543, 331, 427, 1287, 1367, 1403, 1131, 1585, 141, 919, 219, 817, 993, 65, 233, 1713, 1351, 815, 1541, 267, 143, 521, 773, 1841, 313, 1733, 501, 1929, 1483, 1211, 27, 809, 195, 379, 559, 1943, 1355, 567, 385, 1749, 1281, 1445, 175, 221, 1095, 1935, 857, 1937, 1207, 675, 1473, 791, 1645, 743, 1743, 431, 1121, 1543, 1553, 1083, 1049, 599, 445, 1177, 1963, 939, 1985, 1003, 871, 1387, 1221, 775, 1835, 1751, 541, 447, 645, 1859, 433, 1861, 1359, 1965, 269, 983, 723, 1267, 129, 337, 713, 1641, 1227, 1679, 407, 449, 1777, 1589, 1521, 437, 339, 859, 1045, 1587, 825, 229, 1273, 1293, 1707, 1093, 1437, 73, 61, 1431, 179, 997, 867, 1727, 299, 1453, 1297, 1291, 1593, 315, 1599, 1583, 1475, 607, 83, 1759, 1547, 745, 1069, 751, 203, 135, 1551, 597, 1215, 1669, 683, 1591, 1771, 23, 1781, 1999, 1127, 11, 1303, 393, 1559, 707, 623, 255, 901, 1979, 1825, 1005, 1185, 511, 1071, 803, 457, 95, 797, 1285, 371, 1253, 1701, 673, 441, 489, 383, 1017, 747, 1115, 949, 1993, 1507, 807, 47, 1983, 213, 563, 81, 1301, 1349, 915, 1857, 87, 533, 595, 1435, 1397, 575, 1289, 1109, 1961, 1417, 487, 225, 603, 1085, 705, 1051, 895, 761, 1419, 91, 1061, 453, 399, 1007, 1609, 1233, 1155, 1019, 911, 495, 579, 1625, 1991, 21, 1649, 1917, 1813, 417, 481, 1311, 277, 909, 497, 3, 699, 1365, 475, 1997, 1183, 1869, 1321, 1823, 1425, 1441, 813, 829, 991, 1013, 1087, 1059, 193, 503, 1111, 1941, 1323, 275, 109, 1635, 167, 889, 191, 827, 1143, 353, 1295, 785, 345, 509, 1225, 1361, 1891, 835, 1851, 247, 1697, 311, 53, 519, 769, 149, 1575, 1969, 161, 1731, 1327, 1671, 1919, 1443, 499, 1433, 1129, 1849, 145, 1205, 1193, 67, 1925, 961, 1125, 1931, 1829, 49, 9, 733, 587, 1447, 1703, 41, 1457, 1889, 423, 1343, 873, 1517, 985, 401, 837, 155, 1611, 1773, 63, 451, 529, 1565, 1695, 5, 357, 975, 1745, 897, 657, 1879, 207, 329, 361, 877, 1299, 1133, 107, 783, 1369, 933, 1955, 347, 139, 1325, 979, 883, 719, 157, 1181, 1195, 659, 127, 709, 1797, 935, 1685, 1469, 569, 1015, 1953, 989, 253, 841, 1101, 1933, 1871, 443, 189, 1975, 19, 1461, 241, 325, 1865, 763, 1247, 259, 821, 1545, 1971, 289, 1487, 631, 1041, 635, 1079, 945, 1159, 1923, 1967, 1723, 459, 757, 795, 1531, 1557, 1099, 287, 25, 1747, 687, 611, 1987, 237, 787, 1693, 1581, 263, 679, 1883, 187, 565, 217, 1411, 1863, 1025, 651, 995, 1065, 619, 159, 1875, 1613, 131, 363, 1523, 1639, 609, 333, 1605, 463, 641, 629, 343, 1651, 1375, 1653, 855, 739, 1699, 523, 593, 1053, 227, 479, 297, 293, 1717, 485, 1063, 1619, 323, 923, 693, 1739, 1107, 381, 1219, 1091, 913, 583, 1729, 101, 1615, 105, 1199, 545, 121, 1257, 1331, 1567, 1539, 119, 1023, 517, 335, 1819, 79, 369, 1939, 931, 1741, 1905, 1667, 1647, 947, 869, 613, 425, 1687, 1259, 435, 111, 491, 477, 1951, 1449, 1511, 1237, 89, 1191, 605, 907, 1787, 1803, 1113, 415, 1037, 301, 69, 561, 1621, 1381, 1197, 1907, 113, 1229, 125, 1535, 1035, 17, 1827, 771, 319, 1873, 279, 513, 1277, 677, 1973, 1529, 1263, 1165, 1569, 341, 1135, 265, 1241, 1763, 1503, 967, 1039, 1767, 1761, 1683, 1167, 309, 851, 465, 925, 97, 1927, 389, 957, 811, 1393, 183, 461, 1595, 1105, 793, 1243, 215, 1915, 377, 1629, 973, 621, 1021, 1169, 1239, 1235, 799, 625, 1029, 1465, 1409, 39, 531, 257, 1921, 367, 1755, 171, 245, 55, 507, 591, 1673, 1489, 1811, 555, 243, 281, 1067, 1171, 317, 1877, 537, 653, 31, 971, 1957, 419, 1415, 839, 1421, 781, 759, 1791, 1903, 547, 527, 59, 1753, 1139, 1251, 715, 1405, 7, 1149, 553, 1189, 1913, 1001, 577, 1795, 1597, 1815, 941, 1423, 1329, 649, 1607, 789, 405, 1033, 893, 1561, 99, 201, 703, 1427, 1725, 1959, 1077, 1391, 1799, 765, 1047, 729, 1805, 1179, 37, 115, 903, 1657, 1245, 1757, 211, 1603, 1231, 469, 727, 1579, 639, 1389, 1459, 1601, 305, 965, 1209, 627, 1563, 1899, 955, 1977, 43, 711, 239, 1283, 767, 33, 177, 51, 1995, 1665, 617, 1385, 943, 1275, 1633, 1643, 1027, 779, 647, 951, 1519, 721, 539, 697, 515, 1839, 655, 535, 365, 987, 1497, 685, 637, 1269, 1055, 879, 1337, 467, 899, 681, 1153, 1801, 1151, 1373, 1513, 1463, 1089, 1187, 1491, 525, 1471, 1363, 1901, 937, 1145, 1843, 671, 881, 327, 373, 455, 403, 1789, 1897, 691, 77, 429, 1775, 355, 929, 1333, 1317, 173, 717, 321, 197, 57, 483, 1173, 735 };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case112() {
        int N = 2000;
        int K = 3;
        int[] info = { 1393, 1945, 94, 1003, 328, 1669, 448, 1333, 166, 1438, 1930, 706, 109, 544, 1360, 1240, 253, 1363, 1831, 343, 403, 1579, 610, 691, 1150, 178, 175, 1, 97, 796, 886, 862, 1348, 127, 1858, 643, 844, 1378, 334, 1021, 361, 418, 337, 958, 130, 997, 652, 1075, 1147, 1774, 766, 1879, 892, 1780, 154, 184, 520, 1327, 709, 688, 1114, 331, 1300, 1582, 1456, 22, 1177, 1204, 1852, 247, 304, 724, 1012, 1006, 1267, 376, 358, 1663, 1543, 763, 118, 1759, 1717, 1225, 388, 457, 445, 880, 1432, 1396, 910, 1966, 1159, 679, 1219, 1723, 229, 1708, 1654, 1798, 532, 646, 1699, 1108, 1117, 742, 1009, 199, 1618, 1900, 10, 235, 718, 991, 1168, 805, 1876, 970, 1129, 412, 1840, 967, 1435, 1459, 169, 1093, 478, 1030, 217, 1570, 898, 661, 1171, 1819, 1429, 1186, 1402, 607, 1648, 1237, 748, 1972, 31, 133, 409, 517, 1468, 1924, 148, 1510, 1702, 1567, 1423, 586, 1345, 1297, 424, 88, 1891, 604, 1270, 1747, 823, 514, 1765, 1306, 61, 1486, 1753, 1447, 1939, 295, 181, 559, 541, 712, 1606, 1330, 1324, 574, 1927, 1864, 1153, 700, 415, 979, 913, 685, 1828, 310, 190, 1099, 1675, 1657, 631, 1738, 238, 1096, 1804, 1756, 472, 580, 142, 1822, 922, 955, 1837, 667, 907, 502, 853, 1372, 1291, 406, 1321, 286, 553, 1366, 589, 1690, 1411, 1594, 1441, 592, 778, 1243, 1354, 556, 523, 1234, 1915, 790, 1054, 103, 1420, 1651, 1564, 19, 196, 1444, 1921, 583, 1642, 1720, 859, 835, 1951, 1762, 1984, 1960, 811, 1636, 964, 340, 781, 496, 1963, 754, 808, 760, 1777, 904, 1066, 370, 1162, 271, 1000, 640, 1174, 202, 1132, 895, 1375, 1504, 1141, 1036, 562, 925, 1516, 1882, 1408, 1507, 1783, 1957, 298, 802, 697, 985, 1069, 1087, 364, 385, 1969, 1342, 694, 841, 1111, 1498, 1906, 937, 1495, 1279, 1846, 1552, 1795, 493, 655, 511, 832, 1294, 319, 1615, 1318, 1573, 1264, 1258, 226, 1195, 877, 1981, 649, 670, 82, 1462, 565, 775, 400, 211, 568, 1546, 799, 1216, 1786, 637, 442, 1126, 1156, 739, 868, 451, 673, 1135, 244, 538, 139, 1450, 430, 721, 460, 1315, 280, 1081, 1540, 1942, 439, 1198, 550, 847, 1801, 283, 814, 1057, 151, 1534, 619, 1282, 421, 7, 994, 751, 463, 1192, 1063, 1390, 1222, 1489, 1999, 1312, 172, 874, 1255, 1183, 820, 277, 1825, 187, 1789, 145, 1591, 1609, 1639, 943, 1810, 1855, 1231, 1123, 1771, 1144, 577, 373, 256, 1807, 916, 1870, 1729, 1102, 1933, 124, 43, 676, 1165, 1849, 214, 307, 1603, 883, 598, 871, 730, 982, 1369, 1303, 301, 1285, 1201, 1045, 1519, 220, 484, 115, 193, 1873, 1339, 1978, 436, 1894, 433, 427, 49, 52, 745, 1051, 1078, 595, 769, 1816, 223, 274, 949, 682, 379, 349, 1687, 1492, 1867, 1288, 1351, 1471, 1549, 988, 1537, 466, 1228, 1909, 4, 1276, 34, 1417, 1513, 547, 1474, 1684, 919, 571, 1681, 1975, 1813, 397, 934, 1726, 1399, 382, 1501, 265, 292, 1246, 1600, 1480, 1414, 850, 1843, 976, 46, 16, 1207, 1384, 85, 1633, 1645, 1213, 1711, 316, 1705, 25, 634, 1912, 205, 1660, 817, 526, 1336, 58, 1528, 268, 973, 1735, 1768, 1387, 1039, 1954, 64, 346, 1672, 367, 1273, 1180, 160, 55, 1750, 163, 1597, 1531, 787, 259, 625, 1483, 490, 1585, 1027, 394, 1465, 601, 1309, 313, 622, 1060, 1885, 1357, 940, 1024, 1588, 1048, 1405, 136, 1261, 70, 37, 1903, 772, 928, 262, 1453, 208, 322, 508, 352, 1249, 112, 1897, 232, 355, 1558, 1714, 1105, 1381, 658, 838, 106, 487, 931, 865, 628, 946, 889, 1033, 40, 475, 1090, 1918, 1018, 961, 793, 289, 1522, 325, 1555, 535, 76, 1741, 1987, 703, 952, 1621, 1576, 1834, 1666, 1252, 499, 1612, 1696, 826, 1990, 1861, 727, 1426, 505, 733, 1477, 1084, 1888, 481, 73, 1525, 100, 391, 1993, 1948, 157, 1072, 1630, 856, 829, 91, 1120, 1561, 616, 1627, 28, 715, 67, 121, 454, 1996, 469, 13, 1042, 1732, 1936, 1678, 1693, 79, 784, 664, 1210, 757, 1624, 1792, 1744, 1015, 613, 901, 250, 736, 241, 529, 1138, 1189 };
        assertEquals(667, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case113() {
        int N = 2;
        int K = 2;
        int[] info = {  };
        assertEquals(1, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case114() {
        int N = 2000;
        int K = 2000;
        int[] info = { 2000 };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case115() {
        int N = 4;
        int K = 4;
        int[] info = { 1, 4 };
        assertEquals(2, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case116() {
        int N = 2000;
        int K = 2;
        int[] info = {  };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case117() {
        int N = 1999;
        int K = 2;
        int[] info = {  };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case118() {
        int N = 2000;
        int K = 700;
        int[] info = {  };
        assertEquals(1050, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case119() {
        int N = 2000;
        int K = 701;
        int[] info = {  };
        assertEquals(1050, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case120() {
        int N = 2000;
        int K = 399;
        int[] info = {  };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case121() {
        int N = 2000;
        int K = 236;
        int[] info = {  };
        assertEquals(1056, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case122() {
        int N = 10;
        int K = 5;
        int[] info = { 1, 10 };
        assertEquals(4, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case123() {
        int N = 2000;
        int K = 1000;
        int[] info = {  };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case124() {
        int N = 5;
        int K = 4;
        int[] info = { 1, 5 };
        assertEquals(3, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case125() {
        int N = 2000;
        int K = 2000;
        int[] info = {  };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case126() {
        int N = 3;
        int K = 2;
        int[] info = {  };
        assertEquals(2, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case127() {
        int N = 10;
        int K = 2;
        int[] info = {  };
        assertEquals(5, applesandorangeseasy.maximumApples(N, K, info));
    }

    @Test
    public void case128() {
        int N = 2000;
        int K = 500;
        int[] info = {  };
        assertEquals(1000, applesandorangeseasy.maximumApples(N, K, info));
    }

}
