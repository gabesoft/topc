package topc.test.greedy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.greedy.*;

public class PowersOfTwoTest {
  PowersOfTwo powersoftwo = new PowersOfTwo();

  @Test
  public void case1() {
    long[] powers = { 1L, 2L };
    assertEquals(4L, powersoftwo.count(powers));
  }

  @Test
  public void case2() {
    long[] powers = { 1L, 1L, 1L, 1L };
    assertEquals(5L, powersoftwo.count(powers));
  }

  @Test
  public void case3() {
    long[] powers = { 1L, 2L, 2L, 2L, 4L, 4L, 16L };
    assertEquals(32L, powersoftwo.count(powers));
  }

  @Test
  public void case4() {
    long[] powers = { 2L, 4L, 8L, 32L };
    assertEquals(16L, powersoftwo.count(powers));
  }

  @Test
  public void case5() {
    long[] powers = { 128L };
    assertEquals(2L, powersoftwo.count(powers));
  }

  @Test
  public void case6() {
    long[] powers = { 1L, 32L, 1L, 16L, 32L };
    assertEquals(18L, powersoftwo.count(powers));
  }

  @Test
  public void case7() {
    long[] powers = { 8L, 524288L, 281474976710656L, 16L, 524288L, 16L, 562949953421312L, 1099511627776L, 281474976710656L, 8388608L, 32L, 68719476736L, 16L, 562949953421312L, 8388608L, 140737488355328L, 1099511627776L, 16L, 35184372088832L, 281474976710656L, 8L, 134217728L, 8388608L, 68719476736L, 4L, 34359738368L, 8L, 562949953421312L, 2147483648L, 8L, 562949953421312L, 562949953421312L, 16L, 140737488355328L };
    assertEquals(1904256L, powersoftwo.count(powers));
  }

  @Test
  public void case8() {
    long[] powers = { 4L, 512L, 34359738368L, 68719476736L, 512L, 35184372088832L, 4294967296L, 281474976710656L, 1048576L, 2048L, 64L, 2048L, 281474976710656L, 68719476736L, 64L, 4294967296L, 512L, 512L, 512L, 33554432L, 512L, 8589934592L, 512L, 2L, 1048576L, 4294967296L, 512L, 32L, 34359738368L, 64L, 8192L, 70368744177664L, 2147483648L, 1048576L, 281474976710656L, 512L, 4294967296L, 2048L, 512L };
    assertEquals(15654912L, powersoftwo.count(powers));
  }

  @Test
  public void case9() {
    long[] powers = { 17592186044416L, 8192L, 128L, 8192L, 8589934592L, 8192L, 274877906944L, 562949953421312L, 549755813888L, 128L, 8589934592L, 281474976710656L, 4L, 65536L, 16L, 274877906944L, 2048L, 549755813888L, 8192L, 549755813888L, 128L, 65536L, 562949953421312L, 4L, 524288L, 4294967296L, 8589934592L, 4L, 134217728L, 17592186044416L, 8192L, 1048576L, 1073741824L, 33554432L, 65536L, 2199023255552L, 128L };
    assertEquals(150405120L, powersoftwo.count(powers));
  }

  @Test
  public void case10() {
    long[] powers = { 2097152L, 35184372088832L, 562949953421312L, 281474976710656L, 4294967296L, 35184372088832L, 4294967296L, 17592186044416L, 2L, 524288L, 2147483648L, 8796093022208L, 4194304L, 8388608L, 2147483648L, 8L, 2147483648L, 17592186044416L, 274877906944L, 262144L, 4294967296L, 2147483648L, 4194304L, 562949953421312L, 2097152L, 2097152L, 536870912L, 17592186044416L, 4294967296L, 16384L, 4294967296L, 262144L, 274877906944L, 562949953421312L, 1048576L, 2147483648L, 32L };
    assertEquals(19070976L, powersoftwo.count(powers));
  }

  @Test
  public void case11() {
    long[] powers = { 2097152L, 134217728L, 8589934592L, 70368744177664L, 1073741824L, 2L, 2097152L, 1099511627776L, 32768L, 64L, 32L, 128L, 70368744177664L, 2097152L, 562949953421312L, 32768L, 35184372088832L, 536870912L, 128L, 1099511627776L, 1099511627776L, 1099511627776L, 1099511627776L, 32L, 536870912L, 32768L, 33554432L, 128L, 8388608L, 67108864L, 8796093022208L, 8388608L, 562949953421312L, 32L, 35184372088832L, 33554432L, 128L, 2097152L, 8L, 1073741824L, 2097152L };
    assertEquals(156473856L, powersoftwo.count(powers));
  }

  @Test
  public void case12() {
    long[] powers = { 2048L, 274877906944L, 16384L, 32768L, 16384L, 4194304L, 1L, 1L, 1L, 1L, 274877906944L, 1L, 16777216L, 512L, 268435456L, 16384L, 68719476736L, 2048L, 8796093022208L, 32768L, 8796093022208L, 8796093022208L, 1073741824L, 549755813888L, 16384L, 1L, 64L, 68719476736L, 8796093022208L, 32768L, 64L, 8796093022208L, 16384L, 549755813888L, 4398046511104L };
    assertEquals(6096384L, powersoftwo.count(powers));
  }

  @Test
  public void case13() {
    long[] powers = { 1099511627776L, 2048L, 2048L, 1099511627776L, 1073741824L, 1099511627776L, 536870912L, 536870912L, 65536L, 2048L, 1073741824L, 1099511627776L, 34359738368L, 2048L, 1024L, 1099511627776L, 1099511627776L, 34359738368L, 64L, 2048L };
    assertEquals(7056L, powersoftwo.count(powers));
  }

  @Test
  public void case14() {
    long[] powers = { 128L, 8796093022208L, 128L, 128L, 128L, 128L, 8796093022208L, 8796093022208L, 128L };
    assertEquals(28L, powersoftwo.count(powers));
  }

  @Test
  public void case15() {
    long[] powers = { 1048576L, 1073741824L, 549755813888L, 70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L, 8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L, 256L, 256L, 256L, 262144L, 1048576L, 1048576L, 70368744177664L, 262144L, 1048576L };
    assertEquals(18432L, powersoftwo.count(powers));
  }

  @Test
  public void case16() {
    long[] powers = { 35184372088832L, 1024L, 274877906944L, 4L, 2L, 2199023255552L, 512L, 1L, 1L, 131072L, 34359738368L, 34359738368L, 32L, 274877906944L, 34359738368L, 140737488355328L, 8L, 274877906944L, 68719476736L, 2048L, 34359738368L, 34359738368L, 262144L, 34359738368L, 2L, 274877906944L };
    assertEquals(398848L, powersoftwo.count(powers));
  }

  @Test
  public void case17() {
    long[] powers = { 140737488355328L, 2097152L, 1099511627776L, 16777216L, 128L, 2L, 524288L, 16384L, 8388608L, 140737488355328L, 8L, 4096L, 2L, 64L, 128L, 1099511627776L, 512L, 524288L, 524288L, 2097152L, 4096L, 8L, 8L, 4096L, 16384L, 16777216L, 140737488355328L, 34359738368L, 8L, 4096L, 131072L, 17179869184L, 524288L, 64L, 512L, 137438953472L, 8L, 8L, 4096L, 4096L, 4398046511104L, 131072L, 4096L, 274877906944L, 17179869184L, 268435456L };
    assertEquals(1585059840L, powersoftwo.count(powers));
  }

  @Test
  public void case18() {
    long[] powers = { 562949953421312L };
    assertEquals(2L, powersoftwo.count(powers));
  }

  @Test
  public void case19() {
    long[] powers = { 64L, 2048L, 268435456L, 536870912L, 4194304L, 64L, 2048L, 67108864L, 67108864L, 137438953472L, 8L, 16L, 16L, 262144L, 70368744177664L, 536870912L, 268435456L, 4398046511104L, 4194304L, 4398046511104L, 2048L, 4398046511104L, 274877906944L, 64L, 8L, 64L, 70368744177664L, 8589934592L, 8192L, 8192L, 8L, 8192L, 2048L, 8L, 536870912L, 262144L, 262144L, 137438953472L, 524288L, 64L, 8192L };
    assertEquals(60011280L, powersoftwo.count(powers));
  }

  @Test
  public void case20() {
    long[] powers = { 137438953472L, 137438953472L, 137438953472L };
    assertEquals(4L, powersoftwo.count(powers));
  }

  @Test
  public void case21() {
    long[] powers = { 2097152L, 131072L, 2199023255552L, 2097152L, 34359738368L, 8L, 17179869184L, 32L, 8388608L, 2199023255552L, 16384L, 4L, 70368744177664L, 64L, 256L, 4L, 512L, 8L, 2097152L, 17179869184L, 256L, 256L, 8388608L, 2097152L, 2097152L, 4294967296L, 1048576L, 8388608L, 2L, 2097152L, 2097152L, 549755813888L, 2097152L, 4294967296L, 67108864L, 2097152L, 65536L, 2097152L, 2199023255552L, 64L, 68719476736L, 2097152L };
    assertEquals(167215104L, powersoftwo.count(powers));
  }

  @Test
  public void case22() {
    long[] powers = { 8388608L, 131072L, 32768L, 4294967296L, 8192L, 8192L, 1048576L, 4294967296L, 2L, 8L, 131072L, 8388608L, 32768L, 2L, 1048576L, 2L, 32768L, 131072L, 2L, 8192L, 2L, 1048576L, 32768L, 131072L, 562949953421312L, 1048576L };
    assertEquals(75600L, powersoftwo.count(powers));
  }

  @Test
  public void case23() {
    long[] powers = { 524288L, 524288L, 4L, 274877906944L, 16384L, 131072L, 16384L, 524288L, 16384L, 4194304L, 4194304L, 131072L, 4L, 524288L, 524288L, 16777216L, 274877906944L, 16777216L, 4194304L, 4194304L };
    assertEquals(8424L, powersoftwo.count(powers));
  }

  @Test
  public void case24() {
    long[] powers = { 562949953421312L, 131072L, 274877906944L, 16777216L, 281474976710656L, 8796093022208L, 17179869184L, 17179869184L, 262144L, 16L, 8589934592L, 274877906944L, 2097152L, 1125899906842624L, 262144L, 1125899906842624L, 1125899906842624L, 274877906944L, 1024L, 536870912L, 274877906944L, 274877906944L, 8589934592L, 281474976710656L, 562949953421312L, 2097152L, 16L, 281474976710656L, 131072L, 2147483648L, 536870912L, 1125899906842624L, 2147483648L, 562949953421312L, 17179869184L, 17179869184L, 2199023255552L, 16L, 4096L, 16L, 281474976710656L, 562949953421312L, 16L, 17592186044416L, 8388608L, 33554432L, 536870912L, 16L, 4096L, 32L };
    assertEquals(1666925568L, powersoftwo.count(powers));
  }

  @Test
  public void case25() {
    long[] powers = { 4L, 1L, 536870912L, 8192L, 4L, 140737488355328L, 4L, 137438953472L, 4096L, 4L, 32L, 536870912L, 32L, 16777216L, 32L, 536870912L, 4L, 137438953472L, 8192L, 4L, 32L, 1073741824L, 8192L };
    assertEquals(40320L, powersoftwo.count(powers));
  }

  @Test
  public void case26() {
    long[] powers = { 2L, 8796093022208L, 67108864L, 67108864L, 2L, 274877906944L, 8796093022208L, 32L, 32L, 8796093022208L, 256L, 8796093022208L, 256L, 2L, 67108864L, 8796093022208L, 536870912L, 524288L, 256L, 8L, 536870912L, 2147483648L, 1L, 8L, 536870912L };
    assertEquals(221184L, powersoftwo.count(powers));
  }

  @Test
  public void case27() {
    long[] powers = { 17592186044416L, 17592186044416L, 536870912L, 536870912L };
    assertEquals(9L, powersoftwo.count(powers));
  }

  @Test
  public void case28() {
    long[] powers = { 4398046511104L, 2147483648L, 8589934592L, 268435456L, 16777216L, 1073741824L, 8589934592L, 8589934592L, 4294967296L, 17592186044416L, 1073741824L, 4096L, 1073741824L, 8589934592L, 34359738368L, 32768L, 16384L, 16384L, 16777216L, 512L, 16384L, 137438953472L, 8589934592L, 1073741824L, 1073741824L, 268435456L, 32768L, 2199023255552L, 4096L, 512L, 33554432L, 32L, 512L, 16777216L, 16384L, 2147483648L, 137438953472L, 16384L };
    assertEquals(8916480L, powersoftwo.count(powers));
  }

  @Test
  public void case29() {
    long[] powers = { 65536L };
    assertEquals(2L, powersoftwo.count(powers));
  }

  @Test
  public void case30() {
    long[] powers = { 67108864L, 2048L, 274877906944L, 562949953421312L, 549755813888L, 268435456L, 1125899906842624L, 68719476736L, 4L, 1073741824L, 33554432L, 8L, 268435456L, 1073741824L, 8388608L, 1024L, 549755813888L, 68719476736L, 67108864L, 8388608L, 1024L, 562949953421312L, 268435456L, 549755813888L, 68719476736L, 140737488355328L, 65536L, 68719476736L, 8L, 281474976710656L, 2048L, 1099511627776L, 67108864L, 281474976710656L, 562949953421312L, 140737488355328L, 67108864L, 68719476736L, 4096L, 549755813888L, 549755813888L, 4L, 256L, 67108864L, 1073741824L, 33554432L, 67108864L, 274877906944L };
    assertEquals(235758600L, powersoftwo.count(powers));
  }

  @Test
  public void case31() {
    long[] powers = { 34359738368L, 35184372088832L, 35184372088832L, 34359738368L, 35184372088832L, 34359738368L, 35184372088832L, 34359738368L };
    assertEquals(25L, powersoftwo.count(powers));
  }

  @Test
  public void case32() {
    long[] powers = { 17179869184L, 4398046511104L, 2147483648L, 536870912L, 8589934592L, 536870912L, 1099511627776L, 64L, 137438953472L, 4294967296L, 64L, 17592186044416L, 1048576L, 8192L, 2147483648L, 562949953421312L, 256L, 64L, 2147483648L, 2199023255552L, 16384L, 1048576L, 16384L, 536870912L, 2L, 2147483648L, 4294967296L, 128L, 4194304L, 512L, 2199023255552L, 1073741824L, 8192L, 8192L, 1099511627776L, 2199023255552L, 2199023255552L, 2199023255552L, 2147483648L, 4398046511104L, 8589934592L, 64L, 2L, 2199023255552L, 1048576L, 8192L, 64L, 4294967296L, 2199023255552L, 16L };
    assertEquals(161533440L, powersoftwo.count(powers));
  }

  @Test
  public void case33() {
    long[] powers = { 536870912L, 128L, 137438953472L, 65536L, 4194304L, 17592186044416L, 33554432L, 1L, 8L, 1048576L, 256L, 17592186044416L, 262144L, 536870912L, 17592186044416L, 8589934592L, 17592186044416L, 262144L, 256L, 134217728L, 512L, 17592186044416L, 536870912L, 65536L, 134217728L, 4398046511104L, 4398046511104L, 4194304L, 64L, 64L, 1048576L, 17592186044416L, 1048576L, 65536L, 8L, 65536L, 256L, 1048576L, 1099511627776L, 536870912L, 134217728L, 134217728L, 4194304L, 4398046511104L, 33554432L, 17592186044416L, 4294967296L, 256L, 4398046511104L, 8589934592L };
    assertEquals(1918700784L, powersoftwo.count(powers));
  }

  @Test
  public void case34() {
    long[] powers = { 33554432L, 16777216L, 67108864L, 33554432L, 536870912L, 1L, 8388608L, 34359738368L, 536870912L, 33554432L, 2048L, 1073741824L, 16384L, 68719476736L, 2199023255552L, 281474976710656L, 70368744177664L, 8388608L, 8388608L, 549755813888L, 16L, 549755813888L, 16L, 2048L, 16777216L, 281474976710656L, 2048L, 16L, 68719476736L, 2048L, 68719476736L, 33554432L, 8388608L, 68719476736L, 281474976710656L, 4294967296L, 67108864L, 2048L, 2048L, 8192L, 8192L, 562949953421312L, 32L, 2199023255552L, 70368744177664L, 256L, 1073741824L, 2199023255552L, 16777216L, 33554432L };
    assertEquals(784546560L, powersoftwo.count(powers));
  }

  @Test
  public void case35() {
    long[] powers = { 4096L, 562949953421312L, 512L, 274877906944L, 32768L, 16L, 262144L, 4294967296L, 4294967296L, 274877906944L, 67108864L, 1L, 8388608L, 274877906944L, 274877906944L, 65536L, 274877906944L, 8192L, 536870912L, 4096L, 4294967296L, 140737488355328L, 8192L, 8388608L, 140737488355328L, 274877906944L, 536870912L, 137438953472L, 8192L, 8L, 274877906944L, 536870912L, 274877906944L, 274877906944L, 274877906944L, 65536L, 68719476736L, 32768L, 67108864L, 8192L, 8192L, 67108864L, 8192L, 4096L, 536870912L, 4398046511104L, 562949953421312L, 8388608L, 8192L, 8589934592L };
    assertEquals(790732800L, powersoftwo.count(powers));
  }

  @Test
  public void case36() {
    long[] powers = { 1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L, 1099511627776L, 2199023255552L, 4398046511104L, 8796093022208L, 17592186044416L, 35184372088832L, 70368744177664L, 140737488355328L, 281474976710656L, 562949953421312L };
    assertEquals(1125899906842624L, powersoftwo.count(powers));
  }

  @Test
  public void case37() {
    long[] powers = { 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L };
    assertEquals(51L, powersoftwo.count(powers));
  }

  @Test
  public void case38() {
    long[] powers = { 1048576L, 1073741824L, 549755813888L, 70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L, 8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L, 256L, 256L, 256L, 262144L, 1048576L, 2048L, 1048576L, 70368744177664L, 262144L, 1048576L, 1125899906842624L, 562949953421312L, 281474976710656L, 140737488355328L, 1024L, 512L, 2048L, 1048576L, 70368744177664L, 262144L, 1048576L, 1125899906842624L, 562949953421312L, 281474976710656L, 140737488355328L, 4L, 8L };
    assertEquals(12140544L, powersoftwo.count(powers));
  }

  @Test
  public void case39() {
    long[] powers = { 1L, 32L, 1L, 16L, 32L };
    assertEquals(18L, powersoftwo.count(powers));
  }

  @Test
  public void case40() {
    long[] powers = { 1048576L, 1073741824L, 549755813888L, 70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L, 8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L, 256L, 256L, 256L, 262144L, 1048576L, 1048576L, 70368744177664L, 262144L, 1048576L, 1048576L, 1073741824L, 549755813888L, 70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L, 8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L, 256L, 256L, 256L, 262144L, 1048576L, 1048576L, 70368744177664L, 262144L, 1048576L, 1L, 2L, 4L, 8L, 1L, 1L };
    assertEquals(8295210L, powersoftwo.count(powers));
  }

  @Test
  public void case41() {
    long[] powers = { 1L, 2L, 4L, 8L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L, 1099511627776L, 2199023255552L, 4398046511104L, 8796093022208L, 17592186044416L, 35184372088832L, 70368744177664L, 140737488355328L, 281474976710656L, 562949953421312L, 1125899906842624L };
    assertEquals(1125899906842624L, powersoftwo.count(powers));
  }

  @Test
  public void case42() {
    long[] powers = { 1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L, 1099511627776L, 2199023255552L, 4398046511104L, 8796093022208L, 17592186044416L, 35184372088832L, 70368744177664L, 140737488355328L, 281474976710656L, 562949953421312L };
    assertEquals(1125899906842624L, powersoftwo.count(powers));
  }

  @Test
  public void case43() {
    long[] powers = { 1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 1L, 2L, 4L, 8L, 16L, 32L, 64L };
    assertEquals(49277L, powersoftwo.count(powers));
  }

  @Test
  public void case44() {
    long[] powers = { 1L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L };
    assertEquals(82L, powersoftwo.count(powers));
  }

  @Test
  public void case45() {
    long[] powers = { 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 16L };
    assertEquals(311L, powersoftwo.count(powers));
  }

  @Test
  public void case46() {
    long[] powers = { 1048576L, 1073741824L, 549755813888L, 70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L, 8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L, 256L, 256L, 256L, 262144L, 1048576L, 1048576L, 70368744177664L, 262144L, 1048576L, 1048576L, 1073741824L, 549755813888L, 70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L, 8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L, 256L, 256L, 256L, 262144L, 1048576L, 1048576L, 70368744177664L, 262144L, 1048576L, 1048576L, 1048576L, 1048576L };
    assertEquals(519057L, powersoftwo.count(powers));
  }

  @Test
  public void case47() {
    long[] powers = { 562949953421312L, 2L, 4L, 8L, 16L, 32L };
    assertEquals(64L, powersoftwo.count(powers));
  }

  @Test
  public void case48() {
    long[] powers = { 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L, 1099511627776L, 2199023255552L, 4398046511104L, 8796093022208L, 17592186044416L, 35184372088832L, 70368744177664L, 140737488355328L, 281474976710656L, 562949953421312L };
    assertEquals(562949953421312L, powersoftwo.count(powers));
  }

  @Test
  public void case49() {
    long[] powers = { 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L, 1099511627776L, 2199023255552L, 4398046511104L, 8796093022208L, 17592186044416L, 35184372088832L, 70368744177664L, 140737488355328L, 281474976710656L, 562949953421312L, 1125899906842624L };
    assertEquals(1125899906842624L, powersoftwo.count(powers));
  }

  @Test
  public void case50() {
    long[] powers = { 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L, 17179869184L };
    assertEquals(22020096L, powersoftwo.count(powers));
  }

  @Test
  public void case51() {
    long[] powers = { 1048576L, 1073741824L, 549755813888L, 70368744177664L, 4398046511104L, 262144L, 1048576L, 2097152L, 8796093022208L, 1048576L, 1048576L, 35184372088832L, 2097152L, 256L, 256L, 256L, 262144L, 1048576L, 1048576L, 70368744177664L, 262144L, 1048576L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 4L, 4L, 8L, 1099511627776L };
    assertEquals(921600L, powersoftwo.count(powers));
  }

  @Test
  public void case52() {
    long[] powers = { 1L, 1L };
    assertEquals(3L, powersoftwo.count(powers));
  }

  @Test
  public void case53() {
    long[] powers = { 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L, 1125899906842624L };
    assertEquals(51L, powersoftwo.count(powers));
  }

  @Test
  public void case54() {
    long[] powers = { 1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L };
    assertEquals(4294967296L, powersoftwo.count(powers));
  }

  @Test
  public void case55() {
    long[] powers = { 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L };
    assertEquals(51L, powersoftwo.count(powers));
  }

  @Test
  public void case56() {
    long[] powers = { 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 16L, 16L, 8L, 8L, 8L, 8L, 8L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L };
    assertEquals(153L, powersoftwo.count(powers));
  }

  @Test
  public void case57() {
    long[] powers = { 2L, 2L, 2L };
    assertEquals(4L, powersoftwo.count(powers));
  }

  @Test
  public void case58() {
    long[] powers = { 1L, 2L, 4L, 8L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L };
    assertEquals(1099511627776L, powersoftwo.count(powers));
  }

  @Test
  public void case59() {
    long[] powers = { 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 4L, 32L, 64L, 128L, 1024L, 128L };
    assertEquals(312L, powersoftwo.count(powers));
  }

  @Test
  public void case60() {
    long[] powers = { 1L, 32L, 1L, 16L, 32L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L };
    assertEquals(116L, powersoftwo.count(powers));
  }

  @Test
  public void case61() {
    long[] powers = { 4L, 16L, 32L, 64L, 128L, 256L, 512L, 1024L, 2048L, 4096L, 8192L, 16384L, 32768L, 65536L, 131072L, 262144L, 524288L, 1048576L, 2097152L, 4194304L, 8388608L, 16777216L, 33554432L, 67108864L, 134217728L, 268435456L, 536870912L, 1073741824L, 2147483648L, 4294967296L, 8589934592L, 17179869184L, 34359738368L, 68719476736L, 137438953472L, 274877906944L, 549755813888L, 1099511627776L, 2199023255552L, 4398046511104L, 8796093022208L, 17592186044416L, 35184372088832L, 70368744177664L, 140737488355328L, 281474976710656L, 562949953421312L, 1125899906842624L, 2L, 2L };
    assertEquals(703687441776640L, powersoftwo.count(powers));
  }

  @Test
  public void case62() {
    long[] powers = { 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L, 1073741824L };
    assertEquals(22L, powersoftwo.count(powers));
  }

}
