package topc.test.greedy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.greedy.*;

public class SegmentsAndPointsTest {
    SegmentsAndPoints segmentsandpoints = new SegmentsAndPoints();

    @Test
    public void case1() {
        int[] p = { 1, 2 };
        int[] l = { 0, 0 };
        int[] r = { 1, 3 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case2() {
        int[] p = { 0 };
        int[] l = { 2 };
        int[] r = { 3 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case3() {
        int[] p = { 0, 1, 2 };
        int[] l = { 0, 0, 1 };
        int[] r = { 1, 2, 1 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case4() {
        int[] p = { 0, 1 };
        int[] l = { -1, 0 };
        int[] r = { 0, 0 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case5() {
        int[] p = { 434, 63, 241, 418, -380, -46, 397, -205, -262, -282, 260, -106, -389, -286, 422, -75, 127, 382, 52, -383 };
        int[] l = { -447, -226, -411, 287, -83, -228, -390, 358, 422, 395, -461, -112, 49, 75, -160, -152, 372, -447, -337, -362 };
        int[] r = { -102, 348, -70, 466, 168, -61, -389, 469, 433, 471, -75, -41, 52, 236, 299, -48, 383, -353, 346, -217 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case6() {
        int[] p = { 106, -234, 158, -88, -94, 348, -310, 333, 227, 381, 185, -87, -487, 431, -342, 72, 259, 410, 453, 487, 446, 246, 324, -217, -49, 274, 355, 391, 7, 429, 29, -482, 335, 81, -249, 195, -69, 139, 228, 138 };
        int[] l = { 405, -425, 240, -33, -104, 86, 297, -156, -484, -307, 100, -410, 351, 143, -128, -487, 417, -140, -266, -85, 44, 13, 241, 343, 430, -439, 154, -206, 6, 487, 282, 145, 237, -262, 57, -5, -319, -343, 49, -45 };
        int[] r = { 453, 344, 476, 12, -94, 154, 413, 41, -463, -45, 280, 291, 420, 365, 302, -487, 430, 492, -202, 437, 225, 375, 286, 364, 485, 480, 158, 342, 199, 488, 421, 500, 443, -233, 222, 129, 164, -310, 433, 297 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case7() {
        int[] p = { 155, -111, 322, -88, 165, 230, -365, 161, 342, 60, 395, 35, 378, 314, 126, 180, 478, 209, 427, 377, 368, 346, 380, 23, 372, -26, 75, 366, 428, 438, 250, 481, 362, 331, 249, -326, 393, -9, -84, 189, 139, 458, -86, 155, 323, 60, 262, 113, 236, 466, -249, 149, 155, -50, 496, -353, 442, 431, -321, 459 };
        int[] l = { -151, 67, 50, -364, 451, 411, 328, 457, 47, -362, 304, 423, -5, 4, 248, -93, 295, -472, -237, 230, 352, 348, 91, 387, -3, -152, -95, 436, -271, 360, 13, 447, -371, 124, 150, -494, 419, 312, 309, 115, 123, 493, 6, -149, 212, 98, -375, 207, -447, -131, 382, -29, -130, 480, 185, 376, -70, -177, -133, -279 };
        int[] r = { 308, 242, 465, 407, 463, 434, 425, 460, 477, 62, 400, 487, 130, 428, 484, 86, 438, -87, 140, 265, 427, 379, 226, 451, 416, 467, 234, 443, 118, 373, 313, 471, -66, 179, 388, 93, 460, 374, 474, 343, 259, 500, 294, 436, 388, 225, 332, 440, 66, 457, 497, 252, 215, 481, 278, 391, -50, 261, 375, 472 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case8() {
        int[] p = { 196, 382, 134, 450, 441, -155, 438, -137, 443, -24, -323, 101, 376, 482, -371, 187, 48, -106, 13, -73, -108, -139, 240, -246, 53, 318, -399, 441, 204, 221, 359, -419, 41, 187, 483, 159, 355, -362, -128, 270 };
        int[] l = { 248, 237, 434, -391, -371, -376, -29, 448, 382, -139, 65, 129, -483, -45, 33, -139, -205, -129, -282, -101, 459, -452, -392, 20, 349, 406, 271, -403, 107, 180, -168, 253, -416, 299, 184, -290, 482, -107, -316, -72 };
        int[] r = { 280, 480, 451, 480, -366, -210, 59, 469, 386, -39, 139, 241, -15, 395, 135, 275, -144, -72, -127, 16, 488, 260, -300, 88, 359, 451, 383, 428, 212, 302, 72, 453, 25, 386, 257, -199, 482, 191, 19, 338 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case9() {
        int[] p = { -61, -418, 139, 34, 417, 474, -130, 423, 492, 448, -288, 282, 499, 475, 228, 73, 257, 362, 429, 206, -185, -262, -377, 472, -166, 370, 235, 417, 33, 465, 26, -63, -330, 360, 398, 291, 479, -211, 410, -230, 372, 464, -155, 378, 23, 128, 314, -278, -219, 170, 427, 383, 177, -108, 85, -169, 106, 421, -351, 286 };
        int[] l = { -131, -442, 436, -240, -131, -367, -242, -80, -406, 135, -234, 31, 311, 67, 384, -378, 182, 47, -377, 498, 438, -163, -207, 318, 320, 153, 387, 280, 173, -185, -50, 479, -260, -495, -405, 358, -385, 134, -397, 454, 285, -49, 357, -103, 337, 450, 406, 416, -133, 465, 190, -316, 339, 426, -365, -104, -500, -75, -286, -255 };
        int[] r = { -127, 385, 489, -108, -46, -189, 306, 193, 25, 221, 165, 454, 389, 100, 495, -354, 244, 452, 205, 499, 455, 419, -153, 481, 492, 431, 478, 328, 331, 133, 296, 479, 421, -347, -90, 430, -181, 352, -180, 485, 296, 383, 373, 54, 380, 492, 412, 486, 94, 469, 419, 276, 387, 477, 218, 340, 228, 472, 87, -179 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case10() {
        int[] p = { 18, -350, -227, 162, 222, 242, -119, -109, 478, 137, -383, 420, 13, 119, 264, 253, 71, 397, 270, 415, 130, 289, 144, 264, 313, -326, 471, 173, 93, -33, -138, 52, -232, 33, 356, -30, 436, 0, 54, -88, 221, 93, 193, 312, 390, 222, -54, -30, 20, -433, 336, 278, -171, -1, 167, 406, 346, -22, 189, 497 };
        int[] l = { -350, 326, 164, -329, 201, 202, -92, 262, 328, -317, 289, 71, 401, -245, 20, 475, 169, -313, 290, -3, 12, 184, -495, -19, -341, -217, -142, 192, 17, 153, -51, -270, -432, -63, 264, 369, 400, -17, -95, -174, -452, 153, -61, 385, -74, 213, -410, -165, -46, -26, -486, -386, -462, 230, 495, -139, -127, -172, 296, -256 };
        int[] r = { 367, 466, 451, 158, 375, 321, -59, 309, 360, 352, 403, 174, 487, 235, 239, 495, 176, 43, 456, 472, 76, 321, 482, 346, 216, 101, -69, 369, 122, 177, 69, 301, -301, 466, 266, 493, 465, 413, 314, 337, -387, 249, 126, 429, 160, 381, 304, 259, 454, 93, -81, -311, -95, 490, 498, -35, 73, 91, 318, 453 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case11() {
        int[] p = { 337, 7, 321, 399, 86, -133, -212, 356, 456, 27, 232, 207, 371, 33, 138, -144, 166, -327, -231, 64, -75, 108, -285, 417, -343, 27, 468, 137, 64, 354, -215, 253, -367, -333, -41, -39, -51, 183, 479, 272, 346, 178, 173, -192, -116, -146, 307, -106, -57, -152, 191, 274, -144, 289, -258, 8, -226, -183, -254, 488, 482, -219, 351, 241, 150, 68, 217, 426, 184, -124, 258, 99, 203, 469, 336, 464, 191, -84, 143, -96, -158, -32, 105, -125, -161, -335, 356, 221, -35, -137, -2, 332, 469, -17, -143, -52, 209, 408, -258, 3 };
        int[] l = { -75, -342, -336, -35, -226, 131, -263, 127, 336, -300, -197, -305, 102, 108, -450, 268, 388, -184, 451, 444, 286, -304, 125, -42, -474, -315, -338, 290, -159, 137, 181, 320, -335, -167, -460, -398, -251, -458, -145, -280, -415, -322, 434, -28, -55, -324, -404, 69, 36, -449, 120, 172, -258, 170, -396, -76, 412, -341, -257, 188, -186, -326, -39, 283, -370, 95, -123, 255, -91, 480, -477, 130, -1, -182, -57, -58, 242, 115, -337, 436, 83, -353, -303, -266, -194, 261, 188, 309, -49, 17, -351, 195, 101, 219, 466, 310, -298, -338, 42, -328 };
        int[] r = { 162, 168, 426, 86, -130, 285, 380, 217, 340, 210, 445, 379, 309, 226, 115, 431, 490, 53, 490, 471, 469, -225, 262, 215, 101, -11, -66, 350, -4, 453, 285, 368, -326, -75, -41, 127, 58, 41, -73, -91, 61, 8, 498, 45, 391, 233, -87, 118, 425, 12, 446, 184, -114, 305, -54, 54, 468, 490, 492, 427, 123, -207, 467, 405, -11, 285, 4, 314, 276, 488, -204, 423, 268, -88, 48, -49, 419, 306, 124, 493, 281, -199, -121, -20, -11, 427, 358, 361, 414, 403, -204, 475, 225, 438, 489, 406, -134, -74, 335, 47 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case12() {
        int[] p = { 279, 218, -102, 199, 114, -50, -86, 312, -35, 492, 54, 253, -83, -451, 69, -303, 152, 287, -308, 139, 345, -402, -343, 124, 454, 494, 313, 261, -298, 276, -63, 266, 479, 170, 14, 378, 311, 475, -221, 107, 338, 300, 91, 446, 47, -237, -361, -258, 277, 45, 189, -253, 285, 346, -180, 235, 491, 160, 2, 169, -406, 241, -345, 498, 306, 164, 105, 472, -63, -274, 234, 252, -39, 210, -89, 125, -11, 21, 422, 481, 96, 408, -118, 110, 177, 485, -251, 236, 99, 488, -205, 415, 301, 6, 298, 21, 446, 0, 485, 415 };
        int[] l = { 443, -495, -435, 256, 493, 148, 106, 488, 222, 120, 420, -268, 478, 431, 184, -337, -248, -445, 383, 10, -151, -155, -292, 188, -99, -94, 75, 486, 431, -434, 50, 498, -182, 164, 293, -111, 475, 209, -315, 359, 89, -67, -322, -165, -270, -134, 48, 241, 97, 97, 197, -462, -311, 277, -53, 154, -151, 295, -31, 300, 232, -388, -482, 9, -482, 139, 456, 211, -442, -89, -436, -333, 232, 474, -403, -365, -157, 162, -306, 401, -239, -253, -306, 269, -248, -48, -477, -463, -429, 19, -278, -12, -163, 65, -359, 208, -332, 253, 476, 9 };
        int[] r = { 490, -5, 159, 427, 496, 206, 322, 489, 458, 152, 464, 408, 480, 449, 414, 261, 298, -209, 488, 294, -8, 100, -64, 313, 69, -7, 211, 498, 470, -337, 173, 498, -178, 295, 388, 260, 478, 331, 211, 438, 96, -3, 397, 121, -190, 398, 381, 443, 222, 285, 368, 474, 166, 497, 161, 438, 296, 419, 8, 318, 260, 468, -372, 60, 439, 381, 481, 311, 93, 453, 298, 419, 237, 491, 339, 314, 51, 339, 439, 420, -107, 462, 274, 310, 389, 261, 398, -198, -365, 496, 179, 6, -71, 205, 154, 247, -64, 358, 497, 382 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case13() {
        int[] p = { 458, 163, 130, 467, -361, -248, -276, 304, 152, 336, 207, 110, 403, 93, -181, 13, 267, 479, 243, 483, 266, -25, 436, 117, 280, 296, -128, 476, 227, -74, 216, 214, -414, 119, -254, 495, -275, -181, 415, -24, 253, 374, -7, 242, -274, 196, -102, -280, 225, -230, 421, 456, -279, -34, 295, 283, -70, 491, -82, 318, 435, 301, 196, -120, 259, 442, 262, 300, 412, 85, -225, -84, 121, 2, 7, 266, 330, 305, 256, -111, 206, 200, -284, -246, 440, 219, -296, 77, 186, 448, 318, 201, 341, 54, -295, 283, 369, 299, 457, -213 };
        int[] l = { -36, -273, -289, 375, -110, -377, 81, 64, 117, -115, -146, -394, 169, -306, -298, -455, -276, 37, 297, 349, 156, 375, 328, 294, 43, 447, 261, -294, -323, -236, -78, -207, 272, 174, 265, 192, -309, 98, -395, -495, -181, 72, -234, -55, 181, -417, -486, -166, 182, -99, -84, 494, 339, 409, 165, 88, 374, -144, 82, -183, 479, -22, 284, 481, 6, -103, -344, 487, 258, 294, -315, 465, -406, 439, -58, 188, -411, -129, -289, 422, 251, -445, 219, 372, 354, -495, 428, -84, -323, 121, 167, 449, 455, -397, -273, -183, 178, -126, 103, 269 };
        int[] r = { 236, 311, -123, 414, 438, -205, 347, 308, 398, -75, 162, -100, 314, 92, -268, 214, -211, 313, 312, 440, 199, 495, 394, 312, 320, 460, 272, 251, 197, 468, 392, 323, 283, 239, 337, 327, 34, 377, 30, -217, 458, 164, 337, 139, 291, 174, -17, 254, 307, -80, 89, 496, 445, 488, 420, 114, 499, 202, 227, 349, 480, 180, 407, 485, 464, 271, 366, 492, 352, 376, 248, 488, 484, 477, -11, 247, 244, 470, -107, 463, 316, -250, 481, 457, 417, -12, 464, 469, 445, 408, 459, 463, 475, 306, 231, 445, 356, 308, 460, 360 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case14() {
        int[] p = { -280, 156, 330, 60, 334, -357, 176, 396, 347, -219, -82, -414, 342, 99, 446, 171, 377, 358, -214, -327, -33, 460, 330, -320, 246, -196, -378, 292, 293, 380, -31, 280, -323, 289, 246, 390, 450, 407, 168, -207, 122, 458, -125, 16, 3, 419, 76, 451, -131, 313, 409, -99, 333, 207, 93, -151, -28, 198, 114, 32, -135, 285, 30, 280, 440, 74, 262, -185, 437, 305, 404, 369, -166, 213, 204, 128, 28, 355, 337, 356, 452, 186, -356, 73, -60, 102, 75, 28, -36, 205, -49, -323, 445, 360, 95, -205, 189, -242, -306, 225 };
        int[] l = { -357, 279, 297, -116, -222, 92, 346, 422, 188, -451, -402, -375, -272, 135, -25, 327, 317, -446, 336, 289, -264, -369, -112, 166, 452, 164, 133, -434, 429, 328, -173, -62, -380, -204, -445, -489, 446, 200, 60, -302, -323, -150, 180, 442, 73, -222, 240, -118, -136, 92, -153, -69, 139, -23, -227, 30, -430, -482, 300, -67, -197, -450, -295, 184, 320, -241, -69, -337, -153, -150, -114, -365, 294, -358, -326, 131, -152, -184, -306, 355, -77, -40, 40, -240, 336, 383, 69, 56, 362, 144, 28, 437, -135, -240, 384, -125, 269, 404, 236, 43 };
        int[] r = { -110, 292, 486, 267, 470, 101, 390, 480, 210, -299, 256, -344, -203, 199, 185, 384, 500, 19, 377, 313, -27, 179, 404, 186, 452, 472, 397, 388, 445, 371, -59, 341, 319, 402, -218, 138, 458, 454, 154, -266, -248, 336, 369, 495, 479, 24, 287, 459, 254, 305, 222, 275, 452, 15, -167, 389, -412, 173, 429, 217, 379, 99, 391, 430, 388, -206, 419, 369, 460, 394, 221, 338, 391, 391, -308, 292, 220, 62, 156, 421, 487, 336, 472, -111, 343, 435, 432, 66, 406, 371, 32, 497, 331, 409, 449, 43, 376, 484, 437, 344 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case15() {
        int[] p = { 313, 345, -235, 317, -63, 280, -46, 314, 102, 239, 384, 226, 447, -273, 457, -67, 445, 393, 126, 435, -260, -241, 365, 198, -116, 377, 302, 400, 227, -179, 378, 84, 228, 458, -115, 154, 15, -321, 412, -21, 133, 164, 101, 118, -231, 241, 198, 384, -50, 107, 276, 338, -137, 426, 489, 118, -377, 11, -145, -54, -371, 126, 313, -76, -301, 256, 15, -104, -251, -387, 41, -94, 414, -91, -2, 102, 13, -134, 324, 171, 427, 66, 296, -220, -151, 437, 218, 315, 261, 138, 18, 241, 214, -150, 319, 83, 20, -148, 110, -189 };
        int[] l = { -304, -179, -427, -200, 9, 355, -405, -390, -280, 185, 117, -158, 277, 267, -95, -26, 127, -54, 447, -297, 307, -416, -198, -383, 358, -257, 125, -268, -209, -424, -357, 151, 383, -458, -67, -116, 208, 296, -66, 347, 449, 400, -347, -55, -206, -120, -90, 108, -153, 99, -290, 289, 5, -311, -29, 278, -235, -105, 280, -179, -159, -441, -100, 383, -119, 186, 398, 106, -222, -236, -94, 307, 475, 21, 437, -335, -249, -381, 379, -103, 392, -454, -359, 46, -246, -328, -11, -152, 105, -267, -6, -152, -231, 8, -215, -270, 423, 292, -41, 391 };
        int[] r = { 41, 305, 398, 398, 393, 381, -132, 241, -157, 478, 232, 380, 429, 327, -45, 158, 244, 181, 493, 134, 326, 329, 294, -371, 496, 293, 355, 468, 440, -89, -215, 492, 475, -196, 490, -66, 376, 386, 185, 429, 494, 400, 75, 207, 440, 162, 293, 219, 355, 121, 301, 360, 439, 317, 118, 314, 25, 15, 308, 256, 335, 277, 443, 453, 202, 270, 480, 231, 354, -3, 391, 462, 499, 401, 438, 257, 412, -369, 500, 119, 499, 141, 77, 278, 108, -299, 146, 300, 143, 406, 146, -18, 343, 363, 471, 290, 464, 397, 210, 444 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case16() {
        int[] p = { 28, -261, 355, 152, -300, -475, -437, -437, 482, -173, -295, -448, 439, 289, -90, -12, -133, -80, 382, -128, -226, -92, 267, 36, 45, -186, -496, 118, -260, 428, -348, 271, 136, -329, -372, 84, -42, 73, 319, 372, -496, -467, -345, 349, 344, -189, 51, -92, 169, -182, -410, -486, 229, -258, 464, 335, 67, 12, 109, 258, -119, -37, -380, 312, 362, 55, 299, 124, -78, 444, -75, -224, 25, 141, 28, 425, -414, -453, 141, -127, 231, -299, 476, 7, -452, 22, 203, -120, -469, -215, -429, -82, -357, -405, 452, 297, 400, -67, -152, -394 };
        int[] l = { 460, -276, -374, -87, -441, 74, 467, 238, -229, -431, -255, 17, -326, -347, 232, 104, 236, -16, -366, 77, 232, 32, 127, 169, -82, -286, -364, -272, -172, 187, -257, -79, 22, 296, -196, 101, 85, 247, -360, -482, -321, -403, -291, -282, -345, -417, -422, -447, -42, 141, 460, -331, 14, -404, -82, -278, 130, 4, -302, 302, 51, -72, 236, 438, 227, -438, -451, -470, -423, -121, -133, 379, 245, 9, -360, -338, 255, 300, 254, 359, -313, -106, -446, 58, -178, -305, 463, 68, -343, 465, -45, -86, 443, 459, 465, -147, 280, 280, -117, 258 };
        int[] r = { 498, -264, -273, 443, 73, 331, 482, 431, 75, 395, 60, 92, 79, 2, 261, 458, 344, 303, 489, 403, 385, 191, 293, 449, 413, -282, 338, -238, -134, 478, -207, 32, 385, 393, 340, 289, 127, 395, -219, 49, -244, -254, 50, 72, -295, -126, -201, 34, 186, 438, 478, 118, 18, 285, 387, 210, 383, 112, -238, 338, 256, 31, 315, 486, 365, -78, -358, 70, 441, 300, 151, 432, 307, 319, 418, -59, 482, 429, 357, 406, -158, 378, -13, 458, 347, 386, 468, 88, -31, 491, 348, 414, 467, 497, 485, 323, 361, 491, 295, 300 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case17() {
        int[] p = { 163, -229, -158, 494, -24, 232, 445, 471, 58, 217, 192, 294, -272, 40, -91, 217, 417, -69, -81, -116, -27, 174, 114, 382, 137, 115, -39, -493, -338, -103, -323, 186, -476, -226, -36, 314, -397, 95, -238, 212, -225, 106, 96, 353, -473, -454, 197, -292, -380, 148, -273, 154, -395, 395, 281, -170, -143, -306, -247, -3, -234, 354, 305, -405, 6, 345, 341, -251, -76, 290, 78, -390, 315, 434, 0, -327, -245, -319, -462, 407, -248, 380, 451, 383, 182, 166, -306, -83, 136, 329, -79, 108, 78, 183, -24, 186, -409, -304, 113, 90 };
        int[] l = { -372, 295, -43, 286, 402, 455, -219, 180, -52, -485, -189, -29, -182, 6, 101, 192, -424, 403, -497, 196, 245, 235, 29, 399, 203, -327, 181, 147, -391, -472, 494, -276, -129, -412, -186, -90, -271, -280, 467, -93, -401, -380, -47, -171, -387, -62, 459, -300, -48, 157, 213, -294, -332, 392, 18, -335, -342, 120, -399, -109, -478, 293, 427, 70, 213, 285, 401, -261, 327, -419, 291, 235, -235, 485, 458, -462, -382, -371, 147, 392, -202, 185, 436, -277, -273, 429, -187, 55, -194, 57, 438, 428, 418, -199, -495, 179, 416, -335, 446, 467 };
        int[] r = { 154, 437, 327, 343, 479, 468, 68, 392, -14, -9, 361, 288, 388, 39, 449, 202, 170, 445, -241, 394, 255, 269, 89, 483, 347, 116, 222, 241, 298, -82, 495, 358, -101, 499, -165, -37, 236, -158, 484, 181, -385, 89, -28, 314, 66, 353, 483, -285, 390, 494, 312, 430, -240, 499, 235, -46, -185, 380, -73, 223, 261, 353, 468, 241, 366, 487, 419, 141, 411, 453, 326, 257, -162, 485, 484, 284, -148, 210, 456, 393, 356, 235, 487, -253, 147, 450, 360, 253, -137, 297, 445, 456, 420, -81, -109, 186, 445, -90, 462, 492 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case18() {
        int[] p = { -151, 397, 407, 416, 250, -377, -109, -28, -400, -94, 169, 484, -435, 328, -72, -204, 500, 114, -29, -204, -239, 267, -3, -301, -18, 427, -138, -498, 54, -459, 49, 264, 431, 64, 205, -381, -183, -484, -484, 327, 103, 44, 150, -324, 330, -268, -201, 87, 135, 69, -143, 131, 93, -35, -462, 77, 171, 93, -224, 487, 461, 217, 334, 10, -66, -498, 18, -41, 233, 381, -210, -286, 311, 103, -46, 358, 428, -424, 72, -488, -36, 458, 2, -162, -439, -307, 110, -423, -306, 3, -487, -465, -154, -178, -119, -30, 63, 320, 213, -216 };
        int[] l = { -109, 63, -226, 4, -439, -125, 44, 11, 279, 148, -326, -205, -24, 435, -174, -348, -371, 92, -485, -8, 402, -199, -21, 321, 377, -226, -209, -30, -29, -460, 497, -463, -262, 56, -432, -298, 269, -226, 411, -322, 226, 468, -132, -81, 186, -198, -346, 57, -499, -170, 231, 253, -186, 38, -132, 418, 241, 360, -356, 306, -447, -157, 481, -77, -192, 254, -24, 406, -215, 9, 453, -400, -318, 316, 189, -213, 399, 190, -371, -359, 311, -435, -132, 176, -224, -150, -318, -311, 486, 477, -457, -102, -82, -177, -410, -283, 298, -294, 117, -295 };
        int[] r = { 269, 212, -77, 110, 490, -43, 301, 64, 313, 238, 66, -114, 472, 456, 285, -259, 221, 489, 308, 209, 498, 95, 39, 499, 453, 230, -163, 481, 169, 318, 499, 482, 1, 187, 315, 301, 499, 345, 436, 162, 384, 472, 32, 392, 290, 416, 328, 286, -137, -11, 395, 350, 96, 407, 245, 440, 397, 467, -283, 425, -148, -52, 490, 265, -117, 300, 292, 411, 75, 217, 494, 295, -77, 490, 485, 390, 439, 455, 353, 450, 339, -277, 404, 291, -35, -85, -197, 431, 499, 489, 306, 112, 336, -6, -292, -245, 407, -114, 421, -119 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case19() {
        int[] p = { 256, -155, -232, -400, 127, 273, 469, 269, 74, -375, 2, 488, 7, -373, 156, 225, 249, -16, 125, 63, -488, -416, -164, -215, -133, 10, -63, 8, 387, -285, 414, 418, -312, 405, -178, 379, 486, -328, -46, -398, -325, -199, -257, 269, -340, -253, 139, -38, -280, -69, -185, -383, -237, -278, -234, -240, -22, 59, -338, 182, -438, 82, -42, 306, 282, -338, -187, 280, 380, 18, -160, 397, 314, 376, -217, 176, 218, 288, -73, -351, -363, -26, 262, -65, -328, -190, 154, 75, -117, 253, -476, -109, 264, 2, 459, 238, 93, 77, -417, 293 };
        int[] l = { -275, 239, 127, 247, -242, 286, -284, -111, 100, 276, -25, 194, 194, -407, 474, -303, -351, 20, 311, -153, 253, -102, 253, -428, 110, -106, 269, 172, 92, -150, -227, -259, 343, -319, 242, -186, 432, -115, 260, 37, -317, -10, -450, 267, 334, 460, -129, 492, 410, 131, 40, -14, -30, -487, 495, 227, 209, 122, 270, -61, -449, -485, 7, -61, -427, 435, 203, -248, -477, -209, -382, -287, 322, -78, -463, -449, 489, -413, -292, -177, 364, 180, -424, 43, -448, -9, 187, 79, 167, -192, -290, 347, -155, -35, 42, -113, -384, 67, 292, 167 };
        int[] r = { -30, 427, 469, 420, 334, 486, 414, 475, 359, 276, -9, 286, 418, -189, 479, 268, -180, 339, 329, 205, 254, 482, 321, -223, 111, 47, 343, 184, 493, 355, 36, -197, 396, 253, 250, 271, 475, -49, 286, 459, 451, 204, -440, 472, 460, 494, 147, 493, 424, 231, 93, 329, 268, 261, 499, 325, 491, 240, 325, 152, -150, -378, 477, 38, -192, 460, 479, 237, -34, 376, 400, -183, 332, 439, -268, 106, 489, -244, 156, 365, 367, 372, -179, 269, 231, 24, 240, 446, 421, 257, 301, 484, 23, 95, 236, 249, -22, 399, 296, 317 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case20() {
        int[] p = { 345, -189, -435, 237, -297, -367, -472, -89, -220, 132, 215, -372, -217, -258, -391, -342, 388, -107, -53, 230, -247, -417, 246, 307, -345, -235, 32, 76, -238, 99, 157, 433, -416, 214, -491, 113, 401, -73, 102, -226, 407, -83, 146, -422, -437, -343, 430, -412, 436, -390, 191, -254, 166, 264, 102, 118, 125, 2, 500, 440, 237, 445, -207, 446, 82, -248, -360, 290, -239, -411, 373, -344, 395, -320, 229, -464, -313, 243, 444, -139, 418, 367, -406, -385, 283, -400, 333, 38, 451, 280, 354, -364, 262, -117, 438, -339, 45, 348, 415, 141 };
        int[] l = { 51, -231, -464, -199, 247, -309, -39, -352, 201, -441, -365, -151, 283, -380, -363, 423, 108, -233, -350, -17, 406, -348, 262, -380, 197, -128, 471, 132, 51, 468, -29, 43, 320, 113, 485, 195, 7, -176, -407, -456, 442, -493, 361, -120, 268, -314, 4, 264, -46, 121, 132, -31, -469, -397, 206, -115, -248, 11, -165, -57, 19, 364, 96, 345, -472, -62, 206, 228, 459, 237, 3, 134, -189, 42, -177, 234, 433, 200, -26, 305, -78, -435, 66, -175, -189, 153, 362, 122, 321, 110, -47, -316, 40, -355, 419, 331, -398, 36, 50, -197 };
        int[] r = { 189, 132, 465, 424, 478, 18, 378, 358, 240, 493, 121, 409, 371, -357, 140, 445, 262, 216, 49, 85, 483, 101, 280, -16, 219, 66, 495, 415, 278, 493, 400, 447, 417, 125, 489, 249, 400, -30, 364, -296, 480, -95, 480, 368, 382, 413, 255, 368, 434, 397, 467, 68, -415, -96, 492, 431, -4, 132, 57, 278, 244, 462, 226, 483, -179, 408, 212, 419, 487, 279, 22, 293, 226, 301, 495, 427, 487, 223, 212, 452, 255, 458, 96, 216, 393, 444, 446, 400, 427, 429, 217, -92, 424, 485, 455, 371, -232, 319, 61, -65 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case21() {
        int[] p = { 500, -500 };
        int[] l = { -500, 500 };
        int[] r = { -500, 500 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case22() {
        int[] p = { 434, 63, 241, 418, -380, -46, 397, -205, -262, -282, 260, -106, -389, -286, 422, -75, 127, 382, 52, -383 };
        int[] l = { -447, -226, -411, 287, -83, -228, -390, 358, 422, 395, -461, -112, 49, 75, -160, -152, 372, -447, -337, -362 };
        int[] r = { -102, 348, -70, 466, 168, -61, -389, 469, 433, 471, -75, -41, 52, 236, 299, -48, 383, -353, 346, -217 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case23() {
        int[] p = { 0, 1, 2 };
        int[] l = { 0, 0, 3 };
        int[] r = { 1, 2, 3 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case24() {
        int[] p = { 0, 1, 2, 3 };
        int[] l = { 0, 0, 3, 3 };
        int[] r = { 3, 4, 5, 6 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case25() {
        int[] p = { 0, 2 };
        int[] l = { 0, 3 };
        int[] r = { 2, 5 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case26() {
        int[] p = { 1, 2 };
        int[] l = { 0, 3 };
        int[] r = { 6, 4 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case27() {
        int[] p = { 0, 1 };
        int[] l = { 0, 1 };
        int[] r = { 0, 1 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case28() {
        int[] p = { 0, 5 };
        int[] l = { 0, 0 };
        int[] r = { 1, 1 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case29() {
        int[] p = { 3, 5 };
        int[] l = { 0, 1 };
        int[] r = { 7, 1 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case30() {
        int[] p = { 1, 8 };
        int[] l = { 0, 2 };
        int[] r = { 9, 2 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case31() {
        int[] p = { 0, 1, 2 };
        int[] l = { 0, 6, 7 };
        int[] r = { 3, 6, 7 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case32() {
        int[] p = { 2, 2, 5 };
        int[] l = { 0, 1, 7 };
        int[] r = { 3, 6, 8 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case33() {
        int[] p = { 2, 3, 6, 7 };
        int[] l = { 1, 1, 1, 5 };
        int[] r = { 4, 4, 4, 8 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case34() {
        int[] p = { 0, 2 };
        int[] l = { 0, 3 };
        int[] r = { 2, 4 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case35() {
        int[] p = { -1 };
        int[] l = { -1 };
        int[] r = { -1 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case36() {
        int[] p = { 4, 5 };
        int[] l = { -2, 4 };
        int[] r = { -1, 5 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case37() {
        int[] p = { 1, 6 };
        int[] l = { 0, 5 };
        int[] r = { 2, 7 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case38() {
        int[] p = { 1, 2, 2 };
        int[] l = { 1, 1, 2 };
        int[] r = { 1, 1, 2 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case39() {
        int[] p = { 1, 3 };
        int[] l = { 1, 5 };
        int[] r = { 3, 7 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case40() {
        int[] p = { 1, 2, 2 };
        int[] l = { 0, 0, 10 };
        int[] r = { 1, 3, 20 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case41() {
        int[] p = { 0, 1, 2, 5 };
        int[] l = { 0, 1, 4, 5 };
        int[] r = { 1, 2, 5, 5 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case42() {
        int[] p = { 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 500 };
        int[] l = { 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0, 5, 2, 0 };
        int[] r = { 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 6, 6, 8, 8 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case43() {
        int[] p = { 1, 5 };
        int[] l = { 0, 6 };
        int[] r = { 7, 10 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case44() {
        int[] p = { 9, 11 };
        int[] l = { 0, 9 };
        int[] r = { 10, 11 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case45() {
        int[] p = { 0, 2 };
        int[] l = { 0, 5 };
        int[] r = { 3, 6 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case46() {
        int[] p = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 400 };
        int[] l = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        int[] r = { 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case47() {
        int[] p = { -1, 2, 2 };
        int[] l = { 0, 1, -1 };
        int[] r = { 2, 2, 3 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case48() {
        int[] p = { 0, 0, 5 };
        int[] l = { -1, -1, 1 };
        int[] r = { 6, 6, 4 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case49() {
        int[] p = { 0, 2 };
        int[] l = { 0, 6 };
        int[] r = { 2, 9 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case50() {
        int[] p = { 2, 2 };
        int[] l = { 1, 3 };
        int[] r = { 2, 4 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case51() {
        int[] p = { 1, 2 };
        int[] l = { 0, 0 };
        int[] r = { 1, 1 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case52() {
        int[] p = { 0, 1 };
        int[] l = { 0, 3 };
        int[] r = { 2, 4 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case53() {
        int[] p = { 1, 2, 3 };
        int[] l = { 1, 2, 4 };
        int[] r = { 3, 3, 4 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case54() {
        int[] p = { 0, 1 };
        int[] l = { 0, 2 };
        int[] r = { 1, 3 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case55() {
        int[] p = { 5, 6 };
        int[] l = { 1, 1 };
        int[] r = { 6, 2 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case56() {
        int[] p = { 0, 1, 3 };
        int[] l = { 0, 3, 3 };
        int[] r = { 2, 3, 4 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case57() {
        int[] p = { 1, 0, 3, 2 };
        int[] l = { 0, 2, 2, 3 };
        int[] r = { 3, 2, 2, 3 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case58() {
        int[] p = { 1, 2, 2, 2 };
        int[] l = { 1, 1, 2, 2 };
        int[] r = { 1, 1, 2, 2 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case59() {
        int[] p = { -1, 1 };
        int[] l = { -2, 10 };
        int[] r = { 2, 10 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case60() {
        int[] p = { 5, 10, 15 };
        int[] l = { 2, 3, 9 };
        int[] r = { 6, 7, 16 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case61() {
        int[] p = { 1, 3, 4 };
        int[] l = { 1, 4, 5 };
        int[] r = { 3, 4, 5 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case62() {
        int[] p = { 1, 2, 3 };
        int[] l = { 3, 2, 1 };
        int[] r = { 3, 2, 1 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case63() {
        int[] p = { 4, 6 };
        int[] l = { 1, 2 };
        int[] r = { 7, 5 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case64() {
        int[] p = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        int[] l = { -500, -500, -500, -500, -500, -500, -500, -500, -500, -500 };
        int[] r = { 500, 500, 500, 500, 500, 500, 500, 500, 500, 500 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case65() {
        int[] p = { 1, 2 };
        int[] l = { 0, 0 };
        int[] r = { 1, 3 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case66() {
        int[] p = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
        int[] l = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] r = { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
        assertEquals("Possible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case67() {
        int[] p = { 1, 3 };
        int[] l = { 1, 7 };
        int[] r = { 5, 10 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

    @Test
    public void case68() {
        int[] p = { 2, 2, 5, 5, 5 };
        int[] l = { 0, 0, 0, 4, 4 };
        int[] r = { 3, 3, 3, 6, 6 };
        assertEquals("Impossible", segmentsandpoints.isPossible(p, l, r));
    }

}
