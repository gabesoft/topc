package topc.test.greedy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.greedy.*;

public class ToastXToastTest {
    ToastXToast toastxtoast = new ToastXToast();

    @Test
    public void case1() {
        int[] undertoasted = { 2, 4 };
        int[] overtoasted = { 5, 6, 3 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case2() {
        int[] undertoasted = { 5 };
        int[] overtoasted = { 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case3() {
        int[] undertoasted = { 1, 2, 3 };
        int[] overtoasted = { 5, 6, 7 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case4() {
        int[] undertoasted = { 1, 9 };
        int[] overtoasted = { 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case5() {
        int[] undertoasted = { 5 };
        int[] overtoasted = { 1, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case6() {
        int[] undertoasted = { 1, 3, 5 };
        int[] overtoasted = { 2, 4, 6 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case7() {
        int[] undertoasted = { 735839, 932736, 109145, 397028, 517465, 207406, 350428, 579816, 875543, 368533, 326813, 425743, 230971, 550406, 579185, 625660, 889853, 822413, 267955, 271339, 234715, 448283, 508213, 387540, 534937, 938929, 606930, 161761, 495832, 304008, 352423, 127120, 47778, 840688, 235059, 5795, 586238, 325181, 521233, 100197, 821738, 200641, 836909, 401010, 329139, 74420, 986876, 359699, 463839, 340523 };
        int[] overtoasted = { 537944, 269355, 391507, 79844, 184434, 620382, 109043, 371095, 791998, 368933, 203282, 423223, 667857, 751755, 785085, 722612, 344513, 799587, 104655, 408308, 61921, 595088, 963943, 451077, 671166, 723616, 676489, 768297, 622310, 763305, 183600, 3908, 524969, 47090, 848618, 349015, 43985, 461720, 529676, 851271, 866828, 315667, 660149, 285370, 412078, 812780, 354211, 978520, 120334, 530443 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case8() {
        int[] undertoasted = { 633059, 584771, 406146, 840251, 594748, 310456, 462815, 281576, 198883, 912620, 571328, 760620, 91229, 777519, 288124, 304633, 595993, 276013, 569379, 248439, 94659, 966887, 101750, 726697, 821883, 703099, 496797, 844336, 863046, 773131, 443802, 958223, 523185, 990832, 105665, 251972, 190354, 976759, 279027, 117475, 244720, 434224, 761754, 176464, 856930, 491985, 687454, 500439, 107063, 352911 };
        int[] overtoasted = { 409766, 218498, 668585, 490201, 795823, 166504, 625661, 917131, 404915, 814232, 203425, 309747, 851104, 915771, 470142, 609592, 812681, 770127, 694625, 947264, 30160, 980193, 572717, 701060, 822874, 370278, 140648, 331947, 325568, 6072, 375386, 222185, 25530, 809105, 562341, 973244, 355806, 337153, 413773, 130349, 41739, 209142, 503044, 373812, 496785, 192168, 122543, 70256, 293281, 916104 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case9() {
        int[] undertoasted = { 90483, 893330, 165715, 687090, 860972, 573571, 636513, 111313, 693302, 295559, 871054, 245652, 334280, 913288, 246538, 603875, 828379, 880678, 108371, 434983, 470931, 65890, 946987, 961878, 467906, 355698, 532718, 791432, 976698, 438546, 344464, 457267, 831635, 344843, 435460, 210206, 562137, 618602, 490613, 941423, 249463, 922152, 49753, 856067, 259611, 436175, 462877, 738430, 547716, 680188 };
        int[] overtoasted = { 376682, 471502, 828127, 613652, 710868, 48066, 607458, 660245, 231074, 992613, 846866, 893926, 865489, 86532, 549124, 477260, 872144, 995382, 608790, 198913, 455284, 146718, 940362, 440354, 527543, 462080, 71311, 945263, 458140, 756288, 726398, 286209, 622625, 627209, 755392, 531557, 322743, 999356, 208726, 166099, 458746, 271427, 187350, 925672, 638795, 785304, 277720, 604136, 761925, 578739 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case10() {
        int[] undertoasted = { 525305, 388125, 590499, 624979, 889213, 192049, 736017, 710591, 641731, 37397, 846645, 424210, 914105, 696891, 604450, 909913, 118321, 278260, 738463, 109599, 784263, 858490, 669979, 523775, 236543, 999884, 629857, 400090, 988102, 451678, 228854, 244920, 529602, 98696, 236090, 888983, 926964, 418912, 462880, 448336, 839930, 445028, 650339, 603550, 584542, 499216, 211870, 924242, 744109, 435838 };
        int[] overtoasted = { 303949, 127971, 953926, 727237, 843591, 111166, 536549, 243306, 778645, 151384, 715094, 316113, 137569, 96894, 945489, 490819, 18148, 705882, 478829, 754325, 599663, 423477, 954007, 708931, 150746, 589229, 928353, 609671, 551130, 868139, 682848, 936099, 866300, 727416, 160869, 732311, 593373, 595213, 377143, 218989, 287137, 502804, 637391, 98789, 73788, 329010, 538537, 535153, 267977, 839491 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case11() {
        int[] undertoasted = { 29608, 84520, 325595, 541440, 610586, 301837, 971771, 996715, 978598, 877334, 143461, 572691, 881844, 606957, 912998, 652309, 235431, 24198, 761987, 753172, 71989, 431586, 361167, 395567, 942595, 172618, 471051, 457913, 319852, 474348, 596252, 41975, 86361, 809003, 141742, 716247, 457964, 53415, 210139, 729789, 156633, 433961, 176568, 718306, 831840, 334183, 301636, 68729, 54844, 216455 };
        int[] overtoasted = { 700264, 995039, 261255, 636120, 43794, 918828, 297531, 840317, 800899, 614224, 234124, 321785, 970822, 704858, 637668, 117261, 362634, 303686, 808544, 769651, 651670, 427449, 962617, 677590, 943654, 867671, 81821, 376855, 995765, 407443, 66774, 642849, 822253, 600459, 384067, 403192, 242500, 504083, 528445, 593210, 930838, 741450, 586967, 993042, 505944, 200239, 233705, 498923, 913004, 871490 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case12() {
        int[] undertoasted = { 479932 };
        int[] overtoasted = { 559290 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case13() {
        int[] undertoasted = { 365060 };
        int[] overtoasted = { 506318, 370795, 542687 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case14() {
        int[] undertoasted = { 622066 };
        int[] overtoasted = { 773968, 717360, 195006, 276290, 154765, 701232, 705778, 404726 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case15() {
        int[] undertoasted = { 800259 };
        int[] overtoasted = { 554823, 985084, 187749, 285604, 164430, 578834, 872260, 560167, 263684, 6756, 402017, 628922, 833588, 721863, 519758, 331633, 912703, 792880, 129844, 351334 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case16() {
        int[] undertoasted = { 543131 };
        int[] overtoasted = { 277952, 810113, 989305, 863586, 135592, 113407, 397298, 402678, 680712, 677337, 57402, 986013, 856760, 595165, 510066, 799269, 301067, 257607, 630286, 26298, 214677, 252412, 716458, 552998, 54907, 373734, 298205, 946891, 239643, 497256, 170938, 361256, 293743, 348410, 492101, 702113, 199916, 173510, 965616, 871631, 428685, 295325, 659132, 686242, 47995, 593431, 456194, 910964, 726881, 273869 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case17() {
        int[] undertoasted = { 516401 };
        int[] overtoasted = { 760895, 749675, 688702, 124610, 306731, 135114, 480937, 146884, 485253, 302254, 908663, 217147, 773837, 399027, 876050, 309469, 542303, 384144, 981361, 7190, 632889, 368147, 341579, 639508, 260636, 765844, 752456, 665377, 248204, 542160, 701335, 509773, 934968, 805685, 759483, 308239, 6417, 517093, 867476, 150298, 881907, 791931, 882380, 558817, 648491, 705587, 387798, 339569, 979579, 624082 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case18() {
        int[] undertoasted = { 643208, 908561, 153121 };
        int[] overtoasted = { 453008 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case19() {
        int[] undertoasted = { 543576, 404124, 273073 };
        int[] overtoasted = { 191943, 178483, 948730 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case20() {
        int[] undertoasted = { 602050, 58236, 190526 };
        int[] overtoasted = { 889187, 995, 491620, 342901, 720339, 163643, 902282, 184275 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case21() {
        int[] undertoasted = { 843495, 556385, 333738 };
        int[] overtoasted = { 369674, 111617, 453498, 898713, 418352, 889509, 658799, 637595, 812011, 338026, 789873, 767424, 772839, 962380, 579531, 399017, 99337, 487813, 266504, 184369 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case22() {
        int[] undertoasted = { 302893, 126664, 651686 };
        int[] overtoasted = { 405672, 597948, 846409, 395223, 325717, 459701, 322987, 459786, 798266, 604604, 168765, 132152, 916111, 763855, 926497, 390873, 379788, 4365, 604652, 863447, 605572, 924305, 817675, 420534, 506700, 790290, 109200, 846476, 902567, 582094, 914268, 943151, 67617, 884502, 566706, 277254, 38145, 627681, 490480, 186517, 958939, 567394, 98066, 851082, 799083, 433028, 593036, 313131, 434081, 782004 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case23() {
        int[] undertoasted = { 70838, 798682, 706256 };
        int[] overtoasted = { 992474, 97822, 168567, 689975, 588360, 801094, 997378, 220430, 702416, 467357, 974112, 534184, 423163, 394944, 991146, 122391, 226453, 585643, 938397, 748977, 833456, 124565, 607392, 26864, 997494, 398884, 679204, 872407, 195602, 323973, 611648, 549475, 370349, 663792, 474211, 710202, 481316, 530125, 911720, 923616, 405502, 305405, 331080, 300229, 737988, 393833, 388030, 431521, 428698, 467009 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case24() {
        int[] undertoasted = { 444966, 889811, 439360, 161932, 472346, 511699, 340323, 933681 };
        int[] overtoasted = { 471019 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case25() {
        int[] undertoasted = { 515053, 905753, 961572, 246732, 253055, 127939, 126929, 921645 };
        int[] overtoasted = { 134633, 620816, 912608 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case26() {
        int[] undertoasted = { 550478, 261500, 211308, 409913, 953707, 402049, 739530, 919783 };
        int[] overtoasted = { 43477, 403640, 627498, 723010, 996089, 805890, 738484, 828817 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case27() {
        int[] undertoasted = { 275848, 686165, 776094, 212757, 248636, 996510, 286844, 609588 };
        int[] overtoasted = { 372010, 104060, 685070, 435069, 455503, 169039, 699178, 736831, 373184, 82332, 542226, 264268, 443748, 22710, 190423, 649386, 594095, 293586, 356553, 3830 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case28() {
        int[] undertoasted = { 775155, 362946, 396940, 832065, 327175, 436974, 429749, 726957 };
        int[] overtoasted = { 236387, 135617, 917603, 399336, 690445, 482589, 962701, 658748, 138735, 505611, 114565, 764397, 535615, 813071, 280869, 487455, 96974, 546651, 941273, 952929, 843998, 212771, 877095, 830867, 30850, 852247, 635691, 877259, 667983, 989747, 161276, 804206, 174080, 602506, 151273, 847967, 417725, 569451, 513173, 343349, 999314, 820030, 629224, 751579, 840320, 870187, 784314, 534281, 176280, 916478 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case29() {
        int[] undertoasted = { 100170, 234375, 704011, 667867, 868608, 778104, 70887, 543745 };
        int[] overtoasted = { 428004, 892379, 394776, 255269, 305549, 312940, 220949, 899013, 159589, 736028, 64746, 186069, 145070, 90083, 617539, 497363, 832004, 583648, 411816, 689708, 58770, 202186, 94148, 50976, 492502, 642237, 297288, 888341, 669672, 986242, 933109, 698969, 54131, 92889, 682871, 942815, 330591, 35165, 479843, 653572, 248596, 930905, 495961, 167378, 690533, 200203, 427725, 64394, 978199, 424840 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case30() {
        int[] undertoasted = { 802573, 130394, 748784, 403387, 952410, 235573, 666756, 136757, 348037, 240552, 435383, 861944, 852323, 965165, 186792, 825213, 555957, 863188, 739877, 249895 };
        int[] overtoasted = { 548827 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case31() {
        int[] undertoasted = { 752681, 353351, 419688, 572127, 988057, 369587, 433146, 365579, 971147, 565944, 269217, 152640, 49395, 500687, 180746, 276557, 694241, 399839, 507543, 755027 };
        int[] overtoasted = { 373460, 812727, 281881 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case32() {
        int[] undertoasted = { 731581, 208608, 79072, 216357, 50531, 636951, 68973, 641444, 529395, 5106, 840640, 727893, 634139, 451381, 573646, 436604, 433986, 221298, 610020, 34957 };
        int[] overtoasted = { 765740, 790279, 250952, 564528, 58931, 554654, 380201, 453188 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case33() {
        int[] undertoasted = { 679535, 8376, 345722, 28118, 81413, 62131, 327177, 674399, 24340, 181015, 478796, 618672, 962329, 154585, 279290, 29120, 111420, 647399, 106799, 32918 };
        int[] overtoasted = { 530278, 105865, 129205, 415472, 653624, 421643, 877187, 684856, 857022, 746735, 759875, 560427, 78679, 130776, 620745, 948826, 835806, 817680, 8404, 257740 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case34() {
        int[] undertoasted = { 227652, 265643, 154348, 871671, 703863, 10958, 5977, 275592, 863210, 89337, 305293, 732119, 769668, 141213, 547564, 259474, 748806, 24080, 945504, 64637 };
        int[] overtoasted = { 738210, 336627, 942751, 684338, 445853, 434240, 481733, 274221, 597961, 821491, 399254, 730542, 195570, 850085, 99413, 775278, 379483, 558952, 235137, 770345, 766791, 751589, 801974, 70865, 895790, 105420, 534718, 657077, 276630, 187560, 210234, 326389, 532555, 515426, 339213, 641426, 574927, 752602, 649206, 391842, 511219, 17245, 507121, 561004, 583790, 214923, 527606, 499763, 265092, 600758 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case35() {
        int[] undertoasted = { 917004, 656191, 43544, 792001, 126227, 726338, 142572, 759574, 449654, 323700, 498378, 243047, 82009, 779449, 65690, 105138, 727703, 719231, 403141, 775403 };
        int[] overtoasted = { 684731, 665124, 220873, 469873, 717310, 481477, 317539, 477876, 523548, 50906, 131696, 830782, 357206, 960597, 416663, 614473, 981356, 140956, 255012, 302614, 293573, 582725, 42478, 286847, 798920, 567890, 600296, 929459, 868023, 514509, 2430, 875831, 456340, 259158, 488237, 1960, 515748, 89815, 59338, 504435, 251018, 756922, 48846, 41880, 161506, 220036, 814510, 480377, 690381, 830129 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case36() {
        int[] undertoasted = { 776995, 2368, 946124, 904980, 510993, 268550, 192097, 643347, 497645, 581618, 301507, 747617, 409264, 732938, 999016, 676178, 82648, 863376, 879106, 116354, 441385, 265999, 575217, 319330, 342165, 885331, 281953, 544131, 332936, 660593, 944101, 954429, 205478, 289356, 756787, 618124, 237404, 704241, 417684, 143785, 800665, 792443, 946667, 758351, 388774, 353401, 117584, 196748, 443207, 921033 };
        int[] overtoasted = { 766417 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case37() {
        int[] undertoasted = { 42578, 108620, 619598, 560677, 752916, 596925, 770185, 403514, 455462, 745763, 607925, 350935, 602165, 191977, 957580, 260015, 468687, 960216, 282741, 289179, 246166, 479434, 403087, 521901, 30829, 228160, 682974, 158583, 147932, 596450, 87201, 187592, 283970, 468206, 29131, 900032, 331033, 721536, 854011, 967645, 376595, 601829, 266822, 277934, 464798, 997466, 327889, 660846, 52029, 626166 };
        int[] overtoasted = { 702578, 232336, 618351 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case38() {
        int[] undertoasted = { 125411, 997347, 97083, 558168, 772860, 797060, 938486, 481666, 947206, 363101, 922799, 992485, 388094, 136412, 519245, 198260, 51179, 532053, 545121, 155626, 540343, 656503, 487804, 50397, 368363, 496474, 431984, 843391, 949491, 419567, 265251, 341277, 864096, 364182, 809170, 723789, 265581, 670940, 820270, 548555, 444883, 399118, 411986, 23656, 139053, 107827, 515990, 759451, 479945, 789913 };
        int[] overtoasted = { 895420, 393693, 269913, 838909, 264593, 773487, 574356, 212784 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case39() {
        int[] undertoasted = { 10669, 771028, 356851, 314145, 901383, 697325, 763291, 929378, 705955, 902096, 805607, 138366, 244597, 605863, 392434, 241053, 390270, 712249, 58860, 651689, 976420, 141327, 771363, 950905, 256718, 240714, 936730, 64626, 94104, 715700, 344732, 170307, 993301, 309365, 459812, 678315, 603071, 500715, 665952, 525339, 270391, 420973, 326919, 148348, 664334, 709740, 431114, 137757, 466811, 729582 };
        int[] overtoasted = { 754756, 931227, 910435, 946615, 182413, 299708, 516839, 914090, 758096, 170372, 286541, 859299, 532527, 489271, 608797, 384913, 714017, 522769, 438241, 51971 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case40() {
        int[] undertoasted = { 385581, 632502, 862115, 894820, 556457, 642006, 359348, 565754, 309901, 682064, 74631, 108570, 48875, 946688, 398572, 753134, 994669, 915104, 347662, 307543, 606361, 706791, 547118, 692892, 284267, 168342, 522432, 321805, 175941, 469197, 100351, 426418, 809625, 720988, 590112, 973212, 675730, 193282, 289410, 777550, 57028, 288426, 943866, 997285, 726548, 437866, 847148, 605089, 32365, 790730 };
        int[] overtoasted = { 478765, 702462, 632453, 227099, 90226, 719594, 390324, 88595, 209000, 959963, 755414, 362547, 390413, 275050, 970172, 465036, 23616, 558007, 892244, 323683, 729212, 303695, 45843, 540337, 742404, 129767, 258322, 256671, 137967, 238768, 180613, 806757, 306340, 501271, 11075, 502502, 620265, 362953, 985685, 777944, 566527, 326359, 142352, 737273, 187524, 298857, 472343, 827166, 752468, 957680 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case41() {
        int[] undertoasted = { 947157, 392357, 198101, 616313, 184319, 96984, 976047, 488279, 443603, 211789, 508539, 388006, 822185, 947759, 921065, 88110, 193074, 517987, 331696, 995783, 19378, 301236, 459183, 295508, 315815, 399832, 381428, 11435, 963454, 147855, 446500, 123023, 265221, 265970, 926766, 777464, 255505, 38310, 648967, 989370, 662549, 384584, 45607, 397981, 700112, 237786, 960985, 308293, 179533, 623509 };
        int[] overtoasted = { 124410, 869246, 128489, 709517, 925645, 956388, 265762, 968619, 947838, 614144, 334923, 764603, 132473, 337624, 799892, 304881, 529832, 60428, 262117, 217297, 749729, 217832, 305184, 281527, 511424, 434755, 563189, 368938, 267286, 468163, 389631, 250227, 599306, 549714, 360544, 690371, 866993, 491647, 100611, 120125, 481358, 794707, 439004, 956084, 254615, 241559, 805683, 149773, 426624, 376792 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case42() {
        int[] undertoasted = { 536609, 625009, 16585, 191678, 682985, 966188, 67824, 434477, 632390, 73319, 853738, 229057, 48868, 140055, 960971, 974975, 483353, 425912, 629558, 717219, 211838, 4488, 371744, 472747, 774408, 411602, 530544, 605968, 274681, 660361, 426562, 899330, 471456, 920751, 118202, 198415, 831403, 233468, 617187, 288546, 171391, 658485, 725917, 344037, 390552, 768332, 499863, 505584, 328648, 115750 };
        int[] overtoasted = { 832579 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case43() {
        int[] undertoasted = { 459386, 418938, 34949, 320680, 163161, 514980, 574919, 150225, 723836, 157013, 803429, 556210, 813698, 437486, 646879, 24789, 900487, 735190, 816169, 228049, 66864, 581482, 712377, 201676, 175831, 302241, 570417, 648257, 48472, 721703, 226642, 42731, 376437, 231428, 543821, 866146, 738708, 417155, 658227, 830980, 982205, 303771, 497055, 805772, 590229, 936428, 354327, 385523, 261984, 522003 };
        int[] overtoasted = { 864061, 135170, 587251 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case44() {
        int[] undertoasted = { 687415, 196561, 495270, 526506, 61146, 837863, 762248, 934733, 252315, 358267, 714820, 388998, 937739, 362479, 753931, 348164, 199022, 575060, 990468, 507366, 373568, 253761, 570308, 44824, 171045, 312006, 860163, 100541, 163168, 950259, 917500, 918320, 415834, 316724, 222107, 466308, 591034, 973399, 845587, 646266, 362291, 497912, 425632, 727211, 218807, 299409, 294300, 474623, 415948, 380745 };
        int[] overtoasted = { 487603, 971295, 484166, 385601, 391090, 38479, 573041, 950865 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case45() {
        int[] undertoasted = { 987000, 774245, 944083, 802786, 22825, 446828, 974103, 604618, 190846, 337857, 60191, 748557, 463390, 481361, 754303, 114639, 99297, 877552, 628520, 171324, 95695, 594826, 498887, 846137, 880243, 434257, 141493, 933198, 126412, 197878, 844754, 947483, 185466, 802294, 312299, 765529, 923632, 111942, 568511, 997733, 893982, 506999, 260, 529907, 400750, 800433, 838845, 588728, 684419, 669375 };
        int[] overtoasted = { 922815, 944090, 787828, 372783, 869219, 129330, 794608, 206416, 942912, 448394, 813559, 967899, 968308, 769351, 130125, 487795, 439565, 153615, 309541, 152280 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case46() {
        int[] undertoasted = { 557648, 537704, 248681, 296307, 341599, 829900, 782346, 147332, 191545, 908626, 674884, 100184, 356454, 819060, 858902, 691089, 603668, 392749, 429655, 566093, 259986, 669646, 722900, 998978, 578989, 81772, 869730, 37375, 279337, 703196, 573520, 845707, 245635, 543821, 215648, 516240, 952856, 38433, 788139, 992841, 617700, 456157, 21417, 217397, 418894, 197150, 347326, 847066, 640328, 437590 };
        int[] overtoasted = { 763180, 70133, 845458, 524908, 492837, 594993, 182774, 480177, 378129, 220785, 622618, 36202, 560640, 76794, 459241, 919520, 129698, 768415, 768316, 278430, 574434, 418703, 822735, 216585, 202113, 152127, 221163, 973411, 639676, 603990, 649661, 322395, 406142, 115941, 169684, 239047, 251771, 715120, 671312, 674566, 801624, 485270, 552158, 357195, 685633, 824887, 380219, 183971, 883786, 422207 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case47() {
        int[] undertoasted = { 569713, 921972, 198717, 576497, 362535, 899457, 415757, 720703, 799710, 714966, 259427, 83360, 147891, 56921, 503355, 714117, 71931, 605104, 94965, 952305, 812303, 955978, 855975, 746, 678317, 629810, 249988, 294060, 215491, 733672, 699266, 997798, 303499, 76556, 858165, 81368, 303514, 685022, 763407, 471978, 720945, 346634, 700976, 922233, 743936, 120345, 409733, 981785, 509296, 591508 };
        int[] overtoasted = { 493766, 378241, 675593, 925956, 379828, 837067, 681667, 606859, 851199, 494702, 226690, 967670, 550729, 967339, 54275, 55484, 849105, 697429, 895837, 991665, 921823, 944074, 357241, 989029, 747090, 714723, 568452, 659431, 810975, 547045, 965251, 872172, 731663, 271669, 318150, 857325, 152784, 593301, 720962, 653093, 906253, 4178, 41446, 264642, 868288, 335497, 622681, 737593, 350865, 773507 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case48() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case49() {
        int[] undertoasted = { 1267, 155982, 757552, 329077, 847821, 800703, 273752, 650008, 353189, 516046, 770935, 31584, 892808, 575499, 225988, 828397, 796438, 975100, 844143, 306554, 178057, 738945, 99701, 362268, 664978, 636874, 692281, 432639, 112054, 212943, 251164, 544297, 629478, 381150, 589028, 455963, 449449, 504307, 312880, 863554, 204038, 944639, 712257, 52412, 962705, 978282, 419068, 266872, 446168 };
        int[] overtoasted = { 452622, 959137, 818476, 364661, 588506, 322800, 648333, 31326, 796574, 90150, 978331, 247840, 434694, 269177, 403304, 708426, 670958, 737798, 629593, 430213, 862603, 447790, 748971, 101201, 40868, 354613, 592645, 765540, 976024, 212231, 524289, 847481, 200511, 567001, 253443, 504487, 972476, 937125, 495075, 785624, 225291, 294518, 331994, 159216, 662400, 831102, 137711, 889334, 308742 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case50() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        int[] overtoasted = { 504487, 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case51() {
        int[] undertoasted = { 353189, 354613, 331994, 269177, 200511, 381150, 308742, 178057, 329077, 212231, 419068, 1267, 434694, 212943, 204038, 455963, 447790, 306554, 403304, 225988, 312880, 432639, 247840, 40868, 430213, 225291, 504307, 449449, 266872, 495075, 52412, 101201, 452622, 251164, 159216, 31326, 364661, 99701, 90150, 137711, 294518, 155982, 322800, 31584, 112054, 362268, 273752, 253443, 446168 };
        int[] overtoasted = { 588506, 978282, 800703, 976024, 692281, 962705, 796574, 504487, 738945, 785624, 847481, 892808, 592645, 524289, 765540, 831102, 972476, 648333, 589028, 629478, 748971, 575499, 818476, 770935, 862603, 944639, 708426, 664978, 796438, 516046, 828397, 567001, 662400, 847821, 757552, 712257, 959137, 650008, 629593, 889334, 737798, 978331, 544297, 863554, 636874, 975100, 670958, 937125, 844143 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case52() {
        int[] undertoasted = { 504487, 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case53() {
        int[] undertoasted = { 737798, 976024, 818476, 592645, 712257, 664978, 831102, 978331, 937125, 847481, 962705, 828397, 765540, 847821, 889334, 589028, 844143, 504487, 757552, 575499, 959137, 544297, 975100, 629478, 800703, 796438, 670958, 524289, 770935, 662400, 692281, 588506, 708426, 862603, 892808, 567001, 650008, 863554, 636874, 785624, 629593, 738945, 648333, 516046, 944639, 796574, 748971, 978282, 972476 };
        int[] overtoasted = { 432639, 251164, 322800, 449449, 31326, 364661, 40868, 212231, 495075, 312880, 294518, 137711, 273752, 52412, 266872, 269177, 362268, 419068, 434694, 430213, 447790, 112054, 403304, 331994, 308742, 99701, 247840, 31584, 353189, 225291, 204038, 329077, 446168, 225988, 212943, 306554, 155982, 101201, 159216, 504307, 253443, 455963, 381150, 90150, 354613, 200511, 452622, 178057, 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case54() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331, 991390 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case55() {
        int[] undertoasted = { 944639, 212943, 575499, 419068, 516046, 99701, 449449, 362268, 155982, 978282, 828397, 266872, 312880, 664978, 251164, 847821, 446168, 31584, 273752, 504307, 692281, 770935, 757552, 589028, 455963, 112054, 544297, 381150, 844143, 892808, 712257, 432639, 329077, 225988, 650008, 800703, 975100, 636874, 353189, 629478, 306554, 204038, 178057, 52412, 962705, 738945, 863554, 1267, 796438 };
        int[] overtoasted = { 308742, 322800, 40868, 785624, 101201, 247840, 137711, 495075, 567001, 447790, 831102, 31326, 253443, 269177, 972476, 524289, 294518, 765540, 708426, 796574, 90150, 592645, 889334, 862603, 648333, 200511, 159216, 818476, 847481, 748971, 937125, 212231, 331994, 225291, 430213, 737798, 978331, 403304, 959137, 991390, 662400, 354613, 364661, 452622, 629593, 670958, 504487, 976024, 588506, 434694 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case56() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        int[] overtoasted = { 504487, 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331, 989735 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case57() {
        int[] undertoasted = { 495075, 247840, 225988, 137711, 204038, 306554, 269177, 251164, 266872, 212943, 308742, 1267, 381150, 155982, 40868, 273752, 362268, 99701, 52412, 212231, 200511, 31584, 101201, 449449, 432639, 354613, 178057, 364661, 504307, 31326, 329077, 430213, 403304, 452622, 447790, 312880, 159216, 225291, 455963, 253443, 434694, 446168, 294518, 331994, 419068, 112054, 353189, 90150, 322800 };
        int[] overtoasted = { 962705, 959137, 592645, 944639, 504487, 796574, 785624, 889334, 892808, 567001, 765540, 670958, 648333, 589028, 712257, 847481, 989735, 588506, 800703, 937125, 516046, 863554, 828397, 796438, 831102, 692281, 737798, 978331, 976024, 575499, 818476, 544297, 650008, 629478, 975100, 862603, 972476, 636874, 844143, 738945, 770935, 847821, 708426, 664978, 629593, 748971, 524289, 757552, 978282, 662400 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case58() {
        int[] undertoasted = { 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331, 989735 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case59() {
        int[] undertoasted = { 748971, 524289, 937125, 650008, 847481, 978331, 757552, 636874, 765540, 664978, 588506, 592645, 589028, 737798, 989735, 818476, 889334, 847821, 959137, 662400, 962705, 648333, 892808, 708426, 629478, 567001, 629593, 796438, 863554, 862603, 844143, 976024, 516046, 738945, 770935, 975100, 800703, 712257, 692281, 831102, 944639, 544297, 828397, 796574, 575499, 670958, 972476, 785624, 978282 };
        int[] overtoasted = { 364661, 31326, 155982, 403304, 212943, 419068, 31584, 212231, 99701, 269177, 266872, 159216, 504487, 253443, 90150, 353189, 101201, 1267, 306554, 137711, 446168, 273752, 247840, 308742, 225291, 362268, 329077, 452622, 430213, 225988, 504307, 112054, 432639, 204038, 52412, 434694, 447790, 200511, 495075, 455963, 294518, 251164, 449449, 312880, 178057, 354613, 40868, 381150, 331994, 322800 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case60() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282 };
        int[] overtoasted = { 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case61() {
        int[] undertoasted = { 212943, 1267, 455963, 504307, 975100, 266872, 419068, 251164, 664978, 204038, 353189, 844143, 306554, 52412, 575499, 381150, 828397, 31584, 692281, 650008, 636874, 446168, 312880, 962705, 155982, 178057, 800703, 329077, 362268, 847821, 273752, 978282, 112054, 738945, 796438, 892808, 629478, 99701, 432639, 770935, 757552, 863554, 516046, 225988, 589028, 449449, 944639, 712257, 544297 };
        int[] overtoasted = { 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case62() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        int[] overtoasted = { 504487 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case63() {
        int[] undertoasted = { 212943, 101201, 31584, 112054, 449449, 52412, 430213, 419068, 446168, 266872, 31326, 353189, 99701, 455963, 362268, 403304, 434694, 137711, 354613, 178057, 159216, 204038, 273752, 322800, 225988, 1267, 269177, 432639, 308742, 447790, 504307, 364661, 294518, 495075, 253443, 306554, 200511, 247840, 90150, 251164, 225291, 452622, 312880, 40868, 381150, 329077, 212231, 155982, 331994 };
        int[] overtoasted = { 504487 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case64() {
        int[] undertoasted = { 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case65() {
        int[] undertoasted = { 99701, 90150, 225988, 225291, 137711, 354613, 159216, 331994, 447790, 322800, 381150, 329077, 247840, 155982, 294518, 269177, 101201, 419068, 31584, 504487, 455963, 362268, 266872, 495075, 253443, 504307, 364661, 434694, 204038, 430213, 178057, 432639, 273752, 403304, 449449, 212231, 212943, 200511, 308742, 306554, 452622, 446168, 40868, 31326, 312880, 112054, 52412, 353189, 251164 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case66() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282 };
        int[] overtoasted = { 31326, 40868 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case67() {
        int[] undertoasted = { 212943, 329077, 99701, 516046, 757552, 251164, 796438, 306554, 962705, 362268, 589028, 828397, 381150, 225988, 650008, 52412, 273752, 944639, 353189, 544297, 204038, 178057, 712257, 504307, 863554, 692281, 770935, 112054, 975100, 636874, 847821, 266872, 449449, 31584, 844143, 892808, 978282, 1267, 155982, 312880, 800703, 446168, 455963, 664978, 575499, 432639, 419068, 738945, 629478 };
        int[] overtoasted = { 31326, 40868 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case68() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        int[] overtoasted = { 504487, 516046 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case69() {
        int[] undertoasted = { 251164, 212231, 90150, 225291, 322800, 419068, 52412, 1267, 306554, 225988, 329077, 446168, 294518, 447790, 253443, 155982, 137711, 430213, 204038, 308742, 31584, 455963, 354613, 31326, 331994, 364661, 99701, 101201, 212943, 449449, 452622, 40868, 159216, 266872, 495075, 381150, 247840, 403304, 269177, 432639, 362268, 178057, 273752, 112054, 434694, 312880, 504307, 200511, 353189 };
        int[] overtoasted = { 516046, 504487 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case70() {
        int[] undertoasted = { 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487, 516046 };
        int[] overtoasted = { 1267, 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case71() {
        int[] undertoasted = { 294518, 452622, 212231, 504307, 200511, 430213, 137711, 155982, 312880, 381150, 516046, 247840, 31584, 52412, 204038, 99701, 495075, 253443, 308742, 364661, 362268, 112054, 101201, 159216, 40868, 353189, 266872, 419068, 225988, 178057, 455963, 449449, 434694, 90150, 504487, 322800, 432639, 446168, 354613, 225291, 251164, 403304, 329077, 212943, 273752, 331994, 306554, 269177, 447790 };
        int[] overtoasted = { 31326, 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case72() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282, 989735 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case73() {
        int[] undertoasted = { 266872, 112054, 204038, 99701, 589028, 504307, 432639, 636874, 1267, 692281, 544297, 738945, 650008, 178057, 446168, 449449, 225988, 828397, 863554, 306554, 516046, 312880, 892808, 989735, 800703, 155982, 944639, 796438, 664978, 975100, 329077, 455963, 273752, 212943, 419068, 962705, 712257, 381150, 844143, 770935, 251164, 353189, 757552, 847821, 31584, 575499, 629478, 362268, 978282, 52412 };
        int[] overtoasted = { 159216, 796574, 225291, 354613, 447790, 430213, 504487, 294518, 247840, 737798, 308742, 847481, 364661, 831102, 212231, 322800, 976024, 403304, 434694, 495075, 662400, 937125, 785624, 253443, 101201, 269177, 588506, 452622, 862603, 889334, 137711, 648333, 90150, 40868, 331994, 972476, 670958, 31326, 818476, 708426, 524289, 567001, 765540, 978331, 959137, 748971, 200511, 629593, 592645 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case74() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        int[] overtoasted = { 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331, 989735 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case75() {
        int[] undertoasted = { 31584, 212231, 362268, 381150, 446168, 212943, 40868, 308742, 430213, 294518, 434694, 329077, 322800, 31326, 155982, 364661, 403304, 419068, 99701, 353189, 312880, 273752, 247840, 225291, 112054, 495075, 159216, 449449, 455963, 204038, 432639, 137711, 452622, 90150, 101201, 52412, 331994, 178057, 1267, 447790, 225988, 253443, 269177, 504307, 354613, 504487, 200511, 266872, 251164, 306554 };
        int[] overtoasted = { 648333, 889334, 567001, 629593, 588506, 800703, 975100, 770935, 589028, 862603, 818476, 847821, 796574, 989735, 524289, 544297, 765540, 978282, 712257, 962705, 978331, 650008, 664978, 629478, 944639, 757552, 976024, 636874, 937125, 708426, 796438, 692281, 844143, 863554, 847481, 738945, 831102, 748971, 972476, 785624, 670958, 828397, 737798, 892808, 662400, 516046, 959137, 592645, 575499 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case76() {
        int[] undertoasted = { 504487, 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331, 989735 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case77() {
        int[] undertoasted = { 757552, 818476, 937125, 863554, 738945, 650008, 785624, 828397, 989735, 524289, 831102, 796438, 944639, 670958, 712257, 544297, 975100, 892808, 847821, 504487, 847481, 692281, 664978, 516046, 567001, 737798, 862603, 629593, 976024, 748971, 962705, 648333, 708426, 978282, 770935, 575499, 765540, 889334, 972476, 796574, 800703, 636874, 588506, 978331, 959137, 844143, 629478, 662400, 592645, 589028 };
        int[] overtoasted = { 137711, 452622, 31584, 225291, 294518, 329077, 247840, 432639, 1267, 266872, 446168, 52412, 364661, 251164, 90150, 31326, 99701, 331994, 322800, 312880, 354613, 212943, 455963, 253443, 403304, 308742, 430213, 434694, 306554, 225988, 269177, 155982, 273752, 112054, 495075, 504307, 200511, 40868, 362268, 447790, 381150, 212231, 159216, 419068, 353189, 101201, 204038, 449449, 178057 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case78() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282, 989735 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331, 991390 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case79() {
        int[] undertoasted = { 828397, 712257, 544297, 692281, 516046, 664978, 975100, 178057, 589028, 446168, 155982, 251164, 99701, 844143, 432639, 362268, 770935, 636874, 353189, 52412, 796438, 575499, 329077, 306554, 312880, 455963, 847821, 504307, 273752, 31584, 266872, 629478, 800703, 962705, 112054, 204038, 419068, 381150, 449449, 738945, 225988, 892808, 978282, 1267, 757552, 212943, 650008, 944639, 863554, 989735 };
        int[] overtoasted = { 748971, 403304, 670958, 31326, 959137, 434694, 322800, 567001, 212231, 978331, 862603, 524289, 592645, 765540, 889334, 588506, 629593, 831102, 662400, 847481, 101201, 159216, 269177, 708426, 785624, 90150, 200511, 937125, 364661, 447790, 452622, 504487, 430213, 308742, 818476, 495075, 137711, 294518, 354613, 796574, 976024, 247840, 737798, 648333, 331994, 991390, 225291, 40868, 253443, 972476 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case80() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        int[] overtoasted = { 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331, 989735, 991390 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case81() {
        int[] undertoasted = { 354613, 306554, 294518, 419068, 266872, 90150, 159216, 329077, 362268, 353189, 1267, 312880, 212943, 269177, 251164, 112054, 225291, 447790, 178057, 225988, 99701, 273752, 432639, 452622, 40868, 504487, 455963, 495075, 446168, 434694, 322800, 364661, 308742, 504307, 381150, 212231, 200511, 31326, 52412, 253443, 449449, 31584, 403304, 331994, 137711, 430213, 247840, 155982, 204038, 101201 };
        int[] overtoasted = { 692281, 989735, 567001, 629478, 712257, 863554, 588506, 592645, 796574, 748971, 978331, 575499, 544297, 670958, 738945, 847481, 636874, 937125, 978282, 892808, 862603, 629593, 991390, 944639, 770935, 889334, 818476, 765540, 662400, 737798, 524289, 847821, 975100, 844143, 664978, 959137, 800703, 589028, 516046, 650008, 757552, 831102, 976024, 648333, 962705, 708426, 828397, 796438, 972476, 785624 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case82() {
        int[] undertoasted = { 516046, 524289, 544297, 567001, 575499, 588506, 589028, 592645, 629478, 629593, 636874, 648333, 650008, 662400, 664978, 670958, 692281, 708426, 712257, 737798, 738945, 748971, 757552, 765540, 770935, 785624, 796438, 796574, 800703, 818476, 828397, 831102, 844143, 847481, 847821, 862603, 863554, 889334, 892808, 937125, 944639, 959137, 962705, 972476, 975100, 976024, 978282, 978331, 989735, 991390 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case83() {
        int[] undertoasted = { 863554, 636874, 648333, 889334, 847481, 692281, 989735, 796574, 712257, 738945, 959137, 962705, 567001, 757552, 847821, 516046, 737798, 575499, 664978, 818476, 862603, 944639, 991390, 765540, 629478, 592645, 796438, 892808, 748971, 544297, 770935, 975100, 670958, 524289, 978331, 844143, 662400, 972476, 588506, 976024, 708426, 650008, 978282, 589028, 785624, 629593, 828397, 937125, 831102, 800703 };
        int[] overtoasted = { 306554, 504307, 504487, 447790, 430213, 322800, 308742, 253443, 225291, 212231, 31326, 353189, 329077, 419068, 178057, 159216, 455963, 266872, 31584, 362268, 452622, 155982, 381150, 294518, 212943, 354613, 99701, 204038, 364661, 331994, 432639, 312880, 40868, 269177, 403304, 225988, 90150, 449449, 247840, 112054, 273752, 200511, 251164, 446168, 101201, 137711, 495075, 1267, 52412, 434694 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case84() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282, 989735 };
        int[] overtoasted = { 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case85() {
        int[] undertoasted = { 844143, 975100, 449449, 944639, 306554, 989735, 770935, 204038, 712257, 664978, 432639, 962705, 828397, 757552, 362268, 312880, 1267, 31584, 978282, 847821, 99701, 629478, 225988, 446168, 112054, 544297, 738945, 650008, 329077, 575499, 212943, 52412, 251164, 892808, 504307, 353189, 155982, 455963, 589028, 419068, 863554, 381150, 266872, 273752, 796438, 516046, 800703, 178057, 636874, 692281 };
        int[] overtoasted = { 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case86() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        int[] overtoasted = { 516046 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case87() {
        int[] undertoasted = { 273752, 225291, 294518, 269177, 253443, 447790, 322800, 204038, 101201, 449449, 434694, 251164, 137711, 329077, 362268, 504487, 455963, 354613, 40868, 212943, 112054, 364661, 159216, 430213, 504307, 306554, 225988, 200511, 31326, 432639, 381150, 419068, 495075, 308742, 1267, 178057, 212231, 90150, 331994, 31584, 266872, 99701, 403304, 52412, 247840, 446168, 312880, 452622, 353189, 155982 };
        int[] overtoasted = { 516046 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case88() {
        int[] undertoasted = { 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487, 516046 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case89() {
        int[] undertoasted = { 200511, 495075, 455963, 155982, 449449, 225291, 353189, 452622, 362268, 434694, 306554, 212231, 432639, 294518, 504307, 251164, 112054, 269177, 331994, 52412, 381150, 247840, 308742, 266872, 504487, 322800, 90150, 137711, 212943, 101201, 447790, 430213, 419068, 354613, 225988, 31326, 159216, 312880, 204038, 446168, 516046, 253443, 403304, 99701, 40868, 364661, 329077, 31584, 178057, 273752 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case90() {
        int[] undertoasted = { 1267, 31584, 52412, 99701, 112054, 155982, 178057, 204038, 212943, 225988, 251164, 266872, 273752, 306554, 312880, 329077, 353189, 362268, 381150, 419068, 432639, 446168, 449449, 455963, 504307, 516046, 544297, 575499, 589028, 629478, 636874, 650008, 664978, 692281, 712257, 738945, 757552, 770935, 796438, 800703, 828397, 844143, 847821, 863554, 892808, 944639, 962705, 975100, 978282, 989735 };
        int[] overtoasted = { 31326, 40868 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case91() {
        int[] undertoasted = { 712257, 800703, 99701, 273752, 828397, 112054, 757552, 155982, 362268, 1267, 419068, 306554, 575499, 892808, 432639, 251164, 312880, 204038, 863554, 844143, 449449, 650008, 978282, 770935, 962705, 516046, 266872, 329077, 381150, 455963, 544297, 989735, 664978, 847821, 975100, 738945, 178057, 31584, 52412, 589028, 636874, 944639, 692281, 504307, 212943, 629478, 796438, 353189, 225988, 446168 };
        int[] overtoasted = { 40868, 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case92() {
        int[] undertoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        int[] overtoasted = { 516046, 524289 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case93() {
        int[] undertoasted = { 225291, 31584, 178057, 329077, 495075, 403304, 247840, 306554, 251164, 362268, 294518, 253443, 312880, 266872, 212943, 101201, 1267, 159216, 353189, 137711, 322800, 447790, 90150, 449449, 434694, 381150, 455963, 204038, 31326, 269177, 200511, 331994, 40868, 308742, 432639, 155982, 452622, 273752, 504487, 99701, 446168, 112054, 52412, 430213, 354613, 504307, 225988, 364661, 212231, 419068 };
        int[] overtoasted = { 516046, 524289 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case94() {
        int[] undertoasted = { 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487, 516046, 524289 };
        int[] overtoasted = { 1267, 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case95() {
        int[] undertoasted = { 329077, 455963, 432639, 354613, 90150, 449449, 112054, 308742, 434694, 31584, 225291, 269177, 155982, 212231, 381150, 524289, 331994, 322800, 452622, 504307, 178057, 251164, 419068, 306554, 516046, 447790, 364661, 495075, 52412, 159216, 225988, 200511, 40868, 430213, 99701, 204038, 266872, 294518, 446168, 253443, 273752, 101201, 212943, 137711, 312880, 403304, 247840, 362268, 504487, 353189 };
        int[] overtoasted = { 31326, 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case96() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case97() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 670958, 200511, 978331, 937125, 101201, 447790, 889334, 40868, 495075, 796574, 785624, 269177, 567001, 972476, 247840, 818476, 90150, 847481, 212231, 524289, 308742, 648333, 31326, 504487, 737798, 588506, 976024, 434694, 354613, 629593, 322800, 159216, 959137, 225291, 708426, 748971, 137711, 452622, 403304, 253443, 862603, 331994, 765540, 662400, 592645, 364661, 430213, 831102, 294518 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case98() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case99() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 452622, 155982, 434694, 200511, 430213, 447790, 504307, 52412, 504487, 306554, 40868, 251164, 354613, 381150, 90150, 449449, 212231, 403304, 101201, 331994, 312880, 31326, 362268, 294518, 31584, 159216, 253443, 266872, 269177, 495075, 178057, 364661, 432639, 419068, 247840, 455963, 446168, 137711, 225291, 308742, 225988, 112054, 329077, 204038, 212943, 99701, 353189, 322800, 273752 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case100() {
        int[] undertoasted = { 504487 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case101() {
        int[] undertoasted = { 504487 };
        int[] overtoasted = { 273752, 403304, 432639, 200511, 212231, 294518, 31584, 269177, 137711, 225291, 331994, 251164, 449449, 253443, 99701, 447790, 90150, 225988, 434694, 31326, 312880, 212943, 329077, 155982, 101201, 247840, 159216, 452622, 362268, 322800, 353189, 266872, 495075, 308742, 430213, 306554, 504307, 52412, 446168, 204038, 112054, 1267, 455963, 381150, 419068, 364661, 40868, 354613, 178057 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case102() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331, 991390 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case103() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 662400, 225291, 847481, 354613, 452622, 247840, 567001, 831102, 403304, 200511, 737798, 785624, 504487, 889334, 648333, 588506, 991390, 748971, 159216, 434694, 364661, 937125, 137711, 670958, 862603, 978331, 818476, 495075, 294518, 524289, 101201, 976024, 40868, 796574, 322800, 253443, 972476, 447790, 959137, 708426, 269177, 212231, 31326, 592645, 308742, 90150, 430213, 765540, 331994, 629593 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case104() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487, 516046 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case105() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 99701, 362268, 306554, 200511, 294518, 364661, 504487, 354613, 101201, 434694, 247840, 504307, 449449, 212943, 452622, 269177, 112054, 495075, 90150, 329077, 403304, 381150, 430213, 31584, 251164, 253443, 308742, 447790, 455963, 331994, 225988, 225291, 273752, 353189, 155982, 159216, 52412, 204038, 516046, 312880, 40868, 432639, 419068, 137711, 322800, 266872, 446168, 212231, 178057, 31326 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case106() {
        int[] undertoasted = { 516046 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case107() {
        int[] undertoasted = { 516046 };
        int[] overtoasted = { 266872, 253443, 504307, 294518, 178057, 251164, 204038, 447790, 269177, 306554, 308742, 362268, 225291, 419068, 155982, 452622, 212231, 331994, 364661, 381150, 432639, 329077, 112054, 137711, 504487, 31326, 247840, 434694, 312880, 322800, 455963, 200511, 273752, 403304, 495075, 1267, 446168, 354613, 90150, 430213, 353189, 101201, 52412, 225988, 99701, 40868, 212943, 449449, 31584, 159216 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case108() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case109() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case110() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case111() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case112() {
        int[] undertoasted = { 31326 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case113() {
        int[] undertoasted = { 31326 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case114() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 40868 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case115() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 40868 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case116() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 31584 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case117() {
        int[] undertoasted = { 1267 };
        int[] overtoasted = { 31326, 31584 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case118() {
        int[] undertoasted = { 31584 };
        int[] overtoasted = { 1267, 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case119() {
        int[] undertoasted = { 31584 };
        int[] overtoasted = { 1267, 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case120() {
        int[] undertoasted = { 1267, 31584 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case121() {
        int[] undertoasted = { 1267, 31584 };
        int[] overtoasted = { 889334, 31326, 862603, 308742, 765540, 748971, 200511, 269177, 137711, 818476, 976024, 737798, 322800, 434694, 670958, 452622, 212231, 567001, 937125, 403304, 629593, 364661, 447790, 101201, 90150, 354613, 796574, 504487, 662400, 648333, 972476, 247840, 959137, 495075, 159216, 40868, 978331, 831102, 430213, 294518, 331994, 588506, 253443, 592645, 225291, 524289, 708426, 847481, 785624 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case122() {
        int[] undertoasted = { 1267, 31326 };
        int[] overtoasted = { 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487, 516046 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case123() {
        int[] undertoasted = { 31326, 1267 };
        int[] overtoasted = { 403304, 99701, 308742, 452622, 101201, 430213, 432639, 178057, 306554, 434694, 159216, 253443, 504307, 155982, 266872, 40868, 273752, 31584, 52412, 329077, 312880, 204038, 504487, 516046, 322800, 447790, 364661, 446168, 251164, 294518, 449449, 353189, 200511, 269177, 419068, 212231, 354613, 225291, 362268, 212943, 247840, 112054, 495075, 331994, 381150, 455963, 137711, 90150, 225988 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case124() {
        int[] undertoasted = { 504487, 516046 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case125() {
        int[] undertoasted = { 504487, 516046 };
        int[] overtoasted = { 430213, 204038, 266872, 159216, 1267, 381150, 495075, 31326, 446168, 353189, 452622, 308742, 322800, 155982, 312880, 253443, 434694, 178057, 432639, 294518, 101201, 329077, 269177, 354613, 52412, 200511, 251164, 40868, 99701, 90150, 247840, 331994, 225988, 504307, 364661, 362268, 306554, 225291, 447790, 455963, 112054, 137711, 403304, 212943, 449449, 31584, 273752, 419068, 212231 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case126() {
        int[] undertoasted = { 1267, 31584 };
        int[] overtoasted = { 31326, 40868, 90150, 101201, 137711, 159216, 200511, 212231, 225291, 247840, 253443, 269177, 294518, 308742, 322800, 331994, 354613, 364661, 403304, 430213, 434694, 447790, 452622, 495075, 504487, 524289, 567001, 588506, 592645, 629593, 648333, 662400, 670958, 708426, 737798, 748971, 765540, 785624, 796574, 818476, 831102, 847481, 862603, 889334, 937125, 959137, 972476, 976024, 978331, 991390 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case127() {
        int[] undertoasted = { 31584, 1267 };
        int[] overtoasted = { 670958, 748971, 434694, 662400, 364661, 212231, 269177, 737798, 331994, 592645, 31326, 889334, 137711, 159216, 322800, 978331, 253443, 247840, 567001, 629593, 818476, 976024, 403304, 430213, 200511, 308742, 765540, 504487, 447790, 959137, 831102, 991390, 708426, 588506, 354613, 937125, 225291, 40868, 648333, 294518, 101201, 972476, 452622, 524289, 796574, 495075, 862603, 785624, 90150, 847481 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case128() {
        int[] undertoasted = { 1267, 31326 };
        int[] overtoasted = { 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487, 516046, 524289 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case129() {
        int[] undertoasted = { 31326, 1267 };
        int[] overtoasted = { 308742, 495075, 381150, 294518, 253443, 504307, 447790, 419068, 516046, 403304, 266872, 452622, 101201, 524289, 225291, 504487, 178057, 331994, 200511, 364661, 159216, 212943, 52412, 449449, 353189, 312880, 306554, 204038, 99701, 247840, 40868, 90150, 455963, 354613, 31584, 212231, 112054, 273752, 137711, 446168, 362268, 322800, 434694, 329077, 155982, 225988, 430213, 251164, 432639, 269177 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case130() {
        int[] undertoasted = { 516046, 524289 };
        int[] overtoasted = { 1267, 31326, 31584, 40868, 52412, 90150, 99701, 101201, 112054, 137711, 155982, 159216, 178057, 200511, 204038, 212231, 212943, 225291, 225988, 247840, 251164, 253443, 266872, 269177, 273752, 294518, 306554, 308742, 312880, 322800, 329077, 331994, 353189, 354613, 362268, 364661, 381150, 403304, 419068, 430213, 432639, 434694, 446168, 447790, 449449, 452622, 455963, 495075, 504307, 504487 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case131() {
        int[] undertoasted = { 516046, 524289 };
        int[] overtoasted = { 137711, 354613, 155982, 434694, 353189, 364661, 101201, 329077, 447790, 504487, 446168, 495075, 266872, 381150, 90150, 403304, 306554, 331994, 99701, 419068, 362268, 247840, 312880, 31584, 112054, 452622, 455963, 212943, 1267, 308742, 204038, 212231, 430213, 200511, 253443, 52412, 449449, 273752, 225988, 504307, 225291, 159216, 31326, 294518, 432639, 322800, 251164, 269177, 40868, 178057 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case132() {
        int[] undertoasted = { 1267, 31584 };
        int[] overtoasted = { 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case133() {
        int[] undertoasted = { 31584, 1267 };
        int[] overtoasted = { 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case134() {
        int[] undertoasted = { 1267, 31326 };
        int[] overtoasted = { 31584 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case135() {
        int[] undertoasted = { 1267, 31326 };
        int[] overtoasted = { 31584 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case136() {
        int[] undertoasted = { 31326, 31584 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case137() {
        int[] undertoasted = { 31584, 31326 };
        int[] overtoasted = { 1267 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case138() {
        int[] undertoasted = { 1267, 31584 };
        int[] overtoasted = { 31326, 40868 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case139() {
        int[] undertoasted = { 31584, 1267 };
        int[] overtoasted = { 31326, 40868 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case140() {
        int[] undertoasted = { 1267, 31326 };
        int[] overtoasted = { 31584, 40868 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case141() {
        int[] undertoasted = { 1267, 31326 };
        int[] overtoasted = { 40868, 31584 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case142() {
        int[] undertoasted = { 31584, 40868 };
        int[] overtoasted = { 1267, 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case143() {
        int[] undertoasted = { 40868, 31584 };
        int[] overtoasted = { 1267, 31326 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case144() {
        int[] undertoasted = { 39 };
        int[] overtoasted = { 57 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case145() {
        int[] undertoasted = { 39 };
        int[] overtoasted = { 83, 97, 46, 41, 11, 44, 27 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case146() {
        int[] undertoasted = { 70 };
        int[] overtoasted = { 90, 52, 45, 22, 14, 2, 7, 100, 13, 82, 94, 62, 20, 4, 89, 42, 3, 16, 27, 83, 38, 9, 28, 36, 21, 99, 75, 8, 49, 92, 78, 23, 69, 79, 15, 63, 84, 95, 74, 12, 19, 44, 71, 54, 85, 60, 43, 98, 64 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case147() {
        int[] undertoasted = { 62, 74, 21, 52, 27, 94, 25 };
        int[] overtoasted = { 70 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case148() {
        int[] undertoasted = { 44, 42, 46, 17, 63, 37, 92 };
        int[] overtoasted = { 68, 90, 78, 99, 82, 5, 93 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case149() {
        int[] undertoasted = { 57, 78, 13, 12, 85, 99, 59 };
        int[] overtoasted = { 29, 62, 98, 86, 53, 52, 21, 28, 89, 40, 91, 36, 74, 37, 4, 82, 19, 58, 41, 22, 30, 48, 81, 84, 45, 26, 27, 38, 100, 54, 55, 46, 71, 32, 77, 64, 69, 11, 79, 14, 80, 67, 60, 7, 25, 65, 72, 23, 68 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case150() {
        int[] undertoasted = { 99, 60, 74, 17, 33, 36, 39, 22, 71, 95, 80, 51, 65, 23, 72, 18, 25, 7, 15, 37, 63, 61, 30, 32, 69, 57, 86, 16, 84, 48, 8, 73, 100, 41, 83, 64, 76, 59, 81, 35, 21, 66, 50, 28, 75, 2, 24, 46, 52 };
        int[] overtoasted = { 11 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case151() {
        int[] undertoasted = { 27, 39, 84, 64, 1, 82, 35, 71, 32, 26, 72, 38, 57, 66, 67, 75, 45, 29, 10, 6, 86, 40, 3, 77, 55, 11, 15, 47, 2, 80, 13, 52, 20, 94, 16, 83, 14, 73, 58, 88, 9, 61, 99, 36, 22, 93, 23, 95, 44 };
        int[] overtoasted = { 74, 96, 91, 48, 78, 19, 70 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case152() {
        int[] undertoasted = { 61, 25, 38, 17, 36, 100, 66, 98, 89, 51, 35, 14, 9, 69, 78, 58, 28, 84, 59, 47, 50, 81, 65, 41, 42, 90, 92, 80, 45, 8, 70, 40, 32, 20, 63, 57, 37, 95, 67, 68, 43, 86, 22, 79, 93, 97, 54, 55, 18 };
        int[] overtoasted = { 73, 13, 71, 96, 26, 23, 3, 53, 5, 88, 75, 99, 39, 85, 91, 82, 62, 44, 34, 6, 33, 4, 49, 72, 74, 94, 76, 31, 27, 77, 48, 19, 46, 11, 16, 29, 2, 15, 7, 24, 64, 83, 21, 1, 10, 87, 56, 30, 12 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case153() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case154() {
        int[] undertoasted = { 65, 47, 61, 75, 55, 17, 87, 41, 43, 89, 69, 39, 45, 79, 51, 81, 25, 53, 3, 33, 83, 19, 7, 57, 85, 29, 73, 97, 49, 11, 31, 95, 59, 9, 1, 15, 21, 93, 13, 67, 91, 5, 71, 37, 63, 27, 23, 77, 35 };
        int[] overtoasted = { 30, 78, 98, 64, 2, 76, 88, 10, 86, 6, 52, 62, 4, 58, 60, 18, 54, 32, 12, 16, 80, 68, 92, 82, 42, 90, 34, 70, 20, 40, 24, 50, 28, 74, 8, 46, 84, 14, 38, 36, 44, 94, 22, 48, 96, 26, 72, 56, 66 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case155() {
        int[] undertoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        int[] overtoasted = { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case156() {
        int[] undertoasted = { 34, 47, 11, 22, 30, 24, 25, 46, 42, 35, 4, 8, 36, 1, 48, 38, 2, 19, 39, 27, 31, 37, 18, 15, 49, 10, 29, 9, 5, 23, 13, 33, 7, 16, 41, 12, 28, 17, 21, 14, 45, 20, 32, 40, 43, 6, 3, 26, 44 };
        int[] overtoasted = { 73, 97, 84, 50, 64, 88, 57, 71, 85, 95, 54, 53, 98, 92, 56, 82, 61, 66, 59, 52, 60, 63, 81, 69, 90, 77, 94, 72, 96, 80, 70, 87, 79, 75, 83, 51, 65, 74, 68, 93, 78, 55, 62, 76, 67, 91, 58, 86, 89 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case157() {
        int[] undertoasted = { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 };
        int[] overtoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case158() {
        int[] undertoasted = { 77, 72, 78, 67, 55, 58, 97, 52, 88, 73, 60, 75, 80, 86, 68, 95, 65, 82, 66, 76, 57, 79, 89, 98, 84, 93, 64, 83, 69, 81, 61, 51, 96, 56, 53, 91, 50, 71, 87, 90, 85, 74, 62, 92, 94, 54, 70, 59, 63 };
        int[] overtoasted = { 38, 36, 48, 28, 17, 31, 10, 24, 13, 15, 41, 1, 25, 23, 22, 49, 19, 6, 45, 2, 8, 30, 42, 3, 7, 44, 18, 47, 11, 29, 37, 20, 34, 32, 14, 46, 12, 40, 27, 4, 5, 43, 21, 35, 9, 33, 16, 26, 39 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case159() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case160() {
        int[] undertoasted = { 43, 41, 75, 13, 65, 53, 57, 81, 51, 35, 93, 61, 5, 23, 9, 49, 87, 31, 1, 83, 17, 11, 97, 67, 77, 19, 69, 79, 21, 95, 59, 25, 91, 71, 85, 45, 47, 39, 29, 27, 55, 37, 63, 89, 15, 73, 33, 7, 3 };
        int[] overtoasted = { 70, 74, 96, 18, 32, 82, 2, 16, 84, 76, 94, 14, 100, 22, 78, 60, 10, 52, 72, 30, 58, 34, 12, 44, 46, 62, 38, 66, 92, 54, 6, 50, 42, 28, 26, 56, 88, 90, 80, 98, 24, 68, 4, 48, 36, 64, 20, 40, 8, 86 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case161() {
        int[] undertoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        int[] overtoasted = { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case162() {
        int[] undertoasted = { 12, 6, 18, 42, 22, 29, 32, 39, 1, 45, 13, 28, 48, 34, 33, 47, 25, 41, 23, 27, 24, 35, 49, 38, 16, 14, 11, 4, 9, 46, 19, 37, 43, 26, 8, 21, 2, 30, 17, 20, 36, 3, 44, 7, 40, 5, 15, 31, 10 };
        int[] overtoasted = { 80, 82, 56, 55, 90, 74, 93, 92, 68, 69, 59, 79, 54, 51, 52, 86, 81, 75, 76, 63, 62, 72, 98, 53, 96, 73, 99, 71, 66, 58, 57, 83, 78, 87, 95, 97, 50, 89, 70, 88, 60, 61, 84, 65, 91, 64, 77, 67, 94, 85 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case163() {
        int[] undertoasted = { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
        int[] overtoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case164() {
        int[] undertoasted = { 53, 95, 74, 88, 91, 72, 86, 80, 62, 89, 79, 58, 96, 97, 75, 60, 61, 84, 59, 77, 92, 98, 68, 99, 54, 52, 90, 64, 55, 57, 85, 83, 69, 65, 71, 56, 70, 67, 81, 66, 51, 78, 82, 73, 94, 76, 63, 87, 93 };
        int[] overtoasted = { 13, 23, 32, 37, 4, 6, 7, 5, 29, 38, 9, 15, 22, 8, 19, 24, 45, 14, 50, 40, 43, 10, 27, 47, 49, 28, 11, 21, 34, 16, 48, 18, 41, 44, 12, 36, 17, 33, 35, 30, 39, 3, 25, 42, 20, 2, 26, 31, 1, 46 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case165() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case166() {
        int[] undertoasted = { 51, 93, 59, 55, 79, 31, 75, 41, 89, 99, 9, 57, 13, 49, 21, 73, 87, 97, 27, 1, 5, 69, 17, 15, 35, 63, 83, 25, 91, 37, 95, 67, 61, 85, 19, 47, 39, 81, 43, 53, 3, 77, 23, 45, 71, 29, 11, 33, 65, 7 };
        int[] overtoasted = { 2, 76, 4, 90, 86, 18, 78, 14, 44, 80, 84, 58, 22, 66, 96, 32, 54, 88, 30, 12, 6, 38, 98, 60, 42, 34, 94, 64, 74, 56, 62, 16, 92, 72, 68, 48, 28, 82, 8, 26, 10, 70, 52, 20, 40, 36, 50, 24, 46 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case167() {
        int[] undertoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] overtoasted = { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case168() {
        int[] undertoasted = { 12, 26, 7, 20, 32, 40, 16, 3, 47, 38, 45, 44, 17, 13, 14, 46, 42, 1, 25, 48, 41, 18, 36, 49, 30, 34, 33, 4, 27, 37, 2, 22, 11, 31, 29, 39, 5, 6, 8, 35, 28, 50, 21, 15, 10, 19, 43, 23, 24, 9 };
        int[] overtoasted = { 87, 60, 59, 80, 79, 94, 62, 70, 92, 73, 98, 54, 89, 81, 91, 65, 88, 76, 58, 56, 72, 69, 68, 52, 64, 93, 90, 85, 63, 71, 53, 95, 78, 55, 99, 67, 83, 51, 61, 77, 74, 96, 97, 57, 86, 66, 84, 82, 75 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case169() {
        int[] undertoasted = { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
        int[] overtoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case170() {
        int[] undertoasted = { 64, 97, 99, 67, 62, 94, 72, 59, 57, 56, 89, 52, 58, 83, 74, 84, 93, 75, 53, 79, 63, 95, 73, 61, 69, 80, 66, 92, 96, 70, 68, 86, 55, 65, 87, 88, 78, 82, 51, 91, 81, 77, 98, 85, 76, 90, 54, 60, 71, 50 };
        int[] overtoasted = { 29, 34, 41, 25, 44, 30, 1, 49, 18, 46, 33, 21, 12, 14, 5, 9, 43, 39, 23, 10, 45, 28, 6, 8, 22, 7, 37, 20, 4, 17, 32, 2, 31, 15, 36, 24, 16, 19, 48, 40, 35, 26, 38, 13, 47, 3, 27, 42, 11 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case171() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case172() {
        int[] undertoasted = { 91, 27, 21, 13, 7, 83, 65, 55, 49, 59, 97, 19, 93, 99, 11, 63, 43, 89, 61, 87, 85, 79, 35, 53, 67, 29, 73, 39, 31, 15, 25, 23, 3, 57, 17, 95, 37, 33, 1, 5, 81, 47, 41, 69, 9, 71, 75, 45, 77, 51 };
        int[] overtoasted = { 76, 72, 22, 4, 80, 68, 20, 78, 14, 6, 82, 18, 92, 70, 44, 74, 86, 52, 98, 100, 46, 60, 34, 90, 96, 84, 28, 32, 88, 38, 36, 58, 26, 62, 8, 16, 40, 54, 10, 30, 12, 2, 64, 48, 66, 94, 56, 24, 50, 42 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case173() {
        int[] undertoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] overtoasted = { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case174() {
        int[] undertoasted = { 48, 25, 34, 20, 19, 10, 47, 42, 46, 27, 45, 7, 11, 6, 22, 2, 15, 50, 12, 5, 23, 24, 16, 33, 9, 28, 18, 17, 30, 21, 37, 49, 8, 44, 4, 14, 31, 35, 1, 40, 26, 13, 29, 32, 3, 43, 38, 36, 41, 39 };
        int[] overtoasted = { 83, 91, 53, 73, 59, 63, 58, 77, 87, 78, 54, 76, 82, 56, 60, 55, 62, 51, 66, 95, 75, 90, 100, 52, 64, 94, 98, 57, 61, 99, 81, 89, 68, 86, 92, 65, 67, 97, 74, 93, 96, 72, 88, 80, 79, 85, 69, 71, 70, 84 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case175() {
        int[] undertoasted = { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 };
        int[] overtoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case176() {
        int[] undertoasted = { 76, 75, 77, 60, 78, 56, 83, 79, 90, 69, 65, 88, 85, 66, 72, 55, 63, 59, 98, 52, 73, 93, 100, 71, 57, 99, 86, 64, 94, 92, 82, 61, 96, 53, 91, 67, 58, 54, 80, 68, 74, 51, 87, 97, 95, 62, 81, 70, 89, 84 };
        int[] overtoasted = { 32, 45, 36, 17, 23, 49, 11, 24, 20, 8, 33, 4, 15, 40, 48, 44, 2, 19, 6, 16, 41, 27, 25, 46, 12, 14, 10, 47, 30, 21, 37, 5, 39, 35, 28, 13, 1, 50, 38, 3, 7, 43, 22, 9, 34, 29, 26, 42, 18, 31 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case177() {
        int[] undertoasted = { 999962 };
        int[] overtoasted = { 999989 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case178() {
        int[] undertoasted = { 999935 };
        int[] overtoasted = { 999987, 999957, 999989, 999906, 999954, 999905, 999963 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case179() {
        int[] undertoasted = { 999980 };
        int[] overtoasted = { 999986, 999978, 999936, 999914, 999919, 999934, 999941, 999967, 999964, 999928, 999998, 999989, 999916, 999933, 999993, 999927, 999953, 999956, 999932, 999982, 999902, 999906, 999966, 999997, 999974, 999923, 999977, 999976, 999935, 999907, 999987, 999931, 999912, 999943, 999938, 999951, 999984, 999975, 999983, 999937, 999962, 999973, 999918, 999954, 999942, 999963, 1000000, 999901, 999960 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case180() {
        int[] undertoasted = { 999913, 999979, 999969, 999973, 999905, 999972, 999948 };
        int[] overtoasted = { 999917 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case181() {
        int[] undertoasted = { 999962, 999965, 999920, 999981, 999922, 999907, 999906 };
        int[] overtoasted = { 999984, 999967, 999998, 999977, 999942, 999961, 999953 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case182() {
        int[] undertoasted = { 999994, 999932, 999918, 999966, 999906, 999986, 999946 };
        int[] overtoasted = { 999956, 999925, 999943, 999987, 999910, 999902, 999938, 999913, 999963, 999968, 999955, 999911, 999978, 999997, 999996, 999939, 999960, 999992, 999928, 999921, 999934, 999941, 999948, 999926, 999905, 999981, 999927, 999935, 999965, 999999, 999923, 999969, 999914, 999974, 999936, 999903, 999950, 999957, 999942, 999962, 999979, 999993, 999984, 999980, 999951, 999983, 1000000, 999967, 999970 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case183() {
        int[] undertoasted = { 999954, 999966, 999917, 999987, 999958, 999988, 999926, 999959, 999904, 999915, 999979, 999905, 999961, 999981, 999991, 999998, 999986, 999938, 999955, 999943, 999902, 999910, 999946, 999927, 999901, 1000000, 999944, 999962, 999928, 999929, 999999, 999936, 999956, 999974, 999983, 999965, 999934, 999997, 999978, 999951, 999984, 999969, 999920, 999990, 999976, 999982, 999994, 999912, 999922 };
        int[] overtoasted = { 999952 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case184() {
        int[] undertoasted = { 999973, 999976, 999969, 999962, 999936, 999943, 999918, 999924, 999927, 999908, 999954, 999948, 999938, 999904, 999955, 999970, 999998, 999939, 999940, 999930, 999980, 999953, 999985, 999942, 999981, 999967, 999983, 999920, 999965, 999944, 999937, 999946, 999963, 999986, 999917, 999975, 999987, 999910, 999952, 999914, 999960, 999903, 999935, 999931, 999994, 999911, 999950, 999907, 999913 };
        int[] overtoasted = { 999956, 999921, 999968, 999984, 999977, 999993, 999992 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case185() {
        int[] undertoasted = { 999977, 999936, 999973, 999995, 999963, 999996, 999975, 999928, 999989, 999938, 999958, 999970, 999978, 999982, 999915, 999942, 999964, 999946, 999945, 999979, 999901, 999971, 999904, 999981, 999967, 999955, 999906, 999983, 999920, 999965, 999903, 999974, 999954, 999947, 999918, 999944, 999924, 999961, 999902, 999988, 999960, 999986, 999930, 999990, 999950, 999914, 999910, 999991, 999929 };
        int[] overtoasted = { 999917, 999997, 999956, 999966, 999905, 999907, 999919, 999976, 1000000, 999911, 999925, 999943, 999927, 999951, 999934, 999922, 999921, 999939, 999912, 999909, 999959, 999923, 999908, 999948, 999931, 999940, 999941, 999972, 999985, 999916, 999935, 999968, 999926, 999962, 999957, 999949, 999980, 999969, 999993, 999937, 999987, 999933, 999992, 999932, 999952, 999913, 999998, 999999, 999953 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case186() {
        int[] undertoasted = { 999901, 999903, 999905, 999907, 999909, 999911, 999913, 999915, 999917, 999919, 999921, 999923, 999925, 999927, 999929, 999931, 999933, 999935, 999937, 999939, 999941, 999943, 999945, 999947, 999949, 999951, 999953, 999955, 999957, 999959, 999961, 999963, 999965, 999967, 999969, 999971, 999973, 999975, 999977, 999979, 999981, 999983, 999985, 999987, 999989, 999991, 999993, 999995, 999997 };
        int[] overtoasted = { 999902, 999904, 999906, 999908, 999910, 999912, 999914, 999916, 999918, 999920, 999922, 999924, 999926, 999928, 999930, 999932, 999934, 999936, 999938, 999940, 999942, 999944, 999946, 999948, 999950, 999952, 999954, 999956, 999958, 999960, 999962, 999964, 999966, 999968, 999970, 999972, 999974, 999976, 999978, 999980, 999982, 999984, 999986, 999988, 999990, 999992, 999994, 999996, 999998 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case187() {
        int[] undertoasted = { 999967, 999937, 999955, 999997, 999929, 999931, 999947, 999985, 999975, 999951, 999995, 999965, 999933, 999945, 999979, 999971, 999953, 999907, 999981, 999959, 999927, 999989, 999961, 999925, 999911, 999969, 999901, 999935, 999923, 999939, 999963, 999993, 999919, 999917, 999991, 999977, 999903, 999915, 999905, 999983, 999909, 999943, 999913, 999941, 999957, 999949, 999973, 999921, 999987 };
        int[] overtoasted = { 999948, 999974, 999962, 999956, 999914, 999976, 999984, 999946, 999978, 999920, 999924, 999986, 999934, 999942, 999954, 999916, 999980, 999928, 999922, 999998, 999932, 999958, 999996, 999904, 999930, 999988, 999964, 999936, 999912, 999972, 999982, 999940, 999938, 999918, 999910, 999990, 999992, 999950, 999966, 999968, 999952, 999908, 999960, 999902, 999970, 999906, 999944, 999926, 999994 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case188() {
        int[] undertoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949 };
        int[] overtoasted = { 999950, 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case189() {
        int[] undertoasted = { 999903, 999904, 999948, 999939, 999946, 999943, 999916, 999941, 999909, 999923, 999942, 999922, 999914, 999927, 999912, 999915, 999917, 999908, 999945, 999949, 999938, 999918, 999928, 999905, 999940, 999929, 999935, 999920, 999901, 999931, 999932, 999934, 999926, 999910, 999925, 999913, 999907, 999930, 999933, 999944, 999906, 999937, 999936, 999947, 999921, 999911, 999902, 999919, 999924 };
        int[] overtoasted = { 999956, 999988, 999992, 999962, 999979, 999957, 999952, 999996, 999994, 999975, 999968, 999998, 999987, 999983, 999997, 999954, 999990, 999989, 999965, 999967, 999963, 999974, 999972, 999966, 999969, 999950, 999991, 999959, 999955, 999976, 999953, 999970, 999982, 999951, 999971, 999960, 999981, 999978, 999980, 999958, 999984, 999973, 999964, 999961, 999977, 999985, 999993, 999986, 999995 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case190() {
        int[] undertoasted = { 999950, 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998 };
        int[] overtoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case191() {
        int[] undertoasted = { 999966, 999991, 999982, 999995, 999952, 999970, 999976, 999993, 999965, 999964, 999953, 999996, 999956, 999981, 999957, 999951, 999959, 999994, 999969, 999990, 999971, 999955, 999967, 999985, 999977, 999983, 999963, 999968, 999986, 999979, 999954, 999961, 999984, 999998, 999992, 999978, 999974, 999997, 999950, 999960, 999975, 999962, 999973, 999980, 999958, 999988, 999989, 999987, 999972 };
        int[] overtoasted = { 999920, 999935, 999949, 999948, 999910, 999904, 999922, 999928, 999939, 999930, 999943, 999947, 999944, 999909, 999934, 999919, 999917, 999924, 999946, 999902, 999908, 999921, 999933, 999932, 999940, 999905, 999913, 999927, 999918, 999929, 999911, 999931, 999903, 999945, 999915, 999906, 999914, 999926, 999941, 999936, 999912, 999937, 999901, 999942, 999938, 999907, 999925, 999916, 999923 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case192() {
        int[] undertoasted = { 999901, 999903, 999905, 999907, 999909, 999911, 999913, 999915, 999917, 999919, 999921, 999923, 999925, 999927, 999929, 999931, 999933, 999935, 999937, 999939, 999941, 999943, 999945, 999947, 999949, 999951, 999953, 999955, 999957, 999959, 999961, 999963, 999965, 999967, 999969, 999971, 999973, 999975, 999977, 999979, 999981, 999983, 999985, 999987, 999989, 999991, 999993, 999995, 999997 };
        int[] overtoasted = { 999902, 999904, 999906, 999908, 999910, 999912, 999914, 999916, 999918, 999920, 999922, 999924, 999926, 999928, 999930, 999932, 999934, 999936, 999938, 999940, 999942, 999944, 999946, 999948, 999950, 999952, 999954, 999956, 999958, 999960, 999962, 999964, 999966, 999968, 999970, 999972, 999974, 999976, 999978, 999980, 999982, 999984, 999986, 999988, 999990, 999992, 999994, 999996, 999998, 1000000 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case193() {
        int[] undertoasted = { 999937, 999901, 999949, 999953, 999923, 999925, 999905, 999929, 999941, 999955, 999939, 999987, 999957, 999981, 999995, 999969, 999907, 999919, 999985, 999947, 999967, 999921, 999993, 999959, 999945, 999951, 999931, 999977, 999933, 999917, 999983, 999903, 999963, 999935, 999971, 999915, 999975, 999979, 999991, 999961, 999943, 999965, 999911, 999997, 999989, 999909, 999913, 999973, 999927 };
        int[] overtoasted = { 999908, 999970, 999948, 999982, 1000000, 999934, 999928, 999940, 999992, 999972, 999920, 999916, 999974, 999918, 999906, 999914, 999936, 999994, 999956, 999998, 999964, 999954, 999922, 999942, 999960, 999946, 999932, 999930, 999988, 999910, 999902, 999926, 999912, 999976, 999980, 999938, 999986, 999966, 999952, 999968, 999990, 999904, 999950, 999978, 999924, 999996, 999958, 999962, 999944, 999984 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case194() {
        int[] undertoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949 };
        int[] overtoasted = { 999950, 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998, 999999 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case195() {
        int[] undertoasted = { 999938, 999904, 999942, 999945, 999903, 999934, 999917, 999932, 999949, 999944, 999946, 999937, 999921, 999919, 999931, 999925, 999924, 999933, 999940, 999922, 999915, 999913, 999920, 999912, 999936, 999930, 999939, 999918, 999906, 999909, 999947, 999905, 999910, 999911, 999916, 999927, 999943, 999907, 999914, 999928, 999908, 999929, 999948, 999935, 999926, 999941, 999923, 999902, 999901 };
        int[] overtoasted = { 999995, 999974, 999965, 999998, 999991, 999983, 999990, 999979, 999952, 999969, 999994, 999984, 999977, 999992, 999997, 999985, 999961, 999973, 999960, 999955, 999993, 999951, 999962, 999999, 999988, 999957, 999982, 999972, 999980, 999987, 999970, 999976, 999963, 999967, 999958, 999953, 999975, 999989, 999968, 999996, 999986, 999959, 999950, 999964, 999954, 999981, 999956, 999971, 999978, 999966 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case196() {
        int[] undertoasted = { 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998, 999999 };
        int[] overtoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949, 999950 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case197() {
        int[] undertoasted = { 999986, 999965, 999984, 999959, 999952, 999953, 999994, 999974, 999981, 999970, 999982, 999973, 999977, 999962, 999972, 999983, 999967, 999979, 999995, 999975, 999966, 999997, 999978, 999968, 999960, 999990, 999985, 999987, 999999, 999955, 999969, 999957, 999971, 999963, 999996, 999992, 999988, 999961, 999976, 999964, 999980, 999951, 999956, 999998, 999989, 999993, 999954, 999991, 999958 };
        int[] overtoasted = { 999930, 999936, 999925, 999914, 999919, 999937, 999943, 999915, 999923, 999947, 999918, 999944, 999932, 999931, 999920, 999929, 999921, 999926, 999924, 999922, 999917, 999948, 999935, 999910, 999904, 999941, 999903, 999940, 999902, 999945, 999934, 999927, 999942, 999946, 999909, 999928, 999939, 999938, 999950, 999901, 999911, 999949, 999905, 999912, 999908, 999933, 999913, 999907, 999906, 999916 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case198() {
        int[] undertoasted = { 999901, 999903, 999905, 999907, 999909, 999911, 999913, 999915, 999917, 999919, 999921, 999923, 999925, 999927, 999929, 999931, 999933, 999935, 999937, 999939, 999941, 999943, 999945, 999947, 999949, 999951, 999953, 999955, 999957, 999959, 999961, 999963, 999965, 999967, 999969, 999971, 999973, 999975, 999977, 999979, 999981, 999983, 999985, 999987, 999989, 999991, 999993, 999995, 999997, 999999 };
        int[] overtoasted = { 999902, 999904, 999906, 999908, 999910, 999912, 999914, 999916, 999918, 999920, 999922, 999924, 999926, 999928, 999930, 999932, 999934, 999936, 999938, 999940, 999942, 999944, 999946, 999948, 999950, 999952, 999954, 999956, 999958, 999960, 999962, 999964, 999966, 999968, 999970, 999972, 999974, 999976, 999978, 999980, 999982, 999984, 999986, 999988, 999990, 999992, 999994, 999996, 999998 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case199() {
        int[] undertoasted = { 999915, 999991, 999977, 999937, 999941, 999907, 999957, 999989, 999935, 999967, 999959, 999927, 999947, 999965, 999917, 999905, 999969, 999945, 999981, 999939, 999963, 999925, 999973, 999995, 999953, 999999, 999949, 999961, 999903, 999983, 999929, 999997, 999951, 999923, 999901, 999985, 999987, 999933, 999971, 999909, 999931, 999955, 999919, 999993, 999979, 999913, 999921, 999911, 999943, 999975 };
        int[] overtoasted = { 999912, 999988, 999952, 999980, 999906, 999910, 999964, 999928, 999976, 999960, 999958, 999956, 999922, 999948, 999904, 999968, 999982, 999908, 999946, 999936, 999992, 999978, 999926, 999998, 999934, 999994, 999972, 999986, 999990, 999902, 999950, 999938, 999984, 999924, 999914, 999932, 999974, 999918, 999962, 999954, 999944, 999996, 999916, 999930, 999942, 999966, 999920, 999970, 999940 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case200() {
        int[] undertoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949, 999950 };
        int[] overtoasted = { 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998, 999999 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case201() {
        int[] undertoasted = { 999948, 999912, 999914, 999945, 999923, 999935, 999903, 999908, 999925, 999939, 999927, 999917, 999934, 999936, 999933, 999907, 999930, 999919, 999928, 999947, 999941, 999950, 999931, 999913, 999910, 999944, 999920, 999906, 999922, 999904, 999938, 999911, 999901, 999905, 999921, 999932, 999915, 999943, 999929, 999949, 999937, 999926, 999924, 999916, 999902, 999946, 999940, 999918, 999942, 999909 };
        int[] overtoasted = { 999967, 999994, 999987, 999956, 999990, 999989, 999965, 999988, 999979, 999997, 999964, 999978, 999976, 999982, 999962, 999955, 999957, 999980, 999993, 999974, 999981, 999996, 999975, 999992, 999971, 999995, 999986, 999977, 999963, 999968, 999983, 999961, 999999, 999970, 999960, 999985, 999998, 999969, 999952, 999954, 999973, 999966, 999959, 999951, 999984, 999972, 999958, 999991, 999953 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case202() {
        int[] undertoasted = { 999950, 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998, 999999 };
        int[] overtoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case203() {
        int[] undertoasted = { 999988, 999976, 999986, 999959, 999969, 999974, 999994, 999964, 999957, 999997, 999970, 999971, 999961, 999967, 999995, 999973, 999962, 999989, 999952, 999980, 999984, 999975, 999998, 999977, 999987, 999965, 999983, 999960, 999981, 999954, 999993, 999978, 999953, 999966, 999992, 999990, 999972, 999963, 999956, 999999, 999982, 999955, 999991, 999996, 999958, 999968, 999950, 999985, 999979, 999951 };
        int[] overtoasted = { 999933, 999919, 999941, 999929, 999948, 999908, 999946, 999910, 999927, 999905, 999936, 999924, 999911, 999928, 999912, 999939, 999901, 999945, 999907, 999926, 999904, 999949, 999940, 999937, 999923, 999918, 999932, 999931, 999909, 999916, 999935, 999914, 999934, 999944, 999942, 999947, 999930, 999913, 999917, 999943, 999915, 999902, 999921, 999920, 999903, 999925, 999938, 999922, 999906 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case204() {
        int[] undertoasted = { 999901, 999903, 999905, 999907, 999909, 999911, 999913, 999915, 999917, 999919, 999921, 999923, 999925, 999927, 999929, 999931, 999933, 999935, 999937, 999939, 999941, 999943, 999945, 999947, 999949, 999951, 999953, 999955, 999957, 999959, 999961, 999963, 999965, 999967, 999969, 999971, 999973, 999975, 999977, 999979, 999981, 999983, 999985, 999987, 999989, 999991, 999993, 999995, 999997, 999999 };
        int[] overtoasted = { 999902, 999904, 999906, 999908, 999910, 999912, 999914, 999916, 999918, 999920, 999922, 999924, 999926, 999928, 999930, 999932, 999934, 999936, 999938, 999940, 999942, 999944, 999946, 999948, 999950, 999952, 999954, 999956, 999958, 999960, 999962, 999964, 999966, 999968, 999970, 999972, 999974, 999976, 999978, 999980, 999982, 999984, 999986, 999988, 999990, 999992, 999994, 999996, 999998, 1000000 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case205() {
        int[] undertoasted = { 999979, 999987, 999973, 999943, 999945, 999927, 999941, 999907, 999901, 999991, 999949, 999969, 999985, 999957, 999923, 999925, 999999, 999983, 999909, 999905, 999911, 999993, 999955, 999939, 999931, 999951, 999959, 999981, 999977, 999921, 999967, 999903, 999947, 999953, 999965, 999917, 999995, 999975, 999963, 999937, 999915, 999929, 999919, 999989, 999933, 999971, 999935, 999961, 999913, 999997 };
        int[] overtoasted = { 999988, 999922, 999996, 999928, 999948, 999972, 999956, 999986, 999958, 999962, 999976, 999946, 999918, 999904, 999924, 999992, 999990, 999908, 999970, 999906, 999952, 999936, 999940, 999984, 999942, 999916, 999994, 999974, 999930, 999944, 999960, 999966, 999978, 999998, 999926, 999932, 999914, 999950, 999920, 999934, 999910, 999902, 999982, 999980, 999964, 999954, 999912, 999938, 999968, 1000000 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case206() {
        int[] undertoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949, 999950 };
        int[] overtoasted = { 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998, 999999, 1000000 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case207() {
        int[] undertoasted = { 999918, 999913, 999938, 999925, 999910, 999928, 999927, 999942, 999949, 999911, 999901, 999930, 999944, 999907, 999936, 999950, 999905, 999929, 999906, 999924, 999920, 999932, 999941, 999917, 999934, 999943, 999933, 999946, 999947, 999902, 999904, 999916, 999935, 999937, 999915, 999945, 999908, 999923, 999940, 999903, 999919, 999939, 999931, 999912, 999914, 999948, 999922, 999921, 999926, 999909 };
        int[] overtoasted = { 999963, 999999, 999962, 999994, 999966, 999989, 999980, 999995, 999955, 999985, 999993, 999959, 999961, 999997, 999965, 999953, 999967, 999974, 999954, 999987, 999964, 999975, 999977, 999972, 999951, 999998, 999970, 999960, 999952, 999988, 999957, 999981, 999978, 999991, 1000000, 999990, 999976, 999982, 999968, 999996, 999969, 999983, 999973, 999971, 999958, 999992, 999986, 999979, 999956, 999984 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case208() {
        int[] undertoasted = { 999951, 999952, 999953, 999954, 999955, 999956, 999957, 999958, 999959, 999960, 999961, 999962, 999963, 999964, 999965, 999966, 999967, 999968, 999969, 999970, 999971, 999972, 999973, 999974, 999975, 999976, 999977, 999978, 999979, 999980, 999981, 999982, 999983, 999984, 999985, 999986, 999987, 999988, 999989, 999990, 999991, 999992, 999993, 999994, 999995, 999996, 999997, 999998, 999999, 1000000 };
        int[] overtoasted = { 999901, 999902, 999903, 999904, 999905, 999906, 999907, 999908, 999909, 999910, 999911, 999912, 999913, 999914, 999915, 999916, 999917, 999918, 999919, 999920, 999921, 999922, 999923, 999924, 999925, 999926, 999927, 999928, 999929, 999930, 999931, 999932, 999933, 999934, 999935, 999936, 999937, 999938, 999939, 999940, 999941, 999942, 999943, 999944, 999945, 999946, 999947, 999948, 999949, 999950 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case209() {
        int[] undertoasted = { 999991, 999976, 999988, 999981, 999999, 999993, 999979, 999969, 999971, 999954, 999965, 999970, 999957, 999953, 999984, 999982, 999987, 999995, 999996, 999967, 999959, 999997, 999973, 999972, 999955, 999958, 999966, 999963, 999961, 999992, 999974, 999986, 999980, 999998, 999978, 999960, 999975, 1000000, 999956, 999952, 999968, 999989, 999951, 999990, 999983, 999985, 999977, 999994, 999964, 999962 };
        int[] overtoasted = { 999918, 999943, 999911, 999938, 999901, 999925, 999924, 999947, 999908, 999937, 999927, 999935, 999909, 999921, 999916, 999907, 999920, 999913, 999902, 999904, 999944, 999936, 999929, 999917, 999923, 999905, 999906, 999941, 999912, 999930, 999914, 999919, 999934, 999948, 999915, 999939, 999940, 999931, 999945, 999946, 999922, 999933, 999928, 999942, 999910, 999949, 999903, 999926, 999932, 999950 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case210() {
        int[] undertoasted = { 1, 3, 5 };
        int[] overtoasted = { 2, 4, 6 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case211() {
        int[] undertoasted = { 5, 6, 7 };
        int[] overtoasted = { 3, 8, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case212() {
        int[] undertoasted = { 1 };
        int[] overtoasted = { 2 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case213() {
        int[] undertoasted = { 5, 10 };
        int[] overtoasted = { 2, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case214() {
        int[] undertoasted = { 1, 4 };
        int[] overtoasted = { 2, 3 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case215() {
        int[] undertoasted = { 4, 6, 8 };
        int[] overtoasted = { 3, 9, 10 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case216() {
        int[] undertoasted = { 10, 11, 12 };
        int[] overtoasted = { 5, 14 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case217() {
        int[] undertoasted = { 1, 2, 3 };
        int[] overtoasted = { 5, 6, 7 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case218() {
        int[] undertoasted = { 1, 2, 4, 6, 8 };
        int[] overtoasted = { 3, 5, 7, 9 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case219() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 12 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case220() {
        int[] undertoasted = { 1, 3, 5, 7, 9 };
        int[] overtoasted = { 2, 4, 6, 8, 10 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case221() {
        int[] undertoasted = { 2, 4 };
        int[] overtoasted = { 1, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case222() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 10, 12 };
        int[] overtoasted = { 2, 4, 6, 8, 11, 13 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case223() {
        int[] undertoasted = { 5, 2 };
        int[] overtoasted = { 6, 4, 7, 3 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case224() {
        int[] undertoasted = { 123, 456, 789, 321, 654, 987 };
        int[] overtoasted = { 122, 3455, 567, 98, 876, 657 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case225() {
        int[] undertoasted = { 2, 5 };
        int[] overtoasted = { 3, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case226() {
        int[] undertoasted = { 1, 3 };
        int[] overtoasted = { 2 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case227() {
        int[] undertoasted = { 1, 10 };
        int[] overtoasted = { 2, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case228() {
        int[] undertoasted = { 2, 3 };
        int[] overtoasted = { 1, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case229() {
        int[] undertoasted = { 5 };
        int[] overtoasted = { 4, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case230() {
        int[] undertoasted = { 1, 2, 5, 7 };
        int[] overtoasted = { 3, 4, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case231() {
        int[] undertoasted = { 2, 4, 5 };
        int[] overtoasted = { 1, 3, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case232() {
        int[] undertoasted = { 3, 7, 8, 9, 11, 16 };
        int[] overtoasted = { 4, 10, 6, 12, 13, 14, 15, 17 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case233() {
        int[] undertoasted = { 1, 3, 5 };
        int[] overtoasted = { 2, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case234() {
        int[] undertoasted = { 5, 6, 7 };
        int[] overtoasted = { 2, 8, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case235() {
        int[] undertoasted = { 2, 4, 6 };
        int[] overtoasted = { 1, 3, 5, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case236() {
        int[] undertoasted = { 1, 10 };
        int[] overtoasted = { 2 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case237() {
        int[] undertoasted = { 2, 4 };
        int[] overtoasted = { 1, 3 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case238() {
        int[] undertoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] overtoasted = { 33 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case239() {
        int[] undertoasted = { 1, 5 };
        int[] overtoasted = { 2, 3 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case240() {
        int[] undertoasted = { 2, 5 };
        int[] overtoasted = { 1, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case241() {
        int[] undertoasted = { 2, 3, 4 };
        int[] overtoasted = { 1, 5, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case242() {
        int[] undertoasted = { 1, 3, 5, 7 };
        int[] overtoasted = { 2, 4, 6, 8 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case243() {
        int[] undertoasted = { 3, 5 };
        int[] overtoasted = { 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case244() {
        int[] undertoasted = { 2, 3, 4 };
        int[] overtoasted = { 1, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case245() {
        int[] undertoasted = { 1, 4, 8, 16 };
        int[] overtoasted = { 3, 5, 10 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case246() {
        int[] undertoasted = { 870619, 460596, 5449, 309629, 52369, 952816, 522957, 177265, 711050, 362674, 148728, 541341, 73816, 984904, 364656, 901347, 893561, 798060, 829646, 446938, 871325, 61387, 765977, 300993, 696163, 893568, 340679, 110222, 808540, 505558, 737665, 297764, 6725, 239625, 363806, 580695, 961553, 303237, 196710, 232170, 266075, 120356, 877008, 911119, 381879, 623922, 716996, 196076, 607777, 817196 };
        int[] overtoasted = { 584921, 620948, 43530, 538427, 828759, 779275, 637459, 839036, 439989, 795458, 880520, 962171, 347226, 53215, 863467, 414578, 138719, 553139, 152043, 602125, 348426, 858948, 894312, 50089, 351827, 13765, 836464, 765071, 83554, 598104, 385795, 116157, 667407, 536403, 349075, 17628, 500064, 73975, 627580, 52874, 603534, 437177, 292559, 576273, 217662, 213052, 617483, 759981, 354826, 350483 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case247() {
        int[] undertoasted = { 1, 8 };
        int[] overtoasted = { 2, 3, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case248() {
        int[] undertoasted = { 6 };
        int[] overtoasted = { 1, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case249() {
        int[] undertoasted = { 1, 5 };
        int[] overtoasted = { 3, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case250() {
        int[] undertoasted = { 2, 4, 6 };
        int[] overtoasted = { 3, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case251() {
        int[] undertoasted = { 1, 8 };
        int[] overtoasted = { 2, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case252() {
        int[] undertoasted = { 2, 4 };
        int[] overtoasted = { 1, 3, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case253() {
        int[] undertoasted = { 2, 5 };
        int[] overtoasted = { 1, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case254() {
        int[] undertoasted = { 4 };
        int[] overtoasted = { 2, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case255() {
        int[] undertoasted = { 4, 5, 6 };
        int[] overtoasted = { 2, 3, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case256() {
        int[] undertoasted = { 1, 3, 1000 };
        int[] overtoasted = { 2, 4, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case257() {
        int[] undertoasted = { 3 };
        int[] overtoasted = { 2, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case258() {
        int[] undertoasted = { 2, 3, 5 };
        int[] overtoasted = { 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case259() {
        int[] undertoasted = { 3, 4 };
        int[] overtoasted = { 1, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case260() {
        int[] undertoasted = { 2 };
        int[] overtoasted = { 1, 3 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case261() {
        int[] undertoasted = { 5 };
        int[] overtoasted = { 1, 10 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case262() {
        int[] undertoasted = { 2, 5, 9 };
        int[] overtoasted = { 1, 7, 10 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case263() {
        int[] undertoasted = { 1, 4, 6 };
        int[] overtoasted = { 3, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case264() {
        int[] undertoasted = { 1, 9 };
        int[] overtoasted = { 2, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case265() {
        int[] undertoasted = { 1, 4 };
        int[] overtoasted = { 2 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case266() {
        int[] undertoasted = { 2, 7, 1, 8, 9, 10, 11, 4 };
        int[] overtoasted = { 5, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case267() {
        int[] undertoasted = { 2, 3, 5 };
        int[] overtoasted = { 1, 4, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case268() {
        int[] undertoasted = { 1, 6 };
        int[] overtoasted = { 2, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case269() {
        int[] undertoasted = { 10 };
        int[] overtoasted = { 6, 15 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case270() {
        int[] undertoasted = { 2, 7 };
        int[] overtoasted = { 4, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case271() {
        int[] undertoasted = { 3, 5 };
        int[] overtoasted = { 1, 2, 4, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case272() {
        int[] undertoasted = { 5, 7 };
        int[] overtoasted = { 4, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case273() {
        int[] undertoasted = { 2, 3 };
        int[] overtoasted = { 1, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case274() {
        int[] undertoasted = { 1, 2, 3, 9 };
        int[] overtoasted = { 5, 6, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case275() {
        int[] undertoasted = { 1, 5, 10 };
        int[] overtoasted = { 2, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case276() {
        int[] undertoasted = { 1, 2, 3, 8 };
        int[] overtoasted = { 5, 6, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case277() {
        int[] undertoasted = { 5, 6 };
        int[] overtoasted = { 4, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case278() {
        int[] undertoasted = { 2, 4 };
        int[] overtoasted = { 3 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case279() {
        int[] undertoasted = { 1, 20, 18, 22, 3, 5 };
        int[] overtoasted = { 4, 2, 6, 17, 9, 21, 19, 23, 13, 14 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case280() {
        int[] undertoasted = { 4, 5 };
        int[] overtoasted = { 3, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case281() {
        int[] undertoasted = { 5, 3, 6, 2 };
        int[] overtoasted = { 7, 4 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case282() {
        int[] undertoasted = { 30, 40, 50 };
        int[] overtoasted = { 2, 3, 90 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case283() {
        int[] undertoasted = { 1, 2, 3, 5, 6, 7, 9 };
        int[] overtoasted = { 4, 8, 10, 11, 12, 13, 14 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case284() {
        int[] undertoasted = { 4, 9 };
        int[] overtoasted = { 5, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case285() {
        int[] undertoasted = { 1, 20 };
        int[] overtoasted = { 3, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case286() {
        int[] undertoasted = { 14, 9, 5 };
        int[] overtoasted = { 20, 25, 1 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case287() {
        int[] undertoasted = { 6, 7 };
        int[] overtoasted = { 1, 8, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case288() {
        int[] undertoasted = { 3, 4, 5 };
        int[] overtoasted = { 2, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case289() {
        int[] undertoasted = { 1, 7 };
        int[] overtoasted = { 2 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case290() {
        int[] undertoasted = { 4, 5, 9 };
        int[] overtoasted = { 6, 7, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case291() {
        int[] undertoasted = { 1, 2, 3, 4, 100 };
        int[] overtoasted = { 10, 11, 12, 121 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case292() {
        int[] undertoasted = { 1, 4, 5 };
        int[] overtoasted = { 2, 3, 7 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case293() {
        int[] undertoasted = { 13, 26 };
        int[] overtoasted = { 25, 11 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case294() {
        int[] undertoasted = { 10 };
        int[] overtoasted = { 20 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case295() {
        int[] undertoasted = { 3, 4, 5, 6, 7 };
        int[] overtoasted = { 1, 2, 8, 9, 10 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case296() {
        int[] undertoasted = { 2, 4, 6, 8 };
        int[] overtoasted = { 10, 20, 30, 3, 5 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case297() {
        int[] undertoasted = { 3 };
        int[] overtoasted = { 1, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case298() {
        int[] undertoasted = { 1, 4, 8, 12 };
        int[] overtoasted = { 2, 5, 9, 15 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case299() {
        int[] undertoasted = { 3, 6 };
        int[] overtoasted = { 1, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case300() {
        int[] undertoasted = { 3, 4, 10 };
        int[] overtoasted = { 1, 5, 11 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case301() {
        int[] undertoasted = { 2, 7 };
        int[] overtoasted = { 3, 4, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case302() {
        int[] undertoasted = { 289, 30107, 9041, 8943, 19265, 22649, 27447, 23806, 15891, 6730, 24371, 15351, 15007, 31102, 24394, 3549, 19630, 12624, 24085, 19955, 18757, 11841, 4967, 7377, 13932, 26309, 16945, 32440, 24627, 11324, 5538, 21539, 16119, 2083, 22930, 16542, 4834, 31116, 4640, 29659, 22705 };
        int[] overtoasted = { 9931, 13978, 2307, 31674, 22387, 5022, 28746, 26925, 19073, 6271, 5830, 26778, 15574, 5098, 16513, 23987, 13291, 9162, 18637, 22356, 24768, 23656, 15575, 4032, 12053, 27351, 1151, 16942, 21725, 13967, 3431, 31108, 30192, 18008, 11338, 15458, 12288, 27754, 10384, 14946, 8910, 32210, 9759 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case303() {
        int[] undertoasted = { 6, 7 };
        int[] overtoasted = { 5, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case304() {
        int[] undertoasted = { 4, 5 };
        int[] overtoasted = { 1, 2, 3, 6, 7, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case305() {
        int[] undertoasted = { 3, 4 };
        int[] overtoasted = { 1, 2 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case306() {
        int[] undertoasted = { 1, 7, 8, 9, 10 };
        int[] overtoasted = { 2, 3, 4, 5, 6, 11 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case307() {
        int[] undertoasted = { 100 };
        int[] overtoasted = { 2, 3, 1000 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case308() {
        int[] undertoasted = { 1, 4, 5, 7 };
        int[] overtoasted = { 2, 3, 6, 10 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case309() {
        int[] undertoasted = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        int[] overtoasted = { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case310() {
        int[] undertoasted = { 5, 7 };
        int[] overtoasted = { 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case311() {
        int[] undertoasted = { 5, 6 };
        int[] overtoasted = { 4, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case312() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11, 12, 25, 17, 35, 19 };
        int[] overtoasted = { 8, 4, 6, 16, 18, 24, 32, 10 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case313() {
        int[] undertoasted = { 1, 5, 10 };
        int[] overtoasted = { 2, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case314() {
        int[] undertoasted = { 2, 3, 56 };
        int[] overtoasted = { 5, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case315() {
        int[] undertoasted = { 1 };
        int[] overtoasted = { 5 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case316() {
        int[] undertoasted = { 1, 3, 5, 10 };
        int[] overtoasted = { 6, 7, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case317() {
        int[] undertoasted = { 3 };
        int[] overtoasted = { 4 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case318() {
        int[] undertoasted = { 2, 4 };
        int[] overtoasted = { 3, 5 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case319() {
        int[] undertoasted = { 2, 4, 1000 };
        int[] overtoasted = { 5, 6, 3 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case320() {
        int[] undertoasted = { 1, 100 };
        int[] overtoasted = { 2, 3, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case321() {
        int[] undertoasted = { 1, 5, 3 };
        int[] overtoasted = { 2, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case322() {
        int[] undertoasted = { 3, 6 };
        int[] overtoasted = { 4, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case323() {
        int[] undertoasted = { 100001, 100009 };
        int[] overtoasted = { 100003, 100006 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case324() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 12, 14, 16 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case325() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11, 12, 25, 39, 17, 21 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 15, 20, 23, 77, 89, 64, 43 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case326() {
        int[] undertoasted = { 5, 7 };
        int[] overtoasted = { 3, 6, 11 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case327() {
        int[] undertoasted = { 3, 7, 8 };
        int[] overtoasted = { 4, 5, 6 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case328() {
        int[] undertoasted = { 5, 6, 7 };
        int[] overtoasted = { 1, 2, 35 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case329() {
        int[] undertoasted = { 2, 5 };
        int[] overtoasted = { 3, 4, 6, 10, 100 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case330() {
        int[] undertoasted = { 2, 7 };
        int[] overtoasted = { 3, 5 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case331() {
        int[] undertoasted = { 1, 2 };
        int[] overtoasted = { 4 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case332() {
        int[] undertoasted = { 2, 6 };
        int[] overtoasted = { 1, 3, 15 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case333() {
        int[] undertoasted = { 4, 5 };
        int[] overtoasted = { 3, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case334() {
        int[] undertoasted = { 2, 4, 6, 8, 12 };
        int[] overtoasted = { 10, 20, 30, 3 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case335() {
        int[] undertoasted = { 2, 6 };
        int[] overtoasted = { 3, 10 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case336() {
        int[] undertoasted = { 3 };
        int[] overtoasted = { 5 };
        assertEquals(1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case337() {
        int[] undertoasted = { 1, 5 };
        int[] overtoasted = { 2, 4 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case338() {
        int[] undertoasted = { 1, 3, 5, 7, 9, 11, 13 };
        int[] overtoasted = { 2, 4, 6, 8, 10, 12, 100 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case339() {
        int[] undertoasted = { 142, 101, 14, 112, 149, 8, 54, 26, 151, 194, 153, 120, 34, 110, 84, 68, 86, 6, 181, 2, 135, 123, 160, 154, 83, 164, 52, 118, 75, 23, 51, 9, 19, 44, 1, 77, 21, 81, 96, 161, 158, 91, 22, 134, 140, 106, 99, 111, 107, 76 };
        int[] overtoasted = { 20, 169, 211, 131, 41, 186, 58, 94, 143, 40, 124, 166, 199, 31, 71, 38, 24, 35, 121, 63, 187, 102, 132, 105, 73, 182, 275, 93, 167, 162, 37, 88, 32, 114, 129, 185, 16, 150, 113, 98, 43, 119, 69, 87, 18, 104, 152, 220, 141, 195 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case340() {
        int[] undertoasted = { 1, 4, 5 };
        int[] overtoasted = { 2, 3 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case341() {
        int[] undertoasted = { 4, 8 };
        int[] overtoasted = { 5, 7 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case342() {
        int[] undertoasted = { 5, 10 };
        int[] overtoasted = { 4, 8 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case343() {
        int[] undertoasted = { 2, 4, 6, 8 };
        int[] overtoasted = { 1, 3, 5, 7, 9 };
        assertEquals(-1, toastxtoast.bake(undertoasted, overtoasted));
    }

    @Test
    public void case344() {
        int[] undertoasted = { 1, 3, 5, 7 };
        int[] overtoasted = { 2, 4, 6, 8, 100, 1000 };
        assertEquals(2, toastxtoast.bake(undertoasted, overtoasted));
    }

}
