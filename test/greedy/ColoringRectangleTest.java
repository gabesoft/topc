package topc.test.greedy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.greedy.*;

public class ColoringRectangleTest {
    ColoringRectangle coloringrectangle = new ColoringRectangle();

    @Test
    public void case1() {
        int width = 11;
        int height = 3;
        int[] red = { 5, 5 };
        int[] blue = { 2, 5 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case2() {
        int width = 30;
        int height = 5;
        int[] red = { 4, 10, 7, 8, 10 };
        int[] blue = { 5, 6, 11, 7, 5 };
        assertEquals(4, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case3() {
        int width = 16;
        int height = 4;
        int[] red = { 6, 5, 7 };
        int[] blue = { 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case4() {
        int width = 4;
        int height = 4;
        int[] red = { 5 };
        int[] blue = { 6 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case5() {
        int width = 6;
        int height = 2;
        int[] red = { 6, 6 };
        int[] blue = { 2 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case6() {
        int width = 499;
        int height = 12;
        int[] red = { 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
        int[] blue = { 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
        assertEquals(100, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case7() {
        int width = 486;
        int height = 12;
        int[] red = { 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
        int[] blue = { 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case8() {
        int width = 1;
        int height = 1;
        int[] red = { 1 };
        int[] blue = { 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case9() {
        int width = 1;
        int height = 1;
        int[] red = { 1000, 1 };
        int[] blue = { 1, 1000 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case10() {
        int width = 1;
        int height = 1;
        int[] red = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] blue = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case11() {
        int width = 15;
        int height = 3;
        int[] red = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] blue = { 4, 3, 4, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 2, 2, 2, 2, 1 };
        assertEquals(11, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case12() {
        int width = 15;
        int height = 3;
        int[] red = { 4, 3, 4, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 2, 2, 2, 2, 1 };
        int[] blue = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(11, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case13() {
        int width = 1;
        int height = 10000;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case14() {
        int width = 282;
        int height = 9999;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        assertEquals(2, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case15() {
        int width = 283;
        int height = 9999;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case16() {
        int width = 122;
        int height = 1;
        int[] red = { 4, 8, 15, 15, 19, 19, 21, 1, 4, 9, 19, 21, 13, 6, 7, 4, 8, 19, 21, 19, 11, 8, 8, 11, 4, 20, 21, 13, 16, 5, 16, 3, 21, 19, 14, 20, 3, 1, 13, 13, 12, 9, 1 };
        int[] blue = { 10, 9, 1, 7, 19, 8, 8, 3, 5, 1, 5, 10, 18, 11, 5, 10, 9, 1, 4, 21, 5, 14, 13, 13, 6, 12, 15, 7, 12, 4, 6, 16, 10, 18, 17, 5, 18, 17, 14, 1, 14, 5, 18, 12, 7, 19, 9, 16, 1 };
        assertEquals(7, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case17() {
        int width = 664;
        int height = 1;
        int[] red = { 4, 8, 15, 15, 19, 19, 21, 1, 4, 9, 19, 21, 13, 6, 7, 4, 8, 19, 21, 19, 11, 8, 8, 11, 4, 20, 21, 13, 16, 5, 16, 3, 21, 19, 14, 20, 3, 1, 13, 13, 12, 9, 1 };
        int[] blue = { 10, 9, 1, 7, 19, 8, 8, 3, 5, 1, 5, 10, 18, 11, 5, 10, 9, 1, 4, 21, 5, 14, 13, 13, 6, 12, 15, 7, 12, 4, 6, 16, 10, 18, 17, 5, 18, 17, 14, 1, 14, 5, 18, 12, 7, 19, 9, 16, 1 };
        assertEquals(40, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case18() {
        int width = 8235;
        int height = 1;
        int[] red = { 4, 8, 15, 15, 19, 19, 21, 1, 4, 9, 19, 21, 13, 6, 7, 4, 8, 19, 21, 19, 11, 8, 8, 11, 4, 20, 21, 13, 16, 5, 16, 3, 21, 19, 14, 20, 3, 1, 13, 13, 12, 9, 1 };
        int[] blue = { 10, 9, 1, 7, 19, 8, 8, 3, 5, 1, 5, 10, 18, 11, 5, 10, 9, 1, 4, 21, 5, 14, 13, 13, 6, 12, 15, 7, 12, 4, 6, 16, 10, 18, 17, 5, 18, 17, 14, 1, 14, 5, 18, 12, 7, 19, 9, 16, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case19() {
        int width = 7319;
        int height = 2;
        int[] red = { 1043, 1077, 200, 841, 522, 383, 484, 420, 740, 266, 282, 714, 113, 425, 677, 249, 456, 557, 981, 959, 353, 962, 1015, 1043, 237, 670, 58, 478, 309, 117, 33, 361 };
        int[] blue = { 1045, 870, 652, 163, 759, 1055, 948, 994, 37, 795, 752, 849, 761, 611, 904, 410, 1042, 657, 459, 381, 261, 580, 99, 17, 675, 1002 };
        assertEquals(7, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case20() {
        int width = 773;
        int height = 2;
        int[] red = { 22, 10, 11, 14, 3, 9, 8, 21, 10, 20, 21, 7, 19, 22, 22, 21, 3, 8, 13, 13, 9, 4, 13, 3, 17, 4, 4, 6, 6, 11, 13, 8, 6, 10, 12, 9, 11, 12, 22, 11, 22, 12, 2 };
        int[] blue = { 14, 7, 8, 7, 8, 13, 18, 3, 17, 6, 3, 14, 12, 21, 22, 22, 9, 19, 6, 19, 3, 8, 21, 4, 8, 13, 18, 20, 5, 5, 14, 4, 12, 16, 19, 15, 15, 16, 11, 18, 16, 17, 13, 8, 2 };
        assertEquals(47, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case21() {
        int width = 6211;
        int height = 10;
        int[] red = { 791, 116, 140, 1010, 104, 168, 46, 76, 677, 753, 168, 56, 455, 538, 383, 393, 1096, 238, 743, 48, 439, 947, 8, 904, 542, 735, 621, 930, 238, 113, 233, 22, 567, 609, 463, 681, 705, 227, 614, 937, 713, 242, 65, 905, 892, 876 };
        int[] blue = { 494, 321, 148, 86, 307, 721, 354, 121, 407, 260, 690, 411, 1060, 1089, 100, 1010, 858, 890, 451, 693, 813, 834, 416, 305, 564, 755, 901, 938, 590, 631, 825, 872, 710, 993, 339 };
        assertEquals(6, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case22() {
        int width = 298;
        int height = 10;
        int[] red = { 16, 20, 29, 13, 26, 22, 23, 20, 27, 13, 23, 10, 23, 18, 12, 15, 11, 18, 21, 26, 27, 22, 12, 10, 29, 23, 15, 11, 11, 12, 13, 29, 26, 19, 29, 28, 12, 27, 22, 29, 10 };
        int[] blue = { 17, 13, 13, 26, 15, 28, 19, 25, 13, 22, 16, 17, 17, 17, 26, 15, 11, 14, 13, 30, 13, 29, 13, 14, 21, 15, 15, 16, 27, 15, 22, 29, 10, 23, 17, 28, 26, 16, 21, 19, 13, 25, 10 };
        assertEquals(12, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case23() {
        int width = 9043;
        int height = 70;
        int[] red = { 34, 512, 702, 563, 1038, 592, 675, 697, 47, 173, 880, 893, 403, 261, 996, 341, 366, 175, 193, 158, 797, 30, 640, 628, 986, 148, 21, 228, 1031, 621, 724, 424, 233, 206, 511 };
        int[] blue = { 126, 482, 1000, 242, 1026, 963, 875, 1002, 307, 720, 871, 698, 287, 698, 719, 67, 11, 696, 336, 318, 37, 27, 545, 666, 37, 549, 804, 43, 479, 494, 1023, 131, 583, 645, 450, 659, 303 };
        assertEquals(9, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case24() {
        int width = 3468;
        int height = 70;
        int[] red = { 78, 90, 85, 93, 80, 89, 84, 85, 84, 93, 91, 92, 78, 92, 74, 92, 84, 93, 90, 71, 83, 79, 75, 73, 92, 74, 81, 88, 81, 89, 71, 87, 91, 78, 73, 84, 88, 78, 89, 80, 72, 73, 86, 72, 93, 90, 74, 79 };
        int[] blue = { 71, 84, 79, 79, 75, 84, 78, 78, 80, 83, 72, 75, 77, 83, 79, 71, 87, 81, 72, 87, 83, 82, 73, 78, 81, 78, 73, 74, 71, 77, 71, 80, 79, 74, 84, 77, 79, 84, 81, 81, 74, 83, 79, 78, 85, 83, 87 };
        assertEquals(81, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case25() {
        int width = 1821;
        int height = 70;
        int[] red = { 89, 84, 82, 82, 77, 74, 75, 70, 87, 83, 79, 73, 72, 83, 73, 85, 85, 75, 87, 77, 89, 70, 73, 88, 75, 76, 78, 82, 80, 85, 72, 90, 89, 79, 70, 87, 72, 82, 90, 78, 70 };
        int[] blue = { 82, 90, 87, 72, 73, 79, 86, 82, 88, 90, 74, 86, 81, 74, 89, 85, 79, 75, 77, 73, 74, 72, 81, 73, 80, 72, 89, 90, 70, 89, 70, 83, 73, 85, 86, 90, 88, 78, 80, 77, 82, 80, 70 };
        assertEquals(37, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case26() {
        int width = 2075;
        int height = 280;
        int[] red = { 1057, 33, 811, 561, 714, 70, 319, 512, 937, 1045, 117, 497, 758, 528, 280, 1035, 208, 1020, 114, 50, 160, 276, 74, 416, 641, 813, 46, 911, 568, 269, 270, 674, 746, 50, 121, 68, 1043, 413, 450, 465 };
        int[] blue = { 762, 541, 122, 414, 714, 928, 231, 923, 134, 760, 591, 1014, 553, 340, 1084, 301, 1001, 796, 780, 990, 270, 233, 607, 305, 516, 457, 205, 736, 58, 601, 390, 831, 38, 807, 1092, 92, 303, 501, 70, 912, 368, 749, 895, 867, 975, 1090, 548, 569 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case27() {
        int width = 5857;
        int height = 280;
        int[] red = { 331, 301, 311, 333, 358, 318, 308, 329, 373, 325, 295, 318, 357, 358, 293, 370, 294, 299, 369, 345, 369, 322, 328, 331, 281, 348, 305, 314, 304, 324, 346, 310, 301, 359, 282, 358, 295, 302, 309, 312, 282, 298, 368, 332, 330, 330, 342, 285 };
        int[] blue = { 504, 387, 541, 370, 397, 366, 524, 527, 511, 417, 341, 363, 513, 292, 291, 466, 433, 312, 292, 466, 442, 363, 421, 298, 441, 396, 529, 282, 506, 295, 378, 468, 467, 435, 351, 428, 529, 306, 430, 293, 482, 361, 348, 332, 331, 529, 507 };
        assertEquals(17, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case28() {
        int width = 2089;
        int height = 280;
        int[] red = { 331, 301, 311, 333, 358, 318, 308, 329, 373, 325, 295, 318, 357, 358, 293, 370, 294, 299, 369, 345, 369, 322, 328, 331, 281, 348, 305, 314, 304, 324, 346, 310, 301, 359, 282, 358, 295, 302, 309, 312, 282, 298, 368, 332, 330, 330, 342, 285 };
        int[] blue = { 504, 387, 541, 370, 397, 366, 524, 527, 511, 417, 341, 363, 513, 292, 291, 466, 433, 312, 292, 466, 442, 363, 421, 298, 441, 396, 529, 282, 506, 295, 378, 468, 467, 435, 351, 428, 529, 306, 430, 293, 482, 361, 348, 332, 331, 529, 507 };
        assertEquals(6, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case29() {
        int width = 3937;
        int height = 280;
        int[] red = { 300, 292, 285, 295, 293, 297, 287, 295, 285, 297, 284, 290, 292, 297, 293, 281, 300, 295, 285, 287, 288, 281, 286, 296, 294, 298, 287, 296, 295, 297, 284, 292, 291, 293, 291, 289, 299, 298, 280, 292, 280, 293, 294, 280, 297, 288, 280, 280 };
        int[] blue = { 291, 300, 298, 283, 290, 285, 281, 300, 300, 288, 293, 280, 294, 292, 295, 290, 298, 297, 280, 292, 281, 295, 300, 300, 282, 280, 286, 285, 284, 286, 282, 281, 287, 288, 298, 288, 281, 293, 284, 285, 285, 297, 299, 284, 283, 280 };
        assertEquals(41, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case30() {
        int width = 1467;
        int height = 280;
        int[] red = { 300, 292, 285, 295, 293, 297, 287, 295, 285, 297, 284, 290, 292, 297, 293, 281, 300, 295, 285, 287, 288, 281, 286, 296, 294, 298, 287, 296, 295, 297, 284, 292, 291, 293, 291, 289, 299, 298, 280, 292, 280, 293, 294, 280, 297, 288, 280, 280 };
        int[] blue = { 291, 300, 298, 283, 290, 285, 281, 300, 300, 288, 293, 280, 294, 292, 295, 290, 298, 297, 280, 292, 281, 295, 300, 300, 282, 280, 286, 285, 284, 286, 282, 281, 287, 288, 298, 288, 281, 293, 284, 285, 285, 297, 299, 284, 283, 280 };
        assertEquals(14, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case31() {
        int width = 6242;
        int height = 280;
        int[] red = { 300, 292, 285, 295, 293, 297, 287, 295, 285, 297, 284, 290, 292, 297, 293, 281, 300, 295, 285, 287, 288, 281, 286, 296, 294, 298, 287, 296, 295, 297, 284, 292, 291, 293, 291, 289, 299, 298, 280, 292, 280, 293, 294, 280, 297, 288, 280, 280 };
        int[] blue = { 291, 300, 298, 283, 290, 285, 281, 300, 300, 288, 293, 280, 294, 292, 295, 290, 298, 297, 280, 292, 281, 295, 300, 300, 282, 280, 286, 285, 284, 286, 282, 281, 287, 288, 298, 288, 281, 293, 284, 285, 285, 297, 299, 284, 283, 280 };
        assertEquals(80, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case32() {
        int width = 8724;
        int height = 1400;
        int[] red = { 2243, 1658, 2408, 1653, 2519, 2765, 1969, 2617, 2386, 2052, 2086, 2701, 2751, 1990, 1979, 1750, 2019, 2276, 1476, 1479, 2619, 2597, 2268, 1793, 1560, 1764, 1773, 2547, 2504, 2080, 2329, 2290, 2055, 1930, 1682, 1978, 2590, 2604, 2621, 2517, 1882, 2520, 2308, 1548, 1864, 2566, 1723, 2620, 1520 };
        int[] blue = { 1518, 1407, 1622, 1557, 1407, 1450, 1444, 1595, 1571, 1597, 1544, 1497, 1555, 1563, 1519, 1518, 1607, 1478, 1506, 1561, 1492, 1620, 1476, 1418, 1573, 1458, 1606, 1618, 1429, 1553, 1451, 1483, 1442, 1570, 1480, 1463, 1576, 1508, 1457, 1403, 1537, 1549, 1542, 1580, 1627, 1629, 1436, 1416, 1583 };
        assertEquals(5, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case33() {
        int width = 2714;
        int height = 1400;
        int[] red = { 1418, 1414, 1407, 1402, 1402, 1414, 1419, 1420, 1417, 1415, 1419, 1407, 1414, 1418, 1420, 1400, 1405, 1404, 1402, 1415, 1414, 1415, 1404, 1411, 1402, 1413, 1402, 1409, 1418, 1412, 1402, 1410, 1411, 1414, 1407, 1400, 1405, 1410, 1405, 1416, 1418, 1413, 1416, 1400 };
        int[] blue = { 1412, 1407, 1400, 1417, 1411, 1409, 1416, 1418, 1401, 1417, 1408, 1414, 1402, 1405, 1416, 1401, 1410, 1408, 1411, 1420, 1418, 1419, 1401, 1405, 1417, 1404, 1402, 1410, 1403, 1411, 1403, 1412, 1412, 1402, 1405, 1412, 1408, 1412, 1401, 1411, 1402, 1404, 1400 };
        assertEquals(12, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case34() {
        int width = 8430;
        int height = 7000;
        int[] red = { 7006, 7001, 7000, 7008, 7011, 7016, 7007, 7014, 7019, 7015, 7005, 7003, 7014, 7008, 7012, 7015, 7006, 7010, 7020, 7002, 7011, 7018, 7016, 7001, 7011, 7014, 7009, 7013, 7006, 7004, 7000, 7018, 7009, 7004, 7019, 7013, 7002, 7013, 7019, 7002, 7000 };
        int[] blue = { 7004, 7008, 7004, 7006, 7016, 7003, 7018, 7014, 7008, 7003, 7017, 7001, 7017, 7011, 7002, 7015, 7015, 7002, 7013, 7009, 7001, 7018, 7006, 7016, 7000, 7001, 7001, 7007, 7010, 7009, 7012, 7001, 7003, 7010, 7015, 7007, 7010, 7012, 7009, 7019, 7018, 7000 };
        assertEquals(17, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case35() {
        int width = 5705;
        int height = 1000;
        int[] red = { 1003, 1001, 1002, 1002, 1002, 1002, 1003, 1002, 1003, 1001, 1001, 1003, 1002, 1002, 1003, 1001, 1002, 1001, 1001, 1003, 1002, 1002, 1003, 1003, 1001, 1001, 1001, 1003, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1001, 1001, 1002, 1001, 999, 2000, 1000, 1000, 1000, 1000 };
        int[] blue = { 1001, 1003, 1001, 1001, 1003, 1001, 1002, 1003, 1002, 1002, 1003, 1002, 1001, 1002, 1003, 1001, 1001, 1003, 1002, 1001, 1001, 1001, 1001, 1003, 1001, 1002, 1002, 1001, 1002, 1003, 1001, 1002, 1001, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1003, 1002, 1001, 999, 2000 };
        assertEquals(33, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case36() {
        int width = 7931;
        int height = 1000;
        int[] red = { 1003, 1001, 1002, 1002, 1002, 1002, 1003, 1002, 1003, 1001, 1001, 1003, 1002, 1002, 1003, 1001, 1002, 1001, 1001, 1003, 1002, 1002, 1003, 1003, 1001, 1001, 1001, 1003, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1001, 1001, 1002, 1001, 999, 2000, 1000, 1000, 1000, 1000 };
        int[] blue = { 1001, 1003, 1001, 1001, 1003, 1001, 1002, 1003, 1002, 1002, 1003, 1002, 1001, 1002, 1003, 1001, 1001, 1003, 1002, 1001, 1001, 1001, 1001, 1003, 1001, 1002, 1002, 1001, 1002, 1003, 1001, 1002, 1001, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1003, 1002, 1001, 999, 2000 };
        assertEquals(72, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case37() {
        int width = 7287;
        int height = 1000;
        int[] red = { 1003, 1001, 1002, 1002, 1002, 1002, 1003, 1002, 1003, 1001, 1001, 1003, 1002, 1002, 1003, 1001, 1002, 1001, 1001, 1003, 1002, 1002, 1003, 1003, 1001, 1001, 1001, 1003, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1001, 1001, 1002, 1001, 999, 2000, 1000, 1000, 1000, 1000 };
        int[] blue = { 1001, 1003, 1001, 1001, 1003, 1001, 1002, 1003, 1002, 1002, 1003, 1002, 1001, 1002, 1003, 1001, 1001, 1003, 1002, 1001, 1001, 1001, 1001, 1003, 1001, 1002, 1002, 1001, 1002, 1003, 1001, 1002, 1001, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1003, 1002, 1001, 999, 2000 };
        assertEquals(58, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case38() {
        int width = 8871;
        int height = 1000;
        int[] red = { 1003, 1001, 1002, 1002, 1002, 1002, 1003, 1002, 1003, 1001, 1001, 1003, 1002, 1002, 1003, 1001, 1002, 1001, 1001, 1003, 1002, 1002, 1003, 1003, 1001, 1001, 1001, 1003, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1001, 1001, 1002, 1001, 999, 2000, 1000, 1000, 1000, 1000 };
        int[] blue = { 1001, 1003, 1001, 1001, 1003, 1001, 1002, 1003, 1002, 1002, 1003, 1002, 1001, 1002, 1003, 1001, 1001, 1003, 1002, 1001, 1001, 1001, 1001, 1003, 1001, 1002, 1002, 1001, 1002, 1003, 1001, 1002, 1001, 1003, 1001, 1002, 1002, 1003, 1001, 1001, 1002, 1003, 1001, 1002, 1002, 1003, 1002, 1001, 999, 2000 };
        assertEquals(95, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case39() {
        int width = 8285;
        int height = 54;
        int[] red = { 162, 90, 89, 73, 172, 141, 80, 133, 154, 64, 141, 56, 174, 102, 77, 191, 130, 191, 180, 158, 69, 106, 136, 112, 79, 94, 73, 193, 195, 71, 171, 72, 147, 126, 145, 131 };
        int[] blue = { 111, 84, 67, 126, 106, 114, 116, 171, 176, 82, 102, 142, 81, 191, 78, 105, 192, 115, 142, 106, 196, 157, 144, 108, 89, 97, 56, 107, 112, 182, 112, 80, 126, 191, 101, 197, 169, 156, 113, 56, 134, 70 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case40() {
        int width = 8284;
        int height = 54;
        int[] red = { 162, 90, 89, 73, 172, 141, 80, 133, 154, 64, 141, 56, 174, 102, 77, 191, 130, 191, 180, 158, 69, 106, 136, 112, 79, 94, 73, 193, 195, 71, 171, 72, 147, 126, 145, 131 };
        int[] blue = { 111, 84, 67, 126, 106, 114, 116, 171, 176, 82, 102, 142, 81, 191, 78, 105, 192, 115, 142, 106, 196, 157, 144, 108, 89, 97, 56, 107, 112, 182, 112, 80, 126, 191, 101, 197, 169, 156, 113, 56, 134, 70 };
        assertEquals(73, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case41() {
        int width = 9889;
        int height = 1;
        int[] red = { 138, 180, 183, 40, 182, 101, 18, 145, 197, 38, 81, 170, 58, 119, 106, 45, 75, 186, 25, 131, 176, 65, 200, 112, 124, 193, 50, 79, 59, 2, 50, 85, 137, 68, 130, 66, 21, 56, 169, 40, 117, 122, 134, 39, 137, 52, 187, 147, 178, 164 };
        int[] blue = { 157, 87, 132, 178, 41, 80, 78, 59, 115, 7, 173, 56, 22, 134, 12, 18, 175, 175, 53, 46, 5, 67, 186, 63, 46, 28, 157, 138, 190, 52, 47, 17, 113, 158, 83, 170, 39, 157, 151, 3, 27, 24, 36, 143, 176, 61, 22, 123, 140, 93 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case42() {
        int width = 9888;
        int height = 1;
        int[] red = { 138, 180, 183, 40, 182, 101, 18, 145, 197, 38, 81, 170, 58, 119, 106, 45, 75, 186, 25, 131, 176, 65, 200, 112, 124, 193, 50, 79, 59, 2, 50, 85, 137, 68, 130, 66, 21, 56, 169, 40, 117, 122, 134, 39, 137, 52, 187, 147, 178, 164 };
        int[] blue = { 157, 87, 132, 178, 41, 80, 78, 59, 115, 7, 173, 56, 22, 134, 12, 18, 175, 175, 53, 46, 5, 67, 186, 63, 46, 28, 157, 138, 190, 52, 47, 17, 113, 158, 83, 170, 39, 157, 151, 3, 27, 24, 36, 143, 176, 61, 22, 123, 140, 93 };
        assertEquals(100, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case43() {
        int width = 9871;
        int height = 54;
        int[] red = { 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54 };
        int[] blue = { 60, 104, 116, 118, 65, 153, 76, 86, 88, 92, 154, 135, 142, 110, 116, 92, 115, 81, 95, 137, 147, 64, 110, 65, 115, 106, 131, 154, 67, 64, 76, 122, 106, 90, 139, 135, 85, 143, 116, 150, 135, 124, 94, 87, 56, 81, 116, 112, 61, 129 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case44() {
        int width = 3677;
        int height = 169;
        int[] red = { 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169 };
        int[] blue = { 176, 230, 182, 199, 257, 204, 179, 228, 225, 267, 171, 268, 230, 171, 202, 197, 238, 254, 260, 211, 266, 174, 200, 263, 173, 245, 262, 197, 238, 185, 207, 262, 175, 252, 211, 246, 219, 227, 262, 193, 247, 229, 222, 218, 264, 250, 220, 237, 196, 237 };
        assertEquals(39, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case45() {
        int width = 851;
        int height = 45;
        int[] red = { 60, 65, 71, 68, 58, 65, 71, 51, 54, 51, 73, 74, 65, 69, 56, 62, 47, 66, 52, 68, 72, 47, 73, 54, 63, 70, 67, 46, 49, 55, 75, 57, 52, 46, 61, 53, 66, 61, 67, 58, 54, 70, 64, 71, 71, 64, 51, 66, 50, 72 };
        int[] blue = { 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45 };
        assertEquals(31, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case46() {
        int width = 8836;
        int height = 11;
        int[] red = { 34, 20, 36, 27, 15, 18, 20, 33, 18, 34, 15, 13, 33, 24, 32, 38, 31, 25, 18, 40, 21, 19, 27, 25, 24, 37, 35, 12, 37, 36, 33, 30, 14, 28, 13, 15, 30, 39, 37, 41, 14, 26, 17, 29, 18, 12, 38, 28, 20, 16 };
        int[] blue = { 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case47() {
        int width = 3621;
        int height = 109;
        int[] red = { 642, 498, 361, 736, 712, 595, 368, 899, 350, 35, 71, 612, 74, 57, 113, 488, 544, 566, 202, 521, 120, 227, 139, 254, 731, 269, 516, 91, 356, 64, 660, 508, 417, 406, 76, 393, 567, 775, 429, 76, 900, 25, 587, 38, 185, 24, 843, 192, 273, 747 };
        int[] blue = { 15, 183, 208, 31, 126, 125, 3, 66, 3, 26, 185, 137, 25, 206, 38, 163, 142, 204, 6, 201, 122, 201, 130, 200, 47, 83, 205, 154, 80, 190, 183, 89, 103, 77, 140, 62, 178, 86, 45, 113, 62, 71, 103, 178, 79, 168, 106, 200, 95, 145 };
        assertEquals(7, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case48() {
        int width = 5398;
        int height = 84;
        int[] red = { 446, 133, 925, 902, 670, 188, 356, 375, 557, 406, 990, 238, 567, 986, 652, 492, 640, 902, 975, 939, 321, 882, 847, 453, 652, 273, 973, 719, 676, 778, 1059, 1079, 821, 305, 382, 894, 930, 528, 354, 862, 567, 407, 615, 924, 885, 85, 364, 657, 1088, 717 };
        int[] blue = { 14, 7, 12, 38, 94, 22, 66, 91, 36, 37, 15, 1, 57, 52, 107, 60, 15, 52, 70, 15, 65, 64, 93, 81, 97, 4, 44, 89, 7, 70, 58, 71, 28, 74, 50, 98, 92, 52, 53, 39, 67, 36, 71, 90, 41, 11, 72, 82, 32, 20 };
        assertEquals(10, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case49() {
        int width = 9026;
        int height = 286;
        int[] red = { 317, 244, 125, 188, 282, 228, 87, 282, 282, 195, 136, 32, 175, 325, 199, 143, 287, 248, 183, 21, 111, 331, 269, 312, 266, 95, 117, 159, 322, 20, 157, 214, 94, 271, 274, 152, 309, 218, 194, 338, 57, 292, 258, 149, 327, 131, 321, 324, 271, 88 };
        int[] blue = { 1217, 1361, 990, 219, 302, 528, 686, 923, 41, 491, 296, 1113, 471, 75, 968, 1310, 889, 659, 295, 627, 1183, 835, 225, 1302, 482, 71, 1368, 194, 776, 50, 201, 1223, 1036, 924, 426, 1348, 608, 879, 1106, 1117, 650, 224, 272, 662, 1154, 151, 63, 766, 1162, 395 };
        assertEquals(13, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case50() {
        int width = 5774;
        int height = 216;
        int[] red = { 563, 245, 559, 527, 546, 709, 745, 44, 607, 583, 767, 6, 390, 344, 481, 710, 720, 527, 585, 316, 822, 718, 17, 17, 134, 697, 472, 504, 771, 615, 279, 26, 176, 79, 760, 362, 357, 677, 713, 720, 597, 20, 325, 82, 751, 270, 284, 608, 556, 738 };
        int[] blue = { 144, 159, 148, 67, 173, 166, 192, 171, 343, 263, 180, 230, 170, 55, 145, 23, 263, 191, 286, 322, 207, 153, 246, 73, 99, 99, 197, 122, 330, 159, 118, 30, 105, 229, 269, 204, 335, 101, 270, 344, 247, 304, 107, 264, 82, 170, 184, 6, 105, 119 };
        assertEquals(12, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case51() {
        int width = 4739;
        int height = 638;
        int[] red = { 156, 189, 136, 445, 167, 480, 490, 127, 378, 710, 225, 555, 448, 17, 400, 707, 751, 745, 287, 220, 544, 20, 345, 577, 206, 121, 280, 598, 771, 159, 64, 362, 671, 177, 560, 66, 421, 712, 83, 496, 88, 245, 363, 221, 699, 289, 150, 33, 26, 330 };
        int[] blue = { 1083, 1094, 417, 661, 611, 37, 220, 138, 358, 711, 823, 1260, 404, 1302, 1090, 216, 561, 932, 1287, 738, 147, 343, 1077, 663, 308, 969, 217, 103, 808, 356, 601, 68, 1116, 726, 703, 1210, 902, 371, 1319, 35, 888, 981, 174, 1115, 521, 682, 738, 227, 278, 816 };
        assertEquals(7, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case52() {
        int width = 8193;
        int height = 9998;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        assertEquals(48, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case53() {
        int width = 8052;
        int height = 9998;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        assertEquals(47, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case54() {
        int width = 4638;
        int height = 9998;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        assertEquals(27, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case55() {
        int width = 4297;
        int height = 9998;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        assertEquals(26, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case56() {
        int width = 1025;
        int height = 9998;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        assertEquals(7, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case57() {
        int width = 10;
        int height = 5;
        int[] red = { 10, 10 };
        int[] blue = { 4, 3 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case58() {
        int width = 2000;
        int height = 1000;
        int[] red = { 3000, 1000, 1000, 1000, 1000, 1000, 1000, 3000, 1000, 1000 };
        int[] blue = { 1000, 900, 1000, 1000, 1000, 900, 1000, 1000, 1000, 1000 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case59() {
        int width = 2000;
        int height = 1000;
        int[] red = { 1000, 900, 1000, 1000, 1000, 900, 1000, 1000, 1000, 1000 };
        int[] blue = { 3000, 1000, 1000, 1000, 1000, 1000, 1000, 3000, 1000, 1000 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case60() {
        int width = 10000;
        int height = 10000;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case61() {
        int width = 10000;
        int height = 9999;
        int[] red = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        assertEquals(71, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case62() {
        int width = 10000;
        int height = 9999;
        int[] red = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case63() {
        int width = 10000;
        int height = 9999;
        int[] red = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 10000, 9999, 9999, 9999, 9999, 9999, 9999 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        assertEquals(99, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case64() {
        int width = 2958;
        int height = 4279;
        int[] red = { 211, 994, 681, 382, 1512, 2409, 583, 2458, 2260, 1399, 1190, 710, 760, 2177, 2460, 827, 1217, 2198, 989, 1874, 1899, 2121, 1607, 1908, 1022, 651, 883, 311, 925, 473, 435, 82, 112, 1790 };
        int[] blue = { 4885, 1200, 2089, 4414, 3607 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case65() {
        int width = 3154;
        int height = 568;
        int[] red = { 45, 6, 516, 491, 433 };
        int[] blue = { 1052, 133, 1573, 604, 194, 952 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case66() {
        int width = 6;
        int height = 4;
        int[] red = { 3 };
        int[] blue = { 6, 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case67() {
        int width = 2958;
        int height = 4279;
        int[] red = { 4885, 1200, 2089, 4414, 3607 };
        int[] blue = { 211, 994, 681, 382, 1512, 2409, 583, 2458, 2260, 1399, 1190, 710, 760, 2177, 2460, 827, 1217, 2198, 989, 1874, 1899, 2121, 1607, 1908, 1022, 651, 883, 311, 925, 473, 435, 82, 112, 1790 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case68() {
        int width = 7436;
        int height = 3664;
        int[] red = { 1865, 3663, 2765, 1963, 2265, 3301, 402, 75, 2025, 1964, 205, 1156, 993, 675, 1674 };
        int[] blue = { 503, 1717, 3662, 1095, 3206, 2742, 2016, 2991, 1524, 182, 1855, 2001 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case69() {
        int width = 10000;
        int height = 9998;
        int[] red = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        int[] blue = { 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 };
        assertEquals(71, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case70() {
        int width = 4767;
        int height = 1524;
        int[] red = { 1523, 1521, 1522, 1520, 1520, 1522, 1523, 1523, 1520, 1521 };
        int[] blue = { 1525, 2000, 2000, 2000, 2000, 4000, 4000, 2000, 4000, 2000, 4767, 4767, 4768, 4769, 4677 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case71() {
        int width = 4767;
        int height = 1524;
        int[] red = { 1523, 1521, 1522, 1520, 1520, 1522, 1523, 1523, 1520 };
        int[] blue = { 1525, 2000, 2000, 2000, 2000, 4000, 4000, 2000, 4000, 2000, 4767, 4767, 4768, 4769, 5077 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case72() {
        int width = 4767;
        int height = 1524;
        int[] red = { 1525, 2000, 2000, 2000, 2000, 4000, 4000, 2000, 4000, 2000, 4767, 4767, 4768, 4769, 4677 };
        int[] blue = { 1523, 1521, 1522, 1520, 1520, 1522, 1523, 1523, 1520, 1521 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case73() {
        int width = 50;
        int height = 10;
        int[] red = { 15, 9, 8, 7, 6, 5, 4, 3, 2, 1, 9, 9, 8, 7, 6, 8, 7 };
        int[] blue = { 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case74() {
        int width = 50;
        int height = 10;
        int[] red = { 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11 };
        int[] blue = { 15, 9, 8, 7, 6, 5, 4, 3, 2, 1, 9, 9, 8, 7, 6, 8, 7 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case75() {
        int width = 11;
        int height = 3;
        int[] red = { 5, 5 };
        int[] blue = { 2, 5 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case76() {
        int width = 6;
        int height = 2;
        int[] red = { 6, 6 };
        int[] blue = { 2 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case77() {
        int width = 16;
        int height = 4;
        int[] red = { 6, 5, 7 };
        int[] blue = { 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case78() {
        int width = 10000;
        int height = 50;
        int[] red = { 200, 200, 200, 200, 200, 200, 200, 200, 200, 200 };
        int[] blue = { 300, 300, 300, 300, 300, 300, 300, 300, 300, 300 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case79() {
        int width = 5;
        int height = 5;
        int[] red = { 3 };
        int[] blue = { 3 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case80() {
        int width = 14;
        int height = 2;
        int[] red = { 5, 6, 4, 7, 1, 4, 3 };
        int[] blue = { 5, 6, 4, 4, 3, 5, 1, 2 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case81() {
        int width = 399;
        int height = 3;
        int[] red = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 };
        int[] blue = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 };
        assertEquals(100, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case82() {
        int width = 2;
        int height = 6;
        int[] red = { 6, 6 };
        int[] blue = { 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case83() {
        int width = 10000;
        int height = 100;
        int[] red = { 96, 233, 121, 244, 231, 236, 144, 214, 211, 171, 134, 186, 115, 100, 123, 197, 133, 218, 221, 243, 136, 237, 168, 127, 139, 235, 146, 201, 116, 170, 196, 235, 145, 125, 195, 107, 128, 104, 190, 176, 177, 215, 192, 224, 242, 191, 169, 109, 216, 113 };
        int[] blue = { 181, 108, 145, 229, 141, 127, 169, 194, 141, 147, 131, 149, 154, 193, 208, 202, 120, 177, 171, 168, 133, 118, 185, 237, 206, 235, 152, 234, 159, 242, 211, 210, 104, 151, 127, 184, 117, 157, 188, 234, 243, 158, 207, 203, 168, 195, 156, 182, 110, 168 };
        assertEquals(56, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case84() {
        int width = 11;
        int height = 3;
        int[] red = { 5, 2 };
        int[] blue = { 5, 5 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case85() {
        int width = 10;
        int height = 3;
        int[] red = { 1, 2, 3 };
        int[] blue = { 5, 5, 5, 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case86() {
        int width = 100;
        int height = 100;
        int[] red = { 1, 1, 1 };
        int[] blue = { 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case87() {
        int width = 5;
        int height = 10;
        int[] red = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] blue = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case88() {
        int width = 10;
        int height = 10000;
        int[] red = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        int[] blue = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case89() {
        int width = 6;
        int height = 2;
        int[] red = { 6, 6 };
        int[] blue = { 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case90() {
        int width = 100;
        int height = 10;
        int[] red = { 15, 19, 20, 27, 32, 54, 78, 4 };
        int[] blue = { 1, 1, 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case91() {
        int width = 40;
        int height = 3;
        int[] red = { 5, 5, 3, 5 };
        int[] blue = { 100 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case92() {
        int width = 1000;
        int height = 100;
        int[] red = { 600, 600, 600 };
        int[] blue = { 1, 1, 1, 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case93() {
        int width = 100;
        int height = 1;
        int[] red = { 50, 1, 1, 1, 1, 1 };
        int[] blue = { 40, 40, 1, 1, 1, 1 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case94() {
        int width = 8;
        int height = 4;
        int[] red = { 5, 5 };
        int[] blue = { 6 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case95() {
        int width = 10000;
        int height = 750;
        int[] red = { 389, 155, 112, 451, 499, 44, 91, 411, 851, 200, 34, 553, 639, 28, 325, 812, 823, 849, 948, 844, 844, 114, 535, 456, 878, 851, 843, 191, 552, 303, 177, 369, 18, 443, 589, 654, 873, 936, 953, 948, 226, 120, 369, 322, 978, 260, 81, 870, 251, 98 };
        int[] blue = { 456, 884, 716, 194, 964, 769, 226, 209, 477, 786, 365, 682, 595, 75, 493, 685, 573, 812, 896, 140, 142, 708, 122, 497, 323, 755, 891, 969, 698, 233, 328, 601, 563, 197, 400, 735, 266, 729, 615, 208, 779, 694, 421, 153, 368, 151, 386, 46, 30, 449 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case96() {
        int width = 9999;
        int height = 9999;
        int[] red = { 225, 104, 293, 176, 698, 742, 743, 675, 526, 98, 413, 1, 3, 745, 315, 646, 780, 505, 732, 37, 512, 467, 135, 654, 455, 727, 639, 21, 778, 426, 507, 202, 529, 351, 729, 778, 292, 224, 653, 369, 321, 265, 370, 324, 562, 236, 521, 541, 292, 452 };
        int[] blue = { 578, 356, 119, 264, 209, 125, 542, 399, 498, 519, 25, 556, 272, 553, 107, 201, 531, 750, 424, 383, 319, 296, 199, 240, 171, 760, 27, 692, 53, 319, 695, 182, 674, 365, 445, 434, 490, 187, 33, 539, 257, 409, 294, 529, 513, 752, 281, 243, 702, 256 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case97() {
        int width = 10000;
        int height = 100;
        int[] red = { 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200 };
        int[] blue = { 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200 };
        assertEquals(58, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case98() {
        int width = 23;
        int height = 6;
        int[] red = { 10, 7 };
        int[] blue = { 10, 10 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case99() {
        int width = 199;
        int height = 100;
        int[] red = { 142, 142 };
        int[] blue = { 50 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case100() {
        int width = 3;
        int height = 3;
        int[] red = { 2 };
        int[] blue = { 5 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case101() {
        int width = 390;
        int height = 6;
        int[] red = { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };
        int[] blue = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
        assertEquals(67, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case102() {
        int width = 24;
        int height = 6;
        int[] red = { 10, 10 };
        int[] blue = { 11 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case103() {
        int width = 40;
        int height = 10;
        int[] red = { 15, 15, 15, 15, 15, 15, 15, 15 };
        int[] blue = { 15, 5, 5, 5, 5, 5, 5, 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case104() {
        int width = 8;
        int height = 3;
        int[] red = { 5, 5 };
        int[] blue = { 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case105() {
        int width = 20;
        int height = 2;
        int[] red = { 1, 10 };
        int[] blue = { 8, 8 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case106() {
        int width = 25;
        int height = 2;
        int[] red = { 10, 10 };
        int[] blue = { 11, 2 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case107() {
        int width = 23;
        int height = 6;
        int[] red = { 10, 10 };
        int[] blue = { 10 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case108() {
        int width = 1;
        int height = 2;
        int[] red = { 2 };
        int[] blue = { 2 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case109() {
        int width = 11;
        int height = 3;
        int[] red = { 5, 5 };
        int[] blue = { 6 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case110() {
        int width = 11;
        int height = 8;
        int[] red = { 5 };
        int[] blue = { 10, 10 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case111() {
        int width = 15;
        int height = 8;
        int[] red = { 5, 5 };
        int[] blue = { 10 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case112() {
        int width = 6;
        int height = 2;
        int[] red = { 6, 6 };
        int[] blue = { 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case113() {
        int width = 100;
        int height = 100;
        int[] red = { 1 };
        int[] blue = { 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case114() {
        int width = 100;
        int height = 10;
        int[] red = { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 };
        int[] blue = { 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case115() {
        int width = 22;
        int height = 6;
        int[] red = { 11, 5 };
        int[] blue = { 10, 10 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case116() {
        int width = 3;
        int height = 2;
        int[] red = { 10, 2, 2 };
        int[] blue = { 2 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case117() {
        int width = 1;
        int height = 1111;
        int[] red = { 111 };
        int[] blue = { 111 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case118() {
        int width = 199;
        int height = 100;
        int[] red = { 142, 142 };
        int[] blue = { 99 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case119() {
        int width = 10;
        int height = 2;
        int[] red = { 10, 10, 10, 10 };
        int[] blue = { 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case120() {
        int width = 20;
        int height = 4;
        int[] red = { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 };
        int[] blue = { 4 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case121() {
        int width = 1;
        int height = 10;
        int[] red = { 1 };
        int[] blue = { 11 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case122() {
        int width = 11;
        int height = 3;
        int[] red = { 5, 5 };
        int[] blue = { 6, 2 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case123() {
        int width = 200;
        int height = 10;
        int[] red = { 1, 1 };
        int[] blue = { 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case124() {
        int width = 1000;
        int height = 100;
        int[] red = { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99 };
        int[] blue = { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case125() {
        int width = 10;
        int height = 2;
        int[] red = { 4, 4, 4, 4, 4 };
        int[] blue = { 1, 1, 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case126() {
        int width = 10;
        int height = 10;
        int[] red = { 1 };
        int[] blue = { 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case127() {
        int width = 5;
        int height = 30;
        int[] red = { 4, 10, 7, 8, 10 };
        int[] blue = { 5, 6, 11, 7, 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case128() {
        int width = 10;
        int height = 4;
        int[] red = { 1 };
        int[] blue = { 100, 100 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case129() {
        int width = 25;
        int height = 6;
        int[] red = { 10, 10 };
        int[] blue = { 14 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case130() {
        int width = 16;
        int height = 4;
        int[] red = { 6, 7, 6, 6 };
        int[] blue = { 5, 3, 3 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case131() {
        int width = 16;
        int height = 13;
        int[] red = { 20 };
        int[] blue = { 20 };
        assertEquals(2, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case132() {
        int width = 2;
        int height = 20;
        int[] red = { 5, 5, 5, 5, 5, 5 };
        int[] blue = { 4, 4, 4, 4, 4, 4, 4 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case133() {
        int width = 10;
        int height = 10;
        int[] red = { 8, 8, 8, 8, 8, 8, 8, 8 };
        int[] blue = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case134() {
        int width = 16;
        int height = 4;
        int[] red = { 6, 5, 7, 7, 7 };
        int[] blue = { 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case135() {
        int width = 20;
        int height = 1;
        int[] red = { 8, 8 };
        int[] blue = { 9 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case136() {
        int width = 10;
        int height = 5;
        int[] red = { 10, 10 };
        int[] blue = { 4 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case137() {
        int width = 200;
        int height = 2;
        int[] red = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
        int[] blue = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
        assertEquals(90, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case138() {
        int width = 45;
        int height = 1;
        int[] red = { 2, 2, 2, 2, 2, 3, 3, 3, 3, 3 };
        int[] blue = { 2, 2, 2, 2, 2, 3, 3, 3, 3, 3 };
        assertEquals(20, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case139() {
        int width = 250;
        int height = 1;
        int[] red = { 100, 1, 1, 1 };
        int[] blue = { 100, 100, 100, 100 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case140() {
        int width = 7;
        int height = 1;
        int[] red = { 2, 2, 2, 2, 2 };
        int[] blue = { 2, 2, 2, 2, 2 };
        assertEquals(5, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case141() {
        int width = 5000;
        int height = 10;
        int[] red = { 25, 8, 3, 17, 21, 22, 11, 21, 25, 9, 12, 13, 29, 29, 9, 22, 4, 12, 25, 27, 26, 29, 6, 18, 9, 17, 20, 4, 15, 28, 18, 12, 2, 26, 27, 1, 8, 6, 18, 3, 8, 12, 12, 12, 10, 10, 12, 16, 12, 29 };
        int[] blue = { 25, 13, 28, 20, 25, 22, 21, 26, 26, 11, 14, 23, 15, 26, 24, 29, 16, 3, 27, 13, 8, 2, 2, 5, 16, 22, 3, 26, 8, 16, 24, 21, 14, 1, 12, 25, 29, 19, 29, 23, 5, 26, 10, 5, 3, 20, 6, 15, 10, 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case142() {
        int width = 100;
        int height = 50;
        int[] red = { 100, 100, 100, 100, 100, 100 };
        int[] blue = { 1, 2, 3, 4, 5, 6, 7 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case143() {
        int width = 10;
        int height = 100;
        int[] red = { 50 };
        int[] blue = { 50 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case144() {
        int width = 6;
        int height = 2;
        int[] red = { 5, 5 };
        int[] blue = { 2 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case145() {
        int width = 250;
        int height = 453;
        int[] red = { 120, 100, 5, 23, 45, 67 };
        int[] blue = { 23, 87, 98, 23, 1, 34 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case146() {
        int width = 10000;
        int height = 1;
        int[] red = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] blue = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case147() {
        int width = 10;
        int height = 4;
        int[] red = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] blue = { 5, 5, 5, 5, 5, 5, 5, 5 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case148() {
        int width = 9999;
        int height = 9999;
        int[] red = { 10000, 10000, 10000, 10000, 10000 };
        int[] blue = { 10000, 10000, 10000, 10000, 10000 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case149() {
        int width = 50;
        int height = 5;
        int[] red = { 10, 10 };
        int[] blue = { 10000 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case150() {
        int width = 20;
        int height = 2;
        int[] red = { 30 };
        int[] blue = { 10, 10 };
        assertEquals(1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case151() {
        int width = 24;
        int height = 6;
        int[] red = { 11, 1 };
        int[] blue = { 10, 10 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case152() {
        int width = 6;
        int height = 2;
        int[] red = { 2 };
        int[] blue = { 6, 6 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case153() {
        int width = 1;
        int height = 100;
        int[] red = { 4 };
        int[] blue = { 4 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case154() {
        int width = 21;
        int height = 6;
        int[] red = { 6, 6, 6, 6, 6 };
        int[] blue = { 14, 14, 14, 14, 14 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case155() {
        int width = 11;
        int height = 10;
        int[] red = { 2, 2 };
        int[] blue = { 2, 2 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case156() {
        int width = 10;
        int height = 2;
        int[] red = { 5 };
        int[] blue = { 3, 4 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case157() {
        int width = 15;
        int height = 6;
        int[] red = { 10, 10, 10 };
        int[] blue = { 2, 2 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case158() {
        int width = 55;
        int height = 4;
        int[] red = { 20, 5, 4 };
        int[] blue = { 19, 18, 17 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case159() {
        int width = 10;
        int height = 2;
        int[] red = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 };
        int[] blue = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case160() {
        int width = 11;
        int height = 5;
        int[] red = { 4, 4 };
        int[] blue = { 8 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case161() {
        int width = 100;
        int height = 5;
        int[] red = { 60, 60 };
        int[] blue = { 1 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case162() {
        int width = 11;
        int height = 3;
        int[] red = { 5 };
        int[] blue = { 5, 5 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case163() {
        int width = 4;
        int height = 4;
        int[] red = { 4 };
        int[] blue = { 4 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case164() {
        int width = 11;
        int height = 3;
        int[] red = { 5, 5, 5 };
        int[] blue = { 2, 2, 2 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case165() {
        int width = 9;
        int height = 4;
        int[] red = { 1 };
        int[] blue = { 8, 8 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case166() {
        int width = 30;
        int height = 5;
        int[] red = { 4, 10, 7, 8, 10 };
        int[] blue = { 5, 6, 11, 7, 5 };
        assertEquals(4, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case167() {
        int width = 11;
        int height = 3;
        int[] red = { 5, 5, 1 };
        int[] blue = { 2, 5 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case168() {
        int width = 11;
        int height = 3;
        int[] red = { 6 };
        int[] blue = { 5, 5 };
        assertEquals(3, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case169() {
        int width = 5;
        int height = 2;
        int[] red = { 1, 1, 1, 2 };
        int[] blue = { 2, 3, 3, 2 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case170() {
        int width = 5;
        int height = 3;
        int[] red = { 4 };
        int[] blue = { 4 };
        assertEquals(2, coloringrectangle.chooseDisks(width, height, red, blue));
    }

    @Test
    public void case171() {
        int width = 8;
        int height = 3;
        int[] red = { 5, 6 };
        int[] blue = { 2 };
        assertEquals(-1, coloringrectangle.chooseDisks(width, height, red, blue));
    }

}
