package topc.test.greedy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.greedy.*;

public class PilingRectsDiv2Test {
  PilingRectsDiv2 pilingrectsdiv2 = new PilingRectsDiv2();

  @Test
  public void case1() {
    int[] X = { 1, 2, 3, 1 };
    int[] Y = { 3, 2, 4, 4 };
    int limit = 3;
    assertEquals(3, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case2() {
    int[] X = { 4, 7 };
    int[] Y = { 7, 4 };
    int limit = 25;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case3() {
    int[] X = { 10 };
    int[] Y = { 10 };
    int limit = 9999;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case4() {
    int[] X = { 10 };
    int[] Y = { 3 };
    int limit = 30;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case5() {
    int[] X = { 3, 6, 5, 8, 2, 9, 14 };
    int[] Y = { 14, 6, 13, 8, 15, 6, 3 };
    int limit = 27;
    assertEquals(4, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case6() {
    int[] X = { 1 };
    int[] Y = { 1 };
    int limit = 1;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case7() {
    int[] X = { 116 };
    int[] Y = { 97 };
    int limit = 7980;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case8() {
    int[] X = { 28, 28 };
    int[] Y = { 53, 146 };
    int limit = 474;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case9() {
    int[] X = { 143, 95, 82 };
    int[] Y = { 14, 189, 189 };
    int limit = 23417;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case10() {
    int[] X = { 143, 69, 148, 54 };
    int[] Y = { 127, 199, 15, 115 };
    int limit = 21435;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case11() {
    int[] X = { 21, 138, 37, 19, 23 };
    int[] Y = { 141, 189, 90, 25, 106 };
    int limit = 31757;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case12() {
    int[] X = { 25, 135, 69, 97, 45, 102 };
    int[] Y = { 171, 116, 44, 28, 177, 125 };
    int limit = 28937;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case13() {
    int[] X = { 11, 171, 139, 43, 63, 116, 67 };
    int[] Y = { 73, 151, 60, 23, 4, 125, 128 };
    int limit = 18325;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case14() {
    int[] X = { 183, 194, 172, 187, 79, 115, 100, 117 };
    int[] Y = { 68, 167, 93, 74, 179, 6, 154, 121 };
    int limit = 1667;
    assertEquals(7, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case15() {
    int[] X = { 75, 161, 109, 66, 110, 112, 180, 132, 38 };
    int[] Y = { 191, 47, 75, 159, 27, 123, 124, 84, 47 };
    int limit = 430;
    assertEquals(9, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case16() {
    int[] X = { 20, 135, 84, 183, 24, 144, 132, 142, 157, 142 };
    int[] Y = { 131, 173, 21, 144, 2, 96, 39, 142, 126, 53 };
    int limit = 10489;
    assertEquals(5, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case17() {
    int[] X = { 129, 198, 32, 47, 176, 171, 189, 111, 5, 54, 31 };
    int[] Y = { 27, 74, 189, 121, 144, 176, 138, 174, 147, 72, 137 };
    int limit = 5185;
    assertEquals(6, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case18() {
    int[] X = { 163, 28, 61, 67, 58, 43, 151, 151, 23, 12, 186, 183, 85, 156 };
    int[] Y = { 89, 36, 109, 57, 115, 48, 192, 149, 108, 177, 99, 28, 98, 154 };
    int limit = 5540;
    assertEquals(8, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case19() {
    int[] X = { 135, 183, 62, 38, 169, 129, 119, 75, 40, 162, 173, 197, 39, 65, 142, 134, 147 };
    int[] Y = { 197, 141, 193, 144, 121, 9, 166, 75, 1, 11, 70, 65, 141, 138, 172, 62, 170 };
    int limit = 5767;
    assertEquals(11, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case20() {
    int[] X = { 155, 25, 1, 37, 27, 185, 129, 108, 52, 18, 11, 163, 45, 185, 199, 154, 126, 63, 41, 39 };
    int[] Y = { 44, 15, 184, 120, 181, 118, 47, 179, 57, 86, 134, 17, 46, 85, 28, 118, 101, 96, 22, 67 };
    int limit = 4723;
    assertEquals(7, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case21() {
    int[] X = { 56, 149, 66, 181, 76, 193, 108, 10, 120, 44, 144, 57, 171, 169, 23, 50, 52, 89, 10, 178, 102, 66, 166 };
    int[] Y = { 50, 141, 35, 128, 107, 76, 7, 75, 176, 117, 120, 126, 25, 46, 127, 59, 104, 161, 146, 198, 27, 51, 5 };
    int limit = 2053;
    assertEquals(15, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case22() {
    int[] X = { 24, 9, 11, 36, 74, 198, 100, 127, 10, 106, 159, 182, 148, 151, 22, 185, 99, 181, 6, 128, 158, 73, 33, 174, 185, 26 };
    int[] Y = { 145, 72, 57, 79, 129, 15, 103, 2, 34, 105, 155, 29, 26, 167, 37, 128, 172, 154, 108, 152, 182, 3, 102, 122, 65, 158 };
    int limit = 3511;
    assertEquals(12, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case23() {
    int[] X = { 188, 47, 81, 151, 132, 132, 41, 1, 94, 200, 36, 13, 87, 13, 101, 105, 152, 56, 33, 130, 107, 79, 184, 19, 44, 118, 49, 33, 98 };
    int[] Y = { 69, 89, 194, 29, 170, 31, 41, 166, 65, 85, 124, 23, 129, 10, 50, 143, 196, 123, 18, 187, 67, 170, 194, 9, 65, 163, 86, 130, 150 };
    int limit = 18841;
    assertEquals(5, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case24() {
    int[] X = { 21, 142, 179, 161, 68, 20, 149, 121, 82, 131, 13, 143, 198, 167, 95, 61, 160, 198, 49, 20, 143, 123, 3, 17, 103, 68, 122, 120, 137, 105, 118, 74 };
    int[] Y = { 129, 196, 81, 107, 166, 168, 189, 84, 17, 151, 137, 96, 155, 88, 146, 104, 109, 36, 81, 157, 180, 140, 77, 79, 187, 53, 60, 42, 157, 61, 181, 154 };
    int limit = 16547;
    assertEquals(8, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case25() {
    int[] X = { 77, 134, 82, 80, 54, 104, 18, 114, 75, 24, 86, 167, 178, 150, 192, 10, 50, 192, 79, 151, 1, 16, 56, 177, 197, 127, 188, 63, 5, 142, 80, 165, 164, 137, 34 };
    int[] Y = { 128, 42, 156, 153, 191, 115, 90, 166, 126, 102, 198, 9, 152, 102, 105, 3, 135, 21, 28, 39, 161, 32, 86, 44, 46, 152, 156, 58, 40, 74, 192, 194, 60, 167, 151 };
    int limit = 728;
    assertEquals(30, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case26() {
    int[] X = { 193, 79, 92, 27, 144, 161, 173, 58, 143, 177, 167, 147, 3, 154, 26, 75, 148, 155, 60, 195, 48, 118, 5, 88, 161, 147, 37, 127, 170, 183, 95, 195, 28, 159, 64, 79, 179, 119 };
    int[] Y = { 123, 53, 151, 140, 145, 50, 177, 145, 199, 161, 161, 90, 125, 82, 97, 166, 161, 6, 45, 84, 102, 198, 131, 91, 21, 160, 132, 108, 104, 39, 30, 88, 20, 132, 114, 37, 53, 58 };
    int limit = 15171;
    assertEquals(10, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case27() {
    int[] X = { 160, 49, 70, 188, 167, 79, 7, 151, 194, 136, 72, 109, 120, 140, 104, 41, 162, 58, 176, 149, 187, 193, 38, 137, 11, 137, 188, 143, 181, 42, 124, 49, 121, 16, 47, 118, 175, 154, 67, 73, 116 };
    int[] Y = { 157, 73, 155, 85, 40, 9, 44, 18, 120, 25, 154, 39, 48, 52, 181, 32, 73, 117, 114, 136, 119, 128, 19, 177, 82, 3, 55, 78, 145, 144, 181, 15, 32, 95, 150, 72, 133, 13, 84, 165, 22 };
    int limit = 18262;
    assertEquals(8, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case28() {
    int[] X = { 63, 75, 137, 162, 178, 183, 2, 129, 114, 186, 31, 195, 114, 172, 125, 71, 59, 83, 77, 12, 186, 68, 121, 38, 126, 5, 82, 191, 40, 144, 127, 158, 66, 71, 79, 165, 103, 193, 9, 148, 67, 149, 96, 110 };
    int[] Y = { 191, 73, 57, 94, 120, 56, 62, 122, 114, 121, 114, 25, 198, 197, 37, 193, 165, 64, 37, 59, 66, 12, 121, 173, 128, 173, 57, 25, 94, 169, 148, 20, 8, 39, 110, 60, 48, 62, 28, 122, 106, 141, 189, 200 };
    int limit = 18722;
    assertEquals(5, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case29() {
    int[] X = { 163, 84, 181, 164, 66, 117, 155, 56, 51, 162, 76, 167, 161, 68, 85, 166, 12, 133, 1, 59, 180, 134, 133, 90, 42, 140, 22, 55, 88, 20, 78, 188, 53, 94, 125, 144, 70, 165, 197, 161, 188, 158, 155, 88, 197, 129, 178 };
    int[] Y = { 167, 165, 44, 111, 182, 197, 88, 91, 102, 178, 55, 137, 38, 114, 57, 198, 48, 38, 80, 134, 87, 91, 105, 42, 127, 14, 191, 34, 122, 90, 173, 61, 88, 36, 33, 76, 190, 60, 164, 101, 33, 193, 175, 164, 155, 128, 112 };
    int limit = 488;
    assertEquals(46, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case30() {
    int[] X = { 33, 91, 136, 49, 19, 105, 143, 58, 188, 135, 195, 84, 119, 52, 168, 29, 161, 2, 180, 195, 68, 25, 174, 67, 62, 20, 93, 72, 192, 86, 91, 57, 128, 137, 91, 136, 33, 26, 71, 63, 84, 128, 36, 15, 115, 65, 14, 184, 48, 186 };
    int[] Y = { 139, 199, 63, 143, 182, 79, 57, 181, 117, 23, 23, 105, 132, 175, 184, 48, 187, 171, 142, 176, 93, 73, 44, 11, 88, 71, 195, 194, 117, 196, 106, 107, 36, 36, 164, 37, 180, 173, 5, 130, 16, 20, 110, 60, 186, 10, 74, 124, 60, 195 };
    int limit = 5627;
    assertEquals(23, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case31() {
    int[] X = { 121, 168, 86, 106, 36, 10, 125, 97, 53, 26, 148, 129, 41, 18, 173, 55, 13, 73, 91, 174, 177, 190, 28, 164, 122, 92, 5, 26, 58, 188, 14, 67, 48, 196, 41, 94, 24, 89, 54, 117, 12, 6, 155, 103, 200, 128, 184, 29, 92, 149 };
    int[] Y = { 199, 182, 43, 191, 2, 145, 15, 53, 38, 37, 61, 45, 157, 129, 119, 123, 177, 178, 183, 188, 132, 108, 112, 137, 92, 59, 75, 196, 102, 152, 114, 121, 181, 93, 32, 3, 24, 116, 4, 163, 96, 159, 196, 43, 59, 150, 79, 113, 20, 146 };
    int limit = 5345;
    assertEquals(24, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case32() {
    int[] X = { 108, 62, 7, 115, 136, 48, 196, 114, 109, 131, 62, 4, 91, 41, 61, 76, 185, 112, 29, 75, 149, 87, 69, 145, 45, 12, 127, 154, 183, 169, 195, 49, 12, 25, 67, 1, 71, 88, 69, 17, 85, 179, 12, 169, 10, 52, 50, 157, 113, 84 };
    int[] Y = { 11, 44, 169, 180, 133, 179, 9, 193, 84, 150, 144, 160, 126, 167, 63, 155, 60, 122, 132, 20, 129, 26, 42, 120, 122, 136, 32, 48, 61, 93, 60, 42, 16, 37, 191, 163, 148, 50, 88, 39, 166, 68, 105, 32, 30, 125, 10, 148, 146, 137 };
    int limit = 14833;
    assertEquals(8, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case33() {
    int[] X = { 154, 191, 144, 78, 50, 2, 58, 78, 85, 57, 148, 60, 181, 180, 43, 172, 182, 11, 53, 183, 46, 60, 176, 178, 190, 87, 14, 58, 142, 183, 118, 21, 58, 171, 176, 23, 154, 199, 184, 103, 78, 9, 69, 166, 124, 119, 200, 26, 182, 85 };
    int[] Y = { 92, 162, 39, 176, 161, 178, 162, 115, 37, 107, 147, 62, 97, 57, 22, 7, 105, 173, 161, 197, 165, 186, 139, 91, 114, 98, 107, 61, 141, 104, 100, 189, 66, 67, 43, 56, 1, 195, 10, 20, 5, 163, 110, 88, 28, 2, 94, 186, 69, 9 };
    int limit = 15243;
    assertEquals(10, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case34() {
    int[] X = { 71, 175, 22, 150, 197, 140, 137, 49, 122, 42, 35, 81, 84, 159, 73, 191, 80, 188, 172, 20, 133, 20, 81, 196, 7, 83, 169, 116, 64, 50, 75, 158, 199, 120, 110, 110, 96, 154, 95, 194, 143, 152, 161, 53, 107, 79, 30, 51, 137, 199 };
    int[] Y = { 174, 109, 142, 163, 187, 44, 163, 115, 155, 34, 74, 159, 57, 110, 142, 6, 107, 187, 115, 5, 130, 157, 26, 78, 176, 64, 85, 73, 80, 84, 158, 119, 145, 44, 83, 154, 62, 163, 36, 126, 132, 145, 165, 13, 110, 162, 46, 16, 53, 26 };
    int limit = 18772;
    assertEquals(9, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case35() {
    int[] X = { 89, 49, 5, 127, 60, 200, 126, 101, 40, 177, 7, 147, 11, 8, 199, 110, 30, 143, 71, 122, 77, 70, 156, 83, 158, 133, 195, 58, 110, 148, 61, 127, 114, 180, 93, 87, 47, 159, 2, 127, 170, 139, 189, 144, 51, 112, 172, 87, 47, 11 };
    int[] Y = { 34, 162, 94, 91, 15, 70, 165, 127, 146, 157, 92, 125, 66, 148, 43, 109, 19, 69, 6, 77, 67, 28, 86, 8, 100, 194, 122, 192, 73, 109, 111, 192, 27, 112, 16, 177, 190, 14, 20, 33, 159, 39, 145, 13, 79, 150, 197, 152, 174, 13 };
    int limit = 1044;
    assertEquals(38, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case36() {
    int[] X = { 17, 112, 195, 37, 159, 107, 121, 159, 27, 192, 60, 80, 22, 32, 67, 47, 130, 197, 155, 98, 173, 186, 197, 173, 200, 171, 4, 19, 97, 9, 200, 4, 40, 127, 14, 84, 104, 30, 104, 122, 131, 1, 28, 138, 23, 82, 98, 194, 178, 85 };
    int[] Y = { 156, 91, 114, 185, 143, 26, 88, 45, 154, 135, 23, 106, 128, 5, 17, 67, 103, 141, 85, 39, 192, 153, 80, 128, 104, 37, 174, 135, 158, 153, 33, 134, 76, 92, 156, 181, 176, 104, 125, 175, 167, 82, 84, 147, 136, 198, 77, 109, 192, 185 };
    int limit = 8418;
    assertEquals(26, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case37() {
    int[] X = { 10, 44, 5, 91, 51, 117, 66, 190, 164, 74, 7, 182, 151, 168, 70, 54, 112, 114, 12, 3, 197, 146, 166, 92, 12, 16, 184, 100, 149, 143, 25, 123, 131, 145, 148, 15, 198, 78, 67, 18, 82, 34, 9, 61, 178, 197, 77, 57, 197, 159 };
    int[] Y = { 54, 23, 166, 2, 195, 142, 144, 168, 139, 129, 173, 128, 50, 153, 191, 174, 41, 22, 44, 181, 148, 135, 163, 137, 28, 140, 98, 127, 200, 76, 143, 176, 81, 18, 167, 127, 61, 35, 59, 138, 179, 32, 174, 156, 171, 171, 190, 44, 37, 148 };
    int limit = 24253;
    assertEquals(8, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case38() {
    int[] X = { 188, 32, 53, 183, 172, 43, 41, 30, 102, 145, 194, 92, 158, 93, 19, 146, 145, 146, 13, 87, 44, 27, 70, 128, 146, 115, 157, 192, 147, 81, 37, 36, 150, 85, 3, 117, 114, 11, 193, 5, 10, 88, 98, 119, 126, 81, 34, 69, 132, 33 };
    int[] Y = { 200, 129, 191, 170, 107, 47, 142, 143, 32, 13, 114, 106, 52, 192, 136, 166, 142, 72, 159, 56, 134, 141, 72, 18, 61, 100, 3, 39, 84, 72, 134, 176, 185, 87, 167, 64, 59, 159, 175, 67, 151, 10, 100, 200, 112, 33, 128, 40, 51, 155 };
    int limit = 8763;
    assertEquals(14, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case39() {
    int[] X = { 136, 75, 186, 95, 199, 17, 172, 160, 194, 32, 148, 48, 25, 82, 122, 200, 50, 73, 170, 108, 81, 178, 40, 2, 32, 192, 122, 74, 61, 38, 90, 165, 36, 56, 191, 165, 178, 198, 146, 18, 23, 177, 65, 172, 44, 173, 150, 170, 65, 93 };
    int[] Y = { 64, 37, 22, 77, 102, 107, 167, 26, 76, 24, 118, 39, 98, 198, 61, 27, 75, 99, 23, 76, 63, 79, 179, 180, 147, 93, 179, 149, 185, 137, 127, 173, 7, 125, 24, 68, 118, 48, 172, 75, 154, 9, 156, 1, 120, 62, 14, 76, 138, 95 };
    int limit = 35833;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case40() {
    int[] X = { 85, 91, 120, 57, 110, 149, 117, 4, 125, 61, 35, 90, 167, 2, 190, 78, 57, 141, 138, 30, 191, 129, 194, 126, 138, 62, 89, 79, 24, 118, 175, 115, 96, 122, 177, 100, 41, 18, 46, 6, 30, 47, 187, 68, 175, 133, 196, 139, 88, 1 };
    int[] Y = { 32, 107, 184, 90, 155, 26, 95, 5, 62, 93, 116, 143, 122, 131, 51, 55, 143, 188, 46, 37, 122, 192, 70, 105, 183, 174, 152, 165, 176, 46, 149, 150, 143, 6, 72, 122, 109, 80, 157, 7, 92, 127, 21, 141, 200, 106, 43, 182, 132, 29 };
    int limit = 83;
    assertEquals(46, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case41() {
    int[] X = { 106, 76, 109, 52, 72, 148, 73, 10, 88, 102, 148, 65, 135, 177, 96, 53, 90, 24, 67, 108, 65, 193, 19, 188, 5, 163, 25, 195, 147, 47, 169, 169, 10, 168, 176, 22, 9, 102, 12, 36, 40, 187, 148, 144, 42, 23, 139, 135, 149, 175 };
    int[] Y = { 189, 193, 123, 49, 11, 181, 110, 76, 69, 137, 182, 138, 159, 82, 194, 34, 32, 23, 38, 195, 72, 21, 141, 34, 165, 43, 49, 160, 173, 114, 3, 162, 191, 14, 88, 43, 103, 30, 25, 40, 159, 192, 122, 125, 147, 23, 54, 176, 187, 147 };
    int limit = 10175;
    assertEquals(19, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case42() {
    int[] X = { 144, 130, 95, 170, 131, 68, 81, 190, 153, 59, 165, 46, 74, 112, 121, 33, 2, 12, 18, 97, 171, 44, 11, 180, 141, 134, 43, 76, 185, 49, 188, 130, 186, 131, 115, 146, 196, 161, 13, 89, 173, 93, 96, 193, 187, 51, 140, 30, 166, 57 };
    int[] Y = { 25, 4, 171, 169, 160, 173, 125, 42, 152, 178, 98, 111, 144, 8, 124, 53, 137, 3, 137, 97, 3, 33, 47, 37, 121, 62, 128, 70, 5, 90, 27, 163, 96, 40, 193, 103, 42, 166, 4, 45, 102, 183, 15, 136, 41, 3, 159, 115, 87, 26 };
    int limit = 1041;
    assertEquals(39, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case43() {
    int[] X = { 79, 167, 23, 21, 176, 122, 111, 50, 85, 53, 18, 99, 126, 66, 174, 193, 160, 184, 197, 98, 105, 146, 120, 29, 103, 184, 193, 78, 200, 69, 44, 124, 42, 100, 183, 48, 17, 51, 80, 131, 111, 137, 109, 190, 125, 80, 51, 108, 117, 156 };
    int[] Y = { 19, 8, 90, 80, 119, 102, 138, 79, 26, 156, 104, 38, 137, 60, 98, 101, 80, 123, 31, 29, 162, 125, 104, 64, 117, 131, 30, 131, 120, 103, 45, 74, 108, 131, 129, 189, 193, 147, 37, 93, 98, 152, 38, 146, 16, 168, 28, 146, 160, 108 };
    int limit = 4382;
    assertEquals(30, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case44() {
    int[] X = { 180, 67, 106, 3, 11, 50, 52, 86, 101, 10, 65, 50, 36, 70, 166, 126, 119, 195, 118, 113, 200, 1, 154, 99, 197, 112, 103, 98, 94, 115, 196, 170, 78, 29, 172, 185, 14, 41, 2, 70, 190, 173, 179, 84, 31, 14, 107, 147, 173, 181 };
    int[] Y = { 142, 7, 40, 108, 84, 133, 172, 6, 70, 159, 139, 70, 94, 81, 130, 6, 76, 58, 41, 61, 3, 106, 69, 166, 180, 58, 58, 169, 137, 154, 66, 172, 137, 101, 2, 65, 79, 30, 167, 184, 106, 20, 182, 122, 28, 119, 139, 183, 36, 40 };
    int limit = 7243;
    assertEquals(20, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case45() {
    int[] X = { 119, 9, 98, 163, 61, 98, 127, 38, 1, 165, 1, 172, 179, 130, 145, 115, 90, 160, 190, 47, 114, 99, 200, 143, 10, 31, 183, 177, 41, 190, 57, 19, 87, 192, 191, 29, 115, 107, 104, 49, 129, 60, 32, 180, 148, 116, 45, 51, 97, 42 };
    int[] Y = { 113, 190, 67, 36, 124, 44, 100, 64, 109, 42, 89, 2, 184, 52, 20, 71, 192, 13, 187, 170, 171, 133, 20, 26, 94, 137, 176, 78, 16, 160, 25, 186, 124, 105, 163, 71, 8, 35, 31, 105, 146, 101, 82, 82, 54, 16, 76, 5, 85, 174 };
    int limit = 2410;
    assertEquals(32, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case46() {
    int[] X = { 47, 189, 167, 95, 145, 49, 187, 96, 195, 94, 154, 98, 58, 86, 99, 73, 68, 94, 10, 166, 178, 178, 89, 148, 57, 16, 117, 18, 129, 190, 60, 197, 98, 165, 113, 138, 183, 142, 131, 46, 104, 28, 79, 127, 32, 25, 108, 117, 66, 23 };
    int[] Y = { 171, 72, 57, 82, 53, 9, 6, 60, 99, 79, 54, 103, 36, 181, 192, 93, 81, 67, 47, 104, 115, 196, 12, 69, 29, 181, 168, 129, 60, 121, 175, 162, 128, 24, 47, 147, 91, 76, 168, 32, 5, 131, 52, 21, 168, 80, 15, 92, 177, 111 };
    int limit = 323;
    assertEquals(48, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case47() {
    int[] X = { 195, 69, 132, 66, 30, 85, 20, 175, 2, 114, 76, 36, 35, 80, 76, 169, 171, 157, 111, 186, 190, 2, 76, 164, 172, 22, 190, 51, 192, 185, 35, 107, 187, 82, 75, 97, 103, 17, 89, 23, 58, 148, 162, 160, 134, 166, 184, 197, 39, 18 };
    int[] Y = { 4, 19, 160, 172, 51, 106, 186, 107, 33, 63, 78, 56, 152, 116, 16, 106, 146, 1, 59, 122, 26, 146, 123, 64, 169, 59, 120, 8, 171, 200, 98, 107, 139, 163, 95, 101, 85, 26, 8, 190, 181, 33, 159, 157, 106, 73, 145, 197, 192, 188 };
    int limit = 38;
    assertEquals(49, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case48() {
    int[] X = { 22, 83, 56, 183, 32, 52, 64, 195, 170, 163, 122, 108, 80, 33, 158, 73, 179, 31, 200, 81, 58, 193, 173, 9, 134, 108, 39, 117, 82, 127, 190, 43, 12, 51, 4, 172, 6, 94, 192, 172, 73, 138, 161, 192, 116, 181, 59, 82, 147, 45 };
    int[] Y = { 24, 26, 83, 110, 155, 129, 116, 198, 20, 136, 77, 44, 30, 92, 11, 46, 43, 169, 6, 185, 102, 129, 90, 55, 155, 200, 187, 114, 150, 56, 161, 112, 73, 26, 18, 2, 184, 156, 5, 162, 151, 57, 110, 5, 68, 161, 168, 178, 176, 187 };
    int limit = 1059;
    assertEquals(39, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case49() {
    int[] X = { 166, 197, 49, 99, 190, 34, 18, 146, 58, 88, 113, 170, 71, 99, 55, 126, 188, 143, 113, 29, 161, 76, 80, 168, 115, 13, 153, 139, 32, 143, 63, 60, 21, 41, 15, 133, 122, 150, 45, 159, 95, 58, 173, 63, 78, 118, 126, 183, 38, 166 };
    int[] Y = { 133, 1, 155, 180, 128, 62, 106, 80, 20, 178, 113, 188, 127, 91, 97, 118, 113, 121, 9, 5, 71, 153, 88, 12, 94, 57, 118, 8, 59, 81, 28, 134, 44, 97, 139, 109, 166, 120, 196, 61, 14, 159, 59, 116, 142, 18, 109, 136, 26, 113 };
    int limit = 22728;
    assertEquals(3, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case50() {
    int[] X = { 96, 76, 40, 112, 49, 108, 48, 92, 137, 76, 197, 75, 151, 38, 164, 132, 190, 44, 103, 195, 100, 192, 54, 127, 60, 36, 183, 119, 97, 4, 144, 137, 63, 12, 184, 75, 70, 125, 139, 144, 125, 45, 48, 38, 64, 200, 10, 101, 11, 4 };
    int[] Y = { 188, 53, 124, 161, 96, 108, 98, 74, 1, 4, 62, 101, 147, 52, 95, 92, 144, 12, 75, 162, 122, 86, 79, 35, 119, 32, 175, 69, 28, 147, 126, 188, 65, 54, 137, 58, 64, 83, 23, 105, 154, 78, 140, 31, 80, 37, 73, 116, 138, 161 };
    int limit = 5234;
    assertEquals(24, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case51() {
    int[] X = { 39, 32, 178, 111, 148, 198, 143, 43, 74, 157, 114, 65, 90, 143, 79, 22, 82, 139, 172, 16, 117, 91, 47, 87, 88, 129, 44, 6, 5, 158, 58, 190, 42, 14, 135, 164, 188, 30, 63, 22, 53, 32, 124, 1, 158, 28, 101, 164, 66, 152 };
    int[] Y = { 57, 74, 10, 49, 168, 195, 191, 139, 153, 191, 171, 153, 142, 65, 195, 133, 24, 45, 22, 106, 136, 114, 199, 47, 103, 59, 127, 116, 184, 171, 98, 6, 13, 78, 37, 106, 43, 21, 118, 20, 48, 63, 109, 127, 180, 115, 95, 196, 120, 177 };
    int limit = 10107;
    assertEquals(14, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case52() {
    int[] X = { 196, 8, 129, 167, 125, 69, 10, 28, 108, 39, 170, 148, 9, 76, 81, 155, 9, 129, 150, 78, 138, 9, 90, 154, 16, 9, 3, 106, 90, 129, 164, 170, 18, 186, 54, 45, 186, 117, 99, 56, 75, 199, 142, 144, 69, 11, 51, 76, 135, 28 };
    int[] Y = { 132, 14, 183, 60, 3, 146, 199, 113, 67, 2, 40, 172, 39, 161, 173, 96, 81, 67, 119, 48, 129, 40, 145, 80, 74, 3, 120, 125, 66, 52, 5, 151, 155, 69, 60, 6, 170, 42, 146, 39, 89, 71, 7, 141, 75, 199, 190, 194, 48, 107 };
    int limit = 5279;
    assertEquals(24, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case53() {
    int[] X = { 10, 182, 89, 107, 82, 61, 124, 151, 40, 185, 124, 81, 33, 106, 168, 156, 139, 163, 9, 193, 123, 66, 34, 141, 123, 141, 75, 11, 81, 26, 14, 189, 154, 187, 66, 180, 100, 194, 193, 15, 171, 35, 133, 97, 176, 188, 183, 58, 73, 56 };
    int[] Y = { 146, 164, 20, 142, 151, 117, 159, 42, 159, 166, 50, 117, 92, 24, 70, 75, 102, 135, 146, 106, 33, 24, 115, 81, 122, 197, 49, 160, 75, 152, 171, 123, 95, 12, 89, 38, 65, 87, 178, 152, 103, 148, 53, 8, 98, 10, 25, 136, 54, 6 };
    int limit = 1094;
    assertEquals(41, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case54() {
    int[] X = { 104, 119, 187, 25, 11, 117, 17, 181, 108, 15, 168, 93, 163, 157, 97, 65, 100, 154, 181, 100, 138, 128, 179, 120, 171, 73, 188, 65, 60, 80, 79, 153, 136, 181, 199, 134, 90, 81, 15, 84, 141, 107, 130, 37, 56, 200, 200, 33, 110, 196 };
    int[] Y = { 15, 132, 119, 33, 161, 82, 123, 143, 5, 69, 56, 78, 178, 56, 114, 133, 53, 90, 52, 3, 80, 26, 137, 95, 106, 69, 184, 124, 70, 119, 72, 5, 3, 164, 82, 6, 196, 117, 72, 58, 121, 10, 49, 32, 158, 92, 71, 197, 61, 62 };
    int limit = 2316;
    assertEquals(35, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case55() {
    int[] X = { 61, 12, 72, 37, 41, 91, 48, 23, 68, 171, 38, 78, 156, 19, 196, 81, 1, 162, 61, 129, 189, 133, 3, 120, 118, 59, 81, 24, 135, 77, 77, 111, 163, 119, 90, 34, 191, 92, 83, 143, 139, 146, 159, 130, 9, 31, 51, 47, 199, 60 };
    int[] Y = { 13, 91, 1, 196, 76, 2, 52, 145, 175, 127, 18, 68, 182, 184, 182, 87, 43, 180, 84, 46, 144, 51, 11, 123, 140, 150, 135, 126, 185, 184, 13, 49, 149, 46, 100, 164, 118, 164, 132, 9, 197, 136, 30, 29, 126, 181, 86, 23, 194, 189 };
    int limit = 4529;
    assertEquals(25, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case56() {
    int[] X = { 8, 163, 132, 109, 3, 193, 1, 108, 139, 131, 20, 115, 33, 139, 38, 82, 50, 29, 198, 177, 122, 9, 141, 131, 132, 27, 90, 107, 84, 95, 71, 183, 77, 94, 194, 121, 6, 122, 78, 168, 11, 107, 186, 109, 110, 176, 13, 125, 133, 66 };
    int[] Y = { 138, 188, 90, 44, 29, 119, 109, 111, 186, 23, 104, 46, 142, 111, 116, 10, 108, 104, 50, 7, 24, 17, 23, 32, 115, 145, 104, 128, 198, 67, 16, 80, 176, 47, 137, 31, 24, 189, 167, 109, 97, 12, 136, 106, 41, 118, 10, 198, 183, 93 };
    int limit = 6107;
    assertEquals(23, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case57() {
    int[] X = { 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105 };
    int[] Y = { 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97 };
    int limit = 9698;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case58() {
    int[] X = { 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58 };
    int[] Y = { 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65 };
    int limit = 1176;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case59() {
    int[] X = { 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 };
    int[] Y = { 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134 };
    int limit = 4304;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case60() {
    int[] X = { 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 };
    int[] Y = { 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185 };
    int limit = 15690;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case61() {
    int[] X = { 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35 };
    int[] Y = { 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67 };
    int limit = 14649;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case62() {
    int[] X = { 154, 128, 111, 133, 179, 181, 148, 135, 178, 192, 116, 111, 103, 178, 160, 102, 182, 116, 116, 148, 150, 168, 193, 153, 155, 185, 120, 177, 171, 117, 129, 196, 158, 160, 174, 145, 130, 142, 161, 112, 159, 170, 162, 173, 107, 134, 149, 133, 117, 183 };
    int[] Y = { 188, 168, 165, 188, 133, 137, 120, 175, 143, 137, 119, 130, 176, 151, 150, 136, 124, 106, 195, 182, 145, 124, 114, 117, 166, 125, 146, 155, 115, 173, 126, 105, 100, 137, 137, 152, 117, 134, 182, 176, 177, 150, 163, 172, 110, 134, 182, 101, 149, 181 };
    int limit = 15893;
    assertEquals(37, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case63() {
    int[] X = { 108, 146, 192, 144, 179, 123, 152, 153, 155, 162, 131, 194, 184, 149, 162, 162, 181, 102, 103, 121, 198, 177, 113, 133, 163, 120, 139, 122, 179, 173, 146, 187, 134, 140, 120, 176, 139, 151, 187, 139, 195, 172, 144, 174, 185, 187, 156, 195, 195, 120 };
    int[] Y = { 133, 117, 164, 115, 107, 104, 141, 116, 150, 122, 182, 175, 177, 173, 167, 173, 178, 160, 116, 158, 181, 151, 147, 130, 145, 184, 193, 108, 158, 165, 188, 122, 171, 178, 137, 100, 121, 125, 104, 139, 132, 171, 108, 141, 139, 187, 197, 110, 189, 196 };
    int limit = 7927;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case64() {
    int[] X = { 113, 100, 169, 106, 127, 182, 135, 181, 115, 161, 186, 186, 196, 195, 156, 195, 113, 184, 195, 191, 147, 127, 180, 131, 178, 130, 123, 105, 101, 176, 183, 163, 115, 108, 186, 151, 108, 122, 157, 112, 183, 163, 126, 101, 199, 159, 174, 195, 114, 198 };
    int[] Y = { 198, 115, 121, 166, 188, 194, 143, 105, 117, 147, 180, 168, 131, 110, 195, 180, 148, 176, 102, 145, 112, 197, 130, 134, 185, 145, 111, 178, 156, 126, 143, 147, 154, 116, 184, 143, 100, 105, 106, 166, 181, 145, 156, 100, 103, 179, 112, 156, 183, 103 };
    int limit = 4050;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case65() {
    int[] X = { 168, 140, 134, 109, 187, 126, 189, 108, 100, 117, 171, 151, 196, 187, 164, 179, 110, 195, 179, 188, 165, 170, 198, 158, 163, 104, 126, 125, 160, 131, 103, 171, 175, 138, 154, 102, 184, 141, 152, 132, 128, 173, 170, 129, 143, 147, 121, 136, 163, 138 };
    int[] Y = { 183, 198, 147, 147, 147, 147, 188, 146, 122, 194, 170, 125, 122, 130, 128, 193, 144, 145, 126, 105, 198, 142, 157, 120, 135, 106, 102, 127, 105, 124, 148, 135, 174, 163, 113, 191, 195, 185, 153, 170, 144, 171, 153, 142, 138, 109, 193, 193, 199, 165 };
    int limit = 7576;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case66() {
    int[] X = { 171, 139, 143, 177, 184, 111, 127, 195, 133, 106, 100, 176, 137, 131, 104, 149, 139, 162, 190, 178, 120, 147, 112, 171, 198, 141, 164, 193, 115, 186, 163, 125, 127, 110, 108, 129, 189, 107, 118, 122, 160, 195, 167, 142, 143, 138, 179, 181, 169, 182 };
    int[] Y = { 146, 100, 100, 118, 128, 106, 159, 132, 168, 195, 102, 151, 166, 137, 116, 130, 133, 109, 136, 162, 192, 175, 177, 178, 163, 160, 189, 107, 140, 100, 178, 163, 186, 163, 187, 148, 177, 146, 161, 132, 181, 171, 172, 115, 159, 109, 118, 113, 180, 128 };
    int limit = 108;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case67() {
    int[] X = { 107, 110, 162, 125, 173, 119, 111, 136, 141, 193, 173, 110, 197, 171, 127, 109, 128, 100, 159, 121, 172, 186, 198, 187, 135, 146, 140, 171, 163, 197, 145, 167, 189, 151, 180, 101, 165, 185, 149, 130, 160, 160, 115, 112, 188, 119, 112, 161, 170, 168 };
    int[] Y = { 172, 102, 190, 191, 123, 116, 180, 162, 138, 173, 198, 110, 156, 126, 197, 107, 136, 107, 173, 171, 110, 134, 185, 193, 197, 104, 161, 105, 113, 141, 168, 167, 190, 152, 108, 139, 125, 165, 146, 111, 149, 103, 118, 110, 121, 189, 125, 184, 150, 170 };
    int limit = 1215;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case68() {
    int[] X = { 176, 193, 142, 156, 170, 171, 122, 154, 130, 194, 131, 113, 110, 160, 179, 186, 165, 101, 146, 103, 127, 141, 182, 198, 148, 134, 188, 143, 131, 114, 171, 199, 105, 126, 165, 138, 120, 168, 168, 173, 122, 129, 156, 120, 137, 116, 145, 196, 170, 128 };
    int[] Y = { 170, 172, 122, 162, 162, 199, 136, 123, 190, 158, 138, 139, 168, 126, 109, 162, 184, 168, 120, 105, 135, 160, 195, 194, 139, 186, 138, 141, 155, 166, 182, 109, 101, 148, 174, 114, 151, 137, 161, 137, 122, 181, 153, 138, 179, 106, 176, 186, 174, 102 };
    int limit = 18466;
    assertEquals(29, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case69() {
    int[] X = { 114, 118, 136, 182, 189, 169, 142, 155, 139, 197, 150, 167, 140, 185, 165, 145, 138, 164, 132, 168, 138, 121, 102, 123, 144, 180, 129, 185, 168, 132, 192, 195, 131, 114, 128, 123, 150, 100, 164, 162, 176, 167, 144, 142, 155, 103, 133, 108, 101, 171 };
    int[] Y = { 164, 181, 112, 196, 192, 143, 164, 135, 172, 116, 101, 166, 172, 131, 101, 106, 171, 146, 109, 126, 153, 128, 162, 165, 112, 106, 105, 107, 112, 183, 154, 109, 161, 166, 192, 183, 110, 173, 194, 140, 175, 182, 107, 122, 180, 194, 119, 152, 109, 172 };
    int limit = 26003;
    assertEquals(8, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case70() {
    int[] X = { 112, 156, 168, 121, 142, 132, 177, 191, 103, 174, 139, 158, 137, 160, 187, 144, 185, 113, 121, 142, 124, 185, 115, 102, 166, 148, 110, 110, 110, 102, 181, 127, 189, 167, 113, 124, 188, 170, 197, 153, 178, 115, 138, 111, 142, 190, 177, 126, 172, 164 };
    int[] Y = { 159, 188, 155, 151, 110, 187, 135, 171, 170, 121, 116, 132, 171, 123, 104, 119, 103, 187, 199, 166, 114, 196, 140, 184, 164, 138, 122, 181, 172, 174, 174, 102, 137, 189, 112, 127, 193, 165, 161, 167, 199, 182, 181, 196, 171, 189, 189, 131, 140, 175 };
    int limit = 1228;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case71() {
    int[] X = { 145, 143, 114, 151, 185, 103, 190, 156, 159, 142, 175, 169, 138, 189, 124, 156, 101, 117, 141, 197, 125, 196, 162, 195, 113, 131, 104, 182, 142, 163, 124, 134, 184, 170, 182, 175, 106, 130, 132, 145, 116, 189, 104, 173, 154, 131, 109, 107, 154, 140 };
    int[] Y = { 167, 146, 105, 195, 114, 113, 180, 150, 162, 180, 129, 190, 180, 118, 186, 100, 106, 105, 129, 178, 182, 187, 177, 198, 109, 109, 164, 188, 111, 128, 126, 156, 175, 159, 159, 185, 102, 161, 109, 104, 101, 156, 161, 192, 161, 131, 103, 119, 126, 171 };
    int limit = 70;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case72() {
    int[] X = { 107, 162, 102, 180, 157, 151, 156, 153, 169, 106, 110, 109, 182, 162, 166, 109, 132, 128, 195, 160, 145, 122, 148, 113, 114, 122, 103, 153, 102, 194, 144, 174, 105, 167, 199, 163, 156, 121, 104, 154, 175, 163, 131, 121, 116, 190, 103, 183, 170, 146 };
    int[] Y = { 143, 131, 185, 172, 111, 186, 100, 109, 192, 154, 199, 173, 143, 197, 101, 181, 118, 144, 137, 181, 193, 150, 129, 123, 157, 145, 152, 141, 146, 156, 108, 138, 181, 177, 127, 195, 135, 142, 159, 167, 194, 183, 126, 137, 124, 164, 111, 124, 128, 189 };
    int limit = 9974;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case73() {
    int[] X = { 147, 122, 150, 172, 100, 131, 122, 143, 164, 133, 108, 139, 192, 147, 185, 106, 163, 161, 136, 176, 123, 150, 119, 121, 172, 196, 117, 146, 142, 109, 177, 103, 191, 117, 131, 102, 180, 115, 152, 120, 164, 128, 103, 141, 155, 198, 139, 131, 150, 177 };
    int[] Y = { 193, 152, 108, 180, 134, 120, 132, 108, 116, 122, 106, 135, 114, 156, 114, 198, 196, 189, 189, 172, 168, 113, 186, 147, 106, 125, 143, 104, 161, 127, 121, 160, 198, 144, 104, 137, 173, 155, 103, 146, 121, 140, 199, 142, 141, 195, 107, 121, 199, 189 };
    int limit = 26990;
    assertEquals(8, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case74() {
    int[] X = { 172, 114, 140, 187, 106, 149, 150, 191, 195, 151, 175, 137, 142, 182, 183, 118, 116, 125, 107, 129, 136, 127, 184, 142, 134, 135, 155, 182, 170, 189, 178, 108, 105, 176, 173, 196, 105, 131, 179, 194, 119, 138, 164, 132, 190, 166, 171, 175, 105, 189 };
    int[] Y = { 183, 156, 100, 176, 188, 156, 136, 174, 162, 149, 142, 114, 180, 136, 174, 179, 108, 115, 128, 176, 140, 143, 160, 158, 130, 194, 121, 132, 111, 162, 150, 126, 127, 171, 104, 141, 195, 124, 157, 184, 145, 188, 155, 137, 163, 107, 195, 124, 168, 154 };
    int limit = 14804;
    assertEquals(39, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case75() {
    int[] X = { 146, 101, 124, 126, 174, 178, 164, 144, 169, 116, 186, 134, 169, 172, 160, 194, 127, 130, 190, 110, 102, 108, 125, 157, 142, 177, 178, 178, 137, 114, 151, 107, 157, 103, 181, 162, 183, 126, 187, 181, 132, 127, 177, 104, 118, 144, 152, 120, 179, 198 };
    int[] Y = { 186, 105, 183, 143, 109, 183, 130, 163, 198, 115, 133, 152, 135, 195, 157, 108, 167, 145, 196, 107, 113, 102, 130, 187, 191, 120, 116, 179, 198, 164, 173, 187, 156, 153, 136, 196, 183, 178, 180, 116, 124, 195, 143, 109, 123, 183, 127, 128, 107, 172 };
    int limit = 5503;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case76() {
    int[] X = { 143, 146, 154, 173, 189, 189, 169, 103, 119, 171, 138, 117, 132, 187, 112, 108, 110, 166, 131, 138, 184, 103, 139, 135, 132, 132, 106, 143, 187, 132, 178, 181, 187, 162, 127, 123, 177, 161, 134, 125, 179, 113, 102, 158, 175, 104, 167, 132, 146, 160 };
    int[] Y = { 184, 197, 157, 120, 132, 107, 166, 135, 101, 144, 136, 129, 148, 195, 190, 167, 129, 187, 148, 110, 133, 140, 147, 155, 191, 196, 171, 198, 162, 172, 177, 110, 198, 183, 181, 114, 187, 174, 135, 119, 166, 185, 106, 107, 141, 125, 105, 108, 100, 140 };
    int limit = 10130;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case77() {
    int[] X = { 113, 144, 129, 159, 161, 181, 161, 191, 115, 146, 168, 114, 145, 146, 170, 189, 182, 168, 170, 121, 124, 145, 190, 176, 182, 121, 157, 142, 162, 130, 102, 151, 127, 132, 102, 101, 151, 190, 185, 148, 165, 188, 126, 136, 102, 170, 174, 122, 176, 142 };
    int[] Y = { 175, 130, 110, 138, 190, 198, 159, 117, 171, 159, 141, 160, 100, 107, 162, 158, 112, 153, 188, 175, 110, 178, 156, 152, 132, 172, 198, 116, 147, 194, 190, 169, 106, 136, 142, 135, 120, 124, 160, 115, 103, 128, 146, 155, 136, 158, 106, 137, 129, 141 };
    int limit = 76;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case78() {
    int[] X = { 162, 193, 148, 147, 199, 187, 188, 173, 146, 175, 165, 166, 187, 160, 197, 194, 129, 110, 121, 189, 138, 163, 189, 153, 158, 125, 148, 148, 173, 178, 141, 187, 150, 157, 164, 195, 140, 143, 130, 120, 141, 119, 168, 189, 190, 107, 178, 134, 190, 169 };
    int[] Y = { 108, 101, 129, 154, 154, 166, 115, 170, 107, 128, 188, 147, 116, 150, 171, 142, 172, 192, 156, 101, 196, 171, 194, 151, 196, 179, 189, 171, 183, 156, 114, 163, 110, 161, 106, 126, 117, 170, 185, 117, 149, 151, 100, 102, 120, 173, 142, 148, 140, 101 };
    int limit = 4928;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case79() {
    int[] X = { 125, 117, 129, 186, 152, 165, 194, 178, 115, 145, 102, 199, 178, 148, 115, 150, 143, 134, 188, 185, 147, 153, 110, 124, 199, 115, 141, 191, 198, 100, 152, 145, 109, 184, 115, 159, 123, 110, 131, 163, 163, 127, 104, 123, 107, 150, 189, 196, 197, 162 };
    int[] Y = { 154, 119, 161, 104, 141, 167, 126, 185, 176, 148, 151, 168, 182, 170, 188, 141, 174, 177, 115, 118, 151, 134, 155, 118, 196, 173, 168, 183, 153, 160, 163, 149, 110, 106, 159, 177, 180, 190, 134, 155, 122, 103, 152, 182, 187, 136, 101, 189, 124, 191 };
    int limit = 5;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case80() {
    int[] X = { 138, 189, 188, 167, 143, 161, 162, 115, 150, 188, 102, 120, 129, 197, 166, 123, 198, 170, 106, 175, 114, 196, 135, 159, 168, 146, 100, 181, 117, 160, 178, 142, 134, 123, 136, 134, 193, 139, 140, 160, 129, 193, 143, 146, 147, 190, 151, 114, 178, 176 };
    int[] Y = { 180, 118, 195, 100, 146, 159, 158, 187, 151, 142, 196, 127, 141, 199, 186, 145, 186, 172, 150, 166, 187, 188, 146, 159, 112, 109, 194, 137, 128, 127, 105, 108, 193, 194, 194, 152, 188, 115, 130, 180, 134, 117, 169, 134, 167, 125, 107, 103, 179, 167 };
    int limit = 15974;
    assertEquals(36, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case81() {
    int[] X = { 127, 183, 149, 104, 104, 117, 173, 119, 115, 152, 134, 131, 136, 181, 167, 100, 110, 132, 170, 112, 191, 186, 137, 149, 144, 103, 189, 183, 154, 171, 110, 189, 133, 180, 174, 164, 100, 189, 119, 160, 165, 177, 152, 136, 145, 128, 103, 120, 136, 191 };
    int[] Y = { 150, 113, 149, 166, 143, 190, 145, 130, 151, 107, 142, 103, 184, 169, 112, 192, 194, 160, 140, 101, 101, 187, 138, 194, 185, 187, 121, 139, 179, 174, 181, 179, 157, 194, 141, 188, 111, 170, 142, 191, 162, 196, 118, 178, 161, 128, 198, 142, 186, 103 };
    int limit = 1543;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case82() {
    int[] X = { 121, 168, 86, 106, 36, 10, 125, 97, 53, 26, 148, 129, 41, 18, 173, 55, 13, 73, 91, 174, 177, 190, 28, 164, 122, 92, 5, 26, 58, 188, 14, 67, 48, 196, 41, 94, 24, 89, 54, 117, 12, 6, 155, 103, 200, 128, 184, 29, 92, 149 };
    int[] Y = { 199, 182, 43, 19, 2, 145, 15, 53, 38, 37, 61, 45, 157, 129, 119, 123, 177, 178, 183, 188, 132, 108, 112, 137, 92, 59, 75, 196, 102, 152, 114, 121, 181, 93, 32, 3, 24, 116, 4, 163, 96, 159, 196, 43, 59, 150, 79, 113, 20, 146 };
    int limit = 5345;
    assertEquals(23, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case83() {
    int[] X = { 1, 2, 3, 1 };
    int[] Y = { 3, 2, 4, 4 };
    int limit = 3;
    assertEquals(3, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case84() {
    int[] X = { 3, 6, 5, 8, 2, 9, 14 };
    int[] Y = { 14, 6, 13, 8, 15, 6, 3 };
    int limit = 27;
    assertEquals(4, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case85() {
    int[] X = { 121, 168, 86, 106, 36, 10, 125, 97, 53, 26, 148, 129, 41, 18, 173, 55, 13, 73, 91, 174, 177, 190, 28, 164, 122, 92, 5, 26, 58, 188, 14, 67, 48, 196, 41, 94, 24, 89, 54, 117, 12, 6, 155, 103, 200, 128, 184, 29, 92, 149 };
    int[] Y = { 199, 182, 43, 191, 2, 145, 15, 53, 38, 37, 61, 45, 157, 129, 119, 123, 177, 178, 183, 188, 132, 108, 112, 137, 92, 59, 75, 196, 102, 152, 114, 121, 181, 93, 32, 3, 24, 116, 4, 163, 96, 159, 196, 43, 59, 150, 79, 113, 20, 146 };
    int limit = 5345;
    assertEquals(24, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case86() {
    int[] X = { 121, 168, 86, 106, 36, 101, 125, 97, 53, 26, 148, 129, 41, 18, 173, 55, 131, 73, 91, 174, 177, 190, 28, 164, 122, 92, 5, 26, 58, 188, 14, 67, 48, 196, 41, 94, 24, 89, 54, 117, 12, 6, 155, 103, 200, 128, 184, 29, 92, 149 };
    int[] Y = { 199, 182, 43, 191, 22, 145, 15, 53, 38, 37, 61, 45, 157, 129, 119, 123, 177, 178, 183, 188, 132, 108, 112, 137, 92, 59, 75, 196, 102, 152, 114, 121, 181, 93, 32, 33, 24, 116, 4, 163, 96, 159, 196, 43, 59, 150, 79, 113, 200, 146 };
    int limit = 5145;
    assertEquals(28, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case87() {
    int[] X = { 2, 3, 3, 3, 4, 5, 6, 11, 19, 191, 91, 21, 23, 43, 54, 6, 4, 3, 2, 1, 1, 3, 4, 5, 6, 7, 8 };
    int[] Y = { 4, 3, 22, 1, 3, 11, 2, 3, 5, 6, 7, 8, 9, 11, 6, 5, 4, 23, 4, 5, 6, 7, 8, 6, 5, 4, 3 };
    int limit = 26;
    assertEquals(11, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case88() {
    int[] X = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 };
    int[] Y = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int limit = 1;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case89() {
    int[] X = { 10 };
    int[] Y = { 10 };
    int limit = 9999;
    assertEquals(-1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case90() {
    int[] X = { 2, 2, 2, 2 };
    int[] Y = { 2, 2, 2, 2 };
    int limit = 4;
    assertEquals(4, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case91() {
    int[] X = { 200, 200 };
    int[] Y = { 200, 200 };
    int limit = 40000;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case92() {
    int[] X = { 4, 3 };
    int[] Y = { 4, 3 };
    int limit = 1;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case93() {
    int[] X = { 4, 2, 6, 4, 2, 4, 1 };
    int[] Y = { 2, 4, 4, 6, 2, 1, 4 };
    int limit = 4;
    assertEquals(6, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case94() {
    int[] X = { 100, 100, 100, 100, 100 };
    int[] Y = { 100, 100, 100, 100, 100 };
    int limit = 1;
    assertEquals(5, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case95() {
    int[] X = { 1, 2, 3, 4, 5, 6, 7, 8, 19, 10, 11, 100, 150, 200, 199, 198, 196, 133, 156, 200, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 10, 20, 20, 34, 36, 56, 67, 78, 34, 23, 56, 78, 124, 54, 12, 50 };
    int[] Y = { 1, 2, 3, 4, 5, 6, 7, 8, 19, 10, 11, 100, 150, 200, 199, 198, 196, 133, 156, 200, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 10, 20, 20, 34, 36, 56, 67, 78, 34, 23, 56, 78, 124, 54, 12, 50 };
    int limit = 1;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case96() {
    int[] X = { 2, 1, 3, 1 };
    int[] Y = { 2, 3, 4, 4 };
    int limit = 3;
    assertEquals(3, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case97() {
    int[] X = { 200 };
    int[] Y = { 200 };
    int limit = 40000;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case98() {
    int[] X = { 7, 4 };
    int[] Y = { 4, 7 };
    int limit = 25;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case99() {
    int[] X = { 1, 2 };
    int[] Y = { 1, 2 };
    int limit = 3;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case100() {
    int[] X = { 21 };
    int[] Y = { 21 };
    int limit = 401;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case101() {
    int[] X = { 200, 100 };
    int[] Y = { 200, 100 };
    int limit = 10000;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case102() {
    int[] X = { 2, 1, 1, 1, 1 };
    int[] Y = { 5, 11, 12, 13, 14 };
    int limit = 10;
    assertEquals(4, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case103() {
    int[] X = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
    int[] Y = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
    int limit = 1;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case104() {
    int[] X = { 2, 1, 1 };
    int[] Y = { 2, 4, 4 };
    int limit = 4;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case105() {
    int[] X = { 3, 1, 1 };
    int[] Y = { 3, 9, 9 };
    int limit = 9;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case106() {
    int[] X = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    int[] Y = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    int limit = 4;
    assertEquals(10, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case107() {
    int[] X = { 2, 3, 4, 100 };
    int[] Y = { 2, 5, 3, 100 };
    int limit = 1000;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case108() {
    int[] X = { 4, 6, 5, 8, 2, 9, 14 };
    int[] Y = { 14, 6, 13, 8, 15, 6, 4 };
    int limit = 27;
    assertEquals(5, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case109() {
    int[] X = { 2, 1 };
    int[] Y = { 10, 11 };
    int limit = 10;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case110() {
    int[] X = { 2, 3, 3 };
    int[] Y = { 4, 3, 3 };
    int limit = 8;
    assertEquals(2, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case111() {
    int[] X = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] Y = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int limit = 1;
    assertEquals(50, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case112() {
    int[] X = { 3, 2, 6, 8, 9 };
    int[] Y = { 2, 2, 1, 1, 1 };
    int limit = 3;
    assertEquals(4, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case113() {
    int[] X = { 2, 1, 1, 1 };
    int[] Y = { 25, 50, 50, 50 };
    int limit = 50;
    assertEquals(3, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case114() {
    int[] X = { 3, 100 };
    int[] Y = { 5, 100 };
    int limit = 100;
    assertEquals(1, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case115() {
    int[] X = { 3, 8, 8, 8 };
    int[] Y = { 10, 9, 8, 7 };
    int limit = 30;
    assertEquals(3, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case116() {
    int[] X = { 6, 3, 1, 1, 1 };
    int[] Y = { 6, 2, 6, 6, 6 };
    int limit = 6;
    assertEquals(4, pilingrectsdiv2.getmax(X, Y, limit));
  }

  @Test
  public void case117() {
    int[] X = { 3, 1, 2, 2 };
    int[] Y = { 4, 4, 2, 3 };
    int limit = 4;
    assertEquals(3, pilingrectsdiv2.getmax(X, Y, limit));
  }

}
