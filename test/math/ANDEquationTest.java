package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class ANDEquationTest {
    ANDEquation andequation = new ANDEquation();

    @Test
    public void case1() {
        int[] A = { 1, 3, 5 };
        assertEquals(1, andequation.restoreY(A));
    }

    @Test
    public void case2() {
        int[] A = { 31, 7 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case3() {
        int[] A = { 31, 7, 7 };
        assertEquals(7, andequation.restoreY(A));
    }

    @Test
    public void case4() {
        int[] A = { 32763, 32751, 32751, 32763, 24575, 32751, 32767, 32767, 32751, 32767, 24575, 32767, 32767, 32767, 24559, 32767, 32763, 32763, 32767, 32751, 32763, 32767, 32767, 24555, 32767, 32767, 32751, 32751, 32767, 24575, 32751, 32767, 32751, 32767, 32767, 24575, 32751, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
        assertEquals(24555, andequation.restoreY(A));
    }

    @Test
    public void case5() {
        int[] A = { 13, 13, 13, 15, 15 };
        assertEquals(13, andequation.restoreY(A));
    }

    @Test
    public void case6() {
        int[] A = { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 };
        assertEquals(15, andequation.restoreY(A));
    }

    @Test
    public void case7() {
        int[] A = { 915198, 915199, 915198, 917247, 915198, 917246, 915454, 1046526, 917246, 1046526, 917246, 1046271, 1046270, 915198, 915454, 915454, 915454, 1048318, 915199, 1046526, 1048318, 915198, 915198, 915455, 915454, 915199, 915198, 1046270, 915198 };
        assertEquals(915198, andequation.restoreY(A));
    }

    @Test
    public void case8() {
        int[] A = { 65324, 14980, 14788, 63622, 14420, 65093, 14493, 14340, 47700, 48260, 15428, 47110, 14341, 14885, 14404, 14406, 64516, 15013, 14638, 65029, 14476, 15886, 14484, 14476, 47949, 14340, 32446, 14598, 48404, 32292, 48590, 31748, 14484, 63566, 14854, 14342 };
        assertEquals(14340, andequation.restoreY(A));
    }

    @Test
    public void case9() {
        int[] A = { 37, 21, 13, 14, 54, 36, 36, 15, 4, 108, 6, 52, 5, 21, 85, 22, 70, 13, 68, 102, 36, 36, 84, 31, 47, 68, 20, 5 };
        assertEquals(4, andequation.restoreY(A));
    }

    @Test
    public void case10() {
        int[] A = { 255, 223, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 215, 223, 255, 247, 255 };
        assertEquals(215, andequation.restoreY(A));
    }

    @Test
    public void case11() {
        int[] A = { 88, 88, 88, 90, 88, 89, 94, 121, 125, 88, 88, 124, 88, 120, 88, 90, 120, 88, 92, 92, 88, 88, 88, 90, 88, 93, 88, 92, 89, 90, 88, 88, 90, 89, 120, 89, 88, 88 };
        assertEquals(88, andequation.restoreY(A));
    }

    @Test
    public void case12() {
        int[] A = { 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case13() {
        int[] A = { 1048519, 1048519, 1048519, 1048519, 1048519, 1048519, 1048519, 1048519, 1048519, 1048519, 1048519, 1048551, 1048519, 1048519, 1048551, 1048519, 1048551, 1048519, 1048527, 1048527, 1048519, 1048535, 1048551, 1048519, 1048519, 1048519, 1048519, 1048551, 1048519 };
        assertEquals(1048519, andequation.restoreY(A));
    }

    @Test
    public void case14() {
        int[] A = { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 };
        assertEquals(15, andequation.restoreY(A));
    }

    @Test
    public void case15() {
        int[] A = { 982855, 343399, 343303, 269623, 269671, 269575, 401199, 270303, 286487, 826831, 417167, 376167, 367879, 998791, 335183 };
        assertEquals(269575, andequation.restoreY(A));
    }

    @Test
    public void case16() {
        int[] A = { 511, 495, 511, 511, 511, 511, 511, 495, 511, 511, 495, 511, 511, 511, 495, 495, 511, 511, 511, 511, 511, 495, 511, 511, 511, 511, 511, 511, 511, 495 };
        assertEquals(495, andequation.restoreY(A));
    }

    @Test
    public void case17() {
        int[] A = { 511, 495, 495, 511, 255, 495, 239, 495 };
        assertEquals(239, andequation.restoreY(A));
    }

    @Test
    public void case18() {
        int[] A = { 740, 740, 750, 1012, 996, 740, 740, 740, 740, 756, 756, 998, 748, 740, 740, 748, 740, 756, 740, 740, 749, 742, 740, 740, 740, 740, 742, 740, 740, 740, 740, 1012 };
        assertEquals(740, andequation.restoreY(A));
    }

    @Test
    public void case19() {
        int[] A = { 1023, 1023, 1023, 1023 };
        assertEquals(1023, andequation.restoreY(A));
    }

    @Test
    public void case20() {
        int[] A = { 7631, 7631, 7631, 7631, 7631, 7631, 8143, 7631, 7631 };
        assertEquals(7631, andequation.restoreY(A));
    }

    @Test
    public void case21() {
        int[] A = { 4095, 4095, 4030, 3007, 4095, 3071, 4095, 4094, 4095, 4031, 3071, 4094, 3006, 4094, 3071, 4095, 3071, 4094, 4094, 3071, 4031, 4095, 4095, 4095, 4095, 4031, 3070, 3071, 4094, 4095, 4094, 3071, 4095, 4094, 4094, 4094, 3071, 4095, 4095, 3070, 4094, 4095, 3071, 4094, 3071, 3070, 4095, 4095, 4094, 4094 };
        assertEquals(3006, andequation.restoreY(A));
    }

    @Test
    public void case22() {
        int[] A = { 196541, 262135, 262069, 262141, 196605, 262143, 196607, 262141, 196533 };
        assertEquals(196533, andequation.restoreY(A));
    }

    @Test
    public void case23() {
        int[] A = { 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383 };
        assertEquals(16383, andequation.restoreY(A));
    }

    @Test
    public void case24() {
        int[] A = { 63, 59, 59, 63, 27, 31, 31, 63, 63, 63, 31, 59, 59, 63, 63, 63, 27, 59, 63, 63, 31, 27, 31, 27, 59, 63, 59, 63, 31, 63, 31, 59, 59, 59, 59, 59, 27, 27, 27, 59, 59, 63, 63, 63 };
        assertEquals(27, andequation.restoreY(A));
    }

    @Test
    public void case25() {
        int[] A = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };
        assertEquals(3, andequation.restoreY(A));
    }

    @Test
    public void case26() {
        int[] A = { 935, 2, 692, 304, 826, 658, 10, 576, 225, 360, 37, 625, 320, 370, 734, 112, 621, 388, 779, 582, 341, 456, 976, 30, 920, 49, 841, 616, 1008, 970, 256, 49, 319, 171, 0, 578, 537, 515, 226, 786, 133, 802, 35, 1, 208, 648, 100, 667, 840, 137 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case27() {
        int[] A = { 33280, 33284, 33408, 33284, 37392, 35328, 33280, 34304, 33280, 33280, 33280, 37384 };
        assertEquals(33280, andequation.restoreY(A));
    }

    @Test
    public void case28() {
        int[] A = { 2043, 1915, 1915, 1915, 2043, 2043, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 2043, 1915, 2043, 2043, 1915, 2047, 1915 };
        assertEquals(1915, andequation.restoreY(A));
    }

    @Test
    public void case29() {
        int[] A = { 1, 1, 1, 1, 1, 1, 9, 5, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3 };
        assertEquals(1, andequation.restoreY(A));
    }

    @Test
    public void case30() {
        int[] A = { 6, 5, 4, 4, 7, 5, 4, 4, 4, 6, 5, 4, 6, 4, 6, 6, 4 };
        assertEquals(4, andequation.restoreY(A));
    }

    @Test
    public void case31() {
        int[] A = { 517621, 518133, 521717, 517621, 517629, 523767, 517629, 517623, 517621, 518141, 520181, 518141, 521717, 519671, 521717, 517623, 519669, 519671, 521717, 521725, 517621, 517623, 517623, 523765, 517629, 519679, 522229, 517621 };
        assertEquals(517621, andequation.restoreY(A));
    }

    @Test
    public void case32() {
        int[] A = { 127, 127, 127, 127, 127, 255, 127, 127, 127, 127, 255, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 255, 127, 127, 127, 127, 127, 127 };
        assertEquals(127, andequation.restoreY(A));
    }

    @Test
    public void case33() {
        int[] A = { 191411, 256951, 191411, 191411, 191411, 256951, 195507, 191411, 192435, 191411, 191411, 195511, 191419, 191411, 256947, 191415, 191475, 195579, 191415, 191411, 191483, 191411, 191419, 191475, 256947, 191411, 191411, 191411, 191419, 256947, 191411, 191411, 191411 };
        assertEquals(191411, andequation.restoreY(A));
    }

    @Test
    public void case34() {
        int[] A = { 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383, 16383 };
        assertEquals(16383, andequation.restoreY(A));
    }

    @Test
    public void case35() {
        int[] A = { 11, 11, 14, 10, 11, 11, 10, 10, 10, 15, 15, 15, 15, 14, 14, 10, 10, 10, 15, 15, 10, 10, 14, 15, 14, 14, 10, 10, 11, 10, 11, 11, 10, 15, 10, 15, 15, 10, 11, 15 };
        assertEquals(10, andequation.restoreY(A));
    }

    @Test
    public void case36() {
        int[] A = { 23, 15, 15, 15, 7, 23, 23, 15, 15 };
        assertEquals(7, andequation.restoreY(A));
    }

    @Test
    public void case37() {
        int[] A = { 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071, 131071 };
        assertEquals(131071, andequation.restoreY(A));
    }

    @Test
    public void case38() {
        int[] A = { 81911, 81911, 81919, 81911, 81911, 98295, 81911, 81911, 81911, 81911, 81911, 81911, 114679, 81911, 114679, 131063, 98295, 81911, 81911, 81911, 131071, 81911, 81919, 81911, 81911, 81911, 81911, 81911, 114687, 81911, 98295, 81911, 114679 };
        assertEquals(81911, andequation.restoreY(A));
    }

    @Test
    public void case39() {
        int[] A = { 59, 59, 63, 63, 59 };
        assertEquals(59, andequation.restoreY(A));
    }

    @Test
    public void case40() {
        int[] A = { 513, 155, 8, 1220, 32, 1776, 417, 768, 113, 1088, 105, 12, 113, 1320, 1046, 112, 100, 137, 9, 0, 169, 270, 1808, 16, 512, 192, 128, 898, 592, 1024, 4, 296 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case41() {
        int[] A = { 111, 111, 127, 238, 238, 254, 126, 110, 238, 110, 126, 238, 238, 111, 238, 127, 238, 254, 126, 127, 126, 110, 254 };
        assertEquals(110, andequation.restoreY(A));
    }

    @Test
    public void case42() {
        int[] A = { 23, 31, 9, 25, 29, 15, 11, 27, 27, 29, 31, 23, 27, 31, 27, 19, 29, 31, 27 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case43() {
        int[] A = { 262143, 262139, 262139, 262139, 131071, 262143, 262143, 262139, 262139, 262143, 262143, 262143, 262139, 262143, 262127, 262143, 262143, 262127, 131067, 262127, 131055, 262127, 262143, 262127, 131071, 262143, 131071, 262143, 262143, 131071, 262143, 262143, 262143, 262143, 262143, 131071, 262143, 262143, 262143, 262143, 131067, 262143, 262143, 262139, 131071, 262143 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case44() {
        int[] A = { 12, 31, 20, 7, 11, 20, 27, 10, 7, 21, 17, 15, 31, 30, 27 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case45() {
        int[] A = { 901119, 1032191, 1044479, 913343, 917439, 912319, 917503, 846847, 1028095, 1032191, 982975, 850943, 835583, 835583, 847807, 965631, 1028095, 977919, 850943, 1044479, 847871, 847807, 917439, 895999, 834559, 847871, 1043455, 1048511, 965567, 981951, 1032127, 962559, 901119, 1048575, 851903, 912383, 851903, 1047487, 901119 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case46() {
        int[] A = { 2047, 2047, 1535, 2047, 2047, 1983, 2047, 1791, 1535, 2047, 2047, 1791, 2047, 2047, 2047, 2047, 2047, 1919, 1535, 1791, 1919 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case47() {
        int[] A = { 65535, 52735, 60414, 65487, 65487, 52175, 60831, 61374, 65023, 56766 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case48() {
        int[] A = { 15, 15, 11, 15, 5, 7, 15, 13, 15, 15, 15, 15, 7, 5, 15, 15, 15, 11, 15, 15, 15, 7, 11, 15, 15, 7, 15, 15, 15, 15, 13, 15, 15, 15, 15, 13 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case49() {
        int[] A = { 1362, 1066, 1659, 2010, 1912, 1720, 1851, 1593, 1799, 1805, 1139, 1493, 1141, 1163, 1211 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case50() {
        int[] A = { 5757, 8047, 4093, 3838, 7671, 7423, 7135, 7163, 7676, 2942, 7663, 7679, 3518, 7679, 3541, 8071, 6135, 7935, 8127, 7679, 8187, 4031, 7161, 8095, 7907, 7670, 8186, 6911, 7903, 8043, 6140, 3985, 6133, 8063, 8191, 4095, 7679, 7915, 5118, 7679, 8175, 8191, 5887 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case51() {
        int[] A = { 31, 31, 23, 30, 31 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case52() {
        int[] A = { 1023, 447, 1023, 1013, 959, 1023, 959, 1023, 959, 638, 1023, 767, 990, 959, 1023, 1023, 1017, 1019, 767 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case53() {
        int[] A = { 447, 511, 511 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case54() {
        int[] A = { 98239, 130815, 128767, 130719, 130815, 98303, 131005, 129023, 130943, 128991, 130815, 131039, 130783, 131071, 122749, 129021, 131007, 122879, 131071, 131037, 122495, 90031, 131007, 95791, 122607, 129007, 131053, 130815, 131055, 131039, 98287, 122877, 131055, 122847, 90109, 131071, 130911, 98175, 131023, 122879, 122495, 129007, 98303, 122879, 131071, 130815 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case55() {
        int[] A = { 4095, 4095, 4095, 4095, 4095, 4095, 4087, 4095, 4095, 4093, 4095, 3581, 4093, 3519, 4031, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4031 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case56() {
        int[] A = { 511, 511, 511, 511, 507, 511, 511, 479, 511, 511, 511, 511, 511, 511, 507, 511, 511, 511, 511, 479, 495, 511, 511, 511, 511, 511, 511, 511, 507, 511, 511, 511, 511, 511, 507 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case57() {
        int[] A = { 238, 446, 47, 127, 430, 366, 446, 111, 62, 174, 367, 511, 127, 495, 254, 190, 302, 191, 446 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case58() {
        int[] A = { 6045, 7839, 6132, 5854, 7927, 14300 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case59() {
        int[] A = { 1446, 1422, 1398, 1517, 1350, 1895, 1372, 1431, 1870, 1391, 1422, 1502, 1391, 1870, 1957, 1324, 2031, 1807, 1919, 1853, 2012, 1806, 1845, 1877, 1485, 1399, 1980, 1316, 1999, 1965, 2013, 1836, 1478, 1511, 1294, 1892, 1887, 1949, 1933, 1444, 1303, 1894 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case60() {
        int[] A = { 795, 957, 989, 1011, 921, 1009, 921, 923, 823, 1021, 987, 927, 883, 923, 955, 827, 825, 991, 953, 957, 959, 851, 887, 889, 895, 885, 849, 1023, 895, 989, 857 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case61() {
        int[] A = { 511, 511, 495, 479, 239, 463, 495, 255, 222, 511, 247, 503 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case62() {
        int[] A = { 246, 247, 255, 251, 255, 255 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case63() {
        int[] A = { 15345, 31734, 24575, 30719, 30591, 20471, 14704, 26559, 30591, 26623, 3966, 32127, 25584, 31739, 31728, 31735, 22335, 25535, 8189, 29692, 16371, 30205, 32703, 32759, 32703 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case64() {
        int[] A = { 9, 12, 9, 12, 15, 11, 4, 12, 15, 15, 12, 12, 12, 14, 6, 11, 13, 14, 11, 11, 1, 11, 11, 7 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case65() {
        int[] A = { 94075, 131037, 94207, 125755, 126829, 81851 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case66() {
        int[] A = { 63076, 112469, 201830, 151236, 76916, 9333, 67092, 7447, 3540, 155044, 2020, 95885, 27941, 228429, 89669, 156877, 171415, 83756, 37895, 3604, 21812, 83076, 24108, 1335, 17678, 72735, 17862, 55092, 19468, 1559, 1510, 1132, 148660, 126260, 34526, 5174, 75014, 230487, 11364, 11540, 34100 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case67() {
        int[] A = { 60757, 61169, 65247, 65403, 65239, 65535, 63199, 65271, 63487, 64725 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case68() {
        int[] A = { 767, 453, 1019, 999, 239, 479, 471 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case69() {
        int[] A = { 1027581, 1045949, 249338, 1043448, 524281, 738815, 1023993, 1011135, 1004415, 1000959, 1046396, 509372, 999281, 1031613, 1030654, 728959, 474998, 1019773, 256497, 519674, 1022399, 198586, 996341, 260019, 784883 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case70() {
        int[] A = { 1048575, 1047551, 1048319, 1048575, 1047551, 1047293, 1047167, 1048189, 1048319, 1048447, 1048575, 1048319, 1048191, 1047295 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case71() {
        int[] A = { 191, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 254, 191, 255, 255, 251, 255, 255, 255, 255, 255, 255, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case72() {
        int[] A = { 255, 255, 255, 255, 255, 255, 255, 255, 255, 191, 255, 255, 191, 251, 255, 223, 255, 255, 255, 251, 255, 191, 255, 251, 255, 255, 251, 255, 255 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case73() {
        int[] A = { 262142, 261103, 261886, 261103, 262143, 262063, 262143, 261567, 131070, 196095, 97279, 196603, 258047, 131071, 262135, 126463, 262127, 216575, 192511, 229371, 253951, 262143, 262143, 253423, 262142, 262143, 130039, 262143, 262143, 122879, 261631, 247783, 262143, 262143 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case74() {
        int[] A = { 90, 723, 255, 71, 1010, 603, 363, 219, 106, 866, 631, 754, 634, 334, 355, 735, 330, 579, 98, 883, 870, 622, 334, 474, 478, 506, 510, 238, 98, 67, 998, 978, 622, 450, 342, 734, 635, 203, 330, 750, 195, 214, 326, 338, 894 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case75() {
        int[] A = { 32683, 32750, 28615, 32683, 32751 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case76() {
        int[] A = { 511, 1023, 1023, 1023, 1023 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case77() {
        int[] A = { 255, 159, 77, 251, 235, 253, 201, 235, 255, 253, 63, 95, 127, 239, 29, 239, 219, 47, 235, 187, 217, 127, 237, 239, 127, 203, 43, 255, 95, 253, 125, 255, 109, 253, 221, 95, 217, 155, 125, 191, 253, 13, 27, 127, 175, 251, 189, 203 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case78() {
        int[] A = { 32765, 28671, 32763, 32767, 32761, 28671, 28671, 30717, 30719, 32767, 30717, 30719, 32765, 32767, 32765, 32767, 32765, 32765, 32763, 24575, 24575, 32767, 32767, 32765, 30719, 32763, 24575, 24575 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case79() {
        int[] A = { 981368, 753371, 524143, 896759, 1040308, 745397, 655199, 716669, 1046959, 386894, 752639, 116607, 1048429, 998895, 1007015, 407407, 456703, 523706, 1044415 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case80() {
        int[] A = { 393215, 524223, 521661, 458367, 522230, 522941, 489465, 131059, 392699, 523772, 524223, 524023, 522687, 425983, 393211, 491263, 261631, 260991, 491518, 524287, 392376, 524287, 62003, 491517, 524285, 127871, 524287, 491002, 457203, 425726, 424951, 491451, 520887, 98301, 393215, 521213, 260094, 390846, 524275 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case81() {
        int[] A = { 8175, 16367, 14314, 6139, 6138, 16379, 6143, 14334, 6139, 14334, 8191, 6123, 8191, 14314, 16378, 8186, 8186, 14335, 14319, 16367, 6139, 8175, 14318, 14314, 8175, 8191, 14319, 6126, 8190, 8175, 8191, 16363, 8191, 16363, 6126, 14334, 16362, 14319, 8191, 16363, 16363, 14318, 16379, 14330, 16382, 6127 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case82() {
        int[] A = { 884709, 1044461, 880501, 916855, 884197, 880501, 1048037, 1011573, 880125, 1048429, 884725, 880101, 880119, 884607, 913383, 880501, 884085, 912869, 913405, 880629, 1043837, 879981, 1011061, 1011173, 912741, 1015653, 1044333, 880631, 884071, 880119, 1011053, 1015141, 1011559, 1011071, 1047911, 1015661, 1047925, 1011685, 916853, 880485, 912757, 884095, 879973, 912871, 1044327, 1011175, 916853, 1015797, 884725, 884607 };
        assertEquals(879973, andequation.restoreY(A));
    }

    @Test
    public void case83() {
        int[] A = { 585935, 585935, 585935, 585935, 585935, 586191, 585935, 585935, 585935, 585951, 585935, 585935, 585935, 585935, 585935, 585935, 651471, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 717007, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935, 585935 };
        assertEquals(585935, andequation.restoreY(A));
    }

    @Test
    public void case84() {
        int[] A = { 1040379, 1040383, 1048571, 1048571, 1048571, 1048571, 1040379, 1040379, 1040379, 1040379, 1040379, 1040379, 1048571, 1048571, 1048575, 1048575, 1048571, 1048575, 1048575, 1048575, 1048571, 1048571, 1040383, 1048571, 1040379, 1040383, 1040383, 1048571, 1048575, 1048571, 1048575, 1040383, 1040383, 1040383, 1040383, 1040383, 1048571, 1040383, 1040379, 1040383, 1048575, 1048575, 1040379, 1048571, 1040379, 1048575, 1040379, 1040383, 1040379, 1048575 };
        assertEquals(1040379, andequation.restoreY(A));
    }

    @Test
    public void case85() {
        int[] A = { 2177, 2177, 526465, 141457, 2177, 2177, 2177, 2177, 2185, 2177, 34945, 35201, 2177, 67713, 26819, 2209, 2177, 2185, 2689, 264321, 2177, 264897, 788617, 2177, 2257, 2177, 2177, 18595, 39041, 264385, 264321, 67713, 2177, 2179, 10369, 137345, 133297, 2177, 2177, 2437, 534657, 2177, 2241, 3205, 2177, 198785, 2177, 2177, 2177, 2193 };
        assertEquals(2177, andequation.restoreY(A));
    }

    @Test
    public void case86() {
        int[] A = { 786431, 1015807, 753663, 1015807, 786431, 786431, 753663, 1048575, 786431, 1048575, 1015807, 786431, 1015807, 1015807, 786431, 786431, 1048575, 1015807, 1015807, 786431, 753663, 753663, 1015807, 753663, 753663, 753663, 1048575, 786431, 786431, 1015807, 1048575, 1048575, 753663, 753663, 753663, 753663, 753663, 786431, 786431, 753663, 753663, 1048575, 786431, 753663, 753663, 1048575, 1048575, 1015807, 1048575, 1048575 };
        assertEquals(753663, andequation.restoreY(A));
    }

    @Test
    public void case87() {
        int[] A = { 522199, 786391, 1030103, 235487, 499703, 514015, 505855, 505847, 759767, 243711, 505815, 776151, 497655, 243679, 245751, 237567, 235479, 767999, 235479, 770039, 235479, 767959, 235479, 251903, 1023991, 1032151, 767991, 767959, 260055, 260087, 761815, 243711, 243671, 759799, 243711, 243671, 1038295, 235479, 507863, 499703, 759767, 243671, 235511, 245719, 235479, 1021951, 262103, 514007, 759775, 759767 };
        assertEquals(235479, andequation.restoreY(A));
    }

    @Test
    public void case88() {
        int[] A = { 516, 0, 329728, 2048, 2, 0, 4160, 266240, 32800, 32768, 4112, 786432, 0, 0, 8192, 16, 65536, 8192, 262148, 128, 262144, 16, 0, 131072, 16385, 2048, 1024, 40992, 24, 0, 4, 4096, 0, 16, 128, 4097, 4, 256, 8194, 4, 10784, 1024, 0, 0, 0, 6144, 18436, 0, 0, 426000 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case89() {
        int[] A = { 301333, 121108, 47572, 318237, 113940, 39188, 39317, 104732, 646933, 39700, 39292, 47380, 579988, 309588, 39292, 638388, 64276, 39198, 826132, 40276, 170260, 121108, 55637, 572692, 302357, 48508, 39220, 47380, 56118, 47381, 891221, 703255, 39188, 563988, 694612, 39190, 170292, 55580, 104798, 825751, 56598, 572700, 768276, 171796, 39317, 432404, 39286, 40215, 301364, 39188 };
        assertEquals(39188, andequation.restoreY(A));
    }

    @Test
    public void case90() {
        int[] A = { 1048279, 1048279, 1048311, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279, 1048279 };
        assertEquals(1048279, andequation.restoreY(A));
    }

    @Test
    public void case91() {
        int[] A = { 1048575, 1048567, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1032183, 1048575, 1048575, 1032191, 1048575, 1048575, 1048575, 1032191, 1048567, 1032191, 1048575, 1048567, 1048575, 1048575, 1032191, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1032183, 1048575, 1032191, 1032191, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575 };
        assertEquals(1032183, andequation.restoreY(A));
    }

    @Test
    public void case92() {
        int[] A = { 1042191, 493071, 1033743, 511919, 524111, 1041967, 501391, 493103, 509487, 521823, 511567, 503599, 1021519, 509599, 1027711, 497215, 493103, 509535, 511855, 522095, 495407, 1035791, 517839, 1027903, 505551, 515647, 499295, 1017391, 1017455, 499551, 493327, 1029759, 1042223, 515791, 1019487, 493119, 1042159, 507471, 1019471, 501455, 509535, 497183, 517711, 497167, 1042207, 493551, 515999, 501679, 509535, 1037983 };
        assertEquals(493071, andequation.restoreY(A));
    }

    @Test
    public void case93() {
        int[] A = { 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575 };
        assertEquals(1048575, andequation.restoreY(A));
    }

    @Test
    public void case94() {
        int[] A = { 523967, 523967, 523967, 1048255, 523967, 1048319, 524223, 523967, 523967, 523967, 523967, 523967, 523967, 524031, 523967, 524223, 523967, 523967, 524031, 523967, 1048319, 523967, 523967, 523967, 524223, 523967, 523967, 523967, 1048255, 523967, 523967, 1048255, 524223, 523967, 523967, 1048255, 523967, 524031, 523967, 524031, 1048255, 523967, 523967, 524031, 1048255, 523967, 523967, 523967, 523967, 1048255 };
        assertEquals(523967, andequation.restoreY(A));
    }

    @Test
    public void case95() {
        int[] A = { 261987, 786173, 524277, 261985, 261859, 524009, 524149, 1048417, 262115, 1048417, 524019, 523893, 786149, 1048177, 786291, 261995, 523883, 261739, 261883, 786301, 1048165, 786037, 261729, 786029, 523875, 1048317, 261757, 524129, 261859, 786149, 1048423, 261993, 1048297, 786417, 261857, 261731, 1048567, 1048551, 524263, 261737, 524259, 524147, 786161, 261873, 1048191, 261757, 261753, 262133, 261857, 261731 };
        assertEquals(261729, andequation.restoreY(A));
    }

    @Test
    public void case96() {
        int[] A = { 1048575, 1048575, 1048575, 1040383, 1040383, 1048575, 1048575, 1040383, 1048575, 1048575, 1040383, 1040383, 1048575, 1040383, 1048575, 1040383, 1048575, 1040383, 1040383, 1048575, 1048575, 1048575, 1040383, 1040383, 1040383, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1040383, 1048575, 1048575, 1048575, 1040383, 1040383, 1048575, 1048575, 1048575, 1048575, 1040383, 1048575, 1040383, 1040383, 1048575, 1048575, 1048575, 1048575, 1048575 };
        assertEquals(1040383, andequation.restoreY(A));
    }

    @Test
    public void case97() {
        int[] A = { 1048575, 1046527, 1013759, 1015807, 1013759, 1013759, 1013759, 1048575, 1013759, 1015807, 1013759, 1015807, 1013759, 1015807, 1015807, 1046527, 1013759, 1048575, 1013759, 1013759, 1013759, 1046527, 1015807, 1013759, 1013759, 1046527, 1013759, 1013759, 1046527, 1013759, 1046527, 1046527, 1013759, 1013759, 1046527, 1013759, 1015807, 1015807, 1046527, 1015807, 1013759, 1015807, 1015807, 1046527, 1013759, 1013759, 1046527, 1046527, 1015807, 1015807 };
        assertEquals(1013759, andequation.restoreY(A));
    }

    @Test
    public void case98() {
        int[] A = { 1048575, 1048575, 1015807, 1048575, 1048575, 1048575, 1015807, 1015807, 1015807, 1015807, 1015807, 1048575, 1048575, 1048575, 1015807, 1048575, 1015807, 1015807, 1048575, 1015807, 1048575, 1048575, 1048575, 1048575, 1015807, 1015807, 1048575, 1048575, 1048575, 1015807, 1015807, 1048575, 1015807, 1015807, 1048575, 1048575, 1048575, 1048575, 1048575, 1015807, 1048575, 1048575, 1048575, 1048575, 1048575, 1015807, 1048575, 1048575, 1048575, 1048575 };
        assertEquals(1015807, andequation.restoreY(A));
    }

    @Test
    public void case99() {
        int[] A = { 1047389, 1047039, 1048063, 1048413, 1047935, 1048447, 1046909, 1047421, 1047423, 1046877, 1046877, 1047005, 1048029, 1047901, 1047389, 1047005, 1047933, 1047903, 1047901, 1047901, 1047933, 1047007, 1047007, 1046909, 1046879, 1048029, 1048413, 1047389, 1046879, 1048445, 1046877, 1046909, 1047037, 1048061, 1046877, 1047005, 1047037, 1048063, 1047421, 1047517, 1047519, 1047517, 1048029, 1046877, 1047005, 1047421, 1046879, 1046877, 1047037, 1047389 };
        assertEquals(1046877, andequation.restoreY(A));
    }

    @Test
    public void case100() {
        int[] A = { 19488, 19488, 19488, 117792, 19488, 19552, 543776, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 23584, 19488, 19488, 19488, 19488, 19488, 27680, 19488, 19488, 19488, 19488, 19488, 150560, 19488, 19488, 19488, 19488, 19488, 19488, 158752, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19488, 19552 };
        assertEquals(19488, andequation.restoreY(A));
    }

    @Test
    public void case101() {
        int[] A = { 1048535, 1048535, 524279, 1048567, 524255, 524247, 524279, 524247, 524247, 1048535, 1048535, 524287, 524247, 1048535, 524279, 1048535, 1048543, 524247, 524287, 1048535, 1048535, 1048535, 524255, 1048535, 1048543, 1048567, 1048567, 524247, 1048575, 524279, 524247, 1048567, 524247, 524247, 524247, 524287, 524287, 524255, 1048535, 524247, 1048535, 524247, 1048575, 1048535, 524247, 524255, 524255, 1048567, 524279, 524279 };
        assertEquals(524247, andequation.restoreY(A));
    }

    @Test
    public void case102() {
        int[] A = { 797915, 208725, 582124, 786428, 878844, 1036231, 779603, 961278, 333301, 457469, 981203, 880366, 973949, 683379, 99160, 1013489, 972025, 392019, 1040238, 1022419, 503671, 719615, 1026428, 621261, 504666, 211951, 749527, 580847, 106487, 900601, 956143, 993510, 411518, 1006293, 892263, 447734, 914800, 1028453, 1042372, 681451, 1021765, 507377, 228063, 929142, 130663, 159194, 434672, 748391, 1017343, 708600 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case103() {
        int[] A = { 586202, 932806, 29406, 179534, 867531, 422011, 1013315, 766787, 406627, 766919, 735970, 210758, 621507, 1013083, 343890, 1029215, 130531, 63938, 1031747, 146030, 900295, 127343, 79958, 883395, 963523, 47719, 47698, 425850, 31318, 980479, 455754, 325367, 376534, 391502, 996082, 982767, 456191, 130558, 750418, 128579, 130023, 999275, 490483, 783682, 30418, 949502, 801106, 143682, 589419, 292062 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case104() {
        int[] A = { 1048575, 1048571, 1048575, 1048574, 1032191, 1047423, 1048511, 915455, 1048575, 1048573, 1048511, 1048575, 1048060, 1048575, 982907, 524287, 1046519, 1046399, 1048575, 1048575, 523775, 1048575, 1048575, 786431, 1048574, 1047550, 1048063, 1048575, 1048575, 786427, 1048575, 983039, 917503, 917375, 1048575, 982527, 786431, 917503, 1048575, 1029119, 1048063, 1044477, 1048575, 1048575, 1048574, 1048575, 1046515, 1048571, 786431, 1048063 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case105() {
        int[] A = { 253258, 1040377, 524206, 982563, 1047416, 1007590, 506621, 458734, 523183, 1031505, 785911, 1031663, 892911, 1048007, 784886, 489854, 1048565, 1048575, 524151, 342843, 523610, 1015677, 850399, 851823, 1032111, 908623, 883711, 1014771, 622543, 818107, 450502, 1040243, 572155, 1032023, 457919, 228731, 1048255, 1048567, 753151, 875006, 261366, 900792, 908731, 1013948, 835583, 712461, 612604, 524270, 720350, 655089 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case106() {
        int[] A = { 808925, 476911, 478917, 876475, 909297, 190654, 457341, 849563, 1015806, 961908, 724957, 764843, 750126, 908781, 233198, 347882, 930622, 862694, 91135, 515724, 810855, 504118, 1045074, 809093, 505456, 360341, 455773, 785822, 873330, 699893, 1043103, 524265, 454396, 442207, 744879, 1013791, 515034, 1027103, 455423, 65317, 973183, 849739, 1010305, 834271, 988246, 1030266, 980207, 182894, 876281, 148859 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case107() {
        int[] A = { 1048575, 1048575, 1048575, 1048575, 1015807, 1048575, 1048575, 1048575, 1048575, 1048575, 917503, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 524287, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case108() {
        int[] A = { 1048574, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 524287, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048319, 1048575, 1048575, 1048575, 1048575 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case109() {
        int[] A = { 1046527, 1048503, 1048063, 915453, 785343, 786431, 982527, 983039, 883710, 1048575, 884669, 1048573, 1047541, 753663, 916479, 983039, 948125, 1048575, 1048535, 1048541, 950271, 1013759, 1048575, 917463, 1048573, 1048574, 655356, 1046527, 1048575, 1015799, 917502, 1047549, 1048511, 1046463, 786429, 917439, 983006, 916477, 1041855, 983037, 655359, 1015711, 913407, 913343, 1044479, 1013663, 1048052, 913373, 786431, 916991 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case110() {
        int[] A = { 1011710, 1048575, 1048575, 1015807, 1048573, 1034239, 1048575, 1048575, 1046527, 1030143, 1048575, 1044479, 1036223, 1048575, 1048543, 786431, 1048575, 1048575, 1048575, 1048542, 1048575, 786431, 1048559, 1015807, 1048511, 1048575, 1044479, 1048575, 1048575, 1048031, 1040381, 1048495, 1048559, 1048575, 1048574, 785918, 1040351, 1048495, 917471, 1048575, 1048575, 1040381, 1048575, 1048575, 1048575, 1047998, 1048575, 1048063, 1048575, 1042431 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case111() {
        int[] A = { 515997, 514876, 1026895, 523096, 364345, 519053, 1043404, 514831, 904984, 364376, 917320, 1048408, 387912, 368541, 887674, 391982, 387902, 523050, 1018829, 523048, 1018655, 892889, 376651, 383816, 523263, 510859, 1030921, 387884, 392042, 383834, 908093, 371465, 511759, 1019661, 892683, 379851, 383804, 495450, 892776, 514825, 498603, 899960, 900031, 515981, 367483, 363337, 523178, 383902, 523213, 518990 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case112() {
        int[] A = { 697819, 926068, 1009643, 978257, 783045, 729596, 980332, 930500, 945360, 751810, 995950, 682074, 769632, 1042531, 948708, 965874, 1029611, 1029700, 753244, 734411, 720849, 931812, 765791, 991727, 669948, 960609, 963043, 750793, 1012697, 1046640, 946164, 716115, 766150, 720739, 670281, 998638, 784105, 961788, 961370, 943356, 715843, 729179, 963439, 947533, 1031756, 697333, 998773, 949877, 746871, 1046872 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case113() {
        int[] A = { 982783, 1048575, 909308, 1048575, 1048575, 1048543, 1048495, 1048571, 1048575, 1040383, 1048575, 1048315, 1048575, 1048569, 982975, 1048571, 1048574, 917503, 1048543, 917499, 1048575, 1048511, 1048319, 1015807, 1048543, 1048573, 1048303, 1048511, 1007615, 916975, 1048575, 393215, 1015039, 1048527, 1048511, 1040383, 1048559, 1048573, 1048575, 1048319, 1048575, 1048510, 1048511, 1048060, 983037, 1048063, 1048251, 1048575, 1048575, 524271 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case114() {
        int[] A = { 523639, 507383, 499191, 515959, 1048447, 507255, 1031679, 983039, 458743, 1032063, 499199, 974711, 1031671, 1040375, 1048575, 982391, 1048447, 499575, 442231, 507263, 974847, 1047935, 974719, 441719, 1031671, 958327, 1032063, 515967, 441719, 982391, 434039, 957951, 974335, 966527, 507383, 515575, 1048575, 450551, 450431, 1048447, 499191, 1023479, 442231, 499199, 966519, 449911, 966655, 442367, 449911, 499063 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case115() {
        int[] A = { 764747, 212509, 736074, 469549, 229021, 212603, 207802, 731784, 491134, 995289, 519740, 256925, 994137, 782185, 1048168, 474011, 1044330, 487048, 1011258, 207567, 244250, 785295, 485900, 768622, 469769, 1015662, 245404, 733177, 781036, 260828, 522959, 1043278, 1014782, 507516, 507692, 470698, 261822, 764877, 749243, 1043384, 780904, 1047117, 240218, 260953, 994169, 473816, 737112, 212650, 240265, 241646 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case116() {
        int[] A = { 13280, 862, 901452, 289242, 954833, 201034, 399680, 295904, 437576, 196053, 281578, 1042803, 123225, 546144, 284096, 329579, 6468, 756732, 332798, 458055, 733550, 886655, 327506, 14810, 813385, 446808, 58346, 414545, 547795, 17396, 790348, 289611, 598389, 586609, 586060, 262632, 574796, 766954, 594368, 211412, 547657, 138601, 83805, 448364, 28482, 728549, 623050, 430920, 283978, 65899 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case117() {
        int[] A = { 1015791, 1048575, 1048567, 1015805, 1048571, 1048415, 1048063, 983027, 1032063, 1015805, 1048567, 999415, 999423, 1048061, 983031, 835583, 983039, 999423, 1032191, 1047551, 1048541, 917503, 917503, 999419, 1048575, 1048061, 983023, 1048543, 917501, 1047551, 1048047, 917503, 801791, 1047551, 1032175, 1048527, 1031679, 917503, 1048543, 1032189, 1015771, 1015799, 1048527, 1048559, 835583, 999389, 1048571, 1048575, 1048575, 1048565 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case118() {
        int[] A = { 1048575, 983039, 524287, 1048575, 1048575, 1048575, 983039, 1048575, 1048575, 1048575, 1048575, 786431, 458751, 983039, 983039, 1048575, 1048575, 786431, 1048575, 983039, 524287, 1048575, 1048575, 524287, 983039, 983039, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 262143, 1048575, 524287, 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 786431, 786431, 1048575, 1048575, 1048575, 1048575, 1048575 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case119() {
        int[] A = { 1011709, 1048559, 1048575, 1048571, 1044475, 1048575, 1048427, 1007599, 1015679, 1040383, 1048429, 1044475, 1048447, 1048575, 1048575, 1015805, 1044463, 1044351, 1007613, 1040383, 1003519, 1011707, 1015807, 1048447, 1015791, 1040383, 1048447, 1048553, 1048553, 1044463, 1007599, 1048445, 1048447, 1040235, 1048557, 1048559, 1015679, 1048571, 1040383, 1048429, 1044351, 1036285, 1015807, 1048575, 1007615, 1048447, 1048443, 1040381, 1048575, 1044479 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case120() {
        int[] A = { 1046527, 1048575, 1048575, 1048575, 1048575, 524283, 1048575, 524223, 1048571, 1048575, 524287, 524287, 1048575, 1048511, 1048511, 1046463, 1048575, 1048575, 524287, 1048575, 1048575, 1048575, 1046527, 522239, 1048575, 1046527, 1048575, 1048507, 1048575, 1048511, 1048575, 1048575, 1048575, 524287, 1048575, 1048575, 1048575, 1048571, 1048575, 1046527, 1048571, 1048571, 1048575, 1048575, 1048575, 1048571, 1048575, 524287, 1048575, 1048511 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case121() {
        int[] A = { 524017, 998273, 507547, 1044376, 1044371, 491196, 1043455, 1001468, 1009662, 1047262, 1045172, 459761, 475135, 524285, 1040318, 1027791, 523263, 485293, 995259, 503747, 1023935, 1044395, 1047529, 1014447, 1016792, 1023968, 984781, 993957, 511912, 1046527, 1045229, 1044204, 1018622, 1044214, 1048575, 488427, 483230, 1031163, 476100, 507871, 1040382, 522175, 467853, 1017828, 1028765, 1004220, 1039077, 520947, 1031934, 1006525 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case122() {
        int[] A = { 2, 3, 7, 19 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case123() {
        int[] A = { 191411, 256951, 191411, 191411, 191411, 256951, 195507, 191411, 192435, 191411, 191411, 195511, 191419, 191411, 256947, 191415, 191475, 195579, 191415, 191411, 191483, 191411, 191419, 191475, 256947, 191411, 191411, 191411, 191419, 256947, 191411, 191411, 191411 };
        assertEquals(191411, andequation.restoreY(A));
    }

    @Test
    public void case124() {
        int[] A = { 1, 1 };
        assertEquals(1, andequation.restoreY(A));
    }

    @Test
    public void case125() {
        int[] A = { 7, 7 };
        assertEquals(7, andequation.restoreY(A));
    }

    @Test
    public void case126() {
        int[] A = { 45, 45 };
        assertEquals(45, andequation.restoreY(A));
    }

    @Test
    public void case127() {
        int[] A = { 2, 2 };
        assertEquals(2, andequation.restoreY(A));
    }

    @Test
    public void case128() {
        int[] A = { 5, 5 };
        assertEquals(5, andequation.restoreY(A));
    }

    @Test
    public void case129() {
        int[] A = { 35, 35 };
        assertEquals(35, andequation.restoreY(A));
    }

    @Test
    public void case130() {
        int[] A = { 30, 30 };
        assertEquals(30, andequation.restoreY(A));
    }

    @Test
    public void case131() {
        int[] A = { 6, 6 };
        assertEquals(6, andequation.restoreY(A));
    }

    @Test
    public void case132() {
        int[] A = { 4, 4 };
        assertEquals(4, andequation.restoreY(A));
    }

    @Test
    public void case133() {
        int[] A = { 31, 31 };
        assertEquals(31, andequation.restoreY(A));
    }

    @Test
    public void case134() {
        int[] A = { 2, 3, 7, 19 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case135() {
        int[] A = { 1, 3, 0 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case136() {
        int[] A = { 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case137() {
        int[] A = { 3, 3 };
        assertEquals(3, andequation.restoreY(A));
    }

    @Test
    public void case138() {
        int[] A = { 2, 3, 4, 0 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case139() {
        int[] A = { 457, 457 };
        assertEquals(457, andequation.restoreY(A));
    }

    @Test
    public void case140() {
        int[] A = { 0, 5 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case141() {
        int[] A = { 0, 1 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case142() {
        int[] A = { 1, 3 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case143() {
        int[] A = { 12, 12, 4, 12, 4, 12 };
        assertEquals(4, andequation.restoreY(A));
    }

    @Test
    public void case144() {
        int[] A = { 1, 0 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case145() {
        int[] A = { 26, 26 };
        assertEquals(26, andequation.restoreY(A));
    }

    @Test
    public void case146() {
        int[] A = { 5, 7, 5, 3 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case147() {
        int[] A = { 23, 23 };
        assertEquals(23, andequation.restoreY(A));
    }

    @Test
    public void case148() {
        int[] A = { 5, 5, 5, 4 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case149() {
        int[] A = { 1048575, 1048574, 1048565, 1048564 };
        assertEquals(1048564, andequation.restoreY(A));
    }

    @Test
    public void case150() {
        int[] A = { 1, 0, 0 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case151() {
        int[] A = { 0, 0, 0, 0, 1, 1, 1 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case152() {
        int[] A = { 3, 3, 3 };
        assertEquals(3, andequation.restoreY(A));
    }

    @Test
    public void case153() {
        int[] A = { 0, 0 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case154() {
        int[] A = { 5, 3, 1 };
        assertEquals(1, andequation.restoreY(A));
    }

    @Test
    public void case155() {
        int[] A = { 0, 3, 4 };
        assertEquals(0, andequation.restoreY(A));
    }

    @Test
    public void case156() {
        int[] A = { 1048575, 1048575, 1048575, 1048575, 1048575, 1048575, 2, 3 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case157() {
        int[] A = { 5, 14, 4, 14, 5 };
        assertEquals(4, andequation.restoreY(A));
    }

    @Test
    public void case158() {
        int[] A = { 10, 10 };
        assertEquals(10, andequation.restoreY(A));
    }

    @Test
    public void case159() {
        int[] A = { 31, 7, 7 };
        assertEquals(7, andequation.restoreY(A));
    }

    @Test
    public void case160() {
        int[] A = { 2, 3, 6, 9 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case161() {
        int[] A = { 12, 12 };
        assertEquals(12, andequation.restoreY(A));
    }

    @Test
    public void case162() {
        int[] A = { 1, 3, 5, 0 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case163() {
        int[] A = { 2, 3, 2, 1 };
        assertEquals(-1, andequation.restoreY(A));
    }

    @Test
    public void case164() {
        int[] A = { 3, 1, 5 };
        assertEquals(1, andequation.restoreY(A));
    }

    @Test
    public void case165() {
        int[] A = { 1, 3, 5 };
        assertEquals(1, andequation.restoreY(A));
    }

}
