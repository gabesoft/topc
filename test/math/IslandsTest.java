package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class IslandsTest {
    Islands islands = new Islands();

    @Test
    public void case1() {
        String[] kingdom = { "##...##", "#.#.#..", "#..####", "..###..", "#.##..#", ".....#.", "##.....", "..#.###", "##.###.", ".##...." };
        assertEquals(91, islands.beachLength(kingdom));
    }

    @Test
    public void case2() {
        String[] kingdom = { ".#...#.." };
        assertEquals(4, islands.beachLength(kingdom));
    }

    @Test
    public void case3() {
        String[] kingdom = { "..#.##", ".##.#.", "#.#..." };
        assertEquals(19, islands.beachLength(kingdom));
    }

    @Test
    public void case4() {
        String[] kingdom = { "#...#.....", "##..#...#." };
        assertEquals(15, islands.beachLength(kingdom));
    }

    @Test
    public void case5() {
        String[] kingdom = { "....#.", ".#....", "..#..#", "####.." };
        assertEquals(24, islands.beachLength(kingdom));
    }

    @Test
    public void case6() {
        String[] kingdom = { "###.#", ".###.", ".###.", "#....", "##.##", ".####" };
        assertEquals(32, islands.beachLength(kingdom));
    }

    @Test
    public void case7() {
        String[] kingdom = { ".#", "..", "#.", "##", "##", "..", "#.", "##", "#.", ".#" };
        assertEquals(20, islands.beachLength(kingdom));
    }

    @Test
    public void case8() {
        String[] kingdom = { "#.#" };
        assertEquals(2, islands.beachLength(kingdom));
    }

    @Test
    public void case9() {
        String[] kingdom = { "#.", "#.", "..", "##" };
        assertEquals(8, islands.beachLength(kingdom));
    }

    @Test
    public void case10() {
        String[] kingdom = { "...", "##.", "###" };
        assertEquals(6, islands.beachLength(kingdom));
    }

    @Test
    public void case11() {
        String[] kingdom = { "..#######..######....##..#.#..", "....#######..##.#...#.####....", "#..#....##.#..#.....#....#.#..", "..#.###...##.#####..######.#.#", ".#..#..##.##..#####..#.#.##.#.", "#.#.#.###.#...#..##.#####..###", "###.#.......#####..###.###.##.", "#.#####.##.####.#.#######..###", "...##.##.##.#..#..#..#.###..#.", "..##.#..##.#....#####.###.....", ".##.#.######.........##.#..##.", ".....##.######.#####..###...#.", "###.#...#..##.#.###.#####.#.##", ".##..####.#..#.####.#.##.###..", ".####.#....#....###.###.#..###", "###.#.####...##....###.#....#.", "....##.......#...###.#.##.#.#.", "##...####..#.##.####..##..##..", "#.###.#.###..###..#.#.#......#", ".###.#####....###.####.#.#####", "#....#..##.#...#.#..#..##..#.#", "#...####.##....###....#...#..#", "#..........#.#...###.##..#.##.", ".##.######.......##########...", "..##.#.#..#......###...##.##.#", ".#.#####......##.##..#.#..#.#.", ".#.#....#.####........#.......", "#####....#...#.##..#.....#.#.#", "###..######..##.###...##..#.##", "..###.#.#.######..#..##.###..#", ".#..##.##.####..#.##...#..#.#.", ".#..##..###..#....#.###...#..#", "###.#.##...###.....#.#.###.###", "...#..###....#.###...#..#.###.", "#.###.#..##..###.#...###..#..#", "...#.####......##....###...#.#", ".#####.###.#...###....#####..#", ".....#####...#..##...##...#..#" };
        assertEquals(1601, islands.beachLength(kingdom));
    }

    @Test
    public void case12() {
        String[] kingdom = { "##.#.###.###..###", "...#..##......##.", "#..##.#.#..##....", "###.#.##.###...#.", "...#....#..##...#", "#.##.##..##.##.#.", "#.###.####.#..#.#", "#..####.#....####" };
        assertEquals(184, islands.beachLength(kingdom));
    }

    @Test
    public void case13() {
        String[] kingdom = { "#.##", "#.##", "..#." };
        assertEquals(13, islands.beachLength(kingdom));
    }

    @Test
    public void case14() {
        String[] kingdom = { "##..##.#.#....#######..##.#.#.##.#.#...#...", "..#.#....#..#....#.#.#..#..#....##.#...###.", "..#...###.######.#.######.#####..##...##.#.", "#...#...##..###.#.#.##.......#.#...####.###", ".###.###....##..###.#..##.####.#.#.####....", "...#...##.##.#######..######..#...##..##..#", "#.#.#.#.#..####...#.###.####...###.#.#.....", ".##.####...##..#..##...###...#..##...##.###", "..#...#.#.#.#####.....#..#.#####.####...###", "##.###....#.#.##..####.#....##.###.##.####.", ".#.....#.###.#.##.##.#.#.###.##..#...######", "...#####.##.#...#.#.##..##...#.##.#..###.##", "#..####..#.#....#####.########.##....#.###.", ".......####.....#..#..##.#.#.#..#######.###", ".....#.##.......##...###.#...###...##...#.#", ".#.##...####.#..#.##.##.#..#..#####..######", ".#####..#.####.####.##.####...#....###.####", "#####.########.###.#####.##....#..###.#..##", "......##...######..##...#.#.####..#..####.." };
        assertEquals(1164, islands.beachLength(kingdom));
    }

    @Test
    public void case15() {
        String[] kingdom = { "#.##.#..##.#.....#...#..#....#", "#..#...#.#.##.######.#.#..##..", "..#.#..#..##...##.##.##.#..#..", ".###..#.#.##.#...###.##..#...#", "..#......##.#########.##.###..", ".##.#####........##.######..#.", "##.....#..##.##..#.#.#........", ".####..###.##.####..#.#...##..", ".#..##...#.....#.###.#.###....", "#.##...#....###.....###.##..#.", "##...#..####.##.###.####.#.##.", "####..###....#......###......#", "#......##.##..##...#..#.#..###", "##..#...#....#.....#.#.###.###", "###.##..##.##.##...#...#.##...", ".#....###..#..#..#.###.##.....", ".##..##...##.#....#.###...##..", "#.#########.#.#.###.##...###.#", "#...##..#...##..#.#.#..#..#...", "#.#.#.##.......#.........####.", "......##......#...###.#.#...#.", ".##.#....#...#.#.#.##....###..", "....#.#....#....##.##...#.##.#", "#..##.#####.#...#..###.#..#.##", "..#.#..#.#.....####.###.#.#.#.", ".#....###.....#..#...#.#.#.###", "###.####...#..#...###.#..####.", "..##...#...#.####..##.#..#.#.#", ".##..##.#.#........#.#.....#.#", "#.###...##.##.##.#####..#.##.#", "#.#..####..##.#..#.#.#..#..###", "#...#.###.##.##.###.##.###.##.", "..###.#...####.#..#..##..#.###", "#.#...###....#..#...#..#..##.." };
        assertEquals(1491, islands.beachLength(kingdom));
    }

    @Test
    public void case16() {
        String[] kingdom = { "#.##..##.#.##..#....#.....##..####.#.##...#####.#", "....##...###.#.#.#.#...#.##..#..##.#...###..#.#..", "#..####.##.####..#..####.#.##..#.###..#.#.#.#...#", "##..#.##..#.##.#.##...#..#.##..#....#....###.#..#", "..###.#.##.#####.#.#...#.####....##.##...##.##...", "..##.#####..#.#...##...#..#.#.#..###....#.#......", "#...#####.#.#...##.#.....##.##.#.##....##..#...##", "#.####.#.###..####..#.#.###.##..###..#.#.#.#.###.", "..###..#.#####.#...###.##..#..##.#....#.#..#.#...", "#####.##.###.#..#...#..#..####.##.#..#..#...#...#", "###..##.###..##..#..#.#.#.#.##..######.#.#.######", "###....####.####.####...#.#..#.#.....####.#...#..", "##.##.#..#..#.#####.#.......#####.##...#...#.#...", "##..#..#...#.####.###...#....#...#..#..#...#..#..", "##..#...##..##....#.#.####...##.##..###..#.#.#..#", "..##..#.#.#.#.#######..#......#...#..#..#..###.##", "....######...##.#.#..###..##.##.#.#...#.####..###", "##.#.#...#..#....###.#...######....#...##.###.#.#", "..#.######..#.#.##..#.##..#.###..#.....#.##....##", "#.#...#..###.#..#.#####....###.#...######..#.####", ".####..###.##.#...##.###...##.###.#...#.#...#.###", ".###.#.#...#######.#.###..######.#.##...##......#", "##....#...###..###...######..##..######.#####.#..", "#####..#...#...#########....#..#..#.##.###...#...", ".##..######.#.###..####.#.##....#.......#.#####.#", "#.##..#.#.#.#.....###.###....##...#####.##.....#.", "##.#.....#.##..#.###..###.#.#.#...#.####...#.#.#.", "#####.#.#.....#..#.#####...#.##.#..######.##..###", "#...#...####.#...#...##...##.#.#.....##......#.##", "#...########..#.####..#...#.....###..#..###.####.", "#######.###......#.##.#.####.##....#..#.#....##.#", "..##.......##.....##..#...#.##.#.#.#...#.####.##.", ".#.###.##...#.#.###..###..###.#.#########.#.#....", "#####..#.##.#......###.....##..#####....#...#.##.", ".##.#.###.#.....##.####.#.##.......#..####.##.#..", "#..#.....#.#.###...#..##.###.#.#.#..####.###...#.", "##....##........##.....####.#....##.##..###.##.#.", "#####..##....#.#.#..#.#..##.#.##.#.####...#####.#", "#.##.....###.##.###.##.#.#.##.###...#...###.##...", ".###.#..#.#####....###.#...#..#####....#...###.##", "..##.###..##.#.#.#..#..####.##.#...#.###.....##..", ".#.#######.##.#...#.##..#...##.#.....#..#####...#", "####.#.#..#####.....###.##.#.....#..########.##..", "...#.###.#.##.##.###...#..#...###....###.#.......", ".#.######....###.#.##...###...####...#.#..#.##.##", "...###..#.#.##.#.###.....#.#.###.#.#####......###", "#..##.###.#.#...####..##.####.#...#..######.#.###", ".#..####...###..#...##.###.###.###...##.##...#.#.", "##..##..###....##.#.###...##.###.....#..####.##.#", "......#..#.#.###..#..#..###..##.#...#.##.......#." };
        assertEquals(3559, islands.beachLength(kingdom));
    }

    @Test
    public void case17() {
        String[] kingdom = { "#.#.#.#..#.", "#######..##", "###.#.####.", ".#.####...#", "####.#.####", "#....###.#.", ".#.##...#..", ".#.######..", "######.#.#.", "#..###.#..#", "..##..#.#.#", "###..#.....", ".#..#....#.", "#..#..####.", "##.#.##.#..", ".##.####.##", "..##.#.###.", "###..#.##..", "##.###.#...", "..#.#..##.#", "##..#.#.##.", "######.##.#", "##...#..###", "...#####..#", ".###......#", "...#...##.#", "#..#.#.....", "..####.#...", "#...#..#.#.", "#..#.###..#", "...##.#.#.#" };
        assertEquals(487, islands.beachLength(kingdom));
    }

    @Test
    public void case18() {
        String[] kingdom = { "....##..###.##..#.#..#.#...#.#..########..#...##", "#.##..##.##..#.#..##.###.##.#.#..###.#.####..#.#", "#.....##.....#.###.##.##...#..#.#..#..........#.", "...##.#.#.###.#.#.#####.#.######.#......########", "#..####.......##...#.###.##.###....#.#.##.#....#", "..#.###....#.###...#####..#.##...#....#.#..#....", "##..##.##.#.#....##.##.##.#.#.###.##..#..#...#..", ".##.#....##.##.#.#.####.#.##..##.#.#.#.#..##.###", "#.....#..#..#.##.#######.##.####....####...####.", "#..#.#.#.##......#.#..#######..###..####..#...##", ".#####..##.###.#.#..##......##...##....#.####...", ".##..###.....##..##..#.#.##.#..##...##.....#####", "..####.#############........###....#.#..###.###.", ".##..##.#.#..##.####....#...######..#....#.##.##", "#...#..###.#.#.#.#.######..#.#...####.#..#...##.", ".#.#.#.###......#.#.....#.....##.##....#..#.##.#", "...#...#..####.#.........#.#.##..###.##.##..#.#.", ".#.#....###....#.###.#...#.#.#.##.#.#...###....#", ".##....###.#.....##.#.###.#.##.###.....###.####.", "#.#.######..#.###.##..##.##..#..#.#.#.#..####.#.", "#.##.######.##...#.###.######.#.###..###..##.###", ".###..##..####..#.#...##.##.##.####..#####..#.##", "##.#..#.......#####...#.....#.#.####.....##.#.#.", "..#.....##..#.###.#.##..#....#......#..###..##..", "#.#######.###.#.###.#...#..###.#...#..#..##...##", "..##..#.#.#.#.....##..####.#..####...#.#...#.#.#", "#..##.#..##.#..#.#.###....##...###.#...##.#.....", "#.##....########.##.......#.......##.#####.###.." };
        assertEquals(1965, islands.beachLength(kingdom));
    }

    @Test
    public void case19() {
        String[] kingdom = { "####.", "###.#", "#..##", ".###.", "....#", "..##.", "####.", "##.#.", "#####", "....#", ".#..#", "#.#.#", ".##..", ".##.#", "###.#", "##..#", "..###" };
        assertEquals(103, islands.beachLength(kingdom));
    }

    @Test
    public void case20() {
        String[] kingdom = { "...#...#.#..#..#.", "#.#.#.##.....#.#.", "#.##.#######..###", "...##..###.#.####", "#...#.#.....#.#..", ".#.#.#.......#..#", ".###.#.#####.....", "...#.###..#.##.#.", "##.#.###.#....###", "######..#.....#..", "#.....###.####.#.", "..#..##.##.##..##", ".##.#....#...##.#", "#.##.#.#.###.####", "#.##.####..###...", "...##...#.#..##..", "...#..#....##.##.", "###.#..###.#.###." };
        assertEquals(444, islands.beachLength(kingdom));
    }

    @Test
    public void case21() {
        String[] kingdom = { ".#...#", "..#.##", "###..#", ".....#", "#.#...", "#.####", ".##..#", "#.#..#", ".#.#.#", "###..#", "###.#.", "#.###.", ".....#", "##...#", "#.##.#", "#.#..#", ".#....", ".#...#", "#...##", "..#.##", "..###.", ".##...", "####.#" };
        assertEquals(176, islands.beachLength(kingdom));
    }

    @Test
    public void case22() {
        String[] kingdom = { "#.#.###.#...#...", "....#.....##..##", "###.#...##..#.#.", ".#.#.####.######", "##.###....#.####", "#..#...######.#.", ".#.##.#####....#", "###.#.##.#.##.##", "..##..#.##.#....", ".#.#.###.#.##...", "#..#.###...###.." };
        assertEquals(241, islands.beachLength(kingdom));
    }

    @Test
    public void case23() {
        String[] kingdom = { "#...#...#.####.####.", "..#####.###.##.##.#.", "#.....#.##...##.###.", ".#.#..##..###..#.#.#", "##..........#..###..", "....##..####.#.##...", "#..##.###..#.#.###..", "..##.#####.####.#.##", "...#####...#.##.#..#", "#...###.#.#.########", "#.#.#.###..#.#.##..#", ".####.#..#...##...##", ".#.#.####.#...###...", "##.#...#.###.##...##", ".###.#..###..###..##", "##.##.##.#..#.......", "##..####.#.#.##.#..." };
        assertEquals(461, islands.beachLength(kingdom));
    }

    @Test
    public void case24() {
        String[] kingdom = { "####..#.##.###..##..#", "#.###.#.#..##.....#.#", "#.##.#..###.#.###..##", "#.#.#..#.##...#...#..", ".#...##.#.#...#...###", "#......##.##.#.#.####", ".#########.......#.#.", "..##.###...#.#...##..", ".#..#..##...#.#.#.##.", "###...###...##.#.#..#", ".####.#....##...#####", "#.#...##..##..#..####", ".###.##.##..#.#..#..#", "#..#..#.....##.#.#..#", ".###...##.##.#.#.#.#.", ".###....#.###.......#", "#.###.###..#..###.###", "...#.##.#..###.##.#.#", "..#.##.....#.#.#####.", "#.#...##.###......##.", "....##.##....#...#..#", "..####..##.#..####.##", "###.##.#.#..##..#####", "###.#...##....#.#.#..", "..#.#..###.#.###...##", "...#..#..##..#..#...#", ".#.#.#.#...##....##.#", "#.##.#..#.###.......#", "..#....##.#...#..##.#", ".###.#.###...##.#.###" };
        assertEquals(915, islands.beachLength(kingdom));
    }

    @Test
    public void case25() {
        String[] kingdom = { "##.###..#..##.####...#.#", "#.###...#.###....#....##", ".###..#.#...#.##..#####.", ".##.....#.#.##..........", "#######.###..##..#######", ".#...#.##.######.#.##.##", "####...##..#.#.#..#.....", ".###...###..####.#.#.#..", ".......#.##....#####.#.#", "###....####.#..#..#....#", "#...###..#..##..#..#....", "#.###.###.#.#..##.####..", "...##.#.#.##.####.###.#.", "####.#.#...#.#.#.....###", "#.###.###.#.#.........##", ".#####.#....#.##.###.#.#", "#######...#.#..##...##.#", "###.##.#...#..###..###..", ".##.##.##..##.#.#.#.#...", "....##.########.###..#.#", "#..#.#...####.#.##.##...", ".#####...#....#...#..#..", "...#...####..##....###..", ".#.#..##..###..#..###.#.", "..#.#....#....##.####..." };
        assertEquals(816, islands.beachLength(kingdom));
    }

    @Test
    public void case26() {
        String[] kingdom = { "###.##..###.#..##..#...#.#.#", "..#...............#.##..##..", "####.#..###.##.#.#...####.#.", "#.####.#...#.#.#.##...#.##.#", "..#.#..##.#..#....###....###", ".####..##...#.####.#..##.##.", ".#.#.###.####..##..#.###....", "#...#.###...#####.#..#...###", "##.#..##..#.....###.#..#####", "##.#.#.##.####.##..##.###..#", "#....##.##....##.#.##.....##", "#..###..##..##.###.#..#.##..", "..###..######...###.###....#", "##.##.#.##..#.###.#.########", "#....####..#.#...#..########", ".###..#.##.#...##.###.##.##.", ".###...##.##.###.##.#....#..", "..#.###.####....##..####.##.", "#.##..#.#..#.#....#..#######", ".#..#######.#....##.....####", ".###..##..#.##.##..#.####.##", ".#.##.#.####.####.####.#....", "#.###...#.###...#.##.#.#.#..", ".....###...######..#...#..##", "#.##.#.#.########........#..", ".#.#.###.#.##########.##..#.", "###.#..#.#....###...#..#.##.", "..#...#.##....#...#.#..#..#.", "#..##..#..#.#....#...#...##.", ".#.###.##.#.##..##.#..#..##.", "#.##.###...###.#.#.###..####", "#..#..##.#.#.#.#.######.#.##", ".....##..##..#.##..#.#..###.", ".###.##...#...##....###.##.#", "#.#....#....##.#.##.##....#.", "....#...#.#..###...#..###...", ".##..##.......##.##.##.###.#", ".#..####....####....#.....##", "..#######.#......#####...#.#", "###.#######.##..##.###.#.###", "##..##.##..#.#.#.#...######.", ".####.##...##...#.###.####.#", "######.##.#...####..#.#.....", "####...#....#....##..#...#.#", "#.##.#..#....###.#..##.##..#", ".#..##.###.#.#.##.#####.#.#.", "..#.....##...#.###..##...#..", "..#..##.#...##....###..####.", ".#.####..###...#.#.#.#######", "..##.###.###.##.....##.#...." };
        assertEquals(2051, islands.beachLength(kingdom));
    }

    @Test
    public void case27() {
        String[] kingdom = { "####...#####....#####.####", "#.....#.#..#.##..#..#..##.", "...###.##.####....####.##.", "....###..#.#.##...#..#.#.#", "##.#.....#...#...##..#.#.#", ".#.....#.###...#.##.#...#.", "#....####.#...##.#...#..#.", "...#####.##.####..#..###..", "#.#.#.##.#...###.##....#..", "#.#####.##.#####.#..#.##..", "#.##.##.#..#..#.#.#..#.#.#", "##.#...#..#..######..####.", "####...#.....####.###.#...", ".#####...#....#...#.##..#.", "#.#.##........###..#..#.#.", "...#...####.#.#.###..###.#", "#...#.##..###..#.##.....##", ".#..##..###.#.##.###..#...", "##.##...#....##.##.###..##", ".#..####..#.#..#..#.##.##.", "...#.##.###...######..#...", "##..###...#.#.#.##.##....#", "###.#...###...######.###..", ".#.##.#.....#..#####..#...", "..##..#..##.#......#..####", ".##..#.##..###..###.#.##.#", "#....##.#.#.#.######.#.#.#", "..#####.##.###.##...#..##.", "##......##.##..#..##.#.#..", "#.#...#.####.##...##..#..." };
        assertEquals(1123, islands.beachLength(kingdom));
    }

    @Test
    public void case28() {
        String[] kingdom = { "...###..##.....#.######...#.....#", ".######.##...##.#.##.#....#.#####", ".#....##..#...#.#.##..##..###....", ".#..##.##...#...##..#.##.#..#..##", "##.##.#...##.##.###.##.##..##.##.", "#.##.#.######.##.####...#..##..#.", "....#..##.#.##.#.#####....####.##", "##.######.#.####.###.##...##.#.#.", "#.#.##....#...#.###..#####.......", ".#.#...##.##.#..##..###.#.#..##..", "###.#.#.#..#######.#..###.#....##", "..#.#.#.#######..######..#.#####.", ".##....#.......##.#.###.####.##..", "#..##..#..##.#..#...#.#..###.####", "..#..#..#.##.##....#.#.##.#......", "..#.##....#.##.######.######.#..#", "####.##.#.#..##.#...#.#.##.#....#", ".#.#.##..#.##.....##.#.#.#.#....#", "...#..##.##....#...#...###.....#.", ".....#........#.######...#####...", ".....#.######...#.............#.#", ".....####.....####..##.###.#.###.", ".####..##.##.#..#......#.......##", "....#.##.#......###.......#..##..", ".###...#.#.##...####..##.#..#.#..", "..###..#.#....#..#####..#..#..#.#", "#....###.#...###.####.##..###...#", "#.#.#..#.#.###.#...#..#####..#..#", "##..##.#..#.#.###.####.##....#..#", "#.....#.#.###.###....###...##.###", "#..####.##.#.#..##....#..##.#....", "#.##..#.#..#.####...##...#..#..#.", "..#..###....###.#####...##.#.#..#", "##.#.#.###..#...##.#.#..#.#####.#", "##....##..#.#.#..#...######.###..", "..#..##.#####..#.#.#..#.##.#.#...", "#...####..##.####..#.#...#.##..##", "#...#..#.#..#.#.###.##...#.##..##", "#.##..#.##...#.###.##..#####.#.##", "#.#....#.###......#.#.##..#####.#", ".#...#.....##..####.##..###...#..", "#...##.##..##.#.##..#####.###...#", "..#..##.####.#.#..##...###.#..#.#", "#..#.####..#.#..##.##########....", "#...#...#...#.##.#####...##.##..#", "....#.#.#...#.##..#.#..#.#.###.##", "#..#.##.#.##..#...#.#...##....#.#", "#..#####....#.#.#..#######.#..###", "###.##.##.####.#.##..#.###.#....#", "#...##..#.##.##.#.##..#...#.#.##." };
        assertEquals(2421, islands.beachLength(kingdom));
    }

    @Test
    public void case29() {
        String[] kingdom = {};
        assertEquals(1579, islands.beachLength(kingdom));
    }

    @Test
    public void case30() {
        String[] kingdom = { ".....###.#...###.####.##", ".##....####....#.##.#.#.", "..#..#..##.####.###..#.#", "#.###.#.#....#..#####.##", "##.##.#....##.#.###.....", ".##.##..##.#..#.##.##.#.", ".#.#.###.##..######.##..", "##..#.#.#.#...#..##.##..", "#.###.##...#...##.###...", "###...##.##.###.#.##..##", ".#.#.#.#...######..###..", "#.#.#..##..##...##..#..#", "#.#.....#...###.##..#..#", "..#.##..##....#####.####", ".#..#...#...###.####..##", "#....#.#########.###....", "#.#.#########....###.#..", "###.#..##.####.##.#...##", ".#..###....#.##.##.###..", "##..##....##.#..#..#.##.", ".#.####.#...#..#.#.#...#", "...#..###.#..#.##...#.##", "#.#.#.##......#...######", "##.#####..##..##.#.#..##", "...#.#.#.###....###.....", "#.###..#...#.#.##.######", ".#.#########......##.##.", "#..#..#.#.#..###...#..##", "#.#..#.#.##..####.#..#.#", "###.#..##..##.#..#.#...#", ".#####..#.#.#..###.#...#", "..#..##..#..#.#.#.......", "..###..##.#...##.###....", "#...#....##.#####.######", "##.#.####.##.#...###.###", "#.#..#.##.####..###.##.#" };
        assertEquals(1242, islands.beachLength(kingdom));
    }

    @Test
    public void case31() {
        String[] kingdom = { "..#.##.###.....#.", ".#....#.###..#...", "##....##..#.#..#.", "#..#..#..##.###.#", "#..###.#...#.#...", "##...#.#.##.##.#." };
        assertEquals(135, islands.beachLength(kingdom));
    }

    @Test
    public void case32() {
        String[] kingdom = { "...##.#..##..##.###", "#.#..##.####.###...", ".#.######.......#..", ".....#......#.#....", "#####.#.....#..##..", ".#.#.#.#...##..###.", "####..##..##.####.#", "...###...##..#.#.#.", "#.##..##..###..#...", "....#..##....##...#", "...###...##.######.", "##.....###.##...#.#", ".....##.##.#.#.#.#.", ".#.##...#.#####...#", ".#.###.##.......#..", "#...#..##.#####.#..", "..##...#.##..#####.", ".##.###......##..#.", "..##.##..#....#..##", ".....#..#..##.#.#.#", ".##.....##.###.#..#", ".######.#......##..", ".#.#.#.#.#####..#..", "##.###.....####...#", ".###...###..#...#.#", ".####.....####..##.", "..#.#..#.##.#.#.##.", ".#....#.##..####.##", "###.#.#....#..##.#.", "##.#.......##..####", "..#..#.##.###.#...#", "##.#########.#..#..", "....###...#.#..##..", "......#..#.#..#.##.", "##.##...#.#...#.###", "#..#..####.##.....#", "#.##....##.......#.", "#.####.#...###.#.##", "#.#..###..#.#.#....", "#....##..##..#.#..#" };
        assertEquals(1094, islands.beachLength(kingdom));
    }

    @Test
    public void case33() {
        String[] kingdom = { "#...#..#.#.###.#.#.#..###.#", "..#...##.####..#..##...#.#.", "###..####.####.#####.##..##", "..#.#.#.#.##.#.....##.#.###", ".#######....####..##.....#.", ".#..##..#.#..##.#.#..##.#.#", ".##..#.#....#......#....##.", "#.##.#..###.#..#.####.#..#.", "...##.##....####....#.###..", ".#.##.#.#....###..#..#...#.", "###..#....###..###...#.####", "....###.####.##...#.#.#.##.", "...#.#.#.##.#.#.##.######.#", "#....####.##.##.#.#.##.##..", "..###..#..#..#.#...#.#...##", "##....#..###.###....##...##", "##.#.#.#.######..#####.#.#.", ".#....##.##..#.###.#.##.###", ".#.#...#.#..###....##..##.#", ".#.#..#####..####.#.####..#", "##.###.#.#..########.#....#", "#...###..####..##.###.#.##.", ".#...#.###.##.#..##.#..#...", "...#..###....#.#.#...#.....", "..########.##.##.#..#...###", "...#.#.##..#####.#######..#", "#####.#..####..#.#.#.#.#...", ".########......##.##..##.##", ".##.#.....#.##........#..##", "#...#.####.....###.###.#...", "####......#.#..###.###.....", ".##.#.###..#.#.#.#.##....#.", "#.#.##.....####...#.....##.", "###......##.####.#.##...##.", ".#.####.#..#..#.##...#..#.#", ".#.#####.#.##...####.###.#.", ".##..##.#...#..#..##.#...#.", ".##.#.##.###...##.#####.###", "####.###.##...##.#.....#.#." };
        assertEquals(1579, islands.beachLength(kingdom));
    }

    @Test
    public void case34() {
        String[] kingdom = { ".......###.", "..##.##.###", ".#.###.#..#", "#...#..###.", "##.##...#.#", "#.###...##.", "##....#...#", "...#.##..##", "#.##.#....#", "#.#...####.", ".####.##.#.", "..##.#....#", ".....###...", "#.#..#.##.#", ".#..#..####", "#..##...#..", "#.#.#.##.##", "....#..###.", ".#.#...#...", ".#..##...#.", ".#..##..##.", "#.##.......", ".....##..##", "###..##....", "#.##.#..###", "....#.#.#..", "......#####", "#####......", ".###..##.##", "...###.#.#.", "...######.#", "#.....#####", "...#..#.#..", "...#.##..##", "###.##.####", "##.#.##....", "....#.#.#..", "#...#..###.", "...#.##..#.", "#.#..#..###", "..##..#####", "#.#.###....", "####...#.##", "#..#######.", "#..##...#.#", "...#...##..", "##..#..#.#." };
        assertEquals(736, islands.beachLength(kingdom));
    }

    @Test
    public void case35() {
        String[] kingdom = { "..#..##...##.....##.#...###...##.", "#####.#.#..##....##..#..###.#.##.", ".#.........####.#..#.###.#..##..#", "#.##..#.#.###.....##..##..######.", "##.....##.#.#..#.####.#..#.#....#", "...######..####..#.###.#.##.#####", "#..#..##.#.#..#######.#####..##.#", "#..#....#.#..##.#####.#..#...###.", "....###..#..#.#.#..#######...#.##", ".....#....####..###..#.#.##.###..", "#.###..####....#.###...##.#.#..##", "..##.####....##.###.#.#.#.#......", "##..####.#...#.....##.#....#..##.", "##..#.#..#.#...###...####.#...###" };
        assertEquals(644, islands.beachLength(kingdom));
    }

    @Test
    public void case36() {
        String[] kingdom = { "#..#..#..##..#..#", "##.###.#..#....##", ".#..#..#.########", "#..#.##..#.#..#.#", "##...####.#..#..#", "###.##.#..#..####", ".#.....###..#..#.", ".#.###..##....#.#", ".#...###...###.#.", "#.#..#.###...#...", ".#...#..#.#....#.", "..#...##..##.#.##", ".#.#..#....######", "..#.#########...#", ".#..###.#.#.##.##", "#.#######..######", "##.#...##.#.....#", ".......##....##..", "..#.#.##.#......#", "####....###..###.", "###.###..#####.#.", "#...#...##..##...", "##.#.#....#.#.#..", ".##.#####....#.##", "##.....#..#######", ".#...###.....#..#", "##..#..##..#..#..", "##...#.#.#.#.###.", ".###.#.#.#..###..", "...###.#..#.#....", "#..#........#.###", "##....#.##.##...#", ".#.###....##...##", ".#..##.#..#.#....", "#..#.##.#.#....##", "..#..#.#.#...###.", "##...##.#..####..", "...####..##.###..", ".###..##..####.##", ".####...####.#..#", "..####..##.######" };
        assertEquals(1004, islands.beachLength(kingdom));
    }

    @Test
    public void case37() {
        String[] kingdom = { "####", "....", "...#", "..##", "###.", "....", "#..#", "....", ".#..", ".###", "#.#." };
        assertEquals(49, islands.beachLength(kingdom));
    }

    @Test
    public void case38() {
        String[] kingdom = { ".##.#..###.##..###.#..##..##", "..##.#..#..###...#........##", ".#.#.###.#.#.#########.###.#", "##...#..#####..##..###..#.#.", "##..#####..#.##..#.#..##.###", "#.#..#.###.#..###.......####", "..#...##.......#.##.####....", "#....#..####.#.##.....#..#..", "..##.#.#..#....##...##.#.###", "#.###.###.#.#..##########...", "###.#..#.###.###.####....###", "..#######.#...#.###.#..#.#.#", "####...##....##..#....#.#..#", "#.##...#..#.#....#..#..##..#", ".######....##.#.##.#.#....##", "#..##...#.#..##.....##..#...", "#..###.#.....#####........#.", "...###.#.#....##..##...#..##", "..#..####.##.#....##..#...#.", "#.####.......#....###..#..#.", "...##...##..#.##..#.#....#..", ".#...##.#..##.#...#.#.....##", "#...##.##...##..##...#..#.##", "..#.####...####....####.####", "....##.#.###.#........####..", "...#####...#####.####.#..#..", ".#.#.###....####.###.##.#...", "###..##..#.#.#######..##.#.#", ".#..##.....##.#..###.#.#.##.", "##....###..#.#...#..##.###.#", "..####...#..##.##.#..###.##.", "###.###.##.....#.......#..#.", ".##..#..##.#.##.#.#..##...##", ".#.#....######.##.....#...##", "..####..##...##.#...####..##" };
        assertEquals(1383, islands.beachLength(kingdom));
    }

    @Test
    public void case39() {
        String[] kingdom = { ".###", ".##.", "#.##", "...#", "##.#", "#..#", ".#.#", ".#..", "....", ".#.#", "####", "####", ".##.", "###.", "#.#.", ".#.#", "#.##", "#.##", ".###", "##.#", "####", "...#", ".#.#", ".##.", "####", "#.#.", ".###", "#..#", "..##", "#.##", "..#.", ".#.#", ".###", "....", "#...", "#..#" };
        assertEquals(171, islands.beachLength(kingdom));
    }

    @Test
    public void case40() {
        String[] kingdom = { ".####..##....###.#..#...###.##.#.#.##..", "##..#.#..##...###..##...#..#.#.#..#....", "..#..#..##..#####..#.####.#..#...###.##", "##.#.#.###...##.#..##...#...#....##....", "...##...##.##.##...###.#.#####.....#..#", "...##..###.#..#.##...#..#.......#..#.#.", "###..#.#..###.######.#.####.##.#.##.##.", "...#...#.#..###...####..#.#######.###..", ".....#.###...#.#..#.#..#..##..#.....#.#", "#..#..##.##...#.##.###.##.##....#...#..", "...#.##.###...#.........#.......##.##..", ".#.....##..####.#..##.##.##.#.##..#####", ".###...#####.##...#...#.#....#.###.#..#", "#.#....#.###.##.....#.#.####....#...#..", "##......###.....#..##.#.##..##.#..##.#.", "#..#.###...####.#..###.##.#.##..#####.#", "..###.###.#.#.........####....####.##.#", ".##..#........#......##.#####.##.###...", "#..#.#.#...####..#...##.#..##.#.###.###", ".###....#....###..###.###.#..####.#.#.#", "##......##..##.##.#.#.##.######.#.###..", "##..##.##.#.##.##..##.##.#.#.#.#.....##", "##.##.#...###..###...#.#.#.##..###...#.", "#...##....###.###..###..#...####.#.#.##", ".#.####..##..#####...#..#.#.#...#..##.#", "...#...#..#.##.#.##..#.####.#.##.#.####", ".....#..#...####..##....#.#....#..##.##", "...#.###...##...#..##.##..##....###.#.#", "#.#.....#.##....#...#......#..########.", "....#.#.#...##..##....#.#.#..#.....#.#.", "..##....##.####.#.##..##.##..#....##.#.", "#####........#.####.####....#.##.#..##.", ".###..##.####.#.##.#....##..#.##.#..#..", "..#.####.####..#....#.#.#....####...#.#", "##..#...#.#.##..#####..#...##.#..##.###", "#.##.#..#.###...####.#.##..##...#.###.#", "#.##.......#...####.##.#.##.#.####.####", "...###.#...######..##.#..#.#.###.##.##.", ".#.#.#..#.#...#.....##..#...##.##...#.#", "#.#.#.##.#.#.#..#..#.###......##.#.....", "#...####.........####..##.###...#.#..#.", "#....#.......#....#.#..#..#####..#....#", "##..####..#.#........#.##.......#.#....", "......#..#..###.##..#...#.#.##......##.", "#....#.###.....#.#.#####.#..#..#...##..", "#....##..#.#.##...##..#.#...#.##....#..", ".####....###.####.....###.##..#....##..", ".#.#.#.##....##...#..#.#.#...#...#.#.##", "#####.##.#..#....####..##..#....#.#.#.." };
        assertEquals(2771, islands.beachLength(kingdom));
    }

    @Test
    public void case41() {
        String[] kingdom = {};
        assertEquals(1829, islands.beachLength(kingdom));
    }

    @Test
    public void case42() {
        String[] kingdom = { ".##....#...##..##.##.##.####..", "#..###.#...#.....#.#.#####.#..", "..###..##.##.#..#.#.#.#.######", "#####....####.#.########..###.", "..#########.......#.###..#####", "..#######.##...####..####.#.#.", ".#....#...####.##..#..##..####", "#.#.#.#.##.#####....#..#.###..", "..#.#..#.##..#.#...#.##......#", "..#.##..#.###.#.##.#.###..####", "..#.####.#......###..####.#.#.", "##.#.#.#...#..#.####..###...##", "#.##..#####.#.####.....###.###" };
        assertEquals(529, islands.beachLength(kingdom));
    }

    @Test
    public void case43() {
        String[] kingdom = { "#.###..###...#..#.#..#....#..###..#", "..#.#..#.###.###.....###.##..##.##.", "#.#...#..#.#.#.#.##..#####.###....#", ".#..#..##..#.#.#.#.##....##.###..##", "#.#..#.#..##.######.#......#..#####", "..#.####..###.##..#.###.#.###..####", ".#..#.#.##.#...########.####...##..", "###.#.#.#.##.##..####....#....###.#", "....##.#.###.##.##.#..###.###.....#", ".###...#..#....##.##....#..##....#.", "..#.##.#..##.#...#..###.....#...##.", ".##..##..#.#.####..###....##......#", "..###.##.##.##...#.#.....####.#.#..", ".#...##.##....#....#.##.#..###.###.", "..#..###..##..#.#.#..##.#..##..#..#", ".#.#..#.#....#.##.#.#...#...#.##..#" };
        assertEquals(804, islands.beachLength(kingdom));
    }

    @Test
    public void case44() {
        String[] kingdom = { "#.##.#.####.#", "####..#...#..", "##....##.####", "#.#...##.###.", "..###..##....", "#.###...#####", "..#.....#.#.#", "###.##..#.##.", "##.....##.#..", "..#.###..#...", ".#...#...###.", "##...#.####.#", "#.........###", "#..#.#..#.###", "######.##.#.#", "...#.#..##.#.", "...#.###.##.#", "...#.#..#....", "########.####", "..#..##.##..#" };
        assertEquals(363, islands.beachLength(kingdom));
    }

    @Test
    public void case45() {
        String[] kingdom = { "...##.##...##.###.#.#.##.##", "#.#......##...###...#####..", "#.#.##..###..#.#....#.##..#", "....####..###..#..#..#.##.#", "#.###....#####.###..#..#..#", ".#..####.#.##..##.##...#...", "#..###.#.########...#....#.", "###...###..#..#...###.#####", "#.##..#..###...##.#.##....#", "##.##..##.##..#.##.#.####..", "######.##.......#.##.##.##.", "..###.##....###.#.###.#.##.", "#.#..#######.#.#...#.......", "##.###...##..#........###.#", "..#..##.##..#..###.#.#.#..#", ".....#..#..#.###.#..#....##", "#.....###.##...##.#...###..", ".#.#..#.#.####...#.####.#..", ".#...##########.....#.#####", "##..##..#...#.#....##.#.#..", ".#..##...##.#..#...##.#..#.", "..##.###.###..#.#.#.##.#..#", ".#......###...##.##...#.###", ".#####.##.#...#..#.###....#", "##.#...#..#####..#....#.###", "..#.##.#..####.##.##.##.##.", "###.#.##.##...###..##...##.", "#.#..#.#####.##.##.##...##.", "..#..##.#.###.#..####.#.##.", "..##.#.###.#...#...##...#.#", ".#.#.#####...###....#.##.##", "###.#..#...##.##...#.#...##", "#####.#..........##....#.#.", "#..#......#.#..#.#.####.#..", ".#...#..#...##....###.#.#.#", "##......##.###..#.#.##.#..#", "##.####...#####.#####..##..", "###.######...#.#.#.##....##" };
        assertEquals(1492, islands.beachLength(kingdom));
    }

    @Test
    public void case46() {
        String[] kingdom = { ".###.###", "..#....#", "....###.", "..#.###.", "##...###", "#..###..", "##.#..#.", ".#...###", "....##..", ".#.#.#..", "##......", "#.#..#.#", ".##..#.#", "..##..#.", "#.#..#..", "#.##.#.#", ".#..###.", ".##.#.#.", "#.#..###", ".#.####.", "####.##.", ".##.##.#", ".#.###..", "....##.#", "....#.##", "#...###.", "#....#..", ".####.##", "#..###..", ".#..#...", "....#.#.", "...#...#", "..#.#..#", "#.#.###.", "#######.", ".#...###", ".#.##.##", ".####.##", "#.#....#", "#.#####." };
        assertEquals(434, islands.beachLength(kingdom));
    }

    @Test
    public void case47() {
        String[] kingdom = { "#.##.#.##..#..##..#..#.##...", "##.#..###.....#..#....#..###", ".#..##.#..#..###...#.###.###", "##..##.######.#...#.#.#.#...", "..#.#..###.##.#.###.#...#..#", "####..##.###..#..#..###.##.#", "##.#..#.#####.#..#.#....#.##", "####.##..##...#.....#.#.#...", "#.#.###.###.#.#####.####.##.", ".###.###....#.###....#.##.##", "##...####.##.#..#..#.##...##", ".#.#..#.###..#.#####.#...#.#", "###..#.#.##.#...###...###.#.", "##.###...#####.#...#.####..#", "##.#####...##....#...#..##..", ".#.#.####...##.####....##...", ".#.....#.#.#.#..#.##.#....##", "######.######.##..#.#..#.#.#", ".....#..#####.##.####....###", "####.....####...###..###.#..", "#.###..#.####.#...#.....####", "#.#.#.##.#.#########...#....", "#....##.###.###..###.##.#.##", "##.#..####.....###.....#####", ".#.#...##...####.#..#..##.#.", "##.#.####.#.#...#..###..##.#", ".#..#.#......#..#.######...#", "#...#.#.#.##########.#.####.", "####...#.#..####....#.#.#..." };
        assertEquals(1167, islands.beachLength(kingdom));
    }

    @Test
    public void case48() {
        String[] kingdom = { "...#..####.##...#....#..#.###..###.##.##..##.#..", "#..#.#..###..##.##..##.#.##...##..#.###......#.#", "...##...#..#.#.#########.#.#########.##..#####.#", ".#....##..#.##.###...###..###.##.#.##...###.#.#.", "#..###..##..#.#..#..#####.#..#######.#.##...##..", ".#...#.##..##.###..#.######.##.###.##.#..#..####", ".##.###..#.##..#.##.#.#...#..####..#.##.......#.", "##.###..#.##.#..##.#......#..#########..###..#.#", ".##.#######.#..#.#..##.#.##.#.##..##...#.#.#.##.", "#....#....#.#..####.....#.##.#.##.#.###.#..#####", "###.####...####..##.###.#.#..##...##.##...##..##", "##.#.#.#.#......#...#.....##.#.#..#####.###.....", "##..###.##..#..#..##.#.####.##..##.##.######...#", ".#.#..####.##..###..#.#..#..#...#..#..#.##.#.#..", ".#.#.#.#.####.#.####.##..##.###...##..###.######", ".#.####..#.####...#..#..#...##......#.##...###..", "#..##.##..##..#.##..#.###.#..####.##.......##...", "#.#..##.#.##..#####.#...####...##....#.###..##..", "####..#..##.#.##.#.#..#.###....#.#..####...#.##.", "#..###.....#..#####..##...###.##.##.#.#.#.#.###.", "..###..#.#.#.##.#####..#.##..#....#.#..#.####.#.", "#.........#.........#####.#..##.#.#..#....###.#.", ".#...#...#..#..#.#.##....###.####.##..##...#.##.", ".##..#..#..#.#.#..#.#..######..#####.#.###.####.", "###..####.....###....##.#.######...#..#..#.#.##.", "#..####..##.#..#.#...###..#..#.#....#.....##.#.." };
        assertEquals(1820, islands.beachLength(kingdom));
    }

    @Test
    public void case49() {
        String[] kingdom = { "#.#.#.#####...#.#...##.#.", "##...###.###.#...#...#.##", "##...#.###....##..#...#..", "#......#...#.##.#..###.#.", ".#.##.##.....#.#....##.#.", "#..#.#......##.###..####.", ".###.##..#.#..#.#....#.##", "#..#.#####.#.....#.##....", "###.####...#..#.#.#.#....", "#.#..###.##.#.##.#......#", "##.#####..##.##...#...#.#", "#...###.##..#....##.#.###", ".#..##..####.#..###.#..##", "#....#..#####.#...###..##", "#..######.#..#.##.##.###.", "##.####.##...###...##.##.", "..####.#..#.#.##.#.###..#", "##...##.#.#.#.#..#######.", "#......#.#.....#....#####", ".##.#.####.#..#..#.##.##.", ".###...#.###.##..#####...", ".....##.###..#.####...###", ".#..####.##.##.#..#..#...", "#.....#.##.......#.......", "##..#..#.#.#..#...####.#.", "..##....##.#.###.####...#", "####..#......###....#####", "###..###...##.##.#.##.#..", ".#...####..##.##.#.##.#..", "...####....#.......##....", "..###.#####..#.##..#.....", "....##...#.#.#.####..####", "##.##.###...#..##...###.#" };
        assertEquals(1126, islands.beachLength(kingdom));
    }

    @Test
    public void case50() {
        String[] kingdom = { ".#..###.#.#..#.##.#.####.######.", "#.#....###..######.#.#..##.#..#.", ".#.####.#..#....#.#..#...##.#..#", "#...#.##.#.###.#####.#..#....##.", "##...#.#.#...#.#...#.##.#..####.", "###.####.##.#.##..##.....#.#.###", "#.....##.###..#.#..###....###..#", "#.#.####.######.#...#####..##.##", "#.##...####.#..#...#...####..##.", "###.####......#...#..##..#####..", ".#.#.######.#.#..#.....##..####." };
        assertEquals(494, islands.beachLength(kingdom));
    }

    @Test
    public void case51() {
        String[] kingdom = { "##...######", "##..###.#.#", "..#..###..#", "##.##.##...", "..#.#..#...", "#...##..##." };
        assertEquals(78, islands.beachLength(kingdom));
    }

    @Test
    public void case52() {
        String[] kingdom = { ".#..##.....##.#....#.#...###..", "....##......##.##......####.#.", "###.#####.##....#..##.....#.##", "....####.##.##..#.##..#.######", "...#...#...#.##.##.####.#...##", "####.##...####.###.....#.#.##.", "###..#.##..#..#.#.#.#.#.#..###", "#####..##..######.#.##.##...#.", "##.#..###....##...######...#.#", ".##..##.#...##.##...#.###.##.#", "..#..######..#..#.######...#.#", "#.#..#..####.##.##..#.###.#...", ".##...##.#..##.#....#.##.#..##", ".#.#.#...#.....#..#..##.#.#.#.", "#.###....#.#.#.#.####..###....", "....#...#...###...#.#....#....", "....#.......##...###.#.##.####", "..###.#.#.###.....#..#..###.##", "###..##...##.#....##.##...###.", ".#####...###..####..##.#..#..#", "....##.#.#....###..###.####.#.", "##..##....#####........#......", "........###..##.####...#..#...", "..###..####.....#.##..#..#..##", ".###.#.#..#.#####.###.#..##..#", "###.#...###.##.##..###...##.#.", "####.......#.#####....##.###.#", ".#..#.....#.#..###..#...##.#..", "##.#..#.#.##..#..###...#####..", "######.###..#.##.#..###.#...#.", "#.#.###.#.###...#.##.#..###...", ".#...#.##...#.....#.##....##.#", "###.##.######..#.....#.###.#.#", "##...##.##.#..#..#.....#.##...", "#####....#######.#......#....#", "###..####.#.####...##....##.##", "..##.###..##.....##...#.##...#", "#..#....#....#....#####...#..#", "#.##..#.###.####.#.######...#.", "..#.#.##...#...#.###..####..##", ".###..#.##..##..##.....#.#.##.", ".####.#.#.###.......#.........", ".######...##...###.###.#.#...#" };
        assertEquals(1812, islands.beachLength(kingdom));
    }

    @Test
    public void case53() {
        String[] kingdom = { "...##.#.###.#.###..##.#..#.#.###.###......#.##...", "#.#.#.##.#.#...##....#.....#.####.#..##..###..#..", "#..#.##..#...#.#.###...##.#.##.#.#.#.#...........", "..........##..##..##.#.#...#.....###.#..#.##....#", "#..####..#.###.##.#...##.##.##....#.#..#..##.##..", "##.#.##....###.#.#..#.#.##...#######..##.#..#.#.#", "#####..#......####.####.####...#####.##..#.#..#.#", ".....################...#####...#..##.##...#..#.#", "##.#......#.#...###.##.#.##.......###.##.#.##.#.#", "#.##.#...##.#...#.#..##.##....#....#.......#..###", "##..#.##..#.###.##.#.##..#..#..#.#.##..#####.#.#.", "...##.....###.####.#..#.#####.###..##.#..#...##.#", ".##.#.##....#...#..#...#..###..#..#..#..###.#..#.", "#####.###.#######..#.####.#..#..#....##...####..#", ".#...#.....##....##.#...##...#..#....#####....##.", ".#.##.#.##..#...#..#..##.##..##.#.#....#####.#.#.", ".#.#........#...#..#....###..####..##..##.##.#.#.", "##.####..#..######.#.###.####.##.####..##########", "#..######....#....##.#.##..#.######..#.####..#..#", "#.....####..#.#....#.#.#...###.#.##...##.##.###..", "##....######.#.#########...##..#.#.#.####.....#.#", ".##..#.#.#.##.#.#..###....###.#...#.####..###..#.", "##..#####.###......##......#.##..##...######...##", ".##.###.###....#.##.###...##..#.#.#.....###.####.", "#.##.........######..##....#.##.#.#.##.###..#.#.#", ".#.###..###.##.#...#..#..##..#.##.#..#.#.###.....", "...#.###.##.##...#.##.#..#...#..#.#...##...####.#", "..####..#..##.#...#..###..##.#..##.###.##.##.#.##", "...#..#.#.#.#.####...#####.#..#.#...#.##.##.#..##", "#.#.#.#..##.#.##.##.#.#.###.####.#.####.#...##..#", "#..#...#.##..##..#..####..#..######...##..#.##..#", "#...#.#.#.....####.....###..###..#.#..#.#####.#.#", "##...##...##..#.##.#.#.###.....#.#..#..##..##...#", "##.##..#.##.#.##..#...###.######..#.#....#....###", "..###.#.####.#..##.####..##.#..#.#....###.##..#.#", ".###.##.#.##..#....#..#.#..#.#....#.##.###.##.##.", ".##.##.#..###.#.###.####..#..###..#####.#..#.##..", "#.....#.##.#.##.####.#.##..##...#......#.##.#..##", "#..##.###..#.#.#.##.....##.#####.##.#.####..###..", "#.#.#.#....#####...#....#..##.##..#.#..##.#.....#", "..##...##.###.#....###.####.##.#..#..#...###..###", "...##.##.###.###.###.......#.####..###.##..###..#", "#....#.#..#.#.##.####.#.#.......##.......####..#.", "#...#.#.#...#..#..#.##....###..##.#.#####.###...." };
        assertEquals(3199, islands.beachLength(kingdom));
    }

    @Test
    public void case54() {
        String[] kingdom = { "..#...###.###...#...#..##.#...#..#", "####..#.....##.#.....#.##...######", "###......##.#####.###.###..###..#.", "#...#.######...#...##..##..##....#", "#.#.###.###..####..#.###.#.#..####", "#..#.######.....###.####.#.##...##", "##..#.#.##..##...#..#.######....#.", ".##.....#..#.##.##.#.....#####..#.", "####.#.##.##.###..##..#######..#..", "...#.##....#..###.#.#.#.##.#.....#", "#.....#####...#..#..#.#.#...######", "##.######.########.....##.##.##..#", "#.##.##..##...#.##.#..##..####.###", ".###..##..#.#.....####..#.####..##" };
        assertEquals(671, islands.beachLength(kingdom));
    }

    @Test
    public void case55() {
        String[] kingdom = { "#..#", ".#..", ".##.", "...#", "..#.", "###.", ".#..", "....", "####", "..#.", "#.##" };
        assertEquals(56, islands.beachLength(kingdom));
    }

    @Test
    public void case56() {
        String[] kingdom = { ".######.#.####.###.#..##..#..#..#", ".##.#.##..####...##...###.##..#..", "#....#...###...##.##.#..#..#.....", "#.#.#...####..##.#..#.#...#.#...#", ".....#.#..#.#....##.#.###.#.#....", "#####.##.###.##.#.##.#.#...####.#", "..###.###.#.###.#..##.....##.#...", "#..###..##..##.#..#.#....#...#..#", "######.#..#...#.#.##..###..#..###", "......#.#......##.#....#.###..#..", "#....#......#.#.#.##..##..###.#.#", "...#####..#####.#...###...###..##", "....##.#.##.#...##.##.#...#.#...#", "..###......##.#..###..###...#.##.", ".##.##.##.###.##......#.#.##..#..", "....###..##...#.#.#....#....#####", "..#.....#.##.....#########....##.", ".###..##..##.#.#..#.###.###.#..#.", ".####..#......#..#.#.#.#.#..##.##", "..#.#..#####...#..##.####.##..###", "..##.#..###.#....##.##...##.#.###", ".###..#...#..#...#..#...#.#.#..##", ".##...###..#.##....##..#.....#.##", "#.##....###.#.####..####.##.#....", "#....###.#..#.#.#..#####.#...#..#", "#..#..########.##..#.#.#..#.#.#..", "##.....#.#.########.#..####.###..", ".#.#.#.##...#.#.#.##........#.#.#" };
        assertEquals(1327, islands.beachLength(kingdom));
    }

    @Test
    public void case57() {
        String[] kingdom = { "##..#.#.#..#....#.###.#.#.#..", "##.....#.#.#..######..#....#.", ".##...#.#.##..##...###.##..#.", "..##..####...#.....###.##..##", ".#...#...#.##..#..###.#..##..", "#...#.#..###....####.....##.#", "..##.##.#.#.##.###..#...##..#", "#..######.#####.##########.#.", ".....#.#.##......#.#.......##", ".####...###..#..#.##.##....#.", "........###...###...###.#...#", ".#...#.#...#.####.....###.#..", "#.#.#..###...#..#.#.#...#..##", "#.......#.##...####..#.#..##.", "####..#.#.#..#......###.##...", "##..##.#..#.##....#..#...#..#", "...#.#.#.#####..##....#######", "#.#.#####....####.###.#.##.##", ".#.####.###..####.#....#.###.", "#..##.####.#.##...###.#.##..#", "##..#......#.##..########.###", "##.##.##.##....##...#.#####.#", ".##.#....#####...#.....##.#..", ".#.#....#..#.#..###...##.###.", ".#.#######.#.....##..###..##.", "#..##.#...#..#..##..##.##.###", ".#.#..#.###..#...###.##..#..#", "...#..####.#.#.#.##.#####..#.", ".......######...#####.#.#....", "#####...#...#...#.#.#..##....", "###.#......###.#.##.###.##.##", ".#...##......#..##...##.###..", ".#..#..##..#..#####..#.####.." };
        assertEquals(1331, islands.beachLength(kingdom));
    }

    @Test
    public void case58() {
        String[] kingdom = { ".", "#", "#", "#", ".", "#", "#", "#", ".", "#", ".", ".", "#", "#", "#", "#", "#", ".", "#", ".", "#", ".", "#", "#", "#", ".", ".", "#", ".", "#", "#", ".", ".", ".", ".", ".", "#", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#", ".", ".", "#" };
        assertEquals(27, islands.beachLength(kingdom));
    }

    @Test
    public void case59() {
        String[] kingdom = { ".....##.###..####.#..#......######.#..#", "###...#.##.#..##..####.#.#.......#.#..#", "..####.##.#.##...#..#.######..#..##.##.", ".#.##....####..#..###.#.#.#..#.##..#.##", "......#..#....#####...###...#.#..#..#..", "#.#.#.###.##.###....##......##.####....", "###.##.#######..#....#.#..###.###..#.#.", "##.##....#.#.##..#....#.##....#..##.##.", ".#..##.....#..#####....####....#.#....#", "..####.##.......#.###...#.#..###.....#.", "#.####.##..###.#..#.#####.##.####...###", ".....#....###.#.##.##....#.##.#######.#", ".##.###...#.#.##.......#.######.##.####", "..#..###.#.#....##.##..#.#.###.##.#####", ".#..##..##.###.#.#..##..##.###..#.##...", "####..#.#...##.....#..#.###..#...###.#.", "##.######...##....###.#.##.##.....##.##", "....#..#....###..#...#..#.##....####.#.", "##.#.####.....####.###...#..##...##.#.#", "..#######..#.....#..#...#..#...#..#..##", "##.#.#.#..##..###.##...##...#.#..###...", ".#.##....#.######....#.#.#...####..#..#", "###....##.##.#.#.#.#######........#..##", "###.####.#####.#######.....###.#.#.#...", "...#######.###.....#...#.##..#.###.#..#", ".##.....#.#.##...#.#.##..#.#..#.#..#...", ".##..##..#.#..#..#...#..#....##..#...##", "#.##.#.#..............#####.#.#....##..", "#.##.#.##..#....#..##.###.##.##.#...#..", "###....#...####..##.##..#.#.##..#....#.", "#..##.#...#.#..#....#..#.##.###...###..", "...###.#.###.#.......##.###.##.#...#.##", "####...###..#.#.#.#.#####..##.##.##.##.", "...####..#..#...##......#.#..#.#....#.#", "..###..##..####.#..#.#.####.......#.###", "##.##...#...#.#.#.##.#..#.##...##.###..", "##.....#.#.#..#..####...##.#..##.#..#.#", "#....###.#..###.##.#..##.##..#....##.##", ".##.##.###..#######...######...##...#..", "#...#...#.####.#.#..##..####.#.##..#..#", "#.#.##.##.##.#..##...##.#.##.##.....##.", "#..#.#......#.#..#.###.##..#..###.#.##." };
        assertEquals(2397, islands.beachLength(kingdom));
    }

    @Test
    public void case60() {
        String[] kingdom = { "##..#.###.#.###.......#..##", "#.#....#.##.###...#.#..###.", "...#.#..#..#####...###..##.", "#.#...#...#...#.##.#.#.##..", ".#..#.###.#####.#.##..###..", "#.###..####.####.##...###.#", ".#...##.....##..##...#.#.#." };
        assertEquals(251, islands.beachLength(kingdom));
    }

    @Test
    public void case61() {
        String[] kingdom = { ".###...#.#.###.#...##.#.#..###.####..##.#...", ".##...###.##..#..#..#......#..#....###.....#", "###.#..#..#..#.##....##.##..###..#.#.#..#.##", "##.#...#..###..#.#.##.##.#.##..#...##..##..#", "#.#....#.###...#..#.#.#..#.######...##..#.#.", "..###.###.######.#.###.##.####.#..#...###.#.", ".##..#.##.#..#.#.#.#..####...##..#.###..#...", "..#.#.#...#...####..###.##..#.#...###...#..#", "#.##..#.#.#.#.####........#.######...#.#..##", "#####...#....####.##.####.##.#....##...#....", "##########.######...###..#..#.#.#..#....###.", ".#..##.#.....#...#.#..#..###.###..#.#.#.###.", "#####....##.##....#.#.#.....####.##..###....", ".#..#.#.#.#....#####.####.##..####.##.#....#", "....#####..#.##..#.####.#...###...##.#.#..##", ".###.#...#..#..#.###...#.#....###..#.#####.#", ".#.#..##...##..##.#.#.#..#.#.....#.#.####.##", "##........##.#.####..#.....##.....#.##...###", "#.#....#.###..#.#..#.#...#.####.#...####.#..", "####....#...#..##...#######.#.##.##...###...", "##.##.##..#...###...##...#..#..#..#.####....", "#...##.######..####.##...#..####..#####..#..", ".##..#..###.#....##....#.#.........##......#", "..##..#.##......#.###.#.#....#.######..#####", "#..###...#.####.#.#.###.....#..#.###..####..", "#..###.###..##..###.....#..#.#.#.#..##.##..#", ".###..####.#.#####..#..#...#....#....###..##", ".###.#...#.#.##..#...###.#.##..#....#.#..###" };
        assertEquals(1782, islands.beachLength(kingdom));
    }

    @Test
    public void case62() {
        String[] kingdom = { "..#", "..#", "#..", "#.#", "###", "#..", "...", "#..", "###", "#.#", ".#.", "###", "...", "###", "...", "#.#", "...", ".#.", "#.#", "###", "...", "##.", "..#", "..#", ".#." };
        assertEquals(92, islands.beachLength(kingdom));
    }

    @Test
    public void case63() {
        String[] kingdom = { "..###.#..#.#.", ".#.#......###", "....####....#", "....#####...#", "####...#.####", ".#..#...####.", ".......####..", "..#.#.#.#####", ".###...###...", "##.#######...", "#..#.##...#.#" };
        assertEquals(174, islands.beachLength(kingdom));
    }

    @Test
    public void case64() {
        String[] kingdom = { "#..#######.##..#..#.##...###..#.#", "#..#.###..#.#####.#.##...#....#..", "..#.#.........##.#.#...#.#.##..##", "###.#.#....##...##...####.####.##", "#.#......###........###..###.####", "#....####.###.#########.#.#......", ".#.#####.##.####..##.####.####..#", "..####...#.#.#.####..##....###.#.", ".#.##.#.###.#.####.....##.#.####.", "##..##.###..#.###...#.#.....#...#", "###..##.######.#.####.##.....##.#", ".######.##....##.##...#.##.###...", "#..##.####.#.##.....##.###.###.##", "#.###..##..##.#.#.#.#.#..#......#" };
        assertEquals(630, islands.beachLength(kingdom));
    }

    @Test
    public void case65() {
        String[] kingdom = { "###..####..#.#..###.###...#..###..#..#.", "#.#.#.####.....###....#...#.######....#", "#...#..#.#.#...#...####.#.###..#...#...", "##.....##..####.###.##...#.##.####.#.##", "....###..#..#.##.######...#.....####.#.", ".####...#.#.#...#######..#...#####.####", "#.#......###...###.#.####..###..###....", "#.#.#.##...#....#..##.##..###.#.####.##", "......#.###..##..#########.#.##.#..#.#.", "...#.##.###......##.#...#.###.######..#", "..........###.####.######.....##..####.", "..##....##.#.#..#.####.#.#.##...###.###", "#.##..###.#..##.#.......##......#.#....", ".#...#...##......#.#..#......##.#.#..#.", "#....####.###..#.##.#.#.............#.#", ".#.#..##..#.##.#.####.##.#####.###.##.#", "#..#####....###.#.#.###.....##...###...", "..#.#..#####..##...#.#.#...######..#...", "#..###.##..###..#.#.###......##.#..##..", "#.#..#.#....#.......####..#.#.#.##.....", "..#..##.##.#.####.####..#..#..##.#.##.#", "..###....##..#..#.#.#..#.##...###.#...#", "..#.###..##.##...##..###..##.#.####.###", "#...####.##.###...###..#...##..#.#.#.#.", "####...##....##.#.#.###.#.....###.###..", "#.#.##...##..#.######.##......#.###...#", "##......##.#.#.###.##.##..####..##..#..", "......#.#.##.#.####.....##.#...#.#...#.", "#..###.######.##....##..#.###...#.....#", "#######....##..#...####.#.#.##..##.##..", "....###.#..##..#....#..##.#.##.##...##." };
        assertEquals(1723, islands.beachLength(kingdom));
    }

    @Test
    public void case66() {
        String[] kingdom = { ".##....#..", "#.####.###", "....##.#.#", "##.#.###..", "....##.#..", "..##..#...", "#.#.#.##..", ".####.#.##", "..#..##..#", "##.#.#.###", "..#######.", "#####..#.#", "####......", "...##..##.", ".#...#.#.#", "#.#..###.#", "##.#....##", "###...#..#", ".#..#.#.#.", "#.#..#.#..", "####.##.#.", "..##.###.#", ".#####.##." };
        assertEquals(324, islands.beachLength(kingdom));
    }

    @Test
    public void case67() {
        String[] kingdom = { "..##....##...##.##..##.#...#", ".#..##......##.######.......", "##..##..#..#.##.#.#.###.####", "#..#.####.##..##.##.#....##.", "#.#.##..#..###..##.##..##.#." };
        assertEquals(178, islands.beachLength(kingdom));
    }

    @Test
    public void case68() {
        String[] kingdom = { "#.#..###.#..##..####.", "#..#.#...#...#..##.##", "##.#......#....##.##.", "#..#.##...#.##.##..#.", "#..####...##.#..###.#", "##.#..##.####.##.#..." };
        assertEquals(161, islands.beachLength(kingdom));
    }

    @Test
    public void case69() {
        String[] kingdom = { ".###.....", "#..#...#.", ".##..#..#", "#.....##.", "#.#...###", ".......#.", "###.#....", "##..##.#.", "#.####..#", "#..##.#.#", "##.#..##.", "#....#.##", "#.#..##..", "#####.#.#", "####...#.", "..#.#..#.", "##..#####", "##.#..###", "#...#.#..", "#..##.##.", ".###.##..", "##.#.##..", "..#..##..", "###..#.#.", "##.#####.", ".##..#...", ".#.#.##.#", "........#", ".###....#", ".##.#.###", "..##.#.##" };
        assertEquals(374, islands.beachLength(kingdom));
    }

    @Test
    public void case70() {
        String[] kingdom = { "#.", ".#", ".#", ".#", ".#", ".#", "##", "##", "#.", "##", "..", "..", ".#", "..", "#.", "##", "##", "##", "..", "#.", "..", "..", "#.", "..", "##", "..", "##", "..", "#.", "##", ".#" };
        assertEquals(60, islands.beachLength(kingdom));
    }

    @Test
    public void case71() {
        String[] kingdom = { "##.###..##.##..#.#..#..####.##..##....#", "..##.###.#.#.###.....##..#...###.##...#", "#.###..#####..#.##...###....###...##.#.", "#..#.####.#...###.....#..#....###..###.", "..#..##...#.#..#....#.#.#.##.#.####.##.", "##.#....######.#####..#..##.#.##..##..#", ".#...#..#....#.#.####...##.#....#.###.#", ".#####....###..#...#...###.#...#..###..", "##.#...#.#.......#.##.#.####.####..#.##", "##.#.##.........#........#..#....#.#.##", "..###.####.##...##.#.#..##....#..#.###.", ".#...##....#...#.####..##..#..#.#...###", "###.#.##....####.###.#.##...###..#.#.#.", ".#...#..#.##..#.##.#.#..#.####.######.#" };
        assertEquals(767, islands.beachLength(kingdom));
    }

    @Test
    public void case72() {
        String[] kingdom = { ".##....##.#.#....##...#...#", "#.###.#.#.#.#...#..###..###", ".##..#..###..#.#..##..###..", "#.###.#....##...##.#...#..#", "##..#.#.####.....##..####..", "#.#...#.####.#..#...#.....#" };
        assertEquals(231, islands.beachLength(kingdom));
    }

    @Test
    public void case73() {
        String[] kingdom = { "#..#....#######.######.......#", "...##....#...#.#...##....##...", "###.#.##...####.#........#...#", "..#..##..###..#.#.##.#..##.#..", "..#####.####...##.###..#.....#", ".##.#.#..#.#####.#..#..#...###", "##...#....#..###....#.##.#.###", "#...##.#..##........#..#...#..", ".##..##..#.#..#.....#.###.##..", ".##.#.....#.........##.#..##.#", "...#....##.#.##.##..##...#.#.#", ".#####.....###......##.####.#.", "#.##.######.#######.#..######." };
        assertEquals(508, islands.beachLength(kingdom));
    }

    @Test
    public void case74() {
        String[] kingdom = { "###", "##.", "##.", "##.", "#..", "...", "..#", "...", "..#", "..#", "...", "#.#", "#..", "..#", ".#.", "###", "###", "##.", "#..", "...", ".##", "..." };
        assertEquals(57, islands.beachLength(kingdom));
    }

    @Test
    public void case75() {
        String[] kingdom = { ".#........##......#.###..#...######", "##.##.#.#..#.##.#......##.##....###", "#.###....##..#....#####.##.#.##...#", "#.#.#.###.....##.#...#..##.#.##.###", ".##.##..##...#......##.....##...###", "..#...######..###.###..##.#..##.###", ".#..#.##.##..###.#...#..###..##..##", "#.#..##..###.###.#.#....#####...##.", ".##..#####.#..#.#...#.#.....#......", ".###...##..###.#.#...##.#.#...##..#", "#...#.#.#....#####.#...##.###.#..##", "......#.#.......##......##.....#.#.", "#...#...#.##..##.##..#.#..##.###..#", "...#..#..####...#.....####.....###.", "##..#....##.#.##.#.#...#.#...##.###" };
        assertEquals(743, islands.beachLength(kingdom));
    }

    @Test
    public void case76() {
        String[] kingdom = { "#.#.##.", ".#.....", "#...##.", ".#.##.#", ".####.#", "###...#", "##.#.#.", "####..#", "#.####.", "####...", "#.#####", "#...###", ".##..#.", "#..#.#.", "##.#..#", ".######", ".##.###", "#..###.", "##.#.#.", "###....", "....#..", "..##.#.", "###.#..", "##..#.#", "..#.##.", "#..#..#", "##.###." };
        assertEquals(247, islands.beachLength(kingdom));
    }

    @Test
    public void case77() {
        String[] kingdom = { ".##.#..#", "..#..##.", "..##..#.", ".#.###..", "#....#.#", "..##..##", "##.#....", "###...##", ".##.##..", "##.##..#", ".###..#.", "..##.#..", "###...#.", ".#####..", "#.####.#", "..#..#.#", "#.##.#..", "#..##..#", "..#.####", "...##...", "..#.#..#", "##...###", "...##.##", "..###..#", "#..#.#.#", "##.##...", "#.#.##..", "#..#....", "..#..##.", "#.#.#..#", "#.#...#.", "##..####", "#.#.#..#", "##.....#", "..#..###", ".#.#..#.", ".##.##.#", "##..#.#.", ".##.###.", "..#..###", "##...###", "##.....#", "##.##..#" };
        assertEquals(475, islands.beachLength(kingdom));
    }

    @Test
    public void case78() {
        String[] kingdom = { ".##...#.##.#...#.#.###..##.#.....#.######..#", "..#.#.###.#####..##..##.#.#.#.#..#...#...###", "#..#.#####......#####..#..#...#...###.##..##", "#..#.##...#...#...#.#.#.######.#.####.##..##", "#..##.#..#..#####....####.###....##.#.#..##.", ".##.#.###..####....#....###.#.#####......#.#", "..#...##.#..##.....###.##..#.#..#.#....#..#.", ".####.#.....#.###..#...##.###.#.........####", "#######.......##.......##..#.##.#.####.##..#", "..##...##.#.###.#.#....##.#.###...#..#...###", ".##.##.#.#...#.##.#######..#.#.#.#.#####....", "####....#....##.##.#...##.##...##..#.#..#.##", "#.##...#..#.#....#..##.#####.#..#.###..##.##", ".......#.###...###..#.##..##.###.#.###..#.#.", "###.####.##.....#.#....###..#...#..##.###..#", ".##.###..#...#.#...####..#.###..#..#..##.#.#", ".#..###....#....#..#.##.#.#.##.#...##.###.##", ".##.....##.#..##.#..#.#.#...##.##.###.##...#", ".##.#.....#..#..####.###..####...##...#..#.#", "###.#..#..#..#.###..#.#..##.##.###.#.#...#..", ".....##.....#...####..#..##.#.#####..##..#..", ".#.##..##...#..#.#.#.#.###.#.##...###..#..#.", ".#.#.##.###.#..#.##..##...#.##.#.#.###..###.", "###.#...##.###.###..#.#...#.....##.#.##.##.#", "###.#..####...#####...#...#.#...##.###..#.##", ".#.#....####....#....##.#####..##....##.####", "###..###...#.###...#..##.##.#.##.......#.##.", "...#.....##.##....#...#.......##...###.##..#", "..#.#.#..#.###......#####..#...##...####..#.", "....####..##.###.##.#......###....##..#...#.", "#.#...#..######..#####........#.#.###.#.###.", "...#.###..##.#..#..#..##.##..#..##...#.#..#.", "..#...#.##....##.#.##.##..##.#..#.#.#.......", "..##...####.####.....####.#####.###...###...", "#....###..##..##..#.#.###.#.#####....####.#.", ".####...###.####...##....##.##.##.###.##.#.#", "###....#..#.###.....#..#..####.#####..#.#.#.", "#..#.#####.#.#..##.#..#.##..#####.##.####.#.", "#.###...####.####.###....##.####.#.#..###..." };
        assertEquals(2461, islands.beachLength(kingdom));
    }

    @Test
    public void case79() {
        String[] kingdom = { "..#.#####.######.#.##....###.#.###..#", "##..#..#..#.#.#...#####..##....######", "...####.#######..#####.##.#...#....##", ".###....#.#.#######.#..##..###.#.##..", ".#....#..#.#.#...##....##.#.###.#....", "#.#..######.#.#.#.#..##.#.#..#.....#.", "##########.##.#..###.#.#.#.....###.##", "##.##....#..#...##..#..#....#..##..#.", ".##..#..#######...#.#.##.#.#.#..#..##", ".#.##..#..##..#...#....#..###.#.#....", "##...##.#.#...###..#.....##...#.##.#.", "##..#..###..#....#..#.###.#....#.##..", "#.###..##.#...#.#....#...#........#.#", "###.####.##.####......#.##.....###.##", "##..#...###..#..#.#..##...###..#..#.#", ".##.#.....#..#.##.#.#########.#.#..##", "##.#.#.####........########..###.###.", "#..##..####..#.....#...##.#..##.##..#", "..#.#..##.####.#.###.#.#####.###....#", "#..##..#..##..#.#..###.....#..#..##.#", ".##.#....#.#.#...#..#.#..######.###.#", ".##..##.###..##.#.####.....#.#...##..", ".#..#######.####.##..#..##..#.##.#..#", ".#.#####.###....#.##.#..###.#..#..#..", "##..#.....##......#.#####..##.###.#.#", "##........######...##.#.##....##.##.#", ".###.##.##...#.#...##...#.#####...##.", "#####.###....##..#..#...#...##...#..#", ".#..####....#....###.####...####.#..#", "..##..#..#..#.#.###.....##.#.....####", "####..####..##.###..#.#.##.##....#..#", ".##..#.#..#.#...#.#.#.#.##....###.#..", "#..#...#..##.#.#.##.......#...###.#.#", "##.##.####..#...###.#.##.#.#...#...##", "..##...#.##...####.#......##....#..##", "....##..#.###..#####..#...####..#..#.", "..#..#####.#.#.######.##...#.#.#.#.#.", "##....#..#.###..#.##..##.#..#.#.#.##.", "######.####..#.#..#####..##......#.##", "######.###...##.##.###.###..##.#..#..", "#....####.###..#.#.#....#.###..##.###", ".#....##..#...#..###..#.#.##.#..##...", "..#.#.#.#.#.......#.###..#.#......##.", ".###..#..#..#.#.###.#####..#.#..#.###", "..#...#.##.#.##.#.####.#.#..#.####..." };
        assertEquals(2400, islands.beachLength(kingdom));
    }

    @Test
    public void case80() {
        String[] kingdom = { "...##..#...#.#.", "##..##....#.###", "...#..#####...#", "####...#.##....", "###..#..#.#..#.", ".##.#..#.#.###.", "#.#..##....#.#.", "#...##.###.#..#", "#.#...#.....##.", ".###.##.#.#.#..", "...##..######.#", "#..#.####.##.##", "####.##..######", "..#.....#...###", "###...####..#.#", "##....##....#..", "##...#..##.##.#", ".#.##..........", ".##..#.#####.#.", ".###.###.###.#.", "#.#..###..##.#.", ".#..#...#...##.", "#..##.#..##.#.#", "#.##..##..#..#.", "##...#...#...##", "..#.##.#.#.###.", ".###..#.##....#", "##.#.##...#...#", "#.#.##.##....##", "....##.#...#.#.", ".##.#...#.###..", "..##...#.#.#.#.", "#.....#...#...#", "..#...######..#", "....##.#..#...#", "##.#...#..#.###", ".#.###.#.##.##.", "..#.##.#..####.", "..#....#....###", "...###..####.#.", ".#.....#.#.##.#", "#...#.##..#...#" };
        assertEquals(920, islands.beachLength(kingdom));
    }

    @Test
    public void case81() {
        String[] kingdom = {};
        assertEquals(4851, islands.beachLength(kingdom));
    }

    @Test
    public void case82() {
        String[] kingdom = {};
        assertEquals(4884, islands.beachLength(kingdom));
    }

    @Test
    public void case83() {
        String[] kingdom = {};
        assertEquals(4884, islands.beachLength(kingdom));
    }

    @Test
    public void case84() {
        String[] kingdom = { "." };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case85() {
        String[] kingdom = { "#" };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case86() {
        String[] kingdom = { ".." };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case87() {
        String[] kingdom = { ".#" };
        assertEquals(1, islands.beachLength(kingdom));
    }

    @Test
    public void case88() {
        String[] kingdom = { "#." };
        assertEquals(1, islands.beachLength(kingdom));
    }

    @Test
    public void case89() {
        String[] kingdom = { "##" };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case90() {
        String[] kingdom = { ".", "." };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case91() {
        String[] kingdom = { ".", "#" };
        assertEquals(1, islands.beachLength(kingdom));
    }

    @Test
    public void case92() {
        String[] kingdom = { "#", "." };
        assertEquals(1, islands.beachLength(kingdom));
    }

    @Test
    public void case93() {
        String[] kingdom = { "#", "#" };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case94() {
        String[] kingdom = {};
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case95() {
        String[] kingdom = {};
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case96() {
        String[] kingdom = { "....#.", ".#....", "..#..#", "####.." };
        assertEquals(24, islands.beachLength(kingdom));
    }

    @Test
    public void case97() {
        String[] kingdom = { "..#.##", ".##.#.", "#.#..." };
        assertEquals(19, islands.beachLength(kingdom));
    }

    @Test
    public void case98() {
        String[] kingdom = { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case99() {
        String[] kingdom = { "##", "##" };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case100() {
        String[] kingdom = {};
        assertEquals(2311, islands.beachLength(kingdom));
    }

    @Test
    public void case101() {
        String[] kingdom = { "....####..", ".#.#.#.#.#", "##..##..##", "....##.#.." };
        assertEquals(47, islands.beachLength(kingdom));
    }

    @Test
    public void case102() {
        String[] kingdom = { "..", "#.", ".." };
        assertEquals(5, islands.beachLength(kingdom));
    }

    @Test
    public void case103() {
        String[] kingdom = { "...", "...", "#.." };
        assertEquals(2, islands.beachLength(kingdom));
    }

    @Test
    public void case104() {
        String[] kingdom = { "####", "####" };
        assertEquals(0, islands.beachLength(kingdom));
    }

    @Test
    public void case105() {
        String[] kingdom = { "..", "..", ".#" };
        assertEquals(3, islands.beachLength(kingdom));
    }

}
