package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class PiecewiseLinearFunctionTest {
  PiecewiseLinearFunction piecewiselinearfunction = new PiecewiseLinearFunction();

  @Test
  public void case1() {
    int[] Y = { 3, 2 };
    assertEquals(1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case2() {
    int[] Y = { 4, 4 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case3() {
    int[] Y = { 1, 4, -1, 2 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case4() {
    int[] Y = { 2, 1, 2, 1, 3, 2, 3, 2 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case5() {
    int[] Y = { 125612666, -991004227, 0, 6, 88023, -1000000000, 1000000000, -1000000000, 1000000000 };
    assertEquals(6, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case6() {
    int[] Y = { 5, 4, -5, -5, 4 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case7() {
    int[] Y = { -999999999, 1000000000, -1000000000, 1000000000, -999999999 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case8() {
    int[] Y = { -887322187, 255315735, -525577786, -880762505, -515578295, -211196822, 621481165, 490542955 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case9() {
    int[] Y = { -839025394, -140415887, -599307650, -355229804 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case10() {
    int[] Y = { 497343642, 409338059, 111955453 };
    assertEquals(1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case11() {
    int[] Y = { -556514640, -548963369, -748696209, 363127325, 659458152, 417370358, -256442190, 565286864 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case12() {
    int[] Y = { -110827810, 664894467, -200681637, 978976837 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case13() {
    int[] Y = { -40386486, -607136204, 817534705, -247229397, 954972273, -982607743 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case14() {
    int[] Y = { 451022643, 430435475, 613622747, 577876668 };
    assertEquals(2, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case15() {
    int[] Y = { -494439318, -18271634, -272117430, -121212966, -74805592 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case16() {
    int[] Y = { 278832792, 465135153, -802394470, 142729209, -943268501, 908089082 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case17() {
    int[] Y = { 416133565, 300996638, -195601340, -887089066, 425256291, -631629063, -379054774 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case18() {
    int[] Y = { -683938644, 770941763, -607713206, -795006250, -943944963, -588876793, -677116662, 738405682, -785173851, -902842292, -26248917, -117830619 };
    assertEquals(7, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case19() {
    int[] Y = { 205897139, 949621980, 587124212, -477844985, 705327425, -698486463, -51817886, -821155912, -342497422, 220941899, 656900827, 17412821, -206742177, 25838814, 845691262, 482669733, -216724992 };
    assertEquals(9, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case20() {
    int[] Y = { -449229336, -949986908, -574224207, 593217823, -352073481, -588787369, 129321647, 212835061, -695390782, -323525837, 789903084, 286775060, -256175109, 523512151, -555297248 };
    assertEquals(8, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case21() {
    int[] Y = { -570247835, -758066149, -69378240, 41211741, 661961306, 701316019, 183859521, -591709267, 4565049, 413933991, 787542855, -834902207, 978585883, -931819825, 907601550, -550723372 };
    assertEquals(8, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case22() {
    int[] Y = { 176288552, -147208928, 603325060, 755080103, 810057910, 152966931, 150630106, -393616312, -209153001, 270417619, -127466243, 450144158, 155190529, -157733844, 183755262 };
    assertEquals(8, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case23() {
    int[] Y = { -765034541, -302346016, -697674397, -247971264, 271112507, 801623609, 71516463, -608891909, 122498888, 748319113, -284924893, 276122953, 336583402 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case24() {
    int[] Y = { -706596117, 829046611, -383874150, -661308011, 177152221, 573210993, 546258777, -705692412, 466016165, 608867288, 338818922, 756163152, 954368673 };
    assertEquals(7, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case25() {
    int[] Y = { 305913287, -894966773, -18326647, 469544277, -207726810, -229023421, -695539831, -346793611, -623972470, 669177555, 987971999, -350652199, -709894974, -388625022, 239417566, 44586151 };
    assertEquals(8, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case26() {
    int[] Y = { 864326759, -908904913, 207028590, 913634271, -877539007, 890478885, -257898997, 325661026, -179932558, -334310506, -154922963, -501938596, -70913234, -391404747, 142653385, -274694423 };
    assertEquals(13, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case27() {
    int[] Y = { 154123230, -569629649, -843146777, -76915914, -566817371, 89630362, -473615346, 986293532, -762064799, 907519773, 352148638, -104851881 };
    assertEquals(9, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case28() {
    int[] Y = { -475406979, -343659964, 430189243, -735710371, -199769579, 18997738, 631686822, 954773274, -987864862, 611991685, -249725980, 810247993, 995986652, -248753782, 296948724, 703956020, 83222939, 460424618, -362672325, 767670926, -990625354, -443122032, 420741407, 304475591, -157670837 };
    assertEquals(16, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case29() {
    int[] Y = { 542961292, -168437687, 419355537, -809372212, -687946446, 456240771, -216326971, 294483643, -979941881, -225331563, 675801150, -428322174, 218892585, -468354545, -738120058, -527437874, 657086362, -608855588, -29395067, -705751404, 54650771, -658926376, 562371819, -173537329, -323403360, 492100478, -631319447, -261101124 };
    assertEquals(21, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case30() {
    int[] Y = { 329190062, -983198165, -808413944, -231783763, -164159152, 894160617, 792345614, -120188223, 334830180, 108845744, 730506523, -773546586, -624392871, -232891788, -316383207, 397863944, -452699267, 15661577, -76028987, -36376710, -292360576, -513946193 };
    assertEquals(11, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case31() {
    int[] Y = { 445564175, 791904047, 530331270, 877450140, 468208698, 102367309, 951669256, 1049947, 409085539, 777498626, -189403813, -298946387, -721032321, -998457137, -673107243, -592886729, -467223138, 438908296, 899198850, -779378145, 45101063, -635871069, 828815880, -777559069, -420022879 };
    assertEquals(12, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case32() {
    int[] Y = { 461143835, -222192369, -257208375, -256245337, 147646254, -451557425, -377142131, 939189757, 683189930, -623041119, 118428306, 480550916, -311942434, -273749561, 281606870, -656651298, -219113398, 936615960, 928826920, 890177932, 328239965, -794046771 };
    assertEquals(11, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case33() {
    int[] Y = { 27655636, -941533661, 903435787, 48760936, -167141867, -108036835, -405336556, 310527132, 809475056, 966906355, -13645032, 16114168, 545226048, 28964833, 891229924, -989173324, -784087256, -894528220, -731194971, -915032114, -882191529, 698976210, -584591727, -263996554, 208915409, -387947513 };
    assertEquals(12, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case34() {
    int[] Y = { -643064742, 500946507, -45301390, -560697746, 582880798, 67718959, -112393399, -479349618, -938944959, 421972902, -780957956, -971112253, 5055947, -938542196, -899977236, -511707327, 552557784, 96456717, 751939363, -896567649, 166219122, 44747675, -587285815 };
    assertEquals(12, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case35() {
    int[] Y = { 100816049, -883672404, 502047972, -779376886, 305313613, 609054932, -616743745, 916847207, 36792266, 397692795, 38651685, 95214715, 933849015, 922664169, -522619342, -362233117, 330295708, -428841274, -240924476, -640989520, 185680506, -107942857, 143638793, 554400449, -832638245, -302529746, 66925432 };
    assertEquals(18, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case36() {
    int[] Y = { 139566020, 777515073, -605953731, 230215465, 598065793, 691279699, -283534331, -21610571, -565185106, -104242427, -663978665, -335498826, -174916102, -664142039, -981553202, 57565503, -999660913, 542429669, -399069881, -635211166, -796686521, 271561125, 102695906 };
    assertEquals(14, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case37() {
    int[] Y = { 217420809, 767250302, 114550308, 633260970, 520865678, 840863813, 932782183, 338261638, -663491814, 134634349, 154766712, 324962535, -368257639, -827227059, 268070433, 742799675, 468351936, -897399248, -858189355, 835626324, 10510486, -610566573, -731525663 };
    assertEquals(10, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case38() {
    int[] Y = { -30205054, -847220803, -893644534, -423074892, 299285584, 317739194, -62777362, 268223020, -455471797, 304328329, -719218468, 696963046, -582662296, 588761200, -903049194, -973763403, -120875168, -855422971, -241077741, 303818858, -696368215, -492194547, -905570188, 818747371, -865335256, -990797747, -330395673, 949953232, -137385021, -422086296, 929245534, 365403565, -885737031, 444755256 };
    assertEquals(20, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case39() {
    int[] Y = { -364706920, -816436312, -940381521, 1740766, 590400714, 426813441, 586349127, 179163190, 86804826, 603802658, -550234032, -824467689, 230729212, 467261496, 583319793, -628114444, 572369750, 686108661, -737781487, 349915745, 295130245, 533716852, 705673412, -746521864, -993226602, 680611080, -6750259, 237470842, -618428062, 901720033, -735867988, 885498382, -392378211, 541502354 };
    assertEquals(19, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case40() {
    int[] Y = { 542178864, 361058715, -824025262, -23409435, 132910524, -141003143, -931129844, -244085341, -766634205, -564413906, -260141691, 913797663, -97066737, -959336268, 245964384, 122649541, 110782942, -921946652, 623023190, 657072139, 460181375, 80642210, 342211311, 426801887, 356137705, 861947000, 607401547, -199131426, -236585989, 988955003, 852286927, -181265808, 266387109, 688607002, -108074067, 433003824, 269201606 };
    assertEquals(16, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case41() {
    int[] Y = { 841562552, 539629907, -135893262, -580111362, 136278088, 725357022, -852175535, 93915615, 768235355, -101514734, -419753273, 424032216, 203978532, 267855950, -643284762, -582917802, 352455141, -503706802, 704588910, 42553618, 425129692, 278562053, -483242172, -77645629, -437238229, 80232406, -200784355, -514032523, 699124684, -677333741, -963244864, 924054666, 290143516, 910673371, -229695223, -833843982, 257634374 };
    assertEquals(20, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case42() {
    int[] Y = { -568621526, 63209694, 780030904, -976185091, 793561412, 973196025, -591814559, -53664642, -722089274, -971713858, -607462810, 272762472, 788600635, 504456112, 78641533, 143900578, 757096182, 919602648, 761258381, 529861678, -362407560, -246222788, 482900522, -263765362, 223408913, 15231751, -79054386, -66900845, -156517836, -731451642, -271880245, -82118004, -249946889, -803797154 };
    assertEquals(14, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case43() {
    int[] Y = { -440616714, 823098256, -717509495, 683782402, -330873264, -905993077, 788820106, -631364846, 407517241, 530460647, -168038837, -67082965, -243883319, 26423002, -918093405, -648576495, -926323000, 605601595, 363591602, 125782883, -697601655, -526302147, -723212093, 677198808, -997793308, -255788317, -158930192, 556333679, 64675835, 414522904, 127827602, 133967613, 694543873, 483423624, 858881442, 281771991, 45605612 };
    assertEquals(18, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case44() {
    int[] Y = { 31326723, -39261735, 759087154, -900953669, -229178788, 605507341, 576440117, 689737751, 820600249, -273952746, 184818662, 809561339, -658912608, 243829536, -497667747, -693567996, 25042655, 737858498, 721493999, 982194843, 925771720, 996610935, -396886209, 192256997, 850995308, -944853961, 749212018, -463622731, -307442649, 242349055, -117640309, 674366384, -357771827, -328525004, 520176917 };
    assertEquals(20, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case45() {
    int[] Y = { 886437270, -922137208, -142448743, 327623915, -922151865, 940891262, -844534687, -906897732, -350734152, -577045639, -515849825, 632274702, -134553361, 816433473, 279610787, 496340054, -599044226, -89650482, -153603607, -49902512, 187299334, 971579824, -324182030, 396150163, 290133013, 881228626, 247642072, -735649031, 657429359, -625058348, 844619430, 105321334, -277937649, -693338913, -166965924, 628826705 };
    assertEquals(22, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case46() {
    int[] Y = { 388516686, 848787142, 992245384, -528344091, 955255672, 377357811, 771320857, -461715162, -40185707, -672688507, 734840598, 389377026, -372661174, -629145602, 796837382, -242282016, -21834411, 61260125, 334362828, 207852363, -224025770, -964175706, -564164871, -641978992, 365530092, 974329037, -415583155, 457004459, -664864573, -593170706, -217168524, 395034865 };
    assertEquals(16, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case47() {
    int[] Y = { 950898954, -809519689, 995517290, 75344277, 107305769, -29325108, 264379561, -152898684, 354408581, 235252936, -833552902, -692912104, -44598282, 725798876, 453317897, 954841688, 628857984, 185143487, -915208381, -747673905, 31849415, -750230094, 865982934, 906756035, 866254525, -866793300, -935170330, 904402602, 342687410, -627558238, -20217329, 779323662, -277186637, 473843327, -304956414 };
    assertEquals(19, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case48() {
    int[] Y = { 709643006, 422028931, -409206215, -411567323, -433274587, 704574756, -431562697, 800153315, -979011178, -242588637, -594043029, 490416478, 240305472, -449793988, 176062553, 370528992, 475685394, 407983078, -760113059, -719912820, 319332278, 104688508, -28434746, -435208882, -46377940, -233642637, -925891148, 256078875, 252393771, -814004497, 114565398, 647858100, 144769562, -220758989, -263465980, -976187371, 263049712, 599323052, 900681768, -990532468, 570055765, -418210382, -541012485, 306396323 };
    assertEquals(24, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case49() {
    int[] Y = { 503928277, 386015390, -588339458, -873222133, 20757337, 70600101, -666228607, 601439432, 578918206, -786097016, -712830605, 291362982, 11752566, -915123452, -119580796, -793692255, -816699072, 151753531, 409020609, 612290044, -824087011, 438253636, 521939624, 712086300, -794387719, -654219409, 751666880, 625985189, -298688103, -862040489, -819186174, 245115284, -201569972, 801442273, 863959410, 828503542, 874408390, -423012120, 531664589, 576346958, -306911686, 97401999, -425726271, -164190910, 226854101, -226001787 };
    assertEquals(25, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case50() {
    int[] Y = { 81979899, 289904659, -159177983, 348101350, -634533499, -257031105, 295955885, -720965747, 529410604, -780767423, -128197187, 118419803, -827444363, 73198048, -878676458, -627944154, 71315151, -431348752, -275220030, 909153263, -427376870, 198863088, 201617132, 502059199, -669327166, 471606003, -645307926, -927963357, -315518249, 493519468, -20861510, -812451749, 959545074, -747188930, 635731365, -542804340, 25671619, -373766978, 618697127, 117667583, -445578502, -174272289, 640489762 };
    assertEquals(30, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case51() {
    int[] Y = { 593394513, 252087694, -788865986, -457308289, -689053987, 537430080, 207313356, -591213052, 63734618, 935237577, 706459362, 86511994, -699164802, -843828763, -196323148, -319085183, 241977756, 249814961, 834417312, 51432673, 753801618, -803038321, -806608529, 588879931, 396841973, -495992174, -229710220, 785589228, -772705526, 280473347, -84541993, 135388897, 611431340, -967381709, -196247638, 183301288, -953129796, -279418803, 82378281, 390550683, -216273642, -496584682, 768593822, 888672408, -99994672, -964145056 };
    assertEquals(23, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case52() {
    int[] Y = { -832782731, 409422609, 182593782, -508886730, 272749725, -33835674, -419686405, -343135047, -807459835, 779930962, 604652418, 15005706, -245444510, 465934996, -11244918, -529597424, 596055181, -271649167, 592003332, -139450035, -463696888, -987956711, 631973539, 498564915, -965391853, -443769884, 69625436, 75910583, -676889477, -354939129, 777177003, -576068031, 274433574, -726076455, 620074132, -661633510, 97522857, -63382307, 648917480, 438570273, 550699745, 787362022, -775839712 };
    assertEquals(26, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case53() {
    int[] Y = { 519157302, 42931296, -914153283, 497300069, 524831552, -835954035, -867389647, -621388460, 19782597, -908533124, -11391096, 952920695, -840075517, 611074325, -685979429, -77186269, -835854647, 783539076, -745815582, -418793709, 334561871, 298022568, 424417515, 723881928, 346856444, 595668812, 391995625, -496515328, -484652234, 657481814, -256262140, 917409380, 395648678, -537492304, -482911900, 14611712, 308468498, -703928774, 24539217, 361438015, -848679998, -675857918, 915699727, 824153507, -789405260, 148737031, -301744845, -694075633 };
    assertEquals(27, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case54() {
    int[] Y = { 420589676, 878529660, -281410658, -620562986, 9149835, 384306586, 174632311, -409236286, 716300884, -2979899, 152347497, 744266997, -930986878, 147382190, 217265281, -179225450, 337477710, 617963591, -224513424, 276717267, 599095559, -551799926, 289649848, 971818709, 405022300, 651747360, -594165088, 742171576, -595200779, -766936450, -480216063, -245006073, 145928174, -570451600, 453400318, 752058717, -810923496, -892476445, 117561550, -178004839, 665926034, -195208901, -695136803, -562637800, -544491673, 39459383, -914013170 };
    assertEquals(27, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case55() {
    int[] Y = { 266197138, -805820020, -324035356, -436341909, -915644278, 536891538, 91689974, -30666792, 686966621, 753620138, 439603050, -592006277, 214397813, -254161815, -747442841, 791642900, 160788942, 384337988, 937450836, 217919708, 563368109, -586471895, -899712487, 629866407, -341661543, -235485333, 282904521, 572988109, 819802226, -837717384, -524310817, -40666563, -790482810, 101744555, -336820015, -530971782, 239109246, 19378939, 614527113, -497102547, -317307232, -198368511, -851633979, 445513922, 76678790, -351792497 };
    assertEquals(23, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case56() {
    int[] Y = { 406215314, -95121659, -252164618, -984751879, -423666158, 990837412, -773964391, 511805419, -125913406, -494332306, 388881219, 93715589, 644277517, -951534659, 413690295, 813165385, -161835338, 367737653, -672956501, 143563813, -680449911, -533912496, -637527678, -405641277, 726352651, 66730351, 604618226, -230495155, 662627211, -280749559, -796385681, -930160944, 904196246, -816672155, -617104661, -117801792, 771764086, 152997769, 965595266, -196809101, 858586204, 870331729, 209143317, -786884897, -104530365, 726256824 };
    assertEquals(28, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case57() {
    int[] Y = { 345589798, -305916997, -442440032, -433080371, 891047667, 830259295, -977050957, 413604519, -872685728, 12175657, 177373901, -94981564, -411923448, 923998846, -837363663, 294893788, 360122096, -256211733, -206352833, 840368484, -757191107, 505150879, -256483766, -557831813, 208302954, 5345463, 16989923, -269805866, -131300652, -941762132, -549422022, 276707264, -13779049, 548710397, -910959617, 308751011, 455266513, 965833126, -538267415, -456590578, -359841675, 875307053, -981363999 };
    assertEquals(27, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case58() {
    int[] Y = { -529982455, -862607446, 284728493, 691851622, -727726229, -415260246, -347322721, -310820433, 968893109, -654759918, -842333593, 247705547, 964487389, -971777760, 64496369, -114354687, 823045414, 588018299, 645924970, 619822475, -339895132, 837128598, 142543045, 410528528, 69761863, -698081901, -431689900, 288299982, 360993525, 396979110, -237799493, 366287256, 895346385, -260001268, -114759464, 818842195, -601877564, 837172936, -576456145, 346405408, -742228257, -660088797, -318218065, 648726625, 33279640, -393219625, 737852958, 992905172, 656914299, 400337606 };
    assertEquals(25, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case59() {
    int[] Y = { 89690242, -850221926, -793292731, -354306863, -819065535, 60184910, -113541327, 801840063, 493046473, 289963908, 148544149, -250624427, -974257894, -508632727, -315237616, -749839142, -977653433, 797338663, 710411887, -357390022, -592646895, -709522980, 127505474, -817290624, 978897147, -678891926, 560117587, 620162358, 208256911, -447546000, 107141113, -330124894, 125446832, 440970792, -184067847, -349669922, -40579561, 752499694, -398975130, 234220479, -46645531, -330041977, -384697513, 993046743, 89939147, -934127194, 926711306, 216205677, -661449216, 593138027 };
    assertEquals(26, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case60() {
    int[] Y = { 346429504, -524361683, 389955553, -451846085, -702738519, 531607104, 399997095, -479306174, -95418635, -518063351, -423597333, -246878772, -186976053, -72777423, 568309995, 133232971, -790539446, 196285404, -118813925, -977859164, -10457929, 558443037, -42688161, 120330636, -820369745, -954504756, 140347438, -590715691, -264727889, -239076118, 67984670, 945582401, -801299735, -506736953, -320728600, 755105642, -878329754, -47450855, 728270222, -891840748, -353726156, 13211529, -536708213, -947954733, 185196227, 973719664, 961022615, -764188106, 754211642, 32754104 };
    assertEquals(26, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case61() {
    int[] Y = { -217387374, -816458655, 933622848, 292512206, -751690589, -828974026, 43097466, 983170392, 550659302, 938891530, -992203973, 259294071, 161625179, 117216970, -429305884, 239809265, -173944217, -598960086, 132296550, 371253149, -396817579, -485636065, -794542022, -101350882, -876916353, -936839788, 39790764, -711361476, 608471472, 970784002, -618945115, -622608053, 432856479, 363053733, -417125620, 470899572, -230647914, -993429412, -897419059, -857181122, -769918627, 702682311, -210063345, 55136434, -695647439, 400824422, 316940960, -230522470, -125526277, -781199601 };
    assertEquals(28, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case62() {
    int[] Y = { -778022887, 121278278, 43889223, 121239620, -697797930, 727138075, -62502080, 714016719, -193306093, -557557335, 177404933, -495502045, -69720939, 802226972, 445466737, 531425846, 413371519, -937167485, 404990765, -181992579, -518928768, 274190863, -289196674, 578132589, 789939575, 811520356, 356370732, 669634088, -259088471, -339068757, -813839815, 410372803, 721881725, 286636542, -612246249, -562614397, 111080594, -996830306, -172941743, -583715117, 202434136, 434213234, 201281549, -902446465, -393320636, 860345047, 158173112, -531668418 };
    assertEquals(26, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case63() {
    int[] Y = { -958786874, -233643698, -437256972, 706209839, -556648389, -979593104, -129233769, -659807801, 713055122, -574339688, 225102957, -940323457, 704430533, -868440568, 547454750, 81518289, 405949562, 568681234, -99931343, -436979484, 704527121, 93410202, -84632902, 940517006, 84355612, 755553965, 865929929, -193300700, 78426301, -21976151, 389049990, 226162659, 573873298, -325966909, 194536508, 406224645, 917979098, -873908105, 961393579, -279852955, -820117719, 812407139, 68454207, 222471023, 893732471, 290123313, 806004486, -998747165, 142240597 };
    assertEquals(30, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case64() {
    int[] Y = { -720116839, 979566470, -64725405, -244704155, 346498049, -891284103, -503644816, 316248193, 606651597, 288179998, -709391186, 570781373, 738021678, 802389736, 410937242, 896636409, -739402559, 582015958, -715131559, -475643063, -793677641, -822476095, -427245798, 609187694, 103649843, -24670457, 598684592, -6885194, 189670610, 891969333, -311308073, -106563207, -173076694, -450724782, 386520094, -696916385, 728953191, 763622822, -324561610, -500770509, 788137483, 74900426, -944718367, -269427253, -948752323, 995923385, 607102251, 889984031 };
    assertEquals(23, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case65() {
    int[] Y = { -319402482, 23522555, 778053522, -207809690, 789212755, -8921650, -575605695, 883585074, 471826153, -718450678, 857388281, -197548975, 595772701, -557527064, 699388643, 225861209, 610918541, 72743620, -986778756, 983626942, -223648409, -672599253, 937155514, 630278831, 864780470, 516412618, -180657352, -901132598, 915992753, 445466833, 799049221, 62132241, -871699910, 492480310, -919161005, 3543057, 556977001, -678254582, 509188018, -59833167, 931277415, 608332078, 474842101, -758728679, 606692015, 178568271, 670557127, 51025146, 436686632 };
    assertEquals(34, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case66() {
    int[] Y = { -237310844, -549389223, -821759090, -842564884, -343570894, 684517706, 938084036, 764876731, -293693383, 527737021, 121602608, 861358799, 959913979, -814967921, 363974015, -584355270, -678370044, -9587505, -996843529, -212042594, 384452004, 614391695, -203054593, 60109338, -398127896, -511437299, -208616378, -276394149, -541938895, 721477479, -484609061, 742872385, 343453269, -93228595, -993442468, 668959648, -45848108, -86075348, -434377739, 699784071, -792595865, 4007339, 592236621, -633836654, 901722186, -572792490, 372192693, 868610969, 649055108, 35894690 };
    assertEquals(26, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case67() {
    int[] Y = { -1944177, -32255554, -613576070, -605758989, -955643119, 848824728, 304840114, 609834207, 129685275, -405442246, 956092926, 335667577, 999550001, -723081570, -916671156, 650199427, -537553783, 775076989, -726722749, -83043507, -610191930, 24751627, 855702045, 198560362, -528848660, -151367396, 359343715, -283544340, 764994514, 535908555, 323728116, -302778306, 494349721, 200251853, -294326233, -911073004, -493722219, -130550126, 121280550, 836064015, -651794417, -753804324, 728636690, -330819786, 9406589, -871618768, 683434649, -304601229 };
    assertEquals(27, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case68() {
    int[] Y = { 15, 20, 37, 49, 4, 5, 42, 41, 18, 50, 1, 21, 8, 5, 49, 20, 29, 33, 49, 1, 1, 36, 19, 10, 11 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case69() {
    int[] Y = { 9, 24, 8, 22, 6, 1, 45, 3, 48, 21, 50, 42, 27, 40, 41, 35, 32, 3, 9, 24, 15, 50, 19, 28, 22, 38, 17, 43, 0, 1, 23, 32, 14, 31 };
    assertEquals(21, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case70() {
    int[] Y = { 36, 22, 32, 37, 44, 39, 46, 10, 9, 20, 35, 49, 0, 19, 26, 38, 28, 30, 42, 43, 10, 34, 28, 44, 17, 13, 0, 6, 48, 42 };
    assertEquals(14, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case71() {
    int[] Y = { 2, 25, 20, 15, 24, 7, 6, 6, 3, 18, 24, 21, 15, 35, 47, 41, 27, 2, 22, 41, 35, 21, 10, 27, 22, 11, 16, 14, 15, 27, 8, 16, 29, 35 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case72() {
    int[] Y = { 28, 15, 49, 46, 24, 46, 38, 10, 7, 10, 5, 23, 46, 18, 40, 13, 19, 17, 42, 40, 18, 9, 18, 50, 45, 28, 49, 13, 36, 16, 22, 46, 7, 4, 19, 46 };
    assertEquals(19, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case73() {
    int[] Y = { 7, 13, 34, 28, 31, 29, 18, 19, 29, 8, 6, 46, 23, 14, 18, 1, 27, 40, 7, 2, 40, 25, 17, 22, 49, 36, 5, 20, 43, 48, 5, 17, 17, 44, 50, 18, 7, 0, 45, 22, 50, 33, 40, 5, 17, 26 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case74() {
    int[] Y = { 47, 31, 32, 19, 43, 15, 45, 37, 4, 19, 0, 16, 43, 20, 27, 0, 37, 43, 22, 7, 48, 10, 37, 13, 6, 38, 39, 0, 44, 43, 4, 42, 11, 43, 41, 41, 49 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case75() {
    int[] Y = { 16, 2, 15, 34, 19, 19, 12, 20, 21, 22, 35, 17, 42, 47, 17, 28, 31, 43, 44, 41, 8, 1, 12, 22, 24, 3, 14, 39, 21, 10, 44, 13 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case76() {
    int[] Y = { 29, 22, 33, 35, 12, 29, 21, 24, 22, 26, 49, 9, 8, 23, 6, 22, 38, 10, 12, 2, 26, 39, 21, 30, 49, 30, 6, 3, 17, 0, 12, 2, 46, 24, 23, 7, 48, 27, 21, 39, 26, 6, 23 };
    assertEquals(24, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case77() {
    int[] Y = { 10, 28, 45, 19, 26, 37, 12, 41, 22, 50, 30, 20, 31, 38, 12, 29, 31, 30, 29, 12, 42, 49, 25, 0, 39, 7, 22, 18, 3, 7, 31, 25, 37, 45, 10, 3, 11, 21 };
    assertEquals(20, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case78() {
    int[] Y = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
    assertEquals(1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case79() {
    int[] Y = { 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000, 1000000000, -1000000000 };
    assertEquals(49, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case80() {
    int[] Y = { 7, -9, 9, -1, 8, -10, 10, -7, 9, -8, 9, 7 };
    assertEquals(11, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case81() {
    int[] Y = { -119668309, -821914584, 445833437, -183024305, 623240174, -170227695, 923232771, -817453502, 391606661, -681796654, -108803674, -390972837, 618876212, -691596791, 746575893, -998937187, 168401399, -589367338, 427521141, -129639660, 934975603, -348689848, 979222087, -250042185, 691766347, -249880637, 370252502, -119668309 };
    assertEquals(27, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case82() {
    int[] Y = { -671, -790, -455, -785, 232, -830, 293, -969, -505, -984, 991, -775, -46, -783, 74, -682, 653, -962, -545, -886, -301, -921, 843, -672, -607, -976, -360, -962, 469, -822, 954, -671 };
    assertEquals(31, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case83() {
    int[] Y = { -720688685, 169936423, -809687240, 766244323, -920490738, -642787911, -827115293, -512886734, -955783624, 82240007, -977447652, 978642071, -942367290, -634138824, -864238987, -100768393, -807625702, 604516006, -961407533, -612982240, -727670132, 751417610, -823331903, 279886631, -802299803, 629444956, -822011673, 899193117, -996048754, 76201923, -788890947, -386192585, -753069480, 22230710, -874865906, 132450789, -966510639, -580197407, -851014251, 586715774, -910108992, -686667442, -823789622, -720688685 };
    assertEquals(43, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case84() {
    int[] Y = { -111240669, -178446352, 997267413, -908731303, 217227569, -593681575, 580548370, -150547761, -91653041, -948529379, 3969627, -208395497, 174274211, -344731900, 765776247, -138520470, 278212760, -728912524, 891462713, -338251392, -14909347, -268682958, 869206008, -622911867, 323860653, -594980470, 971895768, -825007935, 794241623, -724900712, 90402732, -253871453, -99480799, -741930524, -64280538, -942097373, 201000592, -558175010, 289490452, -169578013, 900963588, -849966477, 900215252, -950162027, 397616943, -335646503, 290679930, -793119579, 315018653, -111240669 };
    assertEquals(49, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case85() {
    int[] Y = { 4, 2, 4, 2 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case86() {
    int[] Y = { 42, 14, 19, 1, -23 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case87() {
    int[] Y = { 10, -10, 10, 0, 1, -10, 10, -10 };
    assertEquals(7, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case88() {
    int[] Y = { 1, 2, 1, 2 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case89() {
    int[] Y = { 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0 };
    assertEquals(48, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case90() {
    int[] Y = { 1, 2, 1, 2, 1 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case91() {
    int[] Y = { 1, -1, 0, -1 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case92() {
    int[] Y = { 0, 1, 0, 1 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case93() {
    int[] Y = { 3, -1, 2, -1, 3 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case94() {
    int[] Y = { 0, 2, 1, 4 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case95() {
    int[] Y = { 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13 };
    assertEquals(49, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case96() {
    int[] Y = { 2, 3, 2, 3 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case97() {
    int[] Y = { 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2 };
    assertEquals(49, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case98() {
    int[] Y = { 5, -5, 5, -5, 5 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case99() {
    int[] Y = { 1, 3, 2, 4 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case100() {
    int[] Y = { 2, 1, 2, 1, 2, -1 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case101() {
    int[] Y = { 1, 2, 1, 2, 1, 2, 1, 2 };
    assertEquals(7, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case102() {
    int[] Y = { 0, 2, 0, 2 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case103() {
    int[] Y = { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 };
    assertEquals(49, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case104() {
    int[] Y = { 4, 2, 3, 1 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case105() {
    int[] Y = { 3, 1, 3, 1, 3 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case106() {
    int[] Y = { 2, 0, 1, -1 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case107() {
    int[] Y = { 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2 };
    assertEquals(11, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case108() {
    int[] Y = { 1, 2, 1, 2, 1, 2, 1 };
    assertEquals(6, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case109() {
    int[] Y = { 2, 0, 1, 0, 2 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case110() {
    int[] Y = { 1, 0, 1, 0, 1 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case111() {
    int[] Y = { 0, -1, 0, -1 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case112() {
    int[] Y = { 0, 2, 1, 2 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case113() {
    int[] Y = { 1, 2, 1, 2, 1, 2 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case114() {
    int[] Y = { 1, 5, 5, 7, 9, 11 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case115() {
    int[] Y = { 0, 1, 0, 1, 0 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case116() {
    int[] Y = { 1, 2, 1, 2, 1, 2, 1, 2, 1 };
    assertEquals(8, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case117() {
    int[] Y = { 0, 4, 0, 4 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case118() {
    int[] Y = { 0, 1, 0, 1, 0, 1, 0, 1 };
    assertEquals(7, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case119() {
    int[] Y = { 1, 0, 1, 0 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case120() {
    int[] Y = { 1, -1, 1, -1 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case121() {
    int[] Y = { 4, 4 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case122() {
    int[] Y = { 2, 1, 2, 1, 2 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case123() {
    int[] Y = { 0, 3, 2, 4 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case124() {
    int[] Y = { 10, 2, 3, 1, 4 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case125() {
    int[] Y = { 10000000, 9999999, 10000000, 9999999, 10000000, 9999999, 10000000 };
    assertEquals(6, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case126() {
    int[] Y = { 0, 1, 0, 1, 0, 1, 0 };
    assertEquals(6, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case127() {
    int[] Y = { 1000000000, 999999999, 1000000000 };
    assertEquals(2, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case128() {
    int[] Y = { 0, 1000000000, 0, 1000000000, 0 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case129() {
    int[] Y = { 1, 2, 2, 3 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case130() {
    int[] Y = { 0, 4, 5, 2, 4, 2, 4, 2 };
    assertEquals(6, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case131() {
    int[] Y = { 1, 3, 1, 3 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case132() {
    int[] Y = { 99999, 0, 99998, -99999, 1, -99998 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case133() {
    int[] Y = { 1, -2, 1, -2, 1, -2 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case134() {
    int[] Y = { 0, 4, 1, 7, 3, 1000 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case135() {
    int[] Y = { 1, 2, 1, 0, -1, 2 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case136() {
    int[] Y = { 3, 2, 3, 2, 3 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case137() {
    int[] Y = { 10, -10, 10, 0, 10, -10, 1, -10, 10, -10 };
    assertEquals(9, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case138() {
    int[] Y = { 0, 5, 2, 5, 0 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case139() {
    int[] Y = { 1, 1, 2, 3, 4, 3, 2, 1 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case140() {
    int[] Y = { 1, 2, 2, 1 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case141() {
    int[] Y = { 129128432, -843177819, -443818685, -840983291, -396838734, 460150196, 0 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case142() {
    int[] Y = { 0, 5, -1, 0 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case143() {
    int[] Y = { 2, 3, 3 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case144() {
    int[] Y = { -1000000000, 1000000000 };
    assertEquals(1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case145() {
    int[] Y = { 100, 101, 100, 101, 100, 101, 100, 101, 100, 101 };
    assertEquals(9, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case146() {
    int[] Y = { 999999999, 1000000000, 999999999, 1000000000 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case147() {
    int[] Y = { 3, 2, 1 };
    assertEquals(1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case148() {
    int[] Y = { 0, 3, 1, 4, 2, 5 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case149() {
    int[] Y = { 0, 100, 0, 100 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case150() {
    int[] Y = { -562279623, 489492093, 520263565, -31213221, 362851214, -811820772, -926827653, -321506535, -312320846, -717003446, 163106032, -552570421, -599735146, -250301768, 261710871, -837164139, -730355352, 119745109, -152292281, 349485612, -724943741, 810192238, -985210917, -557817719, -280406075, 346053769, -462807383, -930315740, 569628070, 319653512, -406045171, 992002275, 958013618, -416653105, 642549847, 956921689, 625832314, -632517716, -572881549, 86000952, -409118607, 43844434, 456391765, 52728362, 565289274, -855139572, 734959826, -803694459, 449196434, -889927863 };
    assertEquals(32, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case151() {
    int[] Y = { 2, 1, 2, 1, 1, 2, 3, 2 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case152() {
    int[] Y = { 3, 0, 1, 0, 1, 0, 3 };
    assertEquals(6, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case153() {
    int[] Y = { 999999990, 999999992, 999999991, 999999994 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case154() {
    int[] Y = { 5, -5, 5, -5 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case155() {
    int[] Y = { 5, 3, 4, 2 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case156() {
    int[] Y = { 1, 4, 2, 5, 3, 6 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case157() {
    int[] Y = { -100, 5, 1, 11, 4, 100 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case158() {
    int[] Y = { 2, 1, 2, 1, 2, 3, 4, 5, 10, 20 };
    assertEquals(4, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case159() {
    int[] Y = { 1, 5, 4, 10 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case160() {
    int[] Y = { 22, -30, -6, -1, -26, -17, 0, -30, 24, 21, 28, -2, 9, -26, 2, -26, 4, -9, -27, 11, 27, -18, -26, 29, -6, 0, -20, -27, -30, 12, 25, -24, 30, -6, -11, 15, 12, -28, 18, 26, -13, -25, -24, -28, -11, -23, -14, -1, 18, 4 };
    assertEquals(28, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case161() {
    int[] Y = { 1, 3, 1, 3, 1, 3 };
    assertEquals(5, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case162() {
    int[] Y = { 0, 2, 1, 3 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case163() {
    int[] Y = { 2, 1, 0 };
    assertEquals(1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case164() {
    int[] Y = { 3, 3, 4 };
    assertEquals(-1, piecewiselinearfunction.maximumSolutions(Y));
  }

  @Test
  public void case165() {
    int[] Y = { 5, 4, 5, 6, 5, 6, 7 };
    assertEquals(3, piecewiselinearfunction.maximumSolutions(Y));
  }

}
