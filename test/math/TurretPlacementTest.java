package topc.test.math;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.math.*;

public class TurretPlacementTest {
    TurretPlacement turretplacement = new TurretPlacement();

    @Test
    public void case1() {
        int[] x = { 0, 2 };
        int[] y = { 0, 2 };
        assertEquals(10L, turretplacement.count(x, y));
    }

    @Test
    public void case2() {
        int[] x = { 0, 1, 2 };
        int[] y = { 0, 1, 0 };
        assertEquals(8L, turretplacement.count(x, y));
    }

    @Test
    public void case3() {
        int[] x = { -3, 0 };
        int[] y = { 0, 4 };
        assertEquals(45L, turretplacement.count(x, y));
    }

    @Test
    public void case4() {
        int[] x = { 1, 2, 3, 0 };
        int[] y = { -1, -5, -7, 100 };
        assertEquals(65137L, turretplacement.count(x, y));
    }

    @Test
    public void case5() {
        int[] x = { 0, 0, 0, 0, 0, 0 };
        int[] y = { 1, 2, 3, 4, 5, -6 };
        assertEquals(865L, turretplacement.count(x, y));
    }

    @Test
    public void case6() {
        int[] x = { 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900 };
        int[] y = { 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900 };
        assertEquals(19202512627L, turretplacement.count(x, y));
    }

    @Test
    public void case7() {
        int[] x = { 9998, -10000, 10000, 0 };
        int[] y = { 9998, 10000, 10000, 0 };
        assertEquals(2799564895L, turretplacement.count(x, y));
    }

    @Test
    public void case8() {
        int[] x = { -10000, -10000, -9999, -10000, -9998, -9999, -10000, -9997, -9999, -9998, -10000, -9996, 10000, 10000, 9999, 10000, 9998, 9999, 10000, 9997, 9999, 9998, 10000, 9996, -10000, -10000, -9999, -10000, -9998, -9999, -10000, -9997, -9999, -9998, -10000, -9996, -9999, 10000, 10000, 9999, 10000, 9998, 9999, 10000, 9997, 9999, 9998, 10000, 9996, 9999 };
        int[] y = { -10000, -9999, -10000, -9998, -10000, -9999, -9997, -10000, -9998, -9999, -9996, -10000, -10000, -9999, -10000, -9998, -10000, -9999, -9997, -10000, -9998, -9999, -9996, -10000, 10000, 9999, 10000, 9998, 10000, 9999, 9997, 10000, 9998, 9999, 9996, 10000, 9997, 10000, 9999, 10000, 9998, 10000, 9999, 9997, 10000, 9998, 9999, 9996, 10000, 9997 };
        assertEquals(998930945222L, turretplacement.count(x, y));
    }

    @Test
    public void case9() {
        int[] x = { -1196, 7972, 2167, 8842 };
        int[] y = { -1613, -8347, 3733, 6916 };
        assertEquals(1621503122L, turretplacement.count(x, y));
    }

    @Test
    public void case10() {
        int[] x = { -496, 3024 };
        int[] y = { -753, -3939 };
        assertEquals(45072765L, turretplacement.count(x, y));
    }

    @Test
    public void case11() {
        int[] x = { 1695, 2809, 9739, -447 };
        int[] y = { 2413, 4228, 7022, -1462 };
        assertEquals(769170083L, turretplacement.count(x, y));
    }

    @Test
    public void case12() {
        int[] x = { 6093, -6895, 1657, -3065 };
        int[] y = { -1077, 6480, -934, -8579 };
        assertEquals(1671723993L, turretplacement.count(x, y));
    }

    @Test
    public void case13() {
        int[] x = { -7393, 5761, -8193 };
        int[] y = { -5688, 4453, -6339 };
        assertEquals(1176147604L, turretplacement.count(x, y));
    }

    @Test
    public void case14() {
        int[] x = { -2083, -3848, 4955 };
        int[] y = { 5856, 5261, 1120 };
        assertEquals(340108285L, turretplacement.count(x, y));
    }

    @Test
    public void case15() {
        int[] x = { -8684, 1306 };
        int[] y = { -5220, 3288 };
        assertEquals(344334403L, turretplacement.count(x, y));
    }

    @Test
    public void case16() {
        int[] x = { -7815, 5167, 6942, -3540 };
        int[] y = { 9449, -1221, 3058, -5243 };
        assertEquals(2134546591L, turretplacement.count(x, y));
    }

    @Test
    public void case17() {
        int[] x = { -7720, -3326, 4022, -5878 };
        int[] y = { -3173, 4342, -5058, -9398 };
        assertEquals(1427570122L, turretplacement.count(x, y));
    }

    @Test
    public void case18() {
        int[] x = { -3808, -4194, -7489, -5101 };
        int[] y = { -719, 8202, -4738, 4573 };
        assertEquals(847494445L, turretplacement.count(x, y));
    }

    @Test
    public void case19() {
        int[] x = { -1, 1 };
        int[] y = { -1, -1 };
        assertEquals(6L, turretplacement.count(x, y));
    }

    @Test
    public void case20() {
        int[] x = { -1, 1 };
        int[] y = { 1, 1 };
        assertEquals(6L, turretplacement.count(x, y));
    }

    @Test
    public void case21() {
        int[] x = { -1, 0, -1, 1 };
        int[] y = { -1, 0, 0, 1 };
        assertEquals(20L, turretplacement.count(x, y));
    }

    @Test
    public void case22() {
        int[] x = { 0, -1, -1 };
        int[] y = { -1, -1, 1 };
        assertEquals(13L, turretplacement.count(x, y));
    }

    @Test
    public void case23() {
        int[] x = { -1, 0, 1 };
        int[] y = { 1, -1, 0 };
        assertEquals(13L, turretplacement.count(x, y));
    }

    @Test
    public void case24() {
        int[] x = { 1, 1 };
        int[] y = { 0, 1 };
        assertEquals(1L, turretplacement.count(x, y));
    }

    @Test
    public void case25() {
        int[] x = { 1, 0, -1, -1 };
        int[] y = { 1, 1, 0, 1 };
        assertEquals(16L, turretplacement.count(x, y));
    }

    @Test
    public void case26() {
        int[] x = { 0, 1, -1 };
        int[] y = { 1, -1, 0 };
        assertEquals(13L, turretplacement.count(x, y));
    }

    @Test
    public void case27() {
        int[] x = { 1, -1 };
        int[] y = { 1, 0 };
        assertEquals(6L, turretplacement.count(x, y));
    }

    @Test
    public void case28() {
        int[] x = { -1, -1 };
        int[] y = { -1, 0 };
        assertEquals(1L, turretplacement.count(x, y));
    }

    @Test
    public void case29() {
        int[] x = { 2165, 1624, 98, -7134, -2978, -3528, -781, 4469, 6320, -9021 };
        int[] y = { -1935, -9221, -4302, -8504, 8401, -8689, 4572, 6419, 4000, 8506 };
        assertEquals(13795697228L, turretplacement.count(x, y));
    }

    @Test
    public void case30() {
        int[] x = { 5571, -6836, 653, 988, -7176, 8671, 286, -5915, 182, -4018, -7004, 1916, -9143, -2247, 9631, -6658, 977, 3457, 4205, 9057, -6245, 1568, 2171, 94, 1733, -1568, 1855, 7162, 5035, 5128, 4833 };
        int[] y = { 3377, -8081, -840, 7584, 2310, 3486, 5180, 9799, 9180, -2466, -4901, -5750, -2672, 465, -5476, 7227, -1651, 3580, 9911, -8200, -7551, 1139, 9772, 9422, 8245, 7320, 6942, 2488, -45, 6710, -4580 };
        assertEquals(116103984767L, turretplacement.count(x, y));
    }

    @Test
    public void case31() {
        int[] x = { -5518, -9815, -3560, -1222, 1240, -6273, -4376, 3120, -7514, 1892, -3949, -836, -6292, 5673, 9230, 552, -6840, -338, 4841, 6636, -2248, 6181, -8989, -7984, 5735, 8281, -4356, -6754, 9336, 679, -9680, 1330, -8720, -3060, 1143, 3435, 7173, -1484, -2969, 8799, 1404, 3426 };
        int[] y = { -8570, 811, -7543, 6819, 757, -3741, 1152, 3257, 5660, 6687, -5121, 7522, 4836, -1451, -2368, 1078, -4786, -5545, -4164, 4864, -2591, -2721, 2427, -7504, 3599, -3886, -3887, 3558, -3336, -5567, 4194, -880, -9662, 7844, -1865, -5206, 5900, 1395, -3450, 8174, -6721, 7224 };
        assertEquals(202675511850L, turretplacement.count(x, y));
    }

    @Test
    public void case32() {
        int[] x = { 4144, -2331, 4425, -1867, -4902, 7432, -4713, -6175, 4070, 1407, 5534, -951, -7539, -2508, -6227, -9183, 5954, -8710, -5394, 7832, -4398, 4519, -1263, -1248, 3602, 4661, -2018, -2372, 7283, 4136, 2171, 5613, -3438, 1497 };
        int[] y = { -4453, 6696, -5889, -3332, -4883, 6322, -2131, -7278, 6891, 9911, 1820, 2002, -460, -2911, 9373, 8567, -8453, 2091, -2643, 3884, -8093, 1913, 9326, 7306, -706, 521, 6392, -2933, -9895, 177, 8706, -1067, -6701, 5153 };
        assertEquals(134019633362L, turretplacement.count(x, y));
    }

    @Test
    public void case33() {
        int[] x = { -2097, -3852 };
        int[] y = { -549, -3222 };
        assertEquals(20444815L, turretplacement.count(x, y));
    }

    @Test
    public void case34() {
        int[] x = { -4759, 9971, 4208, 5771, 5753, -6088, -1651, -3642, -4805, -1036, -727, 1683, -1689, -5104, 1729, 8065, -2773, 7384, 9919, -1990, -9760 };
        int[] y = { 2998, 8289, 2759, 7192, 1024, 3814, 4135, 4494, -3867, -3767, 3151, -7077, 9454, 7005, -9420, -5157, 5459, 6121, 1138, 1362, 9394 };
        assertEquals(51143632874L, turretplacement.count(x, y));
    }

    @Test
    public void case35() {
        int[] x = { 7037, 9595 };
        int[] y = { -3739, 1609 };
        assertEquals(70276440L, turretplacement.count(x, y));
    }

    @Test
    public void case36() {
        int[] x = { -9322, -3871, 9895 };
        int[] y = { -5374, -6660, -4396 };
        assertEquals(1192395953L, turretplacement.count(x, y));
    }

    @Test
    public void case37() {
        int[] x = { -445, 3722, -769, -2406, -3469, 3466, -352, 9845, -345, 7613, -6309, -1675, -8969, 9546, 253, 5348, 4495, -2213, -5427, -670, 938, -9019, 5720, 6891, 6241, 3569, -4193, -5648, 6511, -4510, -1483, -2615, -431, 3510, 8435, -3584, 8257, 7339, -9480, -7506, -9277, 5455, -9064, -8105, 218, -2415, -7161, -1611, 3552 };
        int[] y = { 431, 7377, 2757, 8283, -3974, 2036, 5942, -9983, 5638, -5764, -2107, 3556, 8914, 770, -2067, -8447, -2797, -5610, -2893, -9309, 6084, -2902, -7905, -6041, -5999, 3453, -3864, 3271, -548, -5490, 6062, -1452, -4683, -219, 4516, 4025, -2925, -5773, 3310, -5337, -2554, -9992, 8293, 3926, 274, -6085, 2352, -8395, -4972 };
        assertEquals(284259084866L, turretplacement.count(x, y));
    }

    @Test
    public void case38() {
        int[] x = { -783, -6344, 673, 6454, -3344, 2489, 3377, -1247, -3709, -5143, 1896, 9228, 7252, -384, 439, -6064, 2408, -7225, 8503, 3972, -9610, -8661, 8053, -2081, 934, 4650, -1153, 998, -8872, -393 };
        int[] y = { 9363, 9714, 1033, 2839, -4494, -9913, -4638, 4787, -354, 607, 4581, 7276, -5078, -2924, 7092, 9963, -2909, -813, -3628, 6542, -5235, -7587, -4239, 7587, 1196, 1145, 8387, -1012, 3409, 4321 };
        assertEquals(102860815652L, turretplacement.count(x, y));
    }

    @Test
    public void case39() {
        int[] x = { -5597, -3951, 8072, 5863, -4243, 4730, -2317, 2833, 8966, 3946, 1268, -3166, -8204, 9391, 2369, 7202, 2847, 3826, 4375, -8673, 4511, -7900, 2624, 896, -6737, -5167, -7186, 1837, 7158, -2916, 5831, -7039, -2584, -1828, -7180 };
        int[] y = { 1240, 8777, 5522, 8498, 6731, 6471, 4246, 9157, 3560, -484, 5024, -6390, -2357, -6070, 4901, 7088, -9365, -8995, -7609, 1803, 2811, -170, -274, -9852, -7816, -6553, 835, 6929, 8207, -6843, 7124, 3742, 772, -8908, -4423 };
        assertEquals(166819049152L, turretplacement.count(x, y));
    }

    @Test
    public void case40() {
        int[] x = { -1241, -2092, 1325, 5159, 1621, -9493, -6597, 3642, -7049, 4124, 5801, 2869, -4963, -5704, 4029, 1771, -9473, 5307, 9648, -2436, -3493, 7373, -7698, -4897, 4761, -9702 };
        int[] y = { 5427, 4556, 3225, -9901, -5632, 8460, -9883, 8305, -7235, -974, -7378, -6884, -9764, 3448, -8321, -3136, -5074, 7963, -3307, 8903, 7408, -2970, -3939, -8836, -1270, 3616 };
        assertEquals(99819455332L, turretplacement.count(x, y));
    }

    @Test
    public void case41() {
        int[] x = { 26, 4297, 5448, 582, -7999, -2088, -870, -6509, -2380, 7015, 7428, -4484, 4681, 8902, -9634, 2222, -4025, 2694, 8893, -58, -379, -8596, 7206, 8919, -7231, -1852, 9051, -7332, -1017, 1358, -4683, 7867, -9705, -3047, 70, 480, 9628, 8837, -184 };
        int[] y = { 2699, 2506, 4854, -3312, 8542, -7579, -8304, 7348, -6292, -3431, 8019, 3965, -2054, 5866, -8419, 8082, 83, 7466, -6912, -4306, -903, -4277, -8630, -606, 4815, 4249, 3690, -2316, 4388, -3101, -7953, -1158, -7979, 5881, 1203, 4177, 9315, -7749, -3891 };
        assertEquals(202149471236L, turretplacement.count(x, y));
    }

    @Test
    public void case42() {
        int[] x = { 648, 5343, -7992, -2376, -6974, 6723, -6637, 4301, -4959, 2029, 5840, -4890, -856, 3888, 4099, 1570, 8080, 636, 2133, -6722, 197, -9406, -8078, -8300, 5241, -4521, 7099, -5786, -6143, -6082, -8320, -1484, -6292, -9994, 7026, -7730, 4168, 6846, 1189, 9190, 5818, -3839, 963, 4168, -3975, -9126, -603, -7136 };
        int[] y = { 871, 7138, -7923, -8788, 3870, 8527, -4910, 4418, -7495, 2897, 4836, 2963, -6355, -765, -838, -1838, 3037, 3172, 6575, -5661, 1441, -8, -6593, 4174, 8915, 8741, -2275, -1765, -6409, -2466, -2986, 161, 3342, -9469, -5497, -5939, -4790, 8724, 2148, 5514, -7279, -2910, 6907, 9841, 706, 7895, -9684, -8774 };
        assertEquals(301089410104L, turretplacement.count(x, y));
    }

    @Test
    public void case43() {
        int[] x = { 8904, 8496, 9312, -1728, -213, -3769, -3242, 2284, -3289, 9656, -8771, -4032, 5042, -5259, -8935, -4377, 1157, 5915, 142, -3812, -3488, -209, -7629, -7419, 5916, 7868, 243, 169, -992, 1270, -1976, 810, -1658, -6788, 6108, 5535, 1994, -2262, -4487, -1510, 4341, -8031, -3293, 9635, -1493, 3533, 9211, -5706, 2222 };
        int[] y = { 892, -5816, 4990, -2810, 3391, -8940, 3521, -1243, -3864, -5480, 3897, 3761, -3285, 1329, 6189, -2902, 4824, 4699, 8504, -1629, 395, -7221, -8752, -636, 361, -6219, 5858, -2866, 3195, -1215, 9496, 6349, -391, -1876, -3540, -5549, -3702, 3117, 2036, 7363, 5594, -2360, 7424, 7923, 5369, -2388, 64, -4261, 2447 };
        assertEquals(243070743310L, turretplacement.count(x, y));
    }

    @Test
    public void case44() {
        int[] x = { 9440, -3512, 4771, -8518, 2819, 879, -9590, 7273, -2150, 4923, -6238, 1400, 1633, 775, 393, 1326, -5813, 6413, 5477, 8061, 9755, -4292, -1242, -5014, 576 };
        int[] y = { 8074, 6123, 1857, 2842, -7794, -106, 260, 2862, -2902, -4572, -7225, -5126, 1104, -626, 6109, -9145, -5681, 8782, 8551, -8914, -7006, 5897, 5213, 1181, -9279 };
        assertEquals(79540621933L, turretplacement.count(x, y));
    }

    @Test
    public void case45() {
        int[] x = { 5616, -877, 7997, 6352, -7993, -6750, 8929, 1739, 2692, -439, -2069, -8498, 4925, 1276, -3615, 9232, 3469, -3669, 895, -6417, -5931, -6953, 2031, -2545, -1764, 4828, -6000, -9291, -1967, -2928, -4336, -5550, 3401, 5550, 9247, 222, 4018, -124, -5974, 9979, -2523, 6965, 733, 7882 };
        int[] y = { 2568, -8212, -1778, 8301, 3058, -7601, 9381, 7031, 6446, -4996, 441, 485, -2893, -9440, -4363, -7115, 2261, -4693, -1500, 3588, -2951, -3021, 164, 8508, -1868, 7218, -3022, -7109, -6701, 9944, -5415, -8541, -9890, 7485, -6483, -2332, 4881, -2578, 2165, -4769, -4297, -2722, -7783, 9613 };
        assertEquals(245144542409L, turretplacement.count(x, y));
    }

    @Test
    public void case46() {
        int[] x = { 5621, 3045, 1111, 3485, 9073, -9647, 9426, -9060, -7631, -6608, -7231, -9963, -518, -9591, -4991, 7912, 4174, -2568, -4775, -8091, -5208, 8565, 4184, 9564, 8863, -2932, -7026, 7510, -523, 2823, -7758, -4754, -278, 7423, -1964, 7256 };
        int[] y = { -5869, -5394, -8996, 1023, -4537, -2737, 5358, -4126, 2290, 6033, -194, -243, 45, -6857, -6743, 8119, 631, 7014, -9223, 5467, -9146, -5125, 7597, -9622, -7031, -1158, -4630, -7105, 2546, 4186, -7565, 7466, 622, 1123, -164, 7285 };
        assertEquals(191699208852L, turretplacement.count(x, y));
    }

    @Test
    public void case47() {
        int[] x = { -3730, -8322, -8865, -6332, -3707, 3877, -8357, 8527, -2602, 1675, -5763, -3547, -3246, 9719, 2396, -9821, -5972, 1279, -2251, 7703, 1293, 1331, -5894, 6630, -4372, -1095 };
        int[] y = { 311, 4542, 4247, -9430, 6268, -4137, 2221, -7709, -9951, -3131, -3175, 7241, 2776, 7429, 7345, 7592, 7909, 633, 8523, 8675, 3226, -4355, 697, 3254, 4550, 8226 };
        assertEquals(83336632501L, turretplacement.count(x, y));
    }

    @Test
    public void case48() {
        int[] x = { -3490, -1604, -3691, -275, -5940, 2789, 1219, -257, 8224, -3486, -5630, 3908, -6552, -5358, 8441, 5224, 9141, 7186, -3713, -3437, -6251, 2311, 1811, -2828, -9699, -8255, 2343, 1084, -6570, 3084, 9050 };
        int[] y = { -2453, -1708, -8304, 6179, 7332, -8790, -6504, 319, -8769, 3561, 2529, 7115, 333, -9027, -2723, -2964, -8511, 8470, 5480, -8071, 3348, 29, -7725, -203, -8223, -3746, -5363, -9787, 8249, 2642, -6932 };
        assertEquals(121789663458L, turretplacement.count(x, y));
    }

    @Test
    public void case49() {
        int[] x = { 2632, -8872, -5177, -7543, 6306, -229, 6588, -1560, 3468, 2050, -5484, -1998, -7628, 7824, -2104, 7522, -9077, 6223, 6494, -1671, -4449, -7696, -5859, -4701, 6182, 2764, 1840, -1939, -32, -2397, 8662, -1471, -5999, -6604, 20, -6490, 3361, -7143, 6878, 5009, 3770, -1231, -4734, 9548, -9220, -7640 };
        int[] y = { -7165, -7614, 7688, -2107, 8128, -8621, 3668, 9009, 6802, -8082, -7083, 7139, 7368, -2644, -3922, -9360, -5339, 5641, -2645, -5597, 6809, 7559, -4929, 6547, -5742, -9076, 9851, -6305, 9766, -6423, -9850, -4643, -709, 495, -3506, -6573, 5442, 4672, -4757, 5200, 773, 5462, -4458, 9750, 4512, -5677 };
        assertEquals(307688760279L, turretplacement.count(x, y));
    }

    @Test
    public void case50() {
        int[] x = { -3576, 8471, 6336, -9038, 567, 5469, -7101, 9660, -9217, 9926, 1000, -5026, 1713, -1396, -3627, 9130, -871, -9474, 8504, -6146, 8826, -165, 1210, -2202, -5404, 7457, -1945, 2501, 3932, 9604, -2069, 3251, -7183, -7106, 7543, 9253, 3194, -4165, 2312, -902, -1829, 3214, -4167, -2707, 1212 };
        int[] y = { 9228, 7801, 8364, 8974, -9827, -4204, 8677, -6046, 2629, 3843, 6006, 6998, 4955, -6566, -6206, -5728, -5765, 9416, -8009, 2417, 785, 2984, -6275, -7866, 8908, -277, 6437, 1550, 8156, -8469, -9568, -3901, 6319, -8963, 7766, 7959, 3310, -4628, -2112, -5186, -847, -7014, -3526, 5343, 3787 };
        assertEquals(300122750405L, turretplacement.count(x, y));
    }

    @Test
    public void case51() {
        int[] x = { -7613, -903, -2619, -5379, 8982, 818, -1325, -5405, -6242, 8607, -5399, -129, -6830, -1221, -228, -4589, -5681, 2399, 4368, -2975, -4060, 992, 3739, 305, 6352, 5610, 9218, 3971, -3634, 6804, -4123, 3888, 8951, 1106, -777, 5982, -203, 3129, -4628, -4169, 6782, -7445, 1249, -1239, -5401, -989, -1740 };
        int[] y = { -583, 4976, -7077, -6405, -8784, -756, -5900, 4359, 4202, 5085, 3891, -8896, 4331, -3654, -3398, 4506, 5854, -8497, 4140, 8860, 9826, 4996, 4274, 291, 9120, 272, 7732, -6072, -7057, -7695, 2974, 8095, 1291, -1234, 1538, 9195, -9194, 2167, -6663, -9720, -3510, 7804, 109, -9588, -1818, 22, 6722 };
        assertEquals(260212928772L, turretplacement.count(x, y));
    }

    @Test
    public void case52() {
        int[] x = { -1126, 2587, -6762, -4549, -9509, -9079, 293, 4143, -5690, -8335, -5645, -3549, -6792, 842, -6682, 8566, -3384, 3612, -7811, 2164, -5683, 5881, -2933, -9551, 753, -7941, -4220, -6616, 1121, 5442, 1812, -5217, -8546, -7463, -9482, 3176, 6832, 4380, 8332, 1951, 5835, 5645, -2345, -2113, 525, -3178, 7419, -1019, -8008, -7906 };
        int[] y = { -8212, 2655, 7998, -4932, 702, 9198, 6138, -3842, -4733, 1586, -3815, 4340, -1670, -7871, 3148, -1109, 8292, 8429, -2953, 4968, -6626, -4898, -3930, 6756, 806, -5821, 3055, -9633, -2506, 5095, 8183, -5205, -1859, 9005, -3213, 3028, -6331, 7854, -7069, -4702, -9579, -6701, -5482, -1758, -215, -2464, 2265, -2537, 4658, 1879 };
        assertEquals(297684163460L, turretplacement.count(x, y));
    }

    @Test
    public void case53() {
        int[] x = { -4106, -1325, 3192, -18, -9056, 4954, -569, -6106, 4964, 3183, 7554, 1817, 3765, 2077, 89, -3481, -3890, -7577, 4453, 198, -6919, 7955, 9225, 3365, -7326, 661, 6450, 6566, -72, 1069, 8333, -2156, -6793, -5363, 215, -110, -8389, 9041, 2290, -4350, -7724, -2789, -9816, -8907, 5238, 6819, -4994, -4565 };
        int[] y = { 7035, 2947, 8124, -3504, -9725, 1841, 1045, -516, -9030, 6270, 6738, -8152, 5784, 9511, 2363, 3959, -1057, -3636, -9736, -6608, 8346, 4975, -9397, -9342, -6061, -8927, -2833, -2438, 3514, -2297, 5482, 8874, -498, 3219, 6558, -2665, 310, 1369, -4191, 3633, 4840, 9548, -8007, -459, 3792, -5109, 3536, 4473 };
        assertEquals(293540816459L, turretplacement.count(x, y));
    }

    @Test
    public void case54() {
        int[] x = { 5171, 5200, 436, -1748, 6235, -4384, -4342, -9130, -866, -2683, -7344, 3821, -6237, -3708, -3963, 4734, 8602, -7991, 6798, -5998, -2106, 7686, 2200, 2336, -9781, -5245, -9801, -1872, 5465, 8513, 4172, 4511, 5830, -137, -8047, 29, 8381, 6866, 4019, 491, 1494, 7495, -1692, 1294, 3102 };
        int[] y = { -3981, 5853, -86, 3499, 3515, -8239, 2151, -7166, -2093, 9933, 2886, -845, -9284, -7168, -9091, -277, -8768, -6074, 8355, -5441, 1405, 3292, -6728, 9062, 3697, -5724, 231, -7229, 7188, -3529, -4014, -3939, -4201, 306, 1856, 8357, 9867, 5021, 5971, -887, 6995, 9539, 6731, 5799, -6205 };
        assertEquals(263055406149L, turretplacement.count(x, y));
    }

    @Test
    public void case55() {
        int[] x = { 7929, -9668, -6372, -6481, -8286, -1812, 1629, 6554, 2846, -1030, 9897, 3971, 4089, -1522, 2797, 122, -2866, -6429, -4539, -8838, 2633, 2573, 572, 4659, -7733, 6554, 8087, -2688, 6791, 2314, 8833, 7260, 8291, -225, -1244, 3935, -958, -8372, -7643, -1549, -3289, 2267, 534, 8243, 7887, -8447 };
        int[] y = { 5897, 9051, 1785, 8374, 4598, -2085, -3806, -8521, 3416, 2853, -444, 2765, -5174, 8658, -1199, -978, 9331, 7267, 6735, -1895, 1045, -5964, -7557, 467, 1010, 3039, 4445, 220, 8841, 3904, 1818, 5200, -8990, 8761, -1043, 4553, -4196, -2503, -8034, 309, 3349, -3523, 4373, 9068, 992, -3899 };
        assertEquals(245516327718L, turretplacement.count(x, y));
    }

    @Test
    public void case56() {
        int[] x = { -2465, 9240, 7624, 7119, -6713, 8666, -7516, -3689, 8413, -2835, -7852, -5929, -9729, -5522, -5966, -7545, -5143, 1995, -7053, 6918, 6269, 6596, 8986, -1147, -8173, -7133, -1644, -5510, -9500, -8963, 9213, 3524, 1461, 4694, -9801, -7526, 3763, 9926, 7093, 4131, -8961, -7714, -4654, -4781, 2834, -6448, -9122 };
        int[] y = { -5648, -7784, -9766, -8882, -9565, 2637, -9241, 5462, -6893, 2803, 2140, -867, -7484, -9855, -3600, -3487, -4559, 7108, -6452, -5636, -4225, -4566, -4320, 3311, 1403, -7002, 5085, -8478, -5101, -7795, 8837, 3635, -7119, 1705, -8704, 5920, 6650, 719, 6570, 7696, 1272, -7196, 7145, 9501, 8253, -1725, -5320 };
        assertEquals(361078733053L, turretplacement.count(x, y));
    }

    @Test
    public void case57() {
        int[] x = { -676, -7031, 2190, 2153, 10, 7183, 4786, 6224, 5314, 1361, 2136, 6650, -9016, 6502, 1141, 1720, -1127, -9059, 5537, -3033, 2168, -6991, -6579, 2222, 2109, -9667, -5829, 3156, -7519, 8341, 8375, -3399, -1320, 8962, 3095, 532, -547, -4932, 877, 8440, 1757, 5125, 5747, 4099, -9547 };
        int[] y = { 7770, 9394, 8211, -3104, 8768, 3615, 7630, 3639, 3126, -3081, 6077, -4279, -5242, -3581, 2893, 4306, 5960, 4349, -4981, 1714, -7891, 4886, 5603, 2880, -505, -4747, -2790, -8232, 9133, 1138, -4109, 4881, 9834, 3429, -233, -8993, 920, -4711, -849, -4347, -1216, -8465, -6145, -7324, -8200 };
        assertEquals(243735440032L, turretplacement.count(x, y));
    }

    @Test
    public void case58() {
        int[] x = { -6103, 722, -678, -3955, -8192, 6677, 2928, -8166, -5065, 8391, 9284, 8133, -1525, -6814, -5645, -6553, 8338, -1237, -1520, -4103, -7563, 8592, 3751, -204, -8815, 7373, 7015, 6141, -4675, -8904, 5397, -2005, 5895, 9782, -7596, -8720, 3411, 8506, 1759, -53, 1034, 7124, -7752, -1855, -8763, -8639 };
        int[] y = { -8164, -2740, -3244, -2007, 1590, 3962, -2118, 5527, 5065, 3905, 9015, -1513, 5863, 5620, 6604, 4923, 5166, -9982, -6009, 5982, -5562, -5545, -3330, 2439, 6880, -7998, -1075, -456, -5500, 8846, 255, 4514, -5737, 8849, -594, 6905, 7094, -9775, -5932, -3002, 1297, -4613, 476, -4147, -6793, -4128 };
        assertEquals(293117477846L, turretplacement.count(x, y));
    }

    @Test
    public void case59() {
        int[] x = { -3591, -3354, -4005, -9692, 4065, 7817, 88, 8946, 7977, -704, 7893, 1832, 8109, -4016, 5236, -4592, -6383, -964, -602, 7170, -1566, 5359, 5223, 1094, 8422, 850, -6223, -6926, -2212, -6369, -7180, 5451, -6276, -2626, -4155, 2552, 8447, -4149, -4541, 5016, 6081, 528, -8104, -5065, -8579, 5207, -9838, -1827 };
        int[] y = { 9999, -5209, -8773, 6773, 5234, -9839, -8569, 2950, -8624, -1885, 7608, -7036, -8640, -2976, -911, -9842, -733, -9454, 1729, 3259, -9503, 3757, -1695, 7533, 6989, 4268, -7268, 1176, 1276, -7462, 549, 7262, 7331, -8205, -9599, 464, 1548, 5206, -6208, -9115, -6198, 5868, 2408, -1900, -7192, -9957, 630, 8348 };
        assertEquals(328728218711L, turretplacement.count(x, y));
    }

    @Test
    public void case60() {
        int[] x = { 5715, 3746, 2790, -3894, -5664, 7664, -1910, 2320, 4770, -7674, -6384, -9517, -5320, -2400, -2041, 5259, -8239, -8213, 551, 5296, -2794, -5794, -1918, 2588, -4354, -8396, -7180, -7890, -7289, 4223, 4419, 3578, -8550, -7892, 1933, -6768, -1941, 4097, -3581, 1181, 2573, -2990, -5233, -8161, 6766, 158, -9622, 9923 };
        int[] y = { -8150, -2487, -4485, -2922, 9718, -8110, 4306, 7797, 5174, 5103, -1903, 3845, 2782, -1564, -5605, 4033, 1405, 5431, -806, 1739, -1441, -7233, -5968, 5699, -3098, 1393, -7439, 1566, 4762, -4590, -7907, -8391, 6787, -5330, 4915, -9461, 5250, -8803, 5502, -2163, -644, -947, -6673, 5309, -7920, -4330, 3073, -7040 };
        assertEquals(266789792539L, turretplacement.count(x, y));
    }

    @Test
    public void case61() {
        int[] x = { 9847, -687, 1027, 9111, -4559, 4646, 8343, -5091, 7074, -3579, 1655, -4020, -8473, 8376, -1192, -719, -4592, -7969, 8930, 6948, 8118, 2429, 7454, -8519, 9664, 7551, -8758, 1594, 9930, -2563, -5402, -5942, 4914, 3841, -8022, 99, -8801, -4830, 6770, -3000, 2938, -8114, -7908, -5769, 7619, -8862 };
        int[] y = { -1335, -8446, 4627, -3097, -3210, 6944, -81, 3216, 4589, 2412, 3106, -9323, -2220, -8370, 2425, 9296, -2912, 5048, 2055, 867, 1586, -1322, -935, 5218, -9126, -6696, 839, 7080, 4972, 3760, 5517, 6348, 7576, 601, -737, -9386, 6928, -2581, -7478, -670, -1132, 2438, -1830, -7191, -628, -9778 };
        assertEquals(290607760511L, turretplacement.count(x, y));
    }

    @Test
    public void case62() {
        int[] x = { -5252, 8348, 2087, 8821, -8209, -8825, -5722, -5468, 5461, -3017, 985, 9390, -4805, -5724, -3649, -5872, -4634, -5795, -1559, 2855, 2846, -4367, 1253, -1678, 2478, -8019, -3265, -7879, 7542, 9817, 9071, -2723, 9401, 2434, 1049, -7082, 6198, 1258, 9342, 8352, 3275, 41, 5462, -2950, 9535, 6227, -1959, 766, 9434, -4865 };
        int[] y = { -1808, -7482, 3574, -2302, 73, 5111, 8128, 5688, 2663, -719, -1298, -4613, 9781, -529, -3005, 8775, 6255, 8714, -3816, 4667, -192, -7433, 707, -3799, 3374, -8953, 84, -844, 2284, -6262, -2970, 576, 7801, -7917, -6388, 7275, 5291, 3012, 8213, 4329, 8128, -8436, -2117, 6963, 7795, -5154, 8640, 8434, 5961, -9750 };
        assertEquals(333471470227L, turretplacement.count(x, y));
    }

    @Test
    public void case63() {
        int[] x = { 9398, -7074, 3638, 7605, -7388, 5662, 4027, 7504, 5018, -8963, 3380, 3625, -8340, -119, 6537, -8189, 563, -1962, 8447, -5740, 4481, 1867, -7786, -7616, 4090, 7469, 2673, 7035, -1291, 1007, -3926, 7677, -4725, 8518, 1685, 1143, 3772, 1021, -4515, -1719, 5880, -1997, -298, 7368, -7931, -630, 7514, -6218, -2275 };
        int[] y = { -685, -6911, 5666, 5106, -5074, 4527, -7357, 6296, 3634, 5241, 5624, 1957, -874, -6449, -5047, -2489, 3072, 1197, 9379, 9048, 8698, 5234, -6902, -6086, -3790, -4702, -4239, -950, -7960, 9870, -1953, 3334, 3824, -2756, -3029, -2396, -2668, 6800, 9808, -3932, -7844, -2557, 8722, 9901, -538, -4261, -6887, -3059, 1793 };
        assertEquals(294882299383L, turretplacement.count(x, y));
    }

    @Test
    public void case64() {
        int[] x = { -215, 3524, -1804, -9307, 689, -1134, 3460, -289, 2038, -769, -9855, 6710, -9147, 5921, 6841, -9723, 7662, -8170, 791, 279, -6728, -6883, 6905, -7422, 4390, -2252, -8337, 7672, -7532, 6698, 8877, 9500, -2794, -4937, -8075, -9885, 3575, -3957, 2023, 7426, -6496, -9965, -1542, -4681, 1331, 3164, 4297, 6533 };
        int[] y = { 268, 1572, -6650, -967, -2940, -50, 5293, -929, 6501, -6842, 1497, -9936, -563, -4255, -6422, -7393, -2269, -3267, -1128, 5136, 2278, 7143, 9611, -1812, 8803, 5651, -8779, -6029, 8207, 6986, 856, -8021, 3256, -7937, -5516, -5933, 4764, -7065, -4341, 4220, -1086, 3793, -3946, 4765, 7001, 3426, 1461, 7740 };
        assertEquals(305500288766L, turretplacement.count(x, y));
    }

    @Test
    public void case65() {
        int[] x = { 3664, -5092, -1937, 5755, 4192, 3540, -4178, -3956, 9489, 3210, -1548, 2845, -3495, 2649, -9415, 3984, -8843, -9453, -1095, 7071, 5761, 2374, 4922, -5884, 6549, 8420, 498, -3386, -6222, 3644, 1612, 949, 5201, -518, 5169, -817, -3867, 2141, -8329, 1641, -8504, -4694, -4120, 2563, 2825, 6259, 1943, 5240 };
        int[] y = { -5173, -9243, -3086, 9174, -3419, 6554, -5044, -5378, 2914, 8678, -8992, -7645, 9193, 2584, 9887, 2946, -3431, 3206, -3177, 5495, 7129, 1962, -8719, -7223, -9683, -3692, 2320, -2430, -1816, -4186, -6499, -62, 5567, 7457, -248, -6580, -7032, -8883, 2308, 6674, 2408, -6463, 6059, -3971, 2121, 7267, 1944, -7555 };
        assertEquals(276629680854L, turretplacement.count(x, y));
    }

    @Test
    public void case66() {
        int[] x = { -9714, 9923, -2339, 2337, -5132, 2978, 5615, -325, -8149, -5193, -8129, -1321, -8205, 6054, 3854, -8192, -2727, -5246, -4697, 6311, 5155, 4658, 5364, -3269, -6447, -8187, -2700, 9563, -6863, 4983, -1703, -5072, -7288, 7671, -9681, 727, -746, 1637, 4055, 6243, 5560, 4798, -6444, 1225, -2930, -4778, -7447, 7284, -8459 };
        int[] y = { 7319, 8493, 9355, -4006, -8318, 8696, -2034, -7340, -1186, 4279, 9411, 5903, 5111, 967, 1686, -5560, 6294, 762, -138, -7564, -6832, 5915, 8799, -6721, -2015, -5348, 1025, 7473, -3519, 9599, -4570, 2345, 2044, -5154, 1709, -8302, -5909, -69, -4671, 2398, 7650, 9326, -3796, -784, -2593, -6401, -2896, 3205, -3654 };
        assertEquals(313229365225L, turretplacement.count(x, y));
    }

    @Test
    public void case67() {
        int[] x = { -5187, -2295, 9176, 2179, -4403, -8199, -8077, -970, -5264, -7190, 816, -9772, 7073, 6095, 4767, 5623, 7130, -1185, -8739, -8372, 9061, 2064, 2789, 1245, 6072, -1354, 70, 1642, -3164, 3918, 8518, 6730, -3302, 708, 9045, -8025, 2915, -7569, 7696, 5355, 6748, -6430, -3680, 8415, 1509, 564 };
        int[] y = { -1685, 7423, -9975, -1975, 5061, -6984, 5888, -5629, 2497, 7325, 931, 327, -6670, -8854, 54, 4049, 328, -868, -6960, 7506, 2821, 5170, -650, 9986, -4916, -1004, -3872, 8575, 8736, 6135, 1279, 4760, 2208, -4185, 4456, -3248, 1168, -9729, -4627, -5058, -874, 6414, -3253, 3670, 3055, 6497 };
        assertEquals(260878413182L, turretplacement.count(x, y));
    }

    @Test
    public void case68() {
        int[] x = { -8690, 4255, -2803, -5997, 5449, -7361, -8766, -906, -5664, 3061, -2361, 5746, 1532, 1262, -5329, -7492, -7924, -4032, -2145, 6154, -2806, 3341, 6784, 9, -298, -7053, -3706, -2870, -3994, 4142, 4666, 8927, 7421, 1837, 9011, 2941, 9228, 2208, 2798, 1833, 9590, 5779, -1196, -325, 2869, 7734, -4781, -589, -8458 };
        int[] y = { 7229, -938, 1118, 6220, 6952, 4671, 2699, -7967, 2960, -6426, 7402, 4578, -8379, 4335, 2934, -7244, -6073, -5210, -7281, 5220, 2964, -9750, -7791, -1784, -6755, 8465, 3499, -4933, -2501, 1682, 6340, 6300, -345, 273, -6313, 7200, -4040, -4774, -4214, -7884, -5313, -7930, 4247, -7481, 8766, 8786, 4860, 2535, -5921 };
        assertEquals(299020356246L, turretplacement.count(x, y));
    }

    @Test
    public void case69() {
        int[] x = { 7, 12, -10, 1, 12, 15, -9, -3, -16, 20, -18, -12, -18, -18, 17, -16, -17, -8, 8, 6, -7, 20, -9, 19, 11, 13, -20, 15, 19, -14, 7, -11, -10, 5, -8, -7, -15, -17, -15, -16, -16, 12, 1, 2, -19, 9, -7, 9, 0, -9 };
        int[] y = { 18, -7, -19, -8, 7, -12, -1, -17, 1, 19, -4, 15, -5, -1, 5, 9, 10, -3, -3, -12, 7, -4, 14, -17, -5, 4, -19, -6, -8, 13, 1, 11, 8, 6, 5, -20, -14, -15, 9, 8, -19, 1, 9, 11, 0, 5, 13, 6, 16, -4 };
        assertEquals(1342241L, turretplacement.count(x, y));
    }

    @Test
    public void case70() {
        int[] x = { 18, -3, 12, 16, -2, -11, -8, 14, -1, -3, 4, -13, 16, -4, -3, -5, -12, -17, 16, 13, -5, 20, 20, -3, -4, -9, -14, 13, -1, 19, 9, -5, -14, 12, -16, 20, 10, -19, -5, 13, -1, 19, 17, -17, 0, 12, -12, -11 };
        int[] y = { -4, -19, -19, -15, 18, -6, -14, 10, 8, -4, 4, -19, -18, -11, 0, -8, 10, 4, -6, 16, 10, -5, -1, -6, 8, 2, -6, 1, 19, -18, 15, 16, 13, 16, -18, 14, 7, 1, 17, -18, -3, 15, -9, 5, -16, -9, -20, -15 };
        assertEquals(1335841L, turretplacement.count(x, y));
    }

    @Test
    public void case71() {
        int[] x = { -10, -17, -17, 16, -17, -15, -14, -4, 0, -16, 12, 6, 0, -3, 10, 12, 12, -12, 12, -11, -18, -7, -9, 15, -3, 7, 9, -1, -16, 16, 4, -5, 2, 5, 11, -20, -10, -19, -14, -18, 5, -10, 17, 9, 7, 0, -5 };
        int[] y = { 14, 17, 7, -14, 15, 5, 1, 6, 1, 20, 17, 15, 16, 16, -17, -1, 1, 3, 3, -10, 5, -3, -14, -16, 14, 13, 18, -1, -19, 6, -15, 0, 17, 16, -18, -18, -12, 6, -5, -9, -3, 13, -16, -12, 12, -12, -19 };
        assertEquals(1221256L, turretplacement.count(x, y));
    }

    @Test
    public void case72() {
        int[] x = { -20, 8, 6, -14, 3, 20, -5, -14, -7, -12, 14, -4, 18, -11, -13, -17, -9, -3, -15, 19, 19, -16, -9, 19, -11, -19, 15, 11, -1, 17, -6, -1, 11, 13, 6, 20, -18, 1, -4, -17, 5, 20, 8, -18, 5, -10, 20, 9, -18, 13 };
        int[] y = { 6, -12, -4, -15, -10, -11, -10, -9, 8, 16, -4, -6, 19, 4, -10, -3, -10, -10, -7, 6, -2, -8, 19, -14, 20, -6, 7, 12, 3, -2, -9, 6, 11, 14, -20, -7, 19, -7, 11, -13, 9, -17, 20, -7, 6, 11, -16, -14, -2, 19 };
        assertEquals(1487015L, turretplacement.count(x, y));
    }

    @Test
    public void case73() {
        int[] x = { 10, 18, 10, -13, 12, 13, 17, -17, 12, 0, -9, -5, 14, -13, -20, 9, 4, -11, 10, -17, 20, 7, 5, 13, 4, -12, -12, -1, 2, -2, 6, 17, 20, -11, 20, 17, 3, -2, -16, -15, -19, 20, 12, -13, -19, 10, -6, 15, 2 };
        int[] y = { -15, -16, 16, -1, 12, -16, 18, -8, -10, -7, 14, -12, -4, -17, -17, 11, 13, -2, 6, 12, 12, -15, -7, -9, -5, -11, -10, 1, 11, 10, -6, 16, 11, 15, -14, 10, 4, -3, -17, -14, -7, -5, 1, -7, -17, 1, 4, 8, 7 };
        assertEquals(1305133L, turretplacement.count(x, y));
    }

    @Test
    public void case74() {
        int[] x = { -5, 3, 11, 2, -1, 16, -14, -16, 16, -12, -15, 14, 6, 5, 7, -16, 13, 15, 9, -3, 16, 12, 15, 5, -19, -4, -3, -17, 8, -20, 8, 11, -7, -7, -18, -15, -17, 9, 0, -11, -10, 6, 7, -18, 3, -12, 0, 17, -9, 14 };
        int[] y = { -5, 12, -14, 9, -1, 10, -3, -3, 3, 20, -15, 20, -4, -5, 20, 20, 5, -8, 9, -8, 5, 10, 20, 1, -11, -4, -16, -15, 19, -17, 1, 11, 1, -7, 9, -3, 2, 5, 19, 7, 8, -2, 10, -7, 1, -20, -17, 20, 2, 12 };
        assertEquals(1280191L, turretplacement.count(x, y));
    }

    @Test
    public void case75() {
        int[] x = { 4, -15, -17, -6, 1, -17, -18, 16, 16, 5, -17, -18, 13, 13, 7, 14, 0, -3, -11, -2, 12, -11, 20, -1, -16, -1, 1, -14, 11, 2, 2, 6, -6, 10, -15, 10, 4, -2, 4, -8, -11, 10, -19, -12, -6 };
        int[] y = { 0, 14, -10, -13, 0, 10, -8, 2, 9, 9, -19, -5, -7, -9, 19, 8, -12, -19, -1, -19, -8, 17, -8, -3, -9, 5, 16, 6, -18, -15, -17, 13, -2, 17, 8, 3, -17, 12, 20, 2, -11, -19, -3, 3, 20 };
        assertEquals(1046647L, turretplacement.count(x, y));
    }

    @Test
    public void case76() {
        int[] x = { 1, 2, 1, -7, -11, -12, 0, 9, 8, 12, -8, -7, -8, 13, -1, 19, -15, -1, -17, -5, 17, -14, 8, -17, -15, 1, -7, -11, 6, 6, 19, 15, 20, 12, -9, 1, 2, 6, -12, -4, 9, -10, 0, 11, 18, -17, 1, 9, 15, -20 };
        int[] y = { -3, 16, 20, -18, -2, 9, 4, 20, -18, -4, -8, 3, -20, 17, -5, -3, -20, -18, 6, 14, 9, 3, 9, 10, -8, 7, 12, -13, 14, 11, 12, -10, 10, -19, -10, 1, -16, 7, -12, 3, -19, 11, -6, 12, 8, 1, 18, -2, -12, 2 };
        assertEquals(1277878L, turretplacement.count(x, y));
    }

    @Test
    public void case77() {
        int[] x = { 6, -7, -4, -4, 10, 14, 14, 5, 14, -17, -4, -12, -5, -7, 11, -17, -16, 13, -10, 0, 2, -12, 6, 16, -17, 11, 1, -19, -9, 18, -17, -19, 20, 1, 19, -19, -9, 15, 0, -12, -2, -13, 13, 5, -15, -9, -18 };
        int[] y = { 7, 9, 16, -19, -8, -15, -8, -2, -12, -6, 12, -1, 16, -18, 9, 6, 1, 1, 16, -6, 1, 17, -11, 12, -2, 7, -6, 9, -13, 5, 15, -8, -18, 15, -13, 4, 20, -1, -3, 20, -11, -8, 12, -14, 11, -1, -6 };
        assertEquals(1162601L, turretplacement.count(x, y));
    }

    @Test
    public void case78() {
        int[] x = { -2, -11, -17, 2, 3, 11, 15, 8, 15, -20, -1, 10, 9, 15, 8, -8, -15, -5, -20, -5, -7, 6, 9, 13, 9, 16, -14, 15, 4, -15, -3, 3, -11, -1, 10, -2, -8, -17, 13, 6, 9, 5, 19, 8, 11, -10, -4, 7, -4 };
        int[] y = { 7, -16, 7, 20, -20, -6, 20, 7, -10, 11, -8, 15, 12, -5, -2, 1, -6, 14, 6, 18, -11, 2, 5, 5, 20, 15, 3, 18, -1, -3, 2, 3, -5, 5, 2, -20, 16, -15, -13, 10, -11, 11, 15, -4, -4, -4, 20, 6, -1 };
        assertEquals(1079192L, turretplacement.count(x, y));
    }

    @Test
    public void case79() {
        int[] x = { -4, -1, 3, -9, -5, -9, 19, -14, -15, 4, -13, -8, 7, -18, -16, -3, 9, -6, 20, -3, -6, 14, -8, -2, -2, -4, -5, 7, 1, 9, -13, 5, -1, -4, -19, 19, -4, 7, 7, -10, -13, 12, -15, 20, -1 };
        int[] y = { 16, -2, -3, 11, -6, -14, -19, -14, 2, -3, -2, 10, -12, -1, -13, -7, 14, 13, -20, 7, -5, -2, -17, 8, -20, -9, 16, -17, 6, -5, 0, 8, -18, -1, 10, 8, 10, 15, 16, 6, -15, -13, 20, 13, 10 };
        assertEquals(957150L, turretplacement.count(x, y));
    }

    @Test
    public void case80() {
        int[] x = { 15, -15, -12, -6, 12, -8, -1, 17, 1, -6, 14, 2, -7, -8, 5, 0, 8, 12, 2, -6, -2, 12, 10, -4, 19, -7, 0, -9, 17, 12, 12, 10, -12, 6, -19, 18, 0, 3, -6, 20, 20, -17, 14, -16, 13, 4 };
        int[] y = { -19, -11, -10, 4, -6, -11, -14, -3, -16, -10, -17, -2, 15, -12, 4, -17, 3, -11, -5, -5, -1, 8, 20, 10, 12, -1, 10, 13, -12, 5, -18, -13, 3, -15, 1, 9, -9, 16, -17, -6, -11, 3, 14, -8, 6, 4 };
        assertEquals(949557L, turretplacement.count(x, y));
    }

    @Test
    public void case81() {
        int[] x = { 9988, -9995, -9995, 9997, 9999, 9991, -9983, 9995, -9994, 9994, 9980, 9985, 9982, -10000, -9993, 9987, -9984, -9998, -9988, 9995, 9980, 9994, 9980, 9990, -9984, 9995, -9992, -9998, 9992, 9981, -9984, -9997, -9982, -9982, 9997, -9998, 9996, -9986, -9997, 9987, 9999, 9988, -9998, 9986, -9999, -9980, -9989 };
        int[] y = { -9999, -9995, 9995, 9982, 9998, 9991, -9984, -9986, -9990, 9989, 9980, -9982, -9982, 9980, 9988, -9989, -9985, -9983, -9995, 9983, 9985, -9987, 9984, 9997, -9982, -9984, 9990, 9983, -9995, 9991, -9980, -9994, -9989, 9980, -9985, -9981, 9988, -9989, -9983, -9985, -9984, 9997, 9998, 9986, -9987, 9983, 9997 };
        assertEquals(879656092170L, turretplacement.count(x, y));
    }

    @Test
    public void case82() {
        int[] x = { 9992, -9984, -9986, 9991, -9993, 9992, 9987, 9981, 9986, 9988, 9980, 9985, -9997, 9990, 9998, -9986, -9984, 9993, -9981, -9989, 9980, -9986, -9998, 9987, 9985, -9999, -9997, -9990, -9998, 9982, 9995, -9995, 9991, -9988, -9984, 9992, -9980, 9999, 9989, -9985, -9991, 9990, 9988, -9987, -9981, 9997, -9993, -9988 };
        int[] y = { 9988, 9999, -9998, -9998, 9994, 9994, -9998, 9994, 9985, 9999, -9994, -10000, 9990, 9997, 9994, 9997, -9991, 9983, 9980, -9999, 9993, -9984, 9986, 9994, 9991, -9983, -9989, 9986, -9987, 9983, 9986, -9989, -9991, 9992, 9991, 9980, -9988, 10000, 9988, 9988, -9997, -9998, -9984, -9993, -9995, -9985, -9992, -9987 };
        assertEquals(916559626895L, turretplacement.count(x, y));
    }

    @Test
    public void case83() {
        int[] x = { 9986, 9991, -9992, -9986, 9993, 9993, 9988, 9985, -9994, -9983, -9983, 9984, -9993, -9981, -9981, -9983, -9988, 9996, -9991, 9984, 9986, -9984, -9985, 10000, -9994, 9998, -9981, 9983, -9987, -9993, 9991, -9981, 9996, -9984, 9984, -9995, -9984, 9997, -9982, -9991, 9980, -9988, -9984, -9999, 9982, -9984, 9992, -9988, -9991, -9984 };
        int[] y = { 9988, -9995, -9998, 9986, -9980, 9983, -9993, -9984, -9989, -10000, -9998, 9981, -9980, 9997, -9994, 9992, 9995, 9988, -9980, -9989, -9980, 9984, -9993, 9989, 9983, 9990, 9981, 9981, -9985, 9988, -9993, 9985, 9997, -9988, 9991, -9993, -9996, -9983, -9992, -9988, 9990, -9982, 9995, 9985, -9992, -9998, 9991, 10000, 9986, 9985 };
        assertEquals(977756225868L, turretplacement.count(x, y));
    }

    @Test
    public void case84() {
        int[] x = { -9998, 9997, -9981, -9985, -9986, -9992, 9990, 9983, 9991, 9982, -9985, -9997, 9983, -9997, 9985, -9993, -9993, 9987, 9983, -9985, -9987, -9983, 9991, 9997, -9989, 9997, -9996, -9999, 9989, 9994, 9992, 9990, 9991, 9991, 9992, -9991, 10000, -9997, -9996, -9987, -9999, 9997, -9991, -9988, 9985, 9994, 9997 };
        int[] y = { -9999, -9994, -9982, -9996, 9989, 9991, -9992, -9991, -9985, -9996, 9984, -9983, -9982, -9994, -9992, -9985, 9997, -9991, 9981, -9987, 9985, -9995, -10000, -9986, -9986, 9984, 9984, 9995, 9991, -9985, 9992, 9990, 9983, -9986, -9994, -9991, -10000, -9989, -9984, 9998, 9981, -9997, 9998, -9993, 9989, -9991, -9989 };
        assertEquals(847934414248L, turretplacement.count(x, y));
    }

    @Test
    public void case85() {
        int[] x = { 9989, -9995, 9985, 9981, -9991, 9995, 9991, 9989, 9985, 10000, -9986, -9992, 9985, 9983, 9982, -9994, 9991, -9982, 9993, -9991, 10000, 9998, 9989, 9999, 9994, 9980, -9992, -9992, -9984, -9996, -9999, 9988, -9984, 9987, 9999, 9985, -9981, 9982, -9988, -10000, 9984, 9986, 9992, -9999, 9986, -9995, 9985, -9989, 9987 };
        int[] y = { 9994, -9993, 9994, 9980, -9996, 9996, -9991, -9981, 10000, 9982, 9986, -9980, 9997, -9989, 9995, 9984, 9995, 9982, -9980, 9994, 10000, -9997, 9998, -9990, 9987, -9983, -9989, 9984, -9994, 9982, -9988, 9991, -9991, -9997, 9998, -9986, -9993, -10000, 9989, 9993, 9997, 9985, 9993, -9983, -9985, -9992, -9980, 9981, 9984 };
        assertEquals(929285128106L, turretplacement.count(x, y));
    }

    @Test
    public void case86() {
        int[] x = { -9996, -9987, 9982, 9997, 9982, 9995, 10000, 9998, 9998, -9982, -9997, 9990, 9991, -9988, 9981, -9980, -9985, 9990, -9990, 9992, 9999, 9999, -9987, -9996, 9987, 9981, -9997, 9986, -9998, 9997, -9987, 9982, 9992, 9992, -10000, -9987, -9980, 9992, -9983, -9984, 9987, -9989, 9983, -9982, -10000, 9988, 9988 };
        int[] y = { -9994, -9997, 9998, -9997, 9996, 9989, -9984, 9985, -9987, -9989, -9996, -9984, -9985, -9999, -9998, -9984, -9997, 10000, -9999, -9986, -9996, -9984, 9984, -9987, -9987, 9989, 9998, -9991, -9982, -9993, 10000, 9986, -9981, 9993, 9987, 9997, 9995, 9997, 9981, -9987, -9998, -9991, -9983, 9987, -10000, -9986, -9982 };
        assertEquals(843152478953L, turretplacement.count(x, y));
    }

    @Test
    public void case87() {
        int[] x = { 9993, -9987, 10000, -9984, -9990, 9988, 9991, 9991, -9988, -9989, 9989, 9984, -9997, -9998, 9998, 9988, 9991, 9981, 9992, -9985, 9992, 9992, -9996, -9984, 9992, 9994, -9996, -9982, 9983, 9998, -9997, 9988, -9995, 9994, -9987, -9987, 9993, -9998, 9985, 9999, 9980, -9983, 9994, 9982, 9980, -9981, -9988, -9982, 9994, -9989 };
        int[] y = { 9999, -9998, 9993, -9986, -9995, -9989, 9996, -9992, 9994, -9986, 9999, 9992, 9997, 9999, -9984, -9991, 9990, -9995, -9990, 9993, -9999, 9991, 9994, -9997, -9994, -10000, -9996, -9990, -9995, 9988, 9981, 9996, 9983, -9992, -9990, -9993, -9984, 9982, 9988, 9988, 9993, 9983, 9990, -9984, -9997, -9986, -9981, 9985, 9984, -9997 };
        assertEquals(990075409028L, turretplacement.count(x, y));
    }

    @Test
    public void case88() {
        int[] x = { -9984, -10000, 9984, 9980, 9981, -9982, -9982, 9990, -9999, -9984, 9987, -9992, -9985, 9992, -10000, -9981, 9983, 9992, 9983, 9997, -9986, -9994, -9980, 9986, 9998, -9986, 9983, 9983, -9999, 9981, 9982, -9991, -9988, 9996, -9994, -9984, 9998, -9994, -10000, -9991, 9983, 9991, 9983, -9990, -9997, 9980, -9987, 9995, 9983, 9980 };
        int[] y = { 9982, -9992, 9994, 9999, 9998, 9994, 9983, 9986, -9994, -10000, -9990, -9987, -9993, 9995, -9988, 10000, 9989, 9993, -9999, -9983, -9989, -9980, -9996, 9980, 9987, 9996, -9984, -9981, 9999, 9983, -9994, -9981, 9985, 9991, 9985, 9997, 9998, -9986, -9993, 9989, -9997, 9996, 9981, 9986, -9990, -9996, -9988, -9985, 9998, 9985 };
        assertEquals(994645994088L, turretplacement.count(x, y));
    }

    @Test
    public void case89() {
        int[] x = { 9996, 9988, 9982, -9993, 9990, -9980, 9982, -9992, -10000, 9984, -9986, -9988, 9997, -9996, -9986, 9980, -9998, -9995, 9981, 9982, 9993, -9982, -9981, 9980, -9992, -9999, 9986, 9994, -9986, 9997, -9999, 9989, 9992, 9985, -9986, -9991, -9987, 9987, -9995, 9981, -9991, 9984, 9980, -9989, -9987, -9997, 9995, -9992, -9981, -9991 };
        int[] y = { 9985, -9982, -9995, 9989, -9999, -9989, -9980, -9998, -9987, -9986, -9997, 9982, 9992, -9989, -9995, -9981, 9990, -9982, -9982, -10000, 9989, -9992, 9984, -9985, 9988, 9992, 9994, 9982, 9993, 9987, -9987, 9999, 9998, -9985, 9997, -9990, 9995, 9984, 9988, 9984, -9987, 9991, -9990, 9980, -9999, 9998, 9997, 9999, 9999, -9997 };
        assertEquals(993876083882L, turretplacement.count(x, y));
    }

    @Test
    public void case90() {
        int[] x = { -9999, -9998, -9990, 9992, 9987, 9987, -9986, 9990, 9982, 10000, -9997, 9989, -9997, -9982, -9997, -9987, -9984, 9983, 9986, 9988, 9996, 9997, 9989, -10000, -9998, 9981, -9986, 9994, -9980, -9982, -9985, 9986, 9996, -9981, -9981, -9980, -9999, -9995, -9992, -9990, 10000, -9986, 9999, 9990, -9981, 9986, 9993, -9989, 9985, -9998 };
        int[] y = { -10000, -9980, -9990, 9997, 9990, 9983, 9989, 9992, -9996, -9986, 9984, 9980, 9992, -9986, 9998, 9983, 9984, 9987, -9991, 9981, 9999, 9985, -9991, 9998, -9994, 9989, 9998, 9988, -9996, 9992, 9986, -9994, 9987, 9992, -9987, 9987, 9994, 9988, 9983, 9982, 9997, -9997, 9994, 9994, 9984, 9983, -9981, -9997, 10000, -9997 };
        assertEquals(930140960751L, turretplacement.count(x, y));
    }

    @Test
    public void case91() {
        int[] x = { 9984, -9998, -9987, 9986, -9997, -9983, 9989, 9997, -9988, 9980, -9994, -9988, -9980, -9984, 9993, 9985, 9987, 9980, -10000, -9988, 9987, -9996, 9999, 9990, -9985, -9990, -9989, 9990, 9996, 9985, 9994, 9998, -9990, 9988, -9994, -9993, 9998, 10000, 9986, 9987, -9988, 9980, 9982, 9990, -9996, -9981, 9995, -9995 };
        int[] y = { -9991, 9989, 9998, 9983, 10000, 9987, 9995, 9985, 9995, 9993, 9989, -10000, -9998, 9980, 9995, -9980, 9989, -9998, -10000, -9999, 9983, -9999, -9982, 9992, -9998, 9996, 9998, 9994, 9985, -9982, -9997, 10000, 9985, -9994, 9986, 9995, 9990, 9980, -9993, 9987, -9997, 10000, -9986, 9983, -10000, -9986, -9986, -9993 };
        assertEquals(903897650918L, turretplacement.count(x, y));
    }

    @Test
    public void case92() {
        int[] x = { 9989, 10000, -9981, 9995, 9998, -9999, -9990, 9991, 9991, -9985, -9997, 9985, 9996, -9992, 9998, -9991, 9989, 9995, 9985, 9988, -9992, 9980, -9997, -9986, -9985, -9988, -9982, 9981, -9983, 9996, -9986, -9994, 9993, -9988, 9981, -9995, -9987, 9991, -9985, -9984, -9998, -9988, -9998, 9990, -9991, 9985, -9985, 10000, 9994, -9987 };
        int[] y = { 9986, -9982, -9997, -9982, -9999, -9984, 9981, -9989, 9991, -9995, 9989, 9998, 9993, 9989, -9989, 9988, 9999, 9981, -9987, -9987, -9999, 9997, -9998, -9985, 9994, 9993, 9987, 9981, 9991, 9991, -9996, 9985, 9992, -9985, 9983, 10000, -9980, 9999, -9989, -9989, 9993, -9993, -9984, -9998, 9992, 9985, 10000, 9989, -9991, -9993 };
        assertEquals(991633794590L, turretplacement.count(x, y));
    }

    @Test
    public void case93() {
        int[] x = { -9987, -10000, 9999, 9983, 9996, 9987, -9985, 9980, 9990, 9994, 9981, 9981, -9980, -9993, -9999, 9997, -9999, 9993, -9991, -9998, -9993, 9991, 9990, 9994, 9997, 9995, 9987, -9996, 9991, 9990, 9983, 9980, -9995, -9982, -9997, -9991, -9988, 9991, 9988, -9987, -9985, 9994, 9983, 9995, 9995, 9995, 9998 };
        int[] y = { -9999, -9990, 9997, -9996, -9995, -9991, 9992, 9991, -9985, 9989, 9998, -9987, -9984, -9989, 9991, -9986, 9984, 9983, 9990, 9988, 9999, 9983, 9983, 9993, -9999, 9999, -10000, 9995, -9984, 9981, 9995, 9995, -9988, -9991, -9983, -9996, 9991, -9997, -9999, -9987, -9994, 9992, 9998, -9989, 9989, 9997, -9984 };
        assertEquals(857633687705L, turretplacement.count(x, y));
    }

    @Test
    public void case94() {
        int[] x = { -9995, 9996, -9986, -9997, 9996, 9987, 9998, 9988, -9984, 9985, -9991, 9987, 9989, 9980, 9984, -9982, -9999, -9993, -9997, -9984, -9988, -9987, -9994, 10000, -9982, 9988, 9984, 9989, -9989, 9991, 9987, -9991, -9988, -9981, 9998, 9998, -9995, -9999, 9988, -9989, 10000, -10000, -9997, 9994, 9996, -9981, 9985, 9993, -9984, 9983 };
        int[] y = { 9980, -9992, 9989, -10000, 9982, 9980, -9997, -9982, -9995, 9984, -9982, -9996, -9986, 9990, -9981, -9989, -9985, 9994, -9998, -9987, -9999, 9999, -9999, 9982, -9980, 9993, -9983, -9987, -9986, -9997, -9995, -9981, -9992, 9986, 9983, 9985, -9988, 9987, -9981, -9998, 9999, 9995, 9989, 9996, 9990, 9989, 9980, 10000, -9984, 9993 };
        assertEquals(994739516881L, turretplacement.count(x, y));
    }

    @Test
    public void case95() {
        int[] x = { 9998, 9981, 9999, -10000, -9983, 9992, 9994, 9985, 9999, 9990, -9980, -9980, -9990, -9996, -9991, -9981, -9985, -9982, -9982, 9994, -9981, 9989, -9999, -9988, 9999, -9981, -9988, -9991, -9994, 9989, -9991, 9984, 9987, 9994, 9994, 9994, 9992, 9990, -9981, 9983, 9984, 9980, -9981, -9987, -10000, -9982, 9982, 9980 };
        int[] y = { 9990, -9994, -9989, -9990, 9984, -9986, 9987, -9999, -9999, 9991, 9995, -9982, 9995, -9999, 9992, -9984, -9991, 9997, -9995, 9984, 9987, -9991, -9986, 9988, -9981, -9996, -9998, -9986, -9986, 9996, 9994, 9994, -9989, 10000, 9995, 9993, -9994, -9993, -9983, 9982, -9988, 9992, 9985, 9996, 9994, 9999, 9989, -9997 };
        assertEquals(919695834720L, turretplacement.count(x, y));
    }

    @Test
    public void case96() {
        int[] x = { -9994, 9987, -9981, -9994, 9987, -9987, 9986, 9986, -9993, 9990, -9998, 9993, -9980, 9986, 9986, 9988, 10000, -9980, -9984, -9993, -9996, 9984, -9998, -9983, 9992, 9997, 9993, 9990, 9980, -9999, -9998, 9994, 9980, -9984, 9991, 9986, -9997, -9985, 9994, 9987, -9985, -9986, -9981, 9992, -9987, -9987, 9983, 9990, -10000, 9990 };
        int[] y = { 9988, -9994, -9983, -9998, 9989, -9984, -9996, 9986, -9990, 9981, -9998, -9994, 10000, 9984, 9980, -10000, -9995, -9998, -10000, 9999, 9994, -10000, -9999, 9992, 10000, 9985, 9984, -9985, 9988, 9995, 9983, 9995, -10000, -9994, 9988, -9994, 9981, 9990, -9981, -9984, 9987, -9991, -9990, -9986, 9999, -9989, -9995, -9991, 9996, -9992 };
        assertEquals(994022179824L, turretplacement.count(x, y));
    }

    @Test
    public void case97() {
        int[] x = { -9997, 9994, 9980, -9998, 9992, -9987, -9989, -9990, -9992, 9988, -9992, 9995, 9993, -9987, -9990, 9996, 9985, 9998, 9984, 9994, 9983, 9980, -9996, 9981, 9982, 9996, 9991, 9981, 9994, -9986, 9985, 9993, 9994, -9981, -9994, -9985, 9986, -9994, -9998, -9982, 9988, 9987, 9990, 9985, -9994, -10000, 9991, -9987, -9992, 9981 };
        int[] y = { 9991, -9986, -9981, -9994, -9990, -9992, 9993, 9988, 9998, 10000, -9985, -9984, 9990, -9995, 9980, 9983, -9990, -9996, 9999, 9999, 9997, 9984, 9996, 9981, -10000, 9980, 9986, -9981, -9980, -10000, -9989, -9994, 9981, 9990, 9999, 9989, -9982, -9994, -9998, -9990, 9986, -10000, -9992, -10000, 9997, -9982, -9988, 9997, 9984, -9984 };
        assertEquals(984405649146L, turretplacement.count(x, y));
    }

    @Test
    public void case98() {
        int[] x = { 9983, 9991, -9986, -9988, -9981, 9987, -9990, 9987, 9993, -9981, -9981, -9986, -9988, -9995, -10000, -9997, -9993, 9990, 9987, 10000, -9990, -9997, -9985, -9991, -9994, 9987, -9988, -9991, 9991, 9988, -9995, 9994, -9984, -10000, 9980, 9981, -9999, 9993, 9981, -9997, 9995, 10000, 9993, -9982, 9996, 9994, 9983, 9991 };
        int[] y = { 9981, -10000, -9980, 9993, 9988, -9992, 9982, -9998, -9986, 9999, 9983, 9983, -9998, -9994, 9986, -9995, 9994, -9993, 10000, -9994, 9987, 9993, 9994, 9988, -9983, -9993, 9986, 9986, 9988, -9993, 9992, -9987, 9997, 9982, 9988, -9982, 9980, 9980, -9993, -9985, -9994, 9985, -9983, 9982, 9992, -9984, 9997, 9989 };
        assertEquals(906107214398L, turretplacement.count(x, y));
    }

    @Test
    public void case99() {
        int[] x = { 9987, -9981, 9994, 9999, -9994, -9994, 9983, -9989, 9987, 10000, -9980, 9983, -9998, 9985, -9995, 10000, -9988, 9990, -9998, -9990, 9999, 9992, -9985, -9994, 9992, 9991, -9982, 9998, 9997, 9983, 9980, -9990, 9994, 9980, -9999, 9994, -9995, -9985, 9982, 9995, -9980, -9997, -9984, -9990, -9991, -9983, -9996, 9990 };
        int[] y = { 10000, -9996, 9981, -9981, 9992, -9986, 9998, 9994, -9986, -9980, -9987, -9982, -9992, -9999, -9986, -9987, -9983, 9997, -9997, -9981, -9998, 9998, -9991, -9982, 10000, -9996, -9999, 9991, 9988, -9995, 9992, 9999, 9991, 9983, 9993, 9990, 9993, -9992, -9980, -9984, 9996, 9998, -9998, 9990, -9986, -9985, -9985, 9998 };
        assertEquals(912664950999L, turretplacement.count(x, y));
    }

    @Test
    public void case100() {
        int[] x = { 9995, 9992, 9996, 9989, -9987, -9990, -9983, 9984, 9980, -9999, 9999, -9985, -9991, 9980, 9997, -9991, 9996, 9981, 9994, 9983, 9987, 9981, -9984, -9998, 9992, 9980, -9991, -9987, 9984, -9992, 9993, -9988, 9992, 9991, 9983, 10000, 9991, -9992, -9987, -9993, -9990, 9990, -9999, -9996, 9990, -9998, 9984, 9989, 9985, 9993 };
        int[] y = { -9983, -9998, 9998, 9984, 9986, -9992, -10000, 9990, 9984, -9983, 9990, -9982, 9997, -9980, 9996, 10000, -9990, -9980, 9982, 9981, -9982, 9998, -9986, 9983, 9982, -9994, -9999, 10000, -9993, 9996, -9986, -9990, 9993, 9989, -9995, -9992, 9993, -9984, 9981, -9994, -9982, -9985, -9993, -9982, 9999, 9994, 9993, -9985, 9981, 9992 };
        assertEquals(977959829543L, turretplacement.count(x, y));
    }

    @Test
    public void case101() {
        int[] x = { 9998, -10000, 10000, 0 };
        int[] y = { 9998, 10000, 10000, 0 };
        assertEquals(2799564895L, turretplacement.count(x, y));
    }

    @Test
    public void case102() {
        int[] x = { -10000, 10000 };
        int[] y = { -10000, 10000 };
        assertEquals(1599941028L, turretplacement.count(x, y));
    }

    @Test
    public void case103() {
        int[] x = { 10000, 10000, -10000, -10000 };
        int[] y = { -10000, 10000, 10000, -10000 };
        assertEquals(6399802056L, turretplacement.count(x, y));
    }

    @Test
    public void case104() {
        int[] x = { -9900, -9901, -9902, -9903, -9904, -9905, -9906, -9907, -9908, -9909, -9910, -9911, -9912, -9913, -9914, -9915, -9916, -9917, -9918, -9919, -9920, -9921, -9922, -9923, -9924, 9925, 9926, 9927, 9928, 9929, 9930, 9931, 9932, 9933, 9934, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943, 9944, 9945, 9946, 9947, 9948, 9949 };
        int[] y = { -9900, -9901, -9902, -9903, -9904, -9905, -9906, -9907, -9908, -9909, -9910, -9911, -9912, -9913, -9914, -9915, -9916, -9917, -9918, -9919, -9920, -9921, -9922, -9923, -9924, 9925, 9926, 9927, 9928, 9929, 9930, 9931, 9932, 9933, 9934, 9935, 9936, 9937, 9938, 9939, 9940, 9941, 9942, 9943, 9944, 9945, 9946, 9947, 9948, 9949 };
        assertEquals(984922040968L, turretplacement.count(x, y));
    }

    @Test
    public void case105() {
        int[] x = { 10000, -10000 };
        int[] y = { 10000, -10000 };
        assertEquals(1599941028L, turretplacement.count(x, y));
    }

    @Test
    public void case106() {
        int[] x = { -9959, 8467, -3666, -3500, 9169, 5724, 1478, -642, -3038, -5536, -4295, -1855, -6719, 6827, -39, -9509, -7005, 1942, -5173, -4564, 2391, 4604, -6098, -9847, -9708, 2382, 7421, 8716, 9718, 9895, -4553, -8274, 4771, 1538, -8131, 9912, -4333, -3701, 7035, -106, -1297, -6189, 1322, 333, 7673, -5336, 5141, -2289, -1747, -3132 };
        int[] y = { -4453, -2356, 2662, 2757, -9963, 2859, -1277, -259, -2471, -9222, 2316, -6965, -7810, -8158, -9712, 106, -960, -1058, 9264, -7352, -2554, -6195, 5890, -3271, -5630, 5350, 5006, 1101, -5607, -6452, 9629, 2623, -5916, 9954, 8756, 1840, -5034, -2624, 3931, -3692, 6944, 2439, -5374, 1323, -4463, -8462, 6118, -7918, -7071, 6541 };
        assertEquals(335957442164L, turretplacement.count(x, y));
    }

    @Test
    public void case107() {
        int[] x = { -10000, 10000 };
        int[] y = { -9999, 9999 };
        assertEquals(1599771330L, turretplacement.count(x, y));
    }

    @Test
    public void case108() {
        int[] x = { -9928, -8894, -8263, -7989, -7684, -7677, -7545, -7427, -7324, -6608, -6497, -6376, -6231, -6103, -5954, -5180, -4963, -4499, -4190, -3328, -2334, -2120, -1640, -1413, -1225, -1184, -702, -700, -407, 435, 1021, 1811, 2322, 3749, 3798, 4486, 4564, 4921, 4936, 5037, 6171, 6356, 6412, 7109, 7255, 7289, 7536, 8978, 9352, 9438 };
        int[] y = { 3300, -669, 3425, -8458, -2497, -5004, 6583, -710, 4439, -1505, -2941, -4473, 903, 857, 1545, 6428, -2711, 3960, 9862, 772, 1036, -4869, 8707, 2569, 3900, 2615, 2077, -3434, 6514, 1505, 197, -6974, -32, -2743, -4485, 8830, 6178, 1046, 209, 6000, -2127, 8511, -5487, 4060, 9794, -5844, 2458, -5169, 3853, -2003 };
        assertEquals(273507323397L, turretplacement.count(x, y));
    }

    @Test
    public void case109() {
        int[] x = { -10000, -10000, 10000, 10000 };
        int[] y = { -10000, 10000, 10000, -10000 };
        assertEquals(6399802056L, turretplacement.count(x, y));
    }

    @Test
    public void case110() {
        int[] x = { 0, 0 };
        int[] y = { 0, 1 };
        assertEquals(1L, turretplacement.count(x, y));
    }

    @Test
    public void case111() {
        int[] x = { -9870, 982, -8910, 1656, -2883, 7595, -3585, -7053, 1125, -996, 4558, -6429, -7122, 8492, -8640, -4588, -3280, -7538, -4954, -2882, 1440, -2810, 3985, 1213, -2492, 251, -3430, 4779, 9816, -8320, 9651, 7995, -6408, -6266, 3310, -6021, -8006, 5561, 6092, 8489, 1288, -1535, -1336, -4108, 3863, -7235, -4636, 7639, -8850, -9574 };
        int[] y = { -9574, -9870, 982, -8910, 1656, -2883, 7595, -3585, -7053, 1125, -996, 4558, -6429, -7122, 8492, -8640, -4588, -3280, -7538, -4954, -2882, 1440, -2810, 3985, 1213, -2492, 251, -3430, 4779, 9816, -8320, 9651, 7995, -6408, -6266, 3310, -6021, -8006, 5561, 6092, 8489, 1288, -1535, -1336, -4108, 3863, -7235, -4636, 7639, -8850 };
        assertEquals(336539704246L, turretplacement.count(x, y));
    }

    @Test
    public void case112() {
        int[] x = { 10000, -10000 };
        int[] y = { -10000, 10000 };
        assertEquals(1599941028L, turretplacement.count(x, y));
    }

    @Test
    public void case113() {
        int[] x = { 10000, 10000, -10000, -10000 };
        int[] y = { 10000, -10000, 10000, -10000 };
        assertEquals(6399802056L, turretplacement.count(x, y));
    }

    @Test
    public void case114() {
        int[] x = { -10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980, -9979, -9978, -9977, -9976, 10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984, 9983, 9982, 9981, 9980, 9979, 9978, 9977, 9976 };
        int[] y = { -10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980, -9979, -9978, -9977, -9976, 10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984, 9983, 9982, 9981, 9980, 9979, 9978, 9977, 9976 };
        assertEquals(997567075690L, turretplacement.count(x, y));
    }

    @Test
    public void case115() {
        int[] x = { -10000, 10000 };
        int[] y = { 10000, -10000 };
        assertEquals(1599941028L, turretplacement.count(x, y));
    }

    @Test
    public void case116() {
        int[] x = { 10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984, 9983, 9982, 9981, 9980, 9979, 9978, 9977, 9976, -10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980, -9979, -9978, -9977, -9976 };
        int[] y = { 10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984, 9983, 9982, 9981, 9980, 9979, 9978, 9977, 9976, -10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980, -9979, -9978, -9977, -9976 };
        assertEquals(997567075690L, turretplacement.count(x, y));
    }

    @Test
    public void case117() {
        int[] x = { -9950, -9951, -9952, -9953, -9954, -9955, -9956, -9957, -9958, -9959, -9960, -9961, -9962, -9963, -9964, -9965, -9966, -9967, -9968, -9969, -9970, -9971, -9972, -9973, -9974, -9975, 9976, 9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999 };
        int[] y = { -9950, -9951, -9952, -9953, -9954, -9955, -9956, -9957, -9958, -9959, -9960, -9961, -9962, -9963, -9964, -9965, -9966, -9967, -9968, -9969, -9970, -9971, -9972, -9973, -9974, -9975, 9976, 9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999 };
        assertEquals(993379560565L, turretplacement.count(x, y));
    }

    @Test
    public void case118() {
        int[] x = { -10000, -10000, 10000, 10000 };
        int[] y = { -10000, 10000, -10000, 10000 };
        assertEquals(6399802056L, turretplacement.count(x, y));
    }

    @Test
    public void case119() {
        int[] x = { 9998, -10000, 10000, 0, 9999, -9999 };
        int[] y = { 9998, 10000, 10000, 0, -9999, 9999 };
        assertEquals(9998004595L, turretplacement.count(x, y));
    }

}
