package topc.test.search;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.search.*;

public class TheConsecutiveIntegersDivOneTest {
    TheConsecutiveIntegersDivOne theconsecutiveintegersdivone = new TheConsecutiveIntegersDivOne();

    @Test
    public void case1() {
        int[] numbers = { 4, 7, 47 };
        int k = 2;
        assertEquals(2, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case2() {
        int[] numbers = { 1, 100 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case3() {
        int[] numbers = { -96, -53, 82, -24, 6, -75 };
        int k = 2;
        assertEquals(20, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case4() {
        int[] numbers = { 64, -31, -56 };
        int k = 2;
        assertEquals(24, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case5() {
        int[] numbers = { 14, 36, 74 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case6() {
        int[] numbers = { 90, -7, 64 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case7() {
        int[] numbers = { 46, -27, 61, -5, -10, 76, -69 };
        int k = 2;
        assertEquals(4, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case8() {
        int[] numbers = { -4036084, 1701774, 8047434, 1831870, -3520376, 280315, 4644668, 3793537, -2992341, 8580060, -4998339, 2005181, 4145923, 3806082, -3547791, -2163303, 9204157, 4356001, -1265986, 9920261, -8401925, 2460129, 4316286, 8764845, 8378171, -4110207, -7938046, 9381494, -8827810, -8434384, 6667554, -6394899, 9290628, -8639799, 3784320 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case9() {
        int[] numbers = { 3058475, 6500668, 5686555, 7700535, 7000681, -819476, 5075232, 7884182, -2423417, 7122230, 8490054, 2608425, 5782155, -4045513, -4508667, -6777764, -805198, 2259833, 7572302 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case10() {
        int[] numbers = { -4845232, -5077278, -1696332, 9685053, -8008906, -2041580, -2825611, 7330935, -1994531, -5206896, -202206, -1506777, 8005773 };
        int k = 2;
        assertEquals(47048, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case11() {
        int[] numbers = { 905094, -9856209, -5067503, 2152352, 6069125, 6070805, -3078364, 3447730, 8533640, 8101663, 5627524, 7232490, 5409193, -6902965, -9001727, 7082618, -4761194, 9863063, 4156041, -6268386, -2551014, -1459606, 6848269, -2591702, -1581233, 4052341, -7692095, -251864, -6426888, 8421368, -9552201, 4005431, -9852381, -6312701, 1751043, 5428343, 3952329, -5260966, -6860219, -6470224, 6032682 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case12() {
        int[] numbers = { 146510, -6507615, -9321354, 7291401, -9981037, -5129098, -7749378, -9861405, -3815967, -9078887, -4008208, 8336304, -2815172, 3939575, 7619137, 9979105, -9200896, -9875413, 6373208, 8536028, -5326004, -92197, -5728645, 476981, 2795232, 1958488, -4819855, -5580132 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case13() {
        int[] numbers = { -5912096, -1271330, 235975, 7397958, 2234585, 3107177, -279730, 4522784, 252702, 671098, 5216584, -6262459, 3684610, 5943038, 6093587, 306116, 1115114 };
        int k = 2;
        assertEquals(16726, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case14() {
        int[] numbers = { -7171152, -1951591, 7430452, 6150290, 188178, -7644836, -9771874, 1084983, -9547982, 7787285, 4110722, -5730013, 3319082, -9473192, -4527117, -4454620, 1593764, -7333224, 5457830, -6898885, 631880, 9917676, 2764925, -2096374, -9466488, 7869233, 4804718 };
        int k = 2;
        assertEquals(6703, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case15() {
        int[] numbers = { 3494385, 1166379, 2963457, 884339, -2848806, -1624025, -5890830, -8613461, -4465603, -5835203, -4624055, -2134450 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case16() {
        int[] numbers = { 5395586, -3605164 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case17() {
        int[] numbers = { 1044336, -3513770, 7004648, 3861347, 1905495, -7764626, 7952512, 563395, 3593471, 4015264, 6103047, -6634600, -5147503, 1834570, 3673681, 2653668, -8784297, -3229981, -8522749, 9747920 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case18() {
        int[] numbers = { -6469198, 520794, -2777844, -1021849, -678892, -2390375, 1453957, 5880371, -5240012, 3132401, -2572157, 4117040, 4207610, -9175882, -5246236, 9679465, 4638635, -7750966, -8870053, 4141120, -914897, 9917164, -801086, 6220742, -7782196, -6519920, -4933753, -1483663, 9548574, -1675115 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case19() {
        int[] numbers = { -9131779, -2749504, 9226906, 4753767, -1019170, -1697868, -8749995, -7632561, -6360898, -7974912, 7061121, 2018502, 6584770, -6626274, 3743388, -6301110, -9171097, -7320428, 5442874, -4742901, 854924, -169547, 8737472, 4981071, 5918849, -8234291, 5791683 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case20() {
        int[] numbers = { 6044735, -8511688, -9869927, -5135881, 1772881, 2077605, 9741478, 8109178, -9502114, -2043839, -2425955, 4282196, -9689536, -32075, 3378912, 1932932, 5036365, -8040792, 155049 };
        int k = 1;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case21() {
        int[] numbers = { 26, 36, 29, 20, 11, 7, 30, 25, 9, 3, 37, 10, 40, 41, 21, 44, 42, 23, 27, 46, 6, 18, 47, 34, 39, 38, 33, 45, 12, 31, 13, 28, 43, 14, 17, 8, 2, 16, 24, 15, 19, 5, 22, 35, 32, 4, 1 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case22() {
        int[] numbers = { 32, 13, 8, 37, 7, 38, 16, 40, 14, 19, 26, 5, 43, 15, 25, 42, 21, 28, 33, 10, 20, 39, 17, 36, 34, 22, 29, 1, 11, 35, 2, 23, 27, 30, 4, 24, 31, 41, 18, 9, 12, 6, 3 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case23() {
        int[] numbers = { 40, 19, 41, 20, 37, 28, 12, 7, 1, 21, 42, 22, 46, 24, 16, 44, 17, 38, 6, 26, 3, 8, 31, 29, 11, 18, 32, 14, 43, 5, 15, 45, 30, 4, 34, 13, 23, 39, 9, 36, 25, 27, 35, 10, 2, 33 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case24() {
        int[] numbers = { 14, 12, 3, 24, 33, 38, 30, 1, 26, 18, 17, 29, 4, 19, 13, 15, 40, 31, 9, 36, 34, 7, 6, 39, 42, 32, 41, 23, 22, 21, 28, 10, 43, 27, 20, 37, 5, 44, 8, 16, 25, 2, 11, 35 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case25() {
        int[] numbers = { 31, 19, 27, 30, 41, 2, 12, 16, 21, 33, 7, 8, 14, 1, 24, 26, 25, 28, 4, 13, 35, 11, 18, 32, 22, 10, 5, 23, 43, 40, 15, 3, 17, 29, 42, 36, 37, 20, 9, 34, 38, 6, 39 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case26() {
        int[] numbers = { 5, 29, 42, 9, 28, 39, 43, 10, 2, 34, 38, 31, 14, 40, 26, 8, 22, 25, 27, 19, 24, 23, 1, 35, 7, 3, 33, 12, 4, 30, 11, 41, 36, 15, 6, 17, 20, 21, 13, 32, 16, 37, 18 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case27() {
        int[] numbers = { 36, 41, 27, 28, 6, 22, 24, 18, 10, 35, 40, 25, 21, 1, 7, 13, 17, 9, 12, 5, 2, 34, 15, 11, 33, 14, 37, 30, 26, 31, 39, 19, 42, 29, 4, 23, 38, 20, 3, 16, 8, 32 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case28() {
        int[] numbers = { 33, 21, 23, 27, 19, 26, 12, 36, 32, 42, 5, 7, 44, 24, 38, 28, 9, 15, 34, 3, 18, 4, 13, 8, 31, 35, 43, 2, 39, 16, 20, 11, 40, 25, 1, 30, 14, 41, 17, 6, 29, 37, 22, 10 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case29() {
        int[] numbers = { 33, 17, 1, 11, 36, 32, 26, 23, 10, 6, 16, 29, 15, 13, 37, 2, 35, 34, 18, 9, 19, 3, 20, 7, 42, 28, 43, 22, 40, 4, 12, 31, 39, 8, 24, 27, 38, 25, 5, 41, 21, 14, 30 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case30() {
        int[] numbers = { 20, 26, 24, 4, 37, 39, 23, 28, 36, 25, 38, 1, 17, 9, 13, 34, 15, 21, 29, 33, 44, 30, 19, 41, 43, 8, 7, 5, 22, 12, 2, 14, 10, 16, 35, 32, 27, 3, 31, 40, 42, 18, 11, 6 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case31() {
        int[] numbers = { -296, 136, -144, 62, -187, -39, -80, 161, -91, 303, -293, 61, -112, -27, -179, -215, -41, 3, -12, -134, 38, 184, -95, -11, 151, -236, -3, -75, -56, -254, -288, 212, -315, 163, 73, 4, 41, -233, -108, -51, 238, -169, -130, -270, 145, -218, 112 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case32() {
        int[] numbers = { -287, 76, -251, -51, 43, -192, -98, 148, 93, -198, 57, -267, -224, -199, -216, -12, 108, -249, 102, 116, -172, -207, -132, 274, -202, -262, -112, 103, 32, -195, 101, -16, 192, 104, -41, -106, 94, 181, -22, 87, -295, 25, -2, 249 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case33() {
        int[] numbers = { -105, 41, 68, -173, -126, 292, -36, -18, -24, 232, -250, 268, -184, 15, 114, 263, 272, -135, -303, 10, -53, 291, 275, 304, 278, -129, 153, 25, 47, -212, 254, 266, -255, -170, -66, -262, -81, 76, -114, -55, -290, -284, -230, -293 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case34() {
        int[] numbers = { -32, 233, 168, -184, -240, -39, 36, 255, 116, -131, 304, -302, 108, 171, 26, -294, 165, 250, 292, 51, -86, 230, 266, -90, -201, -252, 226, 101, 288, -110, 181, -187, -208, 19, 272, -56, -78, 84, 69, 40, -276, -247, 99, 65, 301, -88, -259 };
        int k = 2;
        assertEquals(1, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case35() {
        int[] numbers = { 98, -26, 251, -94, -253, 214, 4, 157, -74, 252, 3, 298, -8, -222, 18, 299, 109, -147, -151, 224, -251, -15, 63, 110, -220, 236, -307, 66, -82, 199, 16, -264, 68, 52, -217, -304, -67, -216, -226, -95, -102, 260, -171, 186, 39, -200 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case36() {
        int[] numbers = { -15, -220, -177, 225, -204, 121, 82, -115, 264, 315, 161, -84, 194, -4, 296, -55, 327, 224, -57, -82, -296, 268, 61, -169, -89, 186, 201, -120, 62, -113, -202, -308, -108, -102, -36, 48, 75, -212, 302, 245, -302, -61, -255, 243, 248, 23, -235 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case37() {
        int[] numbers = { -184, -30, 216, -229, 234, -72, -45, 228, -224, -209, -185, 75, 103, 169, 56, -295, -96, -158, 284, 207, -11, -101, -247, 144, 181, 221, -156, -118, -207, 74, -182, -93, -49, 171, 118, -27, 184, 275, 286, -205, -283, -164, -177, -129 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case38() {
        int[] numbers = { -22, 33, 119, -193, 196, 306, -165, 85, -296, -139, 225, 44, -132, -256, 238, 31, 24, -214, -19, -56, 96, 248, -324, -221, 171, -218, -149, -71, -198, -135, 279, -42, -275, 297, -234, -136, 15, 292, -205, 161, -265, 265, 181, -99, 16, -86, 108 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case39() {
        int[] numbers = { 110, 271, 75, -117, 227, 153, -276, -194, -34, -159, -29, 221, -171, 150, 250, -301, -87, -186, -6, -158, 308, -67, -22, -292, 93, 7, 280, 154, 223, -302, 115, 238, 23, -107, -94, 214, -103, -212, -105, -13, -209, -253, 33, -244, 197 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case40() {
        int[] numbers = { 189, 132, 186, -190, -112, 127, -39, 195, -94, -219, 83, 288, 87, 105, -50, -25, 226, -57, 70, -101, -3, -76, 109, 40, 279, -67, -161, -89, 320, 274, -11, -193, 84, -273, 42, 121, -145, 27, -143, 268, -217, 213, 92, -242, 305, -294 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case41() {
        int[] numbers = { 0, -9787190, -3829770, 5744655, 2553180, 8085070, 3404240, -7021245, -7872305, -2978710, -3191475, -1276590, -5744655, -9574425, -7446775, 6170185, 9999955, 4680830, -8297835, 8936130, 2978710, 1489355, 8510600, 1702120, -6595715, 7234010, -5531890, -7659540, -4255300, -4893595, 5531890, 2127650, 6382950, -2553180, 638295, -3617005, 4468065, -1914885, -1489355, 851060, -851060, 4042535, 7659540, 7021245, -2765945, -2340415, 2765945 };
        int k = 2;
        assertEquals(212764, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case42() {
        int[] numbers = { 0, -9565204, -9999986, -9347813, 5652166, -7826076, 1956519, -7391294, -3695647, -4130429, 8260858, -5217384, -1304346, -4782602, -2608692, 7826076, -652173, -7173903, -7608685, 4347820, 7391294, 4999993, -5869557, 2826083, 3260865, 6956512, 7608685, -8260858, -3478256, -9782595, 9565204, -2826083, 5217384, -8913031, 4782602, -6521730, -2173910, -8478249, 434782, -4565211, -4999993, 3478256, -217391, 9999986, 1739128, 3043474 };
        int k = 2;
        assertEquals(217390, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case43() {
        int[] numbers = { -9347813, -3478256, -1956519, 6304339, -4130429, -4782602, -8043467, -4999993, -6956512, -4347820, -7391294, -9130422, -7608685, 7391294, -6521730, -2608692, 9999986, -8260858, 217391, -5869557, 2826083, 0, 1956519, -1521737, -5217384, 8260858, 652173, 3913038, 7608685, 2173910, -8695640, 4565211, -1304346, -6086948, 1086955, -3695647, -1739128, -6739121, 6086948, 1521737, 8043467, -652173, 9130422, -7826076, -8478249, -3913038 };
        int k = 2;
        assertEquals(217390, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case44() {
        int[] numbers = { -6956512, -4999993, -7391294, -6521730, 0, -2608692, 5652166, -9130422, 7826076, -5434775, 3695647, -2826083, -1086955, -2173910, 1086955, 6304339, -3478256, -3260865, -4130429, 6086948, 8478249, -5652166, -9782595, -3695647, 9347813, 8043467, -217391, -652173, 4999993, -8043467, 7173903, 2608692, -9565204, -8913031, -6304339, -9999986, 9565204, -5217384, 2391301, -3913038, -6739121, 1304346, -8478249, 8260858, 6739121, -5869557 };
        int k = 2;
        assertEquals(217390, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case45() {
        int[] numbers = { -227272, 8409064, 1818176, -7727248, 8181792, -1363632, 0, -6590888, 1363632, -9090880, -1818176, -8409064, -5909072, -2499992, 2499992, -9772696, 454544, -7954520, -4772712, -909088, -3409080, -6363616, 8636336, 6818160, -2727264, -7272704, 9090880, 2727264, 1136360, 3409080, -2954536, 6136344, -5454528, -9545424, -9999968, 5454528, 7727248, 7954520, 7272704, -4090896, -2272720, 9999968, -6136344, -3636352 };
        int k = 2;
        assertEquals(227271, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case46() {
        int[] numbers = { -9361660, 7446775, 4468065, -5319125, -4255300, 7872305, -4468065, -3404240, -4680830, 5531890, -6808480, 1702120, -5106360, -8085070, -8936130, 1063825, -6170185, -5957420, 8297835, 9999955, -2553180, 6382950, -9574425, 3829770, -1489355, 5957420, 0, 8085070, -2978710, 9574425, 851060, 2765945, 2978710, 5744655, 3191475, -212765, -7234010, -6595715, -638295, 425530, 8936130, 6595715, -8297835, 2553180, -5531890, 9148895, 7021245 };
        int k = 2;
        assertEquals(212764, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case47() {
        int[] numbers = { -909088, -1590904, -3409080, 6818160, 7727248, 4772712, -3181808, 7272704, -4999984, 9772696, 1590904, -2272720, 3863624, 3636352, 681816, 1136360, -6136344, -7272704, 9999968, 3181808, -7045432, 7954520, 8181792, -5454528, 5681800, -4545440, -454544, -7499976, -8181792, 4318168, -5681800, -6363616, 2727264, 4545440, 5454528, 6363616, -8863608, -2045448, 9090880, -9545424, -5227256, -2499992, 2272720, 8863608 };
        int k = 2;
        assertEquals(227271, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case48() {
        int[] numbers = { -4036084, 1701774, 8047434, 1831870, -3520376, 280315, 4644668, 3793537, -2992341, 8580060, -4998339, 2005181, 4145923, 3806082, -3547791, -2163303, 9204157, 4356001, -1265986, 9920261, -8401925, 2460129, 4316286, 8764845, 8378171, -4110207, -7938046, 9381494, -8827810, -8434384, 6667554, -6394899, 9290628, -8639799, 3784320 };
        int k = 10;
        assertEquals(7393898, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case49() {
        int[] numbers = { 3058475, 6500668, 5686555, 7700535, 7000681, -819476, 5075232, 7884182, -2423417, 7122230, 8490054, 2608425, 5782155, -4045513, -4508667, -6777764, -805198, 2259833, 7572302 };
        int k = 12;
        assertEquals(17058438, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case50() {
        int[] numbers = { -4845232, -5077278, -1696332, 9685053, -8008906, -2041580, -2825611, 7330935, -1994531, -5206896, -202206, -1506777, 8005773 };
        int k = 9;
        assertEquals(12555151, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case51() {
        int[] numbers = { 905094, -9856209, -5067503, 2152352, 6069125, 6070805, -3078364, 3447730, 8533640, 8101663, 5627524, 7232490, 5409193, -6902965, -9001727, 7082618, -4761194, 9863063, 4156041, -6268386, -2551014, -1459606, 6848269, -2591702, -1581233, 4052341, -7692095, -251864, -6426888, 8421368, -9552201, 4005431, -9852381, -6312701, 1751043, 5428343, 3952329, -5260966, -6860219, -6470224, 6032682 };
        int k = 30;
        assertEquals(109318407, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case52() {
        int[] numbers = { 146510, -6507615, -9321354, 7291401, -9981037, -5129098, -7749378, -9861405, -3815967, -9078887, -4008208, 8336304, -2815172, 3939575, 7619137, 9979105, -9200896, -9875413, 6373208, 8536028, -5326004, -92197, -5728645, 476981, 2795232, 1958488, -4819855, -5580132 };
        int k = 25;
        assertEquals(113208696, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case53() {
        int[] numbers = { -5912096, -1271330, 235975, 7397958, 2234585, 3107177, -279730, 4522784, 252702, 671098, 5216584, -6262459, 3684610, 5943038, 6093587, 306116, 1115114 };
        int k = 2;
        assertEquals(16726, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case54() {
        int[] numbers = { -7171152, -1951591, 7430452, 6150290, 188178, -7644836, -9771874, 1084983, -9547982, 7787285, 4110722, -5730013, 3319082, -9473192, -4527117, -4454620, 1593764, -7333224, 5457830, -6898885, 631880, 9917676, 2764925, -2096374, -9466488, 7869233, 4804718 };
        int k = 26;
        assertEquals(139029967, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case55() {
        int[] numbers = { -7727456, -1076916, -2673630, 1376569, -7542997, -2976675, -7107700, 3151985, -9702420, 2319071, -3144166, 7151674, -155280, -3372696, 1289270, 3428401, 6197945, 7222243, -2019675, -5401000, 3889079, 902634, 7381698, -968125, -7615121, -1925597, -2948334, 3060068, -6592539, -2871389, -8766624, -4274448, 2699567, -8752211, 8125247, -7862294, -2762389, -859076, -3105900 };
        int k = 35;
        assertEquals(118399954, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case56() {
        int[] numbers = { -4218879, -8055535, 7034324, 9394401, 6173296, 1609462, -3998150, -3387804, -2618887, -8482362, 8468124, 1950259, -7481815, 7202166, -3000642, 2238670, -1885324, 474129, 6050175, 4805845, 6396669, 3900223, 1309130, 6681868, 3184796, -3582961, -6276336, 2255643, 663383, -5186551, -3200868, 9967589, -7633247, -520929, -5207450, 566938, 940933, -6621604, -7493948, 4697804, 6137934, 8299526, 6385255, 9088131, 9041045, 3906251, -6431918 };
        int k = 43;
        assertEquals(189365416, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case57() {
        int[] numbers = { 4378631, -4617013, 6215019, -2314805, 6913900, 7418398, 8177884, 9184877, 1954639, -1981572, 5160365, 6485434, -5790009, 801020, -8658056, -9667213, -7252734, -8319639, 8616294, -2753005, 6943034, -2973693, 5499295, 109352, 3634675, 2151856, -4542485, 5817004, 2488376, 7326246, 850267, 4264851, -46312, 4480689, -5961037, -4223552, 1962377, -9994806, 1338054, 4960106, 7327265, 8184567, -7330033 };
        int k = 32;
        assertEquals(94845410, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case58() {
        int[] numbers = { -3492927, -5253924, 3280468, 1450948, -1274932, 3152581, -546585, -2113364, -25637, 4107716, -4171300, 1616011, 2315030, -7908870, -1612811, 8182766, -9783454, -2234888, -489212, -9051969, -9338158, -4362861, -9771463, 6859722, 6147399, 1414220, -8032775, 2506717, -4546828, -2437465, -4759637, 2373609, -523895, -9643353 };
        int k = 17;
        assertEquals(29040274, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case59() {
        int[] numbers = { -3378690, -4299800, 3582784, 1616711, 904517, 3533327, 297279, -1540836, -7876475, -7748637, -6219790, 2877173, -9847693, 7173844, -4585489, 8462294, -1116723, -3162596, 6851110, 6924775, 8612143, 88038, 4723209, 161279, -5341845, 3702373, 5338809, -7064456, -3548113, -227986, -8899525 };
        int k = 31;
        assertEquals(139620041, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case60() {
        int[] numbers = { -5824847, -927485, 3446816, -7251560, -5372431, -5390369, 1683621, -457748, 4624476, 8985980, -7034400, 8057657, 3856076, -2082987, 6613795, 8629475, -2090951, 3674040, 401816, -218424, -12109, 3746144, -8782001, -4792827, -1704912, 3174754, -3159691, 3172433, -4228580, -5486078, -2868876, -6285589, 1538546, -2854098 };
        int k = 27;
        assertEquals(80157607, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case61() {
        int[] numbers = { -2901397, -5366349, -5129554, 3137303, -2602987, -1985520, 3749390, -8262025, -8991719, -2477020, 9693930, -2645801, -564915, 1896785, -585323, 9588871, 2693358, -4564475, 7454588, 2945431, 9816084, 4192003, 4318261, -3305791, 4306711, -3573010, -2810104, 2042642, -3878781, 9640877, 3688760, 2360254, -7332461, -1445777, 3479222, -4417884 };
        int k = 19;
        assertEquals(32101696, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case62() {
        int[] numbers = { -6182353, 664330, 3576695, 4375308, 4469669, 7432314, -240501, -4774466, 9903804, 1072239, 2213663, 6857870, -3704342, 6167883, 4421435, 1089915, -7717854, -7180015, -7759633, -3954720, 5760940, -5771038, -6964395, 6972939, -2389809, 2539354, -2705384, -2054921, 1634616, 2601027, 5953599 };
        int k = 27;
        assertEquals(98349089, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case63() {
        int[] numbers = { -1073400, -5678229, 2011879, -4712728, 3856263, -1495902, 2976498, -4336436, -24917, 5791631, -3650440, 7236965, 3214428, 4916216, -7833310, -6378166, 183438, -7900252, -2837650, 835760, -1118900, 1652448, -8003426, -799367, -3300967, -3133967, -2603983, 4349770, -747342, -4803974, 8703108, 9152198, 3335400, 7217460, 4387454, 4590833, -3166907, 4042148, 6496860, -4003539, 1383870, 8134707 };
        int k = 24;
        assertEquals(52039753, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case64() {
        int[] numbers = { -503918, -1944018, 8915266, 1335125, -1447111, 1246093, 3216679, 4387935, 6597614, 6082737, 3277737, -7293705, 1560290, 4779276, -949870, 8029560, -8304607, 4774059, -9596955, -8011910, 1139596, 5167190, 7507754, -3727605, -771650, 1209870, -8703628, 1589993, -1797460, -5977074, 2462634, -6262146, -3591556, 3670653, 591875, -3027509, -8176843, -7567567, -1183783 };
        int k = 22;
        assertEquals(40631826, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case65() {
        int[] numbers = { 9864936, 5884487, -3843132, 4135355, 4345680, -845704, -6417555, 7140333, -4741781, -2783244, -8142477, 3024292, -1517564, -3875409, 4920006, -9681316, -1088859, 5012123, -9746566, 970524, 4928878, 9793316, 2313216, -7833258, -8231434, -7644059, -2193805, 3048611, 6130146, 2378205, 1351356, 2885703, -1247717, 5732911, 7948484, -7208402, -7024196, 2793923, -1504317, -7840739, -8495452, -9141672, 2090564, -8387684, 6023383, 1853541, 1246346 };
        int k = 47;
        assertEquals(234281585, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case66() {
        int[] numbers = { 6303910, -3953460, -2353289, -8424812, -3974296, -9281751, 9333013, -5928092, 5881094, -9128529, -4535164, 9622125, 4266890, -5283550, -3892217, 1630800, -6282359, 8109201, 4477349, 1891161, 7614106, 9726243, 4836452, -1960555, -944765, 8304132, 3672440, 1849446, -1737958, 1762754, 1841239, -2003996, -3043057, -6257831, 7164808, 7048215, -933404, -1428730, -9303134, 2061078, -4677584, 3017832, 6583072, 2387642, -1657790, -4195664, -372294 };
        int k = 47;
        assertEquals(220566437, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case67() {
        int[] numbers = { -4914701, -2212780, -4807934, 6054113, 6249259, 2549782, -8554660, 7498708, 707484, 6902173, 2992033, 2157470, 9544615, -6151201, -282672, 4831036, -2716663, 6417444, 1025488, -6507940, 4785864, -5031864, 1016345, 3913168, 9192473, 2824222, -2604991, 2437965, -5384791, -6818968, 7226222, 7595357, -3373383, -9801717, 1658144, -3464552, -789701, 5499103, -5379044, 9335573, 829372, -4344708, 98742, 6995658, -7675512, 2689374, -4171280 };
        int k = 47;
        assertEquals(213728156, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case68() {
        int[] numbers = { 8749414, -2604564, 3766289, -4086801, -1070143, -3229568, 3798866, 2410921, 5961448, 7336659, 8442698, 8102318, 833404, -8236676, 366415, 663810, 5491592, -4768841, 6903206, 7026069, 3803828, -2364924, 1753562, 7180461, -9805202, -1833287, -3963357, -3318023, 8622588, -391555, -5676718, 4577122, 5129666, 4695423, 5650678, -9481118, 8477310, -934180, -4911932, 4747854, -1409019, 6665865, 8588744, 4912924, -1470299, -7949127, -1703039 };
        int k = 47;
        assertEquals(218386135, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case69() {
        int[] numbers = { 3835541, -5047062, 184725, -9541867, -6707021, 1590856, -2172492, 8558464, -3705022, -1211541, 5335353, -7273501, -2731594, 1707712, -7323068, -2219479, 6716557, 8262153, 6222483, 770542, -5318214, 1007890, 9547303, -2743391, 9499968, -6400282, 230592, -2577609, -7666277, -4159196, -3097995, 3018889, 9834699, 159262, -4450595, -409827, 1747032, 2982113, 3727632, -7629228, -6614206, 8136411, 10893, 2272022, -6786911, -3864390, -1101508 };
        int k = 47;
        assertEquals(205700989, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case70() {
        int[] numbers = { 6826097, 2020070, 5321799, 3329842, -8909597, 4074043, 4196374, -6217005, -2558674, 1857663, -1787795, -5593917, 4916793, -3909403, 4571636, -8807956, 3945411, -8788855, -600817, -1829921, -1361391, -4969333, 6844157, -2837976, -5498901, 9149523, 393878, 8777233, 9253565, -4411648, 8136453, 3460011, 4555756, -2034611, 8792847, -7012057, 4660295, -3255467, 2468973, 4653595, -3256866, -8016466, -5158798, -8928294, -8492105, -287638, -2301781 };
        int k = 47;
        assertEquals(227856641, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case71() {
        int[] numbers = { 0, -9787190, -3829770, 5744655, 2553180, 8085070, 3404240, -7021245, -7872305, -2978710, -3191475, -1276590, -5744655, -9574425, -7446775, 6170185, 9999955, 4680830, -8297835, 8936130, 2978710, 1489355, 8510600, 1702120, -6595715, 7234010, -5531890, -7659540, -4255300, -4893595, 5531890, 2127650, 6382950, -2553180, 638295, -3617005, 4468065, -1914885, -1489355, 851060, -851060, 4042535, 7659540, 7021245, -2765945, -2340415, 2765945 };
        int k = 47;
        assertEquals(224466523, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case72() {
        int[] numbers = { 0, -9565204, -9999986, -9347813, 5652166, -7826076, 1956519, -7391294, -3695647, -4130429, 8260858, -5217384, -1304346, -4782602, -2608692, 7826076, -652173, -7173903, -7608685, 4347820, 7391294, 4999993, -5869557, 2826083, 3260865, 6956512, 7608685, -8260858, -3478256, -9782595, 9565204, -2826083, 5217384, -8913031, 4782602, -6521730, -2173910, -8478249, 434782, -4565211, -4999993, 3478256, -217391, 9999986, 1739128, 3043474 };
        int k = 25;
        assertEquals(60434542, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case73() {
        int[] numbers = { -9347813, -3478256, -1956519, 6304339, -4130429, -4782602, -8043467, -4999993, -6956512, -4347820, -7391294, -9130422, -7608685, 7391294, -6521730, -2608692, 9999986, -8260858, 217391, -5869557, 2826083, 0, 1956519, -1521737, -5217384, 8260858, 652173, 3913038, 7608685, 2173910, -8695640, 4565211, -1304346, -6086948, 1086955, -3695647, -1739128, -6739121, 6086948, 1521737, 8043467, -652173, 9130422, -7826076, -8478249, -3913038 };
        int k = 36;
        assertEquals(111738650, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case74() {
        int[] numbers = { -6956512, -4999993, -7391294, -6521730, 0, -2608692, 5652166, -9130422, 7826076, -5434775, 3695647, -2826083, -1086955, -2173910, 1086955, 6304339, -3478256, -3260865, -4130429, 6086948, 8478249, -5652166, -9782595, -3695647, 9347813, 8043467, -217391, -652173, 4999993, -8043467, 7173903, 2608692, -9565204, -8913031, -6304339, -9999986, 9565204, -5217384, 2391301, -3913038, -6739121, 1304346, -8478249, 8260858, 6739121, -5869557 };
        int k = 28;
        assertEquals(65651886, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case75() {
        int[] numbers = { -96, -53, 82, -24, 6, -75 };
        int k = 4;
        assertEquals(90, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case76() {
        int[] numbers = { 9999999, 5953590, -24636, 3682672, -1536897, -4545256, -1463683, 497475, -3468833, 1825752, -2678438, 496188, 3740225, 5476380, 1731164, 1881880, 3698512, -2244784, 278214, -4543052, -2878590, -2680575, -3482155, -1663766, 1056148, 972828, 3772296, -4317750, 475104, 1736250, -903830, 155120, 2290560, 1024290, 2383770, -1482680, 768948, -3022006, -1343750, -153720, -5930456, -1154832, -5080180, 1924286, -1211364, 470184, -8536176 };
        int k = 23;
        assertEquals(20513066, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case77() {
        int[] numbers = { -10000000, -9600000, -9200000, -8800000, -8400000, -8000000, -7600000, -7200000, -6800000, -6400000, -6000000, -5600000, -5200000, -4800000, -4400000, -4000000, -3600000, -3200000, -2800000, -2400000, -2000000, -1600000, -1200000, -800000, -400000, 0, 400000, 800000, 1200000, 1600000, 2000000, 2400000, 2800000, 3200000, 3600000, 4000000, 4400000, 4800000, 5200000, 5600000, 6000000, 6400000, 6800000, 7200000, 7600000, 8000000 };
        int k = 33;
        assertEquals(108799728, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case78() {
        int[] numbers = { 1, 2, 3 };
        int k = 3;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case79() {
        int[] numbers = { 1, 2, 100 };
        int k = 3;
        assertEquals(97, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case80() {
        int[] numbers = { 1, 2, 3, 100 };
        int k = 4;
        assertEquals(96, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case81() {
        int[] numbers = { -10000000, 9999999, 10000000 };
        int k = 3;
        assertEquals(19999998, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case82() {
        int[] numbers = { 1, 3, 5, 1000, 1001 };
        int k = 5;
        assertEquals(1991, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case83() {
        int[] numbers = { 8558502, 6203330, 4222074, 8610755, 9415890, 3286598, 412634, 8335956, 3967788, 3460251, 9883826, 4181362, 4082604, 2135750, 5595754, 2122516, 5773897, 4317786, 634161, 4889001, 3222503, 9182086, 4442586, 980538, 289046, 705373, 9347206, 707307, 7421257, 1833052, 1889997, 375107, 4991357, 3247129, 704988, 4195123, 9735031, 1057449, 1130725, 8509371, 848518, 5598532, 7877414, 2160463, 766995, 6034966, 2659396 };
        int k = 47;
        assertEquals(118724226, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case84() {
        int[] numbers = { -1, 100, 200 };
        int k = 3;
        assertEquals(199, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case85() {
        int[] numbers = { 2, 6, 7, 8 };
        int k = 3;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case86() {
        int[] numbers = { 1, 2, 3, 4, 90 };
        int k = 5;
        assertEquals(85, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case87() {
        int[] numbers = { 1, 3, 17 };
        int k = 3;
        assertEquals(14, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case88() {
        int[] numbers = { 4, 7, 8 };
        int k = 3;
        assertEquals(2, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case89() {
        int[] numbers = { 1, 2, 3, 4, 1000005 };
        int k = 5;
        assertEquals(1000000, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case90() {
        int[] numbers = { 0, 10000, 10001 };
        int k = 3;
        assertEquals(9999, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case91() {
        int[] numbers = { -10000000, -9999999, -9999998, -9999997, -9999996, -9999995, -9999994, -9999993, -9999992, -9999991, -9999990, -9999989, -9999988, -9999987, -9999986, -9999985, -9999984, -9999983, -9999982, -9999981, -9999980, -9999979, -9999978, -9999977, 9999978, 9999979, 9999980, 9999981, 9999982, 9999983, 9999984, 9999985, 9999986, 9999987, 9999988, 9999989, 9999990, 9999991, 9999992, 9999993, 9999994, 9999995, 9999996, 9999997, 9999998, 9999999, 10000000 };
        int k = 24;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case92() {
        int[] numbers = { 1, 10 };
        int k = 2;
        assertEquals(8, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case93() {
        int[] numbers = { 1, 2 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case94() {
        int[] numbers = { 3333306, 3333316, 3333326, 3333336, 3333346, 3333356, 3333366, 3333376, 3333386, 3333396, 9999990, 9999991, 9999992, 9999993, 9999994, 9999995, 9999996, 9999997, 9999998, 9999999 };
        int k = 10;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case95() {
        int[] numbers = { -371248, -7480060, -8160596, 2503405, 4868392, -2014343, -7436533, -8424674, -9053788, -3443512, 5156323, 5940099, -513728, 760295, 424769, 2434497, -8599097, 6907816, 7771164, 7230404, -2908880, 1754690, 368348, 8703086, 5120382, 168967, 2421952, 9501345, -7432622, -3698408, -3504067, -6489250, -8098116, 1116615, 6189321, 7726685, -1750078, -764207, 3102944, -2816278 };
        int k = 32;
        assertEquals(112767254, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case96() {
        int[] numbers = { 1, 2, 3, 4, 1000000 };
        int k = 5;
        assertEquals(999995, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case97() {
        int[] numbers = { 10, 20, 21 };
        int k = 3;
        assertEquals(9, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case98() {
        int[] numbers = { 1, 10, 20, 51, 52 };
        int k = 2;
        assertEquals(0, theconsecutiveintegersdivone.find(numbers, k));
    }

    @Test
    public void case99() {
        int[] numbers = { 1, 6, 7 };
        int k = 3;
        assertEquals(4, theconsecutiveintegersdivone.find(numbers, k));
    }

}
