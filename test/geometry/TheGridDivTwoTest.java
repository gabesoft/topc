package topc.test.geometry;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.geometry.*;

public class TheGridDivTwoTest {
    TheGridDivTwo thegriddivtwo = new TheGridDivTwo();

    @Test
    public void case1() {
        int[] x = { 1, 1, 1, 1 };
        int[] y = { -2, -1, 0, 1 };
        int k = 4;
        assertEquals(2, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case2() {
        int[] x = { -1, 0, 0, 1 };
        int[] y = { 0, -1, 1, 0 };
        int k = 9;
        assertEquals(0, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case3() {
        int[] x = {  };
        int[] y = {  };
        int k = 1000;
        assertEquals(1000, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case4() {
        int[] x = { 1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4 };
        int[] y = { 0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5 };
        int k = 47;
        assertEquals(31, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case5() {
        int[] x = { -1, -1, 3, -1, 1, -1, 2 };
        int[] y = { 6, -1, -9, 2, -3, -9, -6 };
        int k = 17;
        assertEquals(17, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case6() {
        int[] x = { 9, -6, 4, -3, -1 };
        int[] y = { 8, 4, 3, -9, -3 };
        int k = 17;
        assertEquals(17, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case7() {
        int[] x = { -8, -8, 5, 6, -6, -1, -3, -3, -1 };
        int[] y = { 8, 2, -6, 3, -3, -10, 5, -5, 9 };
        int k = 19;
        assertEquals(19, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case8() {
        int[] x = { 0, -1, 4, 1, 2, 5, -2, -1, -2, 1, -1, 3, 3, -1, 4, 5, 4, 0, -1, -2, 3, -2, 4, 4, 4, 0, 1, 5, -2, 3, 1, 4, 5, 3, 1, 1, 5, 3, 0, -2, -2, 2, 2, -1, 1, 5, -1 };
        int[] y = { 4, 3, -2, -1, 2, -1, 2, 4, 1, 0, -2, -1, 0, 5, 5, -2, -1, -2, 2, -1, 5, 0, 1, 2, 0, 3, 2, 2, 4, 3, 4, 3, 3, 1, -2, 5, 4, 4, 2, 5, 3, -1, 1, 1, 3, 5, -1 };
        int k = 11;
        assertEquals(1, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case9() {
        int[] x = { 5, 2, 4, -1, 4, -2, -1, -2, -2, -1, -2, 3, -2, 3, 5, 4, -1, 4, 4, 0, 1, 1, 2, 1, -2, 4, 0, 3, 2, 1, 2, -1, 5, 1, 3, 1, 3, 2, 4, 3, 3, 5, 3, 0 };
        int[] y = { 4, 5, 2, 2, 5, 5, 4, 2, 1, -2, 3, 0, 0, -2, 3, 4, 1, 3, -1, 4, -1, 5, -1, 3, -2, -2, 5, 1, 4, 4, 3, 3, 5, 1, -1, 2, 3, 2, 0, 5, 4, 1, 2, 1 };
        int k = 11;
        assertEquals(8, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case10() {
        int[] x = { 5, 1, -1, 4, 1, 3, 5, 2, 1, -1, 4, 2, -1, -1, 0, -2, 3, 3, 1, 2, 4, 4, 1, 2, 3, 2, 3, 5, -1, 0, 1, 5, 4, -2, 5, 0, 0, 4, -2, 0, 3 };
        int[] y = { 3, 4, 2, 1, -2, 4, -2, 0, 1, -1, 0, 2, 5, 1, 3, 4, -2, 1, 2, 5, 2, -2, 5, -2, 3, 3, 5, 5, 0, 4, 0, 1, 4, 0, 4, -2, 2, -1, -2, 1, 0 };
        int k = 11;
        assertEquals(3, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case11() {
        int[] x = { 1, 5, 5, -2, 5, -1, 1, -1, 0, 3, 4, -2, 3, 3, 2, -2, 2, 2, 5, 3, 4, -2, 0, 1, 1, 4, -1, 2, 1, 5, 2, -2, 0, 0, 4, 1, 3, 0, 5, -2, -1, 5, 2, 3, 4 };
        int[] y = { -2, 2, 5, -2, 0, 0, 0, -1, 4, 4, -1, 1, 1, 0, 0, 2, 5, -1, 3, 5, 4, 4, 3, 3, 5, 1, 2, 2, 1, 4, 4, -1, -1, 5, -2, 4, 3, 1, 1, 5, 3, -2, -2, -1, 3 };
        int k = 11;
        assertEquals(0, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case12() {
        int[] x = { 4, 2, 0, -2, 4, 3, 1, 5, -1, 3, -2, -1, 1, 1, -2, 4, -1, 4, -2, 3, 0, 5, 5, 0, -1, 0, 2, -1, 1, 2, 5, -2, 3, 2, 1, 1, 0, -2, 5, 3, 3, 1, 4, 4 };
        int[] y = { -2, 2, 5, 3, 1, 3, 1, 0, 1, 4, 5, 4, 3, -1, 2, 2, -2, 0, 0, 1, 3, -2, 3, 4, 0, 1, -1, 3, 0, 5, 4, 4, 5, 4, -2, 4, -2, -2, -1, -2, 0, 5, 4, 5 };
        int k = 11;
        assertEquals(2, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case13() {
        int[] x = { 3, -1, 1, 2, 5, -1, 0, 5, 4, 0, 3, 5, -2, -2, -2, 1, 2, 4, 5, 5, 0, -1, 4, 4, 0, 4, -1, 3, 2, 0, -2, 0, 2, -2, -1, 2, 4, 2, 5, 2, 1, 1, -1, 3, 2 };
        int[] y = { -1, 0, -2, 1, 0, 2, 3, -2, 4, -2, 5, 2, 4, 1, 0, 0, 2, -1, 3, 5, 2, 5, 0, 1, 4, 3, 3, 2, 0, -1, 5, 1, -1, 2, -2, 4, -2, -2, -1, 3, 2, 4, -1, 1, 5 };
        int k = 11;
        assertEquals(0, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case14() {
        int[] x = { 0, 0, -2, -2, 4, 4, 2, -1, 3, -1, 2, 1, 3, 4, 0, 1, -2, -1, 4, -1, 4, 5, 3, -1, 1, 2, 0, 3, -1, 1, 0, -2, -2, 2, 5, 2, -2, -1, 3, 1, 4, 3, 0, 5 };
        int[] y = { 3, 1, -2, 1, 5, -1, 0, 5, -2, 4, -1, -1, 1, 0, -1, 2, 2, 3, 3, 0, 1, 1, 3, -2, 1, 4, 5, 5, -1, -2, -2, 0, 4, -2, 5, 5, 3, 1, 2, 4, -2, -1, 2, -2 };
        int k = 11;
        assertEquals(1, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case15() {
        int[] x = { 2, 0, 5, 5, -2, 0, -1, 1, 5, 2, 2, 0, -1, -2, 2, 4, -1, 3, 1, -1, 3, 1, 1, -2, -1, -2, -1, 3, 1, 4, 3, -2, 3, 1, 5, 5, 5, -1, 3, 2, -1, 4, -2, 3, 5, 3 };
        int[] y = { 0, 2, 1, -1, -2, -1, -2, 3, 3, 3, 2, 1, 2, 3, 1, 4, -1, 3, -2, 1, 1, 2, 1, 1, 5, 5, 3, 0, 4, -1, 4, -1, -1, 5, 0, 2, -2, 0, 5, -2, 4, 3, 4, -2, 5, 2 };
        int k = 11;
        assertEquals(2, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case16() {
        int[] x = { -1, -2, 3, -2, 0, 3, 1, 1, 3, 3, 1, 2, 1, -2, 4, -2, 4, -1, -1, 0, -1, 4, 5, 1, 4, 2, 4, -1, -2, 5, 4, 2, 5, 4, 1, 5, -2, 0, -1, -2, 3, -1, 4, 0, 1, 2, 3 };
        int[] y = { 2, 0, 3, 5, -1, 2, 4, -1, 5, 0, 3, -1, -2, 4, 0, 2, 2, 4, 5, 5, 0, 3, 5, 2, 1, 1, 4, 3, -1, -2, -1, 2, 1, 5, 1, 2, 1, 4, -1, 3, -2, -2, -2, 1, 5, 5, -1 };
        int k = 11;
        assertEquals(2, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case17() {
        int[] x = { 4, 4, 5, 0, 1, 4, 5, 1, 4, 0, 5, -2, 2, 3, 2, 3, 0, -1, 3, -2, 4, 5, 1, -2, -1, -2, 2, 1, -1, 1, 0, 5, -2, 1, -1, 3, 2, 3, 0, 2, 4 };
        int[] y = { 1, 4, -1, 3, 0, 2, -2, 5, 0, 2, 1, -2, -2, 4, 0, -2, 5, 0, 5, 0, -2, 3, 1, 2, 2, -1, 1, -2, -1, 3, 1, 2, 3, 4, 4, 3, 4, -1, -1, 2, -1 };
        int k = 11;
        assertEquals(0, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case18() {
        int[] x = { 4, 5, 4, 0, 0, 0, 5, 3, 0, -1, -1, -2, 5, -2, 3, 0, 5, 5, 2, 3, -1, 1, 1, -2, 5, 2, 1, -1, 4, 4, 2, -1, 4, 1, 5, 1, -2, 3, 1, 1, 0, 1 };
        int[] y = { 1, 1, -1, 5, 3, -2, 3, 5, 2, -1, 2, 4, 4, 3, 2, 4, -1, 0, 4, -2, 1, 0, 5, -1, 2, 3, 2, 4, 2, 4, 0, 5, 0, 1, -2, -1, 5, 3, -2, 3, 1, 4 };
        int k = 11;
        assertEquals(2, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case19() {
        int[] x = { -1, 3, -1, 1, 4, -1, 3, 4, 5, 2, 0, 1, -2, 2, -1, 2, -2, 5, 1, 3, 4, -2, 1, 3, 0, 5, 1, 0, -1, -2, 5, 3, 2, 3, 4, 0, 1, -2, 2, 5, 1, 2, 0, 5, 4 };
        int[] y = { 2, 4, 1, -1, 3, 5, 0, -1, 1, 3, 3, 1, 5, 2, 0, 4, 2, -2, 3, -2, -2, -1, 2, 3, -2, -1, -2, 5, -1, 4, 2, 2, -1, 5, 4, 1, 4, -2, 0, 3, 5, 5, 4, 5, 2 };
        int k = 11;
        assertEquals(1, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case20() {
        int[] x = { 0, 4, 5, 4, 3, -2, 4, 0, 5, -2, 1, 2, 1, -2, -2, 0, -1, 2, 4, 4, -2, 5, 2, 5, 3, 4, 2, -1, 5, 5, 1, 2, 3, 3, 3, 3, 1, 0, 3, 4, -1, -1, 2, -1, 1 };
        int[] y = { 5, -1, 4, 4, -1, -2, 0, 2, 5, 3, 5, 0, 1, 1, 2, 4, 1, 4, 3, -2, 0, 0, 1, 2, 2, 1, 5, -1, 1, 3, 3, -1, -2, 1, 0, 3, 0, -2, 4, 2, 3, 5, -2, -2, 2 };
        int k = 11;
        assertEquals(8, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case21() {
        int[] x = { 168, -621, -631, -543, 968, -743, 756, -641, -92, 366, 954, 576, -227, -245, 795 };
        int[] y = { -206, 681, -430, -495, 858, -205, 701, 39, -13, -81, 832, 7, 167, 605, -849 };
        int k = 275;
        assertEquals(275, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case22() {
        int[] x = { -640, -575, -74, 215, -220, -389, -597, -363, -520, -334, 935, -906, 393, -361, 236, 684, -419, 695, -589, -631, 162, 937, 310, -672 };
        int[] y = { -965, -349, -291, 10, -222, 30, -703, -167, -977, -892, 643, 198, -245, -822, 412, 252, 51, -136, -612, -802, 157, -149, -446, -925 };
        int k = 208;
        assertEquals(208, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case23() {
        int[] x = { -578, -336, 407, -870, -270, 740 };
        int[] y = { -453, -842, -445, -614, 658, -357 };
        int k = 950;
        assertEquals(950, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case24() {
        int[] x = { -811, -37, -122, 12, 89, 291, 941, -985, 665, -432, 140 };
        int[] y = { 410, -228, 288, 378, 362, -715, -406, 251, 660, 741, 782 };
        int k = 155;
        assertEquals(155, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case25() {
        int[] x = { -201, 309, 257, 423, -146, -663, -126, 531, -940, -195, -536, 690, 666, -954, 219, -393, 388, 265, 362, 938, -853, -692, 486, -475, 332, -715, 122, -592, 173, -393, 822, -14, 787, -623, -238, -405, -279, 236, -713, 810, 39, 945, 23 };
        int[] y = { -115, -435, 999, -540, 932, -126, -12, 790, 267, 64, 700, 648, -150, 322, -479, -711, 796, 164, -190, 201, -69, 371, -440, -761, -68, -284, -887, -826, 326, 160, 797, 893, 679, -804, -40, 183, 938, -909, 891, -23, 459, -542, -636 };
        int k = 6;
        assertEquals(6, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case26() {
        int[] x = { -72, 627, -639, 334, 876, -65, -798, 853, -411, 265, -549, 271 };
        int[] y = { -421, 12, -144, 519, 648, -326, 616, -610, -398, -352, -881, 449 };
        int k = 100;
        assertEquals(100, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case27() {
        int[] x = { -765, 384, 52, -307, 366 };
        int[] y = { -80, 450, -511, 832, 719 };
        int k = 839;
        assertEquals(839, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case28() {
        int[] x = { -94, 445, 728, -581, -509, -565, 782, -976, 938, 772, -3, -848, -599, -163, -423, 248, -529, 659, -551, 683, -374, 368 };
        int[] y = { 52, -468, -862, -967, 770, 400, -698, -884, 928, -674, -559, 345, 574, 724, 363, 793, -375, -688, -416, -173, -357, 389 };
        int k = 137;
        assertEquals(137, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case29() {
        int[] x = { -431, -52, -562, 417, 623, -39, 888, 314, -593, 836, 146, -559, -669, 731 };
        int[] y = { -616, -890, 174, 926, 409, 120, 127, 700, -642, 597, 875, -870, -85, -846 };
        int k = 317;
        assertEquals(317, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case30() {
        int[] x = { 480, 413, 988, 991, 391, 922, -305, -703, 934, 992, 723, -551, -631, -951, 874, -218, 248, 958, 578, -792, 499, -355 };
        int[] y = { -414, 941, 369, -985, -66, -688, 963, -369, -168, -255, -801, 551, -998, 898, -295, 45, 338, 125, -816, 82, -299, 767 };
        int k = 271;
        assertEquals(271, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case31() {
        int[] x = { 17, 14, 65, 62, 70, 5, 90, 50, 36, 41, 81, 81, 55, 11, 99, 33, 11, 95, 96, 31, 73, 7, 94, 61, 68, 57, 8, 57, 70, 39, 17, 27, 47, 64, 52, 86, 67, 37, 78, 96, 16, 62, 76, 99, 97, 60, 34 };
        int[] y = { 0, 1, -1, -2, 3, 2, -4, 3, -1, -1, -4, 0, 4, -1, -3, -1, 1, 3, -3, -3, 4, 4, -1, 1, -1, -1, 4, 3, -4, 3, -3, 1, -2, -3, -4, -3, -1, 3, 3, -2, 4, 1, 0, -1, -4, 0, -4 };
        int k = 988;
        assertEquals(986, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case32() {
        int[] x = { 39, 73, 94, 56, 72, 64, 58, 46, 11, 28, 97, 7, 21, 71, 15, 79, 21, 79, 64, 25, 87, 66, 10, 30, 9, 16, 33, 18, 100, 33, 62, 56, 24, 73, 92, 95, 37, 83, 41, 32, 25, 27, 14, 74, 32 };
        int[] y = { -3, -3, 4, 4, 1, 4, 4, 2, -3, 4, -4, 3, 1, -4, 2, 3, 0, -3, -4, 0, 1, 2, -2, 1, -3, -2, -1, -3, 4, 4, 4, 3, -2, -4, 3, 3, -4, -1, 4, 1, 2, 3, -3, 2, -1 };
        int k = 910;
        assertEquals(908, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case33() {
        int[] x = { 45, 78, 92, 36, 52, 30, 49, 13, 20, 80, 32, 8, 78, 97, 27, 18, 88, 35, 77, 95, 92, 65, 26, 62, 71, 81, 35, 84, 14, 85, 61, 96, 27, 66, 99, 46, 24, 21, 17, 19, 41, 74, 26, 7, 59, 71 };
        int[] y = { -1, -4, -4, 1, -2, -4, 1, -1, 1, 4, -2, -4, 1, -1, -3, 4, 4, -3, -2, 3, -2, -3, -2, 4, 0, -3, -2, 2, 0, -3, -4, 4, 1, 0, -1, -2, -3, 4, 3, -3, -1, -3, 0, -2, 1, 1 };
        int k = 910;
        assertEquals(907, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case34() {
        int[] x = { 36, 68, 12, 1, 13, 80, 100, 90, 85, 73, 79, 51, 17, 17, 11, 43, 34, 94, 49, 12, 46, 44, 42, 20, 83, 33, 13, 39, 45, 11, 99, 6, 49, 66, 99, 19, 98, 58, 37, 19, 54, 1, 15, 45, 56 };
        int[] y = { -1, -3, -4, 1, 2, -1, -3, -3, 1, -1, 1, -4, -1, 4, -2, 4, 1, -1, -2, 3, 0, -1, -2, 0, 1, -1, 4, 4, -1, -3, 0, -1, 0, -2, 3, -2, 2, 0, 4, 2, 4, -3, -4, 0, 0 };
        int k = 911;
        assertEquals(908, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case35() {
        int[] x = { 30, 66, 50, 38, 73, 3, 10, 90, 9, 61, 51, 10, 28, 38, 11, 2, 56, 9, 39, 21, 16, 36, 49, 7, 71, 46, 79, 69, 71, 63, 17, 75, 80, 37, 47, 22, 59, 28, 85, 16, 82, 20, 26, 86, 97, 32 };
        int[] y = { -2, 3, 0, 2, -3, 0, -1, 1, -4, 0, 2, -3, -3, -3, 0, 4, 3, -2, 0, 3, 1, -2, -2, -3, -2, -3, 3, -4, -3, -1, 2, 3, 0, 4, 0, 2, 1, -4, 3, 2, 2, -1, -1, -3, -3, -1 };
        int k = 946;
        assertEquals(941, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case36() {
        int[] x = { 8, 66, 37, 100, 6, 94, 64, 66, 51, 40, 16, 20, 96, 66, 39, 60, 49, 73, 20, 82, 34, 42, 61, 34, 95, 40, 17, 25, 17, 83, 9, 94, 11, 88, 27, 82, 100, 10, 30, 7, 62, 54, 45, 33 };
        int[] y = { -2, -1, 1, 4, -4, -3, 3, 3, 4, 0, 1, 3, -4, -2, 1, 4, -2, 3, -2, -3, -2, -3, 1, 0, -1, 2, -1, -4, -2, 4, -4, -1, 0, -4, 4, 3, -3, 4, 2, 2, -4, 3, 4, -4 };
        int k = 978;
        assertEquals(974, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case37() {
        int[] x = { 48, 51, 76, 19, 8, 3, 82, 83, 18, 23, 70, 15, 82, 37, 67, 73, 27, 39, 85, 42, 27, 46, 4, 31, 98, 44, 20, 48, 95, 2, 18, 74, 40, 15, 17, 66, 75, 18, 32, 6, 19, 63, 80, 30, 57 };
        int[] y = { -2, 1, 1, -4, 1, 2, 4, 4, 2, 3, -3, 1, 3, 4, -2, -1, 3, 4, 1, -2, -2, 1, 4, -3, 2, -3, 1, 4, 2, 4, -3, -2, 4, -1, 0, -4, -4, 1, 4, -3, -3, -1, -3, -1, 4 };
        int k = 962;
        assertEquals(960, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case38() {
        int[] x = { 1, 35, 7, 67, 94, 50, 14, 65, 96, 89, 84, 11, 63, 9, 5, 85, 18, 73, 19, 17, 30, 61, 50, 64, 42, 26, 80, 68, 23, 84, 37, 48, 46, 68, 15, 55, 79, 23, 10, 88, 51, 73, 78, 48, 3, 76 };
        int[] y = { -4, -3, -1, 0, -1, 3, 0, -4, 3, 2, 4, -1, 2, 4, 2, 1, 2, 1, -3, 1, -3, 1, 0, -2, 1, -2, 0, 3, 0, 2, -1, -4, -3, -3, -4, -3, -2, -1, -4, -1, 4, -3, -1, 0, 2, 4 };
        int k = 994;
        assertEquals(989, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case39() {
        int[] x = { 69, 72, 50, 1, 83, 90, 68, 86, 41, 72, 24, 86, 38, 31, 74, 85, 89, 90, 55, 15, 40, 11, 11, 6, 44, 13, 76, 31, 30, 96, 67, 57, 23, 94, 42, 25, 95, 10, 7, 86, 5, 29, 66, 78, 93, 33, 35 };
        int[] y = { -3, -4, -2, 3, 1, -4, -1, -1, -1, 4, 0, 3, -1, 0, 2, 1, -2, 1, 0, 0, 3, 4, -2, -4, 4, 1, 3, 2, 3, -4, 0, 3, -1, -3, -4, 4, 1, -3, 2, 1, 3, -4, 4, -3, 2, -1, 4 };
        int k = 925;
        assertEquals(923, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case40() {
        int[] x = { 11, 81, 63, 94, 53, 23, 63, 8, 59, 29, 71, 26, 15, 3, 75, 74, 90, 54, 85, 21, 89, 6, 76, 11, 21, 54, 69, 60, 47, 7, 52, 16, 13, 9, 48, 47, 98, 42, 55, 14, 39, 19, 1, 22 };
        int[] y = { -4, 0, -4, 3, 2, 1, -1, -1, -3, 3, 1, -1, -2, -4, -4, -2, -3, -3, 1, 0, 3, 1, 0, 0, 1, 2, -1, 4, 0, 0, 2, 4, 0, -2, 1, -1, 1, 2, 2, -2, 3, 0, -4, 0 };
        int k = 914;
        assertEquals(910, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case41() {
        int[] x = { -18, 0, 1, -13, -21, -15, -22, -3, -9, -17, -4, -19, -14, -8, -18, -10, -19, -14, -15, -2, -1, -9, -3, -11, -12, -20, -16, -20, -6, -6, -7, -1, -11, -2, -7, -8, -12, -4, -5, 0, -13, -10, -21, -5, -22, -16, -17 };
        int[] y = { 19, -1, 0, 14, -22, -16, -23, 4, -10, 18, 5, -20, 15, -9, -19, -11, 20, -15, 16, 3, 2, 10, -4, 12, 13, 21, -17, -21, 7, -7, -8, -2, -12, -3, 8, 9, -13, -5, -6, 1, -14, 11, 22, 6, 23, 17, -18 };
        int k = 1000;
        assertEquals(930, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case42() {
        int[] x = { -18, 0, 1, -13, -21, -15, -22, -3, -9, -17, -4, -19, -14, -8, -18, -10, -19, -14, -15, -2, -1, -9, -3, -11, -12, -20, -16, -20, -6, -6, -7, -1, -11, -2, -7, -8, -12, -4, -5, 0, -13, -10, -21, -5, -22, -16, -17 };
        int[] y = { 19, -1, 0, 14, -22, -16, -23, 4, -10, 18, 5, -20, 15, -9, -19, -11, 20, -15, 16, 3, 2, 10, -4, 12, 13, 21, -17, -21, 7, -7, -8, -2, -12, -3, 8, 9, -13, -5, -6, 1, -14, 11, 22, 6, 23, 17, -18 };
        int k = 71;
        assertEquals(1, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case43() {
        int[] x = { -18, 0, 1, -13, -21, -15, -22, -3, -9, -17, -4, -19, -14, -8, -18, -10, -19, -14, -15, -2, -1, -9, -3, -11, -12, -20, -16, -20, -6, -6, -7, -1, -11, -2, -7, -8, -12, -4, -5, 0, -13, -10, -21, -5, -22, -16, -17 };
        int[] y = { 19, -1, 0, 14, -22, -16, -23, 4, -10, 18, 5, -20, 15, -9, -19, -11, 20, -15, 16, 3, 2, 10, -4, 12, 13, 21, -17, -21, 7, -7, -8, -2, -12, -3, 8, 9, -13, -5, -6, 1, -14, 11, 22, 6, 23, 17, -18 };
        int k = 70;
        assertEquals(0, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case44() {
        int[] x = { -18, 0, 1, -13, -21, -15, -22, -3, -9, -17, -4, -19, -14, -8, -18, -10, -19, -14, -15, -2, -1, -9, -3, -11, -12, -20, -16, -20, -6, -6, -7, -1, -11, -2, -7, -8, -12, -4, -5, 0, -13, -10, -21, -5, -22, -16, -17 };
        int[] y = { 19, -1, 0, 14, -22, -16, -23, 4, -10, 18, 5, -20, 15, -9, -19, -11, 20, -15, 16, 3, 2, 10, -4, 12, 13, 21, -17, -21, 7, -7, -8, -2, -12, -3, 8, 9, -13, -5, -6, 1, -14, 11, 22, 6, 23, 17, -18 };
        int k = 69;
        assertEquals(0, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case45() {
        int[] x = { 0, 5, -6, -6, 6, 6, 1, 6, -4, -6, -1, -6, -6, -5, 6, -6, -6, 6, 6, -1, 1, 6, 4, 6, -3, 2, -3, -2, 4, 2, 3, -6, -6, 6, 6, -6, 5, -6, 6, -6, 6, -5, 6, -4, -2, 0, -6 };
        int[] y = { 6, 6, 3, 6, -1, -3, -6, 2, -6, 2, 6, 4, -6, -6, -4, -4, 1, 3, -2, -6, 6, 1, -6, -5, -6, -6, 6, 6, 6, 6, 6, -2, -5, 4, -6, -1, -6, 0, 6, 5, 5, 6, 0, 6, -6, -6, -3 };
        int k = 992;
        assertEquals(985, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case46() {
        int[] x = { 6, 6, 6, -6, 6, 2, -1, -2, 6, 6, 5, -6, -6, -6, 4, 6, -6, 6, -3, 4, 6, 1, -6, -3, -6, 3, -4, 6, -6, 3, -5, -4, -5, 1, 0, 5, -6, 6, 6, -6, 2, 0, -6, -1, 6, -6, -2 };
        int[] y = { 1, -4, 0, -3, 5, -6, -6, -6, -1, 6, -6, 0, -6, 4, 6, -6, 3, -5, 6, -6, 3, -6, -5, -6, 5, 6, 6, -3, -1, -6, 6, -6, -6, 6, -6, 6, 6, 4, -2, -4, 6, 6, 1, 6, 2, -2, 6 };
        int k = 995;
        assertEquals(974, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case47() {
        int[] x = { -1, -6, -1, 6, 5, -6, 2, 6, 6, -6, -6, -6, 3, -6, 1, -6, 1, 6, -3, 6, -6, -6, -5, 5, -3, 6, 6, 4, 4, 6, 3, -6, 6, -4, 6, -6, -2, 6, 0, 2, -6, -4, -6, -5, 6, 6, 0 };
        int[] y = { 6, 1, -6, 1, -6, 5, -6, 6, 2, 3, -3, -2, 6, 0, 6, 2, -6, 5, 6, -1, 6, -4, -6, 6, -6, -3, -5, -6, 6, 4, -6, -5, -6, -6, -2, 4, 6, 3, 6, 6, -1, 6, -6, 6, -4, 0, -6 };
        int k = 998;
        assertEquals(987, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case48() {
        int[] x = {  };
        int[] y = {  };
        int k = 1000;
        assertEquals(1000, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case49() {
        int[] x = { 1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4 };
        int[] y = { 0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5 };
        int k = 47;
        assertEquals(31, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case50() {
        int[] x = { 1, 0, 0 };
        int[] y = { 0, 1, -1 };
        int k = 1;
        assertEquals(0, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case51() {
        int[] x = { -2, 1, 0, 2, 3, 4, -2, 0, 2, 4, -2, 0, 2, 4, -2, 0, 1, 2, 4, 5, 6, 7, 7, -2, 0, 1, 2, 3, 4, 5, 6, 7, -2, 0, -2, 0, -2, 0, -2, 0, -2, 0, -2, 1, 0 };
        int[] y = { 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -7 };
        int k = 18;
        assertEquals(11, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case52() {
        int[] x = { 2, 2, 2, 1, 0, -1, -2, 2, 2, 1, 0, -1, -2 };
        int[] y = { 0, 1, 2, 2, 2, 2, 2, -1, -2, -2, -2, -2, -2 };
        int k = 17;
        assertEquals(8, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case53() {
        int[] x = { 1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] y = { 0, 0, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };
        int k = 1000;
        assertEquals(992, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case54() {
        int[] x = { 991, 991, 991, 991 };
        int[] y = { -2, -1, 0, 1 };
        int k = 996;
        assertEquals(994, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case55() {
        int[] x = { 1, 1, 2, -1 };
        int[] y = { 1, -1, 0, 0 };
        int k = 2;
        assertEquals(1, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case56() {
        int[] x = { 1, 2, 3, 1, 2, 3, 3 };
        int[] y = { 1, 1, 1, -1, -1, -1, 0 };
        int k = 500;
        assertEquals(498, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case57() {
        int[] x = { 1 };
        int[] y = { 1 };
        int k = 1000;
        assertEquals(1000, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case58() {
        int[] x = { 1, 1, 1, 1, 1, 0, 0 };
        int[] y = { 2, 1, 0, -1, -2, 1, -1 };
        int k = 100;
        assertEquals(95, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case59() {
        int[] x = { -500 };
        int[] y = { -500 };
        int k = 1000;
        assertEquals(1000, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case60() {
        int[] x = { 1, 1, 1, 1 };
        int[] y = { 0, 1, 2, 3 };
        int k = 50;
        assertEquals(49, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case61() {
        int[] x = { -2, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 1, 1, 2 };
        int[] y = { 0, -1, -2, -3, 1, -4, 1, -2, -4, 0, -1, -2, -4, -3 };
        int k = 6;
        assertEquals(1, thegriddivtwo.find(x, y, k));
    }

    @Test
    public void case62() {
        int[] x = { 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5 };
        int[] y = { 2, 3, 4, 2, 3, 4, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, 4, 5, 4, 5 };
        int k = 15;
        assertEquals(9, thegriddivtwo.find(x, y, k));
    }

}
