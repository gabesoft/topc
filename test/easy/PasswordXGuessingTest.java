package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class PasswordXGuessingTest {
    PasswordXGuessing passwordxguessing = new PasswordXGuessing();

    @Test
    public void case1() {
        String[] guesses = { "58", "47" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case2() {
        String[] guesses = { "539", "540", "541" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case3() {
        String[] guesses = { "12", "34", "56", "78" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case4() {
        String[] guesses = { "2", "3", "5" };
        assertEquals(7L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case5() {
        String[] guesses = { "4747", "4747", "4747", "4747" };
        assertEquals(36L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case6() {
        String[] guesses = { "0", "1" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case7() {
        String[] guesses = { "0", "1", "2" };
        assertEquals(7L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case8() {
        String[] guesses = { "6", "4", "2", "3" };
        assertEquals(6L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case9() {
        String[] guesses = { "7", "0", "2", "3", "5" };
        assertEquals(5L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case10() {
        String[] guesses = { "0", "1", "2", "3", "4", "5" };
        assertEquals(4L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case11() {
        String[] guesses = { "0", "1", "2", "3", "4", "5", "6" };
        assertEquals(3L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case12() {
        String[] guesses = { "0", "1", "2", "3", "4", "5", "6", "7" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case13() {
        String[] guesses = { "0", "1", "2", "3", "4", "5", "6", "7", "8" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case14() {
        String[] guesses = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case15() {
        String[] guesses = { "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668", "89792897622902311895400074000570560961823116569668" };
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case16() {
        String[] guesses = { "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508", "030973098925546155508" };
        assertEquals(189L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case17() {
        String[] guesses = {};
        assertEquals(171L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case18() {
        String[] guesses = { "42017635548039233752261281001607100863", "42017635548039233752261281001607100863", "42017635548039233752261281001607100863", "42017635548039233752261281001607100863", "42017635548039233752261281001607100863" };
        assertEquals(342L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case19() {
        String[] guesses = { "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284", "92434889554915118429248348233863228636681284" };
        assertEquals(396L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case20() {
        String[] guesses = {};
        assertEquals(108L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case21() {
        String[] guesses = { "7220608984098067144942108624684308569487", "7220608984098067144942108624684308569487", "7220608984098067144942108624684308569487", "7220608984098067144942108624684308569487" };
        assertEquals(360L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case22() {
        String[] guesses = { "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487", "9985611127537621009631798838736826517640395257487" };
        assertEquals(441L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case23() {
        String[] guesses = { "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911", "353453931219775041465327911" };
        assertEquals(243L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case24() {
        String[] guesses = {};
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case25() {
        String[] guesses = {};
        assertEquals(306L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case26() {
        String[] guesses = { "95782476750531415380633215535811352736030425868319", "95782476750591415380633215535811352736030425868319", "95782476750501415380633215535811352736030425868319", "95782476750541415380633215535811352736030425868319", "95782476750531415380633215535811352736030425868319", "95782476750581415380633215535811352736030425868319", "95782476750501415380633215535811352736030425868319", "95782476750511415380633215535811352736030425868319", "95782476750531415380633215535811352736030425868319", "95782476750511415380633215535811352736030425868319", "95782476750551415380633215535811352736030425868319", "95782476750531415380633215535811352736030425868319", "95782476750571415380633215535811352736030425868319", "95782476750591415380633215535811352736030425868319", "95782476750511415380633215535811352736030425868319", "95782476750571415380633215535811352736030425868319", "95782476750551415380633215535811352736030425868319", "95782476750521415380633215535811352736030425868319", "95782476750531415380633215535811352736030425868319", "95782476750581415380633215535811352736030425868319", "95782476750581415380633215535811352736030425868319", "95782476750501415380633215535811352736030425868319", "95782476750551415380633215535811352736030425868319", "95782476750591415380633215535811352736030425868319", "95782476750581415380633215535811352736030425868319", "95782476750581415380633215535811352736030425868319", "95782476750591415380633215535811352736030425868319", "95782476750521415380633215535811352736030425868319", "95782476750511415380633215535811352736030425868319", "95782476750541415380633215535811352736030425868319", "95782476750501415380633215535811352736030425868319", "95782476750571415380633215535811352736030425868319", "95782476750521415380633215535811352736030425868319", "95782476750501415380633215535811352736030425868319", "95782476750571415380633215535811352736030425868319", "95782476750571415380633215535811352736030425868319", "95782476750541415380633215535811352736030425868319", "95782476750571415380633215535811352736030425868319", "95782476750511415380633215535811352736030425868319", "95782476750551415380633215535811352736030425868319", "95782476750551415380633215535811352736030425868319", "95782476750501415380633215535811352736030425868319", "95782476750511415380633215535811352736030425868319", "95782476750541415380633215535811352736030425868319", "95782476750551415380633215535811352736030425868319", "95782476750581415380633215535811352736030425868319", "95782476750501415380633215535811352736030425868319", "95782476750591415380633215535811352736030425868319", "95782476750521415380633215535811352736030425868319", "95782476750541415380633215535811352736030425868319" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case27() {
        String[] guesses = { "91568018244761024448548585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448748585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448448585552062155564543339", "91568018244761024448148585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448148585552062155564543339", "91568018244761024448148585552062155564543339", "91568018244761024448148585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448448585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448748585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448748585552062155564543339", "91568018244761024448148585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448748585552062155564543339", "91568018244761024448448585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448448585552062155564543339", "91568018244761024448448585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448148585552062155564543339", "91568018244761024448848585552062155564543339", "91568018244761024448548585552062155564543339", "91568018244761024448148585552062155564543339" };
        assertEquals(5L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case28() {
        String[] guesses = { "86771258282205800569605337", "86771258272205800569605337", "86771258272205800569605337", "86771258252205800569605337", "86771258212205800569605337", "86771258272205800569605337", "86771258262205800569605337", "86771258282205800569605337", "86771258202205800569605337", "86771258232205800569605337", "86771258212205800569605337", "86771258202205800569605337", "86771258222205800569605337", "86771258202205800569605337", "86771258282205800569605337", "86771258282205800569605337", "86771258262205800569605337", "86771258232205800569605337" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case29() {
        String[] guesses = { "4143894719", "4113894719", "4133894719", "4163894719", "4143894719", "4183894719", "4133894719", "4183894719" };
        assertEquals(5L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case30() {
        String[] guesses = { "963533195784532479095", "963563195784532479095", "963563195784532479095", "963523195784532479095", "963523195784532479095", "963573195784532479095", "963543195784532479095", "963563195784532479095", "963563195784532479095", "963593195784532479095", "963593195784532479095", "963523195784532479095", "963593195784532479095" };
        assertEquals(4L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case31() {
        String[] guesses = { "1832438275458764440292673960183", "1832438275458764440292673960183", "1832438275458764440292673660183", "1832438275458764440292673060183", "1832438275458764440292673260183", "1832438275458764440292673660183", "1832438275458764440292673960183", "1832438275458764440292673960183", "1832438275458764440292673760183", "1832438275458764440292673760183", "1832438275458764440292673660183", "1832438275458764440292673260183", "1832438275458764440292673660183", "1832438275458764440292673960183", "1832438275458764440292673460183", "1832438275458764440292673760183", "1832438275458764440292673760183", "1832438275458764440292673460183", "1832438275458764440292673960183", "1832438275458764440292673960183", "1832438275458764440292673960183", "1832438275458764440292673760183", "1832438275458764440292673260183", "1832438275458764440292673460183" };
        assertEquals(4L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case32() {
        String[] guesses = { "5374271725348812", "5374271705348812", "5374271725348812", "5374271735348812", "5374271725348812", "5374271755348812", "5374271775348812", "5374271745348812", "5374271775348812", "5374271735348812", "5374271765348812", "5374271755348812", "5374271785348812", "5374271745348812", "5374271775348812", "5374271765348812", "5374271765348812", "5374271785348812", "5374271755348812", "5374271735348812", "5374271775348812" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case33() {
        String[] guesses = { "159902689208240899729475825227129", "159902689208240899729475225227129", "159902689208240899729475125227129", "159902689208240899729475525227129", "159902689208240899729475725227129", "159902689208240899729475825227129", "159902689208240899729475225227129", "159902689208240899729475625227129", "159902689208240899729475225227129" };
        assertEquals(4L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case34() {
        String[] guesses = {};
        assertEquals(3L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case35() {
        String[] guesses = { "7321050821141856853736222396455487518980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487517980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487517980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487513980", "7321050821141856853736222396455487517980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487513980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487513980", "7321050821141856853736222396455487513980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487513980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487517980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487518980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487517980", "7321050821141856853736222396455487519980", "7321050821141856853736222396455487513980", "7321050821141856853736222396455487513980", "7321050821141856853736222396455487513980" };
        assertEquals(6L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case36() {
        String[] guesses = { "91427965", "91429965", "91426965", "91423965", "91426965", "91428965", "91422965", "91426965", "91429965", "91426965", "91428965", "91422965", "91428965", "91422965", "91423965", "91429965", "91420965", "91420965", "91425965", "91422965", "91428965", "91422965", "91421965", "91427965", "91426965", "91425965", "91426965", "91421965", "91423965", "91422965", "91420965", "91422965" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case37() {
        String[] guesses = {};
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case38() {
        String[] guesses = { "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4134980759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725", "4194983759861003725" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case39() {
        String[] guesses = { "1090619", "1090619", "1090619", "1092639", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619", "1090619" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case40() {
        String[] guesses = { "888505", "888505", "888505", "888505", "858605", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505", "888505" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case41() {
        String[] guesses = { "11664864", "15664864" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case42() {
        String[] guesses = { "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143243343026765004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004", "4295143643343026762004" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case43() {
        String[] guesses = {};
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case44() {
        String[] guesses = {};
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case45() {
        String[] guesses = {};
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case46() {
        String[] guesses = { "836", "418", "818", "818", "818", "818", "818" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case47() {
        String[] guesses = { "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979715291500457316397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239", "4979775291500457116397442011680690317509239" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case48() {
        String[] guesses = { "79970546337043112040422356960257128889484957067377", "79990546337043912040422356960657128889484957067377", "79980546337043912040422356960657128889484957067377", "79910546337043912040422356960257128889484957067377", "79960546337043912040422356960757128889484957067377", "79960546337043912040422356960957128889484957067377", "79990546337043912040422356960757128889484957067377", "79910546337043912040422356960757128889484957067377", "79950546337043912040422356960757128889484957067377", "79990546337043912040422356960857128889484957067377", "79900546337043912040422356960957128889484957067377", "79970546337043912040422356960957128889484957067377", "79920546337043112040422356960657128889484957067377", "79990546337043112040422356960257128889484957067377", "79990546337043112040422356960657128889484957067377", "79920546337043912040422356960657128889484957067377", "79990546337043912040422356960657128889484957067377", "79950546337043112040422356960757128889484957067377", "79900546337043912040422356960257128889484957067377", "79970546337043112040422356960957128889484957067377", "79980546337043112040422356960257128889484957067377", "79900546337043912040422356960757128889484957067377", "79940546337043112040422356960757128889484957067377", "79970546337043912040422356960957128889484957067377", "79950546337043112040422356960757128889484957067377", "79980546337043112040422356960657128889484957067377", "79960546337043912040422356960657128889484957067377", "79970546337043112040422356960857128889484957067377", "79980546337043112040422356960757128889484957067377", "79990546337043112040422356960757128889484957067377", "79900546337043912040422356960757128889484957067377", "79990546337043112040422356960257128889484957067377", "79910546337043912040422356960657128889484957067377", "79920546337043912040422356960657128889484957067377", "79900546337043112040422356960857128889484957067377", "79970546337043912040422356960657128889484957067377", "79920546337043912040422356960957128889484957067377", "79990546337043112040422356960957128889484957067377", "79940546337043912040422356960757128889484957067377", "79900546337043912040422356960957128889484957067377", "79910546337043112040422356960257128889484957067377", "79990546337043912040422356960257128889484957067377", "79980546337043112040422356960757128889484957067377", "79960546337043112040422356960757128889484957067377", "79980546337043112040422356960957128889484957067377", "79950546337043912040422356960657128889484957067377", "79950546337043112040422356960657128889484957067377", "79970546337043912040422356960857128889484957067377", "79950546337043112040422356960757128889484957067377", "79950546337043912040422356960757128889484957067377" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case49() {
        String[] guesses = { "5891649025112133964508695714665878600182775359665", "1203646023133243507227920049665881267512004255135", "0845643023032543308129495445665829002602293952785", "5500646068150493207801945909665871712572263851190", "4668646994910233208804965715665801072682266552160", "1387640891152123567224985361665889072682575851485", "8555646327914013169616915298665808813902760559440", "1587646968937793108012640740665877972452770359545", "8667640323116823365210485966665889662112294659685", "1771642097103793104634460996665811970942206853330", "1108646398054943869614490310665809472972066359430" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case50() {
        String[] guesses = { "03642", "01665", "03652", "41669", "43622", "41695", "46672", "03622", "43662", "06665", "01655", "03679", "01645", "46672", "01695", "43629", "43629", "01669" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case51() {
        String[] guesses = { "5042887472571389434559613", "5947922472941389414739813", "5948871412271381534725313", "5249868472211389014575613", "5149962472071381324595813", "5247128412141381114515913", "5148898472201389194525513", "5449162472201381324759613", "5148871472001389314545913", "5047881412781381014575513", "5448987412211389124799513", "5049877472071389494555213", "5247198412131389494575913", "5149997472221389824509213", "5342868412741389014729513", "5342967472041381114595513", "5947968472221381814525613", "5440978412531381894799313", "5749122472751389434799213", "5949972412111381594799013", "5140181412941389594529213", "5142871412051381014509613" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case52() {
        String[] guesses = { "73438977354468646998533285", "93436977322461644994733294", "73039977378465642924333208", "83439977352962645978533248", "63938977346761648934733238", "73934977397465646958933234", "83935977352468648998533246", "23432977341465648904733294", "43234977331965648938933276", "83030977371961648948833259", "63435977380666646998633276", "73035977322461644954933249", "43035977332365648924933205", "93339977374362645934733272", "73938977356665644934633295", "83736977399961642938333255", "93434977356968648978533255", "93034977396961642998833289", "73239977302968644994533280", "83036977314461642998833284", "83931977374961646998533239", "73435977391368644928733248", "63934977387766648904933288", "93731977306962642974833250", "73734977341466645928733282", "63039977349465645928733239", "93930977398366646978333249", "93439977352965646994833244", "43335977344768644954833288", "43438977341366645948933292" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case53() {
        String[] guesses = { "0674560941856091712675855280254803460", "0386860744341721714970055280244211467", "0885260734828721712979455280224051444", "0390560641861791716678755280284133450", "0383860741306731717979855280414420450", "0885260744975021713175755280474303465", "0494460934095791714476055280724433440" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case54() {
        String[] guesses = { "55543181267072034737765697", "74513142455042454707897557", "73973144455002750835829626", "57513119425092430335249492", "54973180427042022207739212", "73913112420092749807409237", "57913113460082270737537506", "76573184227062232105497255", "74543184450072764835812235", "57943110255072071237575690", "55533111425032437707605430" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case55() {
        String[] guesses = { "4747", "4747", "4747", "4747" };
        assertEquals(36L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case56() {
        String[] guesses = { "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000", "12300000001230000000123000000012300000001230000000" };
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case57() {
        String[] guesses = { "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111117", "11111111111111111111111111111111111111111111111113", "11111111111111111111111111111111111111111111111119", "11111111111111111111111111111111111111111111111114", "11111111111111111111111111111111111111111111111119", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111110" };
        assertEquals(5L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case58() {
        String[] guesses = { "1", "1", "1", "1", "1" };
        assertEquals(9L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case59() {
        String[] guesses = { "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000" };
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case60() {
        String[] guesses = { "01234", "01244" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case61() {
        String[] guesses = { "99999999999999999999999999999999999999999999999999" };
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case62() {
        String[] guesses = {};
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case63() {
        String[] guesses = { "1", "1" };
        assertEquals(9L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case64() {
        String[] guesses = { "167", "467", "567" };
        assertEquals(7L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case65() {
        String[] guesses = { "1" };
        assertEquals(9L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case66() {
        String[] guesses = { "12345" };
        assertEquals(45L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case67() {
        String[] guesses = { "11111111111111111" };
        assertEquals(153L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case68() {
        String[] guesses = { "1234554321123455432112345654321098907960590940955" };
        assertEquals(441L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case69() {
        String[] guesses = { "2", "2" };
        assertEquals(9L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case70() {
        String[] guesses = { "12345678901234567890123456789012345678901234567891", "12345678901234567890123456789012345678901234567810", "12345678901234567890123456789012345678901234567190", "12345678901234567890123456789012345678901234561890", "12345678901234567890123456789012345678901234517890", "12345678901234567890123456789012345678901234167890", "12345678901234567890123456789012345678901231567890", "12345678901234567890123456789012345678901214567890", "12345678901234567890123456789012345678902134567890", "12345678901234567890123456789012345678911234567890", "12345678901234567890123456789012345678101234567890", "12345678901234567890123456789012345671901234567890", "12345678901234567890123456789012345618901234567890", "12345678901234567890123456789012345178901234567890", "12345678901234567890123456789012341678901234567890", "12345678901234567890123456789012315678901234567890", "12345678901234567890123456789012145678901234567890", "12345678901234567890123456789011345678901234567890", "12345678901234567890123456789022345678901234567890", "12345678901234567890123456789112345678901234567890", "12345678901234567890123456781012345678901234567890", "12345678901234567890123456719012345678901234567890", "12345678901234567890123456189012345678901234567890", "12345678901234567890123451789012345678901234567890", "12345678901234567890123416789012345678901234567890", "12345678901234567890123156789012345678901234567890", "12345678901234567890121456789012345678901234567890", "12345678901234567890113456789012345678901234567890", "12345678901234567890523456789012345678901234567890", "12345678901234567891123456789012345678901234567890", "12345678901234567810123456789012345678901234567890", "12345678901234567190123456789012345678901234567890", "12345678901234561890123456789012345678901234567890", "12345678901234517890123456789012345678901234567890", "12345678901234167890123456789012345678901234567890", "12345678901231567890123456789012345678901234567890", "12345678901214567890123456789012345678901234567890", "12345678903134567890123456789012345678901234567890", "12345678911234567890123456789012345678901234567890", "12345678101234567890123456789012345678901234567890", "12345671901234567890123456789012345678901234567890", "12345618901234567890123456789012345678901234567890", "12345178901234567890123456789012345678901234567890", "12341678901234567890123456789012345678901234567890", "12315678901234567890123456789012345678901234567890", "12145678901234567890123456789012345678901234567890", "11345678901234567890123456789012345678901234567890", "42325678901234567890123456789012345678901234567890", "12343678901234567890123456789012345678901234567890", "12345478901234567890123456789012345678901234567890" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case71() {
        String[] guesses = { "10", "11", "12", "13", "14", "15", "16", "17", "18", "19" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case72() {
        String[] guesses = { "9223372036854775808" };
        assertEquals(171L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case73() {
        String[] guesses = {};
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case74() {
        String[] guesses = { "4727", "4746", "4748", "4749" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case75() {
        String[] guesses = { "111111111111111111111111111111111111111", "111111111111111111111111111111111111112" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case76() {
        String[] guesses = { "213728746234623649212387910" };
        assertEquals(243L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case77() {
        String[] guesses = { "11111111111111111111111111111111111111111111111111" };
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case78() {
        String[] guesses = { "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999998", "99999999999999999999999999999999999999999999999" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case79() {
        String[] guesses = {};
        assertEquals(441L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case80() {
        String[] guesses = { "1234", "2234", "2234" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case81() {
        String[] guesses = { "0", "1" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case82() {
        String[] guesses = { "125", "153", "523" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case83() {
        String[] guesses = {};
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case84() {
        String[] guesses = { "59", "78", "58", "79" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case85() {
        String[] guesses = { "123456789123456789123456789123456789123456789", "123456789123456789123426789123456789123456789" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case86() {
        String[] guesses = { "4747", "4747", "4747", "4748" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case87() {
        String[] guesses = {};
        assertEquals(450L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case88() {
        String[] guesses = { "123", "456" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case89() {
        String[] guesses = { "4567", "4578", "4768", "7568" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case90() {
        String[] guesses = { "1", "1", "2", "2", "3", "3", "3", "4" };
        assertEquals(6L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case91() {
        String[] guesses = { "1111234", "1111567" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case92() {
        String[] guesses = { "2111", "3111", "1211", "1311", "1121", "1131" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case93() {
        String[] guesses = { "29173898646052371586875350409624477553387761923047", "22304535287019541641565870626956029360427648603179", "42143111545130692896911267183662143067828583728479", "57707954133159490660032121739638676852677903213865", "07188214441334332515274771519139062288772134801073", "59634843706372447163465626751260003711252845647977", "79740910127443424655591809881668882680507870028376", "91468222846820772541003973299083360556176823781522", "09794099682472506120677079530414049602237888278804", "51890826435785045858971271893297269358175362274370", "80633065964059367665728967639910258247536162994081", "31839877098216827233949018076979750816075598967475", "14779227376663192910479710427636996567387062735169", "51614941351234373443910759848124088175449316272448", "80183551998567377388560917516957051051146285091962", "21129926994373708213271977995217488236943063472136", "78215591076078971858515016876151062525213979624442", "12883387537444052917846778173564469128122122721397", "46451097554110275850193864834836232596782796421208", "40989337450476059826775695704317063244652800765926", "88837512258531150483583149111688355710524673423849", "62179680967472435866576904906566961884306282334325", "49177562591085867096160574470453378263235585827267", "31881898611793498177412394259168957723226982601588", "15913752915115063369807476552402364344009659236426", "70468710832896082464783668710280863015579060639847", "25820237739900578438659781226086877340432308784732", "88867438994038498375577293278554654226593542368948", "30876540651914896734510425775126934573026082560556", "12139217852650178215285904048547265895735517625868", "91693466617548187128663115978387278008358260394084", "89764950726919390376711505008449626437882550077485", "93561058269532802408719434696367954465739116333524", "79000632894512388702840634611849148072915046810635", "87042234669176294438515736776386917908307644448927", "50733739280909782128628948023114044401767278930302", "76773640934667014120458992531917499025594152278211", "08951799860062058156595331253792437515659030806262", "64360517218261936983443729199035346948928072016732", "34146247773079241905696935218171929964256650898587", "67752583914244977863883271833681171511075124410461", "03805939727866739411819323250854200332376086662747", "09514084204258170903291449527916467784504586773368", "54697684931500661155387457509365230771138354245990", "63755815159573537637663490747142050288404660488401", "78036813298056773990049057857453180937515700472583", "55492041077715478928480366066531993953436418534689", "17478674597707187928247693735075361864958328510339", "72265370914992293413905017418762847404042543684112", "37157567416201317928793911247202508848970369047034" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case94() {
        String[] guesses = { "53", "54" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case95() {
        String[] guesses = { "539", "540", "549" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case96() {
        String[] guesses = { "25", "25", "36", "36" };
        assertEquals(2L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case97() {
        String[] guesses = { "14", "24", "34" };
        assertEquals(7L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case98() {
        String[] guesses = { "111", "111" };
        assertEquals(27L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case99() {
        String[] guesses = { "9999999999999999998", "9999999999999999999" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case100() {
        String[] guesses = { "123" };
        assertEquals(27L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case101() {
        String[] guesses = { "5121", "5221" };
        assertEquals(8L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case102() {
        String[] guesses = { "123", "145", "627" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case103() {
        String[] guesses = { "12", "13", "14", "25" };
        assertEquals(1L, passwordxguessing.howMany(guesses));
    }

    @Test
    public void case104() {
        String[] guesses = { "12352", "18356", "16326" };
        assertEquals(0L, passwordxguessing.howMany(guesses));
    }

}
