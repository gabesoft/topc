package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class BichromeBoardTest {
    BichromeBoard bichromeboard = new BichromeBoard();

    @Test
    public void case1() {
        String[] board = { "W?W", "??B", "???" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case2() {
        String[] board = { "W??W" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case3() {
        String[] board = { "??" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case4() {
        String[] board = { "W???", "??B?", "W???", "???W" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case5() {
        String[] board = { "W???", "??B?", "W???", "?B?W" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case6() {
        String[] board = { "B" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case7() {
        String[] board = { "WBW?WBWB?BW?W?WBWBWBWBWBWB????W?WBWBW?WBWB??W?", "BWB?BWBWB?BWBW?WBW?WB????WBWB??W??BWBW?WB?B?BW", "??W?W?W??BW??BWBWBWB?B?BW?WBW?W?W?WB?B??W??BWB", "B?BWBW?WBW?WBWBWBWBW?WBWBWB??W???W??B?B???B?B?", "WB??WB?B???BW???WB?BW???WBWBWBWBW?W?W?WBWBWBWB", "B?BWBWBW???WB?BW?WBW??B?BWBWB???BW??B??WB?BWBW", "?BWBWBWBWBWBWB?BWB??WBW?WB??WBW?WB?BWBW???W?WB", "BW??BW??BWBW?W???W??BWB??W?WBW??B?BWB?B?BW??B?", "W???WBWB??WBWBWBW?WB?BW?WBW?WBWB??WBWB?BWBWBWB", "?WBWBW?W??BWBWB??WB???B??WBW?W?W?W???W?WB??WB?", "WB?BWB?BW??B?BW?WB??WBWBWBW?WB?B??WBWBW?WBW?WB", "BWBWB?BWBW?WBWBWBWBW??BWB????W?WBWB?BW?WBWBW?W", "WBW????B?BWBWB?BWB?BWB?BWBW??BWB?BWB?BW?W?WBWB", "BW???WB??W?WBW?WB?B?B?B??WB?B???BWBWBWBW??BW?W", "????WBWBW??BWBWB?BWB?B??WB??WBWB??WBW??BWBWB?B", "?WBWBW??BWBWBW?W??B?BWBWB??WB?B??WB??WB?BW?W?W", "??WBWBWBWBWBWB?B?B??WB?BW?WB?BW?WBW?W??BWBWBWB", "B?BWB?B?BW??B?BWBWBWB??W???W?WBW?WBW?W??B??WB?", "WBWBWBWBW?WB?BW??BWBW??BW?WB?BWBW?WBW?W??B??WB", "?WBWB?BWB??W?W?W?W?WBWBWB?BW?WBWBWBW?WB???BW?W", "??WBWB??WB?BWBWB??WBWBWBW?WBW???WBW????BW?WBWB", "BWBWBW??BWBW???WBW????B?BWBWB??W?W?WB?BWBWBWB?", "WBWB??WBWBWB???B?B??W???WB?BW???WBWBWB?????BWB", "B?BWBWBWBWBW??BWBWBWB?BWBWBWBWBWBWB??W?WBW?WB?", "?B?BWBW??BWBWBWBWB?BWBWBWB??W?W?W????BWB?B??W?", "B??WB?BWB?BWB??W?WB??WBWBWB???B?BWBWB?BWB?B?B?", "WBW?WB?B?BWB????W??BWB?B?BW??B?B?B?B?BW??BWBWB", "??B??WBWBWB?B???BWBW?W???WB?BWBW??BW?WBW????B?", "?B??WB??WBWB??WB??W?WBWBWBWBWBW??BWBW?W??BWB?B", "?W?WBWBWB?BW??BWBWB?BWBWB?B??WBWBW????BW?W?WB?", "WB????WBWBWBW?W?WBWBWBW?WB?B??WB??W???WB??W?WB", "B??WBWB??W??BWBWBWB?BW?WBWB?B??W?W??BWBWBW??BW", "W???WBWBW????BWBWBWB??WB?BW?WBWBWB?B??WB???BWB", "B?BWBWBWBWBW?WBWB?B?BWB?BW?WBW?WB?B???BWB?B?BW", "WBW?W?WB?B?BW?WB??WB??WB?BWBW?W??B??WB?BWB?BWB", "?WBW?WB??W?WBW?WB?BWBWB??WBW?WBW?W??B?BW??B?BW", "?B?B?BW??B?B?BWB??WB?B?????BW?W?WBW?W?W?WBW??B", "??BW?W???W?W?WBW??BWBWBWBW??B??WB?BWB??W?W??BW", "W?WB?BWBWB??WB???BWBWB??W??B?BWBW?WB?BW?W?WBWB", "B??WB?BW??B?BW?W?W?WB?BWBWBW??BWBWBW??BWBWBWBW", "?B??WBWBWB??WB?BW?WBWBW?W??BWBWBWB??W?WB?BWBWB", "B?BWBWBWBWBWBWBWB??WB?B??W?WBWBWB??W??B?BWBWBW", "?B?BW?WBWBW??B?BW?W?W?WB??WB??W?W?W??BWBW?WB?B", "B?B?BWB???B?BWBWBWBW?WBW???W??BWB??WB???BW??BW" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case8() {
        String[] board = { "B?B???BW?WBW", "??WBWB?BWB??", "BW?W?WB??W?W", "WBWBWB??WB?B", "BWB???B?????", "???B?B?B?B?B", "?W?W?WB?B???", "??WBW?W?WBW?", "?W?WBWB?B???", "?B??WB?BWB??", "BW????B?B?BW", "WBW???W?W???", "??BWB?BWBW?W", "?BW?WB??W?W?", "?????W??BW??", "WB?BW?W?W???", "??B??WB???B?", "?B??WBW?????", "?W?????W???W", "???B?B?BW?W?", "B?BW???W?W?W", "?????BW?WB??", "?W?W?W??B???", "?B?BWBW?W???", "?WB???BWBW??", "WBW?W??B??WB", "??BWB?BW?W?W", "WBWB?B?BW?WB", "?WB???????BW", "??WB?B?BWB??", "BW?W?W???WB?", "WBW????BWBWB" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case9() {
        String[] board = { "??????????", "B??W???W??", "W?????W??B", "?????W???W", "??????????", "??B??W????", "??W???W???", "????BW?W??", "?????????B", "??B????W??", "??????????", "??BW??????", "??????W???", "??????B?B?", "??????????", "????BW???W", "???BW?????", "B????W????", "?B?B???B??" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case10() {
        String[] board = { "??????W?????????????????????????", "????????????????????????????????", "?????????B???????B????W??B???BW?", "?????????????????W??????????????", "?B??????????????????????????????", "????????????????????????????????", "?B???????????????????B????W?????", "???W???????????W??????B?????????", "W?????????????????WB????????WB??", "????????????????????????????????", "????????????????????????????????", "????????????????????????????????", "??W???????????WB????????????????", "??????????B?????????????????????", "W??B?????????????????B??????????", "???????W????????????????????????", "?B?????????????????B????????????", "?????????????????????????W?????W", "????????W???????????????????????", "????B????W???W???????????W??????", "???????????????????????????B????", "????????????????????????????????", "???????????B????????????????????", "??????????????????B?????????????", "?B??????????????????????????????", "?????????????????????????W??????" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case11() {
        String[] board = { "W?????WBW??????", "?????WB?????BW?", "?B???????B???BW", "???W???????????", "?????B??W????B?", "B??????W???WB??", "????W??B??W????", "??????B???B????", "????WBW???W??B?", "?W?????W?W?????", "????WB?????B???" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case12() {
        String[] board = { "?B????W????B?????BW?WB???BWBWB?B?B?????", "?W?W??????B??W?WB??W??BW?W?W???W??BWB??", "???B???B??W?W???????W?W?W?W?WB????WBW?W", "?WBWBW???WBW???W?W?WBW??B?B??W?WB??WB??", "?B?B?????B???B???????B????W??BW???W????", "?WB?BW??BW????B???????BW?W?W?WB????W??B", "WB?????B?BWB?BW??B?B??????W???W?W?W??B?", "B?????BWBW?WB????WBW?W??BW?W???WBW??B?B", "?BW?WBWBW????????BWB?B?BW?WBW??BWBW?WB?", "?????W??B????????W?W???W???????W?W????B", "?B?B??WBWBW???W??????????B??W??BW??B??W", "B?BWBWB?????B?BW?W???W??BW?W??B??WBWB?B", "W??B??W?WB?B?B??????????W???WBW?WB??W?W", "B?????????B?B???BW??B??WBWBW?WBW???W?W?", "?B?????B??????????W?WB???????B????WB?B?", "B??????W??B?BWB?B??WB???B?BW???W??BWB??", "??W?????WB?????BW?W????????B??W??B??WB?", "?W?W?W?WBWB???????BW??BWB??W?W?WBWB????", "WB??????W??B???B??W?W???W??B??W??????B?", "B??W???W?W??B???B??????WBWB????W????BWB", "WB?B?BWB????WBWB???BWBW?WBWB??WB????WBW", "B??WBWB??W??B???B??W??BW?WBW??B??WBW??B", "???B?BW??BW???W???W???W???W??B??W?WB?B?", "??????B?BWB?BWB???B???BW?W?????????WB??", "W?W??BW???WBWBW?WB?B?B???BW?WB?B?????BW", "B???BWBWBW???W??B??W?WB?B???B?BWBW??B??", "????W??????B?BWB???B?BWBW?????WBW?W???W", "BW??B????W???WBWB??W?W???????WB???B???B", "?B???B???BW?W?WB??W?WBW?W???WB??W?W????", "B?BW?WB??????W????BW?W?WB??????W????B?B", "?BWBW?????W???WB??WB??W?WB?B?B??????W??", "?W??BW??B?B?BW??B?BW?W??BW??B????WBW??B", "W?W?WB?B??W?W??BW????B??W?W????????B???", "??B???BW?WB??WB????WB?BW?WB?B?B?BW??B??", "WB??W?WB??WB??W?W?????W???W???W???????W", "BW????B????W?W???W???W??BW??B????W??B??", "??WB??W??BWB?B??WB??W??BW??B????WB?BW?W", "????BW?WB?B??????W?????WBW?W??B?????B??", "???B?B??W?W?W?W??B?????B?????BW?WBW???W", "?W?W??BW?WBW???W?W???????WB?B??W??B?BW?", "?BWB??W??BWBWB????????????W????????B???", "??B??W?W?????W?W??????????B????W?W?W?W?", "??W?W??BWB??W?W???WBW????B?BW?????WBW??", "?WB??????W??BWB?B??W?WB?B????W?WBWB??W?", "?B??????W??B?B???B????WBW?W???W?W?W???W", "?????W????B???B???BW???WBW?WB?BW?WBWB??", "W?WB?BW?W?W??BWB?????B??W????????BW??B?", "BW?W?????W?W?W??BW???????????W??B?BWB??", "?BW?WB????W?WB?B?BW????BW????B?B??W??B?", "?W?WB?B?B??WB????WB?B?????????B?B??W?W?" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case13() {
        String[] board = { "WBWB?BW?WBWBWB?BWBWBWBWBWB?BWBWBWBWBWB??WBW??BWB?", "B?B??W?WBWBWBWB?BWB?BWBWBWBWBWBWBWBWBWBW?WBWB?BW?", "WBWBWB?BW?WBWBWBW?WBWBWBW?W??BW?WBWBWBWBWBWB?BWBW", "BWBWBWBWBWBWBWBW?WBW?W?WBWBWBWB?BWBW??BWBW?WBWBWB", "WB??WBWBW?WB?BWBW?WBWB??W??BW??BWBWB?B?BWBWBWBWB?", "?WB?BWBWBWB?B??WBW??BWBWBWBWBW?WBWB?BWBWBWB?BWBWB", "W?W??BWBWBWB?B?BWBWBWBWBWBWBW?WBWB?B?BW?WBWBWBWBW", "B?BWBW?WBWBWBWBW??BWB?BWBW?W?W?WBWBWBWBWBWB??WBWB", "W?WBWBWBWBWBWB?BWBWBWBWBWBW?WBWBWBW?WBWBW?W?WBWBW", "BWBWBWBWBWB??WB??WBWBWBWBW?WB?BWBWBWBWBWBWBWBWBWB", "WBW??BWBWBWB?BWB?BWBW?WBWBWB?BWBWBWBWBWBWBWBWBWBW", "BWBWBWBWB?B?BWBWBWBWB??WBWBWBW??BW?WBWBW?WBWB?BWB", "WBWB??WBWB?BWBWBWBWBW?WBWBWBWB?B?BW?WBWBWBWB?BWBW", "BWBWB?BWBWBWBWBWBWBWBWB?BWBWBWBWB?BWBW?WBWBWBWBWB", "WBWBWBWBWBWBWBW?W?WBWBW?WBWBWB?BWBW?WBWB??WBW?WBW", "?WBWBWBWBWBWB?BW?WBWBWBWBWB?BWBWB???BWBW?WB?B?BWB", "WBWBW?WBWB??WBW?W?W??BWBWBWBWBW?WBWBW?WBWBWB?BWBW", "BWB??WBWBW?WBWBW?WBWBWBWB?BWBW?WBWBWBWBWBW?WBWBW?", "WBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW?W?WBWB?BWBWBW", "BWBWBWBWBWBW?WBW?WB?BWBWBWBWBWBWBWBWBWBW?W?WBWBWB", "W?WBWBWBW?WB??WBWBWBWB??W?WBWBWBWBW??BW?WBWBW?WB?", "?WB?BWB?BWBWBW?WBWBW?WB?BW?WBWBWBWBWB?B?BWBWB???B", "?BWB?BWBWBWBWB?BWB?BWBWBW?WBWBWB??WBWBW?W?WBW?WBW", "BW?WBW?WBWBWB?BWBWBWBWB?BWBWB??WBWB?BWBWB?BWBW?W?", "WB?BWBW?WBWBWBWBWBWBWBWBWBWB?BWBWBWBWBWBWBWBWBWB?", "BWBWBWBWBWBWBWB?B?BWBWBW?WBWBWBWBWBWBWBW?WBWBWB?B", "WBW?WBWBWB?BWBWBWBWBWBW?WBWB?BWBWBWB??WB?BW?WBWBW", "?WBWBWB?BWBWBWB??WBWB?B?BWBW?WBW?W??BWB?BW?WB?BW?", "WB?BWBWBWBWBWBW?WBWB??W?WB?BWBWBW?WBWBWBWBWBWBWBW", "BWB?BWBWBWBWBW??BWB?BWBWBWB?BWBWBW?WBWBWBWBW?WBWB", "WBWBW?WBWBWBWBWBWBWB?BWBW?WB?B?BWBWBWBWBWBWBWBWBW", "B?BW?WBW?W??BWBWBWBWBWBWBWBWB?BWBWBWBWB?BWBWBWBWB", "?BWBWBWBWBWBWBW?WBWBWBWBWBWBWB??WBWBWBW?WBWBWBWBW" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case14() {
        String[] board = { "???B??", "????B?", "?B????", "BW??B?", "???B??", "?W??BW", "???B?B", "???WB?", "?B?B??", "??B??W", "??????", "BW?W??", "??W?W?", "B?????", "W??B??", "??B??W", "??W?W?", "??????", "W?????" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case15() {
        String[] board = { "?????????????????????????B????", "?W????B???B??????W??B?????????", "???????BW?W???????W??????B????", "??B????WBW??BW???????W??BW????", "?????????????????????B?????B??", "B??W?????????????W??????BW???W", "W???????????W??B???????????BWB", "??B????W?????W????????????????", "?BW?????????W??B?BW??B????????", "B????????????W????????B??????W", "?????B???B?B?BWB???BW?????????", "BW??B???B??????WB????WB?B???B?", "??WB???B???????B????WBW???????", "???W???W????B????W????????????", "??W???W??????B???????????B????", "??B?????B????????W?W??B????W??", "?????????B??WB?B????WB???B???B", "???WB????????????????WB??W??B?", "?????B????W??????B???B????????", "?W?W?W??B??????WB?????????B???", "W????B??W??????B????W?????W???", "????????????????????B???????B?", "???BW?????W??????B???????B????", "????B?????B?????B??????W??????", "?BWB??????W???W??B????????????" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case16() {
        String[] board = { "BW??B", "WB??W", "BWBW?", "W?WBW", "?WBWB", "WBWBW", "?WB?B", "WBWB?", "BWBWB", "W?W?W", "BW?WB", "WBWBW", "BW?WB", "W?WBW", "BW??B", "W?WBW", "??B?B", "WB?BW", "?WBWB", "WBW?W", "BWBWB", "?BWBW", "B?BW?", "WBWB?", "BWBW?", "?BWBW", "??BWB", "??WBW", "BW?WB", "WBWBW", "?W?WB", "?B??W", "BWBWB", "WBW?W", "??B?B", "WBWB?", "??BWB" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case17() {
        String[] board = { "??????BW????B??????????????W?W?W???WB??????", "WB??W???W??????B?????????BWB??????W??B????W", "???W???????W????B??????W??BWB????W?????????", "????????W?????W?????????W??B??????W????????", "????????????B?B????W?????W????????B??WB????", "??????W?????WB???B????W???W???????W?W??????", "B???B????W?????W???W?W???WB????W????B????WB", "W???????WBWB???B????W??????????B????W?W?WB?", "???W??????B?B??W???WB??W????BW?????W?WB?B?B", "??W??B???????B???BW????????????B??????WB???", "?WBW???????????WB????????W??B?????????B?B??", "???????????B????WB???????B?B???BW??BWB?B??W" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case18() {
        String[] board = { "??W????BW?????W??BW?????W???WB?BWB??", "????????????BW???W???W??BW?W???W????", "???B?????BWB???B?B??????W??B?B?B????", "?????WBW??????BWB?B??????????????WB?", "WBW?W??????BW?W????B?????????B????WB", "B?BWBW???W????????B????W?W????B???B?", "?BW???????W?????WB?B?B??WB?BWB???B?B", "???WB???????B???B?B????WB?B????WB?B?", "??W?W????B?B??W???W??BW??B??W??B??W?", "?????W???????W?????W????B?????B??W??", "???????B?B?BWB?BWB??W??B??????????W?", "???W?W???W??B????W?WB?B????W??BWB??W", "????????W????B???B???????B???B?B??WB", "???W??BW?W???WB?B?B??W?WB?????B?B???", "??W??????B??W?W?????W?W???WBW?W?WBW?", "B???B??????WB??W?????????WBWBW???W?W", "??W??B?????????B?BW?W???WBW??B??????", "??????B??W???????WB?????BW??B?B????W", "W?????W???????W??BWB?BW?W???W?WBW???", "B?B???????????BW?????WB?B?B??W???WBW", "W???????????W????B???BW??????B??W?WB", "??B??W???W????B??W??B??W?WBW?????W?W", "?????B?B????WBW?????WB??W???W??B?B??", "?W?W??BW??B????W??B??WBW??BW???WBW??", "??W?W?????WB??W????B???BWB?BWB??W?W?", "??B??W??????BW???W??????????B?B??WBW", "?B??W????B???B???B????W?WB?BWB??????", "BWB??????W????B??W?????W??BW??B????W", "?B?B????????W?W?W????B?BWBW?????WB?B", "??B??????W???W??B?BW???W??B????WB???", "????W?W????BWBW?????WB??W??B?BW?W???", "B?B?B???B??WB???BWBWB?????B???B???B?", "??????W?W?WBWBW?WB?B?????????BWBWB?B" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case19() {
        String[] board = { "WB?BWB?BWB??WBW?WB??W?WBW?WB???BW??B?BWBWBWBWBWBW", "B?B??WBWB?BWBWBWBWB?B?B?BWB??W?WBW?W?WB????W?WB?B", "?B?B?B?BWB?BWB??WBWB?BWBWB?B?BWBWB?B???BWBWBWBWBW", "BWB?BWB?BWBWBWBWBWBWBWB?BWBWBWB?B??WBW?WB?BWBWBWB", "W?WB??WB?BWBWBWBW?WBWB?BWBWB?B?B?BWBWBWBWB?BW?WBW", "BW?WBWBW?WBWBWBWBW?WBWBWBWBWBWBW?WBWBWBWBWBWB?B?B", "WBWBWBWB?BWBWB?BW?WBW?WBWBWB?BWB?BWB?BW???W?WBWBW", "BWBW?WBWB?BWBWBWBWBWBWBW?WB?BWBWB?BWBWBWBW?W?WBWB", "?BWBWBWB??WBWB?BW?WBW??BWBW?WBWBWBWBWBW??BWBW?WBW", "BWBW?WBWBWBWBWBWBWB?BWBWBWBWBWBW???WBWBW??B?BW?WB", "WBWBWBWB?BWB?BWBWBWBW??BWBWBWBWBWBWBWBWB??WBW?WB?", "BWBWBWBWBWBWBWBW?WBW?WBW?WBWB??WBWBWBWBWBWBWB?BWB", "?BW??BWBW?WBWBWB??W???WBWB?B?B??WBWBW?WBWBWBWBW?W", "BWBW?WB?B?BWBW?W??BWB?BWB?B?BWBWBW?WB?BW?W?WBWBWB", "W?WBWBWBWBWB?BWB??WB??W??B?BWBWBW?WBWBW?W?WBWBWBW", "BW?????WBWBWBWBWB?BWBWBWBW?WBWB?BWBWBWBWBWBWBWBWB", "WB??WBWB??WB?BWBWBWBW?WBW?W??BWBW?W?WBWBWBW?W?W?W", "?W?W?WBWBW????B??WBWB?B?BWBWBWBWBWBWBWBWBW?WBWBWB", "W?WB??WBWBWB?B?BW?W?WBWBW?WB?BWBWBW?WBWBWBWBWBW?W", "??B?BWBW?WBWB?B?BW?W?WB?BWBWBWBWB?BWB?BWBWBWBW?W?", "WBW?WB?BWBWBWBWBWBWBWBWBWBW???WB?BWBWBWBWBWBWBWBW", "BW?WBWBWBWBWBWB??WBW?W?W?W?WBWBWBWBWB?BWB?BWBWBWB", "WB?BWB??WBWBWB?BWBW?WBW?W?WBWBWBWBWB?B???BWBWB?BW", "?WBW?WBW?WBW?WBWBWBWBW?W?WBWB?B?BWB?BWBWBWBWBWBWB", "?B??WBWBWBWBWBWBWBWBWBW?WB?BW?WBWBWBWBWBWBWBWB?BW", "B?B???BWBW?WBWBWBWB?BWB??WBWB?B?B?BWBWBWBWBWBWB??", "WBW?W?W?WBWBWB?BW?W?W?WBWBWBWBWBW???WB?B?BWBWBWBW", "BWBWBWBW?WBWBW?WBWBWB?BWBWBWBW?WBWBWB?BWBWBWBW?WB", "??W?WBWBWBWBWBWBWB?BW?WBWBW?WBWBW???WB?BWBWBWB?BW", "B?BWBWB??WBWBWBWBW???WBWB?BW?WBW?WBWBWB?B?BWBWBWB", "W??BWBWB??WBWBWB??WBWB?BW?WBWBWBWBW?WBWBWBWBW???W", "B?BWBWBW?W?W?WBW???W?WB?BW?WBWBW??B?BWBWBWBWBWBW?", "W?WBWBWBW??BWBWBWBWB?BW?WBWBWBWBWBWB?BWBWBWBWBW?W", "BWBW?WB?BW?WBWBWB?BWB?BWBWBWB??WBWBWBWBW??BW??B?B", "WBWBWBW?WB?BWBWB?BWB??WBW?WB?BW?WBWBWBW?W?W?WBWB?", "BWBWB??WBW??BWB??WBWBW?W?WBW?WBWBWBW??BWBW?W?WBWB", "W?WBWBWBWB?B?B?BWBWBWBW??BW?WBWBWBWBWBW?WB?BWBWBW", "BWBWBWBW???WB?BW?WBWBWB??WBWB?BWBW?WBWBW?WB?BWBWB", "?BWBWBWBWBW?WB???BWBWBW?WB??WB??W?WBWB?BWBW?WBWBW", "B??W?W?W??BWBWBWB?BWBWBW?WBWBWBWBWBWBWB?B?B??W???", "WBWBW??BWBWBWB?BWBWBWB???BWBW?W?WB?BW?WBW?W?WB?BW", "BWBW?WBWB?BW??B?BWBW?W?W??BW?W?WB?BWBW?WBWB?BWBW?", "W??BW?WBWBW?WBWBWBWBWBWB??W?W?WBWBW?W?W?W???WBWBW", "?WB?BWBWBWBW?WB?BWBWBWBWBW?WBWBWBWBWBWBWBW??B?BWB", "WBW?W?WB??WBWB?B?BW?WBW?WBWBWBW?WBW?WB?BW?W??BWBW" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case20() {
        String[] board = {};
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case21() {
        String[] board = { "?WBWB??WB?B??W?WB?B?BW?W", "WBWBWB?B??WB?B?B?B?B?BW?", "B?BWB??WB?B??WBW?WB??W?W", "?BWBWBWBWB??W?WBWBWBWB?B", "BWB?B???BWBWBWBWBWBW?WBW", "??WB?BWBWBWBW????BWBWBW?", "B?BW????BWBW??BWB?BWBWBW", "?B?B?BW?WBW?WBW?WBWBWBWB", "BWBWB?BWB???BWBW?WBWBWBW", "WB??W?WBWBWBWB?BW?????WB", "B??WBWBWB?BW?W??BWB?BWBW", "?BWB?BWBW?WBW??BWBWBWBWB", "B??WBWB?BWB???BWB?BWBWBW", "WB?BW?WBW???W?W??BWBWBWB", "BWBWBWBW?W??BWB?BW??BWBW", "WB??W?WBWBW?WBWBWBWB?B??", "B?BWBWBWB?BW?WB??WBWBWB?", "WB?BWB?B??WB?BWB?B?BWB?B", "?WBWBWBWBW?WBWB?BWBW?WB?", "WBWBWBWB?B?BW?WBWBWBW?WB", "B?BWB??WBWBWBWBWBWBW?W?W", "?B?B??W?WBWB?BWBW??BWBWB", "BWBW??BWBWBWBWBWBWBWBW?W", "WB?B??WBWBWBWBW?WB?B?B?B", "BW?WB?B?BWB??WBWBWB??WBW", "W?WBWBW?WB?BWBW??BW?W?W?", "BWBWBWBWBWBWBWBWB?BWB?B?", "?BWBWBWB?BWBWB?BWBWBWBWB", "BWBW?W?WBWB?BWBW?WBW?WBW", "WBWB?BWBWB?BW?WB?BWB???B", "B?BWBWBW?WBW??B?B??W?W?W", "?BW?W?WBWBWBWB?BWBWBWBWB", "??BWBWB?BWB?B?BWBWBWBW?W", "WBW?W?WB?BWBWBWBW???WBWB", "BW?W??BWBW?W?WBW?W?WBWBW" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case22() {
        String[] board = { "?B?BWBWBWBWBWB?BWBWB", "B?BWBWBW?WBWBWBWBW??", "W?WBWBWBWBWBWBWBWBWB", "?WBWBWBWBW??BWBWBWBW", "W?WBWBWBWBWBWBWBWBWB", "?WBWBWBW?WBWBW?WBWBW", "?BWBWB?BWBWBWBWBW?W?", "?W?WBWBW?WBWBWBWBWBW", "W?WBWB?BW?WBWBWB?BWB", "BWBWBWB?BWBWBWBWBWBW", "WBWBWBWBWBWBWBWBWBWB", "?WBWB?B?BWBWB?BWBWBW", "WBWBWB?BWBWBWBWBWB?B", "?WBWBWBWBW?WBWBWBWBW", "WBWBWBW???WBWBWBWBWB", "BWBWBWBWBWBWBWBWB?BW", "W??B?BWBWB?BWBW?WBWB", "?W?WBWBWBWBWBWBW?W?W", "?BWBW?W?WBWBWBWB?BW?", "BWBWBWBWBWBWBWBWBW?W", "WBWBWBWBW?WBWBWBWBWB", "BWBWBWBWBWBW?WBWBWBW", "WBWBWBW??BWBWBWBWBWB", "???WBWBWBWBWBWBWB?B?", "WB?BWBWBWBWBWBW?WBWB", "BWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBW?WBWBW", "W?WBWBWBWBWBWBWBWBWB", "BWBWBWB?BWBWB?BW??BW", "WBWBWBWBWB?BWB?BWBWB", "BWBWBWBW?WBWBWBWBW?W", "?BWBWBWBWBWBWBWBW?WB", "BW?W?WB??W?WB?BWBWBW", "WBWBWBWBWBWBW?WBWBWB", "BWBWBW?WBWBWB?BW?WBW", "WBWBWBWBWBWBW?W?W?WB", "B?BWBWB?BWBW?WBWBWBW", "?BWBWBWB?BWBWBWBW?WB", "B?BWBWBWBWBWBWBWBW?W", "WBWBW?WB?BWBWBWBW?WB", "BWBWBWBWBWBWB?BW??B?", "WBWBWBW??BWBWBW?WBWB" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case23() {
        String[] board = { "BW?WBWB?B??WBW?WBWBWBW????BWBWBWBWBW?WB?B?B", "WB?B?BWBWB?BW?W?WB?B???B?B?BW?WBWBWBWBW??B?", "BW??B?B?BWB?B??W?W??B??WB??W?WB?BWBWB?BWB??", "??W?WBWBWBW?WBWB?B?B???BWB?B?B??WBW??BW?W??", "BWBWB?BW??B??W??BWBWBW?WB?BWBW?W?WBWB?B?BWB", "W?W?WB?B?B?B??W??BWBWB??WBW???WB??W??BWBW?W", "?W?WB?B?BW?W?WBW???W?WBW?W??BW??BW??BWBW?W?", "??WB??W?WBW?WB?BWBWBWBWB?BW?W?W?WBWB?BW??BW", "?WBWB?BWBW?WBWB??W??B?B?BWBWBW??B?B???????B", "WBW?WBW?WBW??????????B??WB?B????W?WBWB?B?BW", "B?B??W??BWB?BW??BWBWB?B?B????W?WBW????B?BWB", "W??BWB???BWBW?W??B?BWBWBW??B??W??B?BW?W?WBW", "B?BW???WBW?WBW?WBW?WBWBW??BWBWBW?W?WBWBW?W?", "WB?B????W?WBW?W?W????BWBW???WB?BWBWBWBW?W??", "BW?WBW?W?W?W?WB??WBW?WB?BWBW?W???W?W?WB?BWB", "?B??WBWBW?WBWBWBW??B??W??B??W?WBW?W?WB?BW??", "??BWB??WB??WB??WB??W?W?WB?BW?WB??W?W?WBW?W?", "WB?B?B?BW???WBW?WB??WBW?W?W???WBW?W??BW?WB?", "BWBW?W?WB??WB?BWBW?WBWBW?W??BW?WBWBWBWBWB?B", "WBWB??WB?B???BWBW????BWBW?W????B???BWBW????", "BWBWBW??BWBW?W???W?W??B?????BWB?BWBW????BWB", "WB??WBWBWBWBW?W??B?BW?WB??WB?B?B?BW?W?WBWBW", "?W?W???W?W?WB?BWBWBWB??WBWB???BWB??WBW?WBWB", "?BWBWB?BWBWBWB?BWB??WB???BWB?B?B?B?B??W?W??", "B??WBWB??WB?BWB??W?WBWB?BWBWBWBWB?????BWB?B", "WB?????BWBWBWB???BW???W??BW??B???BW???W?W??", "??BWB?BWBWBW???W?WBWB?B?B?B??WBWBW?WBW?W???", "W?WBW???W?W?W?W?W?WBWBW?WB?BW?W??B??WBWBWBW", "BWB?BW?W?WBWB?BWBWBWB?BW???W?WB?B??WBWB??WB", "WBWB?BWB?BWB?BWBWB?BW?W???WBWB??WBW??B?B?BW", "BWBWBW?WBW??BWBWBW?W?W??BWBWBWB???????B??W?", "??W???WB?B?B?B???B?BW?W??????B?BW???WB??W??", "?W?W?W???W?W??BWB?BWBWBWB?B?B??WBWB??WBW?WB", "?????B?BWB?B?BWB?BWB????W??B???BW?WBW?WB??W", "???WB?B??WBWBWB?BWBW???WBW??BWB?BW?W?W?W?W?", "WBWBW??BW?W???WBW??BW?WB???BWB?B?B?BWBW?WB?", "?W?WB???BW?W?W?WBWB?BWBWBW???W?WBWB???BWBWB", "WB?BWBW?WB?B???B?BW??????BWBW?WBWBWB?B?????" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case24() {
        String[] board = { "?W??BWB?BW??B?BW?WB??W?WB?BW??BW??B??W?" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case25() {
        String[] board = { "?B???????????????BW???????????????????", "????B??????W??????BW??BWB?B???????B?B?", "?B?????????????????????B??????????????" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case26() {
        String[] board = { "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????", "?????????????" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case27() {
        String[] board = { "BW?WBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "??WB?BW??BWBWBWBWBWBWBWBWBWBB?WWWB", "BWBWBWBWBWBWBWBWBWBWBWB?BBBWBWBWBW", "WBWB?B?BWBWBWBW?WBWBWBWBWBWBWBWBWB", "BWBW?WBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWW?BWBWB?BWB?BWB?BWBWBWBWBBBW?", "BBBWBWBWWWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWWWBWBWBWBWBW?WBWBWBBBWBWBWB", "BWBWB?BW?WBWBWBWBWBWBWBWBWBWBWBWB?", "WBWBWB?BWBWB?BWBWB?B?BWBWBWBWBWBWB", "BWBWBWBWBWBWBWB?BWBWBWBWBWBWBWBWBW", "WBWWWBWBWBWB?BWBBBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBW?WBW?WBWBW?WBWWWB??W", "WB?B?WWBWBWBWBWBWBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWB?BWBWBWBWBW?WBWBWBWBW", "WBWBBBWB?BWBWBWBBBWBWBBBWWW?WBWBWB", "BWBWBWWWWWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWB?WWBWBWB?BWWWBWBWBWBWBWBBBWBWB", "BWBWB?BWBWBWBWBWBWBWBW?WBB??BWBWBW", "WBWBWB?BW?WBWBWBW?WBWBWBWBWBW?BBW?", "BWBW?WBBBWB?BWBWBWBWBWBWBWBW?W??BW", "WBWBWBWBWBW?WBWBWBWBWBWBWB?BWBWBWB", "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBBB?BW?WBWBWBWBBBWB", "BWBW?W?WBWBWBWBWBWBBBWBWBWBWBWBWBW", "WBWBWBWBWBW?WBW?WBWBWBBBW?WBW?WBWB", "B?BWBW?WBBBWBWBWBWBWBWBW?WBWWWBWBW", "WBWBWBWBW?WB?BWBWBWBWBBBWBWB??WBWB", "BWBW??BWBWBWBWBWB?WWBWBWBWBWBWBWBW", "WBWBBBWBWBWBWBWB?BWBWBWBWB?BWBWBWB", "BWBWBWBWBWBWBWB?BWBWBWBWBWBWBWBWBB" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case28() {
        String[] board = { "???B???B?B?B??WB????W??BWB??W?W?WBB??B?B?B??", "???W?????W??BWB??W?W???W??????BW?????????W??", "?????BW????B????????WB??????W??W???B??W?W???", "B?B?BWB????WBW???W?W????B?B??WBWB????W???W??", "WB???????B??W??BW?W?W??B???B?B?B?B?????????B", "???WB??WB??WB?B??????W??BW??B??W?WB?B??W???W", "??W????B??WBW?W??B?B???B?B?????B??W???WB????", "?WBW?W???WBW??BWB??W???W???WB????WBW??B??W??", "W??BW????BW??B???B??????????WBW?W????????B??" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case29() {
        String[] board = {};
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case30() {
        String[] board = { "WB?BW?WBW?W?WBWB?B?B?BWBWBW?WBW?W?WBWB?BW?WB", "BW?W?WBWBWWWBW?WBWBWBWBWB?BWWWBWBWB????WWWBW", "W?WBWBW??BWBW?W?W?WB?B?BWB??WBWBBB??WBWB???B", "BW??BBBW?WBW?WB?B?B?BB?WBWBW?WBWB?BW??BWBWBW", "WBWBWBWBWBWB?B?B??WBWBW?WBW?WBWB?W?B??WB?BWB", "BWWW??BWB??W??BWBWB?BWBW??BWBWBWB?BWB?B??WBW", "WBWB?BBBWBBBWBWBWBWBWB?BWBWBWB?B?BWBWBWBWW?B", "B?B?BWB?BWBWBWBWBWW??WB?B??WB???BBB?BWBW??BW", "?BWB?B?BWBWB?BW????BW?W??BWB?B?W?B???BW?WBWB", "BWBWB?BWB???BWBW?WB?BWBW?WBWBWBWBWBW?WBW??B?", "WBW??BW??B?B??BBWB?BWBW?WBWBW??BW?W?WB?BWB?W", "BWB?B?BWB???BW?W?WBW?WB?B?BB??B?B???B??W?B?W", "WWWBWBWWWBWB?BWBWBWBWBWBWB??W??BWBW??BWBWBWB", "BWBWB?BWB?BWB?BB??BW?WB?BWBW?W?W?W??BWBWBW?W", "?BWBW??BWBW?WBWBWBWB?BWB?BWBWBWBW?W?W?WBWBW?", "BW?W?WBWBWBWBWB?B????WB?B?BW?WBW??BWB?BWBWB?", "BBWBWBW?WBWBW?W?WBW???W??BBBWB?BWBWBW?WW??WB", "BW?WW??WBWBWBWBW????B?BWB??WBWBWBWBWBWBBB?BW", "W??B?WWBWB?BWB?B?B??WB?B?B?B?BW??BW?WB?BWB?B", "BWWWBWBWBW?WBWBW???WB?B?BW??B??WB?BWB??WBW?W", "WB?BW?W??B?BWBWBWB?BWB??WB????WBW?W?W??BW??B", "?WBBBW?WBWBWBW??BWB??WW??WBW?W??BW?W?WBWB?BW", "W?W?W??BB?WBWBBB?BWBWBWBW???W?W?WBWBWB?BWBWB", "BWBWBWB?BWBWB?B????WBWBWB???BW?WBWBWB????B?W", "WB?B?B?BWBW?W??BW?WB?BWBWBWBW???WBWB?BWBWB?B", "B?BWBB??BW?WBWBWBW?W?BB????WBWBWBWBWBW?W?WBW", "?BW?WBWB??WBW??BWB??WB?BB?W?WBW?WBWBW?WBW??B", "?WBBBW??BW?WBWBWB?B?BW?W?WB?BWBW?WBWBWBW?W?W", "WBWB?BW?WB?BWBWBWBW??BWB?BWBWBWB?B?BWB?B?BWB", "B?B??W??BWBW????BWBWB?B??WW?BWBWBWWWBWBWBW?W", "W?W?WB?BW???WBW?WWBB?B?BWB?BW?WBW?BB??WBWBWB", "BWB???BW??B?BWWWBWB?BWB?BWBWBWB?B?B?BWBWBW?W", "?B?BW?WB??W??B???W?WW?WBWB?B??????WBWBW?WBWB", "B?BWB?BWBBBW??BWW?BW??B?B?BW???WBWB?WW?W?WBW", "??WBWW???BW?WBWB?BWBWWWBWB?BWBW??B??W??BW?WB", "B?BWB?BWW?B?BWBW??B??BB?BWBWBWBWB?BWB??W?WBW", "WBWBW?W??BWB?BWBWB?B???B?B?BWB???BWB?BWBWBW?", "B?BW?W??BWBWB?BWBWBW??BWBWBWBWBWB??WBWBWBWBW", "WW??W??BWBW?WBWBWBWB?B?BWB?B?BW?WBWW?WW??BW?", "B?BW??BB?WBWBWB?BW?WBW?WBWBWB??WBW?WBWBW?W?W", "?B?BW??BB?WBWBW??BWBWWW?W?WBWBWBW?WBWBBBWBWB", "BB??BW?W?W?WBW?WB?BW?B?WWWBWB?BW??BW??BW??BW", "WB?W?B?B?B?B?BWBWBWBWBWB?WBBWBW?WB??WBWBWB?B", "B?WWBWB?BWB??W?WB?BWBW?WBWBWBWB?BBBW?WB?BWBW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case31() {
        String[] board = { "??????????W", "?W?????????", "????????W??", "BW??BWB??W?", "???B???????", "???W??B????", "????W???BB?", "B?????BW???", "WB???????BB", "??????????B", "??W?W????B?", "B????W?WW??", "???????????", "???????????", "???????????", "?????W?W???", "W????B?B???" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case32() {
        String[] board = { "W??", "B?B", "WB?", "BW?", "?BW" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case33() {
        String[] board = {};
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case34() {
        String[] board = { "B??W????BW??????B??????WB?B??W????BW??????B", "????????W?W?W????B?B??W???W?W???W??B??W???W", "?W??B???B??W????????B?????B??W?????W??????B", "W?????WB?BW???B?WB???B????BBW?????????W?W?W", "??B?B????????W??B????W???????W??????BW?????", "W?W??B??????W??????BW?W??????WWB?B?BW??B???", "?W?W??B?????BW????B???B???B?B???BW??????B??", "??W?W?????W???W????B?B?B????????????WB???B?", "B??W?W????????????B???????BW???W??????????B", "W???W??B?B?B??W?WBB?????W???????WBWB?????BW", "?????W???W?WBW?????W???W???????W???????????", "????WBW???W?????W??????B???????????B???B?B?", "?W???WB??WB???????B???B?B??W??B???BW????B??", "?B???WW??B????W????B?????WBBWBW?W?????????W", "?W??B??W??B??????????WB???????????B?B????W?", "???W??????????W????B??W????????B??W???WB?B?", "??B??????????W????B??????????W???W?W???W?W?", "???????????W?B??W????B??W?????W?W?W????????", "?W????BWB????W?W???W?????W???B????B???B????", "??W????BW???W?????????WB???BW??????B?B?????", "B??WBWBW?B?W??????????B???BW???B??B??WB????", "W??????????B???????BWB?W???BWB??WB???BW??B?", "???W?????????????????W??????B??WB?B????W???", "??W?????W?W??B????W??B????W?W??B?B???BW???W", "B?B??W??B????WB???????BB?????W?W??????B????", "?B????W???????????B????????B??W???WBW??BW??", "????????B?????B?BW?W?W????B?B???B?BW???W???", "???????????????B?B????WB????W???W???????WB?", "?W?????????B?WB????????WBBB?B?BW???B???????", "????B???W?W????B???W??????????WW???B???????", "???B??B?B???B?B??????W????BW?W???WB?????B?B", "????W???????????W?W????????????B??W??????BW", "???????B????B????W??????BW?????W?W?B?W????B", "??WB?????BW????????????????????????????B?B?" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case35() {
        String[] board = { "???WB?BWB????W??BWB??WB?????????BWB?B????", "??W????B???BW??B??WW???B?B??W??W?????B???", "?????WB?BB??B??W?????W???W?W?W???W???????", "W?????????W??????B?B??W????BW???WB?????B?", "?WB???B?B??????W????B??W????????????B??W?", "?B?B????WB?B?B??????W??BW???????????WB???", "????????????B???B??W????B?B????W?W?W?W???", "??W?W?WBW???WB??WBW?W????B??WBWB???B?B???", "?W??BW???W???W??B??W?????????W????B??????", "??WBWB??????W??BW???????W?WB??????W?W????" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case36() {
        String[] board = { "????B?B", "?B??W??", "B???BW?", "WBW????", "WW???W?", "??????W", "B??WB?B", "W????B?", "W?B??W?", "WB???BW", "BW?WB??", "???????", "????BW?", "?B????W", "B???BW?", "W??B?B?", "B??W???", "?B?B?B?", "B??W???", "???B??W", "BW?W?WB", "?BB??BW", "BW?W???", "??W????", "?W????B", "?????B?", "?????W?", "?B??W?W", "?WBW???", "?????BW", "??B?BW?", "W??B?BW", "B???B??", "?B????W", "??B????", "??W??W?", "??????B", "??W???B", "?B?????", "?????WW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case37() {
        String[] board = { "WBWBWBWBWBWBWBWBWWWBWBWBWBWBWBWBWWWBWBWB", "BBBWBWBWWWWBBBBWBWBWBWBWBWBWBW?WWWBWBWWW", "WWWBWWWBWBWBWBWBW?WBWBWBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBBBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBBBWBWBWBWBWBWBWB?BWBWBWBWBWBWBWB", "BWBW?WBWBWBWBWBWBWBWBWBBB?BWBWBWBWBWBWBW", "WBWBWBBBWBWBWBWWWBWBWBWBWBWBWBWWWBWBBBWB", "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBBBWBWBWBW", "BBWBWBWBWBWBBBWBWBBBWBWBWBWBWBWBWBWBWBWB", "BWBWBWBW??WWB?BWBWBWBWBWBWBWBW?WBWBWBWBW", "WBWBWBWBWBBBWBWBWBWBW?WBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "?BWBWBWBWBWBWBWBBBWBWBWBWBWBWBWBWBWBWBWB", "BWBWBWBBBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WWWBWBWBWBWBWBW?WBWBWBWBWBWBWBWBWBWBWBWB", "WWBWBWWWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBWBWBWWWBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBWBWBWBWBWBWBWBBBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB??WBWBWB", "BWBWBWBWBWBWWWBWBWBWBWBWBWBWBWBWBBBWBWBW", "WWWBWBWBBBWBWBWBWBWBWBWB?BWBWBWBWBWBWBWB", "BWBW?WB?BWBWBWWWBWBWBWBWBWBWBWBWBWBWWWBW", "WBWBWBWBWBWB?BWBWBWBWBBBWBWB?BWBWBWBWBWB", "WWBWBBBWBWBWBWBWBWBWWWBWBWBWBWBWWWBWBWBW", "WBWBWBWBWBWBBBWBWBWBWBWB?BWBWBWBWBWBWBWB", "BWBBBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBBBWBWBBBWBWBWBWBWBWBWBWB", "WWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBBBWBWBWBWBWBWBWBBBWBWBWBWBWB", "BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWW", "BWWWBWBWBBBWBWBWWWBWBBBWBWBWBWBWBBB?BWBW", "WBWBWBWBWBWBWBWBWBWBWBWWWWW?WBWBWWWBWBBB", "WWBWBWBWBWBWBWB?BWBWBWBWBWBWBWBWBW?WBWBW", "WBWWWBWBWBWBWBWBWBWBWBWBWBWBWWWBBBWBWBWB", "BBBWBWBWWWBBBWBWBWBWBWBWBWBW?WBWBWB?BWBW", "WBWBWBBBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB", "BWBWBWWWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB?", "WBWBWBWBWBWBWBWWWBWBBBBBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBWWWBWBWBWBWBWBWBWBWBWBWBWWW", "WBWBWBW?WBWBWBWBWBWBWBWBWBWB?BWBWBWBWBWB", "BWBWBWBWBW?WBWBWBWWWBWBWBW?WBWBWBWBWBWBW", "WBWWWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB", "BWBWBWBWBWBWBBBWBWBWBWBWBWBWBWBWBWBWBWBW", "WBWBWBWBBBWBWBWB?BWBBBWBWBWWWBWBWBWBWWWB" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case38() {
        String[] board = { "WBW?WB?BWB???B???BWBW?WBWBWBWBWBWBWBWBWBWBW?BBW?WB", "BB??BWBWB?BW?WB?B??BBBBWBW????BW?WBWBWBW?W?W??BWBW", "?BWB?BW?WB???BWBW?WBW?WB?B?B?????BWBWBW??BB?WB?BW?", "BWB?BWB?BW?WBW?W?WB?BWBW?W??BWB?BWBWWWBW?WBWBWBWBW", "WW?BW?WBW?WB?BWWWB??W?WBWBWBWB?BWBWB?BWBWB?BW?WB??", "B??W?WB?BWB?BWBWBWB??WBB?WBWBW?W?WBW?WB?BWB??WBWBW", "?BWBWBWBWBBB?B?BWBWB???BWB?WWB???B??W?WBWBWBWB?BWB", "B?BWBWB?B??WBWBWBWBWB?BW?WBWBWB??W??BWBW???WBWBWBW", "W?WBWBWBWBWBWBWB?BWB??WBWB?B??WBB?WBW?WWW?WBWBWBW?", "BWBWBWBWWWBWBWBWBWB?BWBWB?BWBWBWB??BBWB??WBWBBB?B?", "WBWBWB??WB??W?WBWBWBWBWB??WBWW??WBWB?BWBW??BWBW??B", "??BWWWBB??BWBW?W??B?BWWWBWBWBBB??WBWBW?WBW?WW?BW?W", "WBWBWB??W???WBW?W?WBW?W?WBBBWBWBBB??WBW??BWBW?BB?B", "????B?BW?WBB?BBWBWB?????BW?W?WB?B??B?W???W?BBWBWBW", "??WBWBWBW?WB??WBWBW?W?WBWB??WBW?WBWBW?WBWBWBWBWB?B", "BWBW?W?WBWBW?W?WBW??B?BW???WBW?W?W??BWBW?WBWBW??BW", "??WBWBWBWBW?W?WBW??BWBWBW?WBWBWBWB?BWBWB?B?BWBW???", "B?B???B?BWBWBWB?WWBWBWB?BW?BBWBW?WBW?WBWB?BWBWBWB?", "WBW?WBWBWB?BW?W?B?WBW??B?BWBW??B??WBW??B?BWBWW?BBB", "B?BWBW??BWB?BWBWBWB?BWBW?BBWBWBWBW?WBWB?BW?B??BWBW", "WBW?WBWBWBWBW???WBWW?B?BW?WBWBWBWB?BWWW?????W?WBW?", "B??WBWBWB?B?B???BWBWWWBWWWBWB?BWBW?WB?B??WB??WBWB?", "W?W?WBWBWBBBWB??W???WBWBWBWB???B?BBW?BWBWBW?W?WBWB", "??BWBWBWBWBWBWBW??BWBWBW?WB?BWBWBWB?BWB??WBWB??WBW", "?B?BW?????WBWB?BWBW?W?WB?BWB?BWBWBWBWB?BW?WBW?W?WB", "?WBWB?BW????BWBWB???BWBWBWBW?WBWBWBWBWBWBWBW???W?W", "WB?BW??BWBWB?BBB?BWBWB?BW??BW?W?W?W?WBWBW?WB?BW?WB", "B?B?BWBWBWB??BBWBW?WBWBWBWB?BWBW?WBWBWBW??B?BWBWB?", "W?WB????W?W?W?WB?BWW??W?WBWBWB?BWBW?WBWBWBW?W?WBWB", "BWB?B?B?BWBWBWBWBWBWBW???W???W?W?WB?B??WBWBWBW??BW", "WBWBWB????WBWBWBW?WB?B?BWB?BWBW???WBWBWB?BW?WBWBWB", "B?BWBWB?BWBWBW?WB?BWBW?WBWBWB?BB?W?WB?BWW??WBW?WBW", "WB?B?B?BWBWBW??WWBW?WB?BWBWBWBWBW?WBBBWBW?WW?B?BWB", "BW?WBBWW?WB??WBW?WB?BWB??WBWBWB?BWBW?WB?BWBWBWBW?W", "WBWB?B??WBWBWWW?WBWBW?????WBWWW?W?WB??WB?B??WB?B?B", "??BW?WBW?WBWBWBWBWBWBWBWBW?WB?BWB?BWBW?WBWBWBW?WBW", "W??B?BW?WBW?WBWBWBWB?BWBWB?BW???WBWB???BW??BW?WBWB", "B??WB??WBWBWB?BWBWBWBWWWBWBWBWBWBWBWBWBW????BWBWBW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case39() {
        String[] board = { "W?WB?BW?WB", "BBBWBWB?BW", "W??BWB??WB", "BWBW?WBWW?", "?BWB?BW??B", "B?BWBWBWBW", "W??BW?W?W?", "BW?WBWBW?W" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case40() {
        String[] board = { "BWB?????BW?????WB????????WW?BW", "W???W???W??B?B?B???BB?B?W??B??", "??BWB??????W?B??BWBW?????W?WB?", "????B????B?BW??B?????????B????", "B?B?B??WBW???W?????W?W?????W??", "??W?W?????W???WB????W?WB??W???", "?W?????W??????BW????B?????B?B?", "W??W?B?B??WB?WW?????W???W??B??", "??????????W????WB?B?B?B?BW???W", "W?????????WB????W?WBWW?B?BWB??", "?WBW??BB?W??BB????BW????BW???W", "?BW?WB???B???B???????B?B??WBWB", "?W??W??W?WB?????W????W???W?WB?", "?B?W???????B?BWB?B??????????W?", "BW????B??????W?????????????WB?", "????W?WBW????B????W??B?B??W?WW", "??????????BW??????BB????BWB???" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case41() {
        String[] board = { "???W?WW", "W??B?BW", "BWB?BWW", "????WB?", "?WBWBWW", "??W?WB?", "BWB??WW", "?B????W", "BW?WBW?", "W?W?W??", "BW???WB", "?BWB?B?", "WWB?WW?", "?BWBW?B", "B?B??WB", "W???W?W", "BW?WBWB", "WBWB???", "B?B??W?", "?B?BWBW", "???W?WB", "W?WBW??", "?WBWBWB", "BB?B??W", "BWBW?WB", "W???WWW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case42() {
        String[] board = { "BWB?BW", "WBW?WB", "B?BBBW", "WBWB?B", "B?BWBW", "WWWBWB", "BWBWBW", "WBWBWB", "WW?WBW", "WBWBWB", "?WB?BW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case43() {
        String[] board = { "?B??B?W?W?????????W????BW?W??????B?BW??????B?B", "B?????B???????BWB??????WBWB????WB??W??????????", "WB????W?W???WB??W???????????W????????????BW???", "?W??B?????B??WB??W???WB?????????B???????????B?", "???B??W???????WB????????W?????W??B?B?B??W??B??", "???W????B??????W?W?????W??????????B???BW?W????", "W???W?????WB?????B??W????????BW??BW?W?W?W?????", "B?BWB??WB???B??????WB????W???????????W??????BW", "???????????????B??W?WB????W?????????????WB??W?", "B?????BW???W?W????B?B??????W???W??B??W?W????B?" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case44() {
        String[] board = { "WB?BW??B?BWBW?WBW?W", "BWBWB?BWB?B?BWBWBWB", "BBWB?BBB???WWB???B?", "B?BWBWBWB???BWBWBB?", "WBWB??WB?B??WB?BWB?", "?WBWBBBWBWBWBWBW?W?", "WBW??BWBW?W?B?WBWBW", "BWB?BW?BB??W?WB??WB", "WB???BWBWB?BWBWBWBW", "BWBB?W?WB?BWBWB?BWB", "W?WBW?WBWB?B?BW???W", "?WBWB?BWBWBWBWBWBWB", "WBWBWBWWW?WBW??BWB?", "BW?W?WB?BW?WBW??BWB", "?BWBWB?B?BWBWBWBWBW", "??BWB?BWB?BW?WBWBWB", "?BW?W?W?WBW??????BW", "BWB??WB?BBBWBW??BWB", "WB?B?BWBWBWW?BW?WBW", "BWBW?W??BWBWBW??BWB", "WBW?WBWBBB??WBWBWBW", "BB?BBWBBB?WWB??WBWB", "BBWBW?WB?BWBWBWBWBW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case45() {
        String[] board = { "BB?B?????????B???WWB?B", "???B??B?BW?W??B?B?B?BW", "?B??W?WB????W?WBWB????", "???W??????B?????BWB???", "WB?B?BW??B????W?W????B", "???WB????????W?????W??", "WWW?????WB?B?BW?????W?", "B?????????B?B???????B?", "?B??????????W???W?????", "??BW???WB???????BW?W?W" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case46() {
        String[] board = { "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????", "?????" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case47() {
        String[] board = { "W???", "??B?", "W???", "???W" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case48() {
        String[] board = { "WW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case49() {
        String[] board = { "W?W", "??B", "???" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case50() {
        String[] board = { "??" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case51() {
        String[] board = { "W????", "?????", "?????", "?????", "??B??" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case52() {
        String[] board = { "W", "W" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case53() {
        String[] board = { "WBW", "WBW", "WBW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case54() {
        String[] board = { "?B" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case55() {
        String[] board = { "B" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case56() {
        String[] board = { "W??W" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case57() {
        String[] board = { "??WB" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case58() {
        String[] board = { "??", "??", "??", "??", "??" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case59() {
        String[] board = { "WBB" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case60() {
        String[] board = { "W???B", "?????", "?????" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case61() {
        String[] board = { "W", "W", "W" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case62() {
        String[] board = { "????W" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case63() {
        String[] board = { "???", "??W" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case64() {
        String[] board = { "WWW" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case65() {
        String[] board = { "WB", "WB" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case66() {
        String[] board = { "??B", "??W" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case67() {
        String[] board = { "???", "???", "???" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case68() {
        String[] board = { "W", "?", "B" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case69() {
        String[] board = { "B???", "B???", "B???" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case70() {
        String[] board = { "B", "B" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case71() {
        String[] board = { "?" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case72() {
        String[] board = { "BB" };
        assertEquals("Impossible", bichromeboard.ableToDraw(board));
    }

    @Test
    public void case73() {
        String[] board = { "??B" };
        assertEquals("Possible", bichromeboard.ableToDraw(board));
    }

}
