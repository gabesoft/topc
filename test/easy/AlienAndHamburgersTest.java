package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class AlienAndHamburgersTest {
  AlienAndHamburgers alienandhamburgers = new AlienAndHamburgers();

  @Test
  public void case1() {
    int[] type = { 1, 2 };
    int[] taste = { 4, 7 };
    assertEquals(22, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case2() {
    int[] type = { 1, 1 };
    int[] taste = { -1, -1 };
    assertEquals(0, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case3() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 7, 4, -1 };
    assertEquals(30, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case4() {
    int[] type = { 1, 2, 3, 2, 3, 1, 3, 2, 3, 1, 1, 1 };
    int[] taste = { 1, 7, -2, 3, -4, -1, 3, 1, 3, -5, -1, 0 };
    assertEquals(54, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case5() {
    int[] type = { 30, 20, 10 };
    int[] taste = { 100000, -100000, 100000 };
    assertEquals(400000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case6() {
    int[] type = { 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1 };
    int[] taste = { -245, 614, 761, -123, -277, 286, -6, -66, -829, -636, 726, -200, -773, -660, -478, 61, 880, -107, -968, -533, -68, 289, -242, -246, 295, 953, 229, -549, -967, 665, -633, 618, 503, 59, -812, -930, 252, -432, 222, -53, -549, 314 };
    assertEquals(15454, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case7() {
    int[] type = { 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2 };
    int[] taste = { 705, 577, -236, -61, 301, -708, 710, 562, -771, -513, 244, 157, -595, 913, -810 };
    assertEquals(8338, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case8() {
    int[] type = { 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1 };
    int[] taste = { 823, -722, -905, -254, -617, 533, 456, -630, 482, 481, -295, 132, -709, -939, -860, 565, 645, 454, 639, 614, -101, 336, -684, 51, 823, -891, -928, -597, 509, -51, -269, -801, 569, 789, 714, -234, -277, 36, 498, 869, -275, 892 };
    assertEquals(23820, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case9() {
    int[] type = { 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1 };
    int[] taste = { -878, 7, -468, -840, -30, -644, 408, -662, -955, -490, 860, 444, -795, 982, 469, -264, 328, -679, -876, -587, -249, -12, -739, -708, -284, 48, 556, 65, 448, -951, 104, -795, -75 };
    assertEquals(9438, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case10() {
    int[] type = { 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2 };
    int[] taste = { -173, -989, -730, 33, -54, -760, 668, -586, -948, -677, -159, 534, -801, -542, -175, 992, -831, -115, -432, -801, -340, 912, -905, 667, 756, 569, 177, -183, -302, -471, -455, -8, -139, -506, 505, 6, -520, 659, 288, -530, 397 };
    assertEquals(14326, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case11() {
    int[] type = { 84, 6, 11, 63 };
    int[] taste = { 39249, 63090, 39589, 85930 };
    assertEquals(911432, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case12() {
    int[] type = { 2, 19, 2, 46, 80, 55, 31, 98, 35, 80, 38, 8, 73, 6, 94, 35 };
    int[] taste = { -41785, 84130, -31315, 21553, -75840, 41033, -60983, -74023, 52912, -58789, -13260, 61190, -93331, -88395, -19813, -21761 };
    assertEquals(1594215, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case13() {
    int[] type = { 1, 6, 68, 27, 63, 51, 79, 12, 91, 89, 11, 53, 74, 54 };
    int[] taste = { -60720, -60881, -37279, -68765, -54138, 35290, -3032, -72892, -58124, 79503, -23294, 49853, -98832, 40201 };
    assertEquals(1071126, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case14() {
    int[] type = { 81, 58 };
    int[] taste = { -5889, 231 };
    assertEquals(231, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case15() {
    int[] type = { 18, 4, 29, 38, 98, 46, 22, 31, 36, 77, 2, 91, 32, 62, 85, 5, 41, 77, 87, 86, 22, 38, 19, 47, 73, 78, 22, 49, 59, 73, 42, 71, 6, 22, 77, 20, 40, 5, 43 };
    int[] taste = { -95929, -20247, -16930, -23102, -3631, 9730, 79498, 89280, 61680, 28355, -32337, -89897, 69331, -34638, -1407, -89899, 93620, 97350, 72452, 35505, -41564, -10552, -52729, -89549, -8728, 29689, 41012, -73449, -71143, -67902, 44435, -83504, -74404, -86814, 38628, -68284, -81822, -81364, -38733 };
    assertEquals(12579805, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case16() {
    int[] type = { 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1 };
    int[] taste = { -804, -32, 615, 132, 297, -996, -35, 682, 684, -307, 401, 201, -441, -446, 111, 451, -963, -671, -175, 786, -979, 369, -189, 108, -930, -583, -271, -98, -224, 435, -457, 8, -279, -830, 64, 747, -241, -310, 399, -283, 512, 354, -358, -501, 219, 613, -427, -986, 654, 287 };
    assertEquals(18258, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case17() {
    int[] type = { 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1 };
    int[] taste = { 587, 11, 377, -123, 888, 661, -719, -794, 620, -945, 73, 487, -443, 349, 123, -818, -965, 31, 457, -889, 602, -521, 815, 816, -826, 499, -79, 523, 977, -231, -88, -620, -744, 244, -23, -567, 658, 335, 295, 910, -763, 588, 47, 43, -678, -707, 640, 470, 179, -775 };
    assertEquals(26610, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case18() {
    int[] type = { 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2 };
    int[] taste = { -986, -561, -899, 491, -672, 291, -673, 461, -115, 457, 321, -65, 5, 402, 851, -508, -299, 511, -946, 420, 444, -175, -277, 900, -784, -564, -988, -337, 980, 504, -11, -818, -370, 682, 302, 382, 162, -935, -259, -595, 210, -866, 927, -17, -236, -864, -286, -151, 738, 912 };
    assertEquals(22706, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case19() {
    int[] type = { 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1 };
    int[] taste = { -686, -427, 95, 551, -223, -993, 453, -548, 0, 863, 434, 219, -786, -640, -92, -766, 986, -243, 429, 957, -373, -560, 267, -222, -428, -149, -615, 640, -447, 495, 923, -998, 455, -932, 489, -942, -66, 52, -808, -150, 752, -90, 479, -420, 312, -271, 840, 969, -76, -801 };
    assertEquals(23320, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case20() {
    int[] type = { 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1 };
    int[] taste = { 633, -439, -387, -853, -960, -841, 53, -98, -316, 497, -593, -550, 803, -817, 45, 628, 607, -396, 429, -475, -104, 602, -989, 886, 331, 705, -533, 228, 430, 985, 716, -15, 423, -374, -76, -835, -531, 852, -296, 161, 8, 251, -82, -150, 984, -60, -85, -959, -984, -750 };
    assertEquals(22514, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case21() {
    int[] type = { 4, 4, 5, 5, 4, 5, 3, 5, 4, 4, 4, 2, 1, 5, 5, 3, 5, 5, 3, 2, 4, 4, 5, 2, 3, 3, 3, 1, 4, 2, 2, 1, 4, 2, 1, 4, 1, 1, 1, 3, 1, 5, 3, 5, 3, 5, 4, 5, 5, 2 };
    int[] taste = { 788, 724, -609, 762, 737, -234, -868, 707, -818, 267, -113, -450, -280, -790, -271, -858, -352, -735, -861, 884, -975, -737, -421, -773, 374, -232, 290, 590, -475, 311, 152, 635, -225, -143, -428, -910, -690, 914, -335, -408, 992, -520, -878, -187, 603, 386, 748, -328, 198, -280 };
    assertEquals(55310, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case22() {
    int[] type = { 1, 2, 1, 5, 3, 4, 3, 1, 1, 5, 4, 5, 4, 2, 2, 4, 2, 5, 3, 4, 2, 1, 5, 3, 2, 3, 4, 2, 2, 2, 2, 5, 5, 3, 1, 1, 2, 5, 3, 5, 2, 1, 3, 5, 5, 4, 4, 5, 2, 2 };
    int[] taste = { -461, -416, 239, -958, 273, 664, 150, -529, -516, 716, -908, 536, 143, 464, -690, 490, -76, 170, 22, 99, -888, -61, -358, 82, -140, 843, 86, -556, 366, -443, -219, 69, 363, -316, -435, -699, 632, 570, -24, 932, -249, 67, 141, -520, 824, -508, -740, 434, 98, 66 };
    assertEquals(47695, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case23() {
    int[] type = { 3, 5, 4, 5, 4, 4, 5, 2, 3, 5, 4, 2, 5, 4, 3, 1, 2, 2, 1, 4, 5, 3, 2, 5, 3, 5, 2, 2, 1, 4, 5, 1, 3, 1, 1, 4, 4, 2, 1, 2, 1, 1, 4, 1, 4, 1, 4, 3, 2, 2 };
    int[] taste = { 130, 102, -545, -140, 610, 962, -952, 303, -376, 54, 25, -554, 306, -990, -349, -715, -734, 921, -831, -834, 851, 105, 454, -564, -332, -617, 296, 530, 784, -372, 135, 322, 100, 430, 397, -560, 478, 544, -217, -495, 813, 499, -167, 262, 788, -709, -400, -537, 559, 475 };
    assertEquals(61175, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case24() {
    int[] type = { 3, 3, 5, 3, 2, 1, 3, 4, 1, 3, 2, 3, 4, 1, 4, 2, 5, 5, 5, 3, 2, 2, 1, 4, 3, 2, 1, 5, 3, 4, 5, 4, 3, 1, 5, 2, 4, 5, 2, 3, 2, 3, 4, 1, 5, 2, 3, 4, 5, 4 };
    int[] taste = { -403, 769, -40, -340, -380, 270, -518, -757, -954, 477, -574, 504, -220, 156, -818, 280, 545, 98, 25, -641, -636, -171, -179, -467, 365, -13, -653, 559, -132, 107, -234, 763, -118, -791, -994, -367, 885, 205, 542, 41, -916, -33, -419, -638, -858, 705, 581, 95, 368, 481 };
    assertEquals(44105, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case25() {
    int[] type = { 4, 1, 1, 4, 3, 2, 2, 3, 2, 4, 5, 4, 3, 5, 5, 1, 2, 3, 2, 5, 5, 1, 2, 1, 5, 2, 5, 2, 4, 4, 3, 1, 1, 1, 3, 2, 3, 1, 3, 3, 2, 2, 3, 4, 2, 5, 1, 4, 3, 4 };
    int[] taste = { -966, 788, 653, 149, 209, 398, -757, -220, 672, -407, 732, -101, -183, 652, -781, -788, -421, 79, 951, 930, -647, 21, 182, -373, 884, -241, -703, -779, -274, -91, 874, 260, -841, 16, -645, -336, -508, -170, -67, 238, -823, -40, -217, -885, -689, 331, 666, -784, 497, -901 };
    assertEquals(50910, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case26() {
    int[] type = { 7, 4, 6, 3, 6, 4, 2, 7, 9, 8, 9, 7, 10, 7, 2, 9, 4, 10, 7, 7, 4, 5, 3, 8, 5, 9, 4, 6, 3, 8, 4, 8, 1, 2, 7, 7, 9, 9, 4, 4, 9, 5, 8, 9, 3, 7, 6, 6, 8, 7 };
    int[] taste = { 85966, -87599, -35526, 57773, -53061, -64852, -47246, 16556, 4555, -2652, 30013, 97142, -56533, -1037, 2198, 3725, -1144, 68000, -82638, -13950, -97060, -22687, 6688, 50403, -13712, -2660, -85991, -34756, -88280, -74075, -90706, 91122, 12755, 20973, 93334, -25395, -42056, 92370, 56390, 11063, 9565, 38718, 42763, 8698, 60628, -48725, -80464, -50492, -35217, -61804 };
    assertEquals(9266420, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case27() {
    int[] type = { 8, 7, 8, 1, 9, 1, 6, 1, 4, 6, 4, 2, 6, 9, 1, 9, 6, 9, 4, 5, 3, 3, 1, 8, 4, 6, 6, 6, 9, 9, 3, 1, 9, 1, 1, 1, 5, 7, 8, 3, 8, 3, 2, 4, 8, 7, 3, 6, 9, 4 };
    int[] taste = { -5843, -3392, -3713, 87084, -75771, -82876, 72938, -86609, -55260, 56089, -34642, 81305, -79348, 65573, -30118, -36085, -94499, -7544, -52660, 56946, 8977, -7879, 10604, -86486, -39731, -15038, -8533, -81363, -72892, 25774, -48341, -42781, -47570, -44082, -73047, 50893, 8302, 5233, 87173, 67138, 75692, -54448, 99092, 41546, 62836, 19897, -94789, -18410, 55975, 66129 };
    assertEquals(9946764, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case28() {
    int[] type = { 1, 8, 6, 6, 8, 9, 4, 4, 10, 2, 5, 10, 7, 10, 10, 2, 6, 7, 6, 4, 3, 10, 7, 5, 7, 4, 5, 2, 8, 8, 5, 8, 2, 10, 2, 9, 2, 2, 5, 1, 9, 10, 9, 5, 10, 8, 8, 5, 2, 5 };
    int[] taste = { 82017, 55001, -51201, -93215, -74555, -99728, -89861, 72155, -83633, 6062, 32292, 22655, -36655, 85923, -4177, -90185, -52258, 87346, 44395, 7968, 89721, -18482, 26516, 69480, -18153, 27497, -755, -86063, 54415, -38996, -10155, 84794, -17704, -38302, -13386, 46987, 45298, 3855, 34241, -36015, -68544, 27278, -6999, -89919, 39428, -20891, -54142, -35668, -11296, 97515 };
    assertEquals(11428390, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case29() {
    int[] type = { 1, 8, 10, 7, 9, 8, 6, 8, 4, 4, 3, 2, 3, 4, 3, 6, 6, 10, 4, 8, 1, 9, 4, 3, 3, 10, 5, 7, 2, 3, 9, 9, 8, 9, 8, 4, 6, 5, 6, 1, 3, 4, 5, 8, 2, 1, 9, 9, 7, 6 };
    int[] taste = { -51107, 96444, 25778, -99492, 37084, -12240, -17084, 65040, 76606, 69629, -36290, -83132, -73951, -53474, 11768, -67465, 6818, 2415, -5010, -38310, 5036, 94463, 79380, -98082, 30579, -90329, 98746, 25691, 17748, -32212, -18175, 85500, -69033, 70123, 88245, 63104, 91998, -83940, -88735, -26799, -90534, -55764, -1664, -64328, -13569, -13208, -54107, 99936, 34582, 90971 };
    assertEquals(13676840, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case30() {
    int[] type = { 2, 2, 3, 8, 7, 5, 8, 8, 9, 2, 2, 3, 7, 5, 8, 7, 5, 1, 3, 8, 9, 5, 4, 1, 3, 3, 6, 8, 9, 1, 5, 5, 10, 7, 9, 5, 3, 8, 10, 3, 9, 8, 6, 2, 3, 2, 8, 7, 2, 5 };
    int[] taste = { -96848, 23635, -19472, -93086, 76517, -92068, -27812, 31738, 75368, -92775, -48434, -57184, 51284, -91379, -71509, 89830, -57403, 53556, 70431, 15400, 48804, 43968, 83458, 1408, -51400, 34195, 80104, 90674, 36898, -26911, 34997, 17011, 36261, -62949, -2901, 84539, -49833, 80275, -72730, 43134, 41858, -50941, 71548, -71384, 17253, -29078, 18116, -93928, 25209, 46709 };
    assertEquals(14241780, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case31() {
    int[] type = { 48, 32, 9, 12, 40, 40, 42, 46, 5, 12, 40, 16, 1, 21, 3, 28, 13, 24, 16, 24, 49, 5, 45, 24, 40, 38, 5, 4, 2, 3, 5, 17, 25, 18, 48, 16, 23, 2, 35, 22, 36, 33, 31, 49, 4, 50, 11, 44, 23, 8 };
    int[] taste = { -1936, 89595, -14540, -90364, 78671, -96318, 25193, 82768, -43480, -33726, -15461, -86447, 8675, -61297, -3572, -26182, 75744, -93718, 28819, -711, 8175, 51855, 98611, 45590, 97445, -25911, 9718, -81883, -86737, 93804, 47854, 38320, -65623, 3036, 44610, -486, 4125, -20178, -79106, -78563, 66117, -17750, 17531, -8928, 3067, 52661, -34643, -31077, 54387, 10874 };
    assertEquals(27100668, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case32() {
    int[] type = { 15, 40, 5, 35, 47, 38, 7, 27, 38, 5, 43, 40, 1, 5, 33, 31, 25, 3, 36, 32, 45, 35, 24, 46, 42, 3, 5, 46, 5, 16, 38, 31, 11, 46, 21, 46, 19, 19, 18, 37, 49, 3, 7, 19, 35, 21, 28, 28, 2, 46 };
    int[] taste = { 69560, 3144, -87342, -63342, 872, -72051, 70794, 21308, 90349, -85446, 42797, -95770, -98551, 53248, -10082, 85273, -49887, 24230, 76228, -31434, 34945, -19829, 91423, 2162, -63264, 17392, -1379, 34758, 72558, -66330, -9524, -97108, -25909, -75068, -25080, 97365, -76528, 11586, 34774, -13249, -19177, -34962, 41229, 2156, 65668, -80876, 79441, 93586, 85651, -9930 };
    assertEquals(29439150, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case33() {
    int[] type = { 29, 30, 5, 7, 8, 30, 30, 23, 15, 12, 26, 30, 32, 27, 49, 8, 19, 41, 5, 39, 12, 48, 15, 45, 9, 44, 1, 5, 13, 25, 15, 6, 46, 23, 23, 25, 6, 20, 48, 49, 25, 36, 14, 8, 31, 20, 10, 26, 50, 17 };
    int[] taste = { -76376, -85711, -38111, -68249, 85199, -86730, -36050, -567, 88684, 96295, 65104, 36284, -77019, 7777, -12838, 39986, 31612, 47217, -6625, -77234, 442, 63524, 56658, 33295, -8571, 6919, -25607, -1665, 17040, 34522, 56257, -61189, 52232, 50094, 35911, -22623, -44169, 47836, 45490, -53450, 18138, 77342, -92942, 93376, 72651, -29109, 81624, -23534, 56163, -44195 };
    assertEquals(32776302, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case34() {
    int[] type = { 14, 37, 32, 27, 6, 4, 28, 37, 14, 5, 2, 5, 21, 7, 11, 48, 44, 40, 40, 46, 50, 24, 41, 23, 50, 15, 37, 50, 33, 44, 16, 17, 8, 3, 46, 19, 50, 48, 39, 13, 16, 3, 47, 3, 45, 29, 28, 1, 19, 40 };
    int[] taste = { -51875, 30616, -33378, 58261, 63242, 843, 15967, -45090, -63597, 63244, -97923, -55021, 5055, -70102, 501, -89052, 22285, -10352, -69340, -62794, 8889, -75345, -79210, 6594, 93825, 79719, -37315, 94001, -21957, -39722, -13061, -37371, 25728, -10987, 9732, -69332, 69458, -55145, 71094, 97054, 4172, -83897, -48860, -23953, -91231, 18165, 53236, 73057, 33299, -28281 };
    assertEquals(22112712, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case35() {
    int[] type = { 12, 34, 18, 40, 5, 40, 36, 21, 13, 19, 23, 37, 1, 17, 16, 29, 23, 19, 24, 48, 21, 15, 37, 4, 1, 47, 3, 48, 12, 18, 8, 35, 44, 3, 45, 39, 32, 36, 10, 1, 14, 24, 15, 10, 42, 21, 3, 43, 37, 11 };
    int[] taste = { -7679, -26768, -95615, -91489, 82980, 53787, -52054, 6130, -84295, -18273, -6387, 48681, 55758, 8510, -89970, -75877, 73465, 4792, 23562, -43196, 69664, 90945, 32489, -38286, 57901, 55680, 40828, 26754, -2752, 78418, -75787, -57753, -46368, 95188, 83176, -9255, -76827, -42790, -19419, 93245, 7814, 23412, 37404, 60628, -11624, -55822, -78343, -49606, 97190, -30872 };
    assertEquals(27505296, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case36() {
    int[] type = { 69, 22, 38, 53, 2, 57, 86, 1, 2, 33, 60, 10, 21, 15, 84, 88, 63, 10, 59, 90, 35, 90, 54, 57, 32, 87, 56, 81, 40, 16, 36, 53, 12, 65, 99, 69, 93, 42, 38, 9, 16, 82, 54, 4, 60, 35, 37, 60, 71, 78 };
    int[] taste = { -27706, -48696, -49502, 16867, -81343, 37810, -33623, 55283, 63305, -5473, -83137, 45453, -81469, -10511, 73414, -14507, 65345, -90186, -32959, 23140, 87159, 23128, -63052, 87094, 79448, -15937, 79792, 14895, 30655, -79355, -49187, 44315, -10645, 10515, 6015, 22347, 66726, 35611, -36274, 28905, 23111, -30555, -63408, 53458, 36598, 35705, -93629, -60544, -21804, 78486 };
    assertEquals(33554112, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case37() {
    int[] type = { 74, 74, 79, 93, 76, 3, 1, 66, 39, 51, 14, 58, 99, 78, 14, 28, 96, 30, 77, 88, 57, 90, 31, 50, 69, 63, 17, 70, 1, 4, 22, 72, 70, 84, 66, 53, 55, 20, 46, 81, 20, 61, 8, 59, 100, 35, 57, 78, 96, 71 };
    int[] taste = { -13151, 9369, -26715, 68863, 57106, -51926, -98838, -48480, 54133, -81344, -54177, 4653, 24620, 73530, 7526, 19319, 43547, 25750, 36369, -75822, -4457, -5736, 80302, -5115, -88039, 85641, -84744, -58556, -78725, 68494, 34458, 97014, 32529, -48331, 41312, 58185, 69572, 3907, -13552, 6372, 69591, -52133, 79996, -27412, -57233, -13472, -96709, 13912, 92490, 32921 };
    assertEquals(38240704, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case38() {
    int[] type = { 37, 69, 84, 85, 32, 69, 65, 29, 68, 27, 45, 75, 43, 8, 68, 86, 44, 19, 59, 59, 80, 37, 15, 84, 55, 99, 74, 35, 99, 45, 80, 20, 4, 18, 5, 29, 53, 4, 77, 16, 54, 45, 32, 85, 11, 14, 80, 80, 92, 24 };
    int[] taste = { -11666, -3896, 42585, 24688, 36950, -92154, -6664, 56812, -66602, 46999, 83101, -51388, 46251, -16850, 36519, -67053, -87869, 63960, 92152, -19702, -79788, -57323, -39338, -60499, -97078, 6315, -40909, 47218, -51775, -1747, 47196, 29644, 92923, 99959, 39395, 4102, 50922, -89266, -27646, -30169, -84016, 46166, 60122, 27988, -39252, -91761, -8510, -99490, -45063, -71341 };
    assertEquals(23645600, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case39() {
    int[] type = { 97, 20, 34, 89, 1, 5, 31, 29, 16, 3, 68, 96, 70, 47, 17, 24, 48, 23, 2, 20, 4, 65, 86, 85, 92, 97, 22, 1, 91, 17, 73, 99, 49, 97, 98, 14, 21, 86, 53, 100, 55, 98, 98, 33, 87, 24, 74, 41, 19, 28 };
    int[] taste = { 13791, 19283, 6064, -76891, 9906, 52453, -92368, 9201, -3271, -37652, 21347, -60962, 90445, 14541, 88660, -69647, -15061, -9200, 12601, 26406, -44275, 33194, 94775, -69111, -75464, 23323, 71684, 61487, 48928, 16347, -93363, 62003, -90875, 41729, 16378, 13020, -12173, -49839, 19206, 79555, -67727, 73965, 44010, 30818, 49206, 82944, 34160, 96541, 16034, 11042 };
    assertEquals(41846080, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case40() {
    int[] type = { 11, 61, 74, 40, 39, 94, 100, 42, 24, 62, 96, 68, 71, 30, 49, 16, 2, 14, 73, 14, 91, 24, 58, 29, 47, 35, 84, 14, 96, 28, 29, 49, 37, 25, 31, 34, 49, 25, 22, 45, 93, 20, 41, 89, 46, 44, 66, 49, 50, 63 };
    int[] taste = { -26441, 32418, 7165, 75283, -78560, 2083, 62242, -60226, 99806, -72412, -46115, 96514, -60144, 2232, 41913, -50857, -17925, -1469, -17630, 7571, 89346, 80357, -84060, -99904, -80632, -95714, 91513, -35414, -79304, 24312, -17208, 1286, -51932, 56356, -95437, 52736, 50591, 48213, -63850, 22299, 17812, 93291, 46776, 65944, 31828, 97911, -48525, 21802, 41841, -19849 };
    assertEquals(35346864, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case41() {
    int[] type = { 15, 16, 19, 18, 5, 8, 9, 4, 14, 6, 7, 17, 19, 8, 18, 12, 13, 3, 10, 20, 17, 12, 18, 6, 3, 19, 19, 20, 20, 19, 10, 11, 20, 11, 15, 1, 12, 4, 2, 3, 5, 8, 5, 17, 3, 8, 12, 17, 19, 3 };
    int[] taste = { 7291, 49172, 36429, 75401, 41559, 332, 82641, 65106, 65321, 71863, 52147, 88587, 14717, 82099, 32144, 70554, 49782, 38699, 24722, 28504, 72286, 50077, 42211, 11211, 90381, 25147, 77657, 62931, 82328, 61734, 60257, 56860, 42320, 46860, 32092, 51429, 54310, 17094, 64142, 31281, 4291, 10275, 32623, 85391, 69288, 70214, 77003, 73715, 28675, 18532 };
    assertEquals(49593700, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case42() {
    int[] type = { 19, 15, 15, 15, 18, 18, 13, 7, 15, 12, 11, 9, 8, 18, 13, 18, 9, 9, 19, 7, 20, 2, 17, 13, 16, 6, 15, 18, 7, 19, 9, 14, 10, 17, 20, 15, 1, 6, 3, 5, 5, 7, 16, 19, 20, 5, 12, 3, 4, 12 };
    int[] taste = { 22382, 13536, 91355, 29336, 89047, 73134, 20409, 39744, 92912, 85025, 49948, 13169, 15144, 56943, 35321, 83164, 45053, 52711, 49331, 7171, 82468, 26606, 76221, 86688, 28550, 9683, 13789, 5308, 38736, 92694, 14616, 8073, 45331, 55669, 39213, 66085, 90381, 63610, 47071, 27796, 59598, 7208, 5645, 27907, 45389, 81450, 1060, 74886, 5919, 88163 };
    assertEquals(45612960, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case43() {
    int[] type = { 6, 2, 9, 14, 3, 15, 16, 16, 13, 3, 20, 5, 2, 12, 7, 11, 12, 14, 6, 18, 17, 11, 10, 19, 9, 1, 10, 2, 15, 15, 5, 12, 7, 7, 1, 9, 5, 6, 11, 11, 13, 8, 1, 5, 6, 20, 16, 13, 11, 6 };
    int[] taste = { 39091, 16329, 73664, 16530, 16715, 87224, 93523, 26133, 40048, 74468, 71138, 64124, 19304, 65337, 26705, 34663, 74176, 4063, 2645, 6919, 52008, 4203, 73297, 20892, 51059, 46187, 72688, 8361, 15614, 20915, 67687, 56602, 69355, 86826, 75447, 80867, 57087, 70100, 35239, 66846, 37449, 89721, 65599, 28392, 44265, 79693, 59659, 23637, 95634, 22417 };
    assertEquals(46180355, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case44() {
    int[] type = { 16, 3, 2, 5, 20, 13, 15, 10, 8, 13, 9, 11, 10, 5, 6, 13, 2, 20, 14, 20, 2, 3, 11, 16, 15, 13, 17, 9, 14, 19, 12, 15, 12, 17, 17, 12, 9, 4, 17, 13, 16, 18, 9, 5, 14, 9, 7, 10, 15, 7 };
    int[] taste = { 54443, 64408, 5353, 71516, 34821, 90930, 20357, 37204, 82833, 11232, 46058, 26890, 50221, 59561, 10581, 13969, 33831, 92242, 24738, 61641, 95130, 3930, 55508, 52977, 36387, 91307, 56580, 46696, 31300, 36239, 40470, 78386, 39800, 79275, 13161, 59714, 95278, 39841, 97881, 94501, 47584, 28784, 57516, 3334, 73688, 54627, 4945, 43656, 95138, 323 };
    assertEquals(46488915, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case45() {
    int[] type = { 7, 14, 2, 1, 5, 7, 7, 17, 17, 18, 18, 16, 3, 13, 14, 3, 8, 5, 6, 4, 7, 14, 4, 20, 16, 5, 15, 14, 12, 13, 13, 2, 2, 3, 9, 18, 5, 16, 9, 4, 19, 15, 10, 10, 4, 8, 11, 1, 17, 14 };
    int[] taste = { 40717, 29316, 84633, 35613, 118, 35047, 24431, 73058, 52602, 10706, 2146, 88401, 79688, 51004, 28570, 2193, 37769, 7644, 15366, 87631, 44876, 28502, 28632, 73226, 25429, 68527, 71124, 7161, 40888, 28065, 23715, 44714, 47971, 99918, 99702, 36818, 73127, 42371, 98440, 87142, 28461, 78655, 3109, 64577, 6989, 41740, 10880, 95357, 97856, 86830 };
    assertEquals(47429100, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case46() {
    int[] type = { 3, 3, 3, 3, 2, 3, 1 };
    int[] taste = { -8, -9, -3, 7, -7, -7, 8 };
    assertEquals(30, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case47() {
    int[] type = { 1, 1, 1, 1, 3, 2, 3 };
    int[] taste = { 1, -7, 8, 9, -9, -2, 6 };
    assertEquals(66, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case48() {
    int[] type = { 3, 1, 1, 2, 1, 2, 1 };
    int[] taste = { 7, 0, -3, 4, 2, 3, -8 };
    assertEquals(48, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case49() {
    int[] type = { 3, 2, 2, 1, 3, 2, 3 };
    int[] taste = { -9, -1, -7, -3, -1, -1, 9 };
    assertEquals(16, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case50() {
    int[] type = { 2, 1, 1, 1, 1, 1, 2 };
    int[] taste = { -1, -2, -1, -3, 9, 6, 6 };
    assertEquals(42, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case51() {
    int[] type = { 2, 2, 1, 2, 3, 1, 3 };
    int[] taste = { 7, 3, 6, -2, -3, 3, 9 };
    assertEquals(84, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case52() {
    int[] type = { 1, 2, 3, 2, 3, 2, 3 };
    int[] taste = { -2, -5, -8, 7, 7, -3, -9 };
    assertEquals(36, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case53() {
    int[] type = { 2, 2, 2, 3, 3, 3, 2 };
    int[] taste = { 6, 0, -7, -8, -8, 0, -4 };
    assertEquals(12, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case54() {
    int[] type = { 2, 2, 2, 3, 1, 1, 1 };
    int[] taste = { 0, 4, 4, -9, 6, -5, 3 };
    assertEquals(34, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case55() {
    int[] type = { 1, 3, 1, 3, 1, 3, 1 };
    int[] taste = { -6, 7, 9, 0, 4, -8, -9 };
    assertEquals(40, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case56() {
    int[] type = { 4, 10, 1, 4, 10, 9, 2, 4, 10, 6, 5, 10, 3, 5, 6, 2, 3, 6, 7, 6, 6, 9, 5, 1, 2, 2, 10, 4, 10, 7, 10, 4, 6, 4, 1, 7, 1, 9, 7, 5, 5, 3, 2, 6, 5, 3, 8, 5, 3 };
    int[] taste = { 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000 };
    assertEquals(49000000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case57() {
    int[] type = { 2, 4, 2, 6, 4, 5, 5, 3, 2, 3, 1, 8, 7 };
    int[] taste = { 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000 };
    assertEquals(10400000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case58() {
    int[] type = { 1, 9, 9, 8, 4, 9, 9, 4, 4, 5, 3, 10, 8 };
    int[] taste = { 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000 };
    assertEquals(9100000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case59() {
    int[] type = { 8, 10, 1, 2, 1, 4, 5, 8, 7, 3, 3, 6, 1, 2, 6, 5, 4, 10, 9, 3, 1, 1, 9, 6, 3, 7, 5, 1, 2, 10, 4, 9, 9, 10, 6, 8, 5, 9, 6, 9, 6, 1, 4, 4, 4, 6, 2, 3, 7, 6 };
    int[] taste = { 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, -100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000 };
    assertEquals(45000000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case60() {
    int[] type = { 7, 5, 4, 2, 2, 1, 10, 6, 1, 6, 9, 10, 6, 5, 4, 5, 4, 1, 1, 2, 9, 9, 10, 2, 6, 7, 1, 10, 7, 7, 6, 5, 2, 3, 5, 4, 1, 7, 1, 1, 3, 9, 3, 10, 2, 1, 3, 9, 1, 5 };
    int[] taste = { 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000 };
    assertEquals(40500000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case61() {
    int[] type = { 1, 2, 10, 4, 2, 9, 3, 8, 1, 6, 5, 7, 6, 2, 4, 9, 2, 1, 10, 10, 9, 6, 7, 3, 9, 8, 3, 9, 5, 3, 9, 7, 2, 7, 9, 8, 7, 10, 5, 5, 2, 6, 7, 3, 6, 5, 7, 8, 8, 9 };
    int[] taste = { -100000, -100000, 100000, 100000, -100000, -100000, -100000, 100000, -100000, -100000, 100000, 100000, -100000, -100000, -100000, 100000, -100000, -100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, -100000, 100000, -100000, -100000, -100000, 100000, -100000, -100000, 100000, 100000, -100000, -100000, 100000, 100000, 100000, 100000, -100000, -100000, 100000, 100000, -100000, -100000, -100000, -100000 };
    assertEquals(22000000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case62() {
    int[] type = { 8, 9, 1, 3, 9, 2, 2, 7, 4, 2, 1, 10, 1, 6, 6, 9, 6, 7, 6, 3, 5, 8, 6, 6, 1, 2, 4, 4, 5, 5, 8, 9, 5, 7, 6, 7, 9, 9, 10, 4, 9, 4, 10, 3, 1, 8, 2, 4, 8, 5 };
    int[] taste = { -100000, 100000, 100000, -100000, -100000, -100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, -100000, -100000, 100000, -100000, -100000, -100000, -100000, 100000, -100000, 100000, -100000, -100000, -100000, -100000, -100000, -100000, 100000, 100000, -100000, -100000, 100000, -100000, 100000, 100000, -100000, -100000, -100000, -100000, 100000, -100000, -100000, -100000, 100000, 100000, -100000 };
    assertEquals(21000000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case63() {
    int[] type = { 33, 29, 12, 12, 46, 19, 12, 20, 26, 5, 5, 34, 12, 11, 30, 33, 18, 17, 23, 43, 36, 25, 21, 10, 25, 30, 40, 34, 45, 27, 33, 47, 11, 4, 27, 49, 27, 20, 24, 13, 34, 27, 20, 29, 24, 37, 37, 28, 44, 37 };
    int[] taste = { -100000, 100000, 100000, -100000, -100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, -100000, 100000, 100000, -100000, -100000, 100000, 100000, 100000, 100000, -100000, -100000, -100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000 };
    assertEquals(87000000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case64() {
    int[] type = { 43, 42, 31, 28, 13, 32, 16, 10, 34, 7, 47, 36, 46, 18, 25, 40, 40, 30, 42, 6, 35, 6, 17, 9, 1, 30, 24, 48, 16, 33, 25, 40, 6, 17, 3, 16, 41, 17, 37, 49, 34, 28, 34, 34, 43, 11, 34, 35, 14, 36 };
    int[] taste = { 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, -100000, -100000, 100000, 100000, 100000, 100000, -100000, 100000, -100000, 100000, 100000, -100000, -100000, 100000, 100000, -100000, 100000, 100000, 100000 };
    assertEquals(105400000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case65() {
    int[] type = { 11, 30, 7, 47, 25, 32, 39, 13, 38, 44, 30, 43, 11, 7, 33, 7, 7, 41, 17, 37, 40, 13, 12, 24, 47, 37, 30, 16, 25, 27, 7, 45, 6, 23, 12, 34, 6, 30, 11, 38, 46, 30, 4, 2, 9, 10, 28, 36, 47, 43 };
    int[] taste = { 100000, 100000, 100000, -100000, 100000, -100000, 100000, -100000, 100000, 100000, -100000, 100000, -100000, -100000, 100000, 100000, 100000, 100000, 100000, -100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, -100000, 100000, 100000, 100000, 100000, -100000, 100000, -100000, 100000, -100000, -100000, 100000, -100000, -100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000 };
    assertEquals(96100000, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case66() {
    int[] type = { 1, 3, 2, 3, 3, 3, 1, 2, 2, 2, 2, 1, 1, 3, 2, 3, 2, 2, 2, 1, 1, 3, 2, 3, 2, 2, 2, 1, 2, 1, 3, 2, 3, 3, 2, 3, 1, 2, 1, 2, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3 };
    int[] taste = { 785, 423, 607, 568, 430, 858, 612, 725, 463, 63, 504, -212, 822, 153, -868, 182, 440, 545, 565, 647, 416, 223, 344, 21, 75, 508, -618, -586, 637, -321, 590, 337, 229, 939, 115, 186, -396, 142, 457, 71, 716, 402, 100, -573, -381, 155, 867, 836, -643, -373 };
    assertEquals(53274, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case67() {
    int[] type = { 1, 2, 2, 3, 2, 2, 2, 1, 2, 3, 1, 2, 3, 3, 3, 1, 1, 2, 1, 3, 2, 1, 1, 2, 3, 2, 3, 1, 3, 2, 2, 1, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 2, 2, 1, 1, 1 };
    int[] taste = { 63, 4, 500, -851, 966, 715, 724, 641, 907, 673, 296, 514, -109, 942, 767, 756, 316, 488, 790, 670, 211, 461, -513, 785, 564, 881, 337, 633, 141, 979, -176, 438, 154, 964, 529, 460, 856, -367, -213, 0, 151, -516, 315, -8, 592, -88, -595, 957, 270, 269 };
    assertEquals(65037, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case68() {
    int[] type = { 3, 3, 3, 2, 3, 2, 3, 1, 1, 3, 3, 1, 2, 2, 2, 2, 3, 1, 3, 2, 2, 2, 3, 2, 2, 3, 2, 3, 2, 1, 3, 2, 2, 3, 2, 2, 3, 1, 3, 2, 2, 3, 2, 3, 2, 1, 2, 2, 2, 2 };
    int[] taste = { -250, 310, 845, -358, 117, -176, 819, 253, 885, -387, 989, 251, -439, 981, 687, 695, 774, -38, 191, -825, 864, 151, 485, 453, 193, 739, 871, 111, 707, 242, 689, -903, 62, 349, 356, -70, 219, 730, 54, 547, 719, -338, -977, -309, -572, 292, 186, 289, 336, 858 };
    assertEquals(54897, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case69() {
    int[] type = { 2, 1, 3, 2, 2, 3, 3, 2, 3, 2, 3, 1, 2, 1, 3, 1, 2, 1, 3, 2, 2, 3, 1, 1, 2, 1, 1, 3, 1, 2, 2, 3, 3, 1, 2, 2, 3, 2, 2, 1, 2, 1, 1, 2, 1, 3, 1, 2, 2, 3 };
    int[] taste = { 849, -448, -387, 274, -842, 856, -38, 892, 945, 895, 264, 32, 164, 211, 922, 499, 62, 95, 717, 463, 150, 436, 127, 33, -255, 919, -98, -265, 625, -480, 329, 361, 790, 353, 862, 961, 770, 602, 22, -231, 35, -104, 170, 240, 350, 368, -141, -619, 202, 802 };
    assertEquals(52941, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case70() {
    int[] type = { 1, 2, 3, 1, 1, 2, 3, 3, 2, 3, 1, 1, 2, 3, 1, 3, 1, 3, 3, 1, 2, 3, 3, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 2, 2, 3, 3, 3, 2, 3, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2 };
    int[] taste = { 423, 327, 251, 397, 403, -17, 601, 55, 160, 664, 337, 722, 366, 29, 707, 490, 665, 36, 936, 583, 798, 389, 223, 689, 608, 188, 628, 378, 758, 913, 725, 326, 756, 9, 192, 590, 51, 892, 42, 586, -560, 204, 615, 687, 309, 243, 672, 460, 656, 215 };
    assertEquals(65862, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case71() {
    int[] type = { 4, 8, 2, 7, 9, 1, 10, 2, 5, 7, 7, 4, 9, 10, 4, 4, 4, 5, 1, 3, 5, 7, 9, 3, 8, 6, 9, 3, 9, 7, 3, 7, 6, 7, 1, 5, 10, 2, 8, 10, 4, 7, 3, 8, 4, 8, 1, 7, 8, 7 };
    int[] taste = { -473, 389, 779, 90, 927, 969, 74, 953, 280, 583, -931, 816, 373, -93, 785, 256, 8, 269, 182, 410, 408, -706, 456, 86, -128, 827, 684, 529, 685, 143, 560, -995, 984, 702, 439, 162, -912, 480, 193, 9, 140, 511, 342, 798, -415, -268, 395, 449, 645, 610 };
    assertEquals(193800, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case72() {
    int[] type = { 4, 8, 10, 8, 3, 3, 6, 4, 4, 9, 2, 8, 5, 1, 3, 9, 8, 4, 3, 8, 6, 8, 2, 1, 10, 8, 2, 8, 7, 6, 6, 7, 7, 9, 2, 9, 1, 5, 1, 8, 3, 4, 10, 10, 6, 2, 5, 7, 1, 2 };
    int[] taste = { 659, -492, -588, -6, 283, 344, -161, 648, 960, 343, 639, 231, 151, 257, 207, 232, 38, 795, -701, 157, 10, 80, 731, -420, 308, 891, 235, 18, 969, 45, 743, 899, 104, 652, -985, 140, 881, 579, -371, -507, 30, 819, 445, 684, 156, -108, -40, -636, -7, 573 };
    assertEquals(159360, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case73() {
    int[] type = { 3, 10, 2, 5, 2, 3, 8, 4, 4, 2, 10, 9, 6, 10, 10, 4, 10, 10, 4, 1, 2, 2, 8, 9, 4, 3, 3, 10, 3, 3, 7, 6, 6, 2, 3, 3, 7, 3, 10, 5, 5, 2, 10, 1, 7, 5, 3, 2, 4, 4 };
    int[] taste = { 94, 818, 280, 278, 122, 864, 831, 131, 985, 750, 827, 857, 731, 237, 477, 247, 372, 682, 880, 37, 823, 150, 782, 223, 261, 861, 200, 165, -529, 993, 426, 970, 811, -540, 333, 381, 253, 563, 387, 0, 918, 859, 415, 735, 452, 795, -51, 820, 996, 234 };
    assertEquals(253060, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case74() {
    int[] type = { 7, 7, 8, 5, 4, 5, 6, 8, 4, 10, 2, 1, 8, 8, 5, 5, 7, 6, 3, 8, 9, 3, 8, 10, 8, 2, 8, 7, 5, 7, 2, 10, 1, 7, 7, 6, 7, 6, 2, 8, 6, 7, 10, 9, 3, 8, 8, 7, 7, 10 };
    int[] taste = { 195, 51, 941, 720, -576, 908, 868, -928, 755, 493, 132, 8, 781, 106, 514, -819, 351, 511, 217, 279, -725, -794, 222, -348, 825, 261, -546, 368, 715, 508, 914, 943, 209, -448, 491, 68, 872, 43, 418, 494, 80, 774, 908, 301, 807, 254, -13, 81, 578, 503 };
    assertEquals(194670, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case75() {
    int[] type = { 8, 10, 6, 2, 2, 1, 8, 2, 9, 6, 10, 3, 9, 4, 4, 3, 9, 10, 4, 3, 4, 5, 3, 1, 5, 7, 5, 3, 1, 7, 8, 8, 4, 6, 8, 6, 5, 6, 9, 7, 8, 4, 8, 3, 9, 2, 8, 8, 1, 3 };
    int[] taste = { 920, 878, 770, 222, 474, -432, 598, 179, 277, 962, -161, 393, 105, 564, 738, 800, 281, -669, 764, 649, 966, 250, 422, 236, 309, 406, 861, 524, 726, 372, -791, 459, 901, 200, 881, 773, 910, 282, 742, 62, 927, -408, -238, 548, 917, 10, 318, 952, 865, 735 };
    assertEquals(251280, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case76() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 0, 0, 0, -1 };
    assertEquals(0, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case77() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 0, 0, 0, 7 };
    assertEquals(28, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case78() {
    int[] type = { 3, 1, 1, 2, 1 };
    int[] taste = { -2, -1, 1, 2, 4 };
    assertEquals(15, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case79() {
    int[] type = { 1 };
    int[] taste = { 0 };
    assertEquals(0, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case80() {
    int[] type = { 1, 1 };
    int[] taste = { 0, 0 };
    assertEquals(0, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case81() {
    int[] type = { 2, 1 };
    int[] taste = { 0, 0 };
    assertEquals(0, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case82() {
    int[] type = { 100, 28, 48, 74, 93, 86, 75, 52, 76, 69, 12, 97, 39, 61, 56, 49, 67, 84, 83, 53, 83, 71, 47, 47, 94, 45, 59, 20, 50, 42, 61, 89, 18, 22, 88, 48, 66, 47, 5, 68, 57, 11, 47, 18, 60, 57, 29, 54, 77, 1 };
    int[] taste = { 23165, 1960, 2528, 14664, -13587, 2565, -1893, 20215, 20779, -14773, -12420, 29777, -6108, 1534, 1798, -11667, -21005, -13922, -7430, 16667, -22158, -23987, 689, -29838, 9846, 11351, -10303, 1864, -5054, 11735, 28721, -5635, 19998, 15790, -28108, -21451, -29223, 16207, 3029, 17441, 30369, -25975, 6029, 25197, -5158, 5301, 27631, 25257, -767, 11574 };
    assertEquals(11562656, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case83() {
    int[] type = { 100 };
    int[] taste = { 5 };
    assertEquals(5, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case84() {
    int[] type = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98 };
    int[] taste = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100000, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
    assertEquals(4897648, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case85() {
    int[] type = { 91, 92, 95, 94, 94, 91, 92, 94, 93, 91, 94, 99, 92, 98, 100, 100, 99, 94, 90, 98, 95, 98, 94, 97, 95, 92, 91, 93, 100, 100, 95, 98, 97, 92, 98, 100, 95 };
    int[] taste = { 139, -124, -65, 79, 33, -172, -131, -200, -85, 125, 158, 2, 38, -190, 153, 71, 48, 165, -135, 116, 0, 154, -182, 149, -52, -20, 174, -97, 82, 150, -54, -5, -33, 27, -15, -124, -52 };
    assertEquals(16430, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case86() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 500, -100, -1 };
    assertEquals(998, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case87() {
    int[] type = { 1, 1 };
    int[] taste = { 5, -5 };
    assertEquals(5, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case88() {
    int[] type = { 1, 1, 2 };
    int[] taste = { 10, -1, -2 };
    assertEquals(16, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case89() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 6, -3, -2, -1 };
    assertEquals(10, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case90() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 0, 0, 1 };
    assertEquals(3, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case91() {
    int[] type = { 1, 100 };
    int[] taste = { 5, 5 };
    assertEquals(20, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case92() {
    int[] type = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
    int[] taste = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
    assertEquals(63750, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case93() {
    int[] type = { 1, 2, 3, 4, 5 };
    int[] taste = { 3, 4, -2, -1, -1 };
    assertEquals(20, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case94() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 100, -10, -5 };
    assertEquals(190, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case95() {
    int[] type = { 1, 2 };
    int[] taste = { -1, 10000 };
    assertEquals(19998, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case96() {
    int[] type = { 15, 2, 6, 17, 19, 11, 1, 13, 12, 7, 5, 16, 8, 11, 17, 5, 20, 2, 13, 19, 6, 2, 15, 13, 10, 7, 12, 1, 20, 16, 14, 1, 9, 17, 2, 3, 15, 17, 7, 11, 2, 9, 19, 1, 12, 1, 6, 16, 7, 6 };
    int[] taste = { -2, -1, -8, 5, 4, -1, -2, 4, -2, 0, 3, -1, 6, 8, 8, -7, 7, 7, -4, -8, -1, 8, 9, 7, -9, -10, -5, -8, -2, -1, -5, 4, 6, 6, -5, 1, -5, 1, 1, 6, -8, -9, 3, -2, 4, 2, 6, -8, 4, -5 };
    assertEquals(1938, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case97() {
    int[] type = { 1, 2, 3, 4, 5, 6, 7, 6, 5, 3, 6, 7, 3, 7, 2, 62, 72, 1, 7, 1, 1, 2, 3, 4, 5, 6, 7, 6, 5, 3, 6, 7, 3, 7, 2, 62, 72, 1, 7, 1, 1, 2, 3, 4, 5, 6, 7, 6, 5, 3 };
    int[] taste = { 100000, -100000, 100000, 100000, -100000, 100000, 100000, -100000, 100000, 12451, 100000, -100000, 100000, 100000, -100000, 100000, 100000, -100000, 100000, 12451, 100000, -100000, 100000, 100000, -100000, 100000, 100000, -100000, 100000, 12451, 100000, -100000, 100000, 100000, -100000, 100000, 100000, -100000, 100000, 12451, 100000, -100000, 100000, 100000, -100000, 100000, 100000, -100000, 100000, 12451 };
    assertEquals(26660295, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case98() {
    int[] type = { 1, 1, 2 };
    int[] taste = { -1, 0, 2 };
    assertEquals(4, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case99() {
    int[] type = { 1, 2, 2, 3 };
    int[] taste = { 100, -1, -2, -3 };
    assertEquals(288, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case100() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 10, 10, 0, 0 };
    assertEquals(80, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case101() {
    int[] type = { 3, 2, 1 };
    int[] taste = { 100, -50, -49 };
    assertEquals(102, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case102() {
    int[] type = { 1, 2, 3, 1 };
    int[] taste = { 100, 100, -10, -1 };
    assertEquals(570, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case103() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 100, -1000, -1 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case104() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 100, -1, -2 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case105() {
    int[] type = { 85, 57, 2, 6, 43, 52, 50, 97, 99, 83, 9, 17, 45, 72, 20, 37, 69, 89, 35, 26, 49, 70, 86, 33, 68, 75, 8, 54, 87, 34, 99, 72, 98, 24, 44, 53, 52, 32, 100, 77, 24, 63, 82, 12, 85, 62, 44, 75, 2 };
    int[] taste = { 86120, -87611, -25982, 58763, -29584, -24644, -55920, -88200, -50938, -44532, -69857, -57885, -54760, 18280, 46472, -83209, 95069, -86489, -72642, 56720, 61134, 74353, 9763, -20688, -53908, -92939, 8589, 43242, 47357, 93917, -54322, 63051, 62630, -85180, -45252, 7200, 57790, 45784, 67437, 33396, -75116, 3754, 9022, 71228, 46237, 63899, -80748, 36551, -1431 };
    assertEquals(32833485, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case106() {
    int[] type = { 3, 2, 1, 1, 1, 1 };
    int[] taste = { -2, -2, -1, 10, 10, 10 };
    assertEquals(78, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case107() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { -1, -1, -1, 100 };
    assertEquals(388, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case108() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 10, -1, -2 };
    assertEquals(18, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case109() {
    int[] type = { 1, 1, 2 };
    int[] taste = { -2, -1, 100 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case110() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 50, -10, -5 };
    assertEquals(90, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case111() {
    int[] type = { 1, 2, 3 };
    int[] taste = { -1, 7, 4 };
    assertEquals(30, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case112() {
    int[] type = { 1, 1, 1, 2 };
    int[] taste = { 100, 100, -1, -2 };
    assertEquals(396, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case113() {
    int[] type = { 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5 };
    int[] taste = { 10, 9, 8, 7, -1, -2, -2, -2, -1, -2, -2, -2, -1, -1, -10, -10 };
    assertEquals(124, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case114() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 2, -1, 2 };
    assertEquals(9, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case115() {
    int[] type = { 1, 2, 3, 5, 5 };
    int[] taste = { 10, 10, 10, -2, -1 };
    assertEquals(116, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case116() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 100, -49, -48 };
    assertEquals(104, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case117() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 100, -100, -1 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case118() {
    int[] type = { 1, 1, 1, 1, 3 };
    int[] taste = { 0, -1, -2, -3, 10 };
    assertEquals(20, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case119() {
    int[] type = { 10, 10 };
    int[] taste = { -2, 100 };
    assertEquals(100, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case120() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 10, -4, -3, -3 };
    assertEquals(14, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case121() {
    int[] type = { 1, 2, 3, 3 };
    int[] taste = { 100, 1000, -2, -1 };
    assertEquals(3297, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case122() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 10, -1, -5 };
    assertEquals(18, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case123() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 10, 10, -6, -3 };
    assertEquals(51, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case124() {
    int[] type = { 99, 100, 100 };
    int[] taste = { 100, -1, -2 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case125() {
    int[] type = { 1, 100, 100 };
    int[] taste = { 1000, -2, -1 };
    assertEquals(1998, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case126() {
    int[] type = { 1, 2, 3, 3 };
    int[] taste = { 7, 4, -1, -9 };
    assertEquals(30, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case127() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 100, -200, -1, -200 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case128() {
    int[] type = { 1, 2 };
    int[] taste = { 10, -9 };
    assertEquals(10, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case129() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 2, 5, -5, -1 };
    assertEquals(18, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case130() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 5, -2, -1 };
    assertEquals(8, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case131() {
    int[] type = { 1, 2 };
    int[] taste = { -1, 100 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case132() {
    int[] type = { 1, 1, 2, 3 };
    int[] taste = { 20, 20, -15, -10 };
    assertEquals(60, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case133() {
    int[] type = { 1, 2, 3, 4, 5 };
    int[] taste = { 100, 100, 100, -70, -69 };
    assertEquals(924, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case134() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 0, 0, 1 };
    assertEquals(2, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case135() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 1000, -1, -1 };
    assertEquals(2994, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case136() {
    int[] type = { 1, 100, 100 };
    int[] taste = { 10, -1, -1 };
    assertEquals(18, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case137() {
    int[] type = { 13, 13, 52, 52, 52, 100, 100 };
    int[] taste = { 0, -1, 0, -1, 1, 0, 0 };
    assertEquals(3, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case138() {
    int[] type = { 100 };
    int[] taste = { 100 };
    assertEquals(100, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case139() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 10, 10, -6 };
    assertEquals(42, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case140() {
    int[] type = { 1, 1, 1, 1, 1, 1, 2 };
    int[] taste = { 2, 2, 2, 1, -1, -1, -1 };
    assertEquals(12, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case141() {
    int[] type = { 98, 97, 96, 17, 19, 11, 1, 13, 12, 7, 5, 16, 8, 11, 17, 5, 20, 2, 13, 19, 6, 2, 15, 13, 10, 7, 12, 1, 20, 16, 14, 1, 9, 17, 2, 3, 15, 17, 7, 11, 2, 9, 19, 1, 12, 1, 6, 16, 7, 6 };
    int[] taste = { -2, -1, -8, 5, 4, -1, -2, 4, -2, 0, 3, -1, 6, 8, 8, -7, 7, 7, -4, -8, -1, 8, 9, 7, -9, -10, -5, -8, -2, -1, -5, 4, 6, 6, -5, 1, -5, 1, 1, 6, -8, -9, 3, -2, 4, 2, 6, -8, 4, -5 };
    assertEquals(2109, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case142() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 1000, -10, -1 };
    assertEquals(1998, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case143() {
    int[] type = { 1, 2, 3, 4 };
    int[] taste = { 3, 3, -2, -1 };
    assertEquals(15, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case144() {
    int[] type = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] taste = { 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34 };
    assertEquals(1700, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case145() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 1000, -2, -1 };
    assertEquals(1998, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case146() {
    int[] type = { 1, 2, 2, 3 };
    int[] taste = { 100000, -1, -2, -2 };
    assertEquals(299991, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case147() {
    int[] type = { 1, 2, 3 };
    int[] taste = { -1, 100, -1 };
    assertEquals(294, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case148() {
    int[] type = { 1, 2, 3 };
    int[] taste = { 2, 3, -2 };
    assertEquals(10, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case149() {
    int[] type = { 6, 6, 8, 3, 9, 9, 2, 3, 10, 6, 8, 7, 1, 2, 1, 1 };
    int[] taste = { -82899, -77506, -72808, -63906, -50478, -35515, -2999, -1759, 6379, 24759, 27688, 52374, 53674, 65436, 74617, 83053 };
    assertEquals(2805648, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case150() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 100, -1, -1 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

  @Test
  public void case151() {
    int[] type = { 1, 2, 2 };
    int[] taste = { 100, -2, -1 };
    assertEquals(198, alienandhamburgers.getNumber(type, taste));
  }

}
