package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class GoodCompanyDivTwoTest {
    GoodCompanyDivTwo goodcompanydivtwo = new GoodCompanyDivTwo();

    @Test
    public void case1() {
        int[] superior = { -1, 0 };
        int[] workType = { 1, 2 };
        assertEquals(2, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case2() {
        int[] superior = { -1, 0 };
        int[] workType = { 1, 1 };
        assertEquals(1, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case3() {
        int[] superior = { -1, 0, 1, 1 };
        int[] workType = { 1, 4, 3, 2 };
        assertEquals(4, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case4() {
        int[] superior = { -1, 0, 1, 0, 0 };
        int[] workType = { 3, 3, 5, 2, 2 };
        assertEquals(4, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case5() {
        int[] superior = { -1, 0, 1, 1, 1, 0, 2, 5 };
        int[] workType = { 1, 1, 2, 3, 4, 5, 3, 3 };
        assertEquals(7, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case6() {
        int[] superior = { -1, 0, 1, 0, 0, 1, 3, 6, 0, 6, 7, 9, 0, 11, 5, 10, 1, 11, 13, 9 };
        int[] workType = { 17, 26, 37, 61, 22, 30, 44, 8, 64, 23, 52, 61, 67, 60, 35, 58, 55, 19, 22, 7 };
        assertEquals(20, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case7() {
        int[] superior = { -1, 0, 1, 1, 3, 1, 2, 3, 6, 8, 9, 6, 5, 12, 8, 14, 13, 12, 6, 8, 18, 19, 3, 10, 0, 23, 3, 4, 15, 4, 8, 8, 17, 26, 32, 27, 18, 18, 32, 13, 10, 28, 32, 27, 8, 11, 9, 32, 23, 48, 1, 42, 13, 46, 12, 49, 9, 17, 38, 17, 13, 43, 32, 15, 53, 45, 46, 56, 11, 51, 59, 68, 43, 33 };
        int[] workType = { 7, 3, 16, 2, 14, 1, 14, 6, 2, 5, 21, 14, 12, 3, 5, 9, 16, 3, 11, 11, 7, 2, 1, 6, 21, 17, 17, 20, 14, 18, 16, 11, 2, 5, 14, 5, 18, 1, 4, 18, 15, 3, 2, 18, 3, 11, 21, 13, 7, 6, 5, 3, 2, 1, 7, 16, 21, 17, 3, 19, 17, 2, 17, 13, 9, 12, 7, 16, 4, 14, 1, 3, 11, 14 };
        assertEquals(69, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case8() {
        int[] superior = { -1, 0, 0, 2, 3, 3, 5, 6, 5, 7, 7, 4, 9, 8, 6, 3, 3, 4, 2, 9, 18, 10, 4, 9, 2, 15, 20, 2, 12, 9, 7, 1, 7, 21, 16, 20, 22, 22, 10, 35, 17, 15, 13, 0, 32, 26, 30, 37, 5, 0, 33, 41, 14, 0, 29, 34, 3, 10, 25, 13, 33, 60, 36, 2, 63, 60, 2, 40, 20, 55, 7, 1, 34, 23, 33, 26, 21, 40, 56, 64, 54, 49, 45, 13, 45, 82, 14, 65, 13, 2, 20, 38, 51, 18, 1, 91, 42, 60, 40 };
        int[] workType = { 8, 7, 8, 9, 4, 9, 8, 4, 5, 8, 7, 9, 3, 6, 7, 9, 5, 1, 5, 3, 1, 7, 5, 8, 3, 5, 7, 2, 1, 4, 3, 3, 8, 9, 1, 3, 4, 2, 2, 5, 2, 8, 1, 9, 5, 5, 8, 1, 2, 4, 3, 4, 8, 1, 1, 1, 4, 8, 4, 9, 7, 3, 5, 9, 2, 6, 7, 9, 7, 2, 8, 4, 6, 9, 1, 2, 7, 7, 2, 1, 2, 2, 3, 4, 5, 1, 1, 1, 7, 7, 6, 7, 4, 4, 4, 3, 3, 9, 9 };
        assertEquals(86, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case9() {
        int[] superior = { -1, 0, 1, 1, 3, 3, 5, 3, 0, 2, 3, 0, 9, 0, 10, 9, 7, 9, 10, 3, 13, 1, 9, 1, 0, 5, 3, 4, 26, 19, 16, 3, 28, 17, 26, 19, 3, 15, 30, 2, 18, 19, 9, 30, 10 };
        int[] workType = { 18, 5, 22, 10, 54, 32, 44, 35, 32, 20, 49, 15, 25, 46, 34, 61, 20, 51, 58, 6, 60, 23, 19, 37, 30, 17, 30, 48, 27, 6, 52, 22, 45, 12, 21, 24, 5, 37, 10, 43, 20, 58, 22, 48, 19 };
        assertEquals(44, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case10() {
        int[] superior = { -1, 0, 0, 0, 1, 0, 1, 0, 4, 2, 7, 9, 7, 6, 0, 9, 2, 6, 12, 1, 14, 16, 19, 8, 21, 4, 21, 3, 14, 3, 21, 2, 3, 19, 23, 33, 23, 13, 0, 1, 27, 10, 8, 17, 15, 26, 15, 29, 21, 1, 29, 29, 5, 27, 53, 13, 47, 16, 44, 32, 41, 37, 61, 31, 32, 54, 65, 61, 22, 35, 69, 15, 10, 12, 44, 18, 59, 13, 69, 24, 16, 14, 22, 32, 51, 12, 77, 29, 20, 51, 30, 31, 80 };
        int[] workType = { 23, 30, 16, 40, 33, 55, 48, 17, 31, 32, 22, 29, 48, 15, 47, 20, 36, 23, 47, 1, 43, 17, 58, 40, 48, 25, 47, 55, 35, 46, 22, 13, 51, 35, 59, 10, 53, 2, 51, 11, 59, 56, 45, 29, 45, 43, 1, 53, 18, 1, 34, 37, 7, 22, 1, 16, 29, 13, 20, 43, 42, 44, 48, 45, 56, 52, 49, 10, 23, 59, 14, 26, 56, 52, 46, 38, 13, 46, 32, 11, 36, 32, 37, 22, 52, 56, 31, 28, 49, 55, 49, 41, 5 };
        assertEquals(90, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case11() {
        int[] superior = { -1, 0, 0, 0, 3, 0, 4, 2, 7, 8, 1, 0, 2, 2, 7, 4, 10, 7, 3, 9, 19, 20, 20, 7, 21, 11, 14, 15, 1, 18, 0, 19, 3, 13, 32, 19, 5, 19, 29, 21, 18, 19, 7, 3, 32, 20, 39, 4, 34, 33, 24, 45, 28, 37, 1, 22, 9, 29, 39, 48, 16, 53, 47, 51, 2, 16, 8, 4, 55, 48, 46, 19, 2, 1, 30, 40, 62, 12, 41, 37, 18, 46, 52, 31, 22, 66, 35, 51, 79 };
        int[] workType = { 51, 62, 32, 48, 57, 14, 33, 4, 32, 8, 72, 29, 50, 40, 64, 9, 9, 32, 39, 49, 48, 11, 57, 41, 67, 64, 49, 25, 45, 33, 41, 76, 76, 22, 23, 34, 3, 55, 17, 22, 42, 18, 54, 48, 55, 56, 37, 28, 36, 30, 66, 65, 49, 59, 18, 21, 53, 12, 45, 50, 2, 7, 74, 65, 63, 50, 75, 39, 43, 74, 57, 6, 56, 48, 44, 44, 10, 23, 72, 59, 23, 74, 55, 60, 52, 14, 20, 67, 6 };
        assertEquals(85, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case12() {
        int[] superior = { -1, 0, 0, 2, 3, 2, 0, 2, 7, 1, 5, 7, 11, 10, 5, 9, 10, 4, 6, 18, 0, 20, 9, 13, 13, 10, 14, 13, 0, 7, 1, 15, 4, 29, 3, 24, 33, 33, 31, 29, 38, 14, 8, 18, 18, 6, 6, 38, 33, 46, 7, 8, 21, 39, 41, 9, 36, 28, 51, 8, 27, 44, 51, 45, 51, 55, 37, 26, 11, 48, 42, 38, 30, 24, 47, 19, 67, 49, 43, 45, 10, 53, 22, 4, 37, 41, 38, 66, 47, 42, 81, 37, 47 };
        int[] workType = { 3, 34, 21, 29, 27, 1, 19, 12, 28, 4, 30, 7, 25, 3, 8, 5, 33, 18, 36, 7, 20, 21, 2, 33, 9, 32, 24, 11, 24, 2, 17, 9, 7, 8, 8, 21, 8, 7, 30, 16, 25, 9, 33, 36, 36, 4, 5, 29, 4, 11, 35, 16, 28, 7, 31, 8, 30, 25, 14, 27, 18, 16, 9, 32, 12, 33, 33, 7, 31, 13, 15, 16, 32, 28, 13, 12, 3, 8, 6, 17, 31, 3, 14, 8, 20, 24, 10, 26, 20, 3, 35, 2, 15 };
        assertEquals(91, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case13() {
        int[] superior = { -1, 0, 1, 0, 0, 4, 4, 3, 5, 1, 1, 3, 7, 1, 7, 13, 13, 5, 16, 4, 17, 17, 8, 4, 6, 10, 10, 13, 1, 28, 26, 15, 19, 8, 27, 15, 22, 33, 33, 11, 21, 22, 34, 37, 37, 39, 13, 34, 33, 23, 31, 3, 18, 10, 6, 17, 32, 48, 45, 48, 15, 58, 22, 3, 61, 46, 24, 27 };
        int[] workType = { 31, 44, 15, 2, 53, 42, 14, 51, 52, 36, 64, 63, 62, 57, 3, 10, 55, 57, 49, 31, 25, 50, 43, 62, 37, 1, 9, 21, 61, 39, 12, 41, 8, 22, 12, 28, 49, 56, 14, 51, 49, 24, 51, 19, 19, 31, 55, 1, 35, 32, 50, 54, 4, 6, 25, 38, 65, 58, 15, 1, 28, 61, 32, 52, 60, 34, 31, 4 };
        assertEquals(65, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case14() {
        int[] superior = { -1, 0, 1, 0, 0, 0, 3, 6, 5, 5, 3, 3, 3, 7, 7, 6, 0, 5, 14, 11 };
        int[] workType = { 57, 64, 12, 2, 42, 3, 60, 51, 29, 39, 45, 32, 39, 25, 11, 70, 56, 56, 4, 31 };
        assertEquals(20, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case15() {
        int[] superior = { -1, 0, 0, 2, 2, 4, 3, 2, 2, 6, 1, 2, 6, 4, 1, 10, 7, 0, 15, 3, 11, 11, 1, 22, 19, 6, 4, 19, 7, 27, 18, 16, 24, 11, 5, 10, 26, 16, 7, 2, 20, 26, 20, 21, 33, 11, 12, 25, 24, 8, 11 };
        int[] workType = { 7, 11, 6, 10, 5, 11, 1, 2, 5, 3, 11, 13, 2, 10, 2, 10, 3, 10, 2, 8, 4, 4, 6, 2, 7, 11, 3, 6, 6, 10, 10, 12, 12, 7, 10, 6, 6, 10, 7, 10, 10, 9, 6, 5, 6, 9, 7, 3, 12, 10, 4 };
        assertEquals(47, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case16() {
        int[] superior = { -1, 0, 1, 0, 3, 1, 5, 5, 2, 8, 6, 10, 0, 6, 0, 8, 2, 10, 5, 0, 12, 10 };
        int[] workType = { 46, 33, 21, 17, 24, 40, 13, 52, 4, 1, 7, 28, 20, 32, 39, 10, 26, 36, 5, 4, 49, 20 };
        assertEquals(22, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case17() {
        int[] superior = { -1, 0, 1, 0, 0, 4, 4, 2, 4, 7, 6, 0, 4, 3, 13, 5, 3, 1, 0, 10, 16, 8, 4, 17, 8, 16, 1, 1, 0, 2, 28, 19, 13, 14, 15, 21, 15, 31, 7, 1, 3, 21, 23, 28, 8, 43, 39, 28, 44, 18, 1, 14, 40, 49, 18, 7, 9, 6, 42, 57, 29, 7, 17, 26, 30, 15, 42, 49, 0, 55, 37, 67, 9, 60, 14, 39, 16, 75, 40, 51, 78, 54, 1, 12, 17, 19, 76, 57, 30 };
        int[] workType = { 1, 1, 3, 5, 6, 6, 3, 5, 5, 3, 2, 5, 2, 6, 3, 7, 1, 3, 7, 7, 4, 2, 1, 7, 3, 2, 5, 5, 4, 3, 4, 1, 1, 1, 5, 2, 3, 1, 3, 1, 5, 6, 2, 7, 5, 3, 6, 3, 1, 5, 2, 1, 5, 2, 4, 3, 3, 1, 6, 3, 3, 4, 5, 5, 7, 1, 3, 5, 1, 5, 5, 4, 7, 2, 7, 2, 4, 1, 4, 2, 6, 6, 1, 4, 5, 1, 4, 5, 7 };
        assertEquals(68, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case18() {
        int[] superior = { -1, 0, 1, 0, 3, 4, 3, 4, 2, 8, 6, 7, 0, 6, 3, 3, 2, 2, 3, 5, 8, 13, 0, 10, 15, 16, 5, 10, 11, 7, 18, 24, 17, 13, 21, 18, 12, 25, 1, 17, 16, 16, 36, 30, 20, 10, 32, 28, 28, 9, 28, 27, 11, 6, 44, 39, 47, 26, 4, 50, 57, 16, 54, 62, 22, 62, 48, 54, 50, 20, 62, 38, 4, 17, 72, 46, 2, 61, 64, 2, 63, 67, 79, 18 };
        int[] workType = { 1, 1, 1, 1, 1, 2, 3, 1, 1, 3, 1, 1, 2, 1, 3, 3, 1, 2, 1, 1, 3, 1, 3, 3, 1, 2, 1, 2, 1, 3, 3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 1, 2, 2, 1, 1, 1, 3, 3, 1, 1, 2, 1, 2, 2, 1, 3, 3, 1, 2, 2, 3, 3, 3, 2, 1, 2, 2, 2, 2, 3, 1, 1, 1, 2, 2, 1, 3, 1, 2, 2, 1, 1, 1, 1 };
        assertEquals(59, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case19() {
        int[] superior = { -1, 0, 0, 2, 2, 4, 1, 1, 6, 7, 1, 8, 0, 10, 10, 10, 13, 7, 16, 10, 12, 6, 7, 20, 19, 1, 15, 26, 4, 11, 26, 10, 12, 29, 29, 23, 21, 13, 34, 16, 36, 35, 5, 11, 33, 8, 9, 45, 45, 5, 12, 48, 37, 33, 34, 9, 13, 43, 39, 58, 52, 6, 53, 29, 46, 37, 39, 64 };
        int[] workType = { 24, 43, 23, 15, 9, 20, 35, 2, 8, 26, 7, 9, 22, 46, 24, 32, 22, 55, 46, 30, 45, 16, 3, 37, 45, 40, 19, 48, 20, 45, 26, 43, 33, 25, 23, 10, 54, 33, 46, 9, 8, 21, 50, 39, 55, 50, 24, 17, 53, 46, 45, 18, 18, 20, 21, 46, 48, 28, 45, 31, 10, 23, 35, 50, 49, 15, 13, 9 };
        assertEquals(66, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case20() {
        int[] superior = { -1, 0, 1, 2, 0, 3, 0, 1, 5, 8, 6, 1, 6, 4, 12, 10, 13, 8, 7, 5, 19, 20, 19, 19, 20, 3, 4, 16, 26, 6, 10, 30, 11, 0, 18, 10, 16, 21, 24, 33, 29, 24, 8, 37, 41, 21, 43, 19, 8, 18, 46, 15, 36, 40, 48, 25, 0, 44, 57, 22, 52, 50, 56, 25, 44, 40, 12, 31 };
        int[] workType = { 72, 12, 72, 55, 49, 32, 66, 45, 71, 41, 21, 76, 66, 31, 7, 18, 8, 53, 22, 57, 61, 71, 73, 39, 15, 66, 40, 69, 1, 40, 47, 66, 5, 36, 63, 41, 80, 76, 21, 16, 56, 21, 63, 2, 49, 26, 60, 48, 25, 48, 20, 51, 33, 52, 56, 21, 45, 54, 75, 65, 62, 74, 65, 8, 78, 60, 38, 22 };
        assertEquals(66, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case21() {
        int[] superior = { -1, 0, 1, 1, 1, 1, 2, 3, 3, 2 };
        int[] workType = { 24, 10, 14, 39, 14, 5, 17, 6, 41, 45 };
        assertEquals(9, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case22() {
        int[] superior = { -1, 0, 1, 1, 2, 4, 4, 5, 6, 4, 2, 0, 1, 3, 5, 13, 4, 5, 12, 4, 18, 17, 21, 22, 23, 17, 13, 26, 5, 18, 15, 29, 13, 18, 20, 22, 29, 12, 20, 1, 25, 21, 18, 22, 36, 19, 17, 18, 0, 31, 9, 17, 44, 31, 45, 13, 29, 20, 16, 3, 59, 33, 8, 0, 62, 64, 13, 14, 44, 28, 20, 38, 36, 23, 6, 23, 44, 73, 19, 68, 71, 59, 79, 80, 70, 5, 20, 33, 40, 18, 63, 0, 40, 67, 58 };
        int[] workType = { 17, 31, 12, 21, 22, 28, 26, 30, 15, 27, 18, 27, 18, 20, 13, 21, 1, 25, 26, 33, 3, 32, 11, 9, 33, 26, 27, 30, 4, 12, 27, 16, 8, 29, 20, 31, 8, 2, 26, 13, 23, 18, 21, 22, 28, 33, 5, 21, 25, 17, 22, 8, 16, 29, 29, 26, 13, 25, 12, 7, 2, 7, 7, 20, 19, 4, 4, 32, 16, 28, 5, 28, 31, 30, 33, 32, 9, 3, 27, 26, 13, 19, 30, 14, 2, 16, 10, 7, 30, 17, 25, 23, 28, 7, 12 };
        assertEquals(90, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case23() {
        int[] superior = { -1, 0, 1, 2, 3, 4, 3, 4, 4, 3, 5, 3, 1, 6, 13, 2, 13, 16, 3, 16, 3, 16, 5, 18, 13, 2, 0, 6, 23, 15, 17, 19, 29, 12, 6, 9, 13, 30, 28, 26, 16, 6, 39, 9, 18, 17, 38, 40, 31, 1, 22, 49, 29, 40, 52, 13, 8, 3, 47, 19, 26, 5, 11, 50, 11, 7, 28, 1, 49, 13, 12, 61, 35, 0, 37, 36, 43, 62, 2, 48 };
        int[] workType = { 44, 14, 57, 53, 42, 26, 49, 62, 52, 5, 32, 64, 19, 6, 31, 28, 44, 48, 5, 1, 37, 34, 17, 58, 24, 12, 8, 54, 58, 56, 8, 21, 11, 52, 61, 62, 35, 1, 59, 54, 30, 17, 34, 24, 38, 44, 3, 51, 47, 41, 16, 12, 4, 38, 22, 46, 64, 5, 57, 4, 65, 60, 19, 31, 32, 44, 16, 54, 18, 15, 16, 9, 57, 43, 7, 54, 15, 58, 57, 43 };
        assertEquals(77, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case24() {
        int[] superior = { -1, 0, 0, 0, 2, 2, 2, 5, 1, 2, 7, 2, 4, 3, 8, 7, 14, 7, 10, 11, 1, 5, 21, 9, 21, 18, 15, 13, 1, 7, 3, 2, 22, 17, 5, 14, 24, 10, 32, 29, 26, 17, 18, 41, 35, 9, 19, 16, 30, 8, 2, 26, 34, 30, 14, 29, 46, 7, 24, 52, 16, 19, 34, 37, 7, 36, 37, 19, 7, 1, 44, 19, 60, 39, 6, 26, 33, 18, 7 };
        int[] workType = { 44, 23, 28, 46, 35, 20, 25, 14, 8, 63, 11, 60, 63, 25, 66, 31, 42, 50, 66, 39, 25, 19, 31, 11, 66, 40, 33, 33, 18, 5, 22, 50, 38, 46, 60, 55, 50, 55, 43, 49, 25, 45, 68, 9, 26, 16, 14, 14, 44, 1, 20, 14, 65, 36, 58, 65, 46, 36, 26, 14, 51, 37, 57, 13, 53, 5, 22, 49, 33, 15, 2, 68, 65, 23, 5, 41, 30, 57, 21 };
        assertEquals(78, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case25() {
        int[] superior = { -1, 0, 0, 1, 2, 2, 3, 3, 1, 5, 0, 2, 3, 0, 3, 0, 10, 9, 12, 10, 1, 0, 12, 7, 10, 14, 23, 5, 26, 24, 22, 19, 19, 1, 6, 30, 13, 30, 4, 21, 25, 15, 12, 40, 17, 11, 42, 26, 36, 39, 28, 16, 29, 7, 12, 27, 17, 32, 57, 51, 46, 34, 45, 41, 33, 36, 62, 6, 35, 14, 12, 65, 64, 60, 41, 10, 36, 65, 30, 2, 47, 3, 48, 43, 63, 27, 61, 13, 3, 14 };
        int[] workType = { 25, 50, 51, 12, 44, 17, 37, 68, 24, 67, 13, 37, 37, 42, 68, 5, 52, 13, 21, 2, 29, 34, 41, 27, 42, 33, 69, 29, 3, 7, 33, 15, 1, 50, 60, 8, 28, 73, 30, 72, 44, 66, 76, 50, 71, 74, 62, 28, 23, 28, 13, 24, 51, 58, 32, 29, 34, 8, 12, 1, 16, 3, 11, 54, 68, 49, 53, 62, 18, 6, 32, 12, 62, 43, 66, 71, 41, 64, 48, 73, 9, 15, 30, 48, 51, 2, 8, 16, 40, 61 };
        assertEquals(85, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case26() {
        int[] superior = { -1, 0, 0, 1, 1, 1, 4, 3, 6, 7, 8 };
        int[] workType = { 45, 7, 37, 50, 78, 77, 62, 38, 55, 68, 47 };
        assertEquals(11, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case27() {
        int[] superior = { -1, 0, 0, 0, 0, 0, 5, 2, 6, 3, 0, 4, 11, 9, 9, 13, 5, 13, 6, 5, 4, 9, 15, 0, 5, 20, 8, 2, 26, 7, 4, 13, 4 };
        int[] workType = { 24, 39, 59, 32, 64, 38, 62, 15, 2, 71, 70, 35, 14, 35, 64, 27, 52, 22, 1, 63, 23, 65, 60, 10, 63, 63, 31, 68, 27, 4, 23, 20, 44 };
        assertEquals(31, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case28() {
        int[] superior = { -1, 0, 1, 2, 1, 4, 1, 0, 1, 5, 8 };
        int[] workType = { 11, 9, 6, 17, 53, 40, 13, 42, 35, 7, 5 };
        assertEquals(11, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case29() {
        int[] superior = { -1, 0, 1, 2, 0, 4, 1, 1, 2, 7, 7, 8, 7, 11, 6, 10, 2, 8, 9, 5, 2, 17, 16, 12, 23, 1, 10, 15, 5, 28, 1, 28, 25, 5, 30, 23, 19, 35, 23, 20, 3, 1 };
        int[] workType = { 9, 30, 12, 1, 29, 1, 18, 12, 17, 23, 8, 32, 29, 32, 17, 7, 27, 25, 21, 25, 5, 5, 18, 33, 1, 29, 1, 24, 15, 3, 7, 31, 3, 6, 12, 31, 7, 4, 3, 33, 5, 27 };
        assertEquals(40, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case30() {
        int[] superior = { -1, 0, 1, 1, 1, 4, 4, 0, 3, 7, 2, 6, 9, 8, 13, 3, 11, 6, 8, 4, 9, 16, 19, 20, 21, 2, 6, 17, 13, 17, 22, 13, 3, 32, 20, 6, 0, 18, 18, 19, 38, 9, 28, 12, 13, 35, 18, 40, 16, 28, 13, 0, 27, 34, 0, 8, 40, 6, 39, 58, 26, 37, 59, 62, 41, 34, 39 };
        int[] workType = { 3, 3, 17, 37, 28, 12, 32, 44, 7, 2, 22, 14, 24, 56, 50, 53, 24, 2, 9, 9, 16, 50, 53, 19, 42, 15, 42, 2, 12, 18, 33, 29, 40, 14, 39, 15, 38, 33, 1, 33, 41, 36, 6, 51, 11, 22, 18, 39, 42, 18, 43, 42, 47, 27, 41, 54, 21, 26, 29, 51, 14, 14, 26, 7, 58, 47, 35 };
        assertEquals(65, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case31() {
        int[] superior = { -1 };
        int[] workType = { 78 };
        assertEquals(1, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case32() {
        int[] superior = { -1, 0, 0, 1, 1, 3, 0, 2, 0, 5, 2, 5, 5, 6, 1, 2, 11, 12, 10, 4, 7, 16, 10, 9, 12, 18, 15, 23, 20, 7, 4 };
        int[] workType = { 4, 6, 4, 7, 7, 1, 2, 8, 1, 7, 2, 4, 2, 9, 11, 1, 10, 11, 4, 6, 11, 7, 2, 8, 9, 9, 10, 10, 9, 8, 8 };
        assertEquals(27, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case33() {
        int[] superior = { -1, 0, 1, 2, 1, 3, 2, 3, 1, 7, 3, 10, 6, 10, 2, 5, 14, 4, 0, 8, 12, 7, 8, 1, 7, 21, 12, 10, 15, 7, 14, 23, 8, 3, 27, 22, 1, 35, 18, 28, 6, 2, 12, 18, 32, 14, 0, 12, 28, 20, 25, 47, 35, 16, 39, 45, 9, 34, 28, 37, 41, 22, 57, 18, 48, 10, 57, 63, 8, 11, 29, 11, 63, 44, 3 };
        int[] workType = { 17, 5, 3, 2, 4, 15, 3, 12, 12, 14, 1, 7, 7, 2, 3, 9, 18, 15, 19, 8, 16, 1, 1, 13, 6, 4, 7, 2, 10, 13, 1, 1, 6, 19, 16, 12, 12, 13, 15, 2, 2, 6, 12, 6, 16, 10, 4, 18, 14, 18, 9, 13, 4, 2, 10, 10, 17, 17, 4, 17, 12, 4, 17, 1, 19, 16, 15, 12, 3, 6, 18, 8, 11, 1, 19 };
        assertEquals(68, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case34() {
        int[] superior = { -1, 0, 0, 0, 1, 4, 5, 3 };
        int[] workType = { 21, 25, 7, 26, 28, 21, 32, 12 };
        assertEquals(8, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case35() {
        int[] superior = { -1, 0, 0, 1, 0, 4, 0, 1, 6, 5, 9, 4, 5, 10, 9, 2, 14, 10, 16, 8, 8, 7, 6, 11, 11, 21, 11, 23, 9, 20, 2, 28, 1, 4, 1, 7, 13, 30, 23, 21, 20, 27, 41, 14, 29, 24, 28, 37, 11, 1, 27, 42, 25, 23, 3, 7, 32, 23, 29, 1, 6 };
        int[] workType = { 18, 59, 22, 1, 7, 39, 13, 11, 51, 17, 25, 63, 29, 57, 11, 16, 40, 48, 8, 27, 36, 27, 15, 4, 15, 47, 28, 7, 28, 7, 50, 6, 52, 25, 24, 60, 47, 49, 34, 17, 4, 57, 25, 52, 42, 48, 51, 28, 56, 48, 26, 42, 53, 8, 2, 50, 58, 17, 30, 63, 12 };
        assertEquals(61, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case36() {
        int[] superior = { -1, 0, 0, 1, 3, 0, 4, 3, 5, 4, 1, 9, 0, 5, 13, 1, 1, 13, 5, 2, 6, 14, 18, 16, 2, 17, 24, 16, 6, 20, 14, 12, 1, 10, 24, 20, 14, 20, 11, 34, 28, 32, 8, 25, 39, 36, 9, 29, 36, 44, 8, 17, 33, 3, 42, 52, 30, 25, 43, 26, 19, 30, 46, 39, 3, 51, 1, 51, 16, 2, 55, 56, 16, 4, 7, 56, 15, 30, 56, 34, 38, 52, 42 };
        int[] workType = { 46, 63, 80, 14, 20, 16, 83, 34, 59, 57, 56, 15, 63, 29, 59, 76, 91, 56, 69, 44, 9, 49, 76, 74, 24, 84, 79, 69, 49, 84, 2, 58, 22, 70, 85, 10, 77, 95, 86, 56, 70, 52, 15, 55, 90, 36, 34, 77, 90, 35, 27, 75, 13, 19, 54, 64, 5, 17, 16, 66, 2, 84, 82, 70, 18, 71, 61, 60, 28, 28, 46, 3, 5, 94, 76, 1, 35, 49, 21, 20, 73, 25, 9 };
        assertEquals(82, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case37() {
        int[] superior = { -1, 0, 0, 2, 2, 0, 5, 3, 4, 8, 3, 0, 5, 1, 5, 11, 11, 6, 0, 15, 15, 14, 11, 4, 3, 12, 14, 22, 24, 15, 7, 30, 26, 2, 8, 2, 26, 22, 29, 4, 22, 16, 7, 0, 31, 44, 41, 15, 35, 45, 46, 45, 48, 9, 39, 37, 1, 2, 56, 20, 48, 55, 24, 29, 52, 55, 35, 12, 3, 30, 47, 27, 51, 66, 64, 62, 44, 31, 37, 6, 73, 58, 15, 14, 32, 76, 32, 85 };
        int[] workType = { 60, 5, 53, 64, 54, 57, 47, 4, 4, 80, 65, 2, 26, 84, 27, 58, 80, 67, 8, 45, 37, 81, 7, 69, 23, 19, 31, 34, 59, 61, 34, 36, 42, 86, 80, 33, 28, 36, 17, 72, 13, 33, 84, 33, 8, 35, 69, 84, 82, 35, 19, 32, 56, 70, 30, 65, 67, 50, 23, 28, 67, 10, 4, 61, 78, 43, 48, 30, 7, 79, 80, 42, 24, 55, 82, 73, 34, 64, 15, 64, 6, 29, 82, 68, 64, 10, 24, 78 };
        assertEquals(85, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case38() {
        int[] superior = { -1, 0, 0, 0, 0, 3, 5, 1, 1, 5, 7, 3, 6, 5, 8, 7, 9, 15, 12, 13, 19, 3 };
        int[] workType = { 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2 };
        assertEquals(13, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case39() {
        int[] superior = { -1, 0, 1, 1, 0, 4, 3, 6, 6, 6, 3, 0, 11, 10, 13, 5, 13, 14, 12, 9, 12, 10, 6, 11, 0, 24, 23, 6, 20, 12, 12, 20, 4, 29, 24, 19, 11, 24, 15, 25, 22, 25, 40, 34, 25, 3, 6, 21, 3, 45, 18, 7, 7, 0, 0, 35, 6, 3, 51, 13, 58, 25, 21, 20, 29, 39, 50, 18, 51, 47, 27, 55, 28, 49, 34, 27, 46, 5, 46, 12, 25, 8, 53 };
        int[] workType = { 19, 7, 18, 7, 9, 11, 23, 12, 24, 14, 2, 2, 19, 13, 4, 21, 14, 17, 25, 24, 25, 18, 3, 9, 8, 5, 20, 7, 23, 10, 11, 18, 2, 25, 1, 17, 13, 24, 8, 5, 19, 2, 13, 9, 9, 15, 2, 14, 8, 7, 18, 21, 1, 13, 25, 3, 8, 5, 14, 4, 7, 5, 14, 22, 1, 16, 25, 13, 6, 7, 10, 24, 5, 25, 15, 1, 11, 9, 18, 19, 18, 13, 23 };
        assertEquals(78, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case40() {
        int[] superior = { -1, 0, 1, 0, 3, 4, 4, 2, 6, 2, 3, 6, 8, 12, 5, 4, 15, 7, 5, 2, 12, 13, 5, 16, 0, 3, 5 };
        int[] workType = { 2, 66, 9, 12, 49, 67, 36, 87, 62, 7, 8, 46, 8, 11, 15, 17, 20, 33, 56, 27, 74, 12, 7, 88, 48, 57, 42 };
        assertEquals(27, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case41() {
        int[] superior = { -1, 0, 0, 1, 2, 4, 0, 3, 1, 1, 4, 6, 7, 4, 6, 0, 3, 2, 1, 11, 18, 15, 17, 8, 2, 8, 16, 5, 17, 7, 8, 20, 8, 1, 25, 5, 2, 0, 24, 33, 33, 16, 2, 6, 16, 2, 24, 34, 1, 5, 4, 49, 5, 49, 3, 22, 12, 3, 50, 0, 7, 9, 57, 40, 45, 0, 42, 37, 3, 45, 43, 14, 16, 38, 18, 53, 51, 19, 60, 9, 24, 66, 36, 56, 30, 62, 84, 42 };
        int[] workType = { 3, 23, 3, 4, 1, 13, 15, 18, 20, 13, 5, 10, 8, 26, 17, 26, 27, 2, 20, 9, 27, 20, 8, 17, 15, 12, 23, 12, 14, 5, 4, 3, 15, 24, 13, 5, 22, 15, 2, 6, 21, 23, 18, 13, 17, 7, 13, 3, 12, 16, 15, 24, 23, 16, 8, 14, 24, 8, 23, 27, 26, 27, 18, 11, 20, 10, 8, 25, 22, 5, 26, 23, 19, 9, 25, 26, 14, 22, 20, 9, 2, 17, 2, 23, 1, 13, 24, 25 };
        assertEquals(82, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case42() {
        int[] superior = { -1, 0, 1, 1, 3, 0, 0, 3, 0, 7, 5, 5, 6, 12, 12, 9, 4, 13, 16, 15, 4, 19, 17, 11, 22, 17, 9, 3, 18, 22, 5, 17, 1, 26, 8, 8, 23, 19, 10, 23, 28, 6, 9, 2, 27, 35, 17, 30, 34, 44, 39, 43, 47, 1, 38, 47, 2, 23, 2, 35, 4, 50, 42, 49, 63, 56, 49, 37, 32, 67, 12, 26, 58, 24, 65, 72, 43, 69, 26, 6, 51, 9, 25, 14 };
        int[] workType = { 40, 57, 4, 20, 59, 10, 8, 15, 28, 6, 32, 30, 21, 47, 47, 56, 20, 17, 49, 58, 47, 22, 11, 53, 67, 22, 62, 59, 50, 59, 45, 12, 21, 55, 22, 65, 54, 4, 13, 16, 4, 4, 60, 38, 15, 60, 18, 65, 40, 44, 61, 16, 38, 9, 41, 21, 38, 55, 59, 47, 60, 37, 24, 27, 33, 6, 63, 57, 33, 58, 29, 48, 43, 51, 12, 36, 38, 25, 66, 40, 9, 9, 52, 47 };
        assertEquals(79, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case43() {
        int[] superior = { -1, 0, 1, 2, 2, 0, 0, 5, 1, 6, 9, 3, 1, 0, 0, 0, 14, 1, 8 };
        int[] workType = { 16, 27, 1, 37, 17, 58, 36, 69, 67, 67, 44, 25, 67, 62, 4, 39, 28, 30, 64 };
        assertEquals(18, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case44() {
        int[] superior = { -1, 0, 1, 2, 3, 0, 3, 0, 4, 7, 9, 5, 10, 11, 4, 13, 13, 10, 6, 18, 11, 13, 7 };
        int[] workType = { 10, 18, 34, 70, 78, 10, 44, 67, 21, 44, 36, 17, 31, 52, 25, 30, 2, 68, 34, 11, 7, 62, 74 };
        assertEquals(22, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case45() {
        int[] superior = { -1, 0, 0, 0, 3, 0, 5, 5, 4, 5, 0, 3, 3, 12, 11, 8, 10, 9, 6, 2, 0, 14, 20, 22, 8, 3, 6, 15, 6, 14, 13, 10, 25, 30, 28, 31, 13, 3, 37, 32, 9, 20, 41, 23, 32, 32, 3, 18, 28, 9, 45, 30, 3, 24 };
        int[] workType = { 9, 9, 12, 15, 13, 14, 15, 5, 6, 7, 8, 2, 16, 10, 3, 5, 8, 16, 12, 10, 14, 17, 4, 14, 10, 13, 7, 2, 15, 13, 16, 4, 8, 4, 12, 18, 15, 11, 18, 4, 6, 12, 5, 4, 10, 10, 15, 14, 15, 3, 17, 2, 19, 14 };
        assertEquals(48, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case46() {
        int[] superior = { -1, 0, 0, 2, 3, 4, 0, 0, 3, 6, 2, 7, 8, 8, 3, 1, 11, 15, 5, 14, 2, 12, 0, 22, 10, 2, 9, 4, 26, 21, 27, 14, 10, 24, 2, 0, 15, 34, 9, 20, 15, 15, 8, 30, 7, 29, 8, 9, 35, 34, 45, 45 };
        int[] workType = { 74, 71, 24, 34, 66, 74, 16, 29, 25, 9, 60, 7, 37, 13, 16, 44, 57, 62, 21, 30, 13, 21, 26, 45, 36, 72, 10, 61, 51, 41, 53, 12, 40, 1, 65, 37, 49, 34, 56, 70, 62, 51, 60, 38, 55, 60, 73, 4, 54, 1, 52, 69 };
        assertEquals(51, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case47() {
        int[] superior = { -1, 0, 1, 1, 0, 0, 1, 2, 0, 4, 5, 4, 4, 1, 8, 8, 2, 6, 13, 4, 7, 8, 2 };
        int[] workType = { 16, 15, 79, 39, 73, 81, 94, 60, 65, 37, 45, 70, 26, 18, 63, 80, 7, 19, 11, 29, 8, 50, 6 };
        assertEquals(23, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case48() {
        int[] superior = { -1, 0, 0, 1, 0, 1, 2, 2, 6, 8, 9, 7, 11, 5, 11, 12, 7, 6, 9, 5, 16, 4, 9, 11, 1, 11, 17, 9, 6, 13, 29, 19, 17, 2, 7, 34, 25, 16, 31, 6, 8, 3 };
        int[] workType = { 9, 14, 9, 10, 8, 6, 30, 22, 16, 22, 22, 1, 13, 31, 27, 17, 22, 10, 31, 17, 13, 32, 12, 18, 25, 36, 34, 11, 12, 15, 36, 15, 29, 1, 5, 29, 37, 6, 15, 34, 28, 12 };
        assertEquals(38, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case49() {
        int[] superior = { -1, 0, 1, 1, 0, 0, 1, 1, 3, 5, 9, 1, 7, 5, 13, 13, 11, 4, 6, 8, 13, 19, 3, 21, 12, 17, 11, 25, 0, 9, 1, 14, 22, 17, 25, 5, 4, 3, 23, 7, 10, 33, 17, 42, 10, 26, 7, 2, 9, 44, 6, 40, 42, 38, 51, 16, 42, 36, 32, 36, 21, 16, 53, 56, 40, 26, 34, 40, 43, 46, 11, 50, 2, 30, 45, 34, 46 };
        int[] workType = { 36, 8, 15, 66, 38, 7, 14, 59, 34, 19, 59, 50, 65, 18, 17, 20, 28, 56, 60, 62, 22, 15, 35, 35, 32, 32, 27, 43, 2, 45, 38, 45, 12, 44, 53, 29, 8, 32, 74, 71, 13, 30, 9, 30, 21, 31, 53, 56, 27, 8, 65, 72, 60, 38, 44, 70, 51, 48, 14, 72, 10, 41, 4, 73, 63, 10, 25, 58, 7, 52, 37, 50, 70, 61, 38, 30, 7 };
        assertEquals(77, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case50() {
        int[] superior = { -1, 0, 0, 2, 0, 0, 5, 2, 3, 8, 4, 10, 11, 2, 2, 1, 1, 1, 1, 4, 6, 6, 3, 9, 22, 5, 5, 15, 15, 20, 1, 26, 15, 14, 22, 24, 18, 27, 10, 33, 5, 35, 22, 42, 21, 41, 40, 36, 36, 22, 1, 38, 21, 9, 47, 7, 15, 32, 16, 48, 44, 12, 19, 58, 58, 25, 6, 2, 1, 36, 44, 52, 70, 42, 4, 56, 7, 29, 31, 71, 72 };
        int[] workType = { 36, 25, 1, 41, 23, 4, 55, 21, 41, 19, 49, 36, 19, 8, 39, 18, 9, 35, 20, 7, 36, 42, 46, 13, 14, 26, 12, 22, 47, 16, 53, 52, 35, 44, 18, 30, 40, 56, 19, 16, 35, 3, 28, 58, 56, 57, 51, 31, 5, 47, 12, 22, 33, 30, 5, 6, 6, 31, 39, 46, 26, 15, 15, 58, 5, 24, 14, 53, 2, 54, 47, 19, 32, 46, 11, 1, 35, 45, 38, 36, 42 };
        assertEquals(80, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case51() {
        int[] superior = { -1, 0, 1, 2, 1, 2, 5, 3, 4, 6, 1, 6, 8, 5, 11, 6, 14, 4, 0, 1, 18, 11, 16, 13, 12, 13, 9, 20, 25, 28, 26, 28, 11, 19, 4, 11, 18, 17, 33, 37, 12, 39, 30, 37, 36, 16, 2, 2, 39, 0, 49, 30, 39, 8, 36, 9, 35, 5, 33, 5, 14, 3, 53, 23, 47, 59, 31, 30, 50, 32, 38, 32, 69, 48, 5, 3, 9, 70, 56, 56, 33 };
        int[] workType = { 5, 1, 3, 4, 5, 1, 1, 3, 1, 1, 1, 4, 4, 3, 4, 2, 1, 5, 2, 1, 5, 4, 1, 1, 5, 3, 1, 5, 2, 3, 2, 5, 3, 4, 4, 2, 3, 3, 1, 5, 3, 2, 1, 1, 3, 2, 4, 2, 3, 3, 4, 2, 2, 5, 4, 2, 5, 4, 2, 3, 5, 5, 1, 5, 5, 4, 3, 2, 3, 2, 2, 5, 4, 1, 2, 3, 1, 2, 5, 2, 2 };
        assertEquals(64, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case52() {
        int[] superior = { -1, 0, 0, 0, 0, 2, 1, 4, 3, 3, 4, 0, 6, 12, 13, 0, 7, 12, 16, 1, 9, 8, 19, 5, 23, 4, 6, 26, 18, 11, 2, 14, 28, 4, 8, 6, 26, 31, 37, 28, 34, 13, 9, 38, 30, 29, 25, 39, 9, 8 };
        int[] workType = { 49, 12, 42, 46, 21, 47, 14, 14, 30, 49, 12, 27, 46, 32, 15, 16, 48, 31, 15, 25, 14, 41, 49, 34, 31, 39, 9, 31, 43, 39, 53, 44, 33, 46, 52, 22, 40, 46, 38, 9, 21, 27, 46, 20, 6, 26, 53, 42, 36, 4 };
        assertEquals(50, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case53() {
        int[] superior = { -1, 0, 1, 1, 0, 1, 0, 0, 5, 6, 1, 3, 2, 11, 10, 3, 9, 7, 7, 18, 5, 17, 15, 14, 2, 3, 5, 25, 14, 15, 29, 23, 2, 29, 22, 8, 8, 22, 29, 1, 22, 0, 12, 28, 15, 22, 29, 8, 17, 1, 4, 7, 15, 27, 46, 27, 7, 52, 25, 23, 6, 29, 0, 13, 19 };
        int[] workType = { 17, 39, 8, 29, 22, 41, 26, 33, 6, 2, 22, 35, 39, 12, 4, 2, 16, 38, 35, 31, 35, 22, 23, 27, 4, 2, 6, 3, 25, 18, 2, 37, 41, 31, 23, 9, 17, 17, 8, 18, 26, 28, 22, 21, 10, 16, 35, 12, 27, 39, 15, 21, 28, 28, 37, 19, 39, 7, 41, 15, 41, 27, 15, 22, 10 };
        assertEquals(61, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case54() {
        int[] superior = { -1, 0, 1, 1, 2, 2 };
        int[] workType = { 7, 10, 5, 6, 29, 14 };
        assertEquals(6, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case55() {
        int[] superior = { -1, 0, 1, 2, 2, 0, 0, 1, 3, 6, 4, 3, 2, 3, 2, 13, 6, 6, 15, 15, 16, 20, 15, 21, 16, 23, 7, 16, 17, 4, 25, 20, 25, 14, 9, 11, 33, 19, 9, 32, 17, 28, 36, 5, 22, 15, 8, 41, 39, 31, 3, 38, 49, 10, 38, 30, 35, 23, 23, 16, 50, 35, 28, 8, 46, 16, 27, 41, 32, 42, 12, 6, 20, 33, 71, 12, 54, 14, 59, 46, 73, 9, 64, 41, 32, 44, 63, 76, 1, 26, 86 };
        int[] workType = { 10, 23, 77, 59, 10, 49, 2, 12, 70, 25, 37, 41, 12, 29, 67, 27, 59, 27, 40, 55, 58, 45, 41, 46, 85, 21, 37, 80, 11, 55, 32, 53, 20, 28, 4, 35, 59, 85, 5, 56, 67, 36, 10, 85, 49, 86, 20, 39, 56, 41, 37, 68, 19, 24, 65, 40, 34, 5, 75, 63, 82, 21, 60, 41, 10, 15, 44, 22, 36, 24, 58, 1, 52, 74, 2, 25, 27, 66, 14, 3, 56, 30, 83, 86, 23, 44, 83, 60, 28, 79, 40 };
        assertEquals(90, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case56() {
        int[] superior = { -1, 0, 0, 0, 1, 4, 2, 6, 3, 5, 6, 4, 5, 7, 3, 9, 4, 7, 8, 1, 8, 16, 13, 20, 4, 7, 10, 4, 18, 4, 27, 14, 0, 30, 33, 11, 16, 17, 31, 38, 36, 11, 3, 41, 37, 6, 5, 46, 29, 42, 7, 11, 10, 49, 13, 54, 45, 19, 42, 5, 15, 24, 16, 31, 10, 7, 62, 61, 35, 3, 15, 30, 55, 50 };
        int[] workType = { 6, 1, 54, 59, 59, 26, 17, 4, 3, 21, 4, 25, 49, 9, 27, 12, 29, 44, 41, 25, 41, 27, 27, 45, 20, 49, 16, 12, 12, 30, 35, 24, 40, 38, 50, 29, 14, 17, 52, 33, 42, 9, 11, 3, 10, 28, 46, 14, 52, 39, 7, 26, 48, 20, 6, 29, 10, 2, 1, 11, 4, 51, 37, 6, 30, 21, 30, 50, 16, 6, 59, 44, 32, 30 };
        assertEquals(72, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case57() {
        int[] superior = { -1, 0, 1, 0, 1, 1, 3, 6, 3, 8, 7, 3, 11, 0, 0, 1, 13, 9, 1, 9, 11, 11, 4, 20, 19, 23, 15, 2, 13, 19, 1, 22, 20, 11, 20, 28, 27, 10, 25, 34, 11, 29, 15, 2, 8, 30, 10, 30, 25, 37, 24, 45, 8, 12, 15, 54, 1, 18, 43, 6, 5, 8, 21, 27, 42, 42, 11 };
        int[] workType = { 4, 30, 22, 40, 49, 70, 30, 43, 66, 53, 59, 44, 66, 27, 53, 56, 60, 38, 39, 40, 47, 65, 53, 28, 47, 42, 60, 7, 55, 4, 58, 65, 19, 26, 35, 39, 17, 40, 68, 70, 40, 65, 31, 59, 3, 55, 68, 16, 39, 41, 2, 22, 19, 26, 16, 2, 13, 34, 18, 16, 67, 15, 61, 9, 19, 4, 37 };
        assertEquals(67, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case58() {
        int[] superior = { -1, 0, 1, 1, 1, 4, 3, 5, 1, 2, 3, 1, 2, 0, 11, 3, 9, 6, 14, 6, 11, 16, 8, 11, 0, 13, 3, 15, 24, 6, 26, 18, 11, 5, 9, 28, 29, 4, 12, 0, 26, 27 };
        int[] workType = { 37, 47, 28, 25, 41, 60, 47, 27, 58, 1, 55, 35, 18, 31, 28, 31, 19, 16, 45, 34, 43, 24, 7, 13, 52, 61, 48, 28, 43, 4, 35, 17, 46, 59, 42, 62, 52, 7, 46, 8, 56, 54 };
        assertEquals(42, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case59() {
        int[] superior = { -1, 0, 1, 2, 3, 0, 3, 6, 4, 1, 6, 9, 7 };
        int[] workType = { 11, 5, 12, 3, 4, 6, 1, 13, 13, 13, 8, 5, 6 };
        assertEquals(13, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case60() {
        int[] superior = { -1, 0, 1, 1, 1, 4, 3, 6, 7, 3, 6, 1, 2, 10, 10, 5, 9, 3, 15, 4, 5, 8, 2, 18, 17, 7, 17, 5 };
        int[] workType = { 13, 16, 26, 4, 19, 11, 14, 7, 13, 10, 31, 19, 5, 10, 7, 22, 1, 4, 29, 5, 4, 19, 28, 12, 18, 11, 18, 14 };
        assertEquals(25, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case61() {
        int[] superior = { -1, 0, 0, 0, 1, 3, 1, 5, 5, 2, 8, 0, 0 };
        int[] workType = { 2, 1, 4, 5, 1, 2, 2, 4, 5, 4, 3, 6, 2 };
        assertEquals(10, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case62() {
        int[] superior = { -1, 0, 1, 1, 3, 2, 5, 5, 0, 8, 8, 8, 5, 4, 12, 12, 13, 2, 15, 6, 1, 7, 13, 0, 16, 6, 11, 23, 24, 12, 11, 24, 7, 24, 7, 10, 26, 34, 9, 12, 21, 8, 28, 41, 19, 25, 42, 32 };
        int[] workType = { 4, 25, 22, 23, 24, 14, 24, 18, 6, 5, 17, 13, 4, 4, 1, 26, 11, 10, 16, 9, 19, 25, 8, 26, 28, 26, 9, 26, 5, 15, 23, 7, 10, 8, 16, 9, 23, 10, 23, 18, 8, 11, 28, 6, 5, 21, 5, 7 };
        assertEquals(47, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case63() {
        int[] superior = { -1, 0, 1, 0, 0, 3, 2, 5, 7, 1, 3, 9, 0, 2, 3, 5, 0, 15, 1, 1, 8, 4, 1, 0, 13, 23 };
        int[] workType = { 1, 2, 6, 7, 6, 7, 6, 2, 4, 3, 6, 1, 2, 7, 3, 4, 7, 4, 3, 7, 3, 4, 2, 6, 5, 6 };
        assertEquals(20, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case64() {
        int[] superior = { -1, 0, 0, 2, 0, 0, 2, 0, 2, 3, 8, 5, 8, 12, 3, 0, 15, 7, 14, 2, 0, 9, 17, 17, 18, 1, 13, 13, 12, 16, 11, 18, 3, 7, 30, 25, 30, 7, 22, 16, 8, 25, 7, 26, 41, 28, 10, 17, 9, 20, 46, 1, 1, 30, 44 };
        int[] workType = { 45, 84, 78, 25, 27, 60, 70, 10, 37, 5, 80, 56, 2, 27, 31, 75, 39, 37, 18, 22, 51, 68, 66, 17, 72, 49, 63, 8, 84, 69, 46, 44, 49, 1, 65, 58, 18, 14, 20, 21, 45, 84, 54, 76, 77, 34, 44, 58, 63, 33, 53, 1, 20, 69, 57 };
        assertEquals(55, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case65() {
        int[] superior = { -1, 0, 0, 0, 0, 1, 4, 2, 4, 6, 6, 7, 7, 0, 13, 10, 8, 16, 15, 15, 3, 7, 11, 5 };
        int[] workType = { 42, 45, 11, 35, 6, 8, 37, 23, 26, 17, 3, 17, 20, 28, 9, 23, 43, 42, 19, 51, 36, 21, 33, 5 };
        assertEquals(24, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case66() {
        int[] superior = { -1, 0, 1, 2, 1, 3, 1, 2, 1, 1, 2, 3, 9, 7, 1, 3, 11, 6, 13, 0, 16, 8, 8, 15, 2, 15, 0, 25, 4, 10, 7, 24, 5, 5, 19, 15, 22, 18, 1, 19, 27, 27, 37, 10, 3, 44, 23, 34, 27, 10, 3, 18, 20, 45, 20, 21, 4, 13, 5, 0, 23, 34, 28, 16, 38, 18, 7, 37, 55, 36, 17 };
        int[] workType = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(38, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case67() {
        int[] superior = { -1, 0, 0, 1 };
        int[] workType = { 2, 40, 44, 34 };
        assertEquals(4, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case68() {
        int[] superior = { -1, 0, 0, 2, 0, 1, 3, 3, 7, 2, 8, 10, 9, 3, 3, 6, 12, 9, 4, 1, 19, 6, 13, 1, 14, 11, 19, 22, 14, 13, 24, 28, 26, 31, 31, 0, 22, 19, 34, 28, 2, 33, 17, 42, 33, 15, 38, 22, 26, 28, 0, 40, 30, 41, 15, 49, 36, 13, 56, 38, 25, 34, 54, 44, 52, 29, 34, 46, 1, 52 };
        int[] workType = { 30, 24, 53, 57, 69, 22, 72, 73, 45, 56, 12, 24, 43, 72, 77, 51, 42, 21, 81, 77, 72, 60, 25, 75, 62, 81, 66, 8, 58, 78, 31, 57, 62, 32, 12, 80, 54, 38, 2, 80, 43, 77, 34, 46, 48, 21, 58, 20, 71, 43, 43, 23, 76, 44, 46, 47, 28, 82, 59, 12, 19, 6, 20, 58, 12, 35, 2, 67, 21, 69 };
        assertEquals(68, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case69() {
        int[] superior = { -1, 0, 0, 0, 0, 2, 0, 1, 7, 5, 0, 9, 2, 4, 12, 5, 5, 7, 12, 17, 15, 2, 6, 12, 7, 15, 2, 1, 17, 3, 14, 22, 30, 2, 13, 32, 0, 12 };
        int[] workType = { 65, 17, 58, 27, 25, 60, 53, 18, 32, 5, 41, 30, 55, 16, 38, 13, 48, 61, 65, 15, 57, 40, 8, 56, 13, 61, 8, 58, 2, 34, 65, 37, 1, 8, 11, 46, 28, 49 };
        assertEquals(37, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case70() {
        int[] superior = { -1, 0, 0, 2, 3, 3, 3, 1, 3, 5, 3, 2, 4, 4, 7, 3, 9, 16, 12, 5, 2 };
        int[] workType = { 57, 20, 65, 56, 5, 2, 41, 11, 8, 10, 2, 22, 57, 57, 3, 42, 48, 12, 12, 24, 44 };
        assertEquals(19, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case71() {
        int[] superior = { -1, 0, 0, 1, 1, 4, 1, 6, 7, 6, 6, 9, 9, 2, 8, 1, 0, 2, 14, 11, 9, 11, 5, 5, 21, 23, 16, 9, 24, 5, 27, 25, 9, 31, 20, 15, 20, 30, 31, 2, 20, 21, 41, 13, 19, 4, 37, 5, 15, 32, 15, 24, 5, 14, 10, 16, 33, 5, 17, 0, 23 };
        int[] workType = { 46, 40, 20, 15, 31, 48, 54, 27, 17, 44, 62, 46, 58, 66, 58, 33, 16, 10, 2, 11, 52, 16, 45, 21, 30, 4, 60, 36, 23, 64, 29, 58, 24, 10, 50, 39, 41, 53, 55, 49, 27, 36, 12, 27, 57, 50, 21, 33, 45, 26, 24, 57, 58, 49, 53, 44, 50, 5, 16, 12, 2 };
        assertEquals(61, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case72() {
        int[] superior = { -1, 0, 0, 2, 3, 2, 5, 0, 0, 0, 5, 9, 11, 9, 9, 2, 13, 9, 10, 8, 4, 1, 4, 16, 21, 16, 6, 13, 24, 15, 10, 14, 28, 28, 9, 28, 30, 33, 18, 27, 37, 34, 30, 19, 41, 16, 0, 3, 5, 24, 35, 21, 37, 38, 44, 28, 36, 40, 8, 58, 49, 29, 55 };
        int[] workType = { 5, 5, 7, 2, 2, 7, 4, 6, 1, 6, 5, 3, 7, 1, 6, 5, 1, 2, 6, 3, 5, 5, 6, 1, 5, 4, 7, 3, 1, 4, 4, 7, 1, 4, 4, 4, 3, 2, 6, 4, 3, 7, 2, 6, 6, 5, 3, 1, 2, 6, 1, 5, 4, 1, 3, 4, 4, 1, 2, 6, 6, 4, 7 };
        assertEquals(51, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case73() {
        int[] superior = { -1 };
        int[] workType = { 14 };
        assertEquals(1, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case74() {
        int[] superior = { -1, 0, 1, 0, 1, 0, 4, 4, 2, 4, 6, 3, 8, 5, 0, 9, 5, 6, 10, 0, 13, 2, 1, 12, 13, 4, 18, 14, 12, 0, 5, 9, 17, 28, 1, 25, 29, 8, 16, 26, 2, 40, 29, 26, 1, 24, 37, 44, 24, 6, 42, 13, 46, 35, 42, 2, 43, 27, 56, 34, 43, 32, 58, 42, 10, 41, 40, 55, 18, 27, 51, 60, 40, 61, 26, 6, 7, 74, 73, 60, 42, 28, 6, 59, 32 };
        int[] workType = { 19, 1, 28, 51, 46, 15, 31, 48, 13, 58, 34, 44, 47, 57, 71, 7, 30, 80, 11, 55, 55, 46, 34, 33, 65, 15, 71, 48, 73, 55, 27, 7, 10, 69, 76, 43, 54, 79, 20, 55, 52, 47, 33, 84, 16, 57, 48, 12, 8, 61, 81, 51, 20, 55, 53, 52, 52, 65, 38, 20, 60, 5, 18, 25, 20, 32, 71, 69, 57, 35, 46, 77, 49, 36, 27, 35, 74, 58, 27, 53, 37, 52, 43, 41, 48 };
        assertEquals(82, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case75() {
        int[] superior = { -1, 0, 1, 1, 2, 0, 4, 4, 6, 4, 1, 2, 8, 9, 12, 2, 7, 8, 11, 1, 4, 16, 6, 13, 15, 22, 16, 18, 11, 3, 22, 7, 6, 19, 24, 4, 17, 14, 1, 30, 22, 6, 17, 3, 34, 19, 28, 21, 14, 33, 44, 14, 0, 26, 41, 49, 16, 51, 41, 26, 56, 24, 35, 39, 2, 6, 48, 31, 9, 59, 56, 44, 57, 53, 21, 23, 56, 67, 20, 19, 25, 42, 43, 4, 46, 44, 26, 72, 86, 81, 89, 68 };
        int[] workType = { 9, 8, 3, 12, 8, 12, 6, 4, 7, 8, 8, 3, 15, 4, 13, 9, 14, 16, 5, 7, 2, 9, 13, 4, 7, 9, 7, 16, 13, 13, 7, 7, 13, 11, 16, 8, 13, 3, 14, 6, 2, 5, 5, 14, 6, 3, 10, 10, 11, 9, 1, 6, 15, 10, 7, 1, 16, 13, 16, 7, 1, 8, 4, 12, 13, 11, 5, 11, 11, 16, 4, 16, 3, 1, 4, 3, 1, 11, 15, 6, 7, 2, 9, 16, 8, 5, 2, 12, 2, 4, 15, 11 };
        assertEquals(82, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case76() {
        int[] superior = { -1, 0, 0, 0, 3, 3, 0 };
        int[] workType = { 7, 25, 15, 17, 41, 55, 89 };
        assertEquals(7, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case77() {
        int[] superior = { -1, 0, 0, 1, 2, 3, 0, 4, 4, 5, 5, 2, 1, 9, 7, 7, 3, 4, 12, 8, 9, 19, 6, 6, 23, 15, 19, 1, 4 };
        int[] workType = { 18, 14, 13, 26, 4, 11, 12, 10, 22, 16, 14, 1, 26, 19, 14, 3, 26, 17, 4, 13, 21, 16, 23, 28, 6, 14, 28, 5, 21 };
        assertEquals(27, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case78() {
        int[] superior = { -1, 0, 1, 1, 3, 2, 4, 6, 2, 3, 4, 2, 6, 5, 0, 13, 5, 8, 12, 15, 7, 4, 17, 15, 14, 6, 10, 8, 15, 4, 6, 1, 18, 3, 27, 27, 3, 5, 37, 33, 10, 25, 6, 7, 7, 40, 2, 22, 3, 35, 4, 2, 15, 20, 5, 15, 6, 54, 11, 27, 29, 49, 45, 19, 49, 38, 10, 64, 37, 17 };
        int[] workType = { 14, 3, 16, 27, 14, 27, 15, 10, 11, 12, 20, 9, 18, 24, 24, 8, 28, 10, 1, 10, 26, 8, 24, 24, 24, 23, 19, 7, 7, 18, 18, 20, 13, 15, 15, 6, 3, 9, 4, 23, 11, 29, 26, 5, 3, 6, 1, 4, 23, 14, 12, 20, 13, 8, 28, 4, 28, 20, 25, 28, 23, 12, 19, 7, 16, 22, 22, 23, 10, 27 };
        assertEquals(67, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case79() {
        int[] superior = { -1, 0, 0, 2, 2, 4, 3, 6 };
        int[] workType = { 39, 58, 71, 48, 82, 11, 66, 38 };
        assertEquals(8, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case80() {
        int[] superior = { -1, 0, 1, 2, 3, 1, 3, 6, 5, 2 };
        int[] workType = { 84, 74, 21, 83, 5, 13, 2, 55, 81, 62 };
        assertEquals(10, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case81() {
        int[] superior = { -1, 0, 0, 0, 3, 2, 0, 4, 3, 1, 6, 6, 2, 0, 11, 5, 1, 8, 3, 2, 11, 1, 18, 5, 14, 17, 18, 11, 14, 11, 6, 12, 16, 16, 22, 25, 6, 16, 29, 17, 33, 16, 33, 6, 34, 12, 7, 44, 29, 13, 44, 8, 27, 36, 0, 28, 55, 23, 17, 35 };
        int[] workType = { 17, 20, 17, 9, 21, 10, 25, 22, 1, 12, 11, 20, 23, 14, 16, 24, 20, 19, 6, 24, 4, 27, 2, 15, 18, 5, 18, 25, 21, 7, 5, 22, 11, 23, 8, 20, 7, 26, 28, 17, 6, 16, 5, 15, 5, 3, 9, 1, 10, 7, 9, 5, 28, 1, 3, 18, 20, 6, 5, 19 };
        assertEquals(57, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case82() {
        int[] superior = { -1, 0, 1, 1, 2, 0, 4, 0, 0, 7, 5, 9, 1, 3, 11, 1, 7, 9, 13, 17, 19, 8, 7, 15, 13, 13 };
        int[] workType = { 34, 59, 69, 36, 1, 43, 66, 63, 18, 40, 1, 15, 86, 62, 55, 55, 48, 22, 74, 49, 4, 54, 26, 42, 10, 8 };
        assertEquals(26, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case83() {
        int[] superior = { -1, 0, 1, 2, 3, 2, 5, 5, 5, 7, 6, 6, 1, 3, 4, 7, 0, 13, 15, 17, 18, 20, 12, 3, 16, 0, 16, 19, 13, 3, 12, 20, 8, 24, 23, 17, 8, 8, 22, 10, 11, 37, 41, 41, 23, 13, 17, 21, 2, 34, 19, 5, 35, 33, 18, 39, 9, 2, 46, 31, 28, 52, 10, 8, 34, 16, 36, 38, 39, 16, 24, 53, 64, 1, 42, 60, 17, 30, 69, 54, 13, 20, 13, 61, 74, 37, 40, 85, 45, 66, 52, 37, 11, 56 };
        int[] workType = { 23, 5, 44, 56, 6, 68, 14, 36, 60, 84, 9, 68, 34, 3, 4, 81, 9, 49, 48, 56, 27, 29, 83, 1, 14, 77, 81, 20, 18, 60, 85, 83, 17, 21, 13, 66, 21, 82, 3, 23, 20, 85, 53, 81, 22, 57, 20, 73, 15, 45, 31, 83, 67, 82, 3, 48, 25, 79, 47, 24, 69, 67, 29, 77, 17, 69, 33, 80, 19, 8, 43, 68, 20, 77, 5, 13, 37, 37, 77, 23, 30, 15, 39, 16, 14, 51, 64, 4, 30, 32, 54, 16, 42, 9 };
        assertEquals(93, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case84() {
        int[] superior = { -1, 0, 0, 0, 0, 4, 2, 0, 2, 6, 9, 5, 7, 2, 13, 10, 11, 4, 5, 17, 8, 4, 18, 21, 4, 18, 10, 2, 26, 25, 2, 1, 12, 10, 12, 30, 34, 0, 17, 16, 24, 31, 36, 40, 12, 24, 42, 11, 38, 41, 36, 36, 4, 35, 25, 11, 46, 14, 43, 20, 42, 28, 11, 33, 28, 23, 22, 25, 36, 44, 13, 36, 39, 43, 72, 11, 18, 53, 30, 26, 12 };
        int[] workType = { 7, 9, 58, 74, 97, 57, 85, 49, 62, 9, 77, 17, 4, 28, 36, 4, 91, 25, 65, 75, 35, 86, 79, 7, 23, 79, 47, 25, 15, 34, 79, 41, 93, 3, 98, 31, 68, 11, 88, 58, 22, 25, 83, 28, 13, 14, 61, 44, 11, 49, 37, 71, 82, 22, 2, 68, 2, 11, 88, 86, 2, 95, 53, 23, 52, 27, 8, 94, 76, 71, 20, 47, 64, 29, 7, 40, 44, 39, 35, 46, 37 };
        assertEquals(80, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case85() {
        int[] superior = { -1, 0, 1, 0, 3, 3, 4, 1, 4, 3, 0, 2, 1, 5, 9, 6, 11, 0, 2, 17, 9, 0, 1, 3, 19, 15, 5, 7, 27, 3, 25, 28, 21, 28, 24, 6, 8, 29, 14, 0, 37, 40, 38, 13, 8, 15, 23, 10, 46, 27, 5, 9, 10, 40, 46, 41, 26, 22, 42, 8, 40, 43, 33, 60, 59, 47, 48, 48, 20, 12, 54, 66, 70, 21, 61, 10, 65, 70, 41, 60, 2, 14, 18, 36, 18, 28, 78, 15, 54, 37, 60, 71, 1, 54 };
        int[] workType = { 16, 31, 33, 6, 40, 28, 7, 15, 6, 42, 43, 9, 22, 1, 19, 39, 32, 6, 42, 11, 20, 26, 29, 19, 32, 12, 33, 13, 20, 21, 16, 1, 28, 5, 15, 2, 36, 5, 7, 20, 3, 35, 31, 25, 32, 22, 8, 41, 30, 35, 37, 6, 39, 11, 34, 11, 44, 42, 32, 44, 35, 35, 39, 7, 17, 20, 26, 22, 37, 37, 6, 37, 28, 28, 26, 25, 14, 27, 6, 21, 9, 6, 27, 40, 8, 22, 33, 28, 43, 15, 34, 29, 38, 25 };
        assertEquals(90, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case86() {
        int[] superior = { -1, 0, 0, 1, 1, 3, 0, 2, 0, 5, 2, 5, 5, 6, 1, 2, 11, 12, 10, 4, 7, 16, 10, 9, 12, 18, 15, 23, 20, 7, 4 };
        int[] workType = { 4, 6, 4, 7, 7, 1, 2, 8, 1, 7, 2, 4, 2, 9, 11, 1, 10, 11, 4, 6, 11, 7, 2, 8, 9, 9, 10, 10, 9, 8, 8 };
        assertEquals(27, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case87() {
        int[] superior = { -1, 0, 1, 1, 1, 0, 2, 5 };
        int[] workType = { 1, 1, 2, 3, 4, 5, 3, 3 };
        assertEquals(7, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case88() {
        int[] superior = { -1, 0 };
        int[] workType = { 1, 2 };
        assertEquals(2, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case89() {
        int[] superior = { -1, 0, 0 };
        int[] workType = { 1, 1, 1 };
        assertEquals(2, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case90() {
        int[] superior = { -1, 0, 1, 1, 1, 0, 2, 5 };
        int[] workType = { 1, 1, 2, 2, 4, 5, 3, 3 };
        assertEquals(6, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case91() {
        int[] superior = { -1, 0, 0, 0, 0 };
        int[] workType = { 1, 1, 1, 1, 1 };
        assertEquals(4, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case92() {
        int[] superior = { -1, 0, 0 };
        int[] workType = { 2, 1, 1 };
        assertEquals(2, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case93() {
        int[] superior = { -1, 0, 0 };
        int[] workType = { 1, 2, 2 };
        assertEquals(2, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case94() {
        int[] superior = { -1, 0, 0, 0 };
        int[] workType = { 1, 2, 11, 12 };
        assertEquals(4, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case95() {
        int[] superior = { -1, 0 };
        int[] workType = { 11, 1 };
        assertEquals(2, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case96() {
        int[] superior = { -1, 0, 1 };
        int[] workType = { 1, 2, 3 };
        assertEquals(3, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case97() {
        int[] superior = { -1, 0, 1, 1, 1, 1 };
        int[] workType = { 1, 4, 2, 2, 2, 2 };
        assertEquals(5, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case98() {
        int[] superior = { -1, 0, 1, 1, 1, 1 };
        int[] workType = { 1, 2, 3, 4, 5, 5 };
        assertEquals(5, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case99() {
        int[] superior = { -1, 0, 1, 0, 0 };
        int[] workType = { 3, 3, 5, 2, 2 };
        assertEquals(4, goodcompanydivtwo.countGood(superior, workType));
    }

    @Test
    public void case100() {
        int[] superior = { -1, 0, 0, 0, 0 };
        int[] workType = { 1, 2, 2, 2, 2 };
        assertEquals(4, goodcompanydivtwo.countGood(superior, workType));
    }

}
