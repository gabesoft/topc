package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class WinterAndPresentsTest {
    WinterAndPresents winterandpresents = new WinterAndPresents();

    @Test
    public void case1() {
        int[] apple = { 1 };
        int[] orange = { 1 };
        assertEquals(3L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case2() {
        int[] apple = { 1, 2, 0, 3 };
        int[] orange = { 4, 5, 0, 6 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case3() {
        int[] apple = { 2, 2, 2 };
        int[] orange = { 2, 2, 2 };
        assertEquals(16L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case4() {
        int[] apple = { 7, 4, 5 };
        int[] orange = { 1, 10, 2 };
        assertEquals(46L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case5() {
        int[] apple = { 1000000 };
        int[] orange = { 1000000 };
        assertEquals(1000002000000L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case6() {
        int[] apple = { 1, 2 };
        int[] orange = { 2, 1 };
        assertEquals(7L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case7() {
        int[] apple = { 1000000 };
        int[] orange = { 0 };
        assertEquals(1000000L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case8() {
        int[] apple = { 0 };
        int[] orange = { 1000000 };
        assertEquals(1000000L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case9() {
        int[] apple = { 4, 6, 4, 2, 3, 1, 3, 0, 0, 6, 7, 6, 0, 7, 2, 9, 4, 3, 4, 8, 4, 4, 5, 3, 0, 3, 8, 6, 4, 0, 6, 2, 2, 5, 3, 3, 0, 9, 3, 3, 5, 2 };
        int[] orange = { 7, 7, 7, 0, 4, 3, 5, 5, 4, 1, 3, 5, 9, 2, 7, 2, 4, 3, 5, 5, 8, 7, 3, 7, 9, 0, 5, 0, 8, 0, 6, 9, 7, 0, 5, 7, 4, 7, 7, 4, 1, 8 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case10() {
        int[] apple = { 1, 8, 5, 5, 4, 5, 3, 1, 8, 1, 0, 3, 4, 7, 1, 1, 1, 2, 2, 8, 8 };
        int[] orange = { 3, 0, 9, 3, 1, 0, 3, 8, 2, 9, 4, 0, 9, 6, 2, 3, 9, 8, 7, 2, 0 };
        assertEquals(73L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case11() {
        int[] apple = { 3, 4, 0, 4, 2, 5 };
        int[] orange = { 3, 2, 5, 8, 0, 8 };
        assertEquals(14L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case12() {
        int[] apple = { 4, 1, 3, 8, 3, 9, 2, 3, 6, 4, 7, 0, 6 };
        int[] orange = { 2, 1, 7, 1, 7, 7, 5, 6, 9, 8, 5, 9, 9 };
        assertEquals(35L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case13() {
        int[] apple = { 7, 6, 3, 6, 6, 2, 0, 2, 6, 1, 2, 3, 2, 8, 9, 1, 8, 5, 9, 5, 0, 8, 8, 3, 7 };
        int[] orange = { 3, 7, 9, 9, 9, 0, 3, 1, 1, 9, 5, 1, 8, 8, 1, 7, 3, 3, 6, 5, 7, 5, 3, 8, 8 };
        assertEquals(62L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case14() {
        int[] apple = { 89, 79, 41, 15, 35, 35, 52, 16, 90, 98, 43 };
        int[] orange = { 59, 84, 15, 27, 6, 2, 76, 57, 33, 28, 17 };
        assertEquals(5581L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case15() {
        int[] apple = { 72, 92, 12, 52, 81, 49, 23, 1, 1, 22, 91, 16, 13, 30 };
        int[] orange = { 60, 38, 38, 30, 2, 50, 4, 93, 5, 77, 24, 43, 95, 94 };
        assertEquals(256L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case16() {
        int[] apple = { 89, 57, 37, 96, 42, 89, 61, 25, 15, 27, 95, 29, 54, 43, 84, 52, 81, 49, 14, 87, 41, 15, 50, 62, 68, 62, 24, 24, 12, 16 };
        int[] orange = { 73, 61, 98, 57, 73, 93, 51, 5, 61, 63, 72, 75, 18, 79, 94, 41, 38, 40, 64, 21, 50, 21, 14, 51, 87, 73, 1, 70, 89, 96 };
        assertEquals(8837L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case17() {
        int[] apple = { 6, 0, 99, 69, 68, 83, 3, 74, 45, 15, 51, 17, 66, 96, 13, 3, 1, 48, 56, 65, 63, 16, 7, 44, 19, 88, 21, 48, 80, 89, 69, 15, 91, 60 };
        int[] orange = { 75, 91, 36, 35, 56, 42, 2, 52, 2, 40, 64, 13, 89, 28, 53, 12, 32, 44, 67, 33, 3, 37, 39, 48, 27, 94, 38, 74, 39, 18, 61, 46, 60, 32 };
        assertEquals(469L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case18() {
        int[] apple = { 46, 69, 75, 98, 31, 19, 38, 2, 74, 69, 69, 75, 78, 67, 62, 70, 97 };
        int[] orange = { 78, 49, 37, 44, 80, 5, 42, 17, 85, 95, 64, 98, 4, 2, 69, 61, 29 };
        assertEquals(2715L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case19() {
        int[] apple = { 986974, 320689, 439495, 429184, 542664, 511907, 653216, 266062, 26640, 843508, 793930, 946128, 607244, 554899, 990064, 879695, 873457, 249804, 81728, 187562, 805682, 510580, 162213, 770025, 355366, 886616, 908100, 675256, 422865, 852310, 124680, 731342, 633299, 522370, 896184, 838523, 108632 };
        int[] orange = { 825619, 113482, 725180, 284673, 46675, 457265, 56506, 205610, 685100, 356302, 183374, 784206, 66263, 779218, 519784, 448651, 337965, 561050, 910323, 437054, 266243, 284572, 689357, 376152, 102689, 524927, 569506, 864558, 938715, 859693, 46867, 365536, 514717, 956993, 641521, 852, 84743 };
        assertEquals(476652953047L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case20() {
        int[] apple = { 55372, 659805, 640929, 394546, 435662, 652957, 54512, 267630, 846342, 176252, 64066, 325124, 322291, 684550, 357285 };
        int[] orange = { 888091, 640188, 399776, 826758, 242966, 492133, 18927, 992229, 783759, 155962, 188447, 685419, 998980, 546293, 286888 };
        assertEquals(38578194654L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case21() {
        int[] apple = { 299878, 660520, 242920, 528359, 143479, 733770, 271149, 826296, 563285, 836338, 260709, 539860, 548841, 375606, 316914, 199959, 372243, 481778, 684666, 760055, 554292, 184465, 26273, 720886, 562061, 533125, 314143, 83515, 201590, 532973, 612428, 485317, 178599, 610221, 909251, 642452, 984495, 705608, 911475, 175095, 513514, 97993, 893737, 752076, 707237, 472126 };
        int[] orange = { 66340, 879480, 140057, 609019, 755494, 264246, 878402, 957012, 19456, 611943, 308683, 896059, 256880, 879537, 864970, 143954, 30654, 2045, 527692, 396368, 760447, 995875, 598974, 913793, 561226, 712280, 732823, 160905, 52423, 888097, 835109, 469685, 950625, 500801, 151630, 51723, 240601, 102690, 843440, 709678, 648148, 76228, 303202, 894393, 918183, 341922 };
        assertEquals(613096816722L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case22() {
        int[] apple = { 110812, 280598, 214627, 597219, 573597, 189298, 598155, 374219, 971266, 329297, 47590, 149060 };
        int[] orange = { 55308, 537907, 585846, 527965, 382861, 861731, 737947, 946277, 225641, 429025, 854414, 186031 };
        assertEquals(150736799031L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case23() {
        int[] apple = { 526043, 564225, 92522, 910154, 895691, 172515, 799244, 297688, 717107, 803864, 397157, 984621, 206646, 754023, 295897, 607296, 25784, 925165, 175552, 362841, 847464, 811158, 76392, 694302, 265663, 406194, 712390, 57905, 320864, 450625, 439674, 836069, 752795, 435701, 530463, 474342, 193206, 982900, 129260, 358246, 61951, 342646, 242066, 898416, 154534, 703136, 249221 };
        int[] orange = { 563528, 360301, 858272, 926903, 787818, 81533, 268520, 459100, 603449, 312074, 597937, 728092, 458974, 398939, 38273, 759607, 529302, 921971, 399244, 914346, 806116, 81938, 951700, 331023, 883513, 301358, 607816, 843880, 779255, 863491, 421959, 693613, 695838, 516991, 500818, 249463, 31249, 263436, 520740, 787250, 390830, 209821, 119725, 28331, 432140, 331321, 952517 };
        assertEquals(1026107158640L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case24() {
        int[] apple = { 2, 0, 4, 2, 5, 2, 1, 9, 6, 5, 2, 1, 5, 1, 6, 2, 4, 0, 7, 9, 1, 1, 3, 7, 5, 6, 5, 1, 4, 5, 3, 9, 7, 0, 8, 9, 5, 7, 2, 7, 3, 6, 6, 9, 6, 5, 4, 4, 8, 0 };
        int[] orange = { 6, 7, 9, 9, 3, 1, 8, 2, 4, 0, 9, 6, 7, 7, 2, 8, 8, 4, 7, 5, 7, 2, 8, 4, 0, 7, 9, 5, 4, 0, 7, 2, 2, 2, 1, 4, 0, 7, 7, 8, 4, 3, 0, 6, 3, 4, 9, 3, 1, 4 };
        assertEquals(116L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case25() {
        int[] apple = { 1, 7, 8, 5, 2, 9, 4, 2, 3, 2, 8, 2, 8, 8, 1, 2, 7, 6, 6, 7, 8, 3, 4, 2, 8, 8, 0, 8, 4, 3, 7, 8, 9, 8, 6, 8, 4, 3, 9, 5, 8, 4, 7, 8, 1, 5, 8, 1, 8, 0 };
        int[] orange = { 9, 1, 5, 1, 9, 8, 9, 5, 1, 2, 1, 4, 4, 1, 2, 0, 2, 0, 4, 0, 5, 0, 4, 2, 1, 9, 9, 4, 9, 7, 2, 7, 3, 9, 9, 4, 2, 3, 5, 1, 5, 6, 2, 3, 5, 3, 2, 7, 6, 0 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case26() {
        int[] apple = { 2, 3, 2, 8, 6, 7, 5, 1, 3, 6, 6, 1, 7, 3, 6, 7, 9, 9, 1, 3, 4, 6, 8, 0, 4, 5, 0, 0, 2, 1, 8, 6, 6, 1, 0, 9, 5, 8, 0, 7, 2, 7, 6, 8, 4, 5, 8, 4, 1, 5 };
        int[] orange = { 6, 4, 6, 3, 7, 0, 1, 3, 2, 5, 9, 9, 7, 6, 1, 1, 5, 3, 9, 3, 0, 9, 0, 0, 1, 0, 8, 9, 2, 4, 8, 7, 7, 4, 1, 5, 8, 0, 7, 9, 3, 5, 2, 0, 3, 2, 8, 9, 1, 7 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case27() {
        int[] apple = { 3, 9, 9, 0, 2, 2, 6, 7, 6, 5, 9, 3, 4, 8, 1, 3, 3, 6, 0, 4, 1, 8, 1, 7, 6, 4, 1, 3, 3, 1, 3, 9, 2, 1, 6, 3, 0, 7, 0, 9, 0, 0, 6, 8, 6, 6, 1, 4, 0, 0 };
        int[] orange = { 4, 2, 6, 1, 2, 8, 8, 0, 1, 5, 8, 7, 8, 3, 1, 4, 7, 0, 8, 8, 8, 3, 4, 7, 5, 7, 1, 3, 8, 9, 0, 8, 2, 3, 6, 3, 7, 1, 4, 5, 3, 6, 8, 9, 4, 6, 6, 9, 9, 6 };
        assertEquals(40L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case28() {
        int[] apple = { 0, 9, 0, 2, 7, 9, 3, 4, 3, 1, 0, 7, 5, 5, 2, 2, 5, 4, 7, 7, 5, 4, 4, 4, 3, 6, 0, 2, 7, 3, 7, 3, 8, 2, 8, 1, 9, 9, 0, 9, 6, 8, 3, 0, 8, 3, 0, 7, 6, 9 };
        int[] orange = { 4, 3, 0, 4, 0, 6, 0, 5, 5, 6, 1, 6, 9, 0, 6, 2, 6, 3, 0, 3, 0, 6, 8, 0, 1, 0, 1, 4, 0, 5, 1, 9, 7, 4, 5, 1, 5, 9, 1, 7, 2, 0, 7, 4, 6, 0, 5, 6, 4, 3 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case29() {
        int[] apple = { 44, 22, 89, 85, 86, 27, 97, 68, 40, 38, 75, 10, 90, 41, 56, 51, 88, 30, 89, 75, 10, 97, 34, 40, 96, 13, 56, 76, 98, 46, 73, 52, 19, 94, 71, 21, 73, 20, 88, 9, 76, 68, 29, 83, 77, 87, 36, 21, 34, 12 };
        int[] orange = { 37, 90, 50, 98, 83, 11, 28, 25, 85, 54, 47, 4, 23, 65, 66, 71, 28, 5, 39, 38, 39, 48, 63, 2, 94, 49, 28, 77, 65, 10, 98, 36, 49, 19, 93, 64, 60, 40, 33, 54, 75, 50, 84, 64, 13, 39, 29, 66, 76, 58 };
        assertEquals(5030L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case30() {
        int[] apple = { 56, 96, 11, 26, 92, 5, 58, 45, 62, 0, 89, 31, 76, 34, 56, 45, 57, 62, 92, 45, 41, 20, 35, 83, 36, 75, 55, 94, 45, 19, 35, 34, 75, 83, 57, 84, 72, 34, 79, 53, 21, 89, 70, 40, 20, 7, 59, 13, 59, 19 };
        int[] orange = { 80, 79, 81, 60, 1, 0, 1, 4, 57, 81, 98, 71, 38, 4, 41, 56, 6, 35, 40, 25, 57, 9, 91, 99, 54, 33, 24, 93, 28, 24, 95, 73, 6, 47, 26, 15, 15, 44, 45, 61, 50, 7, 79, 27, 63, 7, 93, 69, 1, 3 };
        assertEquals(690L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case31() {
        int[] apple = { 55, 97, 9, 54, 82, 71, 21, 97, 22, 81, 23, 10, 97, 26, 57, 80, 5, 27, 27, 45, 46, 99, 11, 26, 43, 15, 89, 45, 28, 75, 73, 54, 63, 52, 51, 42, 42, 14, 43, 10, 82, 16, 0, 27, 70, 67, 53, 4, 30, 68 };
        int[] orange = { 5, 28, 80, 99, 14, 48, 22, 88, 29, 54, 73, 90, 67, 81, 34, 37, 8, 55, 6, 69, 10, 47, 83, 56, 52, 6, 82, 85, 82, 2, 92, 53, 79, 81, 82, 32, 63, 34, 24, 45, 78, 49, 72, 1, 12, 13, 84, 36, 5, 61 };
        assertEquals(4072L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case32() {
        int[] apple = { 1, 51, 28, 9, 29, 50, 80, 87, 78, 92, 83, 57, 31, 7, 28, 67, 93, 52, 30, 10, 98, 99, 5, 48, 78, 53, 57, 25, 80, 98, 76, 62, 36, 25, 57, 32, 75, 80, 14, 41, 75, 33, 45, 47, 15, 81, 4, 25, 69, 60 };
        int[] orange = { 91, 73, 57, 86, 52, 95, 5, 86, 95, 48, 39, 73, 10, 99, 47, 43, 89, 11, 34, 69, 57, 98, 45, 81, 82, 86, 76, 95, 41, 89, 34, 73, 11, 47, 23, 60, 73, 50, 92, 47, 42, 46, 97, 70, 12, 86, 58, 37, 33, 88 };
        assertEquals(16527L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case33() {
        int[] apple = { 25, 13, 86, 90, 8, 13, 46, 5, 43, 66, 75, 88, 81, 53, 86, 96, 79, 73, 8, 81, 40, 6, 47, 92, 74, 39, 66, 96, 1, 73, 28, 39, 11, 90, 37, 49, 60, 68, 38, 9, 71, 47, 89, 64, 64, 43, 89, 42, 39, 15 };
        int[] orange = { 23, 22, 45, 29, 62, 85, 53, 41, 81, 56, 64, 62, 16, 39, 63, 38, 88, 13, 45, 31, 80, 74, 71, 94, 92, 4, 8, 46, 68, 16, 98, 71, 79, 50, 14, 83, 47, 45, 36, 90, 17, 9, 87, 6, 15, 40, 6, 33, 46, 46 };
        assertEquals(24291L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case34() {
        int[] apple = { 806233, 420514, 489280, 666293, 30814, 241729, 355281, 173750, 301920, 41122, 396587, 792308, 643056, 341606, 361716, 428804, 623241, 892572, 856053, 598622, 653389, 724129, 856896, 443963, 841913, 170271, 469122, 130757, 437409, 406098, 982806, 433488, 354145, 412924, 83890, 351932, 84119, 736882, 854821, 949929, 781269, 579467, 485435, 979112, 851921, 416215, 380729, 966936, 140498, 332866 };
        int[] orange = { 117807, 487002, 751634, 782572, 87576, 952163, 80248, 498393, 209379, 273760, 644010, 634564, 944434, 849654, 870732, 264411, 589907, 830895, 602083, 134336, 806613, 904611, 400581, 223288, 542508, 513680, 176309, 775589, 576775, 99904, 463319, 513835, 577930, 686620, 128666, 983563, 713162, 505910, 650963, 992227, 993291, 866766, 828437, 354852, 699354, 984999, 983491, 762427, 597574, 264138 };
        assertEquals(341032200877L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case35() {
        int[] apple = { 510633, 471863, 863885, 776778, 441472, 978222, 624722, 216722, 779294, 112210, 514787, 262931, 400617, 16175, 200943, 209205, 54310, 508641, 475310, 754292, 539128, 70214, 189737, 204371, 382401, 913554, 768904, 927120, 448762, 25063, 131697, 625694, 364183, 385679, 331614, 824681, 427622, 889628, 345719, 308698, 926948, 100807, 681755, 349254, 381597, 470714, 565959, 981205, 794285, 450145 };
        int[] orange = { 653215, 315214, 470814, 973548, 554231, 386999, 292850, 98250, 158731, 381862, 776579, 898232, 872760, 93979, 860443, 514291, 921709, 649531, 171940, 623663, 692887, 477700, 551128, 298013, 353641, 529336, 694731, 635733, 121311, 994883, 715144, 788353, 863724, 118510, 717193, 526606, 191866, 514380, 897388, 873686, 814616, 963453, 917403, 850412, 361027, 27796, 540072, 822422, 894811, 106027 };
        assertEquals(289311826921L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case36() {
        int[] apple = { 488633, 888163, 564416, 437188, 715417, 935235, 884004, 172371, 415078, 337601, 346631, 180406, 784506, 802022, 297856, 510590, 557268, 956915, 544828, 602688, 868260, 838086, 21070, 907324, 449755, 655994, 284426, 467459, 705474, 417359, 64408, 459715, 219579, 579235, 283323, 146058, 92502, 586451, 691805, 224236, 461641, 377039, 595155, 872055, 658087, 131300, 567404, 114363, 756659, 971485 };
        int[] orange = { 59191, 635390, 839627, 302181, 722451, 726133, 863744, 484676, 41475, 670501, 874176, 889026, 647845, 39681, 89285, 146187, 834083, 468132, 871419, 935568, 475447, 368570, 79443, 462030, 972105, 328392, 389796, 253392, 345532, 544432, 650535, 619634, 44714, 204741, 112328, 322689, 548959, 129434, 831917, 247389, 519513, 739755, 744178, 307611, 466963, 313623, 795878, 65947, 161152, 952783 };
        assertEquals(241848582662L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case37() {
        int[] apple = { 398416, 149450, 492528, 641784, 688865, 49459, 959513, 670514, 161436, 561341, 135047, 887730, 723001, 465496, 968827, 528570, 914377, 569971, 316055, 850234, 273226, 868685, 358260, 882101, 371517, 847971, 687997, 466977, 718893, 714281, 578655, 551645, 779544, 800905, 785633, 143539, 750787, 694765, 836693, 889364, 391257, 634279, 259948, 944608, 769709, 546833, 677199, 436236, 601933, 947608 };
        int[] orange = { 697881, 492475, 876995, 343778, 462762, 643656, 149003, 735898, 633061, 1186, 972443, 571352, 675596, 401257, 510043, 570219, 441607, 633714, 876353, 286329, 22542, 754371, 118609, 65299, 447141, 59991, 949336, 755263, 440341, 284614, 790310, 732606, 2006, 357643, 868305, 873771, 637058, 120547, 341196, 459128, 624004, 923771, 32321, 61843, 940695, 551104, 608134, 426836, 453491, 71912 };
        assertEquals(1764828860238L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case38() {
        int[] apple = { 913306, 526234, 35078, 566629, 625870, 96052, 279506, 803724, 981607, 765488, 305969, 263992, 789566, 227418, 247701, 756652, 681002, 714453, 185867, 367634, 152944, 882482, 561620, 592853, 246266, 413089, 230634, 613724, 183903, 256558, 60864, 153442, 833429, 225015, 19388, 512651, 95058, 156096, 829102, 19318, 998562, 694415, 66086, 172691, 28116, 475501, 938392, 653443, 691000, 855281 };
        int[] orange = { 701811, 642058, 621528, 601348, 308337, 351604, 664287, 332987, 145872, 211815, 669673, 505943, 818468, 343176, 359099, 56632, 453289, 399456, 102077, 244275, 940825, 600229, 126400, 743498, 826781, 987427, 634142, 503662, 395492, 193969, 542742, 762088, 790103, 820085, 485850, 627464, 343001, 124306, 832248, 546513, 842861, 467789, 796133, 857343, 905585, 478465, 374104, 311397, 906336, 195443 };
        assertEquals(1625420046003L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case39() {
        int[] apple = { 762254, 686932, 897360, 721593, 568093, 837332, 317713, 920626, 466452, 756202, 351349, 756914, 977171, 305925, 361297, 75463, 347645, 384297, 536361, 618293, 8545, 53396, 361767, 449441, 807511, 365618, 781276, 848741, 371672, 493951, 57186, 105461, 525681, 162554, 210018, 196381, 344838, 712430, 738164, 419398, 48378, 685144, 401715, 40056, 855054, 967771, 110950, 408767, 335673, 170707 };
        int[] orange = { 993462, 836673, 743133, 574999, 495625, 353212, 966418, 692136, 907593, 399208, 300278, 438087, 852064, 858272, 997252, 586606, 736481, 219428, 868164, 904403, 673156, 549961, 397808, 21913, 645081, 42958, 418858, 26463, 229604, 901151, 982539, 467768, 119830, 402613, 435737, 64115, 33543, 359539, 791631, 302095, 500640, 329667, 893672, 329251, 308607, 514238, 989420, 917775, 166500, 99763 };
        assertEquals(1370243967951L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case40() {
        int[] apple = { 2400, 461095, 347859, 422788, 787713, 182790, 176435, 671542, 801852, 741129, 777609, 698, 735167, 70600, 750651, 563384, 270612, 637089, 872342, 459758, 811769, 916819, 500218, 283160, 510885, 998157, 327695, 290740, 714544, 648577, 248546, 241193, 812898, 304892, 426366, 790391, 221349, 930880, 545791, 546942, 471956, 410977, 358335, 249107, 892761, 685809, 112669, 448806, 632741, 29885 };
        int[] orange = { 113071, 751331, 273564, 622633, 387769, 798699, 543877, 975964, 422714, 703749, 133898, 115138, 958315, 757535, 179956, 572749, 326932, 951754, 23960, 358302, 481760, 4325, 430525, 991690, 439281, 306876, 689777, 817369, 542799, 151981, 484533, 885473, 816175, 797989, 689156, 850622, 686635, 501600, 30496, 547466, 83387, 385530, 332166, 681360, 336908, 534351, 496411, 838730, 375842, 780400 };
        assertEquals(301197549086L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case41() {
        int[] apple = { 991298, 573301, 643756, 816410, 41922, 307040, 823789, 634053, 743638, 408033, 505559, 589180, 252719, 832915, 40790, 253338, 180764, 23453, 23192, 823104, 373712, 917281, 410732, 120217, 469961, 237744, 525160, 123403, 757666, 810913, 646816, 872235, 392029, 39604, 866488, 369376, 779821, 183223, 20986, 663988, 783630, 91300, 974326, 547390, 163258, 513086, 304230, 33560, 378496, 339355 };
        int[] orange = { 82445, 531533, 32921, 362117, 216849, 197231, 786849, 150117, 71273, 859625, 668860, 598530, 480086, 73617, 661135, 558161, 23071, 22682, 620355, 237917, 979130, 888321, 619249, 878024, 157259, 327801, 923973, 327101, 218660, 42202, 337821, 783669, 733870, 543756, 626821, 583505, 863898, 64168, 427466, 816834, 758344, 677259, 461675, 840313, 11559, 892636, 445861, 535920, 301219, 990474 };
        assertEquals(51018056836L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case42() {
        int[] apple = { 365996, 460482, 332155, 375794, 779636, 639270, 896107, 564113, 368187, 816865, 40933, 699625, 821661, 229779, 408619, 674562, 374512, 980335, 988879, 143284, 129955, 736770, 860452, 215924, 193960, 601406, 755634, 119425, 800509, 449736, 226105, 390074, 929384, 300622, 581344, 714956, 847204, 397393, 415100, 376207, 697440, 257104, 575902, 708013, 580420, 111628, 777978, 695634, 474368, 942104 };
        int[] orange = { 721026, 65644, 379977, 891137, 409088, 455969, 928889, 690032, 313151, 37393, 204785, 610620, 29754, 104132, 370688, 371086, 330168, 229146, 856004, 156068, 758984, 928104, 993910, 807499, 600930, 295511, 263957, 778387, 956750, 164568, 65134, 973595, 588736, 732832, 325616, 782416, 313034, 231466, 352572, 781123, 946072, 179777, 10741, 7310, 774530, 857924, 860555, 45500, 598996, 284565 };
        assertEquals(1283261748110L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case43() {
        int[] apple = { 661898, 386737, 904082, 507233, 208199, 844668, 632610, 65985, 7160, 266888, 784060, 122979, 781888, 186472, 589131, 260217, 823649, 319821, 747734, 894372, 912228, 133946, 507828, 322337, 458861, 44051, 238787, 265876, 881115, 834333, 656752, 925134, 4091, 785990, 184735, 508267, 150250, 963742, 565932, 179555, 720384, 199085, 186692, 734857, 208225, 781776, 75144, 425235, 710446, 988184 };
        int[] orange = { 536401, 476932, 717996, 503033, 207445, 486971, 487019, 360952, 357331, 663583, 851017, 43425, 122228, 638313, 804198, 968076, 756317, 237958, 892479, 986168, 186609, 318993, 782809, 282612, 931720, 665195, 367335, 970541, 295402, 939938, 429282, 741273, 918129, 84150, 979245, 736816, 30522, 234863, 673497, 414497, 957648, 680868, 303147, 147700, 87855, 510646, 999819, 329595, 704544, 252832 };
        assertEquals(623705120692L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case44() {
        int[] apple = { 8376, 871932, 75612, 6989, 10793, 5116, 862513, 60039, 312289, 452005, 494435, 3866, 475234, 169572, 6347, 1920, 82770, 2474, 94598, 33277, 913161, 86105, 7738, 44281, 271764, 2966, 3422, 9309, 257861, 5726, 96791, 5901, 96881, 8910, 807742, 616927, 86238, 26917, 318, 3865, 7156, 38462, 77199, 8075, 94590, 6301, 4191, 51904, 22551, 807451 };
        int[] orange = { 8976, 517964, 555, 69565, 4148, 9098, 151496, 255608, 2289, 9868, 883362, 777654, 68203, 98574, 7082, 1878, 9222, 1432, 9179, 9962, 1393, 111564, 28800, 100669, 933649, 1250, 2236, 185406, 714524, 92372, 347459, 10200, 208773, 7282, 49062, 3408, 204548, 939010, 2952, 48735, 780357, 133972, 22261, 482632, 73847, 48315, 1141, 62690, 906319, 9639 };
        assertEquals(248288277L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case45() {
        int[] apple = { 760025, 724362, 67711, 2412, 17751, 659817, 2972, 5875, 7546, 106392, 334883, 6766, 6953, 874486, 2108, 868053, 726192, 594332, 4778, 62318, 26310, 89480, 373131, 5079, 56427, 3773, 35146, 96227, 496257, 618896, 65832, 696784, 729609, 56844, 61450, 3808, 3947, 8769, 9469, 541536, 36624, 37875, 7657, 129458, 47083, 8657, 684769, 235, 86676, 8514 };
        int[] orange = { 26175, 94507, 5414, 36535, 4809, 242390, 738711, 32393, 73428, 5445, 815808, 8934, 28556, 634883, 183246, 364159, 35526, 251721, 54122, 398584, 40505, 9356, 633859, 194108, 3325, 277189, 377876, 5427, 84248, 536669, 95206, 61141, 14340, 21583, 797492, 146030, 1516, 40270, 66585, 39318, 9497, 8807, 65574, 28557, 877919, 60834, 20712, 74753, 63864, 49616 };
        assertEquals(704641143L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case46() {
        int[] apple = { 7011, 259858, 7836, 28774, 26056, 77527, 68831, 2352, 44400, 1773, 82019, 71307, 9470, 9705, 39656, 6168, 980523, 48533, 78222, 98809, 3107, 47269, 39122, 62497, 29640, 543704, 6917, 327724, 8803, 37422, 710277, 12565, 349903, 46783, 6660, 4098, 6084, 7300, 5413, 18372, 1788, 87187, 280743, 8210, 68890, 383049, 91046, 64544, 39089, 23056 };
        int[] orange = { 7321, 6865, 73934, 146871, 3794, 97846, 7567, 29530, 76508, 3684, 889139, 551377, 46, 79687, 737652, 888027, 6160, 913361, 993311, 29351, 1878, 43923, 8918, 2655, 67767, 9664, 6395, 169716, 26703, 82884, 752893, 27964, 5372, 27327, 501829, 46460, 321744, 7165, 37459, 198119, 38107, 42808, 33676, 430664, 255623, 37849, 73879, 753252, 552627, 291386 };
        assertEquals(584187274L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case47() {
        int[] apple = { 2004, 714174, 861116, 212255, 47126, 49060, 599919, 422368, 78017, 7677, 364530, 392263, 2185, 578025, 17918, 30168, 9589, 8878, 527, 1216, 334884, 32308, 23457, 7899, 24880, 96558, 533659, 75874, 955377, 4368, 32687, 58656, 118, 252036, 60149, 874046, 126286, 306686, 669446, 116851, 52251, 549653, 92742, 3752, 1838, 469340, 79979, 4034, 23647, 244063 };
        int[] orange = { 9070, 8990, 5253, 7116, 42295, 953723, 4599, 56384, 8117, 387447, 92062, 28828, 75124, 10952, 3585, 467859, 999934, 3927, 3996, 481151, 71498, 777742, 709953, 64195, 22230, 7850, 4122, 4690, 2374, 26443, 530912, 63477, 231287, 899061, 3642, 344375, 632479, 7245, 46791, 113007, 2956, 15601, 808043, 19302, 95929, 92739, 7835, 6979, 4412, 43683 };
        assertEquals(473680671L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case48() {
        int[] apple = { 46826, 348015, 52234, 9623, 8706, 71953, 496658, 316885, 34672, 902798, 62515, 189146, 3615, 6954, 31583, 499041, 68273, 27406, 631280, 687914, 36616, 3938, 37543, 856270, 263355, 75393, 52114, 9379, 16560, 591351, 9818, 23940, 6883, 829441, 21292, 1800, 26217, 74578, 2811, 711128, 261520, 732057, 5886, 235032, 6108, 5619, 182476, 6420, 41318, 94778 };
        int[] orange = { 8108, 46048, 89797, 970, 94829, 77769, 145531, 2596, 75405, 660, 7603, 9977, 334146, 817252, 20044, 160644, 9152, 692323, 99645, 1365, 4187, 807992, 57707, 580800, 2171, 79472, 51701, 152055, 42930, 622635, 58314, 59828, 196696, 57864, 4969, 6407, 477484, 6459, 244115, 4132, 438706, 500274, 52131, 60449, 541337, 7359, 8394, 583395, 9063, 3538 };
        assertEquals(1469549080L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case49() {
        int[] apple = { 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000 };
        int[] orange = { 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000 };
        assertEquals(50000002000000L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case50() {
        int[] apple = { 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 999999, 1000000, 1000000, 1000000, 1000000, 999999, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 999999, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000 };
        int[] orange = { 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 999999, 1000000, 1000000, 1000000, 999999, 1000000, 999999, 1000000, 1000000, 1000000, 999999, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 999999, 1000000, 1000000, 999999, 1000000, 1000000, 1000000, 1000000, 999999, 1000000, 1000000, 1000000, 1000000 };
        assertEquals(49999991999999L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case51() {
        int[] apple = { 1000000, 999991, 999992, 999991, 999989, 999989, 999987, 999991, 999985, 999988, 999989, 999988, 999989, 999989, 999995, 999993, 999987, 999990, 999997, 999987, 999988, 999987, 999986, 999988, 999992, 999990, 999991, 999986, 999992, 999994, 999990, 999990, 999989, 999996, 999991, 999988, 999991, 999992, 999988, 999990, 999994, 999991, 999988, 999987, 999986, 999991, 999989, 999992, 999987, 999993 };
        int[] orange = { 1000000, 999994, 999991, 999993, 999991, 999991, 999987, 999991, 999985, 999989, 999987, 999991, 999989, 999993, 999987, 999988, 999990, 999991, 999994, 999989, 999992, 999991, 999991, 999992, 999988, 999983, 999991, 999990, 999991, 999987, 999991, 999985, 999989, 999991, 999989, 999994, 999991, 999991, 999993, 999987, 999990, 999983, 999992, 999994, 999994, 999991, 999994, 999994, 999989, 999992 };
        assertEquals(49999027001769L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case52() {
        int[] apple = { 1000000, 998994, 999034, 998948, 999004, 999031, 998948, 999007, 999006, 999031, 998996, 999007, 998976, 999000, 999049, 998970, 999006, 999029, 999005, 998997, 999019, 998991, 999009, 999031, 998998, 999032, 998990, 999023, 999072, 998992, 998982, 998980, 999001, 998974, 998979, 998974, 999033, 999004, 999025, 998998, 998997, 998988, 998987, 999032, 998953, 998903, 999048, 999012, 998967, 999066 };
        int[] orange = { 1000000, 999036, 998972, 998980, 999017, 998988, 998987, 999016, 998976, 999018, 999038, 999026, 999008, 999029, 998974, 999035, 998992, 999033, 998977, 998967, 998950, 998985, 999074, 998992, 999047, 998958, 998945, 998986, 998985, 999024, 999036, 999003, 998932, 998986, 999043, 999012, 998981, 999006, 999025, 998994, 999000, 998961, 998966, 998975, 999036, 998996, 998998, 999004, 999049, 998997 };
        assertEquals(49902161374348L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case53() {
        int[] apple = { 1000000, 0 };
        int[] orange = { 0, 1000000 };
        assertEquals(1000000L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case54() {
        int[] apple = { 1000000, 1000000, 1000000, 1000000 };
        int[] orange = { 1, 1, 1, 1 };
        assertEquals(5000001L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case55() {
        int[] apple = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        int[] orange = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case56() {
        int[] apple = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
        int[] orange = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case57() {
        int[] apple = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] orange = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(52L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case58() {
        int[] apple = { 0 };
        int[] orange = { 0 };
        assertEquals(0L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case59() {
        int[] apple = { 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000 };
        int[] orange = { 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000 };
        assertEquals(50000002000000L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case60() {
        int[] apple = { 0, 1 };
        int[] orange = { 1, 0 };
        assertEquals(1L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case61() {
        int[] apple = { 1, 20, 20 };
        int[] orange = { 1, 20, 20 };
        assertEquals(9L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case62() {
        int[] apple = { 575245, 977296, 878819, 590397, 87693, 301816, 112992, 740034, 122670, 119398, 489554, 410548, 975826, 121211, 729663, 830212, 533809, 273378, 822762, 626, 737336, 401869, 977996, 2777, 62768, 997440, 829875, 689332, 540557, 456302, 468873, 300561, 120095, 918985, 113756, 639790, 851408, 828016, 30194, 222770, 15681, 303456, 16856, 267507, 170964, 233503, 586677, 863109, 963250, 602332 };
        int[] orange = { 277845, 887639, 760809, 939998, 428652, 54850, 645204, 495732, 796532, 198015, 395420, 636776, 42010, 530181, 687930, 995224, 244055, 588261, 76738, 991546, 747318, 837526, 204201, 134257, 421565, 960598, 306649, 337705, 225551, 925151, 541977, 301413, 938555, 482798, 102505, 348382, 34749, 7066, 659379, 847700, 878210, 725130, 578554, 265484, 650448, 264608, 180774, 45323, 664306, 755177 };
        assertEquals(397598350074L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case63() {
        int[] apple = { 0 };
        int[] orange = { 1 };
        assertEquals(1L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case64() {
        int[] apple = { 173070, 793979, 417367, 692402, 209037, 292997, 408999, 50120, 379390, 415502, 356793, 635980, 923726, 78297, 946608, 641210, 828872, 860160, 721471, 772314, 285339, 705303, 40178, 284137, 492687, 602386, 310876, 902478, 952028, 747490, 65304, 568303, 470884, 151460, 597915, 165890, 119630, 628103, 543375, 509317, 94304, 976720, 747208, 326421, 174506, 937084, 579280 };
        int[] orange = { 970127, 940650, 510423, 684310, 211048, 91439, 819380, 324600, 568206, 844353, 47564, 410619, 284923, 702980, 997286, 401921, 91804, 960168, 556236, 660949, 580064, 139520, 919069, 808054, 968047, 977605, 619477, 559861, 589351, 233825, 906888, 75845, 742816, 517999, 20504, 623268, 268745, 804644, 659615, 154683, 759810, 141854, 148745, 971121, 645550, 763872, 397006 };
        assertEquals(2532041241378L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case65() {
        int[] apple = { 2, 2, 2 };
        int[] orange = { 2, 2, 2 };
        assertEquals(16L, winterandpresents.getNumber(apple, orange));
    }

    @Test
    public void case66() {
        int[] apple = { 16808, 475250, 650074, 943659, 108931, 211273, 27545, 850879, 777924, 237710, 564441, 438166, 484493, 243043, 807988, 522504, 282328, 531730, 378841, 542613, 544304, 833170, 817710, 97158, 129561, 570934, 493100, 280279, 351817, 795336, 899098, 807827, 613513, 929268, 723811, 877634, 580980, 379150, 236580, 558822, 511968, 10673, 901394, 819337, 125486, 91746, 425229, 894092, 640195, 186358 };
        int[] orange = { 35002, 921154, 616709, 357945, 515669, 571491, 788125, 702197, 509531, 60904, 727723, 454667, 728550, 118025, 797802, 806854, 540978, 847409, 308229, 374934, 260299, 938982, 28636, 408014, 623866, 389815, 739064, 554537, 339426, 1670, 724116, 220095, 75630, 446502, 546518, 934196, 30106, 810405, 319452, 194299, 782189, 821124, 799506, 246883, 406753, 731567, 936717, 130338, 354439, 53145 };
        assertEquals(63452738768L, winterandpresents.getNumber(apple, orange));
    }

}
