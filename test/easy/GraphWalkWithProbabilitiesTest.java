package topc.test.easy;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.easy.*;

public class GraphWalkWithProbabilitiesTest {
  double DELTA = 1.0e-09;
  GraphWalkWithProbabilities graphwalkwithprobabilities = new GraphWalkWithProbabilities();

  @Test
  public void case1() {
    String[] graph = { "1" };
    int[] winprob = { 1 };
    int[] looseprob = { 1 };
    int Start = 0;
    assertEquals(0.5, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5);
  }

  @Test
  public void case2() {
    String[] graph = { "11", "11" };
    int[] winprob = { 60, 40 };
    int[] looseprob = { 40, 60 };
    int Start = 0;
    assertEquals(0.6, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.6);
  }

  @Test
  public void case3() {
    String[] graph = { "11", "11" };
    int[] winprob = { 2, 3 };
    int[] looseprob = { 3, 4 };
    int Start = 0;
    assertEquals(0.4285714285714286, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.4285714285714286);
  }

  @Test
  public void case4() {
    String[] graph = { "110", "011", "001" };
    int[] winprob = { 2, 1, 10 };
    int[] looseprob = { 20, 20, 10 };
    int Start = 0;
    assertEquals(0.405, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.405);
  }

  @Test
  public void case5() {
    String[] graph = { "111", "111", "011" };
    int[] winprob = { 100, 1, 1 };
    int[] looseprob = { 0, 50, 50 };
    int Start = 2;
    assertEquals(0.5, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5);
  }

  @Test
  public void case6() {
    String[] graph = { "1001010000", "1101000010", "0110001110", "0101010000", "1110100100", "0000011010", "1000011000", "0101001100", "1100000011", "0011001011" };
    int[] winprob = { 3, 1, 0, 3, 5, 5, 2, 0, 5, 3 };
    int[] looseprob = { 5, 27, 36, 11, 48, 32, 49, 15, 18, 39 };
    int Start = 1;
    assertEquals(0.375, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.375);
  }

  @Test
  public void case7() {
    String[] graph = { "1001010000", "1101000010", "0110001110", "0101010000", "1110100100", "0000011010", "1000011000", "0101001100", "1100000011", "0011001011" };
    int[] winprob = { 3, 1, 0, 3, 5, 5, 2, 0, 5, 3 };
    int[] looseprob = { 5, 27, 36, 11, 48, 32, 49, 15, 18, 39 };
    int Start = 9;
    assertEquals(0.33875, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.33875);
  }

  @Test
  public void case8() {
    String[] graph = { "1001010000", "1101000010", "0110001110", "0101010000", "1110100100", "0000011010", "1000011000", "0101001100", "1100000011", "0011001011" };
    int[] winprob = { 3, 1, 0, 3, 5, 5, 2, 0, 5, 3 };
    int[] looseprob = { 5, 27, 36, 11, 48, 32, 49, 15, 18, 39 };
    int Start = 5;
    assertEquals(0.33875, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.33875);
  }

  @Test
  public void case9() {
    String[] graph = { "1001010000", "1101000010", "0110001110", "0101010000", "1110100100", "0000011010", "1000011000", "0101001100", "1100000011", "0011001011" };
    int[] winprob = { 3, 1, 0, 3, 5, 5, 2, 0, 5, 3 };
    int[] looseprob = { 5, 27, 36, 11, 48, 32, 49, 15, 18, 39 };
    int Start = 3;
    assertEquals(0.28, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.28);
  }

  @Test
  public void case10() {
    String[] graph = { "1011010000", "1101000011", "0110001110", "0101010010", "1111100100", "0000011010", "1100011000", "0101001100", "1100000011", "0011001011" };
    int[] winprob = { 1, 7, 0, 1, 1, 5, 4, 6, 1, 1 };
    int[] looseprob = { 5, 27, 36, 11, 48, 32, 49, 15, 18, 39 };
    int Start = 7;
    assertEquals(0.2857142857142857, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.2857142857142857);
  }

  @Test
  public void case11() {
    String[] graph = { "101101000010010", "010110110001110", "011001001011110", "001100000001010", "110011000001010", "011001100000011", "001100101011001", "101001010010001", "000100001000010", "110100000111010", "101110100010100", "000100101011000", "010010101010101", "111111110101011", "110101000010111" };
    int[] winprob = { 0, 2, 4, 1, 6, 5, 6, 4, 3, 1, 7, 0, 7, 2, 7 };
    int[] looseprob = { 45, 27, 8, 5, 10, 21, 25, 20, 34, 2, 27, 31, 35, 47, 30 };
    int Start = 11;
    assertEquals(0.3233333333333333, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.3233333333333333);
  }

  @Test
  public void case12() {
    String[] graph = { "101101000010010", "010110110001110", "011001001011110", "001100000001010", "110011000001010", "011001100000011", "001100101011001", "101001010010001", "000100001000010", "110100000111010", "101110100010100", "000100101011000", "010010101010101", "111111110101011", "110101000010111" };
    int[] winprob = { 0, 2, 4, 1, 6, 5, 6, 4, 3, 1, 7, 0, 7, 2, 7 };
    int[] looseprob = { 45, 27, 8, 5, 10, 21, 25, 20, 34, 2, 27, 31, 35, 47, 30 };
    int Start = 14;
    assertEquals(0.3233333333333333, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.3233333333333333);
  }

  @Test
  public void case13() {
    String[] graph = { "101101000010010", "010110110001110", "011001001011110", "001100000001010", "110011000001010", "011001100000011", "001100101011001", "101001010010001", "000100001000010", "110100000111010", "101110100010100", "000100101011000", "010010101010101", "111111110101011", "110101000010111" };
    int[] winprob = { 0, 2, 4, 1, 6, 5, 6, 4, 3, 1, 7, 0, 7, 2, 7 };
    int[] looseprob = { 45, 27, 8, 5, 10, 21, 25, 20, 34, 2, 27, 31, 35, 47, 30 };
    int Start = 8;
    assertEquals(0.3233333333333333, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.3233333333333333);
  }

  @Test
  public void case14() {
    String[] graph = { "10110100001001000011", "01100011100100010010", "11110001000000001010", "11010100000101001100", "11001000110011001010", "11001101001010010001", "00010010100001011010", "00000111101011101000", "10100000100101010000", "01001010111000111111", "11101010011101010000", "10110101000100100100", "00000010011110100001", "00010010100001011110", "00100110000110110010", "01001010010010010001", "00000001010001111000", "10001110101000000110", "10000000010100010111", "01001101111000100011" };
    int[] winprob = { 5, 3, 0, 6, 5, 2, 7, 7, 7, 5, 3, 1, 5, 4, 6, 0, 3, 5, 6, 3 };
    int[] looseprob = { 38, 16, 11, 14, 28, 19, 24, 37, 35, 3, 45, 2, 26, 40, 23, 46, 47, 17, 49, 29 };
    int Start = 1;
    assertEquals(0.4131562500000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.4131562500000001);
  }

  @Test
  public void case15() {
    String[] graph = { "10110100001001000011", "01100011100100010010", "11110001000000001010", "11010100000101001100", "11001000110011001010", "11001101001010010001", "00010010100001011010", "00000111101011101000", "10100000100101010000", "01001010111000111111", "11101010011101010000", "10110101000100100100", "00000010011110100001", "00010010100001011110", "00100110000110110010", "01001010010010010001", "00000001010001111000", "10001110101000000110", "10000000010100010111", "01001101111000100011" };
    int[] winprob = { 5, 3, 0, 6, 5, 2, 7, 7, 7, 5, 3, 1, 5, 4, 6, 0, 3, 5, 6, 3 };
    int[] looseprob = { 38, 16, 11, 14, 28, 19, 24, 37, 35, 3, 45, 2, 26, 40, 23, 46, 47, 17, 49, 29 };
    int Start = 2;
    assertEquals(0.3925000000000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.3925000000000001);
  }

  @Test
  public void case16() {
    String[] graph = { "10110100001001000011", "01100011100100010010", "11110001000000001010", "11010100000101001100", "11001000110011001010", "11001101001010010001", "00010010100001011010", "00000111101011101000", "10100000100101010000", "01001010111000111111", "11101010011101010000", "10110101000100100100", "00000010011110100001", "00010010100001011110", "00100110000110110010", "01001010010010010001", "00000001010001111000", "10001110101000000110", "10000000010100010111", "01001101111000100011" };
    int[] winprob = { 5, 3, 0, 6, 5, 2, 7, 7, 7, 5, 3, 1, 5, 4, 6, 0, 3, 5, 6, 3 };
    int[] looseprob = { 38, 16, 11, 14, 28, 19, 24, 37, 35, 3, 45, 2, 26, 40, 23, 46, 47, 17, 49, 29 };
    int Start = 3;
    assertEquals(0.41562500000000013, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.41562500000000013);
  }

  @Test
  public void case17() {
    String[] graph = { "10110100001001000011", "01100011100100010010", "11110001000000001010", "11010100000101001100", "11001000110011001010", "11001101001010010001", "00010010100001011010", "00000111101011101000", "10100000100101010000", "01001010111000111111", "11101010011101010000", "10110101000100100100", "00000010011110100001", "00010010100001011110", "00100110000110110010", "01001010010010010001", "00000001010001111000", "10001110101000000110", "10000000010100010111", "01001101111000100011" };
    int[] winprob = { 5, 3, 0, 6, 5, 2, 7, 7, 7, 5, 3, 1, 5, 4, 6, 0, 3, 5, 6, 3 };
    int[] looseprob = { 38, 16, 11, 14, 28, 19, 24, 37, 35, 3, 45, 2, 26, 40, 23, 46, 47, 17, 49, 29 };
    int Start = 4;
    assertEquals(0.6250000000000002, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.6250000000000002);
  }

  @Test
  public void case18() {
    String[] graph = { "10110100001001000011", "01100011100100010010", "11110001000000001010", "11010100000101001100", "11001000110011001010", "11001101001010010001", "00010010100001011010", "00000111101011101000", "10100000100101010000", "01001010111000111111", "11101010011101010000", "10110101000100100100", "00000010011110100001", "00010010100001011110", "00100110000110110010", "01001010010010010001", "00000001010001111000", "10001110101000000110", "10000000010100010111", "01001101111000100011" };
    int[] winprob = { 5, 3, 0, 6, 5, 2, 7, 7, 7, 5, 3, 1, 5, 4, 6, 0, 3, 5, 6, 3 };
    int[] looseprob = { 38, 16, 11, 14, 28, 19, 24, 37, 35, 3, 45, 2, 26, 40, 23, 46, 47, 17, 49, 29 };
    int Start = 5;
    assertEquals(0.4812500000000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.4812500000000001);
  }

  @Test
  public void case19() {
    String[] graph = { "10110100001001000011", "01100011100100010010", "11110001000000001010", "11010100000101001100", "11001000110011001010", "11001101001010010001", "00010010100001011010", "00000111101011101000", "10100000100101010000", "01001010111000111111", "11101010011101010000", "10110101000100100100", "00000010011110100001", "00010010100001011110", "00100110000110110010", "01001010010010010001", "00000001010001111000", "10001110101000000110", "10000000010100010111", "01001101111000100011" };
    int[] winprob = { 5, 3, 0, 6, 5, 2, 7, 7, 7, 5, 3, 1, 5, 4, 6, 0, 3, 5, 6, 3 };
    int[] looseprob = { 38, 16, 11, 14, 28, 19, 24, 37, 35, 3, 45, 2, 26, 40, 23, 46, 47, 17, 49, 29 };
    int Start = 6;
    assertEquals(0.3925000000000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.3925000000000001);
  }

  @Test
  public void case20() {
    String[] graph = { "10110100001001000011", "01100011100100010010", "11110001000000001010", "11010100000101001100", "11001000110011001010", "11001101001010010001", "00010010100001011010", "00000111101011101000", "10100000100101010000", "01001010111000111111", "11101010011101010000", "10110101000100100100", "00000010011110100001", "00010010100001011110", "00100110000110110010", "01001010010010010001", "00000001010001111000", "10001110101000000110", "10000000010100010111", "01001101111000100011" };
    int[] winprob = { 5, 3, 0, 6, 5, 2, 7, 7, 7, 5, 3, 1, 5, 4, 6, 0, 3, 5, 6, 3 };
    int[] looseprob = { 38, 16, 11, 14, 28, 19, 24, 37, 35, 3, 45, 2, 26, 40, 23, 46, 47, 17, 49, 29 };
    int Start = 7;
    assertEquals(0.4812500000000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.4812500000000001);
  }

  @Test
  public void case21() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 1, 2, 2, 2, 7, 6, 0, 3, 1, 0, 5, 2, 2, 5, 5, 4, 7, 3, 1, 2, 3, 5, 3, 2, 4, 2, 5, 4, 4, 7 };
    int[] looseprob = { 9, 36, 27, 38, 40, 12, 26, 15, 40, 50, 17, 30, 22, 35, 12, 16, 16, 24, 3, 12, 50, 48, 12, 30, 14, 16, 4, 39, 31, 13 };
    int Start = 23;
    assertEquals(0.5555555555555557, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5555555555555557);
  }

  @Test
  public void case22() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 1, 2, 2, 2, 7, 6, 0, 3, 1, 0, 5, 2, 2, 5, 5, 4, 7, 3, 1, 2, 3, 5, 3, 2, 4, 2, 5, 4, 4, 7 };
    int[] looseprob = { 9, 36, 27, 38, 40, 12, 26, 15, 40, 50, 17, 30, 22, 35, 12, 16, 16, 24, 3, 12, 50, 48, 12, 30, 14, 16, 4, 39, 31, 13 };
    int Start = 24;
    assertEquals(0.5055333333333334, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5055333333333334);
  }

  @Test
  public void case23() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 1, 2, 2, 2, 7, 6, 0, 3, 1, 0, 5, 2, 2, 5, 5, 4, 7, 3, 1, 2, 3, 5, 3, 2, 4, 2, 5, 4, 4, 7 };
    int[] looseprob = { 9, 36, 27, 38, 40, 12, 26, 15, 40, 50, 17, 30, 22, 35, 12, 16, 16, 24, 3, 12, 50, 48, 12, 30, 14, 16, 4, 39, 31, 13 };
    int Start = 25;
    assertEquals(0.5433333333333334, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5433333333333334);
  }

  @Test
  public void case24() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 1, 2, 2, 2, 7, 6, 0, 3, 1, 0, 5, 2, 2, 5, 5, 4, 7, 3, 1, 2, 3, 5, 3, 2, 4, 2, 5, 4, 4, 7 };
    int[] looseprob = { 9, 36, 27, 38, 40, 12, 26, 15, 40, 50, 17, 30, 22, 35, 12, 16, 16, 24, 3, 12, 50, 48, 12, 30, 14, 16, 4, 39, 31, 13 };
    int Start = 26;
    assertEquals(0.5555555555555557, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5555555555555557);
  }

  @Test
  public void case25() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 1, 2, 2, 2, 7, 6, 0, 3, 1, 0, 5, 2, 2, 5, 5, 4, 7, 3, 1, 2, 3, 5, 3, 2, 4, 2, 5, 4, 4, 7 };
    int[] looseprob = { 9, 36, 27, 38, 40, 12, 26, 15, 40, 50, 17, 30, 22, 35, 12, 16, 16, 24, 3, 12, 50, 48, 12, 30, 14, 16, 4, 39, 31, 13 };
    int Start = 27;
    assertEquals(0.5100000000000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5100000000000001);
  }

  @Test
  public void case26() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 10, 6, 6, 1, 3, 6, 0, 2, 0, 5, 4, 10, 6, 7, 1, 1, 10, 8, 0, 3, 1, 3, 3, 4, 6, 10, 3, 9, 9, 2 };
    int[] looseprob = { 27, 21, 19, 36, 57, 24, 41, 41, 54, 38, 37, 51, 45, 20, 57, 21, 32, 64, 43, 3, 65, 27, 5, 57, 36, 37, 49, 66, 66, 9 };
    int Start = 29;
    assertEquals(0.435, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.435);
  }

  @Test
  public void case27() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 10, 6, 6, 1, 3, 6, 0, 2, 0, 5, 4, 10, 6, 7, 1, 1, 10, 8, 0, 3, 1, 3, 3, 4, 6, 10, 3, 9, 9, 2 };
    int[] looseprob = { 27, 21, 19, 36, 57, 24, 41, 41, 54, 38, 37, 51, 45, 20, 57, 21, 32, 64, 43, 3, 65, 27, 5, 57, 36, 37, 49, 66, 66, 9 };
    int Start = 13;
    assertEquals(0.5, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5);
  }

  @Test
  public void case28() {
    String[] graph = { "100101000010010000100110001110", "010001000011100001000000001010", "101001000001010011001100000001", "001100101001001001001010010001", "000010000000010010100000011010", "101011100010100000100001010000", "000010101010001111111100101001", "110101010010110101000000100100", "000000101110001000000001001010", "000001111100100110000110000010", "010010000110100100010000000101", "000011100011001100101000000110", "000000000101100101010100110111", "000000001000010010111011011000", "101010001001001000001000000001", "110001000000101110011001010001", "000000111111101010010011011010", "010100000111000101001001011010", "010010110000100110100000011110", "001110000000000000011010000010", "010001101010000100001001000110", "000010100000010011101100000000", "000100000001001101000011001010", "101010110001100000001111101000", "001101100100110000001001100010", "000001101100000011111010110000", "100000101000000001000001001110", "100000111101000100010000110111", "110000001000000010001100000010", "101000101001111110100000100111" };
    int[] winprob = { 10, 6, 6, 1, 3, 6, 0, 2, 0, 5, 4, 10, 6, 7, 1, 1, 10, 8, 0, 3, 1, 3, 3, 4, 6, 10, 3, 9, 9, 2 };
    int[] looseprob = { 27, 21, 19, 36, 57, 24, 41, 41, 54, 38, 37, 51, 45, 20, 57, 21, 32, 64, 43, 3, 65, 27, 5, 57, 36, 37, 49, 66, 66, 9 };
    int Start = 2;
    assertEquals(0.435, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.435);
  }

  @Test
  public void case29() {
    String[] graph = { "1001010000100000000001100011100000010000", "1110000100000000100010000100000100001100", "0110000001000100100001001001001010000001", "0001000000000100101000000110101010101000", "1010100010000101000000001010000000111111", "1100111001110101000010110101000000100100", "0000001001100000000000010010100000011110", "0010011100001000001000000000010010010000", "0000000111000011100010001100101000000100", "0000000001010001010101001001110000000010", "0000001010100001100010100000100100100000", "1000000001110001000000101010001001000001", "0000000000111010000000110010100101000000", "1100010100100101101000001011000010010000", "0000011110001010000000000000001010000010", "0100001000100001000000010001100000101000", "0001001110100000100000010000000100100100", "0000000010101010110000000000001110101000", "0011011001001100001010010000100000011011", "0000001110101000000110000010100000000100", "0000000010100000101011000100010000010011", "0100000010000000100001000000001010001010", "0111101010000010011000100111000011010010", "0100100100100010000100110100100001000100", "1010000000110010000100001000000000100010", "0000110110000000101011101100101011110100", "1100000000100101001100000110000000010000", "0011000100000010000010001001001000000000", "0010000001101000100001000100110000001000", "0101010010000000000000010100111010110000", "1100000000001100100000001000011000100000", "0100010011110010100101000000010100001010", "1100001000000000000000011010100011100100", "0000001000001000010001010000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011010000100010000", "0000000001000000010010000000100000001000", "1001010101001110000010000100011000000101", "1000010110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 6, 5, 0, 3, 2, 7, 4, 1, 4, 4, 0, 3, 4, 7, 1, 3, 0, 8, 4, 3, 1, 7, 3, 4, 4, 7, 2, 8, 3, 0, 6, 5, 1, 5, 8, 4, 0, 6, 4, 2 };
    int[] looseprob = { 28, 70, 43, 20, 29, 26, 37, 54, 33, 57, 18, 6, 64, 61, 57, 34, 37, 40, 32, 62, 7, 66, 30, 25, 59, 11, 31, 2, 47, 70, 6, 23, 56, 62, 26, 67, 47, 33, 70, 22 };
    int Start = 17;
    assertEquals(0.5774400000000002, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5774400000000002);
  }

  @Test
  public void case30() {
    String[] graph = { "1001010000100000000001100011100000010000", "1110000100000000100010000100000100001100", "0110000001000100100001001001001010000001", "0001000000000100101000000110101010101000", "1010100010000101000000001010000000111111", "1100111001110101000010110101000000100100", "0000001001100000000000010010100000011110", "0010011100001000001000000000010010010000", "0000000111000011100010001100101000000100", "0000000001010001010101001001110000000010", "0000001010100001100010100000100100100000", "1000000001110001000000101010001001000001", "0000000000111010000000110010100101000000", "1100010100100101101000001011000010010000", "0000011110001010000000000000001010000010", "0100001000100001000000010001100000101000", "0001001110100000100000010000000100100100", "0000000010101010110000000000001110101000", "0011011001001100001010010000100000011011", "0000001110101000000110000010100000000100", "0000000010100000101011000100010000010011", "0100000010000000100001000000001010001010", "0111101010000010011000100111000011010010", "0100100100100010000100110100100001000100", "1010000000110010000100001000000000100010", "0000110110000000101011101100101011110100", "1100000000100101001100000110000000010000", "0011000100000010000010001001001000000000", "0010000001101000100001000100110000001000", "0101010010000000000000010100111010110000", "1100000000001100100000001000011000100000", "0100010011110010100101000000010100001010", "1100001000000000000000011010100011100100", "0000001000001000010001010000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011010000100010000", "0000000001000000010010000000100000001000", "1001010101001110000010000100011000000101", "1000010110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 6, 5, 0, 3, 2, 7, 4, 1, 4, 4, 0, 3, 4, 7, 1, 3, 0, 8, 4, 3, 1, 7, 3, 4, 4, 7, 2, 8, 3, 0, 6, 5, 1, 5, 8, 4, 0, 6, 4, 2 };
    int[] looseprob = { 28, 70, 43, 20, 29, 26, 37, 54, 33, 57, 18, 6, 64, 61, 57, 34, 37, 40, 32, 62, 7, 66, 30, 25, 59, 11, 31, 2, 47, 70, 6, 23, 56, 62, 26, 67, 47, 33, 70, 22 };
    int Start = 22;
    assertEquals(0.8, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.8);
  }

  @Test
  public void case31() {
    String[] graph = { "1001010000100000000001100011100000010000", "1110000100000000100010000100000100001100", "0110000001000100100001001001001010000001", "0001000000000100101000000110101010101000", "1010100010000101000000001010000000111111", "1100111001110101000010110101000000100100", "0000001001100000000000010010100000011110", "0010011100001000001000000000010010010000", "0000000111000011100010001100101000000100", "0000000001010001010101001001110000000010", "0000001010100001100010100000100100100000", "1000000001110001000000101010001001000001", "0000000000111010000000110010100101000000", "1100010100100101101000001011000010010000", "0000011110001010000000000000001010000010", "0100001000100001000000010001100000101000", "0001001110100000100000010000000100100100", "0000000010101010110000000000001110101000", "0011011001001100001010010000100000011011", "0000001110101000000110000010100000000100", "0000000010100000101011000100010000010011", "0100000010000000100001000000001010001010", "0111101010000010011000100111000011010010", "0100100100100010000100110100100001000100", "1010000000110010000100001000000000100010", "0000110110000000101011101100101011110100", "1100000000100101001100000110000000010000", "0011000100000010000010001001001000000000", "0010000001101000100001000100110000001000", "0101010010000000000000010100111010110000", "1100000000001100100000001000011000100000", "0100010011110010100101000000010100001010", "1100001000000000000000011010100011100100", "0000001000001000010001010000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011010000100010000", "0000000001000000010010000000100000001000", "1001010101001110000010000100011000000101", "1000010110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 6, 5, 0, 3, 2, 7, 4, 1, 4, 4, 0, 3, 4, 7, 1, 3, 0, 8, 4, 3, 1, 7, 3, 4, 4, 7, 2, 8, 3, 0, 6, 5, 1, 5, 8, 4, 0, 6, 4, 2 };
    int[] looseprob = { 28, 70, 43, 20, 29, 26, 37, 54, 33, 57, 18, 6, 64, 61, 57, 34, 37, 40, 32, 62, 7, 66, 30, 25, 59, 11, 31, 2, 47, 70, 6, 23, 56, 62, 26, 67, 47, 33, 70, 22 };
    int Start = 31;
    assertEquals(0.6060000000000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.6060000000000001);
  }

  @Test
  public void case32() {
    String[] graph = { "1001010000100000000001100011100000010000", "1110000100000000100010000100000100001100", "0110000001000100100001001001001010000001", "0001000000000100101000000110101010101000", "1010100010000101000000001010000000111111", "1100111001110101000010110101000000100100", "0000001001100000000000010010100000011110", "0010011100001000001000000000010010010000", "0000000111000011100010001100101000000100", "0000000001010001010101001001110000000010", "0000001010100001100010100000100100100000", "1000000001110001000000101010001001000001", "0000000000111010000000110010100101000000", "1100010100100101101000001011000010010000", "0000011110001010000000000000001010000010", "0100001000100001000000010001100000101000", "0001001110100000100000010000000100100100", "0000000010101010110000000000001110101000", "0011011001001100001010010000100000011011", "0000001110101000000110000010100000000100", "0000000010100000101011000100010000010011", "0100000010000000100001000000001010001010", "0111101010000010011000100111000011010010", "0100100100100010000100110100100001000100", "1010000000110010000100001000000000100010", "0000110110000000101011101100101011110100", "1100000000100101001100000110000000010000", "0011000100000010000010001001001000000000", "0010000001101000100001000100110000001000", "0101010010000000000000010100111010110000", "1100000000001100100000001000011000100000", "0100010011110010100101000000010100001010", "1100001000000000000000011010100011100100", "0000001000001000010001010000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011010000100010000", "0000000001000000010010000000100000001000", "1001010101001110000010000100011000000101", "1000010110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 6, 5, 0, 3, 2, 7, 4, 1, 4, 4, 0, 3, 4, 7, 1, 3, 0, 8, 4, 3, 1, 7, 3, 4, 4, 7, 2, 8, 3, 0, 6, 5, 1, 5, 8, 4, 0, 6, 4, 2 };
    int[] looseprob = { 28, 70, 43, 20, 29, 26, 37, 54, 33, 57, 18, 6, 64, 61, 57, 34, 37, 40, 32, 62, 7, 66, 30, 25, 59, 11, 31, 2, 47, 70, 6, 23, 56, 62, 26, 67, 47, 33, 70, 22 };
    int Start = 39;
    assertEquals(0.6060000000000001, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.6060000000000001);
  }

  @Test
  public void case33() {
    String[] graph = { "1001000000100000000001100011100000010000", "1100000100000000000010000100000100001100", "0010000001000000100001001001001000000001", "0001000000000000101000000110100010101000", "1000100010000101000000001010000000111111", "1100111001010101000000110101000000100000", "0000001001100000000000010000100000011110", "0010001100001000001000000000010010000000", "0000000111000011100010001100101000000000", "0000000001010001000101001001100000000010", "0000001010100000000010100000000100100000", "1000000000110001000000101010001001000001", "0000000000011000000000110010100100000000", "1100010100100101101000001011000000010000", "0000001110000010000000000000001010000000", "0100001000100001000000010001100000100000", "0001001110100000100000010000000100100100", "0000000010101010010000000000001110101000", "0011011001001000001010010000100000011010", "0000001100101000000110000010100000000100", "0000000000000000101011000100010000010011", "0100000010000000100001000000001010001010", "0011101010000010011000100110000011010010", "0100000100100010000100110100100001000100", "1010000000110000000100001000000000100010", "0000110110000000101011100100001011110100", "1100000000100101000100000010000000000000", "0011000100000010000010001001001000000000", "0010000001101000100000000000110000001000", "0101000010000000000000010100111010110000", "1100000000001000100000001000011000100000", "0100010011100010100101000000010100000010", "1100000000000000000000011010100011100100", "0000001000001000010000000000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011000000100010000", "0000000001000000010010000000100000001000", "0001010101000110000010000100011000000101", "1000000110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 5, 7, 6, 5, 6, 7, 0, 2, 2, 7, 1, 1, 7, 0, 4, 5, 2, 7, 6, 5, 4, 5, 2, 5, 0, 0, 5, 3, 6, 0, 3, 2, 2, 3, 1, 3, 6, 2, 1, 7 };
    int[] looseprob = { 48, 8, 49, 18, 19, 43, 19, 2, 12, 52, 13, 11, 49, 8, 17, 44, 7, 15, 41, 4, 59, 44, 11, 24, 22, 51, 55, 40, 46, 5, 49, 42, 21, 35, 56, 10, 58, 39, 47, 11 };
    int Start = 19;
    assertEquals(0.5555555555555557, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5555555555555557);
  }

  @Test
  public void case34() {
    String[] graph = { "1001000000100000000001100011100000010000", "1100000100000000000010000100000100001100", "0010000001000000100001001001001000000001", "0001000000000000101000000110100010101000", "1000100010000101000000001010000000111111", "1100111001010101000000110101000000100000", "0000001001100000000000010000100000011110", "0010001100001000001000000000010010000000", "0000000111000011100010001100101000000000", "0000000001010001000101001001100000000010", "0000001010100000000010100000000100100000", "1000000000110001000000101010001001000001", "0000000000011000000000110010100100000000", "1100010100100101101000001011000000010000", "0000001110000010000000000000001010000000", "0100001000100001000000010001100000100000", "0001001110100000100000010000000100100100", "0000000010101010010000000000001110101000", "0011011001001000001010010000100000011010", "0000001100101000000110000010100000000100", "0000000000000000101011000100010000010011", "0100000010000000100001000000001010001010", "0011101010000010011000100110000011010010", "0100000100100010000100110100100001000100", "1010000000110000000100001000000000100010", "0000110110000000101011100100001011110100", "1100000000100101000100000010000000000000", "0011000100000010000010001001001000000000", "0010000001101000100000000000110000001000", "0101000010000000000000010100111010110000", "1100000000001000100000001000011000100000", "0100010011100010100101000000010100000010", "1100000000000000000000011010100011100100", "0000001000001000010000000000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011000000100010000", "0000000001000000010010000000100000001000", "0001010101000110000010000100011000000101", "1000000110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 5, 7, 6, 5, 6, 7, 0, 2, 2, 7, 1, 1, 7, 0, 4, 5, 2, 7, 6, 5, 4, 5, 2, 5, 0, 0, 5, 3, 6, 0, 3, 2, 2, 3, 1, 3, 6, 2, 1, 7 };
    int[] looseprob = { 48, 8, 49, 18, 19, 43, 19, 2, 12, 52, 13, 11, 49, 8, 17, 44, 7, 15, 41, 4, 59, 44, 11, 24, 22, 51, 55, 40, 46, 5, 49, 42, 21, 35, 56, 10, 58, 39, 47, 11 };
    int Start = 27;
    assertEquals(0.5, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5);
  }

  @Test
  public void case35() {
    String[] graph = { "1001000000100000000001100011100000010000", "1100000100000000000010000100000100001100", "0010000001000000100001001001001000000001", "0001000000000000101000000110100010101000", "1000100010000101000000001010000000111111", "1100111001010101000000110101000000100000", "0000001001100000000000010000100000011110", "0010001100001000001000000000010010000000", "0000000111000011100010001100101000000000", "0000000001010001000101001001100000000010", "0000001010100000000010100000000100100000", "1000000000110001000000101010001001000001", "0000000000011000000000110010100100000000", "1100010100100101101000001011000000010000", "0000001110000010000000000000001010000000", "0100001000100001000000010001100000100000", "0001001110100000100000010000000100100100", "0000000010101010010000000000001110101000", "0011011001001000001010010000100000011010", "0000001100101000000110000010100000000100", "0000000000000000101011000100010000010011", "0100000010000000100001000000001010001010", "0011101010000010011000100110000011010010", "0100000100100010000100110100100001000100", "1010000000110000000100001000000000100010", "0000110110000000101011100100001011110100", "1100000000100101000100000010000000000000", "0011000100000010000010001001001000000000", "0010000001101000100000000000110000001000", "0101000010000000000000010100111010110000", "1100000000001000100000001000011000100000", "0100010011100010100101000000010100000010", "1100000000000000000000011010100011100100", "0000001000001000010000000000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011000000100010000", "0000000001000000010010000000100000001000", "0001010101000110000010000100011000000101", "1000000110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 5, 7, 6, 5, 6, 7, 0, 2, 2, 7, 1, 1, 7, 0, 4, 5, 2, 7, 6, 5, 4, 5, 2, 5, 0, 0, 5, 3, 6, 0, 3, 2, 2, 3, 1, 3, 6, 2, 1, 7 };
    int[] looseprob = { 48, 8, 49, 18, 19, 43, 19, 2, 12, 52, 13, 11, 49, 8, 17, 44, 7, 15, 41, 4, 59, 44, 11, 24, 22, 51, 55, 40, 46, 5, 49, 42, 21, 35, 56, 10, 58, 39, 47, 11 };
    int Start = 31;
    assertEquals(0.5555555555555557, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5555555555555557);
  }

  @Test
  public void case36() {
    String[] graph = { "1001000000100000000001100011100000010000", "1100000100000000000010000100000100001100", "0010000001000000100001001001001000000001", "0001000000000000101000000110100010101000", "1000100010000101000000001010000000111111", "1100111001010101000000110101000000100000", "0000001001100000000000010000100000011110", "0010001100001000001000000000010010000000", "0000000111000011100010001100101000000000", "0000000001010001000101001001100000000010", "0000001010100000000010100000000100100000", "1000000000110001000000101010001001000001", "0000000000011000000000110010100100000000", "1100010100100101101000001011000000010000", "0000001110000010000000000000001010000000", "0100001000100001000000010001100000100000", "0001001110100000100000010000000100100100", "0000000010101010010000000000001110101000", "0011011001001000001010010000100000011010", "0000001100101000000110000010100000000100", "0000000000000000101011000100010000010011", "0100000010000000100001000000001010001010", "0011101010000010011000100110000011010010", "0100000100100010000100110100100001000100", "1010000000110000000100001000000000100010", "0000110110000000101011100100001011110100", "1100000000100101000100000010000000000000", "0011000100000010000010001001001000000000", "0010000001101000100000000000110000001000", "0101000010000000000000010100111010110000", "1100000000001000100000001000011000100000", "0100010011100010100101000000010100000010", "1100000000000000000000011010100011100100", "0000001000001000010000000000010001000010", "0001000011000000100000100000000000100000", "1000000000100001000010011000000100010000", "0000000001000000010010000000100000001000", "0001010101000110000010000100011000000101", "1000000110010000001000000000010001000010", "0000010100010001000000000000000010000011" };
    int[] winprob = { 5, 7, 6, 5, 6, 7, 0, 2, 2, 7, 1, 1, 7, 0, 4, 5, 2, 7, 6, 5, 4, 5, 2, 5, 0, 0, 5, 3, 6, 0, 3, 2, 2, 3, 1, 3, 6, 2, 1, 7 };
    int[] looseprob = { 48, 8, 49, 18, 19, 43, 19, 2, 12, 52, 13, 11, 49, 8, 17, 44, 7, 15, 41, 4, 59, 44, 11, 24, 22, 51, 55, 40, 46, 5, 49, 42, 21, 35, 56, 10, 58, 39, 47, 11 };
    int Start = 33;
    assertEquals(0.47025, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.47025);
  }

  @Test
  public void case37() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 7;
    assertEquals(0.5, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5);
  }

  @Test
  public void case38() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 21;
    assertEquals(0.5, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5);
  }

  @Test
  public void case39() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 45;
    assertEquals(0.4, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.4);
  }

  @Test
  public void case40() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 49;
    assertEquals(0.435, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.435);
  }

  @Test
  public void case41() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 20;
    assertEquals(0.485, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.485);
  }

  @Test
  public void case42() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 30;
    assertEquals(0.48, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.48);
  }

  @Test
  public void case43() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 12;
    assertEquals(0.44, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.44);
  }

  @Test
  public void case44() {
    String[] graph = {};
    int[] winprob = { 3, 3, 5, 2, 3, 0, 5, 0, 0, 5, 6, 6, 5, 4, 2, 7, 7, 6, 3, 6, 1, 6, 4, 0, 1, 1, 5, 5, 1, 5, 3, 2, 7, 7, 5, 2, 5, 3, 0, 0, 1, 0, 5, 6, 6, 1, 6, 2, 2, 5 };
    int[] looseprob = { 3, 14, 27, 20, 35, 4, 57, 27, 39, 32, 27, 25, 37, 43, 26, 19, 7, 45, 38, 17, 38, 26, 34, 16, 19, 52, 15, 57, 25, 30, 48, 10, 20, 55, 22, 58, 59, 24, 48, 14, 4, 49, 25, 59, 21, 57, 5, 55, 49, 42 };
    int Start = 42;
    assertEquals(0.412, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.412);
  }

  @Test
  public void case45() {
    String[] graph = {};
    int[] winprob = { 1, 6, 1, 6, 2, 1, 1, 1, 3, 3, 7, 6, 4, 5, 6, 7, 3, 5, 3, 3, 7, 2, 1, 5, 5, 3, 6, 5, 3, 1, 4, 6, 0, 0, 0, 6, 2, 2, 6, 1, 5, 4, 4, 6, 3, 0, 2, 1, 6, 1 };
    int[] looseprob = { 45, 26, 47, 17, 3, 24, 52, 3, 47, 7, 25, 31, 60, 50, 9, 10, 9, 26, 8, 12, 21, 16, 28, 25, 36, 11, 0, 49, 42, 46, 46, 12, 33, 36, 17, 15, 19, 39, 52, 10, 57, 7, 6, 56, 17, 48, 38, 5, 8, 10 };
    int Start = 49;
    assertEquals(0.42857142857142855, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.42857142857142855);
  }

  @Test
  public void case46() {
    String[] graph = {};
    int[] winprob = { 1, 6, 1, 6, 2, 1, 1, 1, 3, 3, 7, 6, 4, 5, 6, 7, 3, 5, 3, 3, 7, 2, 1, 5, 5, 3, 6, 5, 3, 1, 4, 6, 0, 0, 0, 6, 2, 2, 6, 1, 5, 4, 4, 6, 3, 0, 2, 1, 6, 1 };
    int[] looseprob = { 45, 26, 47, 17, 3, 24, 52, 3, 47, 7, 25, 31, 60, 50, 9, 10, 9, 26, 8, 12, 21, 16, 28, 25, 36, 11, 0, 49, 42, 46, 46, 12, 33, 36, 17, 15, 19, 39, 52, 10, 57, 7, 6, 56, 17, 48, 38, 5, 8, 10 };
    int Start = 0;
    assertEquals(0.19692480000000004, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.19692480000000004);
  }

  @Test
  public void case47() {
    String[] graph = {};
    int[] winprob = { 1, 6, 1, 6, 2, 1, 1, 1, 3, 3, 7, 6, 4, 5, 6, 7, 3, 5, 3, 3, 7, 2, 1, 5, 5, 3, 6, 5, 3, 1, 4, 6, 0, 0, 0, 6, 2, 2, 6, 1, 5, 4, 4, 6, 3, 0, 2, 1, 6, 1 };
    int[] looseprob = { 22, 26, 7, 1, 5, 28, 25, 26, 7, 11, 3, 29, 13, 23, 24, 26, 6, 10, 11, 5, 3, 15, 14, 23, 17, 23, 21, 25, 7, 3, 28, 13, 5, 14, 18, 28, 2, 5, 8, 14, 6, 21, 29, 29, 20, 13, 8, 24, 5, 18 };
    int Start = 24;
    assertEquals(0.42501199999999995, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.42501199999999995);
  }

  @Test
  public void case48() {
    String[] graph = {};
    int[] winprob = { 1, 6, 1, 6, 2, 1, 1, 1, 3, 3, 7, 6, 4, 5, 6, 7, 3, 5, 3, 3, 7, 2, 1, 5, 5, 3, 6, 5, 3, 1, 4, 6, 0, 0, 0, 6, 2, 2, 6, 1, 5, 4, 4, 6, 3, 0, 2, 1, 6, 1 };
    int[] looseprob = { 22, 26, 7, 1, 5, 28, 25, 26, 7, 11, 3, 29, 13, 23, 24, 26, 6, 10, 11, 5, 3, 15, 14, 23, 17, 23, 21, 25, 7, 3, 28, 13, 5, 14, 18, 28, 2, 5, 8, 14, 6, 21, 29, 29, 20, 13, 8, 24, 5, 18 };
    int Start = 49;
    assertEquals(0.5454545454545454, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.5454545454545454);
  }

  @Test
  public void case49() {
    String[] graph = {};
    int[] winprob = { 1, 6, 1, 6, 2, 1, 1, 1, 3, 3, 7, 6, 4, 5, 6, 7, 3, 5, 3, 3, 7, 2, 1, 5, 5, 3, 6, 5, 3, 1, 4, 6, 0, 0, 0, 6, 2, 2, 6, 1, 5, 4, 4, 6, 3, 0, 2, 1, 6, 1 };
    int[] looseprob = { 22, 26, 7, 1, 5, 28, 25, 26, 7, 11, 3, 29, 13, 23, 24, 26, 6, 10, 11, 5, 3, 15, 14, 23, 17, 23, 21, 25, 7, 3, 28, 13, 5, 14, 18, 28, 2, 5, 8, 14, 6, 21, 29, 29, 20, 13, 8, 24, 5, 18 };
    int Start = 0;
    assertEquals(0.6030285714285715, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.6030285714285715);
  }

  @Test
  public void case50() {
    String[] graph = {};
    int[] winprob = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50 };
    int[] looseprob = { 22, 26, 7, 1, 5, 28, 25, 26, 7, 11, 3, 29, 13, 23, 24, 26, 6, 10, 11, 5, 3, 15, 14, 23, 17, 23, 21, 25, 7, 3, 28, 13, 5, 14, 18, 28, 2, 5, 8, 14, 6, 21, 29, 29, 20, 13, 8, 24, 5, 18 };
    int Start = 10;
    assertEquals(0.0010106770810557099, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.0010106770810557099);
  }

  @Test
  public void case51() {
    String[] graph = { "11000000000000000000000000000000000000000000000000", "11100000000000000000000000000000000000000000000000", "01110000000000000000000000000000000000000000000000", "00111000000000000000000000000000000000000000000000", "00011100000000000000000000000000000000000000000000", "00001110000000000000000000000000000000000000000000", "00000111000000000000000000000000000000000000000000", "00000011100000000000000000000000000000000000000000", "00000001110000000000000000000000000000000000000000", "00000000111000000000000000000000000000000000000000", "00000000011100000000000000000000000000000000000000", "00000000001110000000000000000000000000000000000000", "00000000000111000000000000000000000000000000000000", "00000000000011100000000000000000000000000000000000", "00000000000001110000000000000000000000000000000000", "00000000000000111000000000000000000000000000000000", "00000000000000011100000000000000000000000000000000", "00000000000000001110000000000000000000000000000000", "00000000000000000111000000000000000000000000000000", "00000000000000000011100000000000000000000000000000", "00000000000000000001110000000000000000000000000000", "00000000000000000000111000000000000000000000000000", "00000000000000000000011100000000000000000000000000", "00000000000000000000001110000000000000000000000000", "00000000000000000000000111000000000000000000000000", "00000000000000000000000011100000000000000000000000", "00000000000000000000000001110000000000000000000000", "00000000000000000000000000111000000000000000000000", "00000000000000000000000000011100000000000000000000", "00000000000000000000000000001110000000000000000000", "00000000000000000000000000000111000000000000000000", "00000000000000000000000000000011100000000000000000", "00000000000000000000000000000001110000000000000000", "00000000000000000000000000000000111000000000000000", "00000000000000000000000000000000011100000000000000", "00000000000000000000000000000000001110000000000000", "00000000000000000000000000000000000111000000000000", "00000000000000000000000000000000000011100000000000", "00000000000000000000000000000000000001110000000000", "00000000000000000000000000000000000000111000000000", "00000000000000000000000000000000000000011100000000", "00000000000000000000000000000000000000001110000000", "00000000000000000000000000000000000000000111000000", "00000000000000000000000000000000000000000011100000", "00000000000000000000000000000000000000000001110000", "00000000000000000000000000000000000000000000111000", "00000000000000000000000000000000000000000000011100", "00000000000000000000000000000000000000000000001110", "00000000000000000000000000000000000000000000000111", "00000000000000000000000000000000000000000000000011" };
    int[] winprob = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50 };
    int[] looseprob = { 22, 26, 7, 1, 5, 28, 25, 26, 7, 11, 3, 29, 13, 23, 24, 26, 6, 10, 11, 5, 3, 15, 14, 23, 17, 23, 21, 25, 7, 3, 28, 13, 5, 14, 18, 28, 2, 5, 8, 14, 6, 21, 29, 29, 20, 13, 8, 24, 5, 18 };
    int Start = 0;
    assertEquals(0.00020987275067148604, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.00020987275067148604);
  }

  @Test
  public void case52() {
    String[] graph = {};
    int[] winprob = { 2, 1, 2, 0, 1, 2, 1, 1, 1, 0, 0, 2, 1, 0, 2, 2, 2, 0, 2, 1, 2, 2, 0, 0, 2, 2, 1, 0, 2, 1, 1, 2, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 50 };
    int[] looseprob = { 22, 26, 7, 1, 5, 28, 25, 26, 7, 11, 3, 29, 13, 23, 24, 26, 6, 10, 11, 5, 3, 15, 14, 23, 17, 23, 21, 25, 7, 3, 28, 13, 5, 14, 18, 28, 2, 5, 8, 14, 6, 21, 29, 29, 20, 13, 8, 24, 5, 18 };
    int Start = 0;
    assertEquals(0.17222222222222222, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.17222222222222222);
  }

  @Test
  public void case53() {
    String[] graph = { "1" };
    int[] winprob = { 1 };
    int[] looseprob = { 0 };
    int Start = 0;
    assertEquals(1.0, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 1.0);
  }

  @Test
  public void case54() {
    String[] graph = { "110", "011", "001" };
    int[] winprob = { 2, 1, 10 };
    int[] looseprob = { 20, 20, 10 };
    int Start = 0;
    assertEquals(0.405, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.405);
  }

  @Test
  public void case55() {
    String[] graph = {};
    int[] winprob = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] looseprob = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int Start = 5;
    assertEquals(1.0, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 1.0);
  }

  @Test
  public void case56() {
    String[] graph = {};
    int[] winprob = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 };
    int[] looseprob = { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
    int Start = 5;
    assertEquals(0.75, graphwalkwithprobabilities.findprob(graph, winprob, looseprob, Start), DELTA * 0.75);
  }

}
