package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class BitStringsTest {
  BitStrings bitstrings = new BitStrings();

  @Test
  public void case1() {
    String[] list = { "1", "00", "100" };
    int numZeroes = 3;
    int numOnes = 1;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case2() {
    String[] list = { "00", "110", "101" };
    int numZeroes = 2;
    int numOnes = 4;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case3() {
    String[] list = { "111", "01", "11", "10", "101" };
    int numZeroes = 3;
    int numOnes = 9;
    assertEquals(5, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case4() {
    String[] list = { "00", "000", "00000" };
    int numZeroes = 0;
    int numOnes = 100;
    assertEquals(0, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case5() {
    String[] list = { "110", "01", "1101", "00" };
    int numZeroes = 2;
    int numOnes = 3;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case6() {
    String[] list = { "1111", "010101", "1010", "1010010101111111111010101011", "111111111111111111111111111111", "10101010010" };
    int numZeroes = 253;
    int numOnes = 131;
    assertEquals(6, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case7() {
    String[] list = { "1111", "010101", "1010", "1010010101111111111010101011", "111111111111111111111111111111", "10101010010" };
    int numZeroes = 0;
    int numOnes = 500;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case8() {
    String[] list = {};
    int numZeroes = 500;
    int numOnes = 500;
    assertEquals(20, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case9() {
    String[] list = {};
    int numZeroes = 28;
    int numOnes = 377;
    assertEquals(12, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case10() {
    String[] list = {};
    int numZeroes = 500;
    int numOnes = 500;
    assertEquals(20, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case11() {
    String[] list = {};
    int numZeroes = 489;
    int numOnes = 437;
    assertEquals(19, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case12() {
    String[] list = {};
    int numZeroes = 300;
    int numOnes = 238;
    assertEquals(11, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case13() {
    String[] list = { "1010111111", "1010100000", "0000010100", "1000000011", "0000000000", "1010000000", "1111111111", "1001000000", "1010111111", "0000111111", "1010011111", "0111111100", "0001111111", "1011000011", "1000111111", "1111111000", "1110101010", "1010101111", "1011111111", "0010101110" };
    int numZeroes = 343;
    int numOnes = 277;
    assertEquals(20, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case14() {
    String[] list = { "1010101010", "1110101111", "1111111111", "1010111000", "0000101010", "0001010101", "1001111100", "1110101100", "1000000000", "1010111111", "1010100000", "0000010100", "1000000011", "0000000000", "1010000000", "1111111111", "1001000000", "1010111111" };
    int numZeroes = 100;
    int numOnes = 500;
    assertEquals(18, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case15() {
    String[] list = { "1110101100", "1000000011", "0000000000", "1010000000", "1111111111", "1001000000", "1010111111", "0000111111", "1010011111", "0111111100", "0001111111", "1011000011", "1000111111", "1111111000", "1110101111", "1111111111", "1010111000", "1010111111", "0000111111", "1010011111" };
    int numZeroes = 500;
    int numOnes = 499;
    assertEquals(20, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case16() {
    String[] list = { "1010101010", "1110101111", "1111111111", "1010111000", "0000101010", "0001010101", "1001111100", "1110101100", "1000000000", "1010111111", "1010100000", "0000010100", "1000000011", "0000000000", "1010000000", "1111111111", "1001000000", "1010111111", "0000111111", "1010011111" };
    int numZeroes = 232;
    int numOnes = 400;
    assertEquals(20, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case17() {
    String[] list = { "1010101010", "1110101111", "1111111111", "1010111000", "0000101010", "0001010101", "1001111100", "1110101100", "1000000011", "0000000000", "1010000000", "1111111111", "1001000000", "1010011111", "1000111111", "1111111000", "1110101111", "1111111111", "1010111000" };
    int numZeroes = 233;
    int numOnes = 500;
    assertEquals(19, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case18() {
    String[] list = { "10101000000010101011111111111111111110101010000", "11111111111000000000000010101011111111111", "100000000000000000000000000000000000000000000000", "11111111111111010101010000000000000101011111111111", "1010100100001111101001010001110010100000011101011", "1111111000000000000000010101001011111101001010101", "110100101010010101010101010010101011011111101000", "1111111111111111100000000000000000001010100101011", "110010101010010000000000000000000101010010111", "100000000000111111101010010001111111101010100101", "111101010100000000000000000001010111111110101111", "111111111111110000000010101010000000111101010011", "101010010000000111111111111111111110101001010111", "111111111111111000000000000000000000000101010010", "101000000111111111111111111111010100101010100101", "101010100000000000000000001111111111111111101001", "1111111111111111111111111111110000000000000000000", "0000000000000000000000001111111111111101010100101", "0100111111100000000001010101010000000001111110101", "0000111111111111111111111111000000010101010011111" };
    int numZeroes = 123;
    int numOnes = 411;
    assertEquals(7, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case19() {
    String[] list = {};
    int numZeroes = 90;
    int numOnes = 500;
    assertEquals(5, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case20() {
    String[] list = { "00", "0000000000", "0000000000000000", "111111111111111111110", "1111111111111111111110", "11111111100111111111110", "111111111111111111111110", "1111111000110111111111110", "11111111111110011111111110", "111111111111111101111111110", "1001111111111111110011111110", "11111001111111111111111111110", "111111110000111111111111111110", "1111111111111000011111111111110", "11111111111111111111111111111110", "111111111111111100000001111111110", "1101010101010101010101010101010010", "11111111111100000001111111110000110", "111111111111011111111111111111111110", "1111111101111111111111111111111111110" };
    int numZeroes = 500;
    int numOnes = 194;
    assertEquals(12, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case21() {
    String[] list = { "1010101010", "1110101111", "1111111111", "1010111000", "0000101010", "0001010101", "1001111100", "1110101100", "1000000000", "1010111111", "1010100000", "0000010100", "1000000011", "0000000000", "1010000000", "1111111111", "1001000000", "1010111111", "0000111111", "1010011111" };
    int numZeroes = 443;
    int numOnes = 0;
    assertEquals(1, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case22() {
    String[] list = { "1010101010", "1110101111", "1111111111", "1010111000", "0000101010", "0001010101", "1001111100", "1110101100", "1000000000", "1010111111", "1010100000", "0000010100", "1000000011", "0000000000", "1010000000", "1111111111", "1001000000", "1010111111", "0000111111", "1010011111" };
    int numZeroes = 0;
    int numOnes = 500;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case23() {
    String[] list = { "1000000", "110", "110" };
    int numZeroes = 6;
    int numOnes = 4;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case24() {
    String[] list = { "10000000000", "110", "110", "110", "110", "110", "110", "110", "110", "110", "110" };
    int numZeroes = 10;
    int numOnes = 9;
    assertEquals(4, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case25() {
    String[] list = { "11111011111", "001", "001", "001", "001", "001", "001", "001", "001", "001", "001" };
    int numZeroes = 9;
    int numOnes = 10;
    assertEquals(4, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case26() {
    String[] list = { "111111111111111111110", "001", "001", "001", "001", "001", "001", "001", "001", "00111111111" };
    int numZeroes = 19;
    int numOnes = 20;
    assertEquals(9, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case27() {
    String[] list = { "00000000000000000000000000000011", "11100000000000000000000", "11100000000000000000000" };
    int numZeroes = 40;
    int numOnes = 6;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case28() {
    String[] list = { "11111000001111100000111110000011111", "00000000000000000000000000000000001", "00000", "00000", "00000", "00000", "00000", "00000", "00000", "1111111111111111111111111111111111111111111111110" };
    int numZeroes = 35;
    int numOnes = 500;
    assertEquals(7, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case29() {
    String[] list = { "00111111111111111", "10011111111111111", "11001111111111111", "11100111111111111", "11110011111111111", "11111001111111111", "11111100111111111", "11111110011111111", "11111111001111111", "11111111100111111", "11111111110011111", "11111111111001111", "11111111111100111", "11111111111110011", "11111111111111001", "01111111111111111111111111111111111111111111111111", "01111111111111111111111111111111111111111111111111" };
    int numZeroes = 30;
    int numOnes = 275;
    assertEquals(15, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case30() {
    String[] list = { "00111111111111111", "10011111111111111", "11001111111111111", "11100111111111111", "11110011111111111", "11111001111111111", "11111100111111111", "11111110011111111", "11111111001111111", "11111111100111111", "11111111110011111", "11111111111001111", "11111111111100111", "11111111111110011", "11111111111111001", "01111111111111111111111111111111111111111111111111", "01111111111111111111111111111111111111111111111111" };
    int numZeroes = 31;
    int numOnes = 225;
    assertEquals(15, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case31() {
    String[] list = { "00111111111111111", "10011111111111111", "11001111111111111", "11100111111111111", "11110011111111111", "11111001111111111", "11111100111111111", "11111110011111111", "11111111001111111", "11111111100111111", "11111111110011111", "11111111111001111", "11111111111100111", "11111111111110011", "11111111111111001", "01111111111111111111111111111111111111111111111111", "01111111111111111111111111111111111111111111111111" };
    int numZeroes = 31;
    int numOnes = 276;
    assertEquals(16, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case32() {
    String[] list = { "11000000000000000", "01100000000000000", "00110000000000000", "00011000000000000", "00001100000000000", "00000110000000000", "00000011000000000", "00000001100000000", "00000000110000000", "00000000011000000", "00000000001100000", "00000000000110000", "00000000000011000", "00000000000001100", "00000000000000110", "10000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000" };
    int numZeroes = 300;
    int numOnes = 31;
    assertEquals(16, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case33() {
    String[] list = { "11000000000000000", "01100000000000000", "00110000000000000", "00011000000000000", "00001100000000000", "00000110000000000", "00000011000000000", "00000001100000000", "00000000110000000", "00000000011000000", "00000000001100000", "00000000000110000", "00000000000011000", "00000000000001100", "00000000000000110", "10000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000" };
    int numZeroes = 400;
    int numOnes = 471;
    assertEquals(17, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case34() {
    String[] list = { "11000000000000000", "01100000000000000", "00110000000000000", "00011000000000000", "00001100000000000", "00000110000000000", "00000011000000000", "00000001100000000", "00000000110000000", "00000000011000000", "00000000001100000", "00000000000110000", "00000000000011000", "00000000000001100", "00000000000000110", "10000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000" };
    int numZeroes = 225;
    int numOnes = 30;
    assertEquals(15, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case35() {
    String[] list = { "00011110010111", "0001111", "000011111", "00111011011", "011101", "0111", "0011110", "01", "0001", "0000001", "0001", "111111", "11", "110" };
    int numZeroes = 10;
    int numOnes = 15;
    assertEquals(6, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case36() {
    String[] list = { "100", "0", "0010", "00" };
    int numZeroes = 5;
    int numOnes = 2;
    assertEquals(3, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case37() {
    String[] list = {};
    int numZeroes = 500;
    int numOnes = 500;
    assertEquals(20, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case38() {
    String[] list = { "1", "111", "1000", "10", "1000" };
    int numZeroes = 3;
    int numOnes = 7;
    assertEquals(3, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case39() {
    String[] list = { "100", "0101", "01010", "0101011", "1010101", "1101010", "1111111", "11111111", "1010101010101", "101010101010111", "101010111111111", "111010101", "101001", "11101", "111010101", "1011001001", "110101010", "10101010101", "1010101010", "10101011" };
    int numZeroes = 500;
    int numOnes = 500;
    assertEquals(20, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case40() {
    String[] list = { "1", "1", "1", "0", "10" };
    int numZeroes = 1;
    int numOnes = 1;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case41() {
    String[] list = { "00000", "11111", "10", "10" };
    int numZeroes = 2;
    int numOnes = 2;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case42() {
    String[] list = { "00", "110", "101" };
    int numZeroes = 2;
    int numOnes = 4;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case43() {
    String[] list = { "01111", "001", "0011" };
    int numZeroes = 4;
    int numOnes = 4;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case44() {
    String[] list = { "01111111111111111", "001", "0011" };
    int numZeroes = 4;
    int numOnes = 8;
    assertEquals(2, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case45() {
    String[] list = { "00000", "11111", "10", "10" };
    int numZeroes = 0;
    int numOnes = 0;
    assertEquals(0, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case46() {
    String[] list = { "111", "01", "111", "01", "111", "01" };
    int numZeroes = 3;
    int numOnes = 3;
    assertEquals(3, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

  @Test
  public void case47() {
    String[] list = { "1111100000", "1111100000", "100", "01", "01", "0110" };
    int numZeroes = 5;
    int numOnes = 5;
    assertEquals(3, bitstrings.maxStrings(list, numZeroes, numOnes));
  }

}
