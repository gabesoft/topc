package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class MergersDivTwoTest {
  double DELTA = 1.0e-09;
  MergersDivTwo mergersdivtwo = new MergersDivTwo();

  @Test
  public void case1() {
    int[] revenues = { 5, -7, 3 };
    int k = 2;
    assertEquals(1.5, mergersdivtwo.findMaximum(revenues, k), DELTA * 1.5);
  }

  @Test
  public void case2() {
    int[] revenues = { 5, -7, 3 };
    int k = 3;
    assertEquals(0.3333333333333333, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.3333333333333333);
  }

  @Test
  public void case3() {
    int[] revenues = { 1, 2, 2, 3, -10, 7 };
    int k = 3;
    assertEquals(2.9166666666666665, mergersdivtwo.findMaximum(revenues, k), DELTA * 2.9166666666666665);
  }

  @Test
  public void case4() {
    int[] revenues = { -100, -100, -100, -100, -100, 100 };
    int k = 4;
    assertEquals(-66.66666666666667, mergersdivtwo.findMaximum(revenues, k), DELTA * -66.66666666666667);
  }

  @Test
  public void case5() {
    int[] revenues = { 869, 857, -938, -290, 79, -901, 32, -907, 256, -167, 510, -965, -826, 808, 890, -233, -881, 255, -709, 506, 334, -184, 726, -406, 204, -912, 325, -445, 440, -368 };
    int k = 7;
    assertEquals(706.0369290573373, mergersdivtwo.findMaximum(revenues, k), DELTA * 706.0369290573373);
  }

  @Test
  public void case6() {
    int[] revenues = { 300, -800, 700, -89, -82, -97, 100, -89, -89, -94, -89, -89, -1000, -500, -800, -86, -86, -700, -87, -80, -89, -81, 300, -87, -100, -96, -99, -87, -93, 100 };
    int k = 7;
    assertEquals(189.87845804988663, mergersdivtwo.findMaximum(revenues, k), DELTA * 189.87845804988663);
  }

  @Test
  public void case7() {
    int[] revenues = { -1000, -300, -97, 900, -94, -96, -99, -400, -400, -81, -86, 900, -1000, -600, 300, -89, 700, 1000, -82, -94, -93, -91, -300, -200, -91, 800, -84, 700, 0, -400 };
    int k = 7;
    assertEquals(710.8573696145124, mergersdivtwo.findMaximum(revenues, k), DELTA * 710.8573696145124);
  }

  @Test
  public void case8() {
    int[] revenues = { -90, -82, -91, -900, -82, -400, 400, -89, -84, -91, -93, -400, 300, -400, -97, -98, -92, 500, 500, 500, 900, 600, 700, -100, 800, -300, -600, -500, -93, -86, 700, -300, -100, -81, -96, -85, -1000, -80, -89, -300, -93, 800, -99, 1000, -84, -88, -86, -84, -90, 600 };
    int k = 12;
    assertEquals(632.2304353632479, mergersdivtwo.findMaximum(revenues, k), DELTA * 632.2304353632479);
  }

  @Test
  public void case9() {
    int[] revenues = { 4, 21, -355, -56, -351, -2, -5, 5, -10, 2, 8, 6, 40, 22, -357, -950, -356, 544, -657, -335, 95, -953, -650, -957, 250, 248, -655, 552, -2, -357, -651, 5, 551, -2, -47, 4, 544, -1, -355, -17, -656, 7, 65 };
    int k = 12;
    assertEquals(241.77255639097746, mergersdivtwo.findMaximum(revenues, k), DELTA * 241.77255639097746);
  }

  @Test
  public void case10() {
    int[] revenues = { -790, -348, 243, 246, 549, -352, -276, -1, -69, 77, -349, -84, 7, -652, 692, 243, -348, 186, 549, -353, -56, 25, 553, 36, -647, -46, 74, 251, -653, 32, -55, 546, 87, 244, -52, -640, 9, -348, -54, 245, -651, 550, 548, 5, -8 };
    int k = 12;
    assertEquals(420.7946084104938, mergersdivtwo.findMaximum(revenues, k), DELTA * 420.7946084104938);
  }

  @Test
  public void case11() {
    int[] revenues = { -13, 3, 496, 548, -954, 1, 21, -355, 244, -50, -54, -919, 7, -657, -651, -7, -48, -651, -352, -949, -17, 1, -950, -351, -2, -49, 678, -955, -58, -653, -955, -35, -147, -649, -951, -654, 48, -355, -617, -15, -348, 247, -648, 243 };
    int k = 5;
    assertEquals(415.98374076952376, mergersdivtwo.findMaximum(revenues, k), DELTA * 415.98374076952376);
  }

  @Test
  public void case12() {
    int[] revenues = { 245, -977, 545, -348, -951, -708, -655, -51, -91, -350, 0, 253, 547, 47, -54, -223, -806, 250, -354, -348, 1, -761, -3, 0, -51, -654, -953, 71, 9, -16, 551, 543, -655, 88, 8, -5, -47, 52, 10, 15, -347, -649, -10, 889, 5, -950, -245, -497, -4 };
    int k = 12;
    assertEquals(335.73408564814815, mergersdivtwo.findMaximum(revenues, k), DELTA * 335.73408564814815);
  }

  @Test
  public void case13() {
    int[] revenues = { -10, -651, -950, -576, -44, -951, -10, -46, -86, -650, -990, -950, 64, -18, 31, -7, 85, -48, -652, -39, -957, -650, -777, 6, 8, 1, 546, -350, -349, 247, -2, -8, -31, -47, -956, -657, -947, 97, -947, 494, -53, -653, 9, -47, -352 };
    int k = 6;
    assertEquals(247.798616894746, mergersdivtwo.findMaximum(revenues, k), DELTA * 247.798616894746);
  }

  @Test
  public void case14() {
    int[] revenues = { -56, -652, -54, 552, 1, 60, 5, 414, -84, -7, -648, 74, 78, 85, -53, -955, 742, 3, -648, 7, 547, 547, 548, -649, 4, 369, -955, 549, 221, -950, 253, 249, -3, 6, -1, 543, -68, 36, -11, -866, -60, 574, -6, -48, -349, 6, -953, 68 };
    int k = 11;
    assertEquals(498.5644547075028, mergersdivtwo.findMaximum(revenues, k), DELTA * 498.5644547075028);
  }

  @Test
  public void case15() {
    int[] revenues = { 715, -347, 53, -947, 543, -681, -951, -10, 3, -354, -355, 253, -902, 73, -348, -104, 82, -349, -76, -347, 6, -50, -732, -657, -629, 61, -83, 0, -651, 52, -50, -47, -177, -349, -648, -7, -347, -947, 543, -55, 318, 6, 8, 735, -347, 248, 246, 547 };
    int k = 7;
    assertEquals(505.74137429510193, mergersdivtwo.findMaximum(revenues, k), DELTA * 505.74137429510193);
  }

  @Test
  public void case16() {
    int[] revenues = { 548, -651, -349, 252, -55, -652, -6, 543, 9, -12, -19, -351, -956, 249, 727, 812, 791, 154, -1, 550, 243, 552, -951, 96, 8, 549, 5, 546, -24, -51, -653, 550, 545, -948, 546, 545, -356, 0, -6, 549, 597, -657 };
    int k = 8;
    assertEquals(635.0892260950855, mergersdivtwo.findMaximum(revenues, k), DELTA * 635.0892260950855);
  }

  @Test
  public void case17() {
    int[] revenues = { -647, 40, -3, -4, -56, -890, -389, 95, 8, 616, 93, 1, -50, -52, 249, 243, -1, -955, -53, 94, 63, -93, -652, -57, -4, -54, 45, 543, -650, 88, 10, -57, 642, -950, -355, -222, 544, -353, 545, -55, -53, 553, -951, 3, 7 };
    int k = 9;
    assertEquals(443.60229766803843, mergersdivtwo.findMaximum(revenues, k), DELTA * 443.60229766803843);
  }

  @Test
  public void case18() {
    int[] revenues = { 252, 244, -96, -957, -55, 551, 59, 7, 253, -57, -50, -49, 4, 3, 545, -8, -77, -38, -47, -954, -54, 252, -352, 8, 284, 54, -655, 6, 252, -6, 13, -176, -35, 9, 62, -26, 551, -30, -4, 652, -179, -53, -347, 337, -62 };
    int k = 6;
    assertEquals(477.2643927455527, mergersdivtwo.findMaximum(revenues, k), DELTA * 477.2643927455527);
  }

  @Test
  public void case19() {
    int[] revenues = { 1, -32, -764, -7, -951, -647, -2, -51, 253, -4, -345, 253, 244, -47, -272, -60, 543, -56, -2, -956, -950, 553, -40, 526, 544, -649, 243, -7, 0, -50, 244, 7, -53, -657, 248, -88, 9, -48, -348, -657, 804, -655, -9, -56, -48, 79, -478 };
    int k = 9;
    assertEquals(423.69955908289245, mergersdivtwo.findMaximum(revenues, k), DELTA * 423.69955908289245);
  }

  @Test
  public void case20() {
    int[] revenues = { 84, -96, -651, -42, 5, 56, -407, -3, 345, -2, 243, 79, -4, 125, 352, -652, 248, -3, 548, 252, -354, -654, 7, -53, -266, -768, -351, -74, -291, -49, 245, -355, 543, 253, 246, -80, -54, -1, -357, -6, 320, 6, 9, 67, -347, -123 };
    int k = 3;
    assertEquals(471.1257590690506, mergersdivtwo.findMaximum(revenues, k), DELTA * 471.1257590690506);
  }

  @Test
  public void case21() {
    int[] revenues = { -93, 22, 924, 70, -952, -67, 10, 247, 548, -350, -62, 705, 249, -648, 1, -79, -57, -5, 575, -49, -656, -348, 42, 5, 550, 2, -654, 8, 546, 169, 3, -656, 553, 100, -649, 250, -47, 553, -347, -90, -657, -95, -949, 54, -565, -652, 857 };
    int k = 4;
    assertEquals(755.5247154645622, mergersdivtwo.findMaximum(revenues, k), DELTA * 755.5247154645622);
  }

  @Test
  public void case22() {
    int[] revenues = { 553, 388, -50, 553, 550, -5, -51, -2, 6, -652, -10, 246, 248, 9, -47, -56, -10, 129, -1, 545, 59, 550, 243, -655, 1, -352, -127, -950, -2, 549, -947, -49, -351, 295, -952, -60, -79, 486, -55, -350, -856, 656, 0, 95, 23, -357, -96, 249, 546 };
    int k = 8;
    assertEquals(534.0882641392895, mergersdivtwo.findMaximum(revenues, k), DELTA * 534.0882641392895);
  }

  @Test
  public void case23() {
    int[] revenues = { 4, 21, -355, -56, -351, -2, -5, 5, -10, 2, 8, 6, 40, 22, -357, -950, -356, 544, -657, -335, 95, -953, -650, -957, 250, 248, -655, 552, -2, -357, -651, 5, 551, -2, -47, 4, 544, -1, -355, -17, -656, 7, 65 };
    int k = 12;
    assertEquals(241.77255639097746, mergersdivtwo.findMaximum(revenues, k), DELTA * 241.77255639097746);
  }

  @Test
  public void case24() {
    int[] revenues = { 69, 3, 4, -349, -649, 547, -651, -355, 9, 3, 5, 253, 424, -57, 8, -45, 249, -67, -6, -3, -347, -4, -647, -1, -352, 69, -815, 551, -7, -59, -235, -51, 106, -35, -4, -648, -48, 9, -352, -653, 262, 246, -48, 75, -45, 97, -957, -654 };
    int k = 9;
    assertEquals(297.18513031550066, mergersdivtwo.findMaximum(revenues, k), DELTA * 297.18513031550066);
  }

  @Test
  public void case25() {
    int[] revenues = { 250, -248, -394, 983, 550, 844, -657, -3, 546, -354, -831, 77, -57, 551, 550, 40, 546, 253, 0, 244, -608, 8, 547, -656, 253, -83, -3, 8, -1, 243, -95, 46, -4, -17, -657, -50, 6, 551, -948, -8, -57, 1, -190, 46, 544 };
    int k = 10;
    assertEquals(586.0912299465241, mergersdivtwo.findMaximum(revenues, k), DELTA * 586.0912299465241);
  }

  @Test
  public void case26() {
    int[] revenues = { -50, -51, -54, -950, 74, -11, -45, -1, -936, 244, 8, -949, 552, 869, 1, -350, 8, -653, -6, 253, 243, 250, 3, -56, -6, 248, -49, -642, -58, -592, 546, -352, -949, -511, 552, -54, -6, 246, 253, -54, 549, -55 };
    int k = 19;
    assertEquals(241.47587719298247, mergersdivtwo.findMaximum(revenues, k), DELTA * 241.47587719298247);
  }

  @Test
  public void case27() {
    int[] revenues = { -349, -3, 246, 6, -10, -54, -83, -947, 88, 251, 545, 547, -137, -955, 380, 279, 549, 1, 377, -957, -356, 544, 253, 547, -51, -348, -56, 938, -46, -813, -956, -515, -54, -957, -357, 552, 243, -1, 814, 553, 95, 5 };
    int k = 8;
    assertEquals(604.725343883547, mergersdivtwo.findMaximum(revenues, k), DELTA * 604.725343883547);
  }

  @Test
  public void case28() {
    int[] revenues = { -357, 1, -352, 9, -353, -4, -52, -949, 6, -10, 550, 551, -54, -53, 811, -7, 249, -52, 4, -73, -47, 245, 246, 4, -649, -949, -13, 250, -9, -110, -26, -952, -801, 519, -649, 551, -56, 246, 75, 150, -194, -649 };
    int k = 8;
    assertEquals(450.15553218482904, mergersdivtwo.findMaximum(revenues, k), DELTA * 450.15553218482904);
  }

  @Test
  public void case29() {
    int[] revenues = { -355, 4, 544, -56, -954, -649, 47, -576, -366, -53, -3, -48, -5, 4, 352, 247, -49, 45, -238, -79, -651, 648, -951, 246, -60, -811, -956, -655, 244, 569, 55, 16, -952, -955, -351, 937, -9, 546, 945, 75, 253, -49, -9, -347, -348, -56, 61, 51 };
    int k = 8;
    assertEquals(586.2865506685697, mergersdivtwo.findMaximum(revenues, k), DELTA * 586.2865506685697);
  }

  @Test
  public void case30() {
    int[] revenues = { -54, -551, -657, -47, -956, 269, -405, -48, -648, -47, 244, -728, -35, -41, -937, 998, 874, -2, -653, -655, -8, 246, 348, -4, -356, -5, -85, 8, 38, -55, -53, -3, 8, -30, -52, 244, -947, 827, -651, -356, -954, 246, 243, 51, -21, -51, 2, -356, 8, -5 };
    int k = 12;
    assertEquals(382.14132612179486, mergersdivtwo.findMaximum(revenues, k), DELTA * 382.14132612179486);
  }

  @Test
  public void case31() {
    int[] revenues = { -5, -348, 549, 548, 8, -351, -52, 105, -656, 115, -347, -48, 5, -383, -52, -352, -657, -54, 244, 0, -950, -53, -47, -9, -6, 246, -348, -353, -53, 412, 548, -957, -16, -651, -348, 3, -54, -956, -53, 245, 54, 781, -690, -78 };
    int k = 6;
    assertEquals(499.73338140554574, mergersdivtwo.findMaximum(revenues, k), DELTA * 499.73338140554574);
  }

  @Test
  public void case32() {
    int[] revenues = { -955, 244, -56, 936, 549, 550, -8, -957, 252, -951, 8, -194, -1, -355, -655, -8, -57, -141, -3, -10, -67, -67, -49, -855, -657, 544, -48, 7, -657, -10, -650, -49, -51, 42, 543, -956, -11, -647, -953, 95, 245, 1, 8 };
    int k = 5;
    assertEquals(568.3621436444444, mergersdivtwo.findMaximum(revenues, k), DELTA * 568.3621436444444);
  }

  @Test
  public void case33() {
    int[] revenues = { -95, -5, -348, 90, 90, -51, -48, -55, 549, -53, 252, 728, 546, 3, 72, -762, 323, 553, 56, -61, 246, 243, 115, 244, -74, -9, -956, -51, -947, 994, -953, -9, -4, -5, -1, 1, -947, 5, 68, -956, -5, -356, -136, 243, -953, -70, -11, -468 };
    int k = 8;
    assertEquals(513.340727629485, mergersdivtwo.findMaximum(revenues, k), DELTA * 513.340727629485);
  }

  @Test
  public void case34() {
    int[] revenues = { -348, 248, 700, -10, -49, -954, -647, -655, -50, 544, -654, 553, -349, 545, -29, -9, -263, 1, 548, -347, 6, 160, 128, -749, 66, -356, -91, 248, -54, 2, 7, 6, -653, -357, 245, 93, 6, -952, 546, 2, 833, -356 };
    int k = 19;
    assertEquals(271.1425438596491, mergersdivtwo.findMaximum(revenues, k), DELTA * 271.1425438596491);
  }

  @Test
  public void case35() {
    int[] revenues = { 550, -651, -50, -652, -36, -189, 35, 295, -57, 7, 5, -57, -79, -657, -652, -49, 5, -652, 11, 550, 247, -59, 253, -10, -818, 42, 8, -948, 246, -649, -648, -9, -7, -6, 253, 250, -1, -68, -68, -242, 689 };
    int k = 14;
    assertEquals(241.18469387755104, mergersdivtwo.findMaximum(revenues, k), DELTA * 241.18469387755104);
  }

  @Test
  public void case36() {
    int[] revenues = { -955, -354, 245, 549, 17, 0, -219, 250, 552, -347, -44, 543, -357, -951, 552, 223, 5, -52, -657, 1, -654, -46, 0, 543, -356, 243, 251, -16, -353, 1, -864, 550, -57, -351, -655, -791, 247, 551, 8, -182, 549, 10, -10, 546, 32, 551, -49, -835, 247 };
    int k = 6;
    assertEquals(541.3084591529084, mergersdivtwo.findMaximum(revenues, k), DELTA * 541.3084591529084);
  }

  @Test
  public void case37() {
    int[] revenues = { 8, 952, -80, -350, -30, -72, 33, -652, -653, -90, -3, -969, 79, -952, -54, 548, -7, -1, 249, -950, 917, -347, -49, 56, 249, -649, -79, -30, -355, 9, -51, -498, 39, -994, 248, 19, -418, 553, 253, -68, 550, -953, 252, -955 };
    int k = 8;
    assertEquals(517.8160230848524, mergersdivtwo.findMaximum(revenues, k), DELTA * 517.8160230848524);
  }

  @Test
  public void case38() {
    int[] revenues = { 249, 96, -347, -52, -48, -49, -7, 552, 44, -956, 279, -22, -351, -58, -38, -76, 243, 24, 18, -1, -72, 164, 544, 13, -77, -50, 0, 71, -956, -55, -348, 549, -74, 88, 246, -50, -7, 87, -647, 958, -348, -653, -949, 247, -69, -354, 0 };
    int k = 7;
    assertEquals(470.11697581364905, mergersdivtwo.findMaximum(revenues, k), DELTA * 470.11697581364905);
  }

  @Test
  public void case39() {
    int[] revenues = { -145, -648, 544, -356, 2, -1, -948, -48, 2, -50, 983, 550, -49, -950, 694, -655, 795, 5, 3, -647, -6, 246, 551, -49, 10, 545, -952, -352, 35, 247, 553, 247, 249, -349, -4, -4, -649, -41, -20, 201, -649, -55 };
    int k = 20;
    assertEquals(306.5195652173913, mergersdivtwo.findMaximum(revenues, k), DELTA * 306.5195652173913);
  }

  @Test
  public void case40() {
    int[] revenues = { 546, 545, -355, 245, -354, 7, 552, 9, 2, -1, -947, 552, -649, -352, -484, -1, 358, -354, -3, 544, -653, 11, 247, 4, -38, 2, -352, 2, -573, -957, 10, -954, -352, -9, 248, -7, -55, -654, 70, -54, 27, -645, -6, 21, 3, -348, -51, -3 };
    int k = 14;
    assertEquals(281.2875283446712, mergersdivtwo.findMaximum(revenues, k), DELTA * 281.2875283446712);
  }

  @Test
  public void case41() {
    int[] revenues = { 549, -953, -53, 252, -62, 9, -47, -47, -650, -56, -347, 0, -348, 37, -647, 582, -352, 548, 546, -954, -5, -650, -353, -1, 552, 71, -349, 72, 7, -521, 5, -347, -52, -225, 841, -352, -45, -434, -627, -54, -6, 5 };
    int k = 4;
    assertEquals(602.8096564511458, mergersdivtwo.findMaximum(revenues, k), DELTA * 602.8096564511458);
  }

  @Test
  public void case42() {
    int[] revenues = { 489, -6, 550, -770, 551, -52, -951, 8, 922, -56, -950, 9, -956, 93, 45, 551, -354, -56, -2, 244, 8, 8, -949, -655, -948, -354, 250, -352, -51, -55, 1, 7, -649, -8, 4, -48, 6, -7, -92, 551, -5 };
    int k = 8;
    assertEquals(489.2775607638889, mergersdivtwo.findMaximum(revenues, k), DELTA * 489.2775607638889);
  }

  @Test
  public void case43() {
    int[] revenues = { 5, -50, 543, -49, -53, -3, 2, -652, -951, 247, -4, -2, -656, 246, 23, 92, 252, 10, 5, 621, 551, 244, -63, -13, -653, -938, -37, 250, -1, 551, 6, -54, -2, -354, -47, -329, -950, -647, 68, -649, -6, 543, -3, 551, 2 };
    int k = 20;
    assertEquals(226.72307692307692, mergersdivtwo.findMaximum(revenues, k), DELTA * 226.72307692307692);
  }

  @Test
  public void case44() {
    int[] revenues = { 3, 550, -353, 268, 62, 53, -62, -49, 549, 553, 543, -6, -655, 4, 1, -355, -876, -956, -10, -656, -950, -57, 83, 244, 547, -48, 545, 553, -52, -948, -100, -1, 8, 99, -577, -55, -51, -47, 246, -4, 5, 24, -52, -947, 248 };
    int k = 9;
    assertEquals(469.38949474165526, mergersdivtwo.findMaximum(revenues, k), DELTA * 469.38949474165526);
  }

  @Test
  public void case45() {
    int[] revenues = { 74, -48, 551, 4, -953, -948, 849, -859, 75, -57, -647, -30, 252, 151, -875, -55, 30, -9, -350, 87, 462, -950, -52, -5, -947, -31, 73, 87, -53, 556, 251, 2, 7, -654, -48, 9, 543, -653, 246, 56, 21, -651, -253, -95, -652, -649, -51, -15 };
    int k = 9;
    assertEquals(419.9052491998171, mergersdivtwo.findMaximum(revenues, k), DELTA * 419.9052491998171);
  }

  @Test
  public void case46() {
    int[] revenues = { 547, -23, 552, 251, 552, -953, 80, -4, -7, 189, -353, -629, -3, -55, -651, -53, 720, 545, 243, -3, -968, -10, -651, -930, 552, 2, -81, 251, 249, 353, -950, -650, 9, -952, 75, 97, 706, 545, -9, 23, -957, -948, -1, -16, 91 };
    int k = 7;
    assertEquals(565.4477008351585, mergersdivtwo.findMaximum(revenues, k), DELTA * 565.4477008351585);
  }

  @Test
  public void case47() {
    int[] revenues = { 360, 10, 76, -57, 312, -953, -708, 364, -351, -356, -347, 428, -57, -954, 513, -53, 544, -10, -69, 501, -653, 4, -3, 546, -50, -49, 247, 7, 69, 97, -119, -2, 79, -654, -7, 6, -248, 6, -49, -50, -50, -16, 0, -351, 54, -41, 4 };
    int k = 9;
    assertEquals(404.23624338624336, mergersdivtwo.findMaximum(revenues, k), DELTA * 404.23624338624336);
  }

  @Test
  public void case48() {
    int[] revenues = { -44, 174, 546, -48, -957, -56, 543, -941, -656, -5, 247, 243, 544, 545, -350, -7, 907, -952, 4, -54, 219, -654, -3, -4, 946, -56, 244, 6, -40, -48, 0, 662, -652, 41, -949, -951, 248, 10, -874, 543, -56 };
    int k = 8;
    assertEquals(616.4881365740741, mergersdivtwo.findMaximum(revenues, k), DELTA * 616.4881365740741);
  }

  @Test
  public void case49() {
    int[] revenues = { 8, 8, -6, -965, 2, 548, -351, -71, -350, -219, -647, -654, 245, -955, -355, 0, 97, 552, -654, 550, -59, 547, -3, 7, 711, -3, 2, -951, 6, -953, 252, 246, 23, 243, -90, 45, -112, 545, -349, -49, -53, -351, -347 };
    int k = 6;
    assertEquals(528.0100872910892, mergersdivtwo.findMaximum(revenues, k), DELTA * 528.0100872910892);
  }

  @Test
  public void case50() {
    int[] revenues = { -1, -33, -80, -353, 545, 7, 0, 7, 873, 567, 243, -195, 544, -1, -824, 85, 3, 171, -685, -800, 69, -4, -947, -2, -381, -6, -1, -23, 40, 783, -351, 991, -354, 544, -993, 96, -7, 550, 31, 25, 548, 245, -349, 250 };
    int k = 10;
    assertEquals(606.4683333333334, mergersdivtwo.findMaximum(revenues, k), DELTA * 606.4683333333334);
  }

  @Test
  public void case51() {
    int[] revenues = { -8, -53, -55, -947, 248, -53, -686, -955, -55, 766, -9, 544, -354, 253, 546, -648, -957, -5, 7, 250, 1, -52, 2, 8, 31, -16, -656, 5, -647, -357, -129, -65, -348, 9, -4, 249, -890, -7, 543, 245, -955, 237, 2 };
    int k = 12;
    assertEquals(323.1608974358974, mergersdivtwo.findMaximum(revenues, k), DELTA * 323.1608974358974);
  }

  @Test
  public void case52() {
    int[] revenues = { -21, -76, 988, -57, -4, -50, -267, 10, 4, -948, -947, 889, -154, 20, -48, -951, -54, -652, 0, -52, -356, 6, -657, -653, -695, -88, -8, -955, -9, -905, -950, 543, -55, -648, 264, -648, -949, -2, -3, -17, -947, -347, -950, 250 };
    int k = 17;
    assertEquals(142.83193277310926, mergersdivtwo.findMaximum(revenues, k), DELTA * 142.83193277310926);
  }

  @Test
  public void case53() {
    int[] revenues = { 250, -6, -947, 789, 99, -51, -347, 59, -947, -347, -6, -354, -651, -51, -347, -348, 248, -7, -955, -510, -51, 45, -51, -952, 243, 249, 2, -354, -6, 247, -48, -949, -947, -50, -53, 4, 251, -82, -48, -349, 99, -41, -9, -51, -86, 100, -9, 243, 247, -352 };
    int k = 6;
    assertEquals(329.2031874026563, mergersdivtwo.findMaximum(revenues, k), DELTA * 329.2031874026563);
  }

  @Test
  public void case54() {
    int[] revenues = { -947, 2, -8, -347, 161, -48, 659, 252, -351, -10, -560, -953, -41, 545, 5, 37, -14, 328, 248, -52, 547, -467, -950, 1, -8, 553, 253, -747, -347, 387, -948, 591, -357, 8, 551, -355, -51, -345, 252, -48, -5, -352, -648, 3, -352 };
    int k = 6;
    assertEquals(535.7701729145233, mergersdivtwo.findMaximum(revenues, k), DELTA * 535.7701729145233);
  }

  @Test
  public void case55() {
    int[] revenues = { -353, 59, 544, -653, 49, -48, -54, -651, -10, 545, -54, -54, 551, 33, -1, 546, -56, 11, -49, -955, -10, 77, 544, -305, 251, -10, -652, -56, -2, -951, -2, -348, -41, -54, -57, -348, 121, -8, -53, 952, 73, 100, 94, -33, 543, 84, -948 };
    int k = 8;
    assertEquals(540.8461083984375, mergersdivtwo.findMaximum(revenues, k), DELTA * 540.8461083984375);
  }

  @Test
  public void case56() {
    int[] revenues = { 3, 6, 9, 8, 250, -52, -5, -646, -348, -656, 1, 451, 250, 251, 67, -49, 253, 0, -9, -4, 549, -2, 248, 551, -55, -948, -657, -353, 96, 8, -4, 253, -657, -357, -947, 251, -352, 0, -932, -14, 4, -650, 549, -648, 548, 386, -54, 596, -2 };
    int k = 11;
    assertEquals(408.34485001530453, mergersdivtwo.findMaximum(revenues, k), DELTA * 408.34485001530453);
  }

  @Test
  public void case57() {
    int[] revenues = { -352, -653, -75, 5, -5, 23, -347, 9, 544, -354, -10, -35, -96, -5, -954, -994, -348, -618, -353, 3, 7, -977, -51, -68, -9, 249, 344, -785, 90, 543, 36, -14, 0, -350, -8, -952, 552, -650, -1, 249, 543, 248, 543, -655, 546, -7, -34 };
    int k = 13;
    assertEquals(342.7385114885115, mergersdivtwo.findMaximum(revenues, k), DELTA * 342.7385114885115);
  }

  @Test
  public void case58() {
    int[] revenues = { -8, 14, 295, -657, 546, -652, 76, 12, -48, -5, -356, 729, -3, 1, 2, 8, 294, -954, 7, -954, -2, 552, -357, 42, 4, 543, -295, 244, 243, -54, -8, -6, -33, 43, 253, 546, 43, 667, 775, 551, -91, 686, -854, 58, 6, 23 };
    int k = 9;
    assertEquals(586.3046410608139, mergersdivtwo.findMaximum(revenues, k), DELTA * 586.3046410608139);
  }

  @Test
  public void case59() {
    int[] revenues = { -355, 249, 425, -650, 246, -944, -656, 83, -48, -54, -648, 253, -356, 544, -1, -52, -647, 1, 200, -704, -53, -957, -950, 6, 137, -652, -648, -55, -836, -5, -3, -349, -9, 546, -657, -9, 958, 551, 252, -1, 6, -48, -2, 545, 252, 253, 48, -54 };
    int k = 9;
    assertEquals(470.74632830361224, mergersdivtwo.findMaximum(revenues, k), DELTA * 470.74632830361224);
  }

  @Test
  public void case60() {
    int[] revenues = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
    int k = 50;
    assertEquals(1000.0, mergersdivtwo.findMaximum(revenues, k), DELTA * 1000.0);
  }

  @Test
  public void case61() {
    int[] revenues = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
    int k = 26;
    assertEquals(1000.0, mergersdivtwo.findMaximum(revenues, k), DELTA * 1000.0);
  }

  @Test
  public void case62() {
    int[] revenues = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
    int k = 2;
    assertEquals(1000.0, mergersdivtwo.findMaximum(revenues, k), DELTA * 1000.0);
  }

  @Test
  public void case63() {
    int[] revenues = { -182, -22, -952, -28, -53, -58, -52, -957, -54 };
    int k = 4;
    assertEquals(-119.12, mergersdivtwo.findMaximum(revenues, k), DELTA * -119.12);
  }

  @Test
  public void case64() {
    int[] revenues = { -8, -353, -950, -652, -55, -954, -957, -9, -56 };
    int k = 4;
    assertEquals(-180.24, mergersdivtwo.findMaximum(revenues, k), DELTA * -180.24);
  }

  @Test
  public void case65() {
    int[] revenues = { -2, -47, -11, -4, -95, -7, -947, -352, -10 };
    int k = 4;
    assertEquals(-62.67999999999999, mergersdivtwo.findMaximum(revenues, k), DELTA * -62.67999999999999);
  }

  @Test
  public void case66() {
    int[] revenues = { -52, -42, -156, -946, -18, -95, -955, -419, -48 };
    int k = 4;
    assertEquals(-134.84, mergersdivtwo.findMaximum(revenues, k), DELTA * -134.84);
  }

  @Test
  public void case67() {
    int[] revenues = { -1000, 1000 };
    int k = 2;
    assertEquals(0.0, mergersdivtwo.findMaximum(revenues, k), DELTA);
  }

  @Test
  public void case68() {
    int[] revenues = { -699, -373, 510, 359, 229, -799, -522, -624, -973 };
    int k = 5;
    assertEquals(0.32000000000000456, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.32000000000000456);
  }

  @Test
  public void case69() {
    int[] revenues = { -981, -972, -963, -948, -946, -928, -927, -908, -902, -896, -895, -890, -882, -874, -874, -855, -826, -777, -770, -750, -728, -690, -621, -598, -575, -555, -497, -485, -481, -477, -463, -446, -402, -300, -296, -255, -236, -221, -203, -166, -143, -119, -113, -109, -85, -26, -26, -21, -9, 51 };
    int k = 3;
    assertEquals(-0.010811316695289008, mergersdivtwo.findMaximum(revenues, k), DELTA * -0.010811316695289008);
  }

  @Test
  public void case70() {
    int[] revenues = { -971, -948, -947, -936, -910, -898, -888, -884, -804, -784, -755, -733, -730, -708, -668, -615, -605, -601, -601, -591, -589, -562, -542, -513, -497, -435, -415, -396, -393, -363, -354, -344, -308, -305, -302, -274, -247, -217, -214, -192, -188, -113, -112, -112, -89, -70, -49, -9, -4, 56 };
    int k = 3;
    assertEquals(0.08931759489396048, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.08931759489396048);
  }

  @Test
  public void case71() {
    int[] revenues = { -986, -963, -948, -901, -874, -858, -855, -839, -776, -767, -738, -700, -689, -687, -653, -643, -637, -622, -609, -608, -607, -568, -542, -537, -502, -464, -449, -372, -363, -350, -349, -326, -289, -272, -251, -226, -208, -184, -184, -182, -180, -164, -152, -146, -87, -71, -48, -40, -34, 99 };
    int k = 3;
    assertEquals(0.14192664564740198, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.14192664564740198);
  }

  @Test
  public void case72() {
    int[] revenues = { -998, -944, -933, -856, -853, -835, -827, -813, -790, -784, -780, -777, -744, -712, -690, -682, -677, -671, -666, -604, -604, -596, -593, -591, -566, -529, -527, -398, -395, -368, -340, -277, -250, -241, -227, -223, -205, -178, -158, -154, -154, -132, -130, -120, -112, -82, -58, -45, -27, 98 };
    int k = 3;
    assertEquals(0.05946072289036408, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.05946072289036408);
  }

  @Test
  public void case73() {
    int[] revenues = { -983, -973, -961, -916, -903, -893, -892, -886, -875, -848, -823, -820, -779, -743, -739, -648, -614, -583, -540, -533, -522, -518, -506, -498, -470, -465, -459, -439, -428, -418, -418, -400, -368, -368, -338, -306, -299, -275, -249, -218, -194, -168, -160, -142, -134, -90, -86, -80, -16, 115 };
    int k = 3;
    assertEquals(-0.018686732359900777, mergersdivtwo.findMaximum(revenues, k), DELTA * -0.018686732359900777);
  }

  @Test
  public void case74() {
    int[] revenues = { -981, -972, -963, -948, -946, -928, -927, -908, -902, -896, -895, -890, -882, -874, -874, -855, -826, -777, -770, -750, -728, -690, -621, -598, -575, -555, -497, -485, -481, -477, -463, -446, -402, -300, -296, -255, -236, -221, -203, -166, -143, -119, -113, -109, -85, -26, -26, -21, -9, 21 };
    int k = 2;
    assertEquals(0.004461599147633777, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.004461599147633777);
  }

  @Test
  public void case75() {
    int[] revenues = { -971, -948, -947, -936, -910, -898, -888, -884, -804, -784, -755, -733, -730, -708, -668, -615, -605, -601, -601, -591, -589, -562, -542, -513, -497, -435, -415, -396, -393, -363, -354, -344, -308, -305, -302, -274, -247, -217, -214, -192, -188, -113, -112, -112, -89, -70, -49, -9, -4, 21 };
    int k = 2;
    assertEquals(-0.18781559978837414, mergersdivtwo.findMaximum(revenues, k), DELTA * -0.18781559978837414);
  }

  @Test
  public void case76() {
    int[] revenues = { -986, -963, -948, -901, -874, -858, -855, -839, -776, -767, -738, -700, -689, -687, -653, -643, -637, -622, -609, -608, -607, -568, -542, -537, -502, -464, -449, -372, -363, -350, -349, -326, -289, -272, -251, -226, -208, -184, -184, -182, -180, -164, -152, -146, -87, -71, -48, -40, -34, 45 };
    int k = 2;
    assertEquals(0.00724766587079273, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.00724766587079273);
  }

  @Test
  public void case77() {
    int[] revenues = { -998, -944, -933, -856, -853, -835, -827, -813, -790, -784, -780, -777, -744, -712, -690, -682, -677, -671, -666, -604, -604, -596, -593, -591, -566, -529, -527, -398, -395, -368, -340, -277, -250, -241, -227, -223, -205, -178, -158, -154, -154, -132, -130, -120, -112, -82, -58, -45, -27, 45 };
    int k = 2;
    assertEquals(0.17167842545826772, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.17167842545826772);
  }

  @Test
  public void case78() {
    int[] revenues = { -983, -973, -961, -916, -903, -893, -892, -886, -875, -848, -823, -820, -779, -743, -739, -648, -614, -583, -540, -533, -522, -518, -506, -498, -470, -465, -459, -439, -428, -418, -418, -400, -368, -368, -338, -306, -299, -275, -249, -218, -194, -168, -160, -142, -134, -90, -86, -80, -16, 54 };
    int k = 2;
    assertEquals(0.22746336958789826, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.22746336958789826);
  }

  @Test
  public void case79() {
    int[] revenues = { 265, -389, 101, -871, -752, -966, -847, -533, -909, -286, -244, -1000, -653 };
    int k = 3;
    assertEquals(0.6035665294924873, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.6035665294924873);
  }

  @Test
  public void case80() {
    int[] revenues = { -469, 138, 400, -909, -557, -466, -991, -962, -779, -553 };
    int k = 3;
    assertEquals(0.6203703703703999, mergersdivtwo.findMaximum(revenues, k), DELTA * 0.6203703703703999);
  }

  @Test
  public void case81() {
    int[] revenues = { 698, -613, 74, -443, 410, -247, 489, -541, 213, 712, 779, -3, -842, 407, 18, 314, -194, 525, -92, 664, 492, -587, -300, -499, -445, -188, -452, 385, 430, -787, 209, -274, -580, 212, -996, -144, 538, -611, 471, 714, 965, 833, 819, -643, -955, 812, -806, 123, -147, -506 };
    int k = 7;
    assertEquals(785.1837686374603, mergersdivtwo.findMaximum(revenues, k), DELTA * 785.1837686374603);
  }

  @Test
  public void case82() {
    int[] revenues = { -100, -100, -100, -100, -100, 100 };
    int k = 4;
    assertEquals(-66.66666666666667, mergersdivtwo.findMaximum(revenues, k), DELTA * -66.66666666666667);
  }

  @Test
  public void case83() {
    int[] revenues = { 886, -394, 173, -638, 236, -231, 733, -146, 0, 0, 296, -142, 515, -987, 10, -690, 803, -240, 636, -90, 867, -142, 88, -549, 379, -123, 114, -732, 841, -900, 947, -81, 519, 0, 0, -409, 391, -307, 813, -822, 269, -796, 641, -566, 880, -624, 811, -424, 303, -394 };
    int k = 12;
    assertEquals(760.2217796840958, mergersdivtwo.findMaximum(revenues, k), DELTA * 760.2217796840958);
  }

  @Test
  public void case84() {
    int[] revenues = { 869, 857, -938, -290, 79, -901, 32, -907, 256, -167, 510, -965, -826, 808, 890, -233, -881, 255, -709, 506, 334, -184, 726, -406, 204, -912, 325, -445, 440, -368 };
    int k = 7;
    assertEquals(706.0369290573373, mergersdivtwo.findMaximum(revenues, k), DELTA * 706.0369290573373);
  }

  @Test
  public void case85() {
    int[] revenues = { 383, 777, 793, 386, 649, 362, 690, 763, 540, 172, -211, 567, -782, 862, 67, 929, 22, 69, 393, 11, 229, -421, 784, -198, 315, 413, -91, 956, -862, 996, 305, 84, -336, 846, -313, 124, 582, 814, -434, -43, 87, -276, 788, -403, 754, 932, 676, 739, 226, -94 };
    int k = 5;
    assertEquals(925.5364900317867, mergersdivtwo.findMaximum(revenues, k), DELTA * 925.5364900317867);
  }

  @Test
  public void case86() {
    int[] revenues = { -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 };
    int k = 2;
    assertEquals(38.0, mergersdivtwo.findMaximum(revenues, k), DELTA * 38.0);
  }

  @Test
  public void case87() {
    int[] revenues = { -1000, 999, 2, 34, 1, 4, 5, 346, 244, 1000, 456, 365, -800, -564, -999, 346, -490, 1, 2, 356, 346, -564, -22, -599, 156, 123, 156, 15, 224, 503, 404, 129, -543, 455, 11, -245, -603, 167, 105, -123, 144, 905, -943, 383, 998, -534, 465, -659, 448, -33 };
    int k = 3;
    assertEquals(929.8667455560263, mergersdivtwo.findMaximum(revenues, k), DELTA * 929.8667455560263);
  }

  @Test
  public void case88() {
    int[] revenues = { 1, 2, 3 };
    int k = 2;
    assertEquals(2.25, mergersdivtwo.findMaximum(revenues, k), DELTA * 2.25);
  }

  @Test
  public void case89() {
    int[] revenues = { -999, -826, -345, 1, 2, 3, 4, 5, 6, 7, -999, -826, -345, 1, 2, 3, 4, 5, 6, 7, -999, -826, -345, 1, 2, 3, 4, 5, 6, 7, -999, -826, -345, 1, 2, 3, 4, 5, 6, 7, -999, -826, -345, 1, 2, 3, 4, 5, 6, 7 };
    int k = 2;
    assertEquals(6.967741925001604, mergersdivtwo.findMaximum(revenues, k), DELTA * 6.967741925001604);
  }

  @Test
  public void case90() {
    int[] revenues = { 1, 5, -2, 7, 123, -78, -7, 4, 5, 89, 12, 34, 23, 1, 3, 7, 8, 34, 12, 234, 76, 23, 45, 78, 7, 9, 9, 9, 9, 9, 9, 9, 9, 5, 78, 9, 2, 3, 45, 666, 34, 921, 345, 45, 678, 123, 234, 567, 62 };
    int k = 2;
    assertEquals(765.8335819838521, mergersdivtwo.findMaximum(revenues, k), DELTA * 765.8335819838521);
  }

  @Test
  public void case91() {
    int[] revenues = { -100, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
    int k = 4;
    assertEquals(-2.546875, mergersdivtwo.findMaximum(revenues, k), DELTA * -2.546875);
  }

  @Test
  public void case92() {
    int[] revenues = { -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000 };
    int k = 2;
    assertEquals(-1000.0, mergersdivtwo.findMaximum(revenues, k), DELTA * -1000.0);
  }

  @Test
  public void case93() {
    int[] revenues = { 1, 2, 3, 4, 5, 6, 7, 9, 9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 1, 354, 234, 2, 23, 23, 432, 34, 3, 4, 2, 12, 23, 3, 423, 365, 3, 32, 4, 34, 34, 23, 2, 3, 23, 23, 23, 34, 45, 4, 34, 44 };
    int k = 2;
    assertEquals(398.1234065371372, mergersdivtwo.findMaximum(revenues, k), DELTA * 398.1234065371372);
  }

  @Test
  public void case94() {
    int[] revenues = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    int k = 2;
    assertEquals(2.0, mergersdivtwo.findMaximum(revenues, k), DELTA * 2.0);
  }

  @Test
  public void case95() {
    int[] revenues = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int k = 2;
    assertEquals(1.0, mergersdivtwo.findMaximum(revenues, k), DELTA * 1.0);
  }

  @Test
  public void case96() {
    int[] revenues = { 1, 2, 2, 3, -10, 7 };
    int k = 3;
    assertEquals(2.9166666666666665, mergersdivtwo.findMaximum(revenues, k), DELTA * 2.9166666666666665);
  }

  @Test
  public void case97() {
    int[] revenues = { -100, 533, 678, 144, 756, 367, -53, -435, 864, -1000, 1000, 654, -563, 576, 875, 467, 362, 532, -678, 104, -345, 546, 752, 326, 325, -563, 576, 875, 467, 362, 532, -678, 104, -345, 546, 752, 326, 325, -100, 533, 678, 144, 756, 367, -53, -435, 864, -1000, 1000, 654 };
    int k = 3;
    assertEquals(952.6827937901388, mergersdivtwo.findMaximum(revenues, k), DELTA * 952.6827937901388);
  }

  @Test
  public void case98() {
    int[] revenues = { 869, 857, -938, -290, 79, -901, 32, -907, 256, -167, 510, -965, -826, 808, 890, -233, -881, 255, -709, 506, 334, -184, 726, -406, 204, -912, 325, -445, 440, -368, 222, 222, 222, 222, 222, 222, 222, 222, 222, 111, 111, 111, 222, 222, 111, 222, 111, 222, 111, 111 };
    int k = 2;
    assertEquals(857.4143047050397, mergersdivtwo.findMaximum(revenues, k), DELTA * 857.4143047050397);
  }

  @Test
  public void case99() {
    int[] revenues = { 180, 536, 48, -157, 126, 408, -8, -26, -619, 168, 945, -540, 815, 139, -692, 993, 960, 164, -143, 772, 116, -881, 591, 865, -764, 945, 815, 819, 7, 738, -725, 744, -170, 323, -857, 956, -713, 135, -514, -331, 861, 988, -314, 675, 127, -449, 225, -357, 716, -919 };
    int k = 2;
    assertEquals(980.8257445696017, mergersdivtwo.findMaximum(revenues, k), DELTA * 980.8257445696017);
  }

}
