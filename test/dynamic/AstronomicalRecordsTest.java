package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class AstronomicalRecordsTest {
    AstronomicalRecords astronomicalrecords = new AstronomicalRecords();

    @Test
    public void case1() {
        int[] A = { 1, 2, 1, 2, 1 };
        int[] B = { 2, 1, 2, 1, 2 };
        assertEquals(6, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case2() {
        int[] A = { 1, 2, 3, 4 };
        int[] B = { 2, 4, 6, 8 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case3() {
        int[] A = { 2, 3, 2, 3, 2, 3, 2 };
        int[] B = { 600, 700, 600, 700, 600, 700, 600 };
        assertEquals(10, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case4() {
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        int[] B = { 6, 7, 8, 9, 10, 11, 12 };
        assertEquals(12, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case5() {
        int[] A = { 100000000, 200000000 };
        int[] B = { 200000000, 100000000 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case6() {
        int[] A = { 85, 473, 340, 450, 331, 398, 66, 485, 130, 240, 283, 464, 193, 157, 218, 468, 202, 181, 192, 111, 128, 254, 303, 559, 296, 521, 377 };
        int[] B = { 473, 340, 161, 450, 331, 398, 168, 66, 224, 130, 240, 283, 464, 333, 157, 218, 468, 113, 202, 192, 111, 254, 156, 559, 561, 546, 296, 521, 377, 299, 467 };
        assertEquals(37, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case7() {
        int[] A = { 616, 652, 504 };
        int[] B = { 308, 232, 304, 296, 204, 264, 280, 194, 206, 290, 234, 226, 282, 294, 208, 326, 230, 270, 330, 190, 314, 246, 286, 340, 342, 202, 276, 248, 292, 196, 244, 254, 212, 312, 288, 274, 252, 306, 216, 272, 268, 192, 332, 334, 200, 224, 298, 198, 336 };
        assertEquals(49, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case8() {
        int[] A = { 690, 626, 711, 703, 740, 715, 714, 664, 621, 719, 693, 652, 683, 635, 665, 642, 678, 745, 617, 650 };
        int[] B = { 626, 605, 703, 693, 683, 642, 678 };
        assertEquals(21, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case9() {
        int[] A = { 196, 148, 126, 174, 132, 218, 214, 128, 164, 182, 176, 170, 172, 130, 136, 162, 236, 202, 240, 154, 180, 222, 146, 220, 156, 144, 118, 228, 122, 250 };
        int[] B = { 198, 327, 264, 270, 333, 234, 177, 183 };
        assertEquals(30, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case10() {
        int[] A = { 900, 564, 684, 696, 588, 780, 816, 516, 492, 540, 648, 948, 612, 456, 828, 480, 756, 720, 420, 444, 936, 792, 852, 744, 960, 768, 876, 528, 396, 432, 600, 636, 912, 504, 384, 672, 624 };
        int[] B = { 520, 360, 624, 336 };
        assertEquals(37, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case11() {
        int[] A = { 630, 620, 720, 790, 310, 390, 330, 680, 570, 520, 360, 500, 760, 290 };
        int[] B = { 252, 164, 288, 316, 124, 156, 268, 140, 272, 228, 208, 160, 144, 88, 200, 108, 116 };
        assertEquals(20, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case12() {
        int[] A = { 80, 230, 225, 305, 340, 325, 155, 100, 200, 245, 70, 170, 220, 345, 260, 285, 165, 290, 320, 330, 120, 240, 195, 135, 265, 350, 130, 95, 125, 255, 145, 75, 190, 215, 300, 140, 180, 205, 105, 85, 210, 295, 235, 115, 90, 185, 250 };
        int[] B = { 78, 54, 58 };
        assertEquals(47, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case13() {
        int[] A = { 494, 506, 636, 471, 596, 473, 549, 600, 487, 593, 581, 498, 562, 610, 513, 628, 585, 505, 514, 647, 641, 561, 624, 548, 589, 565, 606, 569, 635, 545, 546, 485, 630, 524 };
        int[] B = { 494, 636, 471, 608, 473, 487, 587, 592, 520, 562, 602, 513, 476, 538, 512, 559, 540, 514, 511, 647, 641, 561, 536, 510, 624, 646, 507, 565, 619, 635, 518, 493, 621, 566, 524 };
        assertEquals(54, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case14() {
        int[] A = { 475, 500, 410, 375, 665, 590, 645, 400, 380, 355, 360, 425, 560, 540, 600, 365, 535, 630, 530, 570, 565, 495, 485, 480 };
        int[] B = { 95, 82, 118, 129, 80, 101, 71, 72, 111, 108, 109, 126, 114, 113, 119, 121, 97, 96 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case15() {
        int[] A = { 208, 296, 186, 292, 306, 288, 304, 312, 258, 232, 338, 340, 274, 200, 218, 318, 242, 192, 334, 234, 226, 268, 330, 202, 216, 238, 176, 314, 316, 246, 250, 280, 170, 260, 336, 240, 230, 214, 310, 266, 182 };
        int[] B = { 416, 516, 408, 400, 636, 452, 660, 404, 616, 632, 500, 560, 364 };
        assertEquals(43, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case16() {
        int[] A = { 495, 810, 750, 720, 765, 690, 780, 915, 840, 555, 825, 630, 600, 795 };
        int[] B = { 324, 276, 366, 240 };
        assertEquals(14, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case17() {
        int[] A = { 116, 464, 456, 144, 412, 500, 476, 124, 384, 168, 492, 396, 528, 388, 508, 100, 360, 400, 156, 104, 284, 512, 408, 392, 112, 108 };
        int[] B = { 174, 252, 738, 594 };
        assertEquals(26, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case18() {
        int[] A = { 922, 778, 393, 751, 942, 564, 911, 485, 494, 711, 656, 493, 882, 766 };
        int[] B = { 778, 721, 494, 711, 493, 766 };
        assertEquals(15, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case19() {
        int[] A = { 598, 710, 754, 662, 604, 698, 630, 622, 620, 656, 634, 596, 628, 704 };
        int[] B = { 310, 314, 352 };
        assertEquals(14, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case20() {
        int[] A = { 456, 398, 389, 408, 348, 380, 350, 364, 376, 436, 375, 355, 383, 366, 421, 412, 441 };
        int[] B = { 878, 912, 778, 892, 760, 700, 794, 734, 872, 810, 766, 842, 824, 882 };
        assertEquals(22, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case21() {
        int[] A = { 173, 667, 148, 38, 581, 484, 653, 709, 345, 569, 556, 183, 708, 464, 494, 182 };
        int[] B = { 72, 599, 108, 581, 709, 345, 569, 556, 708, 557, 682, 456, 767, 494 };
        assertEquals(23, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case22() {
        int[] A = { 530, 451, 559, 469, 550, 678, 444 };
        int[] B = { 530, 664, 451, 559, 469, 517, 550, 652, 617, 548 };
        assertEquals(12, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case23() {
        int[] A = { 882, 770, 602, 630, 714, 784, 728, 616, 840, 756, 854, 742, 896, 672, 700, 868 };
        int[] B = { 840, 660, 795, 930 };
        assertEquals(16, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case24() {
        int[] A = { 416, 390, 508, 436, 378, 538, 450, 452, 446, 432, 494, 470, 534, 552, 528, 500, 426, 434, 458, 400, 576, 460, 520, 524 };
        int[] B = { 512, 416, 544, 390, 508, 436, 382, 546, 450, 414, 422, 490, 550, 446, 438, 386, 432, 470, 552, 424, 522, 528, 584, 500, 426, 448, 476, 402, 458, 468, 440, 548, 540, 396, 460, 480, 520, 524, 566 };
        assertEquals(47, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case25() {
        int[] A = { 353, 560, 644, 586, 587, 437, 423, 665, 477, 707, 593, 427, 595, 733, 491, 636, 643, 657, 430, 508, 523, 581, 527, 395, 591, 407, 358, 616, 543, 382, 411, 710, 558, 452, 518, 546, 580, 371, 451, 414, 529, 571, 680, 416, 475, 354, 721, 737 };
        int[] B = { 652, 412, 353, 644, 586, 587, 613, 707, 555, 593, 733, 491, 657, 430, 508, 483, 527, 395, 641, 591, 407, 358, 464, 616, 543, 402, 686, 411, 524, 710, 558, 452, 580, 371, 542, 451, 669, 719, 571, 416, 475, 521, 354, 623, 601, 721, 459, 661 };
        assertEquals(66, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case26() {
        int[] A = { 234, 200, 188, 184, 187, 203, 240, 230, 192, 228, 249, 222, 220 };
        int[] B = { 247, 201, 234, 246, 208, 194, 189, 200, 213, 224, 218, 229, 191, 188, 184, 253, 187, 243, 215, 231, 233, 203, 240, 230, 193, 245, 235, 192, 248, 228, 249, 202, 223, 251, 197, 216, 212, 222 };
        assertEquals(39, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case27() {
        int[] A = { 328, 508, 413, 480, 482, 524, 442, 304, 499, 305, 464, 447, 314, 345 };
        int[] B = { 402, 508, 413, 414, 480, 482, 383, 304, 305, 447, 373, 314 };
        assertEquals(18, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case28() {
        int[] A = { 144, 195, 135, 201, 165, 150 };
        int[] B = { 192, 272, 156, 176, 148, 284, 276, 260, 248, 152, 180, 268, 212, 172, 224, 240 };
        assertEquals(18, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case29() {
        int[] A = { 271, 178, 277, 225, 237, 547, 406, 361, 554, 437, 340, 485, 266, 505, 158, 238, 444, 513, 373, 532, 464, 190, 216, 268, 669, 529, 168, 478, 366, 626 };
        int[] B = { 271, 150, 246, 277, 225, 237, 102, 547, 406, 361, 710, 554, 437, 156, 438, 123, 485, 158, 238, 513, 373, 532, 400, 449, 534, 268, 679, 529, 168, 478, 626, 182 };
        assertEquals(42, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case30() {
        int[] A = { 834, 750, 860, 704, 692, 850, 863, 838, 857, 793, 739, 748, 731, 805, 751, 788, 823, 854, 706, 779, 694, 787, 866, 695, 780, 757, 818, 717, 746, 715, 811, 796, 770, 868, 790, 774, 855, 859, 828, 718, 858 };
        int[] B = { 750, 860, 692, 850, 863, 755, 739, 748, 731, 751, 854, 779, 695, 789, 783, 757, 746, 749, 796, 770, 790, 774, 828, 841, 858 };
        assertEquals(46, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case31() {
        int[] A = { 81, 156, 195, 279, 48, 120, 291, 198, 225, 294, 384, 267, 285, 189, 366, 372, 186, 330, 417, 21, 93 };
        int[] B = { 260, 465, 80, 200, 485, 375, 490, 315, 620, 400, 695, 155 };
        assertEquals(22, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case32() {
        int[] A = { 262, 386, 353, 494, 526, 596, 101, 544, 58, 132, 452, 554, 41, 574, 235, 329, 433, 377, 618, 679, 204, 664, 73, 482, 661, 645, 147, 585, 116, 438, 358, 651, 108, 639, 308, 285, 263, 455, 104, 418 };
        int[] B = { 262, 204, 482 };
        assertEquals(40, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case33() {
        int[] A = { 187, 321, 280, 394, 614, 451, 546, 367, 624, 633, 514, 461, 471, 667, 399, 295, 364, 665, 569, 498, 412, 176, 424, 397, 268, 182, 669, 208, 639, 522, 146, 143, 358, 541, 239, 286, 366, 441, 648, 433, 234 };
        int[] B = { 187, 394, 151, 342, 451, 546, 191, 624, 307, 514, 303, 461, 601, 560, 295, 494, 452, 364, 340, 665, 569, 257, 412, 176, 424, 397, 305, 182, 669, 208, 636, 241, 654, 522, 146, 541, 239, 286, 435, 441, 648, 433, 586, 234, 279 };
        assertEquals(59, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case34() {
        int[] A = { 762, 734, 797, 809, 810, 766, 830, 757, 752, 635, 777, 732, 629, 618, 722, 697, 790, 633, 736, 814 };
        int[] B = { 809, 810, 635, 777, 732, 618, 697, 633, 736 };
        assertEquals(20, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case35() {
        int[] A = { 792, 414, 378, 675, 567, 432, 441, 639, 522, 369, 549, 657, 765, 405, 747, 423, 576 };
        int[] B = { 276, 306, 450, 378, 288, 390, 294, 504, 432, 480, 348, 408, 210, 444, 396, 222, 336, 246, 366, 438, 510, 270, 498, 324, 198, 282, 234, 300, 540, 456, 372, 384 };
        assertEquals(35, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case36() {
        int[] A = { 243, 316, 276, 265, 213, 212, 246, 249, 278, 314, 220, 266, 233, 306, 305, 259, 240 };
        int[] B = { 486, 632, 594, 542, 496, 426, 424, 608, 614, 662, 598, 452, 556, 478, 652, 440, 518, 480 };
        assertEquals(27, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case37() {
        int[] A = { 63, 357, 555, 66, 576, 363, 288, 243, 312, 426, 78, 147, 138, 345, 525, 45, 534, 552, 195, 252, 225, 390, 468, 276, 507, 606, 369, 75, 84, 339, 501, 447, 480 };
        int[] B = { 21, 185, 68, 98, 192, 121, 104, 142, 46, 62, 188, 15, 178, 184, 65, 84, 75, 130, 202, 123, 106, 99, 28, 204, 97, 149, 37, 160 };
        assertEquals(42, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case38() {
        int[] A = { 573, 509, 168, 474, 133, 264, 432, 633, 645, 252, 512, 249, 255, 543, 351, 511, 500, 414, 602, 640, 567, 208, 384, 480, 580, 626, 518, 473, 250, 493, 615, 593, 575, 498, 301, 479, 396, 443, 141, 663, 175, 217, 173, 138, 574, 213, 130, 413, 193 };
        int[] B = { 624, 573, 509, 474, 264, 633, 645, 249, 433, 255, 543, 351, 511, 500, 640, 289, 208, 480, 580, 626, 518, 473, 250, 615, 421, 575, 420, 479, 396, 443, 141, 663, 175, 217, 173, 387, 574, 667, 130, 413, 193, 562 };
        assertEquals(57, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case39() {
        int[] A = { 320, 432, 496, 592, 448, 656 };
        int[] B = { 54, 58, 52, 90, 78, 88, 62, 74, 76, 56, 96, 66, 94, 98, 68, 50, 32, 46, 48, 38, 64 };
        assertEquals(23, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case40() {
        int[] A = { 465, 489, 786, 555, 519, 360, 729, 327, 678, 735, 720, 597, 429, 711, 789, 300, 696, 813, 411, 420, 573, 318, 258, 288, 225, 270, 636, 486, 405, 237, 762, 474, 660 };
        int[] B = { 310, 240, 414, 486, 490, 474, 526, 200, 464, 280, 192, 424, 270, 508 };
        assertEquals(34, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case41() {
        int[] A = { 288, 343, 336, 251, 273, 372, 536, 125, 469, 458, 418 };
        int[] B = { 288, 588, 530, 242, 262, 343, 254, 336, 398, 296, 331, 251, 324, 459, 297, 273, 298, 372, 536, 125, 469, 252, 458, 447, 513, 537, 572, 390, 491, 418, 187 };
        assertEquals(31, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case42() {
        int[] A = { 198, 114, 111, 201, 150, 120, 180, 177, 99, 132, 123 };
        int[] B = { 558, 432, 504, 486, 387, 594, 342, 333, 315, 360, 540, 423, 531, 297, 459, 396, 369, 378 };
        assertEquals(20, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case43() {
        int[] A = { 50, 120, 142, 201, 113, 163, 214, 197, 49, 122, 218, 182, 234, 130, 106, 39, 127, 148, 193, 42, 213, 200, 37, 223, 90, 68, 215, 115, 67, 98, 124, 195, 173, 83, 204, 237, 198, 35, 71, 87, 184, 85, 225, 136, 125, 116, 158, 81, 91 };
        int[] B = { 402, 394, 260, 296, 166, 174, 250, 316, 162 };
        assertEquals(49, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case44() {
        int[] A = { 350, 382, 476, 473, 457, 344, 483, 378, 479, 465, 349, 548, 525, 537, 498, 420, 456, 340, 395, 421, 348, 489, 448, 521, 417, 469, 510, 475, 481, 509, 499, 402, 575, 399, 446, 545, 557 };
        int[] B = { 350, 580, 472, 382, 363, 418, 546, 360, 344, 519, 569, 483, 378, 460, 465, 349, 548, 584, 525, 342, 537, 540, 488, 456, 502, 541, 527, 438, 448, 576, 339, 415, 377, 510, 422, 414, 481, 509, 427, 499, 575, 518, 399, 557, 447, 551 };
        assertEquals(64, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case45() {
        int[] A = { 821, 699, 600, 852, 909, 680, 901, 691, 824, 779, 867, 860, 903, 883, 912, 664, 896, 652, 954, 927, 640, 714, 594, 911, 551, 815, 951, 659, 637, 888, 810, 892, 853, 578, 764, 558, 946, 644, 601, 931, 796, 704, 542, 681, 751, 842 };
        int[] B = { 699, 946 };
        assertEquals(46, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case46() {
        int[] A = { 34, 126, 42, 120, 104, 66, 38, 112, 108, 142, 144, 68, 44, 130, 80, 46, 62, 52, 54, 64, 84 };
        int[] B = { 195, 315, 145, 105, 215, 240, 90, 285, 260, 165, 95, 220, 270, 355, 360, 170, 115, 265, 155, 135, 160, 125 };
        assertEquals(30, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case47() {
        int[] A = { 680, 595, 544, 459, 529, 521, 624, 494, 662, 407, 391, 398, 404, 365, 322, 399, 614, 651, 487, 382, 454, 432, 428, 386, 395, 451, 356, 349, 434, 593, 664, 535, 558, 455, 598, 583, 506, 431, 513, 596, 486, 527, 625, 546, 351, 668, 331 };
        int[] B = { 680, 595, 670, 544, 529, 521, 553, 494, 662, 552, 398, 322, 559, 619, 560, 484, 487, 454, 495, 386, 590, 470, 655, 593, 444, 664, 475, 558, 509, 598, 583, 506, 486, 533, 546, 351 };
        assertEquals(62, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case48() {
        int[] A = { 630, 570, 540 };
        int[] B = { 781, 770, 759, 583, 924, 495, 638, 803, 836, 572, 693, 858, 825, 506, 440, 946, 968, 407, 792, 297, 341, 660, 748, 814, 561, 627, 594 };
        assertEquals(27, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case49() {
        int[] A = { 459, 432, 702, 342, 792, 414, 351, 666 };
        int[] B = { 553, 357, 336, 350, 525, 392, 483, 595, 448, 546, 441, 413, 560, 644, 245, 588, 266, 602, 532, 371, 315, 504, 364, 616, 301, 252, 539, 322, 609, 287, 455, 574, 385, 518, 567, 511, 378, 259, 651, 399, 308, 427, 434, 497, 329, 637, 343 };
        assertEquals(48, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case50() {
        int[] A = { 581, 585, 556, 628, 619, 570, 616, 622, 584, 592, 560, 552, 575, 598, 609, 600, 569, 557, 620, 599, 629, 607, 572 };
        int[] B = { 581, 585, 556, 628, 619, 622, 584, 592, 552, 609, 600, 620, 574, 629, 607, 572 };
        assertEquals(24, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case51() {
        int[] A = { 653, 719, 792, 706, 788, 902, 642, 857, 738, 744, 692, 778, 655, 657, 615, 654, 814, 634, 837, 662, 687, 739, 650, 853, 813, 930, 834, 603, 624, 689, 810, 757, 682, 927, 717, 780, 779, 839, 873, 754, 582, 791 };
        int[] B = { 821, 788, 902, 642, 738, 692, 834, 624, 810, 881, 555, 682, 780, 779, 773, 593, 754 };
        assertEquals(47, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case52() {
        int[] A = { 494, 649, 683 };
        int[] B = { 533, 487, 494, 550, 649, 592, 575, 683, 564 };
        assertEquals(9, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case53() {
        int[] A = { 480, 484, 486, 501, 514, 472, 409, 511, 422, 468, 526, 428, 470, 515, 426, 493, 432, 449, 450, 444, 532, 430 };
        int[] B = { 528, 448, 463, 480, 518, 517, 484, 512, 540, 475, 486, 519, 501, 460, 472, 413, 421, 409, 520, 536, 476, 447, 511, 424, 422, 468, 526, 428, 470, 515, 452, 426, 496, 425, 436, 493, 417, 547, 506, 449, 450, 439, 416, 420, 444, 465, 532, 430 };
        assertEquals(50, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case54() {
        int[] A = { 371, 244, 454, 141, 257, 591, 258, 504, 513, 208, 466, 364, 191, 344, 540, 476, 471, 157, 528, 110, 434, 537, 246, 415, 216, 214, 418, 578, 324, 502, 176, 507, 286, 437, 482, 337, 441, 247, 124, 616, 653, 552, 197, 171, 351, 545, 407 };
        int[] B = { 371, 591, 110 };
        assertEquals(47, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case55() {
        int[] A = { 220, 194, 237, 195, 188, 252, 202, 190, 174, 229, 246, 200, 124, 257, 249, 152, 256, 147, 234, 227, 253, 226, 238, 149, 254, 193, 171, 187, 185, 204, 168, 125, 197, 164, 139, 175, 156, 251, 206, 148, 170, 228, 221, 235, 182, 163, 127 };
        int[] B = { 229, 200, 249, 152, 217, 147, 234, 227, 226, 254, 171, 204, 139, 251, 148, 182, 127 };
        assertEquals(48, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case56() {
        int[] A = { 716, 610, 662, 742, 702, 611, 653, 727, 791, 747, 600, 706, 575, 652, 718, 735, 713, 636, 639, 670, 715, 659, 684, 664, 790, 711, 586, 646, 625, 675, 786, 673, 649, 615, 720, 693, 645 };
        int[] B = { 671, 610, 560, 662, 742, 702, 611, 653, 727, 791, 747, 600, 706, 762, 652, 735, 746, 713, 636, 670, 715, 782, 659, 687, 728, 633, 684, 655, 664, 584, 741, 743, 711, 554, 577, 678, 586, 646, 625, 675, 786, 673, 614, 572, 649, 562, 592, 615, 693, 645 };
        assertEquals(56, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case57() {
        int[] A = { 34, 75, 32, 93, 71, 52, 45, 57 };
        int[] B = { 238, 518, 595, 294, 448, 357, 525, 574, 462, 616, 511, 651, 644, 483, 469, 280, 658, 588, 497, 532, 259, 315, 399, 266 };
        assertEquals(26, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case58() {
        int[] A = { 769, 642, 636, 626, 729, 705, 771, 789, 672, 669, 671, 779, 774, 562, 727, 747, 694, 766, 718, 557, 751, 692, 802, 786, 667, 746, 732, 744, 674, 569, 607, 663, 801, 697 };
        int[] B = { 607, 743, 747, 779, 744, 801, 694, 751, 642, 789, 766, 718, 669, 769, 674, 663, 771, 732, 569, 786, 705, 658, 672, 727 };
        assertEquals(52, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case59() {
        int[] A = { 672, 550, 754, 515, 588, 614, 425, 714, 585, 696, 525, 489, 612, 423, 483, 685, 697, 608, 478, 546, 577, 574, 548, 591, 683 };
        int[] B = { 569, 672, 439, 620, 574, 740, 754, 462, 632, 629, 700, 755, 441, 435, 643, 544, 489, 550, 425, 423, 712, 579, 490, 525, 714, 426, 696, 614, 628, 483, 637, 670, 548, 478, 448, 609, 486, 697, 735, 707, 683, 477, 602, 684, 561, 612, 641, 546 };
        assertEquals(65, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case60() {
        int[] A = { 544, 340, 850, 153, 901, 782, 646, 680, 119, 187, 425, 578, 272, 374, 918, 799, 816, 459, 493, 442, 357 };
        int[] B = { 72, 26, 76, 106, 100, 108, 50, 34, 58, 20, 90, 92, 28, 52, 56, 38, 80, 94, 88 };
        assertEquals(36, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case61() {
        int[] A = { 398, 430, 396, 358, 387, 499, 461, 409, 370, 496, 418, 359, 395, 410, 453 };
        int[] B = { 458, 410, 387, 480, 395, 358, 398, 484, 506, 461, 430, 466, 396, 453, 499, 456, 359, 370, 409, 418, 356, 496 };
        assertEquals(31, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case62() {
        int[] A = { 678704080, 610011560, 682551800, 646565800, 596356640, 669283200, 596356640, 624366200, 682812920, 682812920, 622654880, 631864840, 682551800, 624366200, 632926960, 622654880, 624366200, 682812920, 646565800, 632306240, 622654880, 656994520, 678704080, 614925760, 678704080, 656637560, 656838880, 676262600, 601278320, 646565800, 656637560, 631864840, 646565800, 632926960, 673826880, 646565800, 669283200, 682812920, 631864840, 616391200, 624366200 };
        int[] B = { 786288286, 715661762, 771549133, 786288286, 700719052, 801998365, 771549133, 794608555, 742959832, 715661762, 731619484, 782856581, 788293306, 794608555, 715661762, 725142837, 742441187, 771549133, 728681514, 771549133, 799723095, 768711978, 794608555, 788452777, 700719052, 771549133, 715661762, 780679588, 724259660, 786288286, 794608555, 724259660, 724259660, 776973121 };
        assertEquals(67, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case63() {
        int[] A = { 294386850, 236610315, 226830645, 323783910, 240194835, 236610315, 270044235, 317848815, 332072325, 297884025, 280224135, 313868835, 268349445, 325391625, 317848815, 287285400, 278656650, 291045240, 252825075, 317262240, 317848815, 275236335 };
        int[] B = { 790976472, 873793140, 904376352, 636486180, 949766136, 823611624, 792129756, 792129756, 821990796, 787158372, 803553960, 652642716, 863534760, 807359916, 803553960, 964490208, 771570228, 803553960, 924796092, 668298048, 792129756, 904376352, 924796092, 807359916, 636486180, 904376352, 920681916, 807359916, 668298048 };
        assertEquals(46, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case64() {
        int[] A = { 817438941, 809375184, 841429377, 823887414, 841429377, 841429377, 824105115, 841246128, 841997034, 841429377, 814195143, 817438941, 824225760, 823887414 };
        int[] B = { 280415376, 280415376, 280415376, 273333708, 274629138, 274741920, 274741920, 280476459, 279527241, 280415376 };
        assertEquals(20, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case65() {
        int[] A = { 46577926, 46577926, 46577926, 45908604 };
        int[] B = { 901993563, 973887965, 841530945, 939282407, 819330388, 954847483, 901993563, 882402533, 870622044, 834430237, 939282407, 864076681, 960632952, 841530945, 979701888, 925852693, 915223525, 931885269, 851871555, 864076681, 939282407, 973887965, 837604703, 870622044, 873110375, 864076681, 954847483, 973887965 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case66() {
        int[] A = { 68094980, 69321060, 65046950, 299319000, 82843010, 404814080, 185189930, 423182310, 264903830, 113696910, 444069310, 526816330, 185189930, 538773200, 526816330, 404814080, 420048780, 113696910, 175878180, 526816330, 423182310 };
        int[] B = { 367882860, 59578640, 290821620, 198460480, 441044760, 66780050, 367882860, 367882860, 539075980, 82843010, 344500600, 219969310, 290821620, 527258590, 404814080, 420048780, 367882860, 441044760, 219969310, 59578640, 82843010, 264903830, 69321060, 79634750, 68094980, 176278900, 299535510, 285043190, 548975800, 423182310, 538773200, 423182310, 526816330, 66780050, 59578640, 290821620, 318590810, 198460480, 113696910 };
        assertEquals(54, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case67() {
        int[] A = { 21884751, 14733586, 23901892, 22693608, 13423046, 14175910, 13423046, 14175910, 21705278, 26577978, 13423046, 17894604, 24877594, 26033238, 20510700 };
        int[] B = { 6075390, 9725832, 5923935, 10661826, 7669116 };
        assertEquals(18, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case68() {
        int[] A = { 592621258, 572588492, 607626886, 600881932, 579207136, 597345252, 572234824, 574609452, 583526938, 597926278, 574609452, 570491746, 581960694, 590044534 };
        int[] B = { 630218574, 648998046, 621665280, 638016372, 643817502, 643817502, 623257218, 605799864, 613732572, 611196264, 637152948, 638636958, 604153962, 611574012, 637233894, 607688604, 641793852, 618940098, 613786536 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case69() {
        int[] A = { 500996150, 755423650, 353747470, 749005850, 638728200, 618688550, 538051910, 415642920, 795591130, 632166390, 676720310, 606877870, 750079110, 609691620, 612785480, 750340670, 488633600, 650494120, 835884540, 709423590, 353948420, 814659880, 718564730 };
        int[] B = { 155047850, 151084730, 114614064, 163539618, 160533534, 102862822, 135344062, 71298550, 130098824, 143712946, 114614064, 161643824, 165974406, 70749494, 150015822, 143712946, 114614064, 161643824, 130098824, 96454958, 161643824, 150015822, 167176908, 150015822, 126433278, 103821284, 123737710, 163539618, 174657952, 150015822, 123737710, 165974406, 70749494, 133940856, 133940856, 121938324, 121938324, 150015822, 163539618, 114614064, 95604604, 83128584, 161643824, 167176908, 123737710, 114614064 };
        assertEquals(63, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case70() {
        int[] A = { 167678202, 192210312, 212056176, 160199724, 253989696, 160199724, 140094903, 189722073, 253989696, 188995659, 164295915, 183892413, 269357814, 269357814, 140094903, 253989696, 162160875, 218289909, 167678202, 212056176, 142904232, 183892413, 183892413, 133113489, 189722073, 134192685, 183892413, 236804292, 275445597, 140094903, 140094903, 212056176, 160199724, 134192685, 160199724, 144126876, 183892413 };
        int[] B = { 128339976, 76665076, 143965390, 135997760, 143965390, 75926734, 77449296 };
        assertEquals(42, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case71() {
        int[] A = { 823942220, 823942220, 812581712, 824675156, 824675156, 823942220, 824675156, 811848776 };
        int[] B = { 662738760, 673996950, 671705460, 668517300, 676985850, 674993250, 674495100, 674793990, 672303240, 662439870, 664830990, 674694360, 671705460, 674096580, 668517300, 662439870, 679177710, 666723960, 662439870, 662140980, 679974750, 676985850, 667421370, 668915820, 672502500, 664233210, 672004350, 677284740, 675591030, 674793990, 667421370, 672502500, 671306940, 672004350, 664233210, 668417670, 668218410, 667222110, 672103980, 671306940, 670011750, 674793990, 670310640, 671705460, 679177710, 674793990, 679974750, 671705460 };
        assertEquals(53, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case72() {
        int[] A = { 476890607, 510526999, 459539440, 492998175, 509638714, 481391251, 476890607, 492109890, 510526999, 497202724, 445208442, 476890607, 508335896, 497202724, 503183843, 459539440, 437391534, 511711379, 456223176, 503183843, 510526999, 507210735, 507210735, 508631991, 492998175 };
        int[] B = { 49414689, 55457820, 52868880, 58871133, 51717483, 58680369, 56009673, 54170163, 56943054, 49414689, 52487352, 54170163, 50320818, 50320818, 52868880, 50320818, 56009673, 51717483, 56616030, 57890061, 58353345, 49516884, 58516857, 53250408, 56943054 };
        assertEquals(44, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case73() {
        int[] A = { 635624910, 670565760, 678541044, 656318850, 656318850, 647486139, 653475999, 671252448, 642607482, 653475999, 668309766, 656318850, 678541044, 656318850, 671252448, 670565760, 650581833, 637685907, 652506612, 636686664, 666438168, 677895408, 653475999, 656318850, 666438168, 670565760, 669229704, 646097835, 670565760, 646097835, 643463976, 655202982, 645339306, 645339306 };
        int[] B = { 255835216, 254946692, 258192116, 255835216, 252609812, 255620456, 255620456, 252609812, 254228884, 255620456 };
        assertEquals(41, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case74() {
        int[] A = { 557917520, 484018160, 580595920, 459391120, 459391120, 540812960, 508384520, 589139080, 461887720, 508384520, 459391120, 583068960, 472601440, 583068960, 577249640, 570150480, 580595920, 485257720, 548941160, 565816960, 548941160, 580595920, 589139080, 580595920, 541773600, 459391120, 580595920, 459391120, 511353840, 540812960, 537604240 };
        int[] B = { 909895320, 837532576, 905370488, 860970872, 837532576, 858657200, 860970872, 724434424, 806804008, 909895320, 724434424 };
        assertEquals(39, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case75() {
        int[] A = { 832003632, 514782521, 977216192, 800411934, 824171354, 514782521, 922983650, 722579039 };
        int[] B = { 514782521, 664724977, 832003632, 722579039, 800411934, 689209546, 550604375, 922983650, 956924072, 722579039, 689209546 };
        assertEquals(15, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case76() {
        int[] A = { 353301683, 666535006, 573868959, 173892162, 666535006, 173892162, 573868959, 696042249, 259403444, 259403444, 666535006, 333589019, 573868959, 494085117, 259403444, 210602416, 664712509, 541586779, 381929994, 437635841, 689607046, 353301683, 687665756, 259403444 };
        int[] B = { 333589019, 687665756, 171161244, 469122433, 689607046, 239114910, 179947887, 696042249, 666535006, 190555583, 541586779, 226058720, 381868134, 541586779, 171161244, 512881587, 541586779, 452971778, 689607046, 172290796, 381868134, 666535006, 381868134, 696042249, 239114910, 288515239, 437635841, 696042249, 239114910 };
        assertEquals(49, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case77() {
        int[] A = { 135140749, 135140749, 326788299, 84566703, 187220931, 187220931, 223973798, 170543131, 248650920, 431261917, 169950759, 187220931, 67286883, 197580442, 329007489, 210505634, 434137443, 343959312, 343959312 };
        int[] B = { 503776132, 855186572, 936898786, 169133406, 484346352, 705712840, 423793374, 395160884, 447947596, 339901518, 461120608, 868274886, 374441862, 187747128 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case78() {
        int[] A = { 339742536, 284852316, 376128480, 388397520, 403724664, 328846896, 403724664, 122333316, 359116632, 388397520, 403724664, 388397520, 388397520, 359116632, 92182608, 356122620, 119513268, 108397884, 47840100, 403724664, 348697104, 350079660, 403724664, 352716588, 352716588, 403724664, 403724664, 284852316, 139903680, 284852316, 323792784, 106584996, 211979712, 311944920, 106584996, 403724664 };
        int[] B = { 485562, 476980, 485562, 495096, 187054, 485562, 73150, 643384 };
        assertEquals(41, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case79() {
        int[] A = { 549585641, 549585641, 653966245, 530278629, 577982587, 518432703, 577982587, 530278629, 561686527, 561686527, 530278629 };
        int[] B = { 563348501, 517376553, 646142079, 593115405, 529802908, 646142079, 517376553, 577379483, 653966245, 610980657, 541280429, 577379483, 597102715, 561686527, 593115405, 646142079, 540978611, 561686527, 580836514, 538907754, 529802908, 563348501, 610980657 };
        assertEquals(31, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case80() {
        int[] A = { 656627396, 724554368, 724554368, 617003329, 611342748 };
        int[] B = { 800667582, 649492584, 817464804, 666289806, 599100918, 543110178, 767073138, 806266656, 772672212, 559907400, 783870360, 755874990, 783870360, 744676842, 554308326, 621497214, 677487954, 823063878, 604699992, 571105548, 660690732, 587902770, 811865730, 683087028, 795068508, 694285176, 688686102, 727879620, 789469434, 705483324, 666289806, 576704622, 761474064, 778271286, 554308326, 610299066, 733478694, 548709252, 761474064, 643893510, 593501844, 655091658, 711082398, 565506474 };
        assertEquals(47, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case81() {
        int[] A = { 722749797, 523387718, 771804054, 666807736, 682575684, 713542340, 760333868, 713542340, 749461384, 722749797, 713542340, 523387718, 749461384, 722749797, 694899730, 656504492, 760333868 };
        int[] B = { 530816706, 612578982, 786501468, 612578982, 695573928, 612578982, 786501468, 786501468, 774812856, 737383194, 774812856, 774812856, 774812856 };
        assertEquals(26, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case82() {
        int[] A = { 678704080, 610011560, 682551800, 646565800, 596356640, 669283200, 596356640, 624366200, 682812920, 682812920, 622654880, 631864840, 682551800, 624366200, 632926960, 622654880, 624366200, 682812920, 646565800, 632306240, 622654880, 656994520, 678704080, 614925760, 678704080, 656637560, 656838880, 676262600, 601278320, 646565800, 656637560, 631864840, 646565800, 632926960, 673826880, 646565800, 669283200, 682812920, 631864840, 616391200, 624366200 };
        int[] B = { 786288286, 715661762, 771549133, 786288286, 700719052, 801998365, 771549133, 794608555, 742959832, 715661762, 731619484, 782856581, 788293306, 794608555, 715661762, 725142837, 742441187, 771549133, 728681514, 771549133, 799723095, 768711978, 794608555, 788452777, 700719052, 771549133, 715661762, 780679588, 724259660, 786288286, 794608555, 724259660, 724259660, 776973121 };
        assertEquals(67, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case83() {
        int[] A = { 294386850, 236610315, 226830645, 323783910, 240194835, 236610315, 270044235, 317848815, 332072325, 297884025, 280224135, 313868835, 268349445, 325391625, 317848815, 287285400, 278656650, 291045240, 252825075, 317262240, 317848815, 275236335 };
        int[] B = { 790976472, 873793140, 904376352, 636486180, 949766136, 823611624, 792129756, 792129756, 821990796, 787158372, 803553960, 652642716, 863534760, 807359916, 803553960, 964490208, 771570228, 803553960, 924796092, 668298048, 792129756, 904376352, 924796092, 807359916, 636486180, 904376352, 920681916, 807359916, 668298048 };
        assertEquals(46, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case84() {
        int[] A = { 817438941, 809375184, 841429377, 823887414, 841429377, 841429377, 824105115, 841246128, 841997034, 841429377, 814195143, 817438941, 824225760, 823887414 };
        int[] B = { 280415376, 280415376, 280415376, 273333708, 274629138, 274741920, 274741920, 280476459, 279527241, 280415376 };
        assertEquals(20, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case85() {
        int[] A = { 46577926, 46577926, 46577926, 45908604 };
        int[] B = { 901993563, 973887965, 841530945, 939282407, 819330388, 954847483, 901993563, 882402533, 870622044, 834430237, 939282407, 864076681, 960632952, 841530945, 979701888, 925852693, 915223525, 931885269, 851871555, 864076681, 939282407, 973887965, 837604703, 870622044, 873110375, 864076681, 954847483, 973887965 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case86() {
        int[] A = { 68094980, 69321060, 65046950, 299319000, 82843010, 404814080, 185189930, 423182310, 264903830, 113696910, 444069310, 526816330, 185189930, 538773200, 526816330, 404814080, 420048780, 113696910, 175878180, 526816330, 423182310 };
        int[] B = { 367882860, 59578640, 290821620, 198460480, 441044760, 66780050, 367882860, 367882860, 539075980, 82843010, 344500600, 219969310, 290821620, 527258590, 404814080, 420048780, 367882860, 441044760, 219969310, 59578640, 82843010, 264903830, 69321060, 79634750, 68094980, 176278900, 299535510, 285043190, 548975800, 423182310, 538773200, 423182310, 526816330, 66780050, 59578640, 290821620, 318590810, 198460480, 113696910 };
        assertEquals(54, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case87() {
        int[] A = { 21884751, 14733586, 23901892, 22693608, 13423046, 14175910, 13423046, 14175910, 21705278, 26577978, 13423046, 17894604, 24877594, 26033238, 20510700 };
        int[] B = { 6075390, 9725832, 5923935, 10661826, 7669116 };
        assertEquals(18, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case88() {
        int[] A = { 592621258, 572588492, 607626886, 600881932, 579207136, 597345252, 572234824, 574609452, 583526938, 597926278, 574609452, 570491746, 581960694, 590044534 };
        int[] B = { 630218574, 648998046, 621665280, 638016372, 643817502, 643817502, 623257218, 605799864, 613732572, 611196264, 637152948, 638636958, 604153962, 611574012, 637233894, 607688604, 641793852, 618940098, 613786536 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case89() {
        int[] A = { 500996150, 755423650, 353747470, 749005850, 638728200, 618688550, 538051910, 415642920, 795591130, 632166390, 676720310, 606877870, 750079110, 609691620, 612785480, 750340670, 488633600, 650494120, 835884540, 709423590, 353948420, 814659880, 718564730 };
        int[] B = { 155047850, 151084730, 114614064, 163539618, 160533534, 102862822, 135344062, 71298550, 130098824, 143712946, 114614064, 161643824, 165974406, 70749494, 150015822, 143712946, 114614064, 161643824, 130098824, 96454958, 161643824, 150015822, 167176908, 150015822, 126433278, 103821284, 123737710, 163539618, 174657952, 150015822, 123737710, 165974406, 70749494, 133940856, 133940856, 121938324, 121938324, 150015822, 163539618, 114614064, 95604604, 83128584, 161643824, 167176908, 123737710, 114614064 };
        assertEquals(63, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case90() {
        int[] A = { 167678202, 192210312, 212056176, 160199724, 253989696, 160199724, 140094903, 189722073, 253989696, 188995659, 164295915, 183892413, 269357814, 269357814, 140094903, 253989696, 162160875, 218289909, 167678202, 212056176, 142904232, 183892413, 183892413, 133113489, 189722073, 134192685, 183892413, 236804292, 275445597, 140094903, 140094903, 212056176, 160199724, 134192685, 160199724, 144126876, 183892413 };
        int[] B = { 128339976, 76665076, 143965390, 135997760, 143965390, 75926734, 77449296 };
        assertEquals(42, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case91() {
        int[] A = { 823942220, 823942220, 812581712, 824675156, 824675156, 823942220, 824675156, 811848776 };
        int[] B = { 662738760, 673996950, 671705460, 668517300, 676985850, 674993250, 674495100, 674793990, 672303240, 662439870, 664830990, 674694360, 671705460, 674096580, 668517300, 662439870, 679177710, 666723960, 662439870, 662140980, 679974750, 676985850, 667421370, 668915820, 672502500, 664233210, 672004350, 677284740, 675591030, 674793990, 667421370, 672502500, 671306940, 672004350, 664233210, 668417670, 668218410, 667222110, 672103980, 671306940, 670011750, 674793990, 670310640, 671705460, 679177710, 674793990, 679974750, 671705460 };
        assertEquals(53, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case92() {
        int[] A = { 476890607, 510526999, 459539440, 492998175, 509638714, 481391251, 476890607, 492109890, 510526999, 497202724, 445208442, 476890607, 508335896, 497202724, 503183843, 459539440, 437391534, 511711379, 456223176, 503183843, 510526999, 507210735, 507210735, 508631991, 492998175 };
        int[] B = { 49414689, 55457820, 52868880, 58871133, 51717483, 58680369, 56009673, 54170163, 56943054, 49414689, 52487352, 54170163, 50320818, 50320818, 52868880, 50320818, 56009673, 51717483, 56616030, 57890061, 58353345, 49516884, 58516857, 53250408, 56943054 };
        assertEquals(44, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case93() {
        int[] A = { 635624910, 670565760, 678541044, 656318850, 656318850, 647486139, 653475999, 671252448, 642607482, 653475999, 668309766, 656318850, 678541044, 656318850, 671252448, 670565760, 650581833, 637685907, 652506612, 636686664, 666438168, 677895408, 653475999, 656318850, 666438168, 670565760, 669229704, 646097835, 670565760, 646097835, 643463976, 655202982, 645339306, 645339306 };
        int[] B = { 255835216, 254946692, 258192116, 255835216, 252609812, 255620456, 255620456, 252609812, 254228884, 255620456 };
        assertEquals(41, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case94() {
        int[] A = { 557917520, 484018160, 580595920, 459391120, 459391120, 540812960, 508384520, 589139080, 461887720, 508384520, 459391120, 583068960, 472601440, 583068960, 577249640, 570150480, 580595920, 485257720, 548941160, 565816960, 548941160, 580595920, 589139080, 580595920, 541773600, 459391120, 580595920, 459391120, 511353840, 540812960, 537604240 };
        int[] B = { 909895320, 837532576, 905370488, 860970872, 837532576, 858657200, 860970872, 724434424, 806804008, 909895320, 724434424 };
        assertEquals(39, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case95() {
        int[] A = { 832003632, 514782521, 977216192, 800411934, 824171354, 514782521, 922983650, 722579039 };
        int[] B = { 514782521, 664724977, 832003632, 722579039, 800411934, 689209546, 550604375, 922983650, 956924072, 722579039, 689209546 };
        assertEquals(15, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case96() {
        int[] A = { 353301683, 666535006, 573868959, 173892162, 666535006, 173892162, 573868959, 696042249, 259403444, 259403444, 666535006, 333589019, 573868959, 494085117, 259403444, 210602416, 664712509, 541586779, 381929994, 437635841, 689607046, 353301683, 687665756, 259403444 };
        int[] B = { 333589019, 687665756, 171161244, 469122433, 689607046, 239114910, 179947887, 696042249, 666535006, 190555583, 541586779, 226058720, 381868134, 541586779, 171161244, 512881587, 541586779, 452971778, 689607046, 172290796, 381868134, 666535006, 381868134, 696042249, 239114910, 288515239, 437635841, 696042249, 239114910 };
        assertEquals(49, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case97() {
        int[] A = { 135140749, 135140749, 326788299, 84566703, 187220931, 187220931, 223973798, 170543131, 248650920, 431261917, 169950759, 187220931, 67286883, 197580442, 329007489, 210505634, 434137443, 343959312, 343959312 };
        int[] B = { 503776132, 855186572, 936898786, 169133406, 484346352, 705712840, 423793374, 395160884, 447947596, 339901518, 461120608, 868274886, 374441862, 187747128 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case98() {
        int[] A = { 339742536, 284852316, 376128480, 388397520, 403724664, 328846896, 403724664, 122333316, 359116632, 388397520, 403724664, 388397520, 388397520, 359116632, 92182608, 356122620, 119513268, 108397884, 47840100, 403724664, 348697104, 350079660, 403724664, 352716588, 352716588, 403724664, 403724664, 284852316, 139903680, 284852316, 323792784, 106584996, 211979712, 311944920, 106584996, 403724664 };
        int[] B = { 485562, 476980, 485562, 495096, 187054, 485562, 73150, 643384 };
        assertEquals(41, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case99() {
        int[] A = { 549585641, 549585641, 653966245, 530278629, 577982587, 518432703, 577982587, 530278629, 561686527, 561686527, 530278629 };
        int[] B = { 563348501, 517376553, 646142079, 593115405, 529802908, 646142079, 517376553, 577379483, 653966245, 610980657, 541280429, 577379483, 597102715, 561686527, 593115405, 646142079, 540978611, 561686527, 580836514, 538907754, 529802908, 563348501, 610980657 };
        assertEquals(31, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case100() {
        int[] A = { 656627396, 724554368, 724554368, 617003329, 611342748 };
        int[] B = { 800667582, 649492584, 817464804, 666289806, 599100918, 543110178, 767073138, 806266656, 772672212, 559907400, 783870360, 755874990, 783870360, 744676842, 554308326, 621497214, 677487954, 823063878, 604699992, 571105548, 660690732, 587902770, 811865730, 683087028, 795068508, 694285176, 688686102, 727879620, 789469434, 705483324, 666289806, 576704622, 761474064, 778271286, 554308326, 610299066, 733478694, 548709252, 761474064, 643893510, 593501844, 655091658, 711082398, 565506474 };
        assertEquals(47, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case101() {
        int[] A = { 722749797, 523387718, 771804054, 666807736, 682575684, 713542340, 760333868, 713542340, 749461384, 722749797, 713542340, 523387718, 749461384, 722749797, 694899730, 656504492, 760333868 };
        int[] B = { 530816706, 612578982, 786501468, 612578982, 695573928, 612578982, 786501468, 786501468, 774812856, 737383194, 774812856, 774812856, 774812856 };
        assertEquals(26, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case102() {
        int[] A = { 678704080, 610011560, 682551800, 646565800, 596356640, 669283200, 596356640, 624366200, 682812920, 682812920, 622654880, 631864840, 682551800, 624366200, 632926960, 622654880, 624366200, 682812920, 646565800, 632306240, 622654880, 656994520, 678704080, 614925760, 678704080, 656637560, 656838880, 676262600, 601278320, 646565800, 656637560, 631864840, 646565800, 632926960, 673826880, 646565800, 669283200, 682812920, 631864840, 616391200, 624366200 };
        int[] B = { 786288286, 715661762, 771549133, 786288286, 700719052, 801998365, 771549133, 794608555, 742959832, 715661762, 731619484, 782856581, 788293306, 794608555, 715661762, 725142837, 742441187, 771549133, 728681514, 771549133, 799723095, 768711978, 794608555, 788452777, 700719052, 771549133, 715661762, 780679588, 724259660, 786288286, 794608555, 724259660, 724259660, 776973121 };
        assertEquals(67, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case103() {
        int[] A = { 294386850, 236610315, 226830645, 323783910, 240194835, 236610315, 270044235, 317848815, 332072325, 297884025, 280224135, 313868835, 268349445, 325391625, 317848815, 287285400, 278656650, 291045240, 252825075, 317262240, 317848815, 275236335 };
        int[] B = { 790976472, 873793140, 904376352, 636486180, 949766136, 823611624, 792129756, 792129756, 821990796, 787158372, 803553960, 652642716, 863534760, 807359916, 803553960, 964490208, 771570228, 803553960, 924796092, 668298048, 792129756, 904376352, 924796092, 807359916, 636486180, 904376352, 920681916, 807359916, 668298048 };
        assertEquals(46, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case104() {
        int[] A = { 817438941, 809375184, 841429377, 823887414, 841429377, 841429377, 824105115, 841246128, 841997034, 841429377, 814195143, 817438941, 824225760, 823887414 };
        int[] B = { 280415376, 280415376, 280415376, 273333708, 274629138, 274741920, 274741920, 280476459, 279527241, 280415376 };
        assertEquals(20, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case105() {
        int[] A = { 46577926, 46577926, 46577926, 45908604 };
        int[] B = { 901993563, 973887965, 841530945, 939282407, 819330388, 954847483, 901993563, 882402533, 870622044, 834430237, 939282407, 864076681, 960632952, 841530945, 979701888, 925852693, 915223525, 931885269, 851871555, 864076681, 939282407, 973887965, 837604703, 870622044, 873110375, 864076681, 954847483, 973887965 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case106() {
        int[] A = { 68094980, 69321060, 65046950, 299319000, 82843010, 404814080, 185189930, 423182310, 264903830, 113696910, 444069310, 526816330, 185189930, 538773200, 526816330, 404814080, 420048780, 113696910, 175878180, 526816330, 423182310 };
        int[] B = { 367882860, 59578640, 290821620, 198460480, 441044760, 66780050, 367882860, 367882860, 539075980, 82843010, 344500600, 219969310, 290821620, 527258590, 404814080, 420048780, 367882860, 441044760, 219969310, 59578640, 82843010, 264903830, 69321060, 79634750, 68094980, 176278900, 299535510, 285043190, 548975800, 423182310, 538773200, 423182310, 526816330, 66780050, 59578640, 290821620, 318590810, 198460480, 113696910 };
        assertEquals(54, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case107() {
        int[] A = { 21884751, 14733586, 23901892, 22693608, 13423046, 14175910, 13423046, 14175910, 21705278, 26577978, 13423046, 17894604, 24877594, 26033238, 20510700 };
        int[] B = { 6075390, 9725832, 5923935, 10661826, 7669116 };
        assertEquals(18, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case108() {
        int[] A = { 592621258, 572588492, 607626886, 600881932, 579207136, 597345252, 572234824, 574609452, 583526938, 597926278, 574609452, 570491746, 581960694, 590044534 };
        int[] B = { 630218574, 648998046, 621665280, 638016372, 643817502, 643817502, 623257218, 605799864, 613732572, 611196264, 637152948, 638636958, 604153962, 611574012, 637233894, 607688604, 641793852, 618940098, 613786536 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case109() {
        int[] A = { 500996150, 755423650, 353747470, 749005850, 638728200, 618688550, 538051910, 415642920, 795591130, 632166390, 676720310, 606877870, 750079110, 609691620, 612785480, 750340670, 488633600, 650494120, 835884540, 709423590, 353948420, 814659880, 718564730 };
        int[] B = { 155047850, 151084730, 114614064, 163539618, 160533534, 102862822, 135344062, 71298550, 130098824, 143712946, 114614064, 161643824, 165974406, 70749494, 150015822, 143712946, 114614064, 161643824, 130098824, 96454958, 161643824, 150015822, 167176908, 150015822, 126433278, 103821284, 123737710, 163539618, 174657952, 150015822, 123737710, 165974406, 70749494, 133940856, 133940856, 121938324, 121938324, 150015822, 163539618, 114614064, 95604604, 83128584, 161643824, 167176908, 123737710, 114614064 };
        assertEquals(63, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case110() {
        int[] A = { 167678202, 192210312, 212056176, 160199724, 253989696, 160199724, 140094903, 189722073, 253989696, 188995659, 164295915, 183892413, 269357814, 269357814, 140094903, 253989696, 162160875, 218289909, 167678202, 212056176, 142904232, 183892413, 183892413, 133113489, 189722073, 134192685, 183892413, 236804292, 275445597, 140094903, 140094903, 212056176, 160199724, 134192685, 160199724, 144126876, 183892413 };
        int[] B = { 128339976, 76665076, 143965390, 135997760, 143965390, 75926734, 77449296 };
        assertEquals(42, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case111() {
        int[] A = { 823942220, 823942220, 812581712, 824675156, 824675156, 823942220, 824675156, 811848776 };
        int[] B = { 662738760, 673996950, 671705460, 668517300, 676985850, 674993250, 674495100, 674793990, 672303240, 662439870, 664830990, 674694360, 671705460, 674096580, 668517300, 662439870, 679177710, 666723960, 662439870, 662140980, 679974750, 676985850, 667421370, 668915820, 672502500, 664233210, 672004350, 677284740, 675591030, 674793990, 667421370, 672502500, 671306940, 672004350, 664233210, 668417670, 668218410, 667222110, 672103980, 671306940, 670011750, 674793990, 670310640, 671705460, 679177710, 674793990, 679974750, 671705460 };
        assertEquals(53, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case112() {
        int[] A = { 476890607, 510526999, 459539440, 492998175, 509638714, 481391251, 476890607, 492109890, 510526999, 497202724, 445208442, 476890607, 508335896, 497202724, 503183843, 459539440, 437391534, 511711379, 456223176, 503183843, 510526999, 507210735, 507210735, 508631991, 492998175 };
        int[] B = { 49414689, 55457820, 52868880, 58871133, 51717483, 58680369, 56009673, 54170163, 56943054, 49414689, 52487352, 54170163, 50320818, 50320818, 52868880, 50320818, 56009673, 51717483, 56616030, 57890061, 58353345, 49516884, 58516857, 53250408, 56943054 };
        assertEquals(44, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case113() {
        int[] A = { 635624910, 670565760, 678541044, 656318850, 656318850, 647486139, 653475999, 671252448, 642607482, 653475999, 668309766, 656318850, 678541044, 656318850, 671252448, 670565760, 650581833, 637685907, 652506612, 636686664, 666438168, 677895408, 653475999, 656318850, 666438168, 670565760, 669229704, 646097835, 670565760, 646097835, 643463976, 655202982, 645339306, 645339306 };
        int[] B = { 255835216, 254946692, 258192116, 255835216, 252609812, 255620456, 255620456, 252609812, 254228884, 255620456 };
        assertEquals(41, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case114() {
        int[] A = { 557917520, 484018160, 580595920, 459391120, 459391120, 540812960, 508384520, 589139080, 461887720, 508384520, 459391120, 583068960, 472601440, 583068960, 577249640, 570150480, 580595920, 485257720, 548941160, 565816960, 548941160, 580595920, 589139080, 580595920, 541773600, 459391120, 580595920, 459391120, 511353840, 540812960, 537604240 };
        int[] B = { 909895320, 837532576, 905370488, 860970872, 837532576, 858657200, 860970872, 724434424, 806804008, 909895320, 724434424 };
        assertEquals(39, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case115() {
        int[] A = { 832003632, 514782521, 977216192, 800411934, 824171354, 514782521, 922983650, 722579039 };
        int[] B = { 514782521, 664724977, 832003632, 722579039, 800411934, 689209546, 550604375, 922983650, 956924072, 722579039, 689209546 };
        assertEquals(15, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case116() {
        int[] A = { 353301683, 666535006, 573868959, 173892162, 666535006, 173892162, 573868959, 696042249, 259403444, 259403444, 666535006, 333589019, 573868959, 494085117, 259403444, 210602416, 664712509, 541586779, 381929994, 437635841, 689607046, 353301683, 687665756, 259403444 };
        int[] B = { 333589019, 687665756, 171161244, 469122433, 689607046, 239114910, 179947887, 696042249, 666535006, 190555583, 541586779, 226058720, 381868134, 541586779, 171161244, 512881587, 541586779, 452971778, 689607046, 172290796, 381868134, 666535006, 381868134, 696042249, 239114910, 288515239, 437635841, 696042249, 239114910 };
        assertEquals(49, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case117() {
        int[] A = { 135140749, 135140749, 326788299, 84566703, 187220931, 187220931, 223973798, 170543131, 248650920, 431261917, 169950759, 187220931, 67286883, 197580442, 329007489, 210505634, 434137443, 343959312, 343959312 };
        int[] B = { 503776132, 855186572, 936898786, 169133406, 484346352, 705712840, 423793374, 395160884, 447947596, 339901518, 461120608, 868274886, 374441862, 187747128 };
        assertEquals(29, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case118() {
        int[] A = { 339742536, 284852316, 376128480, 388397520, 403724664, 328846896, 403724664, 122333316, 359116632, 388397520, 403724664, 388397520, 388397520, 359116632, 92182608, 356122620, 119513268, 108397884, 47840100, 403724664, 348697104, 350079660, 403724664, 352716588, 352716588, 403724664, 403724664, 284852316, 139903680, 284852316, 323792784, 106584996, 211979712, 311944920, 106584996, 403724664 };
        int[] B = { 485562, 476980, 485562, 495096, 187054, 485562, 73150, 643384 };
        assertEquals(41, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case119() {
        int[] A = { 549585641, 549585641, 653966245, 530278629, 577982587, 518432703, 577982587, 530278629, 561686527, 561686527, 530278629 };
        int[] B = { 563348501, 517376553, 646142079, 593115405, 529802908, 646142079, 517376553, 577379483, 653966245, 610980657, 541280429, 577379483, 597102715, 561686527, 593115405, 646142079, 540978611, 561686527, 580836514, 538907754, 529802908, 563348501, 610980657 };
        assertEquals(31, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case120() {
        int[] A = { 656627396, 724554368, 724554368, 617003329, 611342748 };
        int[] B = { 800667582, 649492584, 817464804, 666289806, 599100918, 543110178, 767073138, 806266656, 772672212, 559907400, 783870360, 755874990, 783870360, 744676842, 554308326, 621497214, 677487954, 823063878, 604699992, 571105548, 660690732, 587902770, 811865730, 683087028, 795068508, 694285176, 688686102, 727879620, 789469434, 705483324, 666289806, 576704622, 761474064, 778271286, 554308326, 610299066, 733478694, 548709252, 761474064, 643893510, 593501844, 655091658, 711082398, 565506474 };
        assertEquals(47, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case121() {
        int[] A = { 722749797, 523387718, 771804054, 666807736, 682575684, 713542340, 760333868, 713542340, 749461384, 722749797, 713542340, 523387718, 749461384, 722749797, 694899730, 656504492, 760333868 };
        int[] B = { 530816706, 612578982, 786501468, 612578982, 695573928, 612578982, 786501468, 786501468, 774812856, 737383194, 774812856, 774812856, 774812856 };
        assertEquals(26, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case122() {
        int[] A = { 524288, 262144, 32768, 128, 8388608, 32, 128, 4, 8192, 16777216, 8192, 4, 256, 262144, 2097152, 2097152, 2097152, 16777216, 1, 8, 1024, 4096, 2097152, 4, 268435456, 65536, 2, 8, 33554432, 2, 67108864, 4, 268435456, 128, 16384, 1024, 16, 4, 134217728, 536870912, 131072, 64, 268435456, 8, 8192, 64, 128, 8, 33554432, 8192 };
        int[] B = { 131072, 16384, 1, 512, 2097152, 67108864, 64, 16, 131072, 16, 256, 128, 32, 4096, 4194304, 1024, 134217728, 1, 1, 134217728, 512, 64, 65536, 131072, 16384, 8192, 4, 268435456, 256, 1024, 8, 32768, 16777216, 512, 32768, 512, 64, 8192, 512, 524288, 65536, 512, 1048576, 1024, 512, 262144, 131072, 65536, 33554432, 64 };
        assertEquals(83, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case123() {
        int[] A = { 999999999, 1000000000 };
        int[] B = { 999999998, 999999999 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case124() {
        int[] A = { 999999998, 999999999 };
        int[] B = { 999999997, 999999998 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case125() {
        int[] A = { 999999997, 999999998 };
        int[] B = { 999999996, 999999997 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case126() {
        int[] A = { 999999996, 999999997 };
        int[] B = { 999999995, 999999996 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case127() {
        int[] A = { 999999995, 999999996 };
        int[] B = { 999999994, 999999995 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case128() {
        int[] A = { 3, 1, 1, 4, 1, 3, 4, 1, 4, 4, 1, 4, 4, 3, 4, 1, 3, 1, 2, 2, 2, 1, 2, 4, 4, 3, 3, 2, 3, 4, 2, 2, 2, 1, 3, 2, 1, 2, 2, 3, 3, 2, 2, 2, 4, 1, 4, 3, 3, 1 };
        int[] B = { 37035, 49380, 37035, 37035, 49380, 24690, 12345, 24690, 12345, 49380, 37035, 37035, 12345, 12345, 24690, 37035, 24690, 49380, 24690, 12345, 49380, 37035, 12345, 12345, 24690, 37035, 24690, 24690, 12345, 12345, 24690, 24690, 24690, 12345, 12345, 12345, 12345, 24690, 24690, 24690, 37035, 37035, 37035, 24690, 24690, 49380, 49380, 49380, 49380, 12345 };
        assertEquals(68, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case129() {
        int[] A = { 1, 2, 3, 4, 5, 6 };
        int[] B = { 5, 1, 2, 8, 4, 5, 6, 9 };
        assertEquals(9, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case130() {
        int[] A = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] B = { 1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990, 999999989, 999999988, 999999987, 999999986, 999999985, 999999984, 999999983, 999999982, 999999981, 999999980, 999999979, 999999978, 999999977, 999999976, 999999975, 999999974, 999999973, 999999972, 999999971, 999999970, 999999969, 999999968, 999999967, 999999966, 999999965, 999999964, 999999963, 999999962, 999999961, 999999960, 999999959, 999999958, 999999957, 999999956, 999999955, 999999954, 999999953, 999999952, 999999951 };
        assertEquals(99, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case131() {
        int[] A = { 7, 14 };
        int[] B = { 6, 12 };
        assertEquals(2, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case132() {
        int[] A = { 999999958, 999999851, 107, 5 };
        int[] B = { 943925194, 943925093, 101, 11 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case133() {
        int[] A = { 982204368, 777254118, 821029896, 532172868, 894936534, 327024306, 18329124, 556382718, 984925866, 887162028, 693500952, 589439232, 202724652, 685525728, 43471542, 169138578, 704025150, 148331796, 330234294, 705115134, 272160060, 336460998, 424431018, 18261504, 383901978, 770714088, 523089978, 498784974, 820271670, 565239360, 779568552, 426682848, 809835690, 897394890, 30168642, 494634408, 478187034, 481491246, 187408980, 131793708, 241694838, 660429546, 106619646, 809502276, 711407376, 621723714, 936698202, 876421476, 674091228, 196956030 };
        int[] B = { 777254118, 334628322, 821029896, 532172868, 894936534, 327024306, 18329124, 37387896, 984925866, 507935472, 887162028, 573815382, 693500952, 23548908, 685525728, 43471542, 704025150, 609845262, 876699414, 790337406, 743865132, 869802552, 599224770, 923349168, 335798118, 18261504, 383901978, 922050258, 474836316, 820271670, 739009416, 450860016, 260924316, 809835690, 11371332, 494634408, 478187034, 481491246, 187408980, 866268000, 179319276, 106619646, 809502276, 2668674, 711407376, 936698202, 951933906, 947850960, 196956030, 176907798 };
        assertEquals(75, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case134() {
        int[] A = { 705032704, 1000000000 };
        int[] B = { 10, 2 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case135() {
        int[] A = { 131072, 327680, 458752 };
        int[] B = { 720896, 851968, 1245184 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case136() {
        int[] A = { 999999999, 1000000000 };
        int[] B = { 999999998, 999999999 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case137() {
        int[] A = { 999999000, 999999001, 999999002, 999999003, 999999004, 999999005, 999999006, 999999007, 999999008, 999999009, 999999010, 999999011, 999999012, 999999013, 999999014, 999999015, 999999016, 999999017, 999999018, 999999019, 999999020, 999999021, 999999022, 999999023, 999999024, 999999025, 999999026, 999999027, 999999028, 999999029, 999999030, 999999031, 999999032, 999999033, 999999034, 999999035, 999999036, 999999037, 999999038, 999999039, 999999040, 999999041, 999999042, 999999043, 999999044, 999999045, 999999046, 999999047, 999999048, 999999049 };
        int[] B = { 999999100, 999999101, 999999102, 999999103, 999999104, 999999105, 999999106, 999999107, 999999108, 999999109, 999999110, 999999111, 999999112, 999999113, 999999114, 999999115, 999999116, 999999117, 999999118, 999999119, 999999120, 999999121, 999999122, 999999123, 999999124, 999999125, 999999126, 999999127, 999999128, 999999129, 999999130, 999999131, 999999132, 999999133, 999999134, 999999135, 999999136, 999999137, 999999138, 999999139, 999999140, 999999141, 999999142, 999999143, 999999144, 999999145, 999999146, 999999147, 999999148, 999999149 };
        assertEquals(99, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case138() {
        int[] A = { 100000009, 100000011, 100000013, 100000015, 100000017, 1 };
        int[] B = { 100800013, 100080013, 100000813, 100023401 };
        assertEquals(9, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case139() {
        int[] A = { 2, 3 };
        int[] B = { 5, 7 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case140() {
        int[] A = { 2, 2, 5 };
        int[] B = { 3, 3, 7 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case141() {
        int[] A = { 33554432, 33554432, 33554432, 33554432, 67108864, 67108864, 67108864 };
        int[] B = { 67108864, 67108864, 67108864, 33554432, 33554432, 33554432, 33554432 };
        assertEquals(10, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case142() {
        int[] A = { 1, 131072 };
        int[] B = { 131073, 131072 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case143() {
        int[] A = { 2, 3, 6, 3, 6 };
        int[] B = { 1, 2, 1, 2 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case144() {
        int[] A = { 1, 2 };
        int[] B = { 3, 4, 5, 6, 7, 8, 9, 10 };
        assertEquals(8, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case145() {
        int[] A = { 999999998, 999999999 };
        int[] B = { 999999999, 1000000000 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case146() {
        int[] A = { 262144, 65536, 17726471 };
        int[] B = { 65536, 262144, 34881 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case147() {
        int[] A = { 4, 8, 12 };
        int[] B = { 6, 12, 18 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case148() {
        int[] A = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        int[] B = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals(50, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case149() {
        int[] A = { 7, 10, 20 };
        int[] B = { 4, 100, 200 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case150() {
        int[] A = { 1, 3 };
        int[] B = { 1, 7, 21 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case151() {
        int[] A = { 1324, 12347, 6458, 13245, 36582456, 324, 43, 76834, 4562314, 51, 23, 5, 4, 3, 9, 879, 58, 4, 390, 8276, 4, 5476, 5814, 37, 65, 9182, 7, 3640, 9, 8, 3769, 58, 143, 72, 40, 89312, 65, 78, 3129, 49, 8, 3, 56, 731892, 46, 9, 8, 31, 2746, 32423 };
        int[] B = { 8, 796, 345918, 7, 365831, 27, 643, 1298, 47, 631297, 86, 512, 683, 74, 5812, 67, 38725, 4, 87, 6326, 238, 71, 53, 46, 78, 1, 3598, 3721, 69281, 56, 487, 3, 2978, 5637, 69, 759, 87, 12, 3698, 569, 1872, 30, 49, 8, 1, 23, 7498, 2314, 3425, 234 };
        assertEquals(96, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case152() {
        int[] A = { 7, 14, 21 };
        int[] B = { 11, 22, 33 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case153() {
        int[] A = { 2, 4, 3 };
        int[] B = { 3, 6, 1 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case154() {
        int[] A = { 1377017, 100000 };
        int[] B = { 50000, 512 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case155() {
        int[] A = { 2, 1, 1 };
        int[] B = { 3, 1, 1 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case156() {
        int[] A = { 8, 12, 18 };
        int[] B = { 12, 18, 27 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case157() {
        int[] A = { 2, 3, 2, 3, 2, 3, 2 };
        int[] B = { 600, 700, 600, 700, 600, 700, 600 };
        assertEquals(10, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case158() {
        int[] A = { 1, 2, 1, 1 };
        int[] B = { 1, 1, 1, 2 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case159() {
        int[] A = { 2, 100000 };
        int[] B = { 100000, 705032704 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case160() {
        int[] A = { 6, 7, 8, 9, 10, 11, 12 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        assertEquals(12, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case161() {
        int[] A = { 123, 10, 20, 30, 40 };
        int[] B = { 124, 100, 200, 300, 400 };
        assertEquals(6, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case162() {
        int[] A = { 1, 2, 3, 4 };
        int[] B = { 4, 2, 3, 1 };
        assertEquals(6, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case163() {
        int[] A = { 100000, 276447232 };
        int[] B = { 1, 1000000000 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case164() {
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
        int[] B = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99 };
        assertEquals(75, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case165() {
        int[] A = { 8, 4, 5, 5, 5, 7, 9, 9, 10, 4, 8, 4, 3, 5, 3, 3, 7, 10, 7, 3, 1, 10, 5, 10, 9, 4, 8, 3, 6, 5, 1, 7, 4, 6, 10, 1, 6, 5, 6, 1, 8, 8, 8, 3, 1, 9, 1, 8 };
        int[] B = { 3, 4, 7, 6, 7, 6, 9, 10, 5, 5, 1, 2, 7, 4, 9, 7, 9, 5, 6, 9, 10, 7, 6, 9, 3, 8, 3, 2, 2, 8, 9, 3, 2, 9, 6, 10, 10, 6, 10, 1, 8, 7, 5, 1, 4, 6, 2, 2 };
        assertEquals(78, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case166() {
        int[] A = { 1, 1, 1 };
        int[] B = { 100000000, 100000001, 100000002 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case167() {
        int[] A = { 1, 2, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2 };
        assertEquals(13, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case168() {
        int[] A = { 2, 2, 2, 2, 2, 2, 2, 1 };
        int[] B = { 3, 3, 3, 3, 3, 3, 3, 3, 1 };
        assertEquals(10, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case169() {
        int[] A = { 2, 4, 6, 8 };
        int[] B = { 3, 6, 9 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case170() {
        int[] A = { 2, 4, 1 };
        int[] B = { 1, 2, 4 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case171() {
        int[] A = { 6, 9 };
        int[] B = { 2, 3 };
        assertEquals(2, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case172() {
        int[] A = { 972313551, 666784312 };
        int[] B = { 468978975, 321612121 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case173() {
        int[] A = { 999999991, 1000000000 };
        int[] B = { 999999992, 1000000000 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case174() {
        int[] A = { 7, 14, 7, 14, 7, 1 };
        int[] B = { 10, 5, 10, 5, 10, 1 };
        assertEquals(8, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case175() {
        int[] A = { 10, 20, 30, 40 };
        int[] B = { 6, 12, 18, 24 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case176() {
        int[] A = { 2, 4 };
        int[] B = { 3, 6 };
        assertEquals(2, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case177() {
        int[] A = { 3, 5 };
        int[] B = { 7, 11 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case178() {
        int[] A = { 999999937, 27436634, 888888323, 398743234, 234342342, 335432432 };
        int[] B = { 99999998, 982474453, 347634444, 233423434, 384623455, 999999937, 487634535 };
        assertEquals(12, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case179() {
        int[] A = { 1, 3, 3, 3, 3, 3, 3, 3 };
        int[] B = { 1, 5, 5, 5, 5, 5, 5, 5 };
        assertEquals(9, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case180() {
        int[] A = { 13, 2, 3, 5, 19 };
        int[] B = { 17, 2, 3, 7, 11 };
        assertEquals(8, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case181() {
        int[] A = { 100000000, 100000001, 100000002 };
        int[] B = { 1, 1, 1 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case182() {
        int[] A = { 2, 4, 8 };
        int[] B = { 200000000, 4, 8, 16 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case183() {
        int[] A = { 1, 2, 3, 10, 20, 30, 40 };
        int[] B = { 10, 20, 30, 40 };
        assertEquals(7, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case184() {
        int[] A = { 41, 18467, 6334, 26500, 19169, 15724, 11478, 29358, 26962, 24464, 5705, 28145, 23281, 16827, 9961, 491, 2995, 11942, 4827, 5436, 32391, 14604, 3902, 153, 292, 12382, 17421, 18716, 19718, 19895, 5447, 21726, 14771, 11538, 1869, 19912, 25667, 26299, 17035, 9894, 28703, 23811, 31322, 30333, 17673, 4664, 15141, 7711, 28253, 6868 };
        int[] B = { 8437, 7110, 17079, 26151, 22466, 16669, 5301, 19553, 10676, 29095, 29496, 14007, 22103, 12559, 19534, 12236, 32594, 5553, 10994, 27775, 17561, 17407, 21729, 17005, 28899, 14627, 31401, 26550, 19039, 10470, 11779, 24581, 23458, 29392, 4706, 15050, 18660, 29328, 31692, 1738, 1389, 12191, 28649, 7898, 32074, 12321, 15706, 13287, 1860 };
        assertEquals(98, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case185() {
        int[] A = { 8, 12, 16 };
        int[] B = { 10, 15, 20 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case186() {
        int[] A = { 999999999, 999999977, 999999997, 999999987, 100007, 999999992 };
        int[] B = { 999999997, 999999999, 10000007, 999999992, 999999987 };
        assertEquals(9, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case187() {
        int[] A = { 2, 2, 7 };
        int[] B = { 3, 3, 7 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case188() {
        int[] A = { 1, 1, 1 };
        int[] B = { 1000000000, 1000000000, 999999999 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case189() {
        int[] A = { 1048576, 4096 };
        int[] B = { 1048576, 8192 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case190() {
        int[] A = { 1, 2, 3, 4, 1, 2, 3 };
        int[] B = { 3, 2, 1, 4, 3, 2, 1 };
        assertEquals(11, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case191() {
        int[] A = { 1, 3, 3, 3, 4 };
        int[] B = { 2, 3, 3, 3, 5 };
        assertEquals(7, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case192() {
        int[] A = { 33554432, 16777216, 8388608, 4194304 };
        int[] B = { 4194304, 8388608, 16777216, 33554432 };
        assertEquals(7, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case193() {
        int[] A = { 536870912, 268435456, 134217728, 67108864 };
        int[] B = { 67108864, 134217728, 268435456, 67108864, 134217728, 268435456, 67108864, 134217728, 268435456 };
        assertEquals(10, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case194() {
        int[] A = { 1234000, 227561632 };
        int[] B = { 1, 908880002 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case195() {
        int[] A = { 1, 2, 9, 8, 7, 1, 1, 10, 6, 7 };
        int[] B = { 3, 9, 6, 10, 5, 4, 10, 1, 6, 7 };
        assertEquals(16, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case196() {
        int[] A = { 1, 641 };
        int[] B = { 6700417, 1 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case197() {
        int[] A = { 5, 3, 3 };
        int[] B = { 3, 3, 5 };
        assertEquals(4, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case198() {
        int[] A = { 1, 1, 1, 1, 1, 2, 2, 2, 2, 2 };
        int[] B = { 2, 2, 2, 2, 2, 1, 1, 1, 1, 1 };
        assertEquals(15, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case199() {
        int[] A = { 1000000000, 1000000000, 1000000000, 1000000000, 500000000, 500000000, 1000000000, 1000000000, 500000000, 500000000, 1000000000, 1000000000, 500000000, 1000000000, 500000000, 1000000000, 1000000000, 500000000, 500000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 500000000, 500000000, 500000000, 1000000000, 500000000, 500000000, 1000000000, 500000000, 1000000000, 500000000, 1000000000, 1000000000, 500000000, 500000000, 500000000, 1000000000, 1000000000, 1000000000, 500000000, 1000000000, 500000000, 500000000, 500000000, 1000000000, 500000000, 1000000000 };
        int[] B = { 1000000000, 1000000000, 500000000, 500000000, 500000000, 1000000000, 500000000, 1000000000, 1000000000, 500000000, 1000000000, 500000000, 500000000, 1000000000, 500000000, 1000000000, 1000000000, 1000000000, 1000000000, 500000000, 1000000000, 1000000000, 500000000, 1000000000, 1000000000, 500000000, 1000000000, 1000000000, 500000000, 500000000, 1000000000, 1000000000, 500000000, 1000000000, 1000000000, 500000000, 500000000, 500000000, 500000000, 500000000, 500000000, 1000000000, 500000000, 500000000, 1000000000, 500000000, 1000000000, 500000000, 500000000, 500000000 };
        assertEquals(62, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case200() {
        int[] A = { 112332132, 1 };
        int[] B = { 443248828, 811111111 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case201() {
        int[] A = { 25812001, 23746001, 19853001, 4124001, 2206001, 16589001, 21888001, 22946001, 8710001, 18607001, 27526001, 2451001, 15161001, 9470001, 16868001, 18800001, 22200001, 24899001, 23927001, 18923001, 22489001, 4221001, 9774001, 22382001, 15172001, 18845001, 18315001, 16020001, 8055001, 29707001, 24870001, 174001, 7491001, 25633001, 1834001, 22592001, 28749001, 18347001, 4822001, 3458001, 28558001, 25197001, 17149001, 6880001, 21971001, 6813001, 11398001, 8570001, 23101001, 21860001 };
        int[] B = { 5757001, 8679001, 20623001, 10343001, 8930001, 2200001, 10017001, 6818001, 28896001, 23002001, 31280001, 22000001, 15985001, 17513001, 30568001, 18000001, 12434001, 13865001, 9399001, 4647001, 6593001, 22175001, 11983001, 23739001, 20614001, 4467001, 18343001, 6329001, 5607001, 12532001, 5371001, 27312001, 3058001, 2196001, 11975001, 7060001, 15415001, 12136001, 11728001, 6972001, 11851001, 19113001, 18971001, 4836001, 3654001, 26677001, 2420001, 1963001, 25413001, 26895001 };
        assertEquals(99, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case202() {
        int[] A = { 1000000000, 1000000000 };
        int[] B = { 1000000000, 999999999 };
        assertEquals(3, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case203() {
        int[] A = { 3, 3, 3, 3 };
        int[] B = { 2, 2, 2, 2, 2 };
        assertEquals(5, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case204() {
        int[] A = { 1000000000, 99999999, 99999999, 99999999, 99999998, 99999997, 99999995, 99999996, 99999997, 99999998 };
        int[] B = { 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998, 99999998 };
        assertEquals(22, astronomicalrecords.minimalPlanets(A, B));
    }

    @Test
    public void case205() {
        int[] A = { 1, 2, 3, 4, 5 };
        int[] B = { 1, 3, 4, 5, 2 };
        assertEquals(6, astronomicalrecords.minimalPlanets(A, B));
    }

}
