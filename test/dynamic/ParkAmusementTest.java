package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class ParkAmusementTest {
  double DELTA = 1.0e-09;
  ParkAmusement parkamusement = new ParkAmusement();

  @Test
  public void case1() {
    String[] landings = { "E000", "1000", "1000", "1000" };
    int startLanding = 1;
    int K = 1;
    assertEquals(0.3333333333333333, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.3333333333333333);
  }

  @Test
  public void case2() {
    String[] landings = { "E000", "1000", "1001", "000P" };
    int startLanding = 1;
    int K = 1;
    assertEquals(0.6666666666666666, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.6666666666666666);
  }

  @Test
  public void case3() {
    String[] landings = { "01000100", "00111000", "00001010", "000E0000", "0000E000", "00000P00", "000000P0", "01000000" };
    int startLanding = 1;
    int K = 2;
    assertEquals(0.14285714285714288, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.14285714285714288);
  }

  @Test
  public void case4() {
    String[] landings = { "0100", "0010", "0001", "000E" };
    int startLanding = 0;
    int K = 2;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case5() {
    String[] landings = { "E00", "0E0", "010" };
    int startLanding = 0;
    int K = 1;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case6() {
    String[] landings = { "0100", "0010", "0001", "000E" };
    int startLanding = 0;
    int K = 3;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case7() {
    String[] landings = { "E000000000", "0000100000", "00E0000000", "1000000000", "1000001000", "0101000001", "0001000100", "1010000000", "0000000100", "000000000E" };
    int startLanding = 7;
    int K = 3;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case8() {
    String[] landings = { "001010001001011", "0P0000000000000", "010110000100011", "000P00000000000", "010100001101011", "111110101101011", "111010001101011", "111111101101101", "00000000E000000", "000000000E00000", "101111111101111", "000100000100011", "101111101101011", "010000001100000", "00000000000000E" };
    int startLanding = 12;
    int K = 3;
    assertEquals(0.16726738299659505, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.16726738299659505);
  }

  @Test
  public void case9() {
    String[] landings = { "P00000000000000000000", "0E0000000000000000000", "00P000000000000000000", "010011111011010001001", "010000010010100001000", "010010111110001100011", "100010010100100101100", "0000000P0000000000000", "101000100011000100100", "000010000000100000001", "0000000000E0000000000", "101010010110100101001", "000000000000E00000000", "011000111001101000000", "010010010111100101110", "001010010110100000001", "000011100101011101001", "00000000000000000E000", "111000000111100001000", "111010001001100001101", "00000000000000000000P" };
    int startLanding = 3;
    int K = 6;
    assertEquals(0.2704537165335397, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.2704537165335397);
  }

  @Test
  public void case10() {
    String[] landings = { "000101110001000000000000", "0E0000000000000000000000", "110000110000101100110010", "000P00000000000000000000", "111000000100101000010000", "010000000101000000000000", "000000P00000000000000000", "000001101101000001000000", "000101000100000100000000", "000000000E00000000000000", "011011000001100000001010", "010000000000000101000000", "000001010101000101100000", "111110110011100001000001", "100100001001000100000010", "010100100100000000000000", "000100001001001000010010", "000100100100000100000000", "100001111101000111000010", "110100010001001000000010", "111010001000100110100010", "011010010101010110011010", "100000100101000101000000", "111010000111100101111000" };
    int startLanding = 0;
    int K = 6;
    assertEquals(0.008009019349626698, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.008009019349626698);
  }

  @Test
  public void case11() {
    String[] landings = { "0000010000000000000100001011001", "1000010001000000001100000001000", "0001000001001100101000000010000", "0100010001000000100110000000011", "0000001010000000100011000000110", "00000P0000000000000000000000000", "1111000111010100001011001001000", "0101010000111001000000001011101", "00000000E0000000000000000000000", "0000000000000000001100000000100", "0000000001000010000000000100111", "0000010000000000000000000000000", "0000000010110010001000000110011", "0000010101000000100100000001110", "0000000001000000000010000000000", "0000010001011000001000001000100", "0000000000000001000000000001000", "0000111100010001100001000101110", "0000000000000000000000000000001", "0000000000000000000010000010010", "0000000000000000001000000010000", "1111000010110001100000011100000", "0000010101010100001000010010000", "0110000100000001000000001011000", "0000000010010000000100000010100", "0000000000010010001000001000010", "00000000000000000000000000P0000", "0000010000101001000000001000010", "0000000000000000000000000000P00", "0000000000000000000000000000101", "000000000000000000000000000000P" };
    int startLanding = 0;
    int K = 8;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case12() {
    String[] landings = { "000011010101000100010001111001000", "001010010000000010000010000011100", "000010001000000100000000011000000", "000011000000001110010000000000100", "0000P0000000000000000000000000000", "000010000000000000000000001100000", "000011001001010100100010010000000", "001001000000000000100000010000000", "00000000E000000000000000000000000", "000000000000000000110011000000101", "100000010001001000010011111001000", "011000000000000000001001000010100", "010110101100011000000000001100000", "101100001000000010010010100110000", "100010010001000000010000000000000", "000000000000000E00000000000000000", "001010000000000000000000001100000", "011111001000000110011000001010101", "000000001000000000000000000010000", "010001010001000110000010001000001", "010010011000000100000001000000100", "000001111110000000101001010011001", "0000000000000000000000E0000000000", "010010000000000000100010000111001", "000000000000000000110001000111101", "000001001000000000100000000010101", "00000000000000000000000000P000000", "000000000000000000000010001000000", "000001001000000000000000000000000", "000001001000000000000010000100000", "000000001000000000000000001000000", "001000100010110100001001101001000", "000000000000000100000000001001100" };
    int startLanding = 0;
    int K = 8;
    assertEquals(0.0478859435404893, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0478859435404893);
  }

  @Test
  public void case13() {
    String[] landings = {};
    int startLanding = 2;
    int K = 10;
    assertEquals(0.09193640604121392, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.09193640604121392);
  }

  @Test
  public void case14() {
    String[] landings = { "P0000000000000000000000000000000", "0E000000000000000000000000000000", "00000001000000000100010000000100", "000E0000000000000000000000000000", "0000P000000000000000000000000000", "00000P00000000000000000000000000", "000000E0000000000000000000000000", "0000000E000000000000000000000000", "00000000P00000000000000000000000", "000000000P0000000000000000000000", "0000000000E000000000000000000000", "00000000000E00000000000000000000", "00001000000000000000000000000000", "0000000000000P000000000000000000", "00000000000000P00000000000000000", "000000000000000E0000000000000000", "0000000000000000E000000000000000", "00000000000000000E00000000000000", "000000000000000000P0000000000000", "0000000000000000000P000000000000", "00110000000100000100000000000000", "000000000000000000000E0000000000", "0000000000000000000000E000000000", "00000000000000000000000E00000000", "000000000000000000000000P0000000", "00000010000000001010000000000000", "00000000000000000000000000E00000", "000000000000000000000000000E0000", "0000000000000000000000000000E000", "00000000000000000000000000000P00", "000000000000000000000000000000E0", "00000101000000000100000000000000" };
    int startLanding = 31;
    int K = 1;
    assertEquals(0.23529411764705885, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.23529411764705885);
  }

  @Test
  public void case15() {
    String[] landings = {};
    int startLanding = 31;
    int K = 5;
    assertEquals(0.184304534801702, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.184304534801702);
  }

  @Test
  public void case16() {
    String[] landings = {};
    int startLanding = 22;
    int K = 6;
    assertEquals(0.018438938615270885, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.018438938615270885);
  }

  @Test
  public void case17() {
    String[] landings = { "0000110001010010001000001001000100010010", "0E00000000000000000000000000000000000000", "00P0000000000000000000000000000000000000", "000E000000000000000000000000000000000000", "0000000010001000000000000000000010000000", "0001000001000000000000001000000000000000", "0110100000000000010000010010000000010000", "0100000010100001001000000000000000001100", "00000000E0000000000000000000000000000000", "0001100000000000000000000000000000001000", "0000000000001000001000000000000000001100", "0000001011001001001000001010000100000000", "000000000000P000000000000000000000000000", "0100000100001000111000010010010110011000", "0110001001000001100001010100110101011010", "0010110000000000000000000000010000010001", "0011010011010001000000000000000010000001", "00000000000000000E0000000000000000000000", "0111000001000000010000010000010000001000", "0000000000011100110000100000110011000100", "1100000011000111110001000011000001000111", "0000001000000000100000000001000000000110", "0110000100100011010001000100000001001011", "00000000000000000000000E0000000000000000", "0010000001101000000000000000010000010000", "0001010100000001010000000001100100010000", "00000000000000000000000000P0000000000000", "0011000100100101001000000000000000001011", "0100000000000000100001010001000010000101", "0100000000000000000000010010000000000000", "1110000000100001000010111010000100000100", "0100010000000000001000010010000000001100", "00000000000000000000000000000000P0000000", "0000001001100001000001001110100000000111", "0001100000011000001001110010010000010101", "0101000000001000000000010000010000001000", "000000000000000000000000000000000000P000", "0000000000000000000000000000000000000E00", "0000001010000100011000001000000100001000", "0010001011100000000000001010000100010000" };
    int startLanding = 14;
    int K = 16;
    assertEquals(0.03988136408234385, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.03988136408234385);
  }

  @Test
  public void case18() {
    String[] landings = {};
    int startLanding = 4;
    int K = 28;
    assertEquals(0.05312238350311187, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.05312238350311187);
  }

  @Test
  public void case19() {
    String[] landings = {};
    int startLanding = 2;
    int K = 40;
    assertEquals(0.771058596029959, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.771058596029959);
  }

  @Test
  public void case20() {
    String[] landings = {};
    int startLanding = 2;
    int K = 34;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case21() {
    String[] landings = { "01100000001000000000001110111010100101101000110110", "00111100011010100001000100110000000000111000010101", "00P00000000000000000000000000000000000000000000000", "00100100000010000001010000100010010000010000000010", "00100000011000000000001100110000000011011100100111", "00000P00000000000000000000000000000000000000000000", "10010000000001111000011000111110011100000111000100", "10011000001000110000001111100111110101000101010011", "10001000011000110101010100000010000111001001000101", "00010000001000000000000100100110010011000010000110", "00000000000000100000010000010000000000011000000000", "01101100001000110000110000001111101010111011001001", "000000000000E0000000000000000000000000000000000000", "00101101010100011100110001010000101111010100110011", "00100100000000000000000000000000000000001000000010", "00100000001000000000010000010100000000000001000011", "11011100000010100001010100111110001100011101100011", "00010101000010100001100101110001110001001000100111", "10000010000110001000101000111101111111110010001011", "00000100000010010000000000000010010000000000100101", "11101101000000100001011101000010000110101100000100", "000000000000000000000E0000000000000000000000000000", "00010000000000010001010100010010000000010111010000", "00100100000000110000000000000000010000000100010000", "00000100010010010001000001000010100011011111100110", "01101000010000000001011100000110000010110000100010", "00000100000000100000000000000010010000000010000100", "000000000000000000000000000E0000000000000000000000", "01011100010010000000001000000010000101110111010100", "00000100000010000000010000000000000000001001000000", "00100100001010100000000000000000010000000001000011", "11110000011010100000001111101000000100101101110110", "00000000011010010001000101100000010000110011100110", "00000000001000110000010000010000000000001000000011", "01011000111010100001101001100010000011001011110001", "01111100010010000001011110000010000000000111100001", "00110000000010100000010000000110010000011000100110", "00000100000000010000001000110110000000001100100000", "00011000010010100001011000110110010000000001000000", "00000000000010000000010000000000000000000000000000", "00000000000000000000000000000000000000010000000010", "00000000001010110000000000010100000000000000010010", "00000100000000100000010000000010010000011000000001", "00100000001010000000010000000000000000011000000000", "00000000000010000000000000100110000000001011000101", "00110000001010100001010000010100010010000010000100", "01111001111000101101000110011100010111100011100000", "00000000000010000000010000000010000000000010000010", "00100000000010000000000000000000000000000000000000", "00000000001000000000000000010100000000011001000000" };
    int startLanding = 28;
    int K = 31;
    assertEquals(4.090534058827745e-06, parkamusement.getProbability(landings, startLanding, K), DELTA * 4.090534058827745e-06);
  }

  @Test
  public void case22() {
    String[] landings = {};
    int startLanding = 17;
    int K = 11;
    assertEquals(0.014488458006945591, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.014488458006945591);
  }

  @Test
  public void case23() {
    String[] landings = { "P00000000000000000000000000000000000000000000000", "000010100100010010000000111110100011000011000001", "00E000000000000000000000000000000000000000000000", "111000100010001101010011010110111110000010100000", "0000E0000000000000000000000000000000000000000000", "000000110101000000100100010111110011100100100010", "000000E00000000000000000000000000000000000000000", "100000000100010111000001011100100010000011110010", "00000000E000000000000000000000000000000000000000", "001010100001100101000000000100010000000010001010", "0000000000E0000000000000000000000000000000000000", "00000000000P000000000000000000000000000000000000", "000000000000P00000000000000000000000000000000000", "001000100101000111100100000011010000000111001000", "100000001000100111000100110010101111111000011010", "000000000000000P00000000000000000000000000000000", "100010101010100001000100001000000000000011001010", "00000000000000000P000000000000000000000000000000", "000000000000000000E00000000000000000000000000000", "0000000000000000000P0000000000000000000000000000", "110010000100101111000000001000010000011100110100", "000000000000000000000E00000000000000000000000000", "011000000011110011010000000100000010000111001000", "111000100111000000000110100101010111000010011011", "000010001100100111010100000110110010000011001001", "000000101110110110110100000011010010000011000000", "00000000000000000000000000E000000000000000000000", "000000000000000000000000000P00000000000000000000", "0000000000000000000000000000P0000000000000000000", "000000001111000110110100100000010011000110001011", "000000000000000000000000000000E00000000000000000", "0000000000000000000000000000000E0000000000000000", "001011110100100001000000010111010010011101110001", "110010001010000000000110001001000000001011101010", "0000000000000000000000000000000000E0000000000000", "00000000000000000000000000000000000E000000000000", "111000110001010101110011011110010100000100010000", "110010001011100110000011011101000101101111011000", "111010001011100010100100111010010011000010100011", "000000000000000000000000000000000000000E00000000", "0000000000000000000000000000000000000000P0000000", "00000000000000000000000000000000000000000P000000", "100010000101000001110010100111000010000111001010", "101010001010110000010110010000110100001100101000", "00000000000000000000000000000000000000000000P000", "010001111110011110100000110010111010101101001000", "0000000000000000000000000000000000000000000000P0", "00000000000000000000000000000000000000000000000E" };
    int startLanding = 7;
    int K = 4;
    assertEquals(0.05228976620986733, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.05228976620986733);
  }

  @Test
  public void case24() {
    String[] landings = { "P00000000000000000000000000000000000000000000000", "0E0000000000000000000000000000000000000000000000", "00E000000000000000000000000000000000000000000000", "000E00000000000000000000000000000000000000000000", "0000P0000000000000000000000000000000000000000000", "00000E000000000000000000000000000000000000000000", "000000E00000000000000000000000000000000000000000", "100011001110111001101000010011111001100011001010", "00000000E000000000000000000000000000000000000000", "000000000E00000000000000000000000000000000000000", "0000000000E0000000000000000000000000000000000000", "00000000000P000000000000000000000000000000000000", "000000000000E00000000000000000000000000000000000", "0000000000000E0000000000000000000000000000000000", "00000000000000E000000000000000000000000000000000", "000000000000000E00000000000000000000000000000000", "0000000000000000E0000000000000000000000000000000", "00000000000000000P000000000000000000000000000000", "000000000000000000E00000000000000000000000000000", "0000000000000000000E0000000000000000000000000000", "00000000000000000000P000000000000000000000000000", "000000000000000000000P00000000000000000000000000", "0000000000000000000000P0000000000000000000000000", "00000000000000000000000P000000000000000000000000", "000000000000000000000000P00000000000000000000000", "0000000000000000000000000E0000000000000000000000", "00000000000000000000000000E000000000000000000000", "000000000000000000000000000E00000000000000000000", "0000000000000000000000000000E0000000000000000000", "00000000000000000000000000000P000000000000000000", "000000000000000000000000000000E00000000000000000", "0000000000000000000000000000000E0000000000000000", "00000000000000000000000000000000E000000000000000", "000000000000000000000000000000000E00000000000000", "0000000000000000000000000000000000P0000000000000", "00000000000000000000000000000000000E000000000000", "000000000000000000000000000000000000P00000000000", "0000000000000000000000000000000000000E0000000000", "00000000000000000000000000000000000000P000000000", "000000000000000000000000000000000000000P00000000", "0000000000000000000000000000000000000000P0000000", "00000000000000000000000000000000000000000P000000", "000000000000000000000000000000000000000000P00000", "0000000000000000000000000000000000000000000E0000", "00000000000000000000000000000000000000000000E000", "000000000000000000000000000000000000000000000E00", "0000000000000000000000000000000000000000000000E0", "00000000000000000000000000000000000000000000000E" };
    int startLanding = 7;
    int K = 1;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case25() {
    String[] landings = { "P00000000000000000000000000000000000000000000000", "0E0000000000000000000000000000000000000000000000", "00P000000000000000000000000000000000000000000000", "000E00000000000000000000000000000000000000000000", "0000P0000000000000000000000000000000000000000000", "00000E000000000000000000000000000000000000000000", "000000E00000000000000000000000000000000000000000", "111101001000100100011111110100010111000111010011", "00000000P000000000000000000000000000000000000000", "000000000P00000000000000000000000000000000000000", "0000000000E0000000000000000000000000000000000000", "00000000000E000000000000000000000000000000000000", "000000000000P00000000000000000000000000000000000", "0000000000000P0000000000000000000000000000000000", "00000000000000P000000000000000000000000000000000", "000000000000000P00000000000000000000000000000000", "0000000000000000E0000000000000000000000000000000", "00000000000000000E000000000000000000000000000000", "001000110010101000001001110101001010100000110010", "0000000000000000000E0000000000000000000000000000", "00000000000000000000P000000000000000000000000000", "000000000000000000000P00000000000000000000000000", "0000000000000000000000P0000000000000000000000000", "00000000000000000000000E000000000000000000000000", "000000001101101101010110001110010111100111001000", "0000000000000000000000000E0000000000000000000000", "00000000000000000000000000E000000000000000000000", "000000000000000000000000000P00000000000000000000", "0000000000000000000000000000E0000000000000000000", "00000000000000000000000000000E000000000000000000", "000000000000000000000000000000E00000000000000000", "0000000000000000000000000000000E0000000000000000", "00000000000000000000000000000000E000000000000000", "000000000000000000000000000000000P00000000000000", "0000000000000000000000000000000000P0000000000000", "00000000000000000000000000000000000E000000000000", "000000000000000000000000000000000000E00000000000", "0000000000000000000000000000000000000E0000000000", "00000000000000000000000000000000000000E000000000", "000000000000000000000000000000000000000P00000000", "0000000000000000000000000000000000000000E0000000", "00000000000000000000000000000000000000000P000000", "000000000000000000000000000000000000000000E00000", "0000000000000000000000000000000000000000000E0000", "00000000000000000000000000000000000000000000E000", "000000000000000000000000000000000000000000000P00", "0000000000000000000000000000000000000000000000E0", "00000000000000000000000000000000000000000000000E" };
    int startLanding = 7;
    int K = 2;
    assertEquals(0.25568181818181823, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.25568181818181823);
  }

  @Test
  public void case26() {
    String[] landings = { "P000000000000000000000000000000000000000000000000", "0E00000000000000000000000000000000000000000000000", "00P0000000000000000000000000000000000000000000000", "000P000000000000000000000000000000000000000000000", "0000E00000000000000000000000000000000000000000000", "00000E0000000000000000000000000000000000000000000", "000000P000000000000000000000000000000000000000000", "0000000P00000000000000000000000000000000000000000", "00000000P0000000000000000000000000000000000000000", "000000000E000000000000000000000000000000000000000", "0000000000P00000000000000000000000000000000000000", "00000000000P0000000000000000000000000000000000000", "000000000000P000000000000000000000000000000000000", "0000000000000E00000000000000000000000000000000000", "00000000000000E0000000000000000000000000000000000", "000000000000000P000000000000000000000000000000000", "0000000000000000P00000000000000000000000000000000", "00000000000000000P0000000000000000000000000000000", "000000000000000000P000000000000000000000000000000", "0000000000000000000E00000000000000000000000000000", "00000000000000000000P0000000000000000000000000000", "000000000000000000000E000000000000000000000000000", "0000000000000000000000E00000000000000000000000000", "00000000000000000000000E0000000000000000000000000", "1111101010100000111000010101000010001001110000100", "0000000000000000000000000E00000000000000000000000", "00000000000000000000000000P0000000000000000000000", "000000000000000000000000000E000000000000000000000", "0000000000000000000000000000E00000000000000000000", "00000000000000000000000000000P0000000000000000000", "000000000000000000000000000000P000000000000000000", "1011011110110100011011000011000010100110011010100", "00000000000000000000000000000000E0000000000000000", "000000000000000000000000000000000E000000000000000", "0000000000000000000000000000000000P00000000000000", "00000000000000000000000000000000000E0000000000000", "000000000000000000000000000000000000E000000000000", "0000000000000000000000000000000000000E00000000000", "00000000000000000000000000000000000000P0000000000", "000000000000000000000000000000000000000P000000000", "0000000000000000000000000000000000000000P00000000", "00000000000000000000000000000000000000000P0000000", "000000000000000000000000000000000000000000E000000", "0000000000000000000000000000000000000000000P00000", "00000000000000000000000000000000000000000000E0000", "0000100011010101101011001011100110010100100000000", "0000000000000000000000000000000000000000000000E00", "00000000000000000000000000000000000000000000000P0", "000000000000000000000000000000000000000000000000P" };
    int startLanding = 45;
    int K = 2;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case27() {
    String[] landings = { "E0000000000000000000000000000000000000000000000000", "0E000000000000000000000000000000000000000000000000", "00E00000000000000000000000000000000000000000000000", "000P0000000000000000000000000000000000000000000000", "0000P000000000000000000000000000000000000000000000", "00000P00000000000000000000000000000000000000000000", "000000P0000000000000000000000000000000000000000000", "10011010110000100101101001010000111000111011010101", "00000000E00000000000000000000000000000000000000000", "000000000E0000000000000000000000000000000000000000", "0000000000P000000000000000000000000000000000000000", "00000000000P00000000000000000000000000000000000000", "000000000000P0000000000000000000000000000000000000", "0000000000000E000000000000000000000000000000000000", "00000000000000E00000000000000000000000000000000000", "000000000000000E0000000000000000000000000000000000", "0000000000000000P000000000000000000000000000000000", "00000000000000000P00000000000000000000000000000000", "000000000000000000E0000000000000000000000000000000", "0000000000000000000P000000000000000000000000000000", "00000000000000000000E00000000000000000000000000000", "000000000000000000000P0000000000000000000000000000", "0000000000000000000000E000000000000000000000000000", "00000000000000000000000E00000000000000000000000000", "000000000000000000000000P0000000000000000000000000", "0000000000000000000000000E000000000000000000000000", "00000000000000000000000000P00000000000000000000000", "000000000000000000000000000E0000000000000000000000", "0000000000000000000000000000E000000000000000000000", "00000000000000000000000000000E00000000000000000000", "00101011010100011000110010011000010101001110101010", "0000000000000000000000000000000P000000000000000000", "00000000000000000000000000000000P00000000000000000", "000000000000000000000000000000000P0000000000000000", "0000000000000000000000000000000000P000000000000000", "00000000000000000000000000000000000P00000000000000", "000000000000000000000000000000000000P0000000000000", "0000000000000000000000000000000000000P000000000000", "11001000010110010000100001001000101010001101100001", "000000000000000000000000000000000000000P0000000000", "0000000000000000000000000000000000000000P000000000", "00000000000000000000000000000000000000000E00000000", "000000000000000000000000000000000000000000P0000000", "0000000000000000000000000000000000000000000P000000", "00000000000000000000000000000000000000000000E00000", "000000000000000000000000000000000000000000000P0000", "0000000000000000000000000000000000000000000000E000", "00000000000000000000000000000000000000000000000E00", "000000000000000000000000000000000000000000000000E0", "00111000010110000001111001011100110010011011010100" };
    int startLanding = 49;
    int K = 1;
    assertEquals(0.22739018087855295, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.22739018087855295);
  }

  @Test
  public void case28() {
    String[] landings = {};
    int startLanding = 21;
    int K = 1;
    assertEquals(0.022500176839354527, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.022500176839354527);
  }

  @Test
  public void case29() {
    String[] landings = { "E00000000000000000000000000000000", "100110010000000110010000100001000", "010100001000001000000100010000001", "000P00000000000000000000000000000", "0000P0000000000000000000000000000", "100000010000000000010100000000000", "000000000010110000001000010000000", "0000000E0000000000000000000000000", "110001000000010001010100000000000", "001100001011011000000100000000000", "0000000000P0000000000000000000000", "00000000000P000000000000000000000", "000000010010000101011010010000000", "000000000000100000100000010000000", "000010110001100101000010010011000", "000000000000000E00000000000000000", "000000010010000000100000100000000", "00000000000000000E000000000000000", "000000000000000000E00000000000000", "0000000000000000000E0000000000000", "00000000000000000000E000000000000", "000000100010100000000010011000000", "0000000000000000000000P0000000000", "001011111101001101010010000010000", "000111000001100000001000010000000", "000000000000000001110010000000000", "000100100001000000000010000000000", "011100010000010010000100001010000", "010010011001000000000100011001000", "000100100000000011000000000000000", "101001011011000100000000010000000", "101010011000000110110100000011001", "000001001000101110101110000000000" };
    int startLanding = 12;
    int K = 1;
    assertEquals(0.10043679806283741, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.10043679806283741);
  }

  @Test
  public void case30() {
    String[] landings = { "P00000000000000000000000000000000", "0P0000000000000000000000000000000", "00P000000000000000000000000000000", "010000000100010000101001000000000", "101000000000010001001000000010010", "00000E000000000000000000000000000", "000001000000000001001000000000000", "0000000P0000000000000000000000000", "000100100100000001100000010000000", "000000010000100001100000010000111", "100000100001011011100010000001000", "001110010000100000100001100000001", "000011010000000000000000000000010", "0000000000000E0000000000000000000", "101010000100010001001010000001000", "101101000011100000011000000101011", "0000000000000000P0000000000000000", "00000000000000000E000000000000000", "001000100000000000000000000000001", "001001111001001001000010010001000", "00000000000000000000P000000000000", "000000001010101000110001000010000", "000010110100110010101000000110001", "100001000100000000100000010000101", "111100100000010000000000010011100", "0000000000000000000000000P0000000", "011100011100000101100001100001101", "110101001001110001000000000001010", "0000000000000000000000000000E0000", "00000000000000000000000000000E000", "000000000000000000000000000000E00", "001000100000010000001000010000000", "00000000000000000000000000000000E" };
    int startLanding = 10;
    int K = 5;
    assertEquals(0.0835583975878622, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0835583975878622);
  }

  @Test
  public void case31() {
    String[] landings = { "E0000000000000000000000000000000000000000", "00000001000000000000000100000000000001001", "00000000000000000000000000000000001000001", "00101000000000100000000000000000000000000", "0000P000000000000000000000000000000000000", "00000000000000000000000000000100000100000", "00000001000000000000001001001000000000001", "00000000000000000000000001000001000000000", "00000000000000000001000000000000000100000", "000000000P0000000000000000000000000000000", "00010000000010001000000000000000000000000", "00000000000000000000000000100000010000000", "000000000000E0000000000000000000000000000", "0000000000000P000000000000000000000000000", "00000000000000P00000000000000000000000000", "00000000000010000000000000000000100000000", "00000000000000000000000000000000010000000", "00001000000100000000000000000000100000000", "000000000000000000E0000000000000000000000", "10000000000000000000000000000000000000000", "00000000000000000000000000010001000000000", "00000000000000100001000000000000000000000", "0000000000000000000000P000000000000000000", "00000000000000000000000P00000000000000000", "000000000000000000000000P0000000000000000", "0000000000000000000000000P000000000000000", "00000000000000000000000000P00000000000000", "00010000000000100000000000000000000000000", "00000000000000000000001000000000000000000", "00000000000000000000000000000P00000000000", "000000000000000000000000000000P0000000000", "0000000000000000000000000000000E000000000", "00000000000000000000000000000000P00000000", "00000000000000000000000000000100000100000", "00000001000010000000000000000001000001000", "00000000000000000000000000001000001000000", "000000000000000000000000000000000000P0000", "00000000000000000000000000000010000000000", "00000000000000000000000000000000000000P00", "10000000000001000010000000000000000000100", "0000000000000000000000000000000000000000E" };
    int startLanding = 10;
    int K = 4;
    assertEquals(0.06722689075630252, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.06722689075630252);
  }

  @Test
  public void case32() {
    String[] landings = {};
    int startLanding = 46;
    int K = 3;
    assertEquals(0.049574095567839795, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.049574095567839795);
  }

  @Test
  public void case33() {
    String[] landings = { "010000000000010010011000000001000011000000010", "0P0000000000000000000000000000000000000000000", "00P000000000000000000000000000000000000000000", "011010010000000011001001000100010010100011000", "001000000000000100000000000000001010000010000", "100000100100011011101000001000011101001111101", "001010000000100000011001000000000000100010010", "001000101000110101111001000011000110000001000", "010000000000000000000000000000000011000000000", "110000000001100110110001000010001000000000000", "101000000001101000101100000010011011000101111", "000000100000000010010000110011001000100110010", "000000000000E00000000000000000000000000000000", "000010000000000010010001010000000010010100000", "110100000000000000110000100000000000100100001", "000000000000000P00000000000000000000000000000", "001000100000000100010000000001000111010000000", "000000000000100100000000000000000000010000010", "111000000000100101010000010001000000000110010", "000010001000000100001000000000001001000110000", "001000000000100100000000000001001000010000000", "000100000000000111101000011010010100100001011", "010100100010001111010100110000100010010010001", "001000000000000000011000000000001111000010000", "001010000000010101100000000000001000100000010", "001000101000000100001000000001001100100000010", "000110110100011001001000010000001000010011010", "010000000000110010110001100000011000100100010", "100000001000000101001000000000001011110010000", "010010000000100100000000000000000100000000010", "000000010110000000001101000111011100000111010", "110000000101010110000000100011000010100100000", "00000000000000000000000000000000E000000000000", "000000000000000001000000000000000000000010000", "0000000000000000000000000000000000P0000000000", "00000000000000000000000000000000000P000000000", "010010000000000000011001000001001110000100000", "011000001000000000000000000000000010000100010", "010100011011101010000010010010101000000010101", "001000001000100100000000000000000000000000000", "011000001000000100000000000000000001010100000", "000000101000110000100000000010000111010010011", "100100001000100011001000001000000011010011000", "010000001000000100000000000000000000000100000", "011010000100010101100001100000010000100110000" };
    int startLanding = 22;
    int K = 26;
    assertEquals(0.11472096151600492, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.11472096151600492);
  }

  @Test
  public void case34() {
    String[] landings = {};
    int startLanding = 12;
    int K = 47;
    assertEquals(0.959931798806479, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.959931798806479);
  }

  @Test
  public void case35() {
    String[] landings = {};
    int startLanding = 19;
    int K = 48;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case36() {
    String[] landings = {};
    int startLanding = 9;
    int K = 48;
    assertEquals(0.9580479452054794, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.9580479452054794);
  }

  @Test
  public void case37() {
    String[] landings = {};
    int startLanding = 28;
    int K = 49;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case38() {
    String[] landings = {};
    int startLanding = 27;
    int K = 49;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case39() {
    String[] landings = { "00000101111011110011011101100100111100110001110110", "10100101111011110011011111110110011100110001110110", "10000101111011110011011111100110111100110001110110", "11100101111011110011011111111110111100110001110111", "11110111111110011011111111111110111100111001110111", "00000000111011110011011101100100111100110001110100", "11110100111111111011011111111110111100110001110111", "00000100111011110011011101100100111100110001110100", "00000000E00000000000000000000000000000000000000000", "000000000E0000000000000000000000000000000000000000", "00000000110000010011011100000100111000000001010100", "11110101111011110011011111111110111100110001110111", "00000000011001110011011100000100111000100001110000", "00000000111000010011011000000100111000000001010100", "00000000111001010011011100000100111000000001010100", "000000000000000E0000000000000000000000000000000000", "10110101111111110011011111111110110100110000110111", "11111111111111111011111110111110111100111101110111", "000000000000000000E0000000000000000000000000000000", "0000000000000000000E000000000000000000000000000000", "11110111111111111011011111111110111100110001110111", "000000000000000000000P0000000000000000000000000000", "0000000000000000000000P000000000000000000000000000", "00000000000000000000000E00000000000000000000000000", "10000101110011110011011101100110111100110000110110", "00000000111011110011001100100100111100110001110100", "00000000111011110011011100000100111100110001110100", "10100101111011110011011111100110111100110001110110", "11100101101011110011011111110110111100110001110111", "00000000000000000000000000000P00000000000000000000", "10000101111011110011011101100100111100110001110110", "11111111111111111111111111111110111111111101111111", "00000000100000010011011100000100011000000001000100", "000000000000000000000000000000000P0000000000000000", "0000000000000000000000000000000000E000000000000000", "00000000111010110011011100000100111000100001110100", "11111111111111111111111111111110111100111101110111", "11110111111111111111111111111110111110111101110111", "00000000111001110011011100000100111000000001110100", "00000000111011110011011100000100111100100001110100", "11110111111111111011111111111110111100110001110111", "11111111111111111001111111111110111100111001110111", "11111111111111111110111111111111111111111101111111", "00000000110000010011011100000100011000000000000100", "00000000111001110011011100000100111000000001010100", "00000000110000010011011100000100111000000001000100", "11111111111111111111111111111110111111110101110111", "00000000000000000000000000000000000000000000000P00", "00000101111011110011011101100100111100110001110100", "11100101111010110011011111110110111100110001110110" };
    int startLanding = 4;
    int K = 28;
    assertEquals(0.0001225210388348973, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0001225210388348973);
  }

  @Test
  public void case40() {
    String[] landings = {};
    int startLanding = 2;
    int K = 31;
    assertEquals(0.0009495770229250893, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0009495770229250893);
  }

  @Test
  public void case41() {
    String[] landings = {};
    int startLanding = 3;
    int K = 25;
    assertEquals(0.05826299991940961, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.05826299991940961);
  }

  @Test
  public void case42() {
    String[] landings = {};
    int startLanding = 1;
    int K = 15;
    assertEquals(0.01087181159542519, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.01087181159542519);
  }

  @Test
  public void case43() {
    String[] landings = {};
    int startLanding = 0;
    int K = 10;
    assertEquals(0.0023972226265655434, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0023972226265655434);
  }

  @Test
  public void case44() {
    String[] landings = { "00000100000000000000000000000000000000000000000000", "0E000000000000000000000000000000000000000000000000", "10000000001000001010000000000000000000000000001000", "00000000000000000000001000000000000000000000000000", "00000000000000000000000000000001000000000000000000", "00000E00000000000000000000000000000000000000000000", "00001000000001000000000000010000100000000000001000", "00000000000000000001000000100000000000000000000010", "00000100000000000000000000000000000100100000000100", "000000000P0000000000000000000000000000000000000000", "00000000100000000000000000000000000000000001000000", "00000000000000000000000010000000000000000000100000", "00000100000000000001000000000000000000000000001000", "00010000001000000000000000000010001000000000001000", "00000000000000000000000000000000010000000000000000", "00000000000000000000001001000000000000000001000000", "00000000000000000000000000100000000000000000000000", "00000000000000000E00000000000000000000000000000000", "00000000000000001000000000110000000000000000010000", "01001100000000010000000000000000000000000000100001", "00000000000000000000P00000000000000000000000000000", "10000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000", "00000000000000000001001000000001000000000010000000", "00000000000001010000000000010000000000100000000000", "00000000000000000000000000000000000010000001000000", "00000000000000000000000000001000000000000000000000", "00010000101000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000", "00000000000000010000000000000000000000001000000000", "000000000000000000000000000000P0000000000000000000", "00000000000000000000000010100000000000000010000000", "10000000000000000000000000000000000000000000000000", "10000010000001000100000001000000000000000000000000", "0000000000000000000000000000000000P000000000000000", "00000000000000000000000000000000000000010000000000", "000000000000000000000000000000000000P0000000000000", "10000000000000000000000000000000000000000000000001", "00000000000000000000000000001000000000000000000000", "00000000000000000000010000000000000000000000000000", "10000000100000000000000000000000000000010000000000", "00000000000000001100000000000000000000000000000100", "00000000000001000000000000000000000000000000000000", "00000000000000000000000000000000100000010000000000", "00000000000000000000000010000000000010000000010000", "00000000000000000000000000000000000000000000000100", "0000000000000000000000000000000000000000000000P000", "00000000000000000100000000000000000000000000001000", "00000000000000000000000000000000000000000010000000", "0000000000000000000000000000000000000000000000000E" };
    int startLanding = 4;
    int K = 10;
    assertEquals(0.19002174693326015, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.19002174693326015);
  }

  @Test
  public void case45() {
    String[] landings = { "E000000000", "1000000000", "0100000000", "0010000000", "0001000000", "0000001000", "0000000100", "0000000010", "0000000001", "000000000E" };
    int startLanding = 3;
    int K = 3;
    assertEquals(0.5, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.5);
  }

  @Test
  public void case46() {
    String[] landings = { "E000000000", "1000000000", "0100000000", "0010000000", "0001000000", "0000001000", "0000000100", "0000000010", "0000000001", "000000000E" };
    int startLanding = 8;
    int K = 4;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case47() {
    String[] landings = { "E0", "10" };
    int startLanding = 1;
    int K = 1;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case48() {
    String[] landings = { "01", "0E" };
    int startLanding = 1;
    int K = 1;
    assertEquals(0.0, parkamusement.getProbability(landings, startLanding, K), DELTA);
  }

  @Test
  public void case49() {
    String[] landings = { "000001010000001010000000001010100010001011010", "101100110010101000000111001011100000111011010", "000000100000000000000000001000000010100001000", "001001110000100010000000001011100010101001010", "0000E0000000000000000000000000000000000000000", "00000E000000000000000000000000000000000000000", "000000000000000010000000000000000000001001000", "001001000000000010000000001000000000001001000", "00000000E000000000000000000000000000000000000", "000000000E00000000000000000000000000000000000", "101101010000001000000001001010100010101010000", "101011000000011011100111111111001110011111011", "000000000000E00000000000000000000000000000000", "100101011010001000000010000010000110110011010", "000001100000100010000000001010000000100000000", "011000101010111011011101100111101001011111010", "0000000000000000E0000000000000000000000000000", "00000000000000000E000000000000000000000000000", "000000000000000000E00000000000000000000000000", "101011100000110010100101001110001110000011011", "00000000000000000000E000000000000000000000000", "000000000000000000000E00000000000000000000000", "100101011010001000000100001010100000101011010", "101101100000100010000000000011100000001010010", "101101101010101000110101011101100000110110001", "0000000000000000000000000E0000000000000000000", "00000000000000000000000000E000000000000000000", "010111011010111010000111010011100100011111011", "0000000000000000000000000000E0000000000000000", "000000110000000000000000001010000000101011010", "000000000000000000000000000000E00000000000000", "110101111111110011111111110101101001110011000", "111111100010011010000101000011100100110101001", "000000000000000000000000000000000E00000000000", "000000100000000010000000001000000000101001000", "001110010001010011000011111111100010100110111", "000000100000000000000000001000000000000001000", "101100101010100000000101000011100010101011010", "000000000000000010000000000000000000000000000", "000000000000000000000000000000000000000E00000", "000001100000000010000000001000000000101000000", "000000000000000010000000000000000000000000000", "010101001011111011110011111111101110111111011", "0000000000000000000000000000000000000000000E0", "010011000010100000000011001011100000100011010" };
    int startLanding = 15;
    int K = 19;
    assertEquals(0.4989525298030675, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.4989525298030675);
  }

  @Test
  public void case50() {
    String[] landings = { "P0000000000000000000000000000000000000000000000", "10111011111111111111111111110111111011111111111", "00E00000000000000000000000000000000000000000000", "00001000000001001000000100100000000000010010010", "00000000000000001000000000000000000000000000000", "00000P00000000000000000000000000000000000000000", "10111001111111011101000111111111111111111111111", "10111000001001011001000100100000000001111010010", "00000000E00000000000000000000000000000000000000", "10111101101101011101000110001111101011111001111", "0000000000P000000000000000000000000000000000000", "10111001001001011001000100100001001001111011010", "10111101111101011101000111111111101111101111011", "00001000000000000000000000100000000000000000000", "10111111111111011111110111111111111111111111011", "10111000001001001000000100100000001000010010010", "0000000000000000P000000000000000000000000000000", "10111001001101011001000110100011001011100010010", "10111110111111011101000111111111111111111111111", "0000000000000000000P000000000000000000000000000", "10111111111111011111000111111111111101111111110", "10111111111110011111100111111101111111111111111", "0000000000000000000000P000000000000000000000000", "00001000000001001000000000100000000000010010010", "000000000000000000000000E0000000000000000000000", "0000000000000000000000000P000000000000000000000", "00001000000000001000000000000000000000000000000", "000000000000000000000000000P0000000000000000000", "0000000000000000000000000000P000000000000000000", "10111001001001011100000110100011101011111011010", "10111001000101011000000010100001001011111011010", "10111001001001011001000100100000001001111010010", "10011001001100011101000110100011001011110011010", "000000000000000000000000000000000P0000000000000", "0000000000000000000000000000000000E000000000000", "10111101111101011101000110111111101000111011011", "000000000000000000000000000000000000P0000000000", "0000000000000000000000000000000000000P000000000", "10111000001001011000000100100000001000010010010", "000000000000000000000000000000000000000P0000000", "00111000001001011001000100100000001001110010010", "10111101111101011001000010111111101111111011111", "00001000000001001000000000100000000000010000000", "0000000000000000000000000000000000000000000P000", "00000000000000000000000000000000000000000000E00", "00001000000001001000000000100000000000010000000", "0000000000000000000000000000000000000000000000P" };
    int startLanding = 14;
    int K = 18;
    assertEquals(0.13577234711584882, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.13577234711584882);
  }

  @Test
  public void case51() {
    String[] landings = {};
    int startLanding = 18;
    int K = 25;
    assertEquals(0.0059866210179108275, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0059866210179108275);
  }

  @Test
  public void case52() {
    String[] landings = {};
    int startLanding = 34;
    int K = 25;
    assertEquals(0.9362881864736006, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.9362881864736006);
  }

  @Test
  public void case53() {
    String[] landings = {};
    int startLanding = 24;
    int K = 31;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case54() {
    String[] landings = { "01100100010010010000000000001101100010101111110000", "00100100010010010000001000001101000001101101110000", "00P00000000000000000000000000000000000000000000000", "11100101010010110100001000001000100011111111110000", "11010101010010110100001000001101100001111111110000", "00100000010010010000001000000001100000001010010000", "11011101011111110101101011011000100111111101010000", "11100000010010110000001000001101100011110111110000", "11111011011101100101101010111101100111111111110101", "00100000000000010000001000000001100000001010010000", "11110100010000010100001000000101100111111001000000", "01111101010010110100001000011000100111001101110000", "00100000010000010000001000000000100000001010100000", "0000000000000E000000000000000000000000000000000000", "11100100000000010000001000000101100011100011110000", "00100000000000000000001000000001100000001010010000", "11111111111110110101100011111001010101111111110001", "11100100010010110000001000001101100011111110110000", "11111101111110011100101011111101110101111111110111", "11011101011110110100101010011101100111111111110001", "11110101010110010100001010011100100110110110100001", "11111111111111111011101011111111111111111111011111", "00100000000000000000000000000000000000001010110000", "11001011111101111111011011111010111111110111111110", "01111101001110010100001000011101100111111111100001", "0000000000000000000000000E000000000000000000000000", "00000000000000000000000000E00000000000000000000000", "11111101011010110000001000001101100111111101110000", "00100100010010010000001000000001100000001010100000", "00100100010010010000001000001001100011101011100000", "11111011111101111110101001111101110111111011111011", "00100000000000000000001000000000000000001000110000", "00000000000000000000000000000000P00000000000000000", "11101111011111110101101011111100100111111110100101", "11110111111111101011001011100111100111110111011110", "11111001010010110100001000001001100011111101110000", "00100100010010010000001000001001100001101111110000", "00100100010010010000000000001001100000001000110000", "00100100000010010000001000001001100001001011110000", "10100100010010110000000000001101000011100101110000", "0000000000000000000000000000000000000000E000000000", "00100100010010010000001000000001100001101010110000", "00100000000000000000000000000000000000000000100000", "00100100010010010000001000001001100001001010010000", "00000000000000000000000000000000000000000000E00000", "00100000000000000000000000000000000000000010000000", "11111101111010101111100001110001100111011011010101", "00000000000000000000000000000000000000000000000P00", "11011111011101010101100011011100110111101111110101", "11111101001110110100001000011100100011111110010000" };
    int startLanding = 21;
    int K = 38;
    assertEquals(0.05952262112494026, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.05952262112494026);
  }

  @Test
  public void case55() {
    String[] landings = {};
    int startLanding = 5;
    int K = 40;
    assertEquals(0.0477117818889971, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0477117818889971);
  }

  @Test
  public void case56() {
    String[] landings = {};
    int startLanding = 43;
    int K = 43;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case57() {
    String[] landings = {};
    int startLanding = 36;
    int K = 46;
    assertEquals(0.0032595409479831577, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.0032595409479831577);
  }

  @Test
  public void case58() {
    String[] landings = {};
    int startLanding = 7;
    int K = 46;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

  @Test
  public void case59() {
    String[] landings = { "P00000000000000000000000000000000000000000000", "101101000001011110111011001101110111111111110", "100000000001001100101011000100000111101010110", "101000001001001100101010000100100111111110110", "111101111111111111111111101111110111111111111", "101100001001011100001011000101110111111110110", "000000E00000000000000000000000000000000000000", "111101001101111111111111101101110111111111111", "101000000001001100101011000100100111111110110", "000000000E00000000000000000000000000000000000", "111101011101111011111111111101110111111111111", "100000000000001100000000000000000000000000000", "000000000000P00000000000000000000000000000000", "0000000000000P0000000000000000000000000000000", "100000000000000100000000000000000000000000000", "100000000000000000000000000000000000000000000", "101101001000011100111011001101110111111111110", "00000000000000000E000000000000000000000000000", "000000000000000000P00000000000000000000000000", "0000000000000000000P0000000000000000000000000", "100000000001001100000011000100000111101010010", "000000000000000000000E00000000000000000000000", "100000000000001100000000000000000000000000000", "100000000001001100000010000000000001000000000", "111101001001111110111111001101110111111111111", "101101011101111111111111101101110111111111111", "101101001001011100111011000101110111111110110", "100000000001001100000011000000000001000010000", "111101111011111111111111111101110111111111111", "00000000000000000000000000000E000000000000000", "101000000001001100101011000100000111101110110", "101100001001011000101011000101100011111110110", "111111111111111111111111111111110111111111111", "000000000000000000000000000000000E00000000000", "0000000000000000000000000000000000E0000000000", "00000000000000000000000000000000000E000000000", "000000000000000000000000000000000000P00000000", "101000000001000100101011000100100111101110110", "00000000000000000000000000000000000000E000000", "100000000001001100101010000100000111101010110", "100000000001001100000011000000000001000000000", "101101001000011100111011001101110111111110110", "000000000000000000000000000000000000000000E00", "0000000000000000000000000000000000000000000P0", "111101001001011110111011001101110111111111110" };
    int startLanding = 41;
    int K = 13;
    assertEquals(4.719017032191955e-05, parkamusement.getProbability(landings, startLanding, K), DELTA * 4.719017032191955e-05);
  }

  @Test
  public void case60() {
    String[] landings = {};
    int startLanding = 49;
    int K = 19;
    assertEquals(1.1314771561898136e-05, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.1314771561898136e-05);
  }

  @Test
  public void case61() {
    String[] landings = {};
    int startLanding = 3;
    int K = 32;
    assertEquals(1.7962275479656332e-06, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.7962275479656332e-06);
  }

  @Test
  public void case62() {
    String[] landings = {};
    int startLanding = 42;
    int K = 17;
    assertEquals(2.700667057671992e-07, parkamusement.getProbability(landings, startLanding, K), DELTA * 2.700667057671992e-07);
  }

  @Test
  public void case63() {
    String[] landings = { "01000100", "00111000", "00001010", "000E0000", "0000E000", "00000P00", "000000P0", "01000000" };
    int startLanding = 1;
    int K = 2;
    assertEquals(0.14285714285714288, parkamusement.getProbability(landings, startLanding, K), DELTA * 0.14285714285714288);
  }

  @Test
  public void case64() {
    String[] landings = {};
    int startLanding = 49;
    int K = 49;
    assertEquals(1.0, parkamusement.getProbability(landings, startLanding, K), DELTA * 1.0);
  }

}
