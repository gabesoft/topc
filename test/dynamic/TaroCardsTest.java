package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class TaroCardsTest {
  TaroCards tarocards = new TaroCards();

  @Test
  public void case1() {
    int[] first = { 1, 2 };
    int[] second = { 2, 3 };
    int K = 2;
    assertEquals(3L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case2() {
    int[] first = { 3, 1, 2 };
    int[] second = { 1, 1, 1 };
    int K = 3;
    assertEquals(8L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case3() {
    int[] first = { 4, 2, 1, 3 };
    int[] second = { 1, 2, 3, 4 };
    int K = 5;
    assertEquals(16L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case4() {
    int[] first = { 1, 2, 3, 4, 5, 6, 7 };
    int[] second = { 2, 1, 10, 9, 3, 2, 2 };
    int K = 3;
    assertEquals(17L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case5() {
    int[] first = { 1 };
    int[] second = { 2 };
    int K = 1;
    assertEquals(1L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case6() {
    int[] first = { 3, 2, 1 };
    int[] second = { 7, 8, 9 };
    int K = 4;
    assertEquals(7L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case7() {
    int[] first = { 2, 1, 3 };
    int[] second = { 3, 5, 4 };
    int K = 3;
    assertEquals(5L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case8() {
    int[] first = { 7, 29, 19, 18, 24, 27, 28, 25, 22, 21, 1, 38, 10, 11, 4, 23, 8, 30, 9, 32, 2, 33, 3, 40, 14, 12, 31, 39, 26, 37, 13, 41, 42, 34, 17, 36, 16, 20, 6, 5, 15, 35 };
    int[] second = { 4, 4, 5, 2, 2, 4, 9, 8, 5, 3, 8, 8, 10, 4, 2, 10, 9, 7, 6, 1, 3, 9, 7, 1, 3, 5, 9, 7, 6, 1, 10, 1, 1, 7, 2, 4, 9, 10, 4, 5, 5, 7 };
    int K = 72;
    assertEquals(4398046511104L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case9() {
    int[] first = { 7, 1, 23, 15, 28, 27, 36, 40, 39, 30, 20, 35, 21, 6, 11, 33, 38, 8, 24, 13, 18, 32, 37, 22, 31, 17, 2, 5, 12, 3, 19, 25, 26, 9, 16, 29, 34, 4, 10, 41, 14 };
    int[] second = { 5, 2, 3, 1, 1, 2, 5, 7, 1, 8, 2, 8, 8, 8, 8, 4, 4, 6, 10, 10, 9, 2, 9, 3, 7, 7, 1, 4, 9, 1, 2, 3, 6, 1, 10, 5, 8, 9, 4, 6, 2 };
    int K = 47;
    assertEquals(2199023255552L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case10() {
    int[] first = { 1, 2, 3 };
    int[] second = { 5, 1, 7 };
    int K = 3;
    assertEquals(5L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case11() {
    int[] first = { 6, 20, 1, 11, 19, 14, 2, 8, 15, 21, 9, 10, 4, 16, 12, 17, 13, 22, 7, 18, 3, 5 };
    int[] second = { 4, 5, 10, 7, 6, 2, 1, 10, 10, 7, 9, 4, 5, 9, 5, 10, 10, 3, 6, 6, 4, 4 };
    int K = 14;
    assertEquals(2239000L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case12() {
    int[] first = { 6, 1, 11, 7, 8, 12, 2, 15, 21, 17, 23, 13, 9, 5, 24, 10, 18, 14, 22, 19, 16, 20, 3, 4 };
    int[] second = { 2, 6, 9, 7, 2, 3, 5, 3, 6, 9, 7, 3, 7, 6, 4, 10, 3, 5, 7, 2, 9, 3, 2, 2 };
    int K = 4;
    assertEquals(615L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case13() {
    int[] first = { 42, 32, 6, 46, 17, 35, 9, 36, 11, 10, 41, 27, 31, 44, 19, 3, 2, 47, 26, 38, 1, 24, 20, 8, 16, 33, 28, 49, 48, 50, 37, 39, 40, 5, 23, 25, 34, 21, 18, 12, 22, 15, 14, 7, 30, 43, 4, 13, 29, 45 };
    int[] second = { 10, 8, 7, 10, 4, 6, 8, 7, 7, 6, 9, 3, 6, 5, 5, 2, 7, 2, 7, 4, 4, 6, 6, 4, 3, 9, 3, 6, 4, 7, 2, 9, 7, 3, 2, 5, 7, 3, 10, 2, 6, 1, 4, 7, 5, 10, 3, 10, 4, 5 };
    int K = 58;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case14() {
    int[] first = { 3, 2, 4, 5, 1 };
    int[] second = { 5, 3, 9, 9, 8 };
    int K = 1;
    assertEquals(1L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case15() {
    int[] first = { 1, 4, 5, 2, 6, 3 };
    int[] second = { 5, 5, 5, 5, 3, 10 };
    int K = 7;
    assertEquals(64L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case16() {
    int[] first = { 27, 22, 17, 23, 13, 28, 25, 15, 4, 14, 33, 31, 32, 21, 29, 30, 16, 18, 34, 19, 5, 6, 20, 3, 12, 1, 7, 24, 2, 10, 26, 11, 9, 8 };
    int[] second = { 7, 5, 1, 8, 1, 4, 5, 1, 1, 6, 4, 2, 1, 7, 8, 6, 1, 1, 5, 6, 5, 10, 6, 7, 5, 9, 3, 2, 7, 9, 4, 2, 5, 9 };
    int K = 55;
    assertEquals(17179869184L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case17() {
    int[] first = { 6, 7, 1, 4, 9, 13, 11, 5, 14, 15, 3, 12, 10, 2, 8 };
    int[] second = { 10, 3, 7, 6, 8, 8, 5, 6, 8, 10, 9, 4, 1, 3, 3 };
    int K = 30;
    assertEquals(32768L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case18() {
    int[] first = { 18, 16, 15, 4, 6, 1, 5, 21, 20, 19, 7, 9, 22, 23, 24, 17, 3, 13, 11, 2, 12, 10, 14, 8 };
    int[] second = { 10, 1, 4, 9, 9, 6, 8, 8, 1, 9, 10, 4, 1, 8, 5, 8, 9, 4, 8, 2, 1, 1, 9, 4 };
    int K = 21;
    assertEquals(16762700L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case19() {
    int[] first = { 5, 35, 27, 7, 9, 29, 15, 2, 24, 30, 6, 11, 17, 16, 8, 18, 23, 28, 31, 13, 22, 32, 3, 12, 34, 33, 26, 25, 19, 4, 14, 1, 21, 10, 20 };
    int[] second = { 6, 4, 3, 5, 5, 5, 3, 8, 10, 3, 4, 8, 4, 2, 6, 8, 9, 6, 9, 4, 3, 5, 2, 2, 6, 10, 6, 2, 1, 7, 5, 6, 4, 1, 9 };
    int K = 16;
    assertEquals(1185043478L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case20() {
    int[] first = { 24, 17, 18, 2, 29, 30, 15, 21, 26, 3, 27, 20, 9, 6, 1, 16, 28, 10, 25, 7, 14, 4, 12, 8, 23, 22, 11, 13, 5, 19 };
    int[] second = { 3, 9, 1, 8, 3, 3, 6, 10, 2, 1, 9, 6, 1, 8, 10, 1, 6, 4, 5, 2, 1, 5, 9, 6, 10, 3, 6, 5, 2, 4 };
    int K = 22;
    assertEquals(988793839L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case21() {
    int[] first = { 6, 27, 17, 8, 12, 19, 30, 18, 3, 4, 7, 11, 29, 22, 13, 24, 2, 1, 9, 14, 25, 16, 10, 21, 28, 20, 23, 5, 26, 15 };
    int[] second = { 9, 1, 8, 8, 5, 4, 2, 4, 7, 4, 1, 2, 10, 1, 5, 3, 10, 4, 2, 5, 9, 3, 1, 6, 6, 10, 4, 3, 9, 8 };
    int K = 16;
    assertEquals(174116125L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case22() {
    int[] first = { 5, 16, 8, 21, 27, 11, 34, 18, 26, 29, 28, 12, 24, 10, 15, 4, 13, 3, 20, 35, 9, 30, 31, 32, 19, 2, 1, 23, 22, 33, 25, 7, 14, 6, 17 };
    int[] second = { 6, 6, 9, 4, 8, 9, 4, 8, 10, 4, 10, 2, 9, 3, 9, 1, 2, 9, 5, 9, 7, 1, 10, 4, 1, 1, 9, 8, 7, 4, 6, 7, 6, 9, 4 };
    int K = 69;
    assertEquals(34359738368L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case23() {
    int[] first = { 3, 12, 20, 17, 15, 22, 10, 4, 26, 30, 13, 21, 1, 2, 27, 29, 8, 11, 28, 23, 24, 14, 7, 25, 18, 16, 6, 5, 9, 19 };
    int[] second = { 5, 6, 7, 3, 6, 4, 6, 7, 7, 2, 5, 5, 7, 3, 7, 9, 3, 6, 6, 2, 1, 2, 6, 2, 8, 7, 1, 1, 3, 5 };
    int K = 5;
    assertEquals(3163L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case24() {
    int[] first = { 44, 7, 36, 35, 27, 23, 43, 17, 5, 32, 4, 14, 6, 15, 42, 3, 21, 41, 20, 28, 39, 26, 30, 12, 34, 18, 29, 31, 22, 16, 13, 40, 11, 2, 10, 9, 33, 1, 8, 19, 24, 25, 38, 37 };
    int[] second = { 10, 2, 4, 6, 2, 5, 3, 6, 4, 9, 10, 3, 9, 8, 1, 2, 5, 9, 2, 10, 4, 6, 10, 8, 10, 9, 1, 2, 5, 8, 6, 6, 6, 1, 10, 3, 9, 3, 5, 6, 1, 5, 5, 1 };
    int K = 58;
    assertEquals(17592186044416L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case25() {
    int[] first = { 5, 9, 10, 11, 8, 2, 3, 1, 7, 13, 4, 15, 14, 12, 16, 6 };
    int[] second = { 4, 4, 9, 5, 9, 1, 2, 6, 5, 2, 4, 8, 4, 6, 9, 6 };
    int K = 32;
    assertEquals(65536L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case26() {
    int[] first = { 23, 7, 21, 12, 8, 22, 20, 14, 6, 1, 18, 25, 13, 10, 3, 26, 17, 16, 15, 4, 24, 19, 9, 2, 5, 27, 11 };
    int[] second = { 2, 5, 10, 6, 3, 4, 5, 2, 6, 3, 4, 2, 7, 9, 9, 3, 8, 8, 2, 3, 7, 1, 5, 10, 5, 7, 1 };
    int K = 24;
    assertEquals(134091308L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case27() {
    int[] first = { 8, 9, 33, 39, 10, 28, 26, 35, 7, 21, 36, 43, 16, 1, 11, 34, 37, 19, 41, 5, 22, 18, 30, 12, 32, 4, 42, 38, 17, 13, 40, 44, 24, 3, 29, 27, 2, 15, 20, 31, 23, 14, 25, 6 };
    int[] second = { 3, 9, 3, 1, 6, 6, 3, 8, 7, 8, 9, 8, 9, 2, 7, 1, 10, 6, 9, 10, 1, 1, 1, 8, 3, 6, 6, 3, 2, 5, 9, 7, 5, 7, 9, 10, 9, 4, 6, 6, 2, 6, 6, 9 };
    int K = 77;
    assertEquals(17592186044416L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case28() {
    int[] first = { 10, 11, 22, 49, 43, 19, 42, 24, 1, 28, 6, 3, 45, 35, 8, 9, 44, 30, 37, 31, 20, 36, 4, 47, 32, 26, 5, 16, 29, 13, 18, 25, 38, 12, 21, 41, 15, 7, 48, 46, 27, 34, 39, 50, 40, 23, 14, 33, 2, 17 };
    int[] second = { 2, 2, 10, 10, 6, 6, 6, 7, 1, 6, 10, 5, 7, 4, 5, 10, 1, 6, 4, 10, 2, 3, 9, 9, 2, 9, 7, 1, 3, 5, 10, 1, 3, 3, 2, 6, 5, 5, 5, 3, 6, 1, 5, 3, 2, 3, 8, 8, 10, 6 };
    int K = 71;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case29() {
    int[] first = { 48, 5, 43, 15, 6, 14, 42, 16, 29, 4, 18, 23, 22, 41, 36, 46, 25, 19, 1, 3, 38, 31, 24, 34, 28, 50, 9, 37, 40, 10, 32, 17, 13, 7, 47, 39, 44, 49, 21, 2, 45, 26, 30, 8, 35, 33, 11, 27, 12, 20 };
    int[] second = { 5, 7, 8, 10, 4, 5, 8, 9, 9, 2, 7, 4, 9, 8, 7, 2, 8, 3, 4, 8, 9, 6, 9, 6, 9, 8, 4, 4, 2, 1, 9, 2, 1, 10, 3, 5, 10, 2, 6, 8, 4, 4, 5, 3, 3, 1, 2, 3, 8, 8 };
    int K = 95;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case30() {
    int[] first = { 19, 48, 4, 15, 1, 33, 16, 24, 9, 34, 3, 25, 26, 39, 40, 50, 23, 8, 14, 22, 28, 47, 7, 38, 42, 41, 21, 20, 5, 18, 36, 49, 6, 10, 13, 2, 30, 29, 43, 32, 12, 45, 31, 35, 27, 44, 11, 17, 37, 46 };
    int[] second = { 6, 7, 7, 4, 1, 1, 9, 9, 3, 4, 1, 7, 6, 1, 10, 8, 3, 3, 9, 3, 10, 5, 5, 9, 3, 8, 3, 6, 9, 5, 8, 4, 10, 6, 2, 10, 1, 3, 9, 4, 2, 5, 4, 2, 1, 5, 1, 8, 10, 1 };
    int K = 3;
    assertEquals(282L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case31() {
    int[] first = { 21, 6, 47, 50, 11, 42, 46, 18, 44, 49, 15, 10, 2, 24, 17, 35, 22, 26, 14, 3, 19, 39, 5, 13, 43, 38, 8, 16, 4, 25, 45, 1, 48, 23, 29, 34, 41, 32, 9, 28, 37, 20, 12, 31, 36, 7, 27, 33, 40, 30 };
    int[] second = { 1, 8, 7, 5, 3, 2, 10, 2, 7, 1, 4, 4, 7, 3, 3, 2, 5, 4, 3, 7, 1, 6, 5, 10, 7, 1, 9, 3, 8, 5, 1, 8, 7, 1, 2, 3, 10, 4, 9, 6, 2, 6, 7, 7, 9, 9, 10, 9, 8, 1 };
    int K = 32;
    assertEquals(897702557280846L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case32() {
    int[] first = { 40, 11, 20, 27, 12, 2, 17, 38, 24, 6, 46, 14, 31, 32, 15, 49, 3, 41, 1, 36, 34, 25, 7, 16, 30, 39, 42, 44, 13, 4, 50, 28, 5, 35, 19, 47, 33, 43, 18, 8, 29, 45, 21, 26, 10, 37, 22, 48, 23, 9 };
    int[] second = { 8, 6, 6, 4, 2, 9, 9, 9, 1, 2, 8, 6, 1, 6, 10, 1, 10, 4, 6, 5, 3, 8, 3, 7, 8, 3, 3, 1, 2, 2, 8, 6, 10, 2, 9, 2, 8, 9, 7, 7, 10, 10, 3, 7, 7, 6, 9, 5, 1, 4 };
    int K = 30;
    assertEquals(662795624097119L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case33() {
    int[] first = { 1, 26, 30, 40, 31, 49, 22, 5, 34, 18, 35, 14, 2, 44, 20, 11, 7, 48, 21, 19, 28, 3, 25, 37, 23, 38, 10, 33, 16, 39, 46, 42, 8, 32, 9, 6, 27, 50, 45, 4, 17, 13, 43, 24, 15, 29, 47, 41, 36, 12 };
    int[] second = { 10, 1, 4, 6, 3, 10, 2, 3, 7, 2, 8, 1, 2, 6, 3, 3, 10, 1, 6, 2, 9, 4, 7, 9, 9, 7, 2, 7, 7, 8, 1, 5, 10, 9, 10, 5, 10, 9, 8, 6, 7, 5, 9, 7, 9, 8, 9, 1, 10, 6 };
    int K = 49;
    assertEquals(1125899906841600L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case34() {
    int[] first = { 29, 23, 37, 5, 4, 3, 45, 40, 16, 6, 21, 17, 25, 24, 36, 1, 22, 33, 15, 18, 9, 38, 10, 46, 41, 11, 2, 12, 30, 43, 8, 44, 34, 7, 19, 14, 35, 32, 49, 47, 20, 28, 39, 42, 31, 48, 26, 50, 27, 13 };
    int[] second = { 6, 4, 5, 5, 6, 6, 2, 5, 2, 3, 7, 7, 4, 4, 1, 1, 9, 2, 4, 9, 2, 7, 10, 9, 1, 2, 4, 10, 4, 10, 4, 7, 6, 6, 5, 1, 6, 1, 7, 6, 6, 2, 9, 10, 7, 3, 3, 6, 1, 6 };
    int K = 100;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case35() {
    int[] first = { 44, 33, 45, 49, 28, 16, 36, 27, 46, 50, 35, 29, 31, 10, 34, 13, 30, 32, 9, 12, 38, 39, 7, 6, 14, 47, 4, 3, 11, 25, 20, 37, 23, 15, 5, 41, 17, 18, 19, 24, 26, 2, 48, 8, 40, 42, 21, 22, 43, 1 };
    int[] second = { 10, 6, 4, 1, 10, 10, 6, 2, 2, 2, 3, 4, 4, 10, 8, 3, 4, 4, 1, 5, 9, 5, 4, 10, 3, 5, 10, 1, 6, 8, 5, 8, 7, 7, 4, 1, 10, 1, 9, 1, 2, 6, 2, 1, 4, 10, 6, 9, 10, 7 };
    int K = 86;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case36() {
    int[] first = { 45, 36, 10, 29, 27, 39, 24, 35, 13, 12, 8, 38, 50, 19, 33, 34, 3, 21, 41, 25, 11, 40, 7, 17, 16, 47, 46, 1, 49, 31, 22, 20, 26, 6, 4, 42, 15, 48, 14, 43, 32, 44, 18, 30, 28, 23, 5, 2, 9, 37 };
    int[] second = { 2, 6, 6, 4, 9, 10, 3, 9, 5, 3, 8, 6, 9, 5, 1, 10, 5, 5, 4, 6, 9, 5, 2, 1, 4, 4, 5, 1, 7, 8, 6, 6, 7, 1, 10, 9, 4, 6, 8, 10, 1, 5, 9, 8, 5, 1, 3, 4, 6, 5 };
    int K = 36;
    assertEquals(1106361934795974L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case37() {
    int[] first = { 47, 6, 5, 50, 35, 15, 36, 12, 14, 46, 25, 22, 4, 41, 1, 37, 28, 23, 27, 32, 30, 38, 20, 48, 43, 19, 31, 44, 24, 16, 10, 33, 29, 18, 17, 21, 39, 7, 9, 45, 3, 8, 34, 2, 26, 40, 49, 13, 42, 11 };
    int[] second = { 4, 2, 4, 6, 7, 10, 6, 10, 9, 9, 4, 10, 6, 2, 4, 7, 3, 9, 9, 2, 10, 9, 2, 4, 4, 5, 4, 10, 3, 8, 3, 2, 8, 7, 2, 8, 4, 1, 7, 1, 3, 6, 7, 1, 8, 3, 1, 10, 6, 5 };
    int K = 57;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case38() {
    int[] first = { 28, 38, 1, 32, 3, 11, 45, 15, 9, 29, 39, 30, 13, 12, 41, 37, 42, 8, 22, 50, 27, 43, 33, 10, 44, 6, 26, 19, 47, 25, 5, 36, 20, 31, 23, 46, 7, 14, 24, 18, 4, 34, 21, 2, 49, 17, 40, 48, 35, 16 };
    int[] second = { 1, 5, 9, 6, 8, 4, 4, 1, 4, 1, 4, 3, 2, 2, 1, 9, 2, 9, 8, 3, 9, 10, 3, 4, 1, 3, 9, 3, 6, 6, 9, 2, 3, 5, 10, 9, 9, 3, 8, 2, 8, 10, 6, 1, 4, 5, 1, 2, 6, 4 };
    int K = 23;
    assertEquals(46996020311253L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case39() {
    int[] first = { 44, 27, 19, 41, 23, 26, 21, 2, 45, 22, 43, 40, 33, 9, 31, 39, 32, 1, 17, 16, 14, 42, 46, 38, 5, 37, 6, 7, 48, 50, 36, 8, 10, 13, 3, 4, 15, 30, 35, 20, 28, 18, 29, 11, 49, 47, 24, 34, 12, 25 };
    int[] second = { 6, 8, 4, 3, 3, 3, 1, 1, 3, 4, 2, 7, 9, 8, 8, 3, 9, 8, 10, 6, 10, 3, 10, 2, 4, 1, 9, 2, 10, 3, 1, 3, 5, 8, 6, 9, 2, 1, 1, 8, 2, 7, 10, 4, 1, 4, 8, 4, 1, 5 };
    int K = 63;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case40() {
    int[] first = { 10, 41, 5, 34, 37, 21, 4, 8, 15, 27, 40, 29, 36, 47, 39, 31, 44, 7, 45, 18, 6, 22, 42, 3, 12, 30, 28, 26, 20, 9, 17, 2, 23, 46, 35, 13, 49, 1, 14, 38, 24, 25, 32, 11, 19, 43, 48, 16, 50, 33 };
    int[] second = { 6, 2, 5, 8, 4, 7, 2, 7, 9, 1, 9, 7, 6, 8, 2, 1, 3, 9, 4, 6, 6, 7, 2, 5, 10, 4, 9, 4, 3, 4, 4, 8, 4, 1, 2, 5, 9, 8, 9, 10, 9, 10, 8, 10, 2, 10, 6, 9, 10, 7 };
    int K = 83;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case41() {
    int[] first = { 33, 5, 38, 10, 40, 26, 45, 21, 46, 20, 31, 27, 16, 6, 37, 28, 19, 41, 7, 35, 43, 3, 22, 12, 4, 49, 42, 14, 25, 18, 24, 11, 34, 36, 1, 39, 8, 29, 13, 44, 17, 23, 48, 2, 32, 50, 30, 9, 47, 15 };
    int[] second = { 2, 7, 2, 10, 8, 4, 6, 1, 1, 7, 6, 2, 9, 3, 8, 3, 5, 6, 3, 3, 6, 9, 7, 10, 9, 4, 6, 6, 1, 6, 9, 2, 6, 1, 8, 4, 5, 2, 6, 7, 5, 2, 8, 1, 5, 1, 7, 2, 1, 6 };
    int K = 24;
    assertEquals(76184755992800L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case42() {
    int[] first = { 7, 8, 11, 12, 2, 6, 22, 16, 15, 42, 43, 33, 28, 24, 41, 47, 31, 32, 23, 27, 37, 36, 44, 35, 46, 26, 17, 50, 34, 45, 49, 3, 38, 14, 48, 13, 39, 18, 40, 30, 4, 20, 5, 25, 21, 19, 10, 1, 9, 29 };
    int[] second = { 6, 5, 2, 1, 2, 3, 3, 9, 6, 5, 7, 8, 8, 4, 5, 5, 10, 2, 9, 4, 9, 8, 10, 8, 2, 2, 5, 4, 6, 3, 10, 2, 6, 6, 7, 8, 10, 1, 3, 4, 2, 10, 9, 8, 9, 5, 5, 5, 4, 6 };
    int K = 83;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case43() {
    int[] first = { 23, 22, 1, 11, 10, 36, 50, 38, 48, 25, 20, 41, 46, 39, 18, 37, 44, 29, 17, 45, 9, 19, 49, 3, 34, 33, 26, 27, 40, 4, 43, 6, 13, 32, 47, 12, 16, 15, 24, 31, 8, 5, 42, 14, 2, 7, 35, 30, 28, 21 };
    int[] second = { 9, 3, 9, 5, 8, 10, 5, 1, 8, 5, 9, 2, 9, 3, 3, 2, 5, 7, 7, 10, 4, 9, 2, 4, 7, 5, 6, 3, 3, 1, 2, 1, 4, 9, 8, 4, 4, 2, 5, 6, 7, 2, 3, 2, 10, 2, 9, 1, 5, 8 };
    int K = 71;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case44() {
    int[] first = { 1, 12, 18, 25, 44, 42, 19, 41, 4, 13, 32, 9, 17, 30, 14, 29, 38, 2, 15, 7, 23, 47, 40, 50, 34, 39, 45, 35, 20, 11, 36, 5, 6, 37, 31, 22, 21, 27, 24, 46, 16, 10, 26, 48, 8, 33, 43, 28, 49, 3 };
    int[] second = { 10, 10, 7, 8, 7, 3, 1, 10, 7, 3, 4, 1, 4, 6, 2, 10, 7, 8, 10, 3, 8, 6, 7, 9, 3, 5, 7, 4, 1, 10, 2, 9, 8, 7, 9, 5, 1, 4, 8, 10, 7, 3, 3, 8, 4, 1, 8, 4, 1, 8 };
    int K = 85;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case45() {
    int[] first = { 9, 24, 45, 48, 38, 12, 1, 42, 8, 18, 34, 5, 35, 27, 13, 10, 19, 37, 39, 46, 41, 7, 6, 11, 28, 47, 40, 31, 25, 33, 15, 14, 17, 29, 43, 44, 23, 26, 32, 36, 2, 50, 49, 22, 21, 20, 16, 30, 4, 3 };
    int[] second = { 2, 1, 9, 10, 2, 1, 10, 8, 8, 5, 6, 2, 7, 8, 9, 4, 10, 4, 2, 4, 10, 7, 4, 8, 6, 3, 1, 8, 2, 8, 1, 7, 8, 2, 8, 6, 5, 9, 2, 8, 6, 3, 2, 8, 6, 4, 2, 1, 1, 1 };
    int K = 77;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case46() {
    int[] first = { 30, 22, 15, 49, 23, 18, 4, 8, 10, 13, 34, 39, 48, 2, 28, 41, 16, 1, 31, 47, 45, 44, 32, 6, 21, 24, 7, 27, 42, 46, 25, 37, 50, 38, 20, 26, 43, 12, 19, 17, 11, 29, 36, 40, 5, 35, 3, 9, 14, 33 };
    int[] second = { 3, 7, 9, 10, 8, 8, 9, 10, 4, 1, 6, 7, 4, 10, 8, 8, 5, 4, 6, 9, 4, 4, 4, 7, 2, 1, 5, 8, 5, 3, 8, 2, 6, 8, 3, 3, 8, 1, 4, 7, 1, 10, 9, 10, 7, 5, 1, 3, 10, 1 };
    int K = 21;
    assertEquals(8986138396184L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case47() {
    int[] first = { 38, 42, 25, 44, 50, 22, 36, 30, 20, 41, 3, 43, 45, 16, 28, 39, 37, 47, 29, 48, 6, 26, 13, 18, 15, 27, 11, 5, 10, 46, 40, 7, 24, 32, 8, 2, 14, 9, 35, 4, 31, 49, 33, 19, 12, 1, 21, 23, 17, 34 };
    int[] second = { 1, 4, 4, 2, 6, 9, 4, 1, 6, 2, 1, 3, 6, 2, 1, 5, 1, 7, 5, 9, 10, 6, 7, 3, 3, 3, 2, 8, 5, 8, 9, 7, 1, 1, 3, 2, 4, 10, 3, 5, 2, 6, 5, 1, 7, 7, 9, 2, 4, 4 };
    int K = 93;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case48() {
    int[] first = { 7, 8, 4, 2, 10, 1, 3, 6, 9, 5 };
    int[] second = { 4, 10, 10, 7, 10, 8, 8, 3, 6, 3 };
    int K = 2;
    assertEquals(13L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case49() {
    int[] first = { 7, 1, 2, 5, 4, 8, 6, 3, 10, 9 };
    int[] second = { 2, 4, 1, 2, 3, 1, 4, 2, 1, 1 };
    int K = 4;
    assertEquals(97L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case50() {
    int[] first = { 5, 8, 6, 10, 3, 1, 9, 7, 4, 2 };
    int[] second = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int K = 4;
    assertEquals(260L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case51() {
    int[] first = { 38, 47, 27, 16, 4, 14, 6, 10, 17, 35, 13, 41, 1, 36, 44, 7, 45, 42, 11, 32, 5, 37, 40, 23, 9, 20, 28, 2, 12, 46, 22, 31, 43, 8, 25, 30, 3, 29, 26, 21, 18, 15, 34, 39, 33, 19, 24 };
    int[] second = { 3, 3, 7, 3, 5, 2, 3, 1, 1, 6, 4, 4, 1, 3, 2, 7, 7, 5, 2, 5, 6, 3, 6, 3, 4, 7, 6, 1, 3, 3, 7, 7, 3, 2, 4, 6, 6, 4, 3, 3, 4, 3, 2, 5, 4, 5, 6 };
    int K = 19;
    assertEquals(1686208518105L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case52() {
    int[] first = { 20, 37, 39, 10, 3, 21, 31, 41, 8, 7, 11, 17, 4, 30, 40, 6, 48, 18, 25, 32, 36, 50, 27, 15, 34, 12, 16, 5, 35, 19, 33, 28, 1, 9, 47, 42, 22, 14, 13, 43, 23, 24, 2, 44, 46, 38, 49, 45, 29, 26 };
    int[] second = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int K = 51;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case53() {
    int[] first = { 19, 23, 5, 18, 34, 26, 39, 13, 22, 49, 41, 2, 33, 15, 17, 31, 43, 20, 40, 1, 25, 14, 47, 46, 28, 9, 11, 37, 10, 4, 24, 30, 29, 42, 7, 3, 27, 6, 21, 8, 32, 38, 16, 12, 36, 50, 45, 44, 35, 48 };
    int[] second = { 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1 };
    int K = 18;
    assertEquals(16497219573858L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case54() {
    int[] first = { 12, 25, 17, 39, 48, 28, 30, 15, 36, 44, 20, 26, 16, 24, 7, 5, 32, 3, 13, 8, 31, 29, 1, 21, 6, 19, 47, 49, 41, 34, 38, 4, 46, 10, 9, 43, 23, 14, 27, 33, 11, 45, 35, 18, 22, 37, 40, 50, 2, 42 };
    int[] second = { 1, 3, 1, 1, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 1, 3, 1, 3, 3, 1, 2, 3, 3, 1, 3, 1, 2, 3, 3, 3, 1, 1, 1, 2, 3, 3, 3, 1, 3, 1, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3 };
    int K = 80;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case55() {
    int[] first = { 19, 12, 21, 13, 8, 2, 22, 14, 16, 7, 26, 37, 32, 45, 44, 40, 3, 34, 27, 23, 47, 11, 43, 31, 24, 39, 41, 20, 29, 46, 48, 25, 35, 33, 50, 15, 4, 5, 28, 38, 6, 10, 36, 1, 18, 42, 49, 30, 17, 9 };
    int[] second = { 4, 2, 1, 1, 1, 1, 1, 3, 4, 2, 3, 2, 1, 1, 3, 2, 2, 3, 3, 2, 2, 3, 4, 2, 2, 1, 2, 4, 3, 3, 2, 4, 1, 1, 2, 1, 4, 1, 3, 3, 1, 4, 3, 2, 3, 4, 2, 2, 2, 3 };
    int K = 55;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case56() {
    int[] first = { 28, 20, 33, 49, 39, 40, 1, 16, 37, 45, 13, 27, 21, 26, 18, 6, 8, 30, 47, 24, 10, 17, 31, 4, 42, 36, 25, 3, 5, 35, 50, 34, 19, 48, 14, 41, 15, 23, 22, 32, 43, 29, 46, 38, 12, 2, 44, 11, 7, 9 };
    int[] second = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    int K = 10;
    assertEquals(5214913020L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case57() {
    int[] first = { 7, 4, 11, 16, 27, 21, 22, 30, 10, 37, 5, 17, 39, 29, 8, 1, 2, 38, 25, 24, 31, 32, 6, 20, 28, 19, 12, 23, 13, 18, 15, 36, 26, 9, 40, 33, 34, 3, 35, 14 };
    int[] second = { 3, 2, 2, 3, 3, 2, 2, 2, 3, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 2, 3, 3, 2 };
    int K = 17;
    assertEquals(140668822451L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case58() {
    int[] first = { 33, 41, 23, 2, 29, 48, 40, 34, 46, 49, 3, 13, 26, 7, 35, 17, 6, 32, 39, 16, 20, 27, 25, 47, 28, 4, 38, 15, 36, 10, 44, 31, 37, 43, 12, 22, 1, 8, 42, 11, 24, 50, 9, 14, 18, 21, 30, 19, 5, 45 };
    int[] second = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
    int K = 50;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case59() {
    int[] first = { 24, 25, 34, 10, 49, 11, 26, 36, 1, 20, 17, 22, 5, 4, 2, 50, 44, 43, 46, 21, 31, 35, 19, 23, 47, 37, 32, 7, 48, 41, 30, 14, 16, 39, 9, 6, 18, 38, 33, 29, 27, 12, 13, 40, 15, 42, 8, 28, 3, 45 };
    int[] second = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
    int K = 7;
    assertEquals(32244452L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case60() {
    int[] first = { 30, 44, 9, 21, 22, 6, 10, 15, 8, 4, 47, 11, 12, 35, 27, 38, 49, 41, 29, 19, 3, 5, 14, 17, 26, 23, 2, 34, 25, 33, 20, 42, 40, 36, 45, 31, 1, 48, 18, 13, 37, 7, 39, 28, 24, 32, 16, 46, 43 };
    int[] second = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 };
    int K = 17;
    assertEquals(8248609195668L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case61() {
    int[] first = { 6, 20, 1, 11, 19, 14, 2, 8, 15, 21, 9, 10, 4, 16, 12, 17, 13, 22, 7, 18, 3, 5 };
    int[] second = { 4, 5, 10, 7, 6, 2, 1, 10, 10, 7, 9, 4, 5, 9, 5, 10, 10, 3, 6, 6, 4, 4 };
    int K = 14;
    assertEquals(2239000L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case62() {
    int[] first = { 1, 2, 3, 4, 5, 6, 7 };
    int[] second = { 2, 1, 10, 9, 3, 2, 2 };
    int K = 3;
    assertEquals(17L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case63() {
    int[] first = { 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
    int[] second = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
    int K = 25;
    assertEquals(123632820938336L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case64() {
    int[] first = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
    int[] second = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    int K = 47;
    assertEquals(562949953380352L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case65() {
    int[] first = { 3, 1, 2 };
    int[] second = { 1, 1, 1 };
    int K = 3;
    assertEquals(8L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case66() {
    int[] first = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
    int[] second = { 6, 6, 2, 1, 6, 6, 4, 10, 7, 2, 10, 1, 4, 2, 4, 10, 4, 3, 7, 4, 6, 6, 2, 10, 5, 8, 3, 1, 4, 7, 8, 5, 1, 8, 4, 4, 6, 4, 8, 4, 1, 1, 9, 2, 3, 2, 10, 2, 5, 2 };
    int K = 10;
    assertEquals(56296172L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case67() {
    int[] first = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
    int[] second = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int K = 50;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case68() {
    int[] first = { 6, 20, 1, 11, 19, 14, 2, 8, 15, 21, 9, 10, 4, 16, 12, 17, 13, 22, 7, 18, 3, 5, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
    int[] second = { 4, 5, 10, 7, 6, 2, 1, 10, 10, 7, 9, 4, 5, 9, 5, 10, 10, 3, 6, 6, 4, 4, 1, 4, 6, 7, 4, 3, 2, 4, 5, 7, 7, 5, 4, 3, 3, 4, 5, 6, 7, 4, 3, 3, 4, 5, 6, 7, 3, 6 };
    int K = 98;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case69() {
    int[] first = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
    int[] second = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int K = 100;
    assertEquals(1125899906842624L, tarocards.getNumber(first, second, K));
  }

  @Test
  public void case70() {
    int[] first = { 6, 20, 1, 11, 19, 14, 2, 8, 15, 21, 9, 10, 4, 16, 12, 17, 13, 22, 7, 18, 3, 5, 23, 24, 25, 26, 30, 29, 28, 27, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 41, 42, 44, 43 };
    int[] second = { 4, 5, 10, 7, 6, 2, 1, 10, 10, 7, 9, 4, 5, 9, 5, 10, 10, 3, 6, 6, 4, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6 };
    int K = 36;
    assertEquals(17585228192400L, tarocards.getNumber(first, second, K));
  }

}
