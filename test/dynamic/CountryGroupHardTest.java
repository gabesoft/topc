package topc.test.dynamic;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.dynamic.*;

public class CountryGroupHardTest {
    CountryGroupHard countrygrouphard = new CountryGroupHard();

    @Test
    public void case1() {
        int[] a = { 0, 2, 3, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case2() {
        int[] a = { 0, 2, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case3() {
        int[] a = { 0, 3, 0, 0, 3, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case4() {
        int[] a = { 0, 0, 3, 3, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case5() {
        int[] a = { 2, 2, 0, 2, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case6() {
        int[] a = { 1, 0, 1, 0, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case7() {
        int[] a = { 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case8() {
        int[] a = { 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case9() {
        int[] a = { 0, 2, 0, 2, 0, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case10() {
        int[] a = { 2, 0, 0, 2, 0, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case11() {
        int[] a = { 0, 4, 0, 0, 4 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case12() {
        int[] a = { 4, 0, 0, 4, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

   @Test
    public void case13() {
        int[] a = { 0, 4, 0, 0, 4, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case14() {
        int[] a = { 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case15() {
        int[] a = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case16() {
        int[] a = { 10, 0, 0, 0, 10, 10, 0, 0, 10, 10, 10, 0, 10, 0, 0, 10, 10, 10, 10, 0, 0, 0, 0, 0, 10, 0, 0, 10, 10, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 10, 0, 10, 0, 10, 0, 0, 0, 10, 10, 10, 0, 10, 10, 10, 0, 0, 10, 10, 0, 10, 0, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 10, 10, 0, 10, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10, 10, 0, 10, 10, 10, 0, 10, 10, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case17() {
        int[] a = { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case18() {
        int[] a = { 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case19() {
        int[] a = {};
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case20() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case21() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case22() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case23() {
        int[] a = { 4, 4, 4, 4, 3, 0, 3, 4, 4, 0, 4, 0, 5, 5, 5, 5, 5, 1, 0, 3, 3, 5, 5, 5, 5, 0, 2, 0, 0, 5, 5, 5, 5, 2, 2, 1, 0, 0, 0, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 0, 4, 4, 4, 0, 3, 3, 2, 0, 2, 2, 0, 4, 0, 4, 0, 5, 0, 0, 5, 5, 3, 3, 0, 0, 3, 3, 4, 4, 4, 4, 0, 0, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 4, 4, 0, 4, 3, 3, 3 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case24() {
        int[] a = { 1, 2, 2, 5, 0, 0, 0, 5, 2, 2, 1, 0, 3, 0, 3, 3, 3, 0, 5, 5, 5, 0, 3, 3, 3, 2, 0, 0, 4, 4, 0, 0, 2, 1, 1, 5, 0, 0, 5, 0, 3, 3, 3, 3, 3, 3, 4, 0, 4, 0, 0, 4, 4, 4, 5, 0, 0, 5, 5, 0, 0, 3, 1, 2, 0, 5, 0, 5, 5, 0, 1, 5, 5, 5, 5, 0, 3, 0, 3, 0, 0, 4, 4, 1, 4, 4, 4, 4, 0, 4, 0, 4, 5, 5, 0, 5, 0, 3, 3, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case25() {
        int[] a = { 0, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case26() {
        int[] a = { 4, 4, 4, 4, 2, 2, 5, 0, 5, 5, 5, 4, 4, 4, 4, 0, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 1, 1, 1, 4, 4, 4, 0, 3, 3, 3, 5, 0, 5, 5, 5, 3, 3, 3, 4, 4, 4, 0, 3, 3, 0, 2, 0, 5, 0, 5, 0, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 3, 3, 3 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case27() {
        int[] a = { 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case28() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case29() {
        int[] a = { 0, 3, 3, 0, 5, 5, 5, 0, 1, 2, 0, 1, 0, 4, 4, 4, 0, 2, 2, 3, 3, 3, 2, 2, 1, 4, 4, 4, 4, 0, 5, 0, 5, 5, 2, 2, 1, 3, 3, 0, 3, 3, 3, 3, 3, 3, 2, 2, 4, 4, 4, 4, 1, 2, 2, 4, 0, 4, 4, 3, 0, 0, 1, 1, 4, 4, 4, 4, 3, 3, 3, 0, 5, 5, 0, 0, 5, 5, 5, 5, 5, 3, 3, 3, 2, 2, 0, 2, 0, 5, 5, 0, 5, 3, 3, 3, 0, 4, 4, 4 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case30() {
        int[] a = { 3, 3, 3, 0, 3, 0, 3, 3, 3, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 2, 2, 0, 3, 3, 3, 0, 2, 0, 2, 0, 0, 4, 4, 0, 0, 5, 0, 0, 2, 0, 5, 5, 0, 5, 5, 0, 3, 3, 1, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 2, 0, 3, 0, 3, 2, 0, 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, 5, 5, 2, 2, 0, 0, 3, 2, 0, 4, 4, 4, 0, 0, 3, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case31() {
        int[] a = { 1, 0, 3, 3, 0, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 2, 2, 3, 0, 3, 5, 5, 5, 5, 5, 1, 4, 4, 0, 4, 2, 2, 3, 0, 3, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 4, 4, 4, 4, 2, 2, 1, 1, 0, 3, 3, 2, 2, 2, 2, 3, 3, 0, 1, 0, 2, 2, 2, 1, 1, 0, 2, 2, 2, 5, 5, 5, 5, 5, 4, 4, 4, 4, 2, 2, 5, 5, 0, 5, 5, 0, 2, 1 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case32() {
        int[] a = { 4, 4, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 2, 0, 5, 5, 5, 0, 5, 3, 3, 3, 1, 1, 5, 5, 0, 0, 0, 2, 0, 5, 5, 5, 5, 5, 1, 3, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 3, 1, 2, 2, 2, 2, 5, 5, 5, 5, 5, 2, 2, 0, 2, 0, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 0, 0, 3, 3, 3, 2, 0, 1, 4, 0, 4, 0, 2, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case33() {
        int[] a = { 0, 5, 5, 0, 5, 0, 0, 0, 0, 0, 4, 0, 4, 0, 3, 0, 0, 3, 3, 0, 4, 0, 4, 4, 1, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 3, 0, 0, 0, 1, 4, 0, 4, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 5, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case34() {
        int[] a = { 3, 3, 3, 4, 4, 0, 4, 5, 5, 5, 5, 5, 3, 0, 3, 1, 2, 2, 4, 4, 4, 4, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 3, 3, 3, 4, 4, 4, 4, 1, 4, 4, 4, 4, 2, 2, 3, 3, 3, 2, 2, 4, 4, 0, 4, 4, 0, 4, 4, 1, 3, 3, 3, 0, 4, 4, 4, 4, 4, 0, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case35() {
        int[] a = { 2, 2, 4, 0, 4, 4, 5, 5, 5, 5, 0, 2, 0, 4, 0, 0, 4, 0, 5, 5, 5, 5, 3, 3, 3, 0, 0, 4, 4, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 2, 2, 0, 4, 4, 4, 1, 0, 5, 0, 5, 5, 0, 4, 4, 0, 0, 3, 0, 0, 3, 0, 3, 4, 4, 0, 4, 3, 3, 3, 3, 3, 3, 4, 0, 4, 4, 0, 2, 0, 0, 5, 0, 5, 1, 0, 3, 3, 3, 3, 3 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case36() {
        int[] a = { 0, 3, 3, 4, 4, 0, 4, 0, 2, 0, 2, 2, 1, 3, 3, 0, 0, 0, 4, 4, 3, 0, 3, 0, 3, 0, 0, 5, 5, 5, 5, 3, 0, 0, 0, 1, 0, 2, 4, 0, 4, 0, 4, 4, 4, 4, 3, 0, 3, 4, 0, 4, 0, 1, 2, 0, 0, 1, 4, 4, 4, 4, 5, 5, 5, 0, 0, 0, 5, 0, 5, 5, 3, 3, 3, 5, 5, 5, 5, 0, 0, 1, 1, 3, 3, 3, 2, 2, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case37() {
        int[] a = { 1, 5, 5, 5, 0, 5, 5, 0, 5, 0, 5, 0, 2, 2, 4, 4, 0, 4, 5, 5, 5, 5, 5, 2, 2, 2, 2, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 5, 5, 5, 5, 2, 2, 5, 5, 5, 5, 5, 3, 3, 3, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 1, 0, 2, 4, 4, 4, 4, 3, 0, 3, 2, 2, 3, 3, 0, 4, 4, 0, 4, 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case38() {
        int[] a = { 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 1, 0, 0, 5, 5, 5, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 5, 5, 0, 5, 0, 5, 0, 2, 2, 0, 0, 3, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case39() {
        int[] a = { 0, 0, 0, 4, 0, 4, 4, 2, 0, 3, 3, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 5, 5, 0, 5, 0, 1, 5, 5, 0, 5, 5, 2, 2, 2, 0, 1, 5, 5, 5, 5, 5, 1, 4, 4, 4, 4, 0, 1, 4, 4, 0, 4, 0, 0, 0, 3, 3, 1, 2, 2, 2, 2, 0, 0, 0, 5, 0, 0, 0, 2, 2, 0, 5, 0, 5, 5, 2, 0, 0, 0, 2, 1, 0, 0, 0, 5, 5, 5, 1, 0, 0, 5, 5, 5, 0, 3, 3 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case40() {
        int[] a = { 2, 0, 3, 3, 3, 5, 5, 5, 0, 0, 3, 3, 0, 4, 4, 4, 4, 1, 0, 3, 3, 5, 0, 5, 5, 0, 5, 5, 5, 0, 5, 1, 5, 0, 5, 5, 5, 4, 0, 0, 0, 2, 2, 0, 2, 3, 3, 3, 3, 3, 3, 0, 3, 3, 5, 5, 5, 5, 0, 1, 2, 0, 1, 4, 4, 0, 4, 1, 3, 0, 3, 0, 4, 4, 0, 4, 0, 4, 4, 4, 1, 0, 5, 5, 5, 0, 2, 2, 3, 3, 3, 5, 5, 0, 0, 0, 0, 3, 3 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case41() {
        int[] a = { 2, 2, 1, 3, 3, 3, 0, 4, 4, 0, 5, 5, 0, 0, 5, 1, 5, 5, 5, 5, 0, 1, 3, 3, 0, 2, 2, 1, 0, 4, 4, 0, 0, 3, 0, 2, 2, 0, 2, 3, 3, 3, 1, 2, 2, 3, 3, 3, 5, 0, 5, 0, 5, 0, 1, 4, 0, 4, 0, 0, 1, 4, 4, 0, 0, 0, 3, 3, 0, 4, 4, 0, 0, 1, 4, 4, 0, 0, 1, 2, 0, 5, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 5, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case42() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 3, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case43() {
        int[] a = { 3, 3, 3, 2, 2, 4, 0, 0, 4, 0, 2, 3, 3, 0, 1, 2, 2, 4, 0, 4, 4, 0, 3, 0, 0, 0, 3, 2, 2, 5, 0, 5, 5, 5, 0, 0, 2, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 3, 3, 3, 3, 3, 0, 0, 5, 5, 0, 0, 3, 0, 3, 5, 0, 5, 5, 0, 5, 0, 5, 0, 0, 3, 3, 3, 5, 0, 5, 0, 5, 2, 2, 0, 0, 4, 4, 4, 0, 4, 4, 5, 5, 0, 0, 5 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case44() {
        int[] a = { 4, 4, 0, 0, 2, 0, 5, 5, 0, 5, 0, 1, 1, 1, 0, 2, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 1, 0, 3, 3, 0, 4, 0, 4, 0, 2, 0, 0, 5, 5, 0, 5, 0, 4, 4, 4, 0, 0, 3, 5, 0, 5, 5, 0, 0, 4, 4, 4, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 4, 0, 2, 0, 0, 0, 4, 5, 0, 5, 0, 5, 5, 5, 5, 5, 0, 4, 4, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case45() {
        int[] a = { 3, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 3, 1, 0, 0, 4, 0, 0, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 1, 0, 0, 4, 0, 0, 0, 0, 4, 2, 0, 1, 0, 1, 0, 0, 3, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 5, 0, 0, 4, 0, 0, 2, 3, 0, 0, 3, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case46() {
        int[] a = { 3, 3, 3, 5, 5, 5, 5, 5, 0, 2, 1, 0, 4, 4, 4, 1, 4, 0, 4, 4, 2, 0, 3, 3, 3, 4, 4, 4, 4, 2, 2, 0, 2, 3, 3, 3, 5, 5, 5, 0, 5, 2, 2, 5, 5, 5, 5, 5, 0, 4, 0, 0, 2, 2, 4, 4, 4, 4, 1, 5, 5, 5, 5, 5, 2, 2, 5, 5, 5, 0, 5, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case47() {
        int[] a = { 0, 0, 2, 3, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 3, 0, 0, 0, 0, 0, 5, 0, 1, 5, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 0, 0, 1, 2, 0, 4, 0, 0, 0, 0, 3, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 2, 5, 0, 0, 0, 0, 0, 4, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case48() {
        int[] a = { 3, 3, 3, 3, 3, 3, 0, 4, 4, 0, 0, 2, 5, 5, 5, 0, 5, 1, 4, 0, 4, 0, 3, 3, 0, 2, 2, 4, 4, 4, 4, 0, 3, 3, 3, 1, 4, 4, 4, 4, 0, 2, 0, 4, 4, 4, 4, 0, 2, 4, 4, 4, 0, 1, 0, 2, 5, 5, 5, 5, 0, 2, 2, 5, 0, 0, 5, 0, 0, 2, 0, 3, 3, 5, 5, 5, 5, 0, 3, 3, 0, 3, 3, 3, 5, 5, 5, 5, 5, 1, 3, 3, 3, 2, 2, 5, 5, 5, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case49() {
        int[] a = { 3, 3, 3, 0, 4, 0, 4, 1, 0, 1, 5, 5, 5, 5, 5, 0, 0, 0, 4, 5, 5, 0, 5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 3, 0, 2, 1, 0, 2, 5, 5, 0, 5, 0, 3, 0, 0, 1, 2, 2, 1, 3, 3, 3, 1, 3, 3, 0, 3, 0, 0, 1, 5, 0, 5, 5, 5, 1, 2, 2, 2, 0, 5, 0, 0, 5, 5, 2, 2, 0, 0, 4, 4, 0, 0, 0, 3, 0, 3, 0, 0, 3, 3, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case50() {
        int[] a = { 2, 0, 0, 2, 2, 2, 0, 5, 5, 5, 5, 1, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 1, 4, 4, 4, 4, 0, 3, 3, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 0, 1, 1, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 0, 0, 1, 3, 3, 3, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 0, 5, 2, 2, 1, 5, 5, 5, 5, 5, 2, 2, 5, 5, 0, 5, 5, 2, 2, 0, 2, 2, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case51() {
        int[] a = { 0, 4, 0, 4, 5, 5, 5, 5, 5, 2, 2, 0, 0, 4, 4, 4, 0, 3, 3, 2, 2, 2, 2, 5, 0, 5, 0, 0, 3, 3, 3, 2, 0, 3, 0, 3, 5, 5, 5, 5, 5, 3, 3, 0, 0, 0, 4, 4, 0, 2, 2, 2, 2, 2, 5, 0, 0, 5, 5, 0, 2, 3, 0, 3, 3, 0, 3, 1, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 3, 2, 0, 4, 4, 4, 4 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case52() {
        int[] a = { 1, 1, 0, 2, 2, 1, 4, 4, 4, 4, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 5, 5, 0, 5, 5, 4, 4, 0, 4, 1, 3, 0, 3, 0, 5, 0, 0, 5, 4, 4, 4, 4, 2, 2, 2, 2, 0, 5, 5, 5, 5, 3, 3, 3, 4, 4, 0, 4, 4, 4, 4, 4, 5, 5, 0, 0, 5, 2, 2, 5, 5, 5, 5, 5, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 0, 4, 4, 0, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case53() {
        int[] a = { 1, 3, 3, 0, 5, 5, 5, 5, 5, 2, 2, 3, 3, 3, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 2, 2, 0, 3, 3, 3, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 2, 2, 4, 4, 4, 4, 1, 2, 2, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 5, 5, 5, 5, 5 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case54() {
        int[] a = { 4, 0, 4, 0, 2, 2, 3, 3, 3, 0, 5, 5, 5, 5, 0, 3, 3, 3, 3, 0, 3, 4, 0, 4, 4, 4, 4, 4, 0, 2, 2, 1, 3, 3, 0, 0, 3, 3, 5, 5, 5, 0, 5, 2, 0, 3, 3, 3, 1, 4, 4, 4, 4, 5, 5, 5, 0, 0, 5, 0, 0, 5, 5, 0, 4, 0, 0, 3, 0, 3, 2, 0, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 0, 0, 5, 2, 2, 5, 5, 0, 5, 0, 4, 4, 0, 0, 4, 4, 4, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case55() {
        int[] a = { 1, 5, 5, 5, 5, 5, 0, 3, 3, 0, 5, 0, 5, 5, 0, 2, 2, 2, 0, 2, 0, 5, 5, 5, 5, 5, 1, 4, 4, 0, 4, 4, 4, 0, 0, 0, 5, 5, 5, 5, 0, 0, 3, 2, 2, 1, 1, 3, 0, 3, 0, 0, 4, 0, 4, 0, 1, 2, 2, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 1, 0, 2, 0, 4, 4, 4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 0, 0, 3, 3, 0, 1, 1, 4, 0, 4, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case56() {
        int[] a = { 3, 3, 3, 3, 3, 0, 2, 0, 5, 5, 5, 5, 5, 4, 4, 4, 4, 1, 5, 0, 5, 5, 5, 0, 0, 0, 5, 5, 0, 5, 5, 3, 3, 3, 1, 0, 5, 5, 5, 5, 5, 2, 2, 5, 5, 5, 5, 5, 1, 5, 5, 0, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 5, 5, 5, 0, 5, 0, 0, 0, 5, 3, 3, 3, 1, 3, 3, 0, 4, 0, 4, 4, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 1, 4, 4, 0, 4 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case57() {
        int[] a = { 0, 3, 3, 0, 5, 0, 5, 5, 0, 3, 0, 3, 3, 3, 3, 5, 0, 5, 5, 5, 0, 4, 4, 4, 2, 0, 3, 0, 3, 0, 1, 0, 3, 0, 0, 0, 2, 2, 0, 3, 3, 3, 0, 1, 0, 3, 0, 2, 2, 0, 4, 4, 0, 1, 1, 1, 0, 2, 2, 2, 0, 4, 0, 4, 4, 3, 3, 0, 3, 3, 3, 0, 3, 3, 2, 2, 0, 3, 3, 0, 4, 4, 4, 3, 0, 3, 0, 0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 2, 2 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case58() {
        int[] a = { 0, 0, 0, 5, 5, 2, 2, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 3, 0, 3, 0, 3, 3, 0, 4, 0, 4, 3, 0, 3, 4, 4, 4, 0, 0, 2, 0, 2, 0, 1, 0, 5, 5, 5, 0, 5, 2, 2, 0, 3, 3, 4, 4, 4, 4, 0, 0, 3, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 1, 5, 5, 5, 5, 5, 5, 0, 5, 5, 0, 0, 3, 3, 2, 2, 0, 5, 0, 5, 5 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case59() {
        int[] a = { 0, 0, 3, 5, 5, 5, 5, 0, 4, 4, 4, 4, 2, 2, 1, 2, 2, 0, 4, 4, 4, 2, 2, 1, 4, 4, 4, 0, 3, 3, 3, 4, 4, 4, 0, 3, 3, 3, 2, 0, 5, 0, 5, 5, 5, 0, 2, 2, 0, 4, 4, 4, 4, 0, 4, 4, 4, 1, 2, 2, 2, 2, 1, 3, 3, 3, 2, 2, 1, 1, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 3, 0, 3, 0, 3, 3, 0, 0, 5, 0, 5, 0, 2, 5, 5, 5, 5, 5 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case60() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case61() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case62() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case63() {
        int[] a = { 0, 3, 3, 8, 8, 0, 8, 0, 0, 8, 8, 4, 4, 0, 4, 0, 5, 0, 0, 0, 9, 0, 9, 0, 0, 0, 9, 9, 9, 13, 0, 13, 13, 13, 0, 0, 13, 13, 13, 13, 13, 0, 6, 6, 0, 0, 6, 6, 0, 0, 6, 0, 6, 6, 2, 2, 2, 2, 0, 2, 11, 11, 0, 0, 11, 0, 0, 11, 11, 11, 11, 17, 0, 17, 0, 0, 0, 0, 0, 0, 17, 0, 17, 0, 0, 17, 0, 17 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case64() {
        int[] a = { 0, 0, 0, 10, 0, 0, 10, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 1, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 6, 6, 6, 0, 6, 6, 1, 0, 0, 0, 2, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 3, 2, 2 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case65() {
        int[] a = { 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case66() {
        int[] a = { 1, 6, 6, 6, 6, 6, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 20, 20, 20, 3, 3, 3, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5, 5, 5, 5, 5 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case67() {
        int[] a = { 0, 11, 11, 11, 11, 11, 11, 11, 0, 11, 0, 31, 31, 0, 31, 0, 31, 31, 0, 31, 0, 31, 0, 0, 0, 31, 31, 31, 0, 0, 0, 31, 31, 0, 0, 31, 31, 31, 31, 31, 0, 31, 0, 10, 10, 10, 10, 0, 10, 10, 0, 10, 0, 3, 3, 3, 2, 2, 0, 10, 10, 0, 10, 10, 10, 10, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 11, 11, 11, 0, 0, 11, 11, 11, 11, 0, 11, 8, 8, 8, 8, 8, 8, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case68() {
        int[] a = { 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 0, 0, 0, 0, 0, 37, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 0, 37, 37, 37, 0, 37, 0, 0, 0, 0, 0, 0, 37, 0, 0, 37, 0, 0, 0, 0, 37, 0, 0, 0, 3, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case69() {
        int[] a = { 0, 2, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case70() {
        int[] a = { 0, 3, 3, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 8, 8, 8, 8, 8, 8, 8, 0, 1, 3, 3, 3, 2, 0, 4, 4, 4, 4, 3, 3, 3, 2, 2, 16, 16, 16, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 12, 0, 12, 12, 12, 12, 12, 12, 12, 0, 12, 12, 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case71() {
        int[] a = { 0, 0, 0, 16, 16, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 16, 5, 5, 5, 5, 5, 7, 7, 7, 7, 0, 0, 0, 8, 8, 0, 8, 8, 8, 8, 8, 2, 2, 0, 29, 29, 0, 0, 0, 0, 29, 29, 0, 0, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 0, 29, 0, 29, 29, 29, 29 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case72() {
        int[] a = { 2, 0, 7, 0, 7, 7, 7, 7, 7, 21, 21, 21, 0, 21, 21, 21, 0, 21, 0, 0, 0, 0, 21, 21, 0, 21, 21, 21, 21, 21, 7, 7, 7, 7, 0, 7, 0, 2, 2, 0, 0, 12, 12, 12, 12, 12, 0, 12, 12, 0, 12, 2, 0, 19, 19, 19, 19, 19, 0, 0, 19, 0, 19, 0, 19, 19, 19, 0, 19, 0, 0, 0, 0, 6, 0, 0, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case73() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case74() {
        int[] a = { 2, 2, 12, 12, 12, 12, 12, 12, 0, 12, 12, 12, 12, 12, 1, 6, 6, 6, 6, 6, 6, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 0, 8, 7, 7, 7, 7, 0, 7, 7, 2, 2, 3, 0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 2, 2, 1, 4, 4, 0, 4, 0, 3, 3, 0, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case75() {
        int[] a = { 9, 9, 9, 9, 0, 9, 0, 9, 9, 2, 0, 1, 0, 4, 4, 4, 4, 0, 3, 3, 3, 0, 0, 3, 3, 3, 1, 1, 3, 3, 3, 2, 2, 5, 5, 5, 5, 5, 18, 18, 18, 18, 18, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 18, 18, 2, 2, 0, 3, 3, 3 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case76() {
        int[] a = { 4, 4, 4, 4, 0, 8, 0, 8, 8, 0, 8, 8, 8, 11, 11, 0, 11, 11, 11, 11, 11, 11, 11, 11, 0, 4, 4, 4, 18, 18, 18, 18, 0, 18, 18, 18, 18, 0, 0, 18, 0, 0, 0, 0, 18, 18, 12, 0, 12, 12, 12, 0, 0, 12, 0, 12, 12, 12, 0, 8, 8, 8, 8, 8, 8, 0, 3, 3, 3, 6, 6, 6, 0, 6, 6, 8, 8, 0, 0, 0, 8, 8, 8, 0, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case77() {
        int[] a = { 5, 0, 5, 5, 5, 3, 3, 3, 8, 8, 0, 8, 0, 8, 0, 8, 4, 4, 4, 0, 1, 8, 0, 0, 8, 8, 0, 0, 8, 12, 12, 0, 0, 12, 12, 0, 12, 12, 0, 0, 0, 0, 2, 3, 0, 3, 8, 8, 8, 8, 0, 8, 8, 0, 0, 0, 12, 0, 12, 12, 12, 12, 0, 0, 0, 0, 9, 9, 9, 0, 9, 9, 9, 9, 0, 0, 6, 6, 6, 6, 0, 5, 5, 5, 0, 5, 1, 2, 0, 0, 0, 0, 2, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case78() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case79() {
        int[] a = { 11, 0, 11, 11, 11, 11, 11, 0, 0, 0, 0, 15, 0, 0, 15, 15, 15, 0, 15, 0, 0, 0, 15, 0, 15, 15, 0, 17, 17, 17, 17, 17, 17, 0, 17, 17, 0, 17, 17, 17, 17, 17, 17, 17, 0, 12, 12, 12, 0, 12, 12, 12, 0, 12, 12, 12, 4, 4, 4, 4, 0, 6, 0, 0, 6, 6, 6, 11, 11, 11, 0, 11, 11, 11, 11, 0, 11, 11, 1, 1, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case80() {
        int[] a = { 1, 1, 0, 0, 9, 0, 0, 9, 0, 9, 9, 16, 16, 0, 0, 0, 16, 0, 0, 16, 0, 16, 16, 16, 16, 0, 0, 2, 0, 2, 2, 0, 2, 3, 3, 0, 1, 2, 0, 5, 0, 5, 0, 5, 0, 11, 11, 0, 11, 11, 0, 11, 11, 11, 11, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case81() {
        int[] a = { 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 20, 0, 20, 0, 0, 7, 0, 0, 0, 7, 7, 0, 0, 5, 0, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case82() {
        int[] a = { 3, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 6, 0, 0, 9, 0, 0, 9, 0, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case83() {
        int[] a = { 6, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 10, 0, 10, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 15, 15, 0, 0, 0, 5, 5, 5, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 0, 0, 24, 24, 24, 0, 24, 0, 0, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 2, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case84() {
        int[] a = { 1, 6, 6, 6, 0, 6, 6, 3, 3, 3, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 0, 30, 30, 30, 30, 30, 30, 0, 30, 30, 30, 30, 1, 1, 2, 2, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case85() {
        int[] a = { 0, 6, 6, 0, 6, 6, 4, 4, 4, 0, 9, 9, 0, 9, 0, 9, 0, 0, 9, 5, 5, 5, 0, 5, 8, 8, 8, 8, 8, 0, 8, 8, 4, 4, 4, 4, 3, 3, 0, 4, 4, 4, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 15, 15, 0, 15, 15, 5, 5, 0, 5, 5, 11, 11, 11, 11, 0, 11, 0, 11, 11, 0, 0, 1, 0, 0, 8, 8, 8, 0, 8, 8, 4, 0, 4, 4 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case86() {
        int[] a = { 0, 0, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case87() {
        int[] a = { 2, 2, 3, 0, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, 26, 26, 26, 26, 1, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case88() {
        int[] a = { 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case89() {
        int[] a = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 7, 7, 7, 7, 7, 7, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case90() {
        int[] a = { 0, 0, 20, 0, 20, 20, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 36, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 36, 0, 0, 0, 0, 3 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case91() {
        int[] a = { 2, 2, 6, 6, 6, 0, 6, 6, 7, 7, 7, 0, 7, 0, 7, 2, 0, 0, 6, 6, 6, 6, 6, 1, 1, 2, 2, 19, 19, 19, 19, 19, 0, 19, 0, 0, 19, 19, 19, 19, 19, 19, 0, 19, 0, 19, 9, 9, 0, 9, 0, 9, 9, 9, 0, 0, 5, 5, 5, 5, 3, 0, 3, 8, 0, 8, 8, 8, 8, 8, 8, 6, 6, 6, 0, 6, 6 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case92() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case93() {
        int[] a = { 0, 0, 8, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 10, 10, 10, 10, 0, 10, 10, 0, 0, 18, 18, 0, 0, 18, 0, 18, 18, 0, 0, 18, 0, 18, 18, 18, 0, 0, 18, 6, 6, 0, 0, 6, 6, 0, 0, 0, 26, 0, 0, 0, 0, 0, 26, 0, 26, 0, 0, 0, 26, 26, 26, 0, 0, 26, 26, 26, 26, 0, 26, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case94() {
        int[] a = { 12, 12, 12, 12, 12, 12, 0, 12, 12, 12, 0, 12, 2, 2, 1, 3, 3, 0, 6, 6, 6, 6, 0, 6, 11, 11, 11, 11, 11, 11, 0, 11, 0, 11, 11, 4, 4, 4, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1, 5, 5, 5, 5, 5, 2, 2, 6, 6, 6, 0, 6, 6, 5, 5, 5, 0, 5 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case95() {
        int[] a = { 0, 3, 0, 7, 0, 7, 7, 7, 0, 7, 7, 0, 0, 7, 7, 0, 7, 7, 7, 0, 7, 0, 0, 7, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0, 1, 0, 0, 0, 8, 8, 8, 8, 0, 8, 0, 1, 3, 0, 0, 2, 2, 2, 2, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case96() {
        int[] a = { 2, 0, 2, 0, 4, 4, 0, 4, 2, 2, 0, 9, 9, 0, 9, 0, 9, 9, 9, 2, 0, 1, 0, 0, 12, 0, 12, 0, 12, 12, 12, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 7, 0, 7, 0, 0, 7, 2, 0, 0, 2, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case97() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case98() {
        int[] a = { 8, 8, 0, 8, 8, 8, 8, 8, 1, 1, 0, 7, 0, 7, 7, 7, 7, 17, 0, 0, 17, 17, 17, 0, 0, 0, 17, 17, 17, 17, 17, 17, 17, 17, 0, 12, 12, 12, 0, 0, 12, 0, 12, 12, 12, 0, 0, 5, 0, 5, 5, 0, 2, 2, 3, 3, 3, 0, 10, 10, 10, 10, 10, 10, 0, 10, 10, 6, 6, 6, 6, 0, 6, 2, 2, 7, 0, 7, 0, 7, 7, 7, 3, 3, 0, 2, 2, 0, 4, 0, 4, 4, 4, 4, 4, 5, 0, 5, 5, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case99() {
        int[] a = { 10, 10, 10, 10, 10, 10, 10, 10, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 60, 60, 60, 60, 60, 60, 60, 60, 60, 0, 60, 60, 60, 0, 0, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 0, 0, 60, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 9, 0, 9, 9, 9, 9, 9, 9, 9 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case100() {
        int[] a = { 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 3, 3, 3, 2, 2, 4, 0, 4, 4, 3, 3, 3, 1, 7, 7, 7, 0, 7, 7, 7, 1, 0, 4, 4, 4, 1, 11, 11, 11, 11, 0, 11, 11, 11, 11, 11, 0, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case101() {
        int[] a = { 13, 13, 13, 13, 0, 13, 0, 13, 0, 0, 13, 0, 0, 0, 0, 0, 0, 16, 16, 0, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 0, 0, 16, 2, 2, 0, 2, 18, 0, 18, 18, 18, 0, 18, 18, 0, 0, 18, 18, 0, 18, 0, 18, 0, 18, 1, 7, 0, 7, 7, 0, 0, 7 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case102() {
        int[] a = { 10, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 1, 1, 1, 1, 8, 0, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 2, 0, 7, 7, 7, 7, 7, 7, 7, 3, 0, 0, 9, 9, 9, 9, 9, 0, 9, 0, 9, 1, 0, 0, 7, 0, 7, 7, 7 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case103() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case104() {
        int[] a = { 0, 0, 0, 3 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case105() {
        int[] a = { 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case106() {
        int[] a = { 0, 0, 3, 3, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case107() {
        int[] a = { 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case108() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case109() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case110() {
        int[] a = { 2, 2, 2, 2 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case111() {
        int[] a = { 0, 3, 0, 3, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case112() {
        int[] a = { 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case113() {
        int[] a = { 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case114() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case115() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case116() {
        int[] a = { 5, 5, 5, 5, 5 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case117() {
        int[] a = { 0, 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case118() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case119() {
        int[] a = { 0, 0, 1 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case120() {
        int[] a = { 36, 36, 0, 0, 0, 0, 0, 0, 36, 36, 36, 0, 0, 36, 36, 0, 0, 0, 36, 0, 36, 36, 0, 36, 0, 36, 36, 0, 36, 0, 0, 0, 0, 36, 36, 0, 0, 2, 1, 1, 0, 9, 0, 9, 0, 0, 9, 9, 9, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case121() {
        int[] a = { 1, 1, 1, 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case122() {
        int[] a = { 1, 0, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case123() {
        int[] a = { 0, 2, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case124() {
        int[] a = { 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case125() {
        int[] a = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case126() {
        int[] a = { 1, 0, 0 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case127() {
        int[] a = { 0, 1, 0, 1, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case128() {
        int[] a = { 0, 1, 1, 1 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case129() {
        int[] a = { 0, 1, 3, 0, 0, 0, 3, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case130() {
        int[] a = { 0, 3, 3, 3, 0, 4, 4, 4, 4, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case131() {
        int[] a = { 2, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case132() {
        int[] a = { 0, 2, 0, 1 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case133() {
        int[] a = { 0, 0, 2, 1, 2, 0, 0 };
        assertEquals("Sufficient", countrygrouphard.solve(a));
    }

    @Test
    public void case134() {
        int[] a = { 0, 0, 0, 0, 1 };
        assertEquals("Insufficient", countrygrouphard.solve(a));
    }

}
