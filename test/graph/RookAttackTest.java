package topc.test.graph;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.graph.*;

public class RookAttackTest {
  RookAttack rookattack = new RookAttack();

  @Test
  public void case1() {
    int rows = 8;
    int cols = 8;
    String[] cutouts = {  };
    assertEquals(8, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case2() {
    int rows = 2;
    int cols = 2;
    String[] cutouts = { "0 0", "0 1", "1 1", "1 0" };
    assertEquals(0, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case3() {
    int rows = 3;
    int cols = 3;
    String[] cutouts = { "0 0", "1 0", "1 1", "2 0", "2 1", "2 2" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case4() {
    int rows = 3;
    int cols = 3;
    String[] cutouts = { "0 0", "1 2", "2 2" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case5() {
    int rows = 200;
    int cols = 200;
    String[] cutouts = {  };
    assertEquals(200, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case6() {
    int rows = 3;
    int cols = 3;
    String[] cutouts = { "0 0", "1 1", "2 1" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case7() {
    int rows = 6;
    int cols = 6;
    String[] cutouts = { "0 0", "0 2", "0 4", "1 1", "1 3", "1 5", "2 0", "2 2", "2 4", "3 1", "3 3", "3 5", "4 0", "4 2", "4 4", "5 1", "5 3", "5 5", "2 0", "2 2", "2 4" };
    assertEquals(6, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case8() {
    int rows = 4;
    int cols = 4;
    String[] cutouts = { "0 0", "0 1", "1 2", "2 0", "2 1", "2 0", "2 1" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case9() {
    int rows = 3;
    int cols = 3;
    String[] cutouts = { "1 1", "1 2", "2 1", "2 2" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case10() {
    int rows = 300;
    int cols = 300;
    String[] cutouts = { "149 149", "149 151", "151 149", "151 151", "148 148", "148 152", "152 148", "152 152", "147 147", "147 153", "153 147", "153 153", "146 146", "146 154", "154 146", "154 154", "145 145", "145 155", "155 145", "155 155", "144 144", "144 156", "156 144", "156 156", "143 143", "143 157", "157 143", "157 157", "142 142", "142 158", "158 142", "158 158", "141 141", "141 159", "159 141", "159 159", "140 140", "140 160", "160 140", "160 160", "139 139", "139 161", "161 139", "161 161", "138 138", "138 162", "162 138", "162 162", "137 137", "137 163" };
    assertEquals(300, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case11() {
    int rows = 5;
    int cols = 4;
    String[] cutouts = { "0 1", "0 2", "0 3", "1 1", "1 3", "2 0", "3 0", "3 1", "3 3", "4 0", "4 1", "4 3" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case12() {
    int rows = 4;
    int cols = 5;
    String[] cutouts = { "0 1", "0 2", "1 1", "1 2", "1 3", "1 4", "2 0", "2 4", "3 0", "3 2", "3 4" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case13() {
    int rows = 4;
    int cols = 5;
    String[] cutouts = { "0 0", "0 2", "0 4", "1 1", "1 3", "2 0", "2 2", "2 4", "3 0", "3 2", "3 4" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case14() {
    int rows = 300;
    int cols = 300;
    String[] cutouts = { "50 11,243 285,240 213,124 267,59 166,163 235", "17 260,25 293,193 260,215 210,49 211,201 253,0 151", "89 214,223 193,241 66,48 224,273 137,207 218", "29 242,248 59,144 76,239 48,99 265,61 69,245 270", "260 5,85 199,191 45,167 129,290 295,146 147,73 105", "280 166,191 13,223 281,153 26,272 93,114 47", "294 28,78 94,30 180,199 37,274 173,70 39,259 195", "273 63,264 293,61 255,55 221,299 177,152 0,250 95", "205 170,34 4,149 46,178 128,94 62,176 35,180 244", "272 251,180 17,118 149,205 169,276 260,152 91", "175 297,176 112,201 33,206 280,216 246,238 186", "231 51,215 144,185 7,169 47,53 64,264 224,4 56", "148 57,268 168,85 15,287 180,287 23,189 248,73 94", "253 174,134 69,97 171,100 28,255 221,173 161", "298 247,129 155,143 5,287 14,206 62,145 9,78 258", "78 250,255 48,167 216,144 105,17 144,151 220", "138 292,295 119,124 151,48 99,252 254,116 98", "59 170,29 260,139 233,233 44,88 227,228 16,71 91", "244 60,214 47,88 246,287 154,247 224,263 104", "104 48,60 136,71 50,149 280,70 293,12 164,113 60", "182 179,24 19,282 56,225 217,143 121,266 252", "145 174,188 103,5 228,24 74,51 214,101 197,131 108", "30 96,266 177,270 69,86 201,61 207,252 143,13 243", "230 5,144 205,124 165,63 286,23 45,266 102,217 140", "280 33,145 262,286 187,288 128,104 114,37 212", "198 99,246 72,290 213,145 29,239 68,8 193,223 60", "251 296,241 132,53 189,261 80,177 21,236 286", "263 274,76 94,24 47,100 68,51 145,174 92,227 1", "251 285,119 238,56 200,177 204,110 158,255 244", "75 11,112 243,18 170,260 102,188 258,22 144,39 46", "120 294,264 211,205 210,221 81,118 191,207 180", "236 268,250 294,242 141,223 144,90 228,153 247", "102 48,22 137,130 120,210 31,183 87,240 56,233 98", "194 46,98 18,37 295,282 156,144 154,120 215", "226 211,49 24,166 258,243 134,199 21,237 0,55 117", "200 240,256 18,8 69,211 151,134 82,197 176,152 20", "197 41,190 71,224 166,169 238,38 96,255 42,50 219", "204 114,6 24,287 201,88 81,117 235,233 211,271 200", "112 23,24 284,79 124,143 142,162 21,295 41,226 1", "253 119,36 140,244 226,83 77,288 43,202 252,210 29", "135 121,197 67,25 27,71 135,245 282,229 10,59 91", "10 87,49 69,219 32,144 271,132 15,280 19,295 182", "27 34,20 215,5 235,245 150,279 42,63 81,229 178", "126 155,165 212,107 1,61 174,138 177,172 275,58 97", "216 279,171 272,118 79,47 85,234 269,24 197", "298 240,189 235,212 114,59 5,149 97,137 89,298 16", "291 267,229 52,69 163,7 37,14 211,84 40,134 196", "168 81,47 164,287 282,49 272,205 244,125 138,41 33", "179 157,211 259,119 102,115 99,88 152,221 116", "277 93,80 144,11 224,190 183,126 233,44 172" };
    assertEquals(300, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case15() {
    int rows = 300;
    int cols = 300;
    String[] cutouts = { "41 22,34 48,46 23,42 33,15 3,6 42,33 15,21 17", "35 6,28 17,48 27,12 23,20 11,17 35,49 41,45 38", "28 0,38 16,9 44,25 6,33 30,42 35,16 35,28 16,25 48", "21 0,47 1,36 4,24 7,23 20,4 29,6 4,17 11,47 28", "29 37,38 26,49 10,45 42,10 39,2 15,33 49,5 40,2 22", "45 35,45 30,11 14,36 2,15 15,28 34,20 20,25 47", "17 7,9 32,48 44,48 45,21 47,28 9,12 45,24 39,13 11", "6 38,18 28,21 11,17 4,43 10,32 11,49 45,21 40", "25 10,6 7,12 25,33 48,36 38,23 3,22 47,2 23,13 0", "0 33,15 6,34 42,31 36,26 9,13 36,16 15,17 31,2 9", "14 14,34 18,8 30,29 20,46 31,29 20,27 11,27 34", "14 0,7 40,41 17,9 38,37 35,16 23,33 2,41 17,35 1", "11 16,4 48,20 38,23 17,7 47,26 25,48 6,29 20,26 11", "16 18,30 23,8 48,17 13,40 40,18 15,33 5,33 41", "12 12,28 8,19 40,34 47,39 24,48 15,34 4,24 22", "8 22,31 2,38 0,10 17,1 25,13 2,11 46,32 30,20 10", "35 17,17 20,44 37,35 20,18 34,40 5,16 6,47 41,21 7", "10 16,2 33,45 6,43 18,40 10,6 37,1 14,2 43,28 0", "20 16,16 32,11 3,10 36,10 4,16 17,32 33,33 8,27 10", "14 19,0 43,9 43,21 30,38 22,44 5,9 43,6 46,13 36", "1 15,21 24,9 25,36 8,15 43,43 4,30 15,39 27,14 40", "35 48,28 7,23 45,42 23,35 15,11 22,19 23,37 14", "10 10,7 12,7 29,4 6,32 35,6 7,48 40,14 47,35 15", "36 21,49 8,39 40,43 7,28 39,2 29,17 44,13 22,33 6", "36 33,45 3,23 28,38 22,45 21,35 37,5 22,22 34", "33 49,4 10,38 4,35 8,46 3,46 39,23 41,12 5,41 8", "21 34,10 36,16 9,9 48,4 10,38 13,23 46,18 36,47 27", "9 1,14 25,7 22,45 8,7 43,27 39,33 39,23 28,29 5", "35 17,12 49,35 35,13 28,45 47,32 2,15 36,46 29", "25 42,22 1,46 26,16 30,3 19,5 32,20 33,10 24,19 24", "36 13,3 45,37 4,3 21,12 29,16 42,36 34,9 45,33 31", "43 46,13 15,48 25,14 28,2 31,40 16,16 14,35 0,47 1", "21 24,6 12,20 35,17 18,46 39,31 30,18 35,10 34", "9 3,39 28,23 23,1 40,41 17,40 31,39 42,12 1,24 6", "28 10,35 7,1 35,3 36,41 22,4 28,44 15,20 49,7 43", "14 21,38 19,32 47,13 18,4 5,0 34,16 48,5 28,35 3", "5 26,25 14,20 46,32 30,13 29,48 13,12 8,47 28", "1 46,22 16,21 28,22 35,28 48,29 36,2 4,32 36,23 36", "9 48,0 3,28 48,44 14,11 30,15 18,37 25,29 9,12 48", "32 2,49 21,4 46,30 16,20 40,4 28,46 28,6 20,14 3", "26 31,32 1,4 36,4 31,5 24,39 35,43 11,33 25,29 7", "13 35,10 36,21 47,7 49,21 15,14 2,15 17,31 20", "14 20,33 44,30 45,42 42,7 34,31 39,11 38,33 36", "34 20,33 9,28 12,34 22,25 10,29 18,24 19,37 41", "37 27,38 31,8 16,9 47,20 49,19 8,16 25,6 36,2 26", "2 8,23 28,30 4,15 39,49 29,11 3,13 12,47 13,26 45", "21 28,4 35,18 26,41 6,15 42,2 18,4 22,18 24,29 47", "23 46,38 10,45 49,39 24,6 37,33 29,42 13,13 38", "2 32,9 48,48 14,35 30,30 21,19 30,49 36,40 1,5 20", "45 8,14 42,46 2,44 1,23 19,47 48,45 33,32 19,17 34" };
    assertEquals(300, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case16() {
    int rows = 30;
    int cols = 30;
    String[] cutouts = { "7 11,12 1,1 29,21 25,0 16,14 21,1 9,17 19,13 11", "22 12,5 14,7 15,25 2,28 7,26 3,15 22,23 8,17 7,4 6", "14 8,8 12,11 1,1 22,25 4,0 5,6 14,22 19,27 14", "27 8,17 21,4 28,7 26,18 7,21 17,14 8,29 9,13 14", "18 29,9 22,28 29,15 13,15 5,28 10,12 9,15 6,0 14", "10 3,7 14,26 25,14 3,9 5,13 10,20 1,13 25,6 13", "11 13,1 12,7 13,15 18,23 16,23 6,13 5,26 21,20 20", "9 12,19 3,23 25,15 10,6 24,7 1,21 24,1 13,13 14", "11 1,15 27,27 20,0 23,26 16,27 26,5 26,9 3,18 8", "3 17,11 21,25 25,25 5,10 10,17 20,20 13,5 20,15 19", "23 20,4 5,26 18,27 24,24 10,27 13,20 17,12 0,13 14", "7 3,17 6,19 11,20 18,4 2,10 8,22 23,0 21,21 20", "24 9,16 20,4 19,28 10,25 13,6 13,2 2,28 24,6 5", "15 13,4 19,5 0,11 6,19 25,18 1,9 7,7 15,14 21,19 9", "29 15,10 29,16 5,28 6,24 1,20 6,5 4,21 12,17 5", "10 8,15 16,14 17,22 3,10 28,9 20,16 12,14 26,17 18", "3 18,10 29,7 24,21 13,3 15,17 15,29 7,8 25,16 17", "5 22,19 1,28 6,5 23,20 20,15 13,4 16,0 16,23 25", "5 25,29 10,16 4,19 7,29 17,6 3,6 9,27 19,21 3,7 28", "27 12,23 13,20 10,2 21,7 16,2 20,23 9,5 3,20 21", "14 21,3 4,8 26,17 8,19 3,4 27,5 29,18 21,12 4", "16 14,4 25,24 23,13 27,13 18,2 3,12 5,6 17,29 29", "15 9,2 26,28 1,26 0,19 0,1 4,11 19,15 15,2 14", "6 21,10 19,24 8,20 1,1 10,18 7,27 14,6 25,2 24,5 1", "6 0,6 8,23 1,24 5,7 5,3 11,2 22,13 10,2 19,29 23", "11 25,4 24,19 16,28 13,14 27,5 8,2 23,3 11,25 10", "25 25,4 19,2 9,3 25,1 12,3 1,29 2,16 18,13 20,24 4", "4 26,0 4,15 17,10 2,15 19,18 29,18 16,4 28,22 17", "2 20,18 1,1 9,14 0,9 22,5 8,7 1,10 16,9 17,14 14", "16 5,29 12,5 16,4 12,16 20,18 14,11 20,7 25,1 7", "25 26,9 8,13 2,2 8,22 1,9 22,3 12,28 17,28 17,18 1", "24 10,11 1,29 21,23 23,3 7,4 14,1 15,24 29,14 23", "26 2,28 22,1 8,13 26,27 8,19 18,9 15,22 21,1 4", "3 23,22 7,13 15,0 27,20 0,28 21,10 0,24 29,0 10", "19 21,13 8,29 23,24 13,23 14,18 10,11 1,28 2,12 13", "26 12,13 0,29 18,27 14,26 18,3 8,6 8,1 6,6 23", "13 15,15 4,22 8,29 24,17 23,26 13,2 3,3 19,5 10", "20 0,0 19,14 17,7 6,11 25,20 7,5 19,6 6,15 10", "15 14,10 1,2 2,29 15,4 11,10 2,10 9,4 21,17 22", "10 24,28 21,27 20,2 25,27 9,8 24,0 11,15 4,24 24", "10 16,5 18,22 28,15 16,22 13,13 8,14 7,2 25,28 9", "0 23,4 18,25 22,2 11,25 0,3 8,22 0,19 27,1 3,21 2", "15 27,23 22,26 9,2 17,24 18,14 19,16 12,16 7,12 4", "28 17,17 21,28 20,8 4,28 3,28 12,18 9,10 23,2 23", "14 26,29 1,26 9,17 3,17 18,17 10,18 7,9 20,17 28", "2 2,0 3,7 8,27 13,8 13,21 21,15 19,14 20,18 17", "18 5,1 23,2 15,24 20,10 20,18 17,3 19,27 1,0 25", "9 20,17 14,1 4,3 4,8 23,16 21,24 26,7 19,7 0,23 10", "5 28,29 3,19 11,26 17,17 1,16 23,2 17,20 9,2 25", "20 3,17 11,24 15,6 9,14 7,8 22,18 17,7 5,21 2,11 2" };
    assertEquals(30, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case17() {
    int rows = 10;
    int cols = 10;
    String[] cutouts = { "1 6,7 2,2 1,2 4,8 2,2 1,3 6,3 1,5 4,8 2,0 4,2 9", "1 7,6 2,9 8,2 9,4 1,2 1,2 1,4 9,1 0,3 3,7 5,2 9", "3 7,9 1,7 2,7 9,6 7,3 3,7 3,3 6,6 9,2 0,2 0,5 1", "4 4,4 1,7 0,3 3,3 5,2 7,5 8,8 8,1 1,3 2,1 2,2 0", "8 6,9 2,1 4,8 2,3 5,8 7,8 2,6 2,1 4,6 0,3 1,6 4", "8 5,9 6,1 7,7 1,1 1,3 7,5 2,2 9,3 8,1 1,0 6,2 6", "5 8,0 3,8 8,2 1,3 0,1 9,7 3,3 2,3 8,1 7,6 7,7 6", "7 6,3 8,2 7,8 3,6 1,9 7,2 3,9 0,2 5,2 7,1 8,1 7", "9 0,3 9,1 7,5 6,6 3,6 0,5 0,1 4,5 0,1 1,7 5,6 7", "7 2,4 7,4 2,2 8,7 9,3 1,1 8,3 3,4 6,2 5,7 6,0 7", "2 1,1 5,4 4,3 3,6 7,8 1,5 8,1 7,1 2,6 4,9 6,5 5", "2 5,7 1,1 2,5 6,5 3,7 9,6 5,6 8,0 7,8 7,1 3,3 0", "7 4,0 6,0 1,0 2,9 0,9 3,7 4,8 4,1 1,8 6,0 2,3 6", "8 5,3 7,7 5,9 1,9 7,1 8,1 4,6 5,2 9,6 3,7 7,0 3", "6 3,8 6,8 1,3 0,9 2,5 1,8 4,1 4,5 7,7 4,3 5,7 2", "2 0,3 5,9 1,1 1,8 2,6 4,4 3,4 3,5 3,1 2,7 2,0 4", "2 5,3 8,2 9,4 1,6 7,8 8,0 6,1 8,4 8,5 6,7 0,3 2", "0 8,2 0,8 0,3 0,8 1,0 8,7 3,3 8,2 1,0 8,2 4,9 1", "3 6,5 4,8 6,5 3,9 8,8 5,0 3,4 2,6 4,3 4,7 6,4 3", "8 7,0 1,1 4,3 0,4 0,4 4,0 2,4 6,5 1,4 2,4 0,4 1", "1 7,9 9,0 6,5 4,7 1,6 6,2 2,4 9,3 5,1 6,0 5,4 1", "8 3,7 4,6 2,1 2,6 7,0 1,1 0,0 7,7 7,4 8,4 4,0 2", "1 1,5 1,9 4,3 7,7 8,0 6,2 1,1 4,1 3,6 8,7 3,9 2", "7 3,8 3,4 2,5 8,8 8,4 3,1 5,6 5,9 0,9 8,3 9,2 2", "2 1,3 1,8 1,9 5,9 4,6 9,3 9,9 1,7 5,7 0,3 2,3 3", "4 5,5 4,8 0,6 3,1 9,7 2,0 0,0 9,0 6,1 0,8 8,5 4", "6 7,0 4,0 0,2 9,1 8,3 1,1 4,7 2,9 7,6 1,7 0,2 4", "3 5,7 3,2 4,4 3,8 2,0 8,8 5,6 5,8 1,6 9,9 2,4 2", "7 1,8 5,6 6,3 0,1 1,8 4,5 3,5 1,0 5,2 2,7 0,9 9", "3 8,4 2,7 9,9 1,9 2,3 1,4 4,6 5,5 7,6 6,5 1,7 0", "2 1,9 9,1 9,0 9,3 6,6 0,7 7,5 8,7 2,9 9,3 7,0 6", "4 5,6 1,6 7,6 2,9 8,5 0,4 5,9 9,5 2,8 0,3 7,2 4", "9 8,1 6,5 2,0 2,1 3,3 6,7 3,2 2,5 8,8 8,2 0,6 6", "7 2,5 3,4 4,5 6,7 5,1 3,6 9,6 4,9 1,4 0,7 4,5 6", "7 9,2 3,9 6,1 0,9 5,9 1,8 5,6 0,9 7,7 5,5 1,5 9", "7 7,6 9,2 9,0 1,6 2,2 9,1 7,3 4,4 0,0 5,0 5,6 9", "0 9,3 5,8 2,1 3,8 9,9 9,4 8,6 5,6 7,9 1,3 4,9 7", "9 2,4 8,1 9,9 4,5 0,9 4,4 2,6 2,2 0,0 7,3 3,2 6", "3 7,6 2,8 4,1 6,6 0,5 1,4 8,7 7,5 4,7 6,3 6,9 6", "5 1,2 1,8 2,4 4,0 2,9 9,3 8,4 6,0 2,9 1,7 4,8 4", "4 2,2 6,0 6,2 7,4 0,1 1,9 1,4 8,2 0,0 3,0 3,4 5", "9 4,8 5,8 9,8 2,9 1,4 5,7 3,9 9,1 3,9 7,2 7,6 3", "3 2,6 8,5 6,4 2,0 3,2 3,5 9,3 3,3 4,4 9,6 8,6 7", "4 9,3 3,9 4,1 7,5 7,7 7,7 4,3 8,7 4,4 1,1 4,1 7", "0 7,8 6,1 7,3 6,0 6,4 9,5 9,3 8,2 7,8 6,3 6,1 3", "4 1,2 4,7 7,1 3,2 3,6 7,8 3,9 8,2 9,5 8,0 8,2 0", "5 6,7 6,3 4,6 5,4 5,8 3,5 8,6 6,2 8,7 5,2 2,2 9", "5 6,3 9,8 7,6 9,2 7,1 7,3 6,0 7,0 5,8 9,1 1,9 4", "0 9,2 0,7 7,1 4,5 1,5 2,6 7,6 1,2 3,4 1,0 2,1 9", "3 1,3 3,3 0,2 4,5 8,9 2,4 4,0 6,4 4,9 0,4 8,0 3" };
    assertEquals(0, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case18() {
    int rows = 15;
    int cols = 25;
    String[] cutouts = { "0 14,14 19,11 23,4 22,13 4,9 11,9 14,4 19,12 19", "11 23,11 16,4 21,1 16,0 15,5 2,1 23,8 15,0 17,3 11", "2 24,2 9,9 0,13 13,2 16,1 1,11 12,9 1,3 23,12 0", "3 22,5 2,10 9,3 9,11 1,9 16,14 20,4 15,5 14,3 9", "13 19,2 12,14 21,5 8,10 17,8 20,8 24,8 3,11 24", "0 15,9 12,9 15,7 5,1 7,4 15,13 19,13 14,8 19,2 17", "3 16,12 24,9 9,9 13,12 14,3 4,2 8,2 21,10 16,1 24", "3 11,3 0,11 22,11 3,6 9,10 18,12 4,12 23,11 22", "11 23,4 18,13 21,8 0,14 9,9 23,9 21,1 9,5 3,8 12", "2 5,7 1,12 21,12 0,8 24,9 13,1 1,14 16,6 21,2 11", "14 6,13 14,7 15,14 13,6 12,14 12,4 12,1 4,8 2,3 24", "14 7,5 9,4 12,8 20,2 20,7 19,0 20,13 22,5 6,0 4", "0 0,2 2,8 18,7 10,2 12,9 0,1 10,6 6,13 15,9 24,2 7", "3 21,5 10,3 11,2 13,6 10,6 13,4 10,8 10,10 11", "10 17,10 3,12 18,11 11,4 14,12 16,5 20,1 11,8 16", "7 15,8 13,6 3,13 12,2 11,3 0,7 3,5 17,7 8,3 21", "5 10,14 13,5 12,12 0,7 12,13 16,3 7,7 14,13 21", "7 16,9 10,3 3,8 10,14 1,4 17,4 2,2 22,5 20,10 6", "5 24,9 6,3 4,0 0,0 10,4 5,1 5,13 16,2 21,3 24,1 13", "11 17,1 5,14 5,2 1,12 4,12 14,3 16,12 10,12 21", "3 7,3 1,2 14,12 15,9 0,7 1,6 12,10 1,13 18,7 18", "11 18,9 15,9 16,14 7,6 0,1 1,4 16,12 24,9 9,11 7", "6 23,7 4,5 20,11 8,7 17,4 8,13 21,1 18,13 4,6 7", "3 9,12 14,13 11,12 2,12 6,2 8,10 9,4 24,8 12,3 20", "13 3,5 13,12 1,2 10,11 20,11 2,13 1,12 18,4 18", "8 7,13 22,4 2,10 18,4 10,7 22,3 24,2 19,6 21,9 20", "6 6,6 11,2 21,2 3,10 10,0 21,7 7,12 3,1 16,14 10", "3 9,3 23,6 17,1 22,3 19,10 20,5 10,1 7,13 4,4 19", "6 12,2 9,6 13,10 12,3 12,14 13,3 13,2 15,8 18,5 14", "3 3,10 24,12 8,13 8,4 5,2 4,0 21,10 22,6 7,7 1,5 7", "12 18,5 24,7 14,5 19,12 3,14 2,3 13,9 23,10 9,3 7", "2 15,13 2,5 4,14 16,2 13,4 15,13 2,13 24,4 12", "14 2,0 1,12 3,11 13,2 23,14 8,6 3,5 12,3 0,8 6", "13 0,0 21,6 1,2 18,1 16,6 23,14 6,0 16,11 9,1 10", "0 24,2 13,12 4,3 14,5 17,8 13,4 0,5 18,2 7,2 2", "7 21,3 9,9 2,11 17,2 15,13 10,4 3,13 20,8 1,0 11", "9 4,6 18,0 23,3 12,12 24,2 19,12 13,3 10,12 17,4 2", "4 11,6 22,6 14,9 18,14 18,2 4,2 24,1 21,7 3,5 16", "2 6,6 9,5 11,8 15,12 8,6 22,13 1,5 6,2 4,7 3,6 11", "11 16,7 17,9 8,10 9,12 24,14 16,8 24,8 19,14 14", "11 6,1 6,4 2,11 14,10 19,10 6,9 9,2 19,5 10,14 19", "14 5,13 17,2 6,8 0,9 21,5 4,3 5,5 19,0 15,12 2", "10 22,2 23,5 17,10 13,6 14,1 19,2 0,14 8,13 18", "2 11,7 13,9 10,6 7,10 23,5 12,1 16,5 20,9 7,3 17", "0 2,5 2,5 21,2 9,2 24,10 10,10 7,11 2,1 20,12 17", "11 5,8 14,11 2,13 23,1 1,11 1,12 2,12 11,8 11,2 12", "7 0,7 4,5 9,7 10,4 5,7 17,7 18,12 4,14 8,2 8,9 5", "6 23,3 3,11 22,9 3,2 2,9 19,4 9,7 21,8 16,2 1", "2 14,0 21,11 17,2 15,3 15,3 22,1 12,3 13,3 0,6 0", "2 17,12 10,7 17,7 12,7 3,10 7,14 21,8 18,9 16,2 24" };
    assertEquals(14, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case19() {
    int rows = 15;
    int cols = 25;
    String[] cutouts = { "11 23,6 4,10 2,12 15,13 0,1 3,1 17,13 17,8 4,7 13", "3 11,12 6,9 19,0 16,7 8,5 21,1 6,12 3,13 9,11 15", "9 14,11 0,14 14,14 0,3 2,6 11,4 6,7 18,8 21,4 23", "10 15,7 21,4 7,13 0,13 16,0 5,9 14,2 23,1 4,13 17", "6 6,2 10,5 20,10 10,2 6,14 12,5 5,5 18,8 17,8 22", "9 2,10 16,9 19,3 1,8 5,3 5,4 19,14 15,7 21,9 3", "10 17,12 17,2 6,0 19,13 15,9 24,14 17,5 2,2 23", "5 9,2 19,14 16,2 5,14 7,1 8,13 12,11 5,6 19,9 12", "13 22,8 22,0 14,13 15,4 1,7 3,7 19,3 13,2 15,9 3", "3 4,14 6,5 3,6 19,5 17,8 6,9 23,14 1,1 7,3 12,5 8", "5 23,7 13,6 20,13 16,8 8,6 24,12 20,9 11,4 16,13 6", "14 21,7 6,13 13,12 8,8 7,5 18,0 12,0 12,6 23,5 16", "8 18,9 8,5 7,7 0,0 13,11 15,7 19,11 12,2 15,6 19", "7 14,11 14,10 11,1 9,2 20,9 12,1 2,4 1,12 0,9 5", "1 18,3 2,14 17,7 10,12 4,1 19,4 13,0 8,13 11,0 4", "10 14,1 11,11 21,14 2,4 17,2 2,2 6,7 5,5 22,9 18", "13 13,14 3,3 20,13 16,0 4,4 7,7 19,2 23,7 7,9 2", "9 18,6 2,6 14,7 21,13 12,1 20,11 17,5 24,12 7,7 21", "1 18,9 22,4 18,2 10,11 22,11 0,10 5,0 22,10 4,4 21", "10 12,2 15,7 5,7 2,13 3,5 17,0 24,11 24,9 21,13 18", "8 5,11 0,13 4,13 22,7 6,10 23,1 22,12 9,3 11,5 0", "12 13,8 16,3 14,14 21,11 0,14 14,14 16,10 6,13 3", "2 4,14 11,14 18,10 15,2 13,12 18,5 7,3 22,2 24", "12 7,4 22,11 11,9 21,14 7,0 6,3 3,14 8,11 17,10 8", "5 3,8 2,4 1,5 9,2 21,10 7,0 13,13 0,11 1,9 10,3 21", "13 4,1 15,7 10,10 0,6 3,10 19,11 20,4 21,14 13,0 4", "0 22,8 5,11 15,2 21,2 8,0 24,0 16,3 12,9 16,13 14", "5 7,9 3,5 4,11 4,2 16,10 6,11 21,14 15,0 17,5 20", "6 0,7 11,6 5,0 15,6 15,8 19,4 7,14 13,14 7,0 24", "10 4,0 1,8 24,10 2,0 7,7 4,14 12,11 3,13 22,8 12", "10 22,4 16,3 4,0 1,3 21,0 5,13 16,11 15,4 14,13 4", "7 7,4 17,13 9,1 3,8 7,6 4,8 21,13 11,6 1,11 13", "3 20,12 12,2 6,12 15,8 12,1 10,9 22,10 20,10 7", "7 24,0 18,14 8,9 10,10 4,7 4,0 8,4 13,14 15,6 11", "12 2,8 10,5 10,13 8,13 10,0 1,4 19,6 1,14 9,14 14", "12 16,7 11,0 11,5 7,9 19,4 4,8 23,14 11,5 6,4 12", "1 20,8 3,3 8,11 24,6 7,8 21,4 14,13 2,12 19,9 24", "4 13,14 16,1 11,4 1,6 22,6 0,10 14,5 19,12 13,6 11", "14 4,13 21,13 24,9 20,1 14,12 18,3 8,6 24,14 16", "6 3,0 4,2 8,3 6,5 1,11 12,4 8,14 22,10 7,2 6,13 7", "3 1,6 21,6 23,10 15,0 20,13 10,9 2,14 4,9 4,1 15", "14 21,5 14,4 15,8 15,2 22,5 13,4 23,13 6,14 13", "1 12,14 3,4 18,1 17,6 8,4 20,14 11,4 4,5 23,10 0", "9 18,8 13,5 21,9 20,14 4,8 10,9 8,11 11,9 23,3 7", "11 16,12 15,10 2,3 11,13 22,7 3,11 1,10 3,9 8", "8 15,13 15,1 17,7 16,4 20,14 17,0 10,1 11,7 18", "1 3,5 7,3 20,12 23,12 12,5 24,3 15,3 23,10 24,2 9", "1 10,2 22,0 6,7 19,14 16,9 12,4 23,7 10,9 13,0 24", "11 0,5 5,0 9,5 15,5 11,8 14,13 6,12 17,2 21,7 2", "6 19,1 24,1 12,1 13,1 4,6 20,0 21,9 24,6 21,5 12" };
    assertEquals(14, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case20() {
    int rows = 15;
    int cols = 25;
    String[] cutouts = { "9 4,14 8,13 0,3 8,11 24,4 7,10 1,3 23,13 0,8 6", "11 19,13 16,1 22,9 19,4 1,13 1,11 11,1 9,2 6,10 7", "4 0,11 12,0 20,0 9,5 23,2 3,5 11,7 8,4 14,14 3", "0 24,6 8,3 5,2 19,5 15,4 20,13 17,3 11,8 10,10 19", "2 12,8 0,12 8,5 17,13 0,6 6,0 17,14 19,14 4,14 8", "6 2,1 22,7 11,7 3,11 19,6 8,9 3,2 3,13 8,3 24,4 18", "1 13,9 7,13 13,6 0,1 18,1 22,10 22,1 14,1 4,9 24", "0 9,14 20,14 16,7 5,4 24,2 14,4 19,9 1,11 16,12 9", "2 1,1 16,8 21,3 14,12 10,14 23,12 24,3 22,13 16", "12 4,8 13,10 14,14 13,13 23,0 17,1 20,0 17,2 19", "3 23,9 1,8 18,13 7,14 24,10 2,1 10,11 24,9 20,2 7", "5 8,0 0,0 4,14 15,5 7,2 6,2 10,6 8,7 1,11 16,5 19", "9 19,11 2,5 13,8 8,1 3,7 12,12 21,6 8,13 0,2 4,3 2", "12 22,0 14,14 13,7 12,10 21,2 5,13 19,10 1,2 13", "14 18,9 6,2 21,12 22,14 7,12 14,9 19,9 12,6 8,0 19", "1 6,12 12,11 22,10 23,14 2,4 18,3 6,4 23,7 17,0 21", "5 4,14 3,3 10,3 3,7 0,13 24,3 13,6 16,8 0,13 0", "0 8,9 4,7 24,6 10,9 12,7 6,2 5,0 22,6 6,11 24,5 10", "2 0,5 3,1 7,5 23,8 8,1 14,2 7,2 13,5 23,1 20,0 7", "6 8,10 16,2 10,7 3,6 19,1 3,4 2,11 20,14 19,4 20", "5 3,7 1,2 17,6 23,3 18,6 10,13 21,6 24,0 13,12 7", "6 24,4 13,3 7,7 2,3 10,3 9,1 2,13 14,0 4,10 21", "12 15,12 3,11 10,2 3,2 20,1 24,10 11,10 2,2 2", "1 10,6 4,10 13,2 8,12 24,5 19,0 18,8 22,2 2,9 2", "14 21,3 19,7 14,3 10,4 20,10 19,13 19,8 12,14 21", "4 10,3 19,2 16,14 16,9 4,4 20,4 19,9 21,9 11,7 4", "7 20,5 9,1 11,7 12,6 8,8 19,14 5,12 11,2 22,7 7", "5 1,8 13,2 23,2 17,14 5,14 10,6 20,13 1,14 0,8 21", "1 0,9 3,10 19,10 16,14 22,8 9,5 1,8 3,13 13,9 0", "6 8,4 17,14 12,3 11,6 9,3 1,9 21,10 22,1 23,7 22", "3 11,5 0,10 1,3 22,5 12,2 5,5 8,2 17,0 12,13 4", "3 24,1 10,9 7,4 20,2 5,0 9,2 3,4 18,12 15,12 8", "0 3,4 23,0 1,3 20,14 6,0 23,11 5,0 20,14 1,8 15", "9 3,14 3,11 9,1 19,14 14,6 0,13 21,5 7,1 10,4 11", "13 3,1 8,3 18,2 19,14 17,3 24,5 21,9 15,3 21,14 7", "6 20,1 4,3 1,13 7,4 17,0 16,2 3,9 7,6 16,14 9,8 22", "8 3,14 21,5 21,14 20,0 3,3 18,0 2,1 4,5 19,4 15", "5 4,10 9,11 8,5 6,0 10,14 16,14 15,7 17,3 9,4 1", "2 17,4 5,0 1,2 13,4 7,0 22,5 18,12 12,14 20,5 4", "3 6,4 1,6 9,7 9,14 8,13 23,1 6,12 19,8 17,5 24", "11 17,13 12,2 7,14 21,9 7,2 6,1 23,4 15,14 2,12 19", "10 22,12 14,9 0,7 8,3 19,3 8,6 4,7 24,13 8,1 20", "13 22,14 16,10 9,10 15,4 15,13 6,1 13,6 16,13 5", "3 15,0 4,9 21,12 7,8 15,10 4,2 16,10 6,2 19,7 17", "13 3,7 23,6 6,4 20,11 18,0 6,11 21,14 19,13 22,5 2", "9 8,11 22,11 14,3 11,14 13,8 16,8 17,9 6,7 10,9 9", "5 11,11 21,10 0,4 24,6 12,11 15,9 18,10 18,3 8", "13 19,11 19,4 12,5 6,4 13,8 13,5 15,12 10,14 11", "6 22,0 8,7 19,2 14,12 3,14 8,0 5,10 0,13 0,10 20", "8 24,3 18,9 19,6 12,6 13,13 11,13 9,9 4,10 5,4 2" };
    assertEquals(14, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case21() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "13 7,13 5,14 13,5 0,9 3,4 7,14 9,9 3,14 14,10 16", "0 15,7 1,4 9,7 0,10 15,4 8,7 7,2 0,6 2,5 10,11 12", "5 5,13 1,11 14,13 13,5 4,5 5,0 12,3 4,2 3,2 7,3 12", "6 12,8 7,9 2,9 12,1 3,5 0,8 7,9 16,6 8,4 8,8 13", "4 6,3 7,14 3,1 4,6 10,11 4,14 8,7 1,9 0,13 15,5 1", "2 4,7 0,3 7,9 1,8 13,7 14,3 13,4 7,6 2,8 3,11 7", "2 9,8 5,8 8,1 9,2 7,12 12,12 9,4 13,9 7,1 6,13 4", "0 3,1 4,5 9,13 0,0 5,1 12,12 13,13 8,8 6,4 5,13 13", "11 14,13 1,4 8,3 5,14 8,1 9,0 12,7 0,6 12,2 7,13 0", "9 2,3 8,6 9,14 3,12 8,9 12,6 2,1 11,10 16,10 7,8 9", "8 0,2 16,6 13,9 10,6 5,1 8,1 1,2 1,10 12,13 11", "9 6,1 14,12 13,11 4,8 13,1 12,13 6,2 12,13 7,9 10", "0 2,5 14,9 10,2 14,8 6,11 7,8 5,12 12,8 12,12 8", "12 3,0 5,14 4,12 9,6 13,10 5,3 1,14 1,11 9,12 4", "3 3,5 9,6 13,5 11,5 0,7 1,5 9,5 14,13 4,3 3,4 4", "3 9,8 4,9 8,9 9,8 14,3 15,7 11,12 2,13 2,13 5,4 0", "10 10,0 1,12 11,9 4,3 6,14 5,1 16,5 12,4 12,11 4", "8 4,12 2,11 4,2 10,7 7,13 10,13 8,4 16,11 7,10 5", "12 6,2 10,3 12,8 6,0 4,1 14,12 7,3 16,9 9,2 9,5 4", "1 9,7 16,13 1,12 13,1 8,13 5,8 0,1 7,6 10,5 15", "8 3,10 16,13 6,3 3,2 8,0 6,12 10,9 5,7 4,13 8", "12 0,13 1,2 4,10 1,5 11,10 12,3 5,5 9,14 15,10 5", "2 5,7 16,4 14,7 2,5 1,1 12,12 15,2 1,1 14,12 6", "8 6,6 2,14 3,1 13,1 7,1 15,6 12,11 11,5 6,11 3,6 3", "2 3,5 7,14 10,6 8,3 5,7 6,0 14,5 8,3 16,3 10,4 7", "0 10,7 12,0 4,8 0,5 1,12 8,14 11,2 7,3 1,5 14,8 7", "3 13,10 9,0 8,7 5,5 7,10 2,14 13,1 4,13 3,14 12", "12 8,8 0,9 9,2 7,6 13,13 0,5 10,12 13,8 11,4 2", "9 10,5 2,3 12,12 13,10 15,8 3,8 11,7 8,14 14,12 3", "10 6,7 3,10 4,1 15,12 7,0 7,6 10,8 11,2 9,9 2,4 15", "9 9,4 10,1 0,9 4,9 12,6 5,7 5,1 13,9 3,3 3,9 10", "1 8,3 8,11 5,2 12,3 5,8 10,3 8,5 15,13 16,4 9,4 3", "11 10,6 8,13 9,13 2,13 5,0 1,7 16,6 14,8 5,6 14", "11 8,3 4,10 0,5 13,1 14,12 3,3 9,14 5,6 13,0 3", "8 12,6 10,6 15,4 11,10 13,10 13,10 1,1 7,10 0,7 1", "6 15,1 10,4 16,12 11,14 16,9 6,7 12,4 6,0 13,0 9", "12 0,1 5,7 13,5 15,2 14,5 3,9 15,2 6,10 3,6 2,3 9", "6 11,8 11,14 9,10 10,9 15,1 8,5 15,4 15,3 2,8 16", "6 3,0 12,8 1,12 4,1 8,1 1,10 2,6 14,10 0,4 2,8 15", "11 7,6 6,5 4,0 0,7 11,8 0,1 5,2 1,13 11,4 1,8 9", "3 9,11 4,9 3,6 9,2 11,5 14,1 16,9 10,12 6,7 6,6 6", "12 2,0 16,8 7,9 13,11 3,13 11,12 8,10 8,9 11,1 10", "5 8,13 7,14 6,9 12,2 1,8 14,11 14,13 9,10 0,4 2", "12 5,14 11,5 16,7 12,8 3,8 11,7 2,5 7,3 11,8 10", "7 0,13 13,13 3,14 11,5 12,0 11,12 7,3 5,9 8,9 0", "5 11,11 16,14 15,7 7,11 10,0 5,12 14,0 13,11 16", "13 12,13 1,4 11,12 3,2 9,8 11,2 4,14 4,1 0,7 5", "1 16,11 11,13 15,7 3,11 15,7 8,8 10,2 8,5 2,11 12", "2 6,8 2,7 3,11 15,13 5,3 10,4 7,3 7,13 4,9 16,11 8", "1 16,1 5,7 9,9 13,1 4,14 9,7 11,6 11,8 2,8 8,2 12" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case22() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "7 12,6 12,6 1,5 13,7 3,10 12,5 11,4 0,3 4,3 8,6 7", "9 2,6 0,9 2,10 15,9 1,5 10,8 5,8 13,1 2,8 10,7 5", "2 4,13 4,0 1,13 2,12 16,2 9,3 16,8 4,3 1,13 15", "8 3,6 0,4 13,11 0,13 4,13 5,11 3,12 15,13 10,14 10", "2 12,9 10,13 12,9 0,2 6,10 14,10 9,9 16,14 6,2 2", "0 0,14 3,0 10,5 13,9 5,6 10,7 5,12 11,2 15,6 10", "11 0,1 10,8 6,1 0,12 8,10 5,7 0,4 8,0 4,13 1,2 12", "5 0,12 9,13 0,4 9,7 10,14 9,3 2,14 5,9 14,9 1,0 10", "6 2,5 3,0 8,3 7,3 16,14 3,0 1,4 8,4 6,3 3,2 15,3 9", "9 2,13 9,14 10,14 8,13 6,14 0,13 5,8 5,11 3,14 4", "6 1,5 11,10 16,12 13,0 11,14 2,1 14,13 2,6 15,7 0", "3 15,0 16,10 13,4 0,5 13,8 3,9 5,4 3,8 15,10 3,3 7", "11 5,8 9,7 5,4 8,8 1,1 6,6 7,5 14,14 4,11 12,3 9", "10 14,2 3,0 10,3 3,6 15,7 7,2 16,0 1,10 0,8 11", "7 10,0 4,7 14,4 14,3 12,0 1,5 14,6 13,0 3,12 14", "6 3,2 10,7 5,4 1,7 10,10 0,8 6,3 4,6 13,13 12,1 6", "6 14,4 11,9 4,1 9,13 4,13 1,8 8,11 0,14 3,2 12", "12 5,2 0,9 14,6 2,13 6,6 14,5 16,5 4,1 11,1 2,13 7", "10 15,14 3,1 2,12 0,11 0,1 8,1 9,6 1,8 9,9 3,5 10", "5 1,4 3,9 5,11 11,4 12,5 10,5 16,9 0,12 4,0 13", "4 10,0 7,10 8,9 16,13 0,7 6,11 9,3 3,7 2,8 2,7 2", "4 4,0 12,2 7,7 9,1 13,2 0,11 13,6 11,6 12,11 11", "13 8,0 14,11 15,8 14,6 4,11 1,10 9,14 2,14 12,4 0", "11 5,14 15,2 0,8 11,7 8,2 3,8 9,7 5,1 15,9 9,4 14", "14 12,4 1,5 12,3 3,12 4,10 5,9 10,10 14,8 3,3 12", "4 0,2 5,6 10,11 7,14 4,14 3,12 2,11 10,13 8,12 14", "3 0,5 14,14 10,5 12,13 16,11 3,8 4,10 12,0 13,10 4", "6 13,4 13,4 1,10 8,6 13,6 16,13 7,4 14,11 8,2 15", "10 6,9 2,2 5,4 4,2 11,13 15,2 4,2 1,3 11,11 14", "7 5,14 13,9 7,4 8,1 7,2 14,14 3,6 9,9 14,2 10", "14 14,2 12,0 8,2 0,8 0,0 9,9 15,8 0,3 10,0 15,0 14", "6 2,0 5,12 0,10 1,10 3,3 15,11 16,3 3,8 0,10 13", "10 9,7 15,0 8,14 1,3 0,4 3,2 11,4 3,10 2,9 0,12 11", "5 1,11 15,2 4,0 7,1 10,8 9,13 15,1 2,6 2,12 11,5 7", "3 2,13 11,14 8,7 11,13 12,10 3,8 12,12 2,5 7,5 10", "7 2,7 6,4 16,6 8,13 14,1 15,5 16,11 0,6 15,1 3,7 2", "5 3,1 14,13 0,7 15,13 13,11 7,7 2,2 15,6 3,4 13", "1 13,3 10,13 11,6 6,11 6,8 0,5 5,10 16,9 12,3 5", "3 1,5 2,5 4,3 12,4 2,7 16,9 10,4 7,7 13,2 14,13 2", "12 14,7 6,13 6,12 0,8 15,8 2,12 9,2 13,12 6,7 0", "14 10,10 11,12 9,13 0,9 4,8 9,8 8,2 4,1 15,8 10", "3 0,11 12,11 1,1 16,5 8,8 9,14 15,2 1,6 10,14 16", "8 15,9 3,2 8,1 6,2 5,10 8,2 13,9 15,3 0,7 13,3 2", "10 1,1 12,2 14,12 12,9 7,3 5,8 12,0 5,14 14,7 11", "2 12,13 0,4 9,6 13,9 9,9 4,6 6,0 1,8 15,5 9,0 3", "4 8,13 3,7 12,1 16,3 7,5 8,13 9,10 13,4 1,13 16", "3 15,13 6,12 7,14 11,2 15,2 1,10 5,2 2,9 6,14 11", "14 12,2 7,11 6,12 3,10 7,13 2,3 7,8 2,3 8,14 10", "5 14,12 10,11 16,7 13,3 10,12 2,10 10,2 1,8 1,8 12", "14 12,1 9,0 14,3 10,9 4,14 1,13 3,1 6,0 5,10 7,0 4" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case23() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "8 9,10 13,10 3,8 1,13 5,0 12,6 7,0 7,0 11,8 7", "9 0,5 0,2 0,13 14,13 0,1 7,11 8,10 0,3 8,14 11", "11 4,13 7,5 15,2 12,1 11,1 1,6 8,13 1,13 0,8 1,1 0", "9 13,12 4,12 8,1 1,14 16,11 8,1 12,11 1,1 14,12 10", "0 4,9 9,10 8,4 12,3 2,10 16,6 12,1 0,2 4,12 3,2 15", "5 1,10 5,2 8,0 3,2 14,5 2,12 12,8 7,10 11,7 11,8 9", "4 11,5 3,13 11,7 9,3 16,7 13,5 8,0 0,9 12,3 9", "3 5,7 0,8 0,7 14,3 1,12 13,12 0,13 16,6 14,2 16", "1 9,9 10,7 6,2 1,8 7,13 3,4 0,4 0,5 14,9 16,1 7", "12 12,11 8,7 5,0 8,9 9,11 14,10 0,2 6,9 2,5 12,7 0", "2 11,5 16,13 11,5 14,11 7,8 12,4 7,11 15,14 4,6 7", "10 9,1 0,5 1,11 11,8 9,13 5,3 0,13 14,12 10,14 6", "10 15,9 0,3 10,4 16,0 8,12 9,11 0,6 15,11 6,6 14", "4 3,11 3,10 3,14 15,1 9,0 3,4 5,5 13,8 14,6 3,8 11", "1 5,7 10,8 8,4 14,9 2,2 14,5 9,2 2,12 10,9 14", "4 6,9 13,14 16,11 11,4 5,13 8,1 2,6 7,6 8,8 5,0 6", "3 11,2 15,10 14,1 4,12 15,6 2,10 15,1 7,8 12,10 2", "2 15,13 3,0 2,4 3,11 4,4 16,2 16,8 4,6 2,4 4,2 15", "7 16,11 12,11 4,1 3,5 5,3 3,12 1,10 11,4 8,11 8", "1 3,7 5,3 0,7 12,7 9,2 2,12 4,4 11,4 5,2 3,7 6,0 0", "8 3,14 5,3 2,5 0,11 1,5 1,1 3,11 5,12 7,0 12,11 0", "8 15,0 13,7 8,11 14,14 1,7 3,12 2,7 9,7 11,10 12", "4 16,7 5,12 3,12 11,4 2,0 1,2 15,9 9,5 16,2 10,8 8", "11 14,7 2,1 13,4 3,6 6,9 1,10 7,3 5,10 6,1 12,6 15", "2 11,3 5,11 12,1 16,6 0,0 5,12 15,13 4,7 1,14 3", "0 7,7 14,13 2,9 3,5 2,9 8,9 13,6 16,4 4,14 10,1 5", "5 6,3 6,14 6,7 4,5 7,12 16,13 9,13 3,5 10,8 13,7 3", "8 12,0 10,10 11,1 1,1 11,0 14,13 3,13 6,2 6,8 2", "13 8,3 8,6 9,8 2,12 11,2 1,14 8,13 8,11 10,8 6", "1 3,0 10,13 13,6 9,10 16,6 16,4 1,8 5,12 9,13 12", "13 14,2 5,14 10,5 15,13 2,8 13,3 9,4 16,10 1,1 15", "8 10,14 2,8 15,11 0,10 3,8 10,2 10,13 11,14 4,6 5", "3 0,9 3,10 9,3 7,1 1,0 9,13 15,1 11,0 0,0 8,0 10", "10 2,4 10,9 4,9 0,14 9,6 7,4 8,2 16,7 14,8 5,5 0", "8 13,2 14,3 15,14 1,13 4,8 0,11 12,1 8,12 7,11 2", "13 10,4 9,0 6,0 4,12 1,1 6,12 14,1 16,12 0,5 11", "0 15,2 16,7 3,4 10,6 4,14 3,10 9,11 5,3 11,4 11", "6 8,4 12,7 0,11 1,0 10,7 7,14 10,14 7,13 1,12 0", "11 10,13 3,9 1,8 4,2 7,7 9,3 15,10 7,4 2,2 8,4 0", "12 11,7 9,5 14,3 16,0 1,6 8,4 11,14 7,13 13,14 6", "9 6,11 12,14 4,8 15,7 3,10 12,13 11,9 10,11 10", "3 15,3 12,8 13,13 7,0 2,5 0,9 11,7 4,2 11,0 4,13 2", "6 11,1 1,8 3,9 8,6 7,12 15,7 9,11 10,12 12,7 14", "3 7,13 13,13 16,8 11,8 3,1 1,14 4,13 8,6 14,13 2", "0 8,13 2,13 7,12 7,12 3,3 4,11 4,6 3,11 16,6 2,9 0", "10 6,12 5,5 8,0 1,8 5,3 6,14 14,10 10,0 0,0 16,4 1", "6 10,14 5,4 5,13 4,1 10,0 10,14 9,9 12,0 15,7 9", "13 10,11 8,9 12,9 2,14 13,6 16,12 4,5 10,0 4,7 1", "5 1,13 10,9 4,9 10,11 12,5 6,6 13,1 4,8 1,12 0", "13 5,9 8,14 8,0 1,9 11,9 16,3 8,9 7,2 11,10 4,2 15" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case24() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "7 11,1 3,3 7,5 16,2 3,6 14,13 12,7 6,9 1,13 12", "5 8,3 11,14 9,12 7,7 0,9 15,13 6,1 2,14 3,8 3,8 14", "9 9,10 2,8 13,14 16,3 5,0 10,2 12,8 6,8 6,10 9", "3 2,13 7,3 12,14 2,11 7,14 1,3 0,10 5,9 0,7 2,8 0", "8 7,11 3,2 1,5 4,1 5,9 16,3 12,8 5,1 7,5 3,13 11", "5 2,0 14,1 12,10 0,6 13,8 1,14 16,12 14,9 6,6 6", "1 11,5 2,12 14,12 4,2 7,12 1,3 5,12 0,6 13,11 1", "14 7,6 4,10 13,4 5,9 10,1 3,4 4,7 5,9 16,1 13,12 5", "8 7,3 3,11 7,0 2,7 9,2 7,2 4,14 16,11 8,10 13,2 14", "8 10,6 3,6 9,12 8,5 11,8 2,11 16,13 14,4 4,4 11", "9 13,5 12,13 7,5 1,10 15,13 14,8 7,4 14,14 16,12 9", "12 5,7 12,7 7,8 3,3 11,5 1,13 14,13 4,10 14,10 11", "5 9,1 5,5 16,0 12,6 0,3 0,7 7,6 5,10 2,12 7,2 0", "2 3,2 3,7 6,1 11,1 1,3 5,7 2,7 2,10 1,8 3,11 10", "8 12,6 12,1 8,14 10,11 4,13 4,12 5,9 3,2 1,1 14", "11 2,13 8,7 4,8 13,14 9,1 6,11 9,10 14,7 1,4 15", "4 7,9 6,9 15,2 3,4 4,9 6,12 7,4 10,8 5,3 11,12 10", "8 5,7 6,9 14,12 1,12 14,8 6,10 12,9 11,8 4,2 6,0 9", "2 12,13 13,7 14,14 8,8 16,13 12,4 15,3 15,2 15,6 2", "0 16,8 7,9 4,2 6,2 5,1 6,10 8,12 5,9 1,9 15,10 8", "14 11,11 9,12 1,5 10,8 4,1 10,14 8,3 1,2 0,8 6", "13 11,9 0,8 12,4 16,5 4,2 9,3 7,7 5,12 10,0 5,11 3", "14 13,7 10,11 9,2 15,4 9,14 2,5 13,0 12,14 9,0 14", "1 1,5 12,9 12,8 11,9 11,5 8,14 10,12 11,6 13,12 6", "6 12,3 1,5 8,1 9,5 7,5 0,14 8,10 11,2 0,14 9,6 0", "2 5,3 13,8 9,3 10,5 1,7 1,12 2,4 5,7 4,0 8,3 16", "14 7,12 5,6 7,3 0,5 9,6 3,12 12,2 8,14 16,11 5,8 7", "5 9,8 2,4 6,0 4,0 7,5 2,13 10,1 0,2 15,14 7,7 8", "4 10,8 7,10 16,3 14,10 7,0 14,8 11,12 4,7 1,12 6", "3 3,3 16,3 11,14 5,5 4,1 6,4 6,10 16,0 9,2 13,9 14", "6 8,10 10,13 3,12 1,9 9,3 13,11 7,10 8,6 1,8 10", "10 3,13 10,9 13,6 11,6 6,14 3,10 15,7 10,9 4,14 8", "9 13,8 10,6 15,1 9,12 11,1 13,11 8,6 0,11 9,0 3", "8 0,3 9,0 13,3 0,13 12,4 4,2 3,14 6,11 6,12 14", "9 8,8 11,10 7,11 14,6 5,5 0,3 2,0 3,1 1,4 5,7 9", "10 1,3 12,13 8,11 5,1 2,1 15,4 11,9 8,4 0,0 11", "2 10,0 6,3 7,0 5,10 13,7 1,1 4,11 15,7 8,6 4,14 12", "3 11,10 2,12 2,14 3,12 9,14 1,9 4,7 13,8 5,4 16", "12 5,0 4,12 11,13 13,7 7,13 0,13 7,11 4,0 1,8 14", "10 4,9 7,9 8,13 3,2 1,10 6,11 9,11 15,11 9,7 15", "3 6,7 8,4 15,8 5,13 16,0 8,7 3,12 5,2 8,9 5,5 5", "13 9,13 1,10 8,10 12,14 5,5 9,1 11,7 15,1 15,5 4", "5 11,6 11,3 7,0 1,1 6,10 1,1 6,9 10,9 7,7 0,8 5", "12 12,12 11,9 13,3 11,1 12,0 9,14 14,0 4,1 1,2 16", "1 16,10 14,7 1,13 12,7 16,11 0,3 13,9 9,2 11,9 6", "14 1,12 4,13 10,12 0,8 16,11 15,2 15,4 16,4 1,7 10", "9 3,10 9,10 14,2 5,5 3,6 4,13 0,4 8,11 16,12 12", "1 12,0 0,4 7,5 6,5 3,2 4,6 10,6 10,3 2,0 12,12 13", "10 7,5 3,1 6,4 15,2 2,4 16,11 11,14 11,12 8,1 8", "9 0,0 8,12 4,1 2,0 0,14 0,12 15,4 14,7 10,14 11" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case25() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "3 6,9 0,3 12,11 4,1 7,14 3,13 5,5 6,4 5,1 4,4 14", "14 1,1 2,13 8,13 8,8 5,3 14,12 15,1 1,0 2,10 14", "7 0,0 13,1 9,5 6,9 12,0 11,12 6,10 8,2 14,7 13", "3 9,2 16,6 3,13 1,11 13,12 9,2 9,7 10,13 9,1 8", "1 10,8 14,10 14,1 13,9 0,2 15,12 7,11 12,11 1,10 3", "2 15,10 11,7 14,10 0,7 9,1 0,8 11,6 1,13 11,9 16", "11 13,13 4,14 9,0 0,11 1,1 1,7 11,2 7,10 5,0 14", "14 16,2 13,7 10,4 6,6 15,4 4,8 14,4 12,7 1,1 1", "9 0,5 2,6 13,1 7,12 12,11 7,2 7,9 9,10 3,7 15,14 0", "3 11,4 10,9 8,6 3,11 0,3 15,11 16,2 4,2 13,7 7", "1 11,2 5,0 16,1 15,2 4,0 9,1 7,5 5,3 6,4 7,2 10", "14 15,7 4,10 4,4 2,3 5,0 7,13 11,2 11,10 13,14 11", "5 9,8 5,12 1,12 13,2 11,11 13,2 7,14 10,11 2,13 0", "14 6,5 7,6 12,9 2,0 7,0 11,4 8,8 0,13 16,3 4,8 1", "9 4,14 0,11 11,14 10,13 8,10 3,9 9,1 1,4 1,0 8", "5 11,9 14,9 1,0 7,12 12,13 16,10 0,1 15,1 1,1 1", "4 11,4 6,4 12,7 15,8 2,6 11,4 3,4 12,12 8,14 5,7 1", "8 2,9 5,14 10,2 2,8 12,13 1,9 16,8 5,12 6,13 1", "4 0,3 15,1 1,8 7,11 11,8 7,12 3,1 16,2 2,2 3,2 9", "2 2,4 6,4 1,12 3,5 12,1 9,6 9,11 10,6 4,6 12,10 8", "12 1,8 2,3 10,4 1,1 5,11 7,4 10,2 12,3 4,10 16", "11 8,0 4,4 4,4 3,5 1,0 0,5 8,11 15,9 11,1 10,7 3", "14 12,13 12,3 15,6 10,10 15,4 11,12 12,10 4,3 14", "5 16,6 14,8 9,7 13,2 5,3 7,0 10,0 3,8 9,6 2,1 11", "4 11,8 9,4 1,3 8,9 2,14 6,5 4,2 14,14 15,1 1,11 16", "10 8,4 4,3 11,4 15,6 6,10 13,8 6,10 16,4 12,6 4", "1 0,7 8,11 6,9 1,4 14,2 4,1 1,0 9,13 12,8 16,0 2", "1 16,14 3,13 10,8 9,1 13,3 3,7 10,7 9,10 10,5 16", "2 6,6 0,12 2,12 15,4 12,7 1,12 11,11 6,5 7,14 16", "13 14,10 3,2 4,13 6,12 3,9 8,11 11,3 9,0 1,10 14", "11 14,0 9,5 10,8 3,9 13,2 4,0 2,13 7,10 16,8 16", "7 16,14 10,12 16,3 10,11 16,0 5,8 4,13 10,7 16", "1 3,0 6,11 14,1 8,7 16,13 6,7 2,5 8,14 4,4 11,13 0", "6 5,13 7,13 2,7 4,2 15,7 7,6 7,14 7,11 11,3 0", "6 4,6 12,2 0,0 15,13 3,9 12,14 3,2 11,8 6,10 1,5 0", "6 6,12 7,8 6,6 11,4 10,3 5,14 0,3 8,11 2,3 15,13 9", "13 13,7 16,11 8,12 14,11 13,5 9,0 15,12 7,7 7", "13 15,8 12,4 13,8 12,7 11,11 12,12 4,9 12,6 5,10 5", "12 6,7 13,3 7,9 14,10 6,9 0,4 4,8 0,7 1,6 1,1 1", "7 14,13 5,0 4,10 5,13 2,8 4,3 2,2 10,1 5,2 15,6 13", "6 7,10 10,1 9,14 9,14 0,13 0,7 16,6 16,6 11,2 13", "13 7,14 14,7 1,3 8,14 6,3 16,14 2,10 14,7 12,1 1", "13 11,12 5,7 9,13 3,0 9,0 16,14 1,14 7,8 11,2 11", "4 6,6 3,14 1,1 3,10 8,3 16,2 15,13 6,2 5,11 0,1 7", "9 15,8 10,6 0,7 1,5 1,10 6,11 12,12 12,13 10,13 2", "7 6,1 6,10 10,8 5,1 0,1 0,9 16,3 4,0 6,6 3,3 16", "10 10,10 15,6 7,2 13,6 5,0 8,11 7,4 9,12 6,4 2", "12 4,6 16,0 12,10 0,8 7,12 9,0 15,3 8,0 8,13 8,2 5", "12 10,11 0,11 9,4 16,2 5,1 6,10 6,4 8,5 13,0 7", "12 6,2 13,10 0,4 16,1 12,0 0,2 10,14 4,2 2,11 8" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case26() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "12 3,9 16,8 16,10 6,12 1,0 5,8 3,8 7,14 7,1 9,7 11", "11 9,14 6,0 9,12 10,11 15,1 9,14 2,12 3,10 0,9 3", "14 1,6 8,12 7,3 9,0 10,9 13,8 16,5 10,7 16,5 5,0 0", "8 6,10 3,8 3,9 0,4 9,8 15,13 13,9 1,5 13,6 11,11 1", "11 13,2 14,14 6,0 0,2 6,8 16,8 2,9 11,14 8,13 1", "10 5,13 13,12 3,8 1,9 9,7 0,9 15,12 4,14 16,10 5", "3 12,2 16,9 6,6 15,13 7,12 11,5 12,14 11,2 12,7 3", "14 9,11 3,2 5,2 7,12 9,9 3,8 6,9 13,9 14,13 12", "12 13,6 14,6 9,13 14,3 11,0 10,5 14,11 12,0 2,0 15", "14 9,7 13,0 10,9 2,3 3,0 15,2 2,9 3,1 10,2 14,2 12", "6 16,14 16,8 1,7 7,3 10,10 8,0 4,6 11,14 11,3 8", "10 12,8 5,0 5,14 1,9 7,10 15,6 6,1 4,2 1,4 14,6 6", "7 10,14 13,3 3,14 3,7 0,10 13,2 2,8 14,4 14,6 14", "13 1,11 8,10 1,14 3,0 15,13 3,2 9,12 11,2 10,1 12", "8 12,11 7,9 5,7 15,13 2,13 3,5 13,13 7,5 11,5 9", "14 3,0 10,0 9,5 3,6 12,3 15,13 7,2 1,9 0,1 7,13 7", "14 2,10 14,0 11,1 4,10 2,6 12,6 9,0 15,12 13,5 2", "14 14,6 10,9 12,13 6,9 8,13 4,8 9,11 4,0 5,3 1", "2 16,13 16,1 12,2 7,11 3,6 7,1 2,0 4,12 0,7 5,0 7", "10 16,5 8,5 5,6 5,5 16,13 15,12 11,5 12,5 9,6 9", "2 11,7 0,12 6,12 5,3 3,3 6,5 12,10 8,9 14,6 8,3 13", "12 8,11 8,14 15,10 10,12 15,12 12,1 14,12 2,12 5", "14 14,7 3,6 3,10 16,1 6,2 15,6 10,5 12,6 11,1 14", "3 1,6 8,13 4,8 15,0 16,7 13,3 11,12 10,12 10,6 13", "13 4,6 8,12 1,14 14,2 5,6 14,6 7,7 0,13 5,7 13", "13 9,6 2,5 14,2 8,1 5,10 8,10 4,9 1,4 5,14 12,14 7", "10 11,12 10,4 12,11 10,12 16,6 9,7 13,2 16,4 1", "7 6,7 16,5 11,12 7,0 5,1 15,14 16,8 1,7 12,0 5", "12 9,5 6,4 3,5 15,7 9,6 1,6 0,8 1,6 15,5 6,13 4", "8 2,8 10,13 2,10 10,0 4,11 8,0 7,4 1,2 14,8 14", "2 10,9 15,5 0,0 7,7 0,8 10,3 10,3 2,10 12,9 5,13 3", "14 16,9 0,10 7,6 14,7 15,14 15,9 12,0 9,1 2,3 6", "8 14,12 3,6 3,3 11,4 11,2 0,11 16,4 3,4 4,5 16", "6 0,11 4,4 16,14 12,14 1,1 4,11 14,14 8,4 14,9 15", "13 4,13 11,0 14,14 14,4 2,14 2,5 2,0 3,10 11,10 4", "8 16,9 6,10 14,5 3,8 10,9 16,9 14,7 5,1 5,3 3,5 14", "11 5,3 13,11 2,4 1,4 10,13 5,5 3,2 3,4 4,10 5,6 12", "4 1,13 10,0 6,9 6,5 4,11 2,10 11,13 9,7 1,0 4,3 9", "1 8,11 13,8 3,6 12,4 12,4 6,8 14,7 4,9 14,7 8,4 4", "6 3,9 12,14 12,10 3,1 8,6 12,12 10,0 0,5 9,3 14", "12 2,0 7,12 12,12 2,1 8,3 16,1 9,2 11,4 2,8 13,0 7", "14 13,11 0,13 0,12 8,1 13,10 11,3 11,13 12,0 13", "5 6,6 15,7 1,6 12,4 8,13 5,1 8,5 1,11 12,11 1,7 12", "2 13,10 1,1 4,11 4,14 16,2 6,3 6,5 2,11 7,2 5,7 13", "11 7,3 8,6 11,13 9,7 16,10 0,13 0,9 13,6 2,4 3", "8 5,9 9,9 7,0 5,1 9,12 2,2 4,2 10,3 14,10 2,11 13", "2 11,11 14,4 14,4 15,4 2,1 15,11 15,7 16,4 15,7 7", "11 12,11 6,12 14,6 16,8 3,5 15,3 2,9 9,4 15,4 11", "5 0,4 3,13 8,12 15,10 9,3 3,3 3,5 9,3 10,0 3,0 13", "0 3,8 13,13 11,10 4,1 8,5 7,4 8,7 15,10 1,1 7,12 2" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case27() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "6 16,10 6,6 14,9 15,5 13,6 4,13 3,2 14,7 15,2 0", "11 4,11 14,9 0,10 3,12 1,10 0,4 12,2 11,11 8,13 6", "4 16,2 5,4 0,6 15,13 13,0 0,11 11,7 1,8 2,14 7,4 5", "6 11,8 16,3 16,11 7,11 14,1 12,10 10,10 16,12 12", "13 12,5 2,1 4,5 0,13 11,14 14,4 2,5 6,10 4,6 12", "3 15,7 16,2 16,12 10,2 11,12 13,11 11,12 5,12 0", "1 15,8 1,8 14,7 8,2 6,1 16,13 3,10 9,8 11,12 15", "14 10,3 2,4 4,12 1,13 8,14 14,4 14,9 15,5 3,7 14", "8 2,13 8,10 14,5 12,12 4,13 16,11 12,11 6,8 12,2 7", "8 6,4 10,14 12,8 1,11 1,2 3,13 10,13 15,0 7,7 16", "4 1,0 0,6 13,4 14,4 0,3 11,1 9,11 7,4 0,11 11,11 2", "1 3,9 13,9 4,2 15,2 0,13 13,14 4,13 4,6 2,8 12,3 2", "12 9,10 5,1 3,3 16,8 10,13 5,5 9,6 10,7 11,0 12", "6 3,0 15,5 16,6 3,1 11,9 7,8 11,0 2,11 15,10 1", "8 14,12 1,3 5,7 5,8 4,12 9,11 7,14 1,1 0,6 12,0 2", "6 12,2 12,4 8,7 6,8 7,4 13,5 9,9 2,9 1,2 15,3 14", "2 4,9 15,14 15,5 2,3 3,8 7,6 3,0 4,5 1,8 15,4 6", "6 1,8 6,5 13,9 13,7 4,11 9,3 1,2 1,11 9,13 14,9 0", "0 14,1 12,7 13,2 0,13 6,4 4,2 16,7 14,1 15,10 6", "8 8,1 3,6 11,3 6,1 10,3 4,0 4,5 9,9 11,7 8,10 8", "11 11,4 3,2 11,9 8,0 15,4 16,0 14,14 14,10 3,4 14", "4 16,8 5,1 5,2 15,4 11,8 9,1 10,13 16,5 7,3 8,14 2", "11 11,12 4,0 0,7 5,7 10,6 12,4 8,11 16,14 4,1 7", "4 9,8 13,0 13,14 0,12 12,11 0,6 6,8 11,4 6,1 7", "12 14,0 14,1 15,2 7,0 2,1 8,5 7,5 11,12 8,12 8", "4 3,4 14,4 5,6 10,7 1,4 4,8 4,11 12,10 11,6 4,7 0", "10 10,8 16,4 6,2 5,6 3,9 14,6 10,1 11,2 5,11 11", "5 6,2 1,0 1,2 15,6 12,7 5,11 9,12 11,14 0,13 14", "7 9,4 11,14 13,8 8,9 10,9 9,5 11,2 2,3 5,7 11,14 4", "3 15,8 8,2 15,0 8,4 4,8 11,2 6,3 15,2 0,14 12,2 0", "8 11,3 4,4 2,6 9,7 2,14 3,12 15,8 13,2 13,10 8,0 3", "12 2,12 8,1 0,12 2,14 15,4 15,9 10,13 9,12 16,2 10", "0 13,5 7,11 15,10 2,5 15,0 15,4 1,8 11,13 8,10 0", "0 4,6 0,12 3,3 5,13 16,1 0,2 6,10 11,4 8,3 15,1 7", "12 9,0 5,6 15,4 15,12 1,3 10,6 11,3 5,14 7,10 3", "13 1,10 10,3 0,12 15,11 4,8 0,2 0,9 2,2 7,1 12,5 1", "10 16,11 8,2 2,6 14,1 13,8 9,2 15,8 9,13 11,11 1", "2 5,1 12,10 10,0 16,13 9,2 15,4 13,10 9,10 3,6 14", "14 9,0 5,3 12,6 5,5 12,9 10,11 1,10 8,8 13,7 7", "9 7,14 7,12 11,0 15,14 0,14 10,5 8,4 12,0 2,9 0", "9 2,9 4,7 9,0 0,7 16,14 10,11 8,12 13,10 10,9 3", "2 7,0 6,14 2,14 13,5 9,2 8,0 1,6 5,2 1,2 4,9 1", "6 3,8 11,0 11,2 12,2 3,0 0,1 13,12 14,13 0,3 7,2 4", "7 8,10 8,12 16,4 13,7 8,5 8,10 2,8 12,8 6,9 7,2 12", "14 1,4 7,3 6,5 2,7 12,1 4,9 14,10 11,0 5,0 13,8 5", "7 4,6 6,8 7,7 2,0 10,10 4,4 7,10 5,11 13,7 1,6 5", "3 14,2 12,7 16,4 12,12 11,0 15,14 4,12 8,1 4,14 9", "10 10,1 4,2 5,7 2,5 9,14 4,12 0,11 13,11 14,9 14", "2 9,1 13,11 10,2 16,2 6,11 5,3 6,14 4,13 8,0 9", "0 14,4 3,9 5,3 5,11 14,2 3,0 11,9 13,13 3,2 9" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case28() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "3 7,4 16,6 9,0 12,10 1,11 11,11 1,10 5,8 14,3 14", "4 8,5 5,12 4,5 9,14 1,8 2,5 13,6 3,3 3,10 7,0 11", "11 15,1 12,0 15,9 12,6 8,2 14,13 16,10 0,4 9,13 15", "6 7,5 6,3 5,14 2,2 5,11 5,10 7,2 12,6 5,4 12,7 0", "11 4,10 6,14 10,6 11,6 14,9 13,13 9,10 8,4 5,0 16", "5 14,5 6,12 15,0 13,13 2,10 1,1 9,14 15,11 1,3 16", "4 1,2 8,5 0,3 10,11 12,2 2,2 10,13 1,6 12,8 15", "10 13,1 3,3 15,6 9,14 13,7 3,6 1,10 15,3 4,9 3", "11 11,4 8,8 0,13 12,0 11,5 11,8 16,9 7,8 10,7 7", "9 13,14 2,2 6,2 8,9 2,0 8,10 1,3 3,14 15,5 0,2 1", "1 6,14 6,1 11,5 0,10 0,0 6,8 11,10 15,3 2,13 8", "11 3,4 7,2 9,7 12,12 0,12 1,9 7,6 16,14 0,13 14", "12 6,0 4,10 3,7 9,14 3,7 3,13 10,4 10,11 1,4 2", "1 10,5 11,4 15,0 16,6 16,2 9,7 0,8 7,14 1,12 0", "1 4,11 16,6 6,14 11,11 8,13 7,12 3,11 6,5 14,8 5", "6 13,3 8,3 13,10 13,6 15,5 14,0 16,0 2,14 11,0 10", "5 13,12 15,8 6,14 8,12 4,3 10,11 12,12 14,11 0,5 6", "11 10,8 10,3 4,13 4,4 13,13 11,8 1,12 5,9 10,9 2", "10 2,8 6,10 12,12 0,3 10,10 1,2 15,11 2,7 11,11 2", "4 0,8 8,7 3,8 16,9 1,14 4,11 0,12 13,0 7,6 5,8 5", "0 7,5 11,3 1,8 4,11 5,14 12,5 6,12 3,13 9,3 10", "12 1,0 4,8 4,11 5,4 6,8 7,10 14,7 15,10 11,0 0", "10 6,0 7,10 14,8 0,4 9,6 4,0 1,1 14,11 16,0 7,12 3", "9 11,8 1,4 3,14 8,4 8,13 11,4 11,0 11,5 1,7 4,1 6", "2 15,2 8,11 13,1 4,9 14,13 2,3 1,3 2,2 5,14 15", "12 13,12 14,9 9,14 10,4 13,7 0,13 12,6 5,10 4", "4 3,5 6,12 7,0 12,13 14,13 14,10 3,11 0,6 6,12 11", "1 6,9 12,8 9,6 10,7 14,6 9,0 14,14 4,6 15,1 13", "3 12,1 9,4 6,6 14,7 2,3 11,4 11,10 10,7 3,0 11,2 6", "4 16,0 13,14 2,1 14,13 16,10 10,12 5,10 3,12 12", "2 6,14 1,6 3,3 13,10 5,7 10,6 12,0 11,2 8,7 0,0 4", "13 2,7 9,7 1,14 2,9 8,13 1,8 12,8 2,4 15,13 6,13 7", "13 14,8 7,0 3,1 4,5 6,13 0,6 3,1 11,6 13,9 2,4 10", "7 0,13 1,10 8,4 3,14 1,5 7,14 14,11 8,10 9,5 10", "1 1,13 13,5 7,12 14,10 7,8 6,5 15,13 4,11 14,5 13", "7 12,8 0,4 2,7 6,14 15,1 9,12 10,13 5,3 11,2 2", "5 0,14 1,11 6,4 4,13 2,9 12,11 3,11 8,8 6,3 16", "0 1,12 1,3 4,3 16,2 7,8 8,9 9,6 6,12 7,6 16,6 8", "4 4,3 6,7 0,8 14,13 3,3 1,0 14,8 10,9 16,1 1,8 16", "3 16,3 11,1 12,9 15,12 12,0 0,13 14,0 0,6 10,7 12", "11 8,10 10,6 15,14 15,4 8,10 5,0 1,1 6,13 9,12 16", "0 5,3 14,1 10,9 5,8 8,2 7,2 12,7 13,14 8,5 5,13 4", "3 1,6 16,11 11,14 9,4 9,7 8,7 3,10 7,7 2,6 6,3 1", "1 3,0 10,1 15,8 13,10 0,4 6,9 6,13 3,0 1,9 10,14 6", "4 6,6 7,7 0,1 12,10 12,11 15,7 2,5 3,10 0,13 1", "0 5,8 10,10 12,4 15,4 14,11 4,4 2,7 6,13 15,11 6", "7 9,0 2,5 11,10 4,5 12,12 7,4 13,11 7,0 2,12 4", "4 1,2 4,7 3,11 5,14 3,10 3,5 11,12 14,6 4,11 11", "11 3,14 5,13 1,9 12,10 7,0 9,5 5,10 8,0 5,3 3,13 0", "4 13,3 15,1 9,0 6,0 0,3 15,2 11,6 8,6 6,11 12,4 0" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case29() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "12 2,4 8,11 12,12 6,12 13,3 9,9 1,5 11,9 12,3 13", "9 8,9 3,9 13,0 1,8 3,10 6,14 14,11 8,9 12,7 1,9 16", "2 8,12 14,12 15,4 12,10 8,4 14,7 16,1 16,9 3,0 1", "7 6,10 4,5 12,7 7,8 7,12 14,10 3,4 3,13 12,13 2", "10 0,5 11,1 1,6 4,2 5,4 15,12 0,14 13,1 11,8 14", "12 10,5 8,5 4,2 0,13 13,8 1,12 0,12 7,4 7,8 13", "3 13,5 10,6 6,9 11,12 14,12 11,0 6,1 12,7 8,0 9", "4 0,1 12,1 13,10 4,11 5,7 3,11 13,1 11,14 5,1 10", "7 1,4 13,4 14,1 8,8 14,4 1,3 12,2 0,2 14,1 16,6 1", "10 5,1 11,9 7,6 5,4 16,2 3,2 10,9 9,8 13,2 15", "2 12,7 11,7 4,3 13,13 6,13 2,5 15,7 8,5 9,5 16", "5 9,0 7,13 4,4 11,1 2,12 3,5 6,6 16,10 2,9 14,9 11", "1 0,0 1,0 9,6 9,14 0,2 16,9 13,9 2,4 15,9 14,13 16", "4 4,14 9,6 12,9 5,5 10,11 6,8 14,4 13,2 8,5 9,9 3", "14 5,13 11,5 7,0 10,9 1,6 10,3 1,11 5,6 10,9 8", "8 13,12 14,14 5,11 7,1 2,6 7,4 7,14 16,14 6,14 8", "4 6,7 3,1 6,2 7,6 6,10 13,3 14,8 6,7 1,5 14,11 16", "13 9,10 3,4 7,11 9,4 15,2 6,12 7,9 2,7 5,12 11,0 5", "11 5,4 0,14 4,12 6,1 4,8 2,5 12,0 1,13 6,3 8,1 5", "9 5,10 9,9 16,10 6,0 14,10 2,13 2,5 8,5 6,11 7,1 7", "4 9,4 14,12 1,13 16,6 14,9 12,11 15,0 0,5 12,13 7", "9 13,8 12,12 4,6 4,10 1,5 9,2 10,14 9,14 6,11 14", "2 7,11 1,5 11,13 15,1 6,12 12,9 9,9 0,13 6,7 8", "6 13,11 11,9 7,2 10,3 1,8 10,10 8,12 2,14 14,11 8", "2 8,7 8,1 6,10 8,7 12,1 16,8 16,9 3,13 14,12 1", "5 10,10 8,9 0,7 0,11 11,8 11,7 10,14 10,6 9,14 11", "11 5,12 15,2 1,14 4,2 5,10 13,6 6,8 14,3 5,1 7,6 6", "6 12,3 7,3 14,13 14,14 7,12 12,14 4,13 13,1 2,4 12", "14 3,14 12,11 3,6 9,7 9,2 4,14 9,8 7,2 12,7 7,9 1", "3 13,7 14,5 2,3 15,3 12,7 13,0 3,10 1,13 14,2 13", "14 7,2 5,5 4,11 14,4 2,10 7,10 5,10 4,6 9,8 11,7 6", "6 12,9 10,11 2,9 4,2 3,6 1,10 12,3 11,1 9,5 1", "4 7,2 3,5 5,3 16,14 1,13 12,8 6,6 15,5 13,3 12", "6 4,3 2,8 3,9 15,13 6,2 3,4 15,5 3,0 11,10 11,6 9", "10 2,12 5,4 10,0 5,9 12,12 10,3 12,14 6,9 12,1 14", "1 8,1 12,11 3,12 12,9 8,3 10,4 8,6 16,2 11,1 5,1 5", "4 9,2 4,12 7,12 4,1 8,13 2,4 8,1 6,5 14,6 11,10 15", "10 4,8 1,13 7,0 9,9 2,13 0,13 0,11 0,9 7,12 16,8 9", "8 10,10 2,9 5,13 14,12 14,9 6,12 7,9 1,11 2,0 1", "10 7,0 7,0 13,6 5,0 4,0 13,14 11,5 8,13 6,6 13", "14 3,6 7,3 4,13 12,10 7,13 12,8 0,5 1,5 1,5 2,5 13", "7 0,13 7,11 10,10 14,4 7,2 9,7 7,13 4,10 13,3 12", "0 16,5 15,9 13,14 16,1 2,7 9,6 8,6 5,9 2,10 5,9 15", "4 9,0 7,4 15,11 14,11 1,7 15,10 9,1 10,14 3,9 1", "7 14,5 16,12 13,2 1,6 5,13 13,6 11,1 2,6 11,2 16", "3 10,7 0,3 3,1 10,14 4,2 13,10 13,3 5,5 11,5 11", "7 14,11 14,13 11,4 0,0 12,7 1,7 14,11 4,9 1,0 10", "1 16,0 12,14 4,13 2,5 14,4 1,11 13,9 3,7 0,3 5", "10 13,6 8,12 10,0 8,7 5,9 4,8 9,9 0,10 13,2 15", "0 11,9 13,6 2,8 1,0 16,5 6,7 7,7 12,13 2,14 6,0 5" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case30() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "5 14,1 0,9 14,7 5,4 3,4 7,2 0,5 8,2 3,12 5,2 9,3 9", "13 8,9 8,7 1,3 9,7 16,7 2,6 6,3 1,2 1,6 11,11 4", "13 6,14 0,3 10,2 8,13 5,3 8,12 6,12 0,5 7,7 9,2 14", "13 12,13 9,14 11,8 9,6 10,1 13,13 5,6 12,12 0,14 8", "3 1,3 8,14 3,10 0,0 14,0 2,7 15,6 1,8 7,11 14,11 6", "3 9,9 16,12 7,7 9,4 5,0 6,6 16,7 16,9 7,0 16,10 0", "8 6,7 2,2 8,1 9,12 6,2 7,12 12,7 16,9 8,8 7,11 11", "12 12,8 4,11 2,2 16,10 11,10 3,8 14,3 2,11 12,0 13", "4 9,4 6,14 11,5 4,5 7,9 10,12 11,2 15,2 2,7 11", "0 2,12 4,1 10,2 6,3 13,2 2,8 10,9 1,13 3,5 12,6 4", "2 14,14 15,9 2,14 4,10 14,7 7,14 7,11 13,2 5,6 4", "14 0,0 10,13 1,3 1,7 8,8 7,11 2,1 4,2 3,0 1,4 8", "10 10,14 6,4 14,4 7,13 11,2 13,8 0,14 12,13 1,0 12", "6 13,8 4,13 15,6 10,0 0,11 0,7 3,0 1,9 10,5 1,4 0", "0 4,13 0,3 5,3 3,11 5,1 7,12 4,2 15,12 2,7 2,8 11", "7 16,0 7,2 10,5 11,1 15,0 13,8 5,1 6,2 0,9 5,13 5", "4 2,2 0,7 4,12 6,6 12,4 16,1 2,3 6,1 13,5 8,0 11", "6 6,9 13,8 12,4 9,12 5,13 8,5 10,2 1,12 15,11 3", "7 9,12 16,10 3,6 14,4 4,10 7,3 9,12 3,9 1,2 13", "13 3,3 7,12 13,8 5,7 16,13 16,5 11,8 16,3 11,8 13", "2 1,10 11,14 13,11 8,0 2,5 5,11 4,9 5,4 10,9 11", "11 1,8 1,0 2,2 6,14 8,6 5,13 2,13 2,1 1,12 16,12 4", "0 12,12 11,7 9,14 8,5 14,13 7,8 4,14 7,7 9,10 9", "12 1,11 14,11 10,9 16,9 12,2 11,0 3,8 6,1 10,0 7", "7 3,10 12,10 7,5 11,11 13,14 2,12 13,10 10,2 5", "8 8,8 12,10 2,6 11,9 1,3 4,1 4,2 16,6 2,11 0,10 0", "7 4,14 13,11 10,10 10,5 9,9 15,2 15,12 11,2 12", "10 1,2 1,11 1,4 9,4 1,4 8,3 7,4 13,2 5,10 4,14 1", "4 6,9 4,5 10,0 7,10 14,12 16,7 1,7 8,5 3,11 9,14 4", "10 16,7 9,6 4,4 4,6 3,7 3,7 4,14 4,4 13,3 15,14 6", "10 10,13 14,5 14,2 6,2 6,2 15,0 3,5 8,4 12,4 6", "5 14,6 5,9 13,7 0,11 4,5 0,3 10,9 9,11 15,12 2", "1 13,5 9,8 2,12 14,12 7,12 4,12 13,14 1,5 7,9 10", "4 11,8 0,6 5,11 6,4 2,9 0,10 0,8 11,10 9,9 1,1 10", "13 9,11 8,14 3,5 15,14 14,10 15,5 3,14 9,11 1,4 8", "6 3,3 9,11 11,8 15,6 0,11 15,10 5,3 9,14 7,6 9", "8 15,7 13,5 15,1 2,14 8,6 16,11 5,0 5,9 2,7 6,2 10", "3 15,4 13,13 3,8 14,2 11,5 6,13 10,13 0,2 15,5 8", "6 3,10 5,6 11,6 6,4 8,2 2,4 1,13 4,2 7,8 1,9 8", "10 1,2 13,7 1,11 4,10 2,2 13,4 15,7 9,13 15,7 7", "9 12,8 13,8 8,13 14,7 10,11 16,1 10,6 2,14 4,10 14", "12 13,3 11,5 1,9 15,8 1,12 3,10 8,13 15,3 6,9 3", "3 9,11 1,12 5,9 3,9 14,4 13,6 13,3 13,5 16,9 6,6 9", "13 16,0 7,12 1,11 8,13 3,2 6,12 10,3 12,0 5,10 2", "5 3,14 0,1 14,0 11,13 14,7 7,1 8,7 7,9 16,3 10", "7 4,7 8,10 13,0 4,0 11,11 11,3 8,14 0,1 7,8 16", "8 2,2 4,0 9,9 13,12 5,11 3,7 2,6 12,13 2,14 3,0 0", "13 3,13 1,10 15,0 6,0 8,7 4,6 8,2 2,9 7,14 13,5 1", "7 7,13 14,12 12,5 2,5 2,2 13,1 16,14 14,2 1,12 16", "10 15,4 10,0 3,9 4,10 15,8 6,0 8,3 9,7 3,6 5,7 5" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case31() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "13 3,5 16,2 4,5 16,0 15,9 11,9 5,1 3,3 7,1 13,3 7", "9 8,8 3,6 6,11 0,10 13,2 0,12 1,11 10,2 5,4 2,1 0", "14 7,0 5,9 15,13 8,13 1,9 14,3 12,12 2,3 9,3 15", "13 8,8 5,11 6,14 2,8 1,6 9,0 8,6 10,7 13,0 8,9 11", "1 15,14 6,11 1,9 13,5 3,11 8,7 10,13 16,7 7,4 9", "3 15,13 7,9 8,10 6,14 6,7 11,13 0,7 7,4 4,0 16", "5 7,9 2,9 13,12 9,5 15,6 15,7 8,10 15,3 2,0 0,4 11", "7 10,8 15,9 4,1 3,11 4,12 8,3 6,10 11,3 8,6 7", "13 13,2 3,7 13,0 12,3 8,14 4,14 4,8 13,7 3,5 13", "14 9,3 5,0 2,7 15,11 7,14 2,9 5,2 12,1 10,6 7,3 13", "6 11,11 15,7 9,13 6,9 1,0 4,11 6,1 5,9 5,2 16,11 9", "3 2,4 2,10 4,3 14,11 12,13 4,6 0,3 7,12 15,12 11", "7 2,4 8,5 8,13 9,14 1,8 1,13 5,12 8,7 1,14 7,13 3", "14 16,0 8,2 10,2 5,9 16,13 9,11 6,0 11,0 2,7 12", "11 6,3 12,7 9,5 16,5 13,10 2,10 2,3 9,1 6,12 3", "8 11,0 12,7 15,7 4,8 1,12 13,2 12,6 8,11 1,5 10", "2 15,10 6,13 1,12 12,3 8,7 11,14 10,8 10,4 16", "8 4,8 2,14 12,4 5,11 13,13 5,12 7,5 6,9 2,7 5,2 8", "13 12,7 14,3 15,7 15,13 2,4 8,10 8,6 2,8 6,8 10", "5 13,2 4,4 15,7 15,0 4,5 0,13 6,13 15,8 7,6 1,5 5", "13 3,7 6,6 0,11 2,14 4,6 11,13 6,2 6,3 9,0 9,1 9", "1 5,7 11,8 0,9 12,4 2,4 6,6 7,8 10,12 15,1 1,0 5", "11 9,6 12,6 7,7 0,14 10,5 6,6 13,13 12,7 10,2 10", "12 4,14 6,13 7,3 5,9 16,3 11,3 15,13 16,3 1,14 4", "5 16,13 9,2 13,6 16,11 1,8 0,10 0,11 4,10 7,9 4", "6 16,14 10,2 10,9 5,1 13,2 8,1 16,6 13,11 12,14 2", "0 0,4 7,3 10,8 16,2 2,0 15,0 13,9 6,14 13,10 0", "2 11,10 8,0 1,4 9,0 15,13 13,12 10,9 13,11 3,3 1", "0 2,2 2,13 9,2 13,9 4,9 0,1 11,2 3,4 12,11 6,4 5", "5 0,2 0,0 7,1 0,2 9,2 8,5 13,9 16,2 4,11 7,13 5", "9 6,14 13,2 9,6 16,14 0,5 0,11 13,11 7,8 12,7 8", "1 10,10 16,1 8,0 3,7 4,8 10,1 3,9 16,7 11,10 8", "3 0,0 16,7 15,1 1,10 13,9 3,2 11,6 15,6 10,12 6", "3 1,7 10,2 14,5 7,0 12,3 15,14 10,0 13,6 1,6 12", "11 12,12 5,13 9,0 16,10 12,6 12,4 0,2 3,3 16,0 5", "8 1,0 16,13 3,0 14,10 5,13 0,7 10,11 15,5 2,1 4", "0 11,0 6,5 1,0 7,3 3,0 8,10 1,3 9,0 1,13 7,1 7", "7 4,5 12,8 6,1 8,8 12,5 4,7 15,9 8,4 13,6 9,3 12", "11 4,11 10,3 10,9 2,12 7,11 5,3 11,9 6,2 13,11 0", "0 10,3 3,10 10,6 8,3 8,11 3,0 2,12 15,3 14,12 12", "6 8,6 5,3 2,11 12,14 9,9 2,0 9,8 14,3 1,0 8,12 4", "13 0,3 4,7 5,6 4,3 11,6 2,4 0,6 3,2 1,13 8,12 4", "11 13,14 3,12 4,7 11,11 1,7 4,3 8,5 16,8 0,3 8", "4 16,13 1,1 3,14 5,0 11,0 4,4 6,8 13,1 9,5 13,3 5", "2 10,8 1,1 9,5 8,14 7,0 3,10 3,8 4,13 5,14 8,1 12", "0 4,9 6,3 3,1 4,5 10,10 4,5 2,6 10,4 10,7 16,0 4", "1 14,4 1,5 13,13 11,8 15,2 11,3 5,2 16,6 6,13 6", "6 12,8 11,9 11,9 2,0 7,1 0,0 9,7 5,10 2,12 8,0 16", "4 7,12 2,7 0,4 3,6 11,5 4,11 6,7 3,7 4,2 14,5 3", "3 11,5 5,7 11,6 9,8 2,1 6,4 7,3 6,11 13,9 7,11 13" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case32() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "0 15,9 8,6 9,0 7,2 7,10 13,8 8,1 2,2 7,1 15,8 4", "8 11,12 2,4 6,3 2,14 7,7 9,5 6,12 7,12 16,12 2,7 4", "0 11,5 10,4 14,11 3,12 16,14 4,7 6,7 9,14 5,3 16", "5 2,4 4,8 16,8 3,12 0,3 3,3 12,3 12,12 6,9 12,4 3", "4 10,5 8,0 1,2 12,1 5,13 4,10 6,8 11,2 10,14 12", "10 2,8 5,10 15,13 5,4 3,8 16,5 7,3 7,11 2,2 4,1 2", "5 2,10 4,13 8,13 3,6 9,1 12,3 11,9 5,7 8,6 14,5 15", "1 1,8 6,6 0,11 12,8 3,1 15,10 15,2 5,7 16,4 1,13 5", "8 9,5 3,4 4,9 9,14 2,2 14,5 6,4 15,6 4,14 8,14 4", "8 15,7 15,14 11,13 15,9 4,7 1,4 11,3 14,7 3,7 11", "5 12,5 15,0 15,12 11,5 5,8 4,6 4,8 9,2 12,1 11", "4 11,8 16,7 14,13 2,9 0,4 0,11 12,0 9,2 7,14 2", "9 2,2 9,14 15,14 1,10 15,13 3,6 11,9 7,13 3,13 14", "1 14,10 12,6 9,5 0,8 4,14 3,10 6,14 15,7 12,8 16", "5 13,4 1,2 3,4 9,1 11,8 14,0 10,11 0,3 9,8 12,6 6", "5 9,3 11,11 9,3 7,8 5,4 7,3 2,6 7,11 10,8 8,11 6", "8 6,6 3,6 6,0 0,12 0,10 12,6 15,6 16,9 9,6 10,9 12", "14 10,5 16,2 8,2 8,14 15,11 15,10 16,13 8,7 4,2 15", "0 3,13 12,4 15,9 3,11 16,2 10,1 9,14 5,4 14,12 10", "2 10,3 14,3 14,1 0,13 16,2 9,6 12,10 6,7 12,9 8", "0 2,11 16,5 12,12 1,11 8,10 6,5 11,6 16,0 8,13 11", "5 16,13 9,14 15,10 15,0 15,12 1,2 7,10 2,10 6,13 9", "6 1,11 3,7 7,9 7,1 13,0 14,4 14,11 10,8 10,3 1", "0 16,7 16,5 14,10 10,7 5,3 7,3 9,13 16,2 11,10 0", "7 11,10 13,0 12,12 14,2 13,2 9,11 13,3 5,1 9,12 10", "8 11,6 13,10 0,10 3,14 15,4 6,13 6,8 7,5 14,3 13", "3 4,6 12,6 5,11 16,3 14,11 0,8 2,7 3,4 5,14 3,3 0", "0 3,3 15,10 4,13 12,11 12,2 4,7 3,10 3,9 14,0 2", "13 9,11 13,7 10,1 6,6 2,8 12,13 13,8 16,9 5,10 9", "0 0,0 7,1 2,12 15,13 5,7 4,14 4,7 11,1 9,3 11,14 9", "2 5,7 3,8 11,12 4,13 10,13 15,9 7,2 3,0 13,7 16", "13 10,13 10,6 6,13 8,6 2,3 0,1 5,6 5,1 3,5 9,9 14", "3 3,3 10,7 1,12 14,13 6,0 6,11 11,10 0,12 8,8 2", "12 13,7 2,9 7,4 7,9 2,3 3,7 9,9 15,11 14,3 14,8 8", "7 13,0 14,7 4,12 9,6 4,1 7,10 14,9 11,7 2,8 3,3 2", "0 15,13 6,0 2,6 10,2 13,2 11,3 16,9 12,13 8,12 12", "11 8,9 6,1 10,14 2,1 7,0 13,14 12,11 7,6 8,12 5", "11 8,12 7,7 4,9 15,1 9,14 2,9 6,9 3,1 8,7 6,0 14", "13 5,9 10,11 9,5 14,10 12,4 1,0 0,8 2,10 12,12 0", "1 5,13 7,5 5,6 12,13 9,9 14,13 2,2 5,0 0,6 9,6 1", "8 5,14 4,6 6,11 16,2 4,3 12,9 15,5 6,8 15,9 9", "5 11,2 16,12 0,2 4,2 10,1 14,4 3,0 11,9 7,1 16", "11 1,10 15,11 13,7 0,12 1,3 7,10 11,0 5,4 15,10 7", "10 12,11 11,13 13,14 1,12 0,12 3,0 5,9 3,1 13,0 9", "9 13,14 12,9 14,4 15,8 5,12 14,12 12,6 7,10 0,1 16", "2 11,7 2,2 10,9 4,9 7,14 13,2 8,4 12,1 15,11 15", "9 16,3 13,14 10,4 8,1 11,12 6,12 2,5 12,10 14,11 8", "11 14,3 12,3 16,2 0,7 11,9 16,11 13,12 7,1 1,1 3", "12 0,6 10,12 10,6 14,1 4,10 4,10 4,13 12,6 1,0 7", "7 11,2 3,13 0,3 15,6 0,0 1,8 14,14 5,6 14,6 6,4 8" };
    assertEquals(9, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case33() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "8 8,14 14,1 9,8 16,3 4,0 8,8 10,12 13,12 3,12 1", "9 5,2 3,12 8,4 11,0 15,13 3,10 16,10 3,11 2,8 11", "13 3,11 5,11 10,11 2,10 0,6 13,5 3,4 6,12 14,6 6", "3 12,13 13,1 11,10 15,11 9,8 0,12 9,14 5,12 8,5 7", "5 8,10 12,3 8,10 10,5 1,2 4,1 6,5 9,7 8,2 0,0 1", "6 3,13 15,1 6,10 14,8 4,3 3,8 14,8 8,11 13,12 3", "12 2,9 10,0 13,6 2,9 10,5 8,3 15,10 6,12 12,8 14", "11 0,10 12,6 7,6 5,11 11,13 6,2 8,5 6,8 1,9 1,6 2", "9 14,11 1,10 8,9 7,10 13,3 11,14 0,8 14,2 8,5 7", "7 14,0 14,5 11,4 13,7 3,13 16,14 3,12 1,10 7,10 2", "9 10,14 5,3 1,8 3,14 15,7 8,1 2,12 13,12 6,14 0", "8 10,6 2,9 4,5 7,1 10,14 5,5 6,13 15,14 12,2 6,5 1", "7 8,9 14,8 11,13 0,12 9,4 2,12 7,8 16,11 4,9 13", "3 13,13 3,1 15,11 3,4 11,11 3,4 2,2 1,10 6,3 16", "7 2,5 2,4 10,1 11,13 1,6 5,13 8,11 0,5 6,9 10,8 11", "12 16,14 8,10 10,14 4,0 15,12 10,1 1,5 7,5 15", "7 16,9 14,11 9,13 1,13 6,7 1,12 3,6 5,11 11,12 5", "8 2,2 7,0 11,11 1,0 10,4 12,9 8,13 9,12 14,7 3", "3 9,3 9,7 16,8 8,7 15,10 1,4 7,4 6,10 5,7 2,4 7", "5 13,9 11,11 2,12 12,6 7,6 12,6 5,11 3,4 13,3 14", "11 5,4 9,8 13,5 4,10 6,10 8,1 11,6 9,13 5,2 15,2 4", "0 13,0 3,5 14,5 6,13 3,3 0,0 14,2 7,2 10,13 15,7 6", "7 12,4 6,8 7,5 2,13 10,3 13,2 4,11 10,8 11,14 0", "0 5,8 13,6 13,0 0,13 2,11 15,10 15,1 9,14 11,2 5", "11 13,4 1,5 10,4 7,9 11,8 10,2 15,14 7,7 12,4 9", "7 4,10 7,3 14,14 6,6 12,5 15,5 1,2 13,0 13,13 3", "2 5,1 8,0 8,7 9,12 6,4 14,14 7,0 10,12 14,13 10", "10 16,0 10,2 11,12 2,0 3,11 6,9 8,14 1,4 12,4 14", "0 1,6 7,7 7,12 1,6 9,9 5,11 7,13 16,3 7,4 16,3 12", "14 16,10 13,14 13,4 3,6 10,2 12,14 15,11 14,8 1", "11 11,7 11,13 11,7 11,1 12,5 2,7 2,7 3,6 1,9 4,0 6", "3 5,11 4,5 3,3 6,13 11,11 16,10 4,5 16,11 0,8 14", "11 7,2 13,7 4,12 9,0 11,8 2,0 7,12 0,4 8,13 5,3 7", "2 14,5 10,3 10,10 3,11 4,0 2,2 0,3 3,7 2,14 1,7 12", "4 9,10 2,3 9,14 4,1 10,11 13,3 2,9 3,13 5,6 14,8 1", "2 10,11 8,11 6,8 14,8 6,4 0,9 7,5 11,12 4,13 13", "9 5,5 15,14 5,5 8,8 13,11 9,9 15,7 9,9 9,14 16", "8 10,13 1,1 13,5 5,9 15,3 10,7 4,10 11,8 2,12 15", "12 12,9 5,11 14,9 4,3 15,4 12,8 1,7 3,2 9,9 0,11 8", "4 7,12 14,5 13,1 16,5 5,4 5,10 6,5 3,0 9,8 11,4 3", "13 2,11 7,8 13,8 14,0 2,11 4,4 13,14 4,2 5,8 4,7 9", "10 12,2 6,4 6,10 6,13 15,13 0,10 4,5 11,0 7,6 7", "9 6,7 4,13 14,3 15,12 5,6 12,11 15,2 9,2 2,14 2", "9 4,7 6,6 0,10 3,4 10,2 3,7 2,4 3,14 1,0 16,2 3", "7 11,5 15,0 14,9 10,8 12,5 16,6 10,12 7,1 8,6 12", "3 15,1 14,14 10,2 6,3 16,9 11,3 9,5 14,10 16,6 6", "3 0,3 10,5 0,9 0,10 7,8 3,8 7,7 15,11 5,9 7,11 16", "10 14,9 7,13 16,0 10,10 13,14 14,5 10,4 12,2 9", "13 0,5 3,4 13,0 8,14 16,0 8,1 12,8 11,11 7,1 9", "9 13,14 2,8 10,14 5,2 16,12 11,2 12,4 12,4 5,4 3" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case34() {
    int rows = 15;
    int cols = 17;
    String[] cutouts = { "1 16,11 12,10 15,10 14,5 2,7 1,10 15,9 4,5 9,7 15", "5 15,4 15,3 2,10 12,3 4,9 9,9 15,8 5,13 0,12 5,4 7", "9 16,11 1,0 0,12 11,8 14,8 5,1 13,10 0,11 16,14 16", "1 15,6 14,5 8,2 5,5 14,11 12,7 3,9 15,8 2,12 14", "11 1,2 13,2 6,12 9,12 2,8 12,11 7,6 1,1 8,9 6,7 3", "1 16,8 11,11 3,2 11,11 5,2 9,7 8,2 14,10 8,14 2", "14 12,14 10,5 13,4 14,1 9,11 16,2 0,4 12,4 16,6 4", "0 2,1 5,4 9,6 15,12 13,12 2,7 14,0 6,1 13,7 5,11 5", "8 3,14 5,14 0,8 1,4 12,14 10,5 3,14 3,12 7,7 6", "4 0,14 15,6 14,7 0,11 15,6 1,9 12,14 5,1 7,5 15", "13 1,11 5,8 15,12 4,7 9,6 0,13 7,12 6,1 5,11 6,9 6", "4 1,10 15,5 9,11 1,7 15,4 1,3 5,3 5,5 15,5 8,5 8", "13 0,4 11,8 0,7 2,14 16,6 9,5 1,4 3,1 8,1 15,1 5", "11 8,11 11,3 14,9 10,14 14,2 1,7 2,0 10,7 12,2 8", "12 14,8 7,10 3,6 3,3 2,5 7,7 1,13 4,7 13,2 6,13 8", "8 8,6 0,14 8,1 15,4 8,10 1,5 5,14 1,1 9,0 14,1 14", "5 8,5 9,11 12,8 10,10 7,0 4,11 4,2 13,6 16,0 2", "6 14,7 8,8 11,1 13,1 14,8 10,13 3,5 10,3 7,13 3", "9 9,4 2,10 7,13 10,8 0,7 9,5 12,11 2,11 3,7 16", "3 4,7 15,8 6,4 7,9 9,14 4,1 0,0 8,8 11,13 6,11 14", "1 9,8 4,3 5,13 6,12 10,10 9,14 13,1 6,6 4,14 15", "9 11,3 0,13 14,6 2,2 10,3 16,1 5,2 5,1 2,10 15", "11 5,10 15,10 0,6 0,12 12,1 15,4 11,12 10,5 3,6 14", "11 15,9 7,11 14,5 14,10 16,13 2,1 16,14 2,13 3,8 5", "14 3,11 1,6 1,0 2,11 9,14 9,0 2,2 13,13 8,1 10", "1 5,1 3,10 6,6 11,1 1,2 10,6 16,7 2,12 8,7 1,7 2", "9 2,12 16,5 9,4 14,5 1,3 6,13 13,5 12,5 3,7 13", "9 5,2 12,9 14,4 8,11 2,6 6,4 9,7 14,9 2,3 2,5 13", "10 11,12 13,11 12,3 13,14 15,14 10,1 8,4 14,4 14", "6 9,8 14,12 12,0 4,6 9,14 14,6 14,1 5,4 14,12 5", "1 9,14 2,8 4,14 8,9 0,3 1,5 9,10 2,6 16,8 5,6 15", "1 16,12 9,8 10,1 9,13 0,13 12,9 7,4 10,10 6,6 9", "5 6,7 14,7 16,13 12,12 0,3 1,12 15,7 1,9 0,3 13", "5 12,13 7,13 6,9 8,5 11,13 1,7 8,6 12,5 15,6 9", "8 14,11 11,8 11,7 1,8 3,10 5,1 8,8 0,12 0,1 12,9 6", "4 5,12 5,13 13,12 5,10 7,13 5,8 8,1 0,1 7,12 13", "9 0,3 1,13 11,7 13,14 5,6 9,4 15,0 14,14 6,3 6", "14 7,0 5,12 3,10 0,3 15,13 6,13 0,14 0,3 11,8 6", "10 5,10 14,0 5,8 15,2 2,5 13,8 6,7 14,6 13,0 0", "5 15,14 5,9 3,14 15,10 5,5 8,4 6,6 7,13 11,14 13", "10 5,0 10,10 10,7 10,1 13,11 4,6 2,10 11,4 0,6 6", "8 8,4 16,6 4,0 16,3 10,4 13,10 13,2 9,6 1,14 4", "5 5,0 15,2 12,0 11,12 9,11 5,5 4,10 11,2 3,9 1", "9 10,10 14,12 2,13 7,10 15,5 16,10 15,7 15,6 0", "10 13,6 0,5 0,8 10,3 3,7 9,4 16,6 16,14 5,8 12", "9 4,4 16,3 1,3 12,5 6,9 13,14 6,8 12,4 13,10 14", "10 9,13 10,6 11,8 16,14 6,9 1,12 12,14 2,9 5,12 14", "9 7,8 13,7 10,6 9,5 4,0 5,2 14,11 9,11 14,12 1", "10 14,2 11,9 5,11 16,2 9,11 7,8 5,8 8,5 9,3 5,8 15", "10 14,6 10,2 3,8 0,13 4,4 2,10 1,0 4,12 0,6 7,12 5" };
    assertEquals(10, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case35() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "5 7,3 5,5 6,6 11,5 4,2 10,8 6,9 3,7 2,11 9,3 5", "4 9,8 1,8 5,3 4,8 3,8 2,0 11,0 4,8 8,9 5,5 6,8 11", "11 8,10 3,8 10,5 6,4 9,2 7,9 2,7 1,1 2,0 2,9 3", "1 2,0 6,5 5,2 4,11 11,9 7,2 1,9 10,8 2,1 8,1 0,7 5", "9 5,5 4,8 2,2 5,1 1,9 6,11 6,6 10,3 10,5 2,4 11", "1 2,2 7,3 1,8 1,8 9,2 0,10 11,6 5,1 8,4 1,10 6", "0 6,5 6,3 6,2 9,8 8,5 7,1 11,5 0,5 0,9 0,7 9,7 1", "2 1,9 8,1 11,1 2,5 4,5 10,7 9,9 1,5 3,9 5,7 9,3 6", "1 7,4 8,3 5,9 10,6 6,11 10,6 4,8 2,9 8,2 1,2 4,0 0", "9 11,6 7,3 6,6 2,3 10,5 8,10 2,0 5,0 3,10 2,4 7", "1 4,3 6,6 8,4 4,11 11,4 11,4 10,5 4,5 7,7 0,0 2", "4 7,3 9,6 1,0 4,2 11,1 3,11 8,0 1,1 0,1 5,2 0,8 8", "5 2,1 4,8 0,1 2,7 8,8 3,7 11,6 10,2 10,0 5,2 10", "1 1,0 10,11 7,11 7,3 11,1 3,11 11,4 0,10 0,5 5,8 4", "1 6,10 4,11 5,10 7,10 5,7 1,4 3,9 7,10 10,1 3,9 2", "11 9,3 1,8 1,2 5,5 5,5 7,0 10,0 0,3 8,5 3,9 2,9 9", "11 3,9 8,11 1,5 0,7 2,1 6,5 8,3 4,8 8,1 0,5 5,0 1", "9 10,8 6,11 9,3 2,1 5,5 11,11 9,5 2,8 0,1 1,2 8", "6 0,6 10,9 3,10 9,0 5,0 3,5 1,10 6,11 5,9 11,5 4", "3 3,6 6,9 7,8 8,11 3,8 6,10 11,8 4,0 4,1 10,10 2", "7 2,3 5,11 5,6 5,1 6,8 5,10 11,10 1,10 4,6 7,11 4", "7 4,4 5,11 4,1 8,11 6,2 9,5 0,11 5,8 2,5 11,2 7", "7 3,10 9,2 7,3 7,1 1,6 2,3 7,9 2,9 7,0 6,4 1,7 7", "6 0,8 7,0 3,6 9,1 3,5 5,3 2,11 6,5 10,11 5,1 8", "0 5,5 8,1 7,5 6,10 3,9 9,9 0,4 1,7 9,10 9,10 2,6 7", "4 10,7 4,9 1,11 5,0 9,2 4,9 9,10 3,4 10,2 10,8 1", "8 7,6 4,7 10,3 8,8 8,10 3,8 4,7 10,4 11,10 3,10 3", "1 2,9 4,2 8,2 1,7 6,8 8,4 11,11 2,9 2,2 9,5 6,11 7", "5 4,4 8,10 1,1 2,5 7,6 4,11 9,6 0,3 9,0 11,9 8", "5 9,2 4,7 4,2 2,7 11,6 3,8 2,4 4,6 6,0 2,5 4,6 6", "3 11,0 6,5 7,1 2,11 0,4 1,7 2,11 11,0 0,11 7,0 8", "8 7,1 2,5 10,11 1,8 11,10 2,2 9,4 7,0 6,9 5,7 1", "3 5,5 10,6 9,3 3,1 0,11 7,2 1,1 11,4 2,9 2,7 11", "0 3,4 6,9 3,4 4,3 2,3 5,0 7,7 3,8 6,8 10,9 8,7 4", "2 8,3 9,0 0,8 8,2 0,5 7,7 11,10 0,0 6,3 8,8 8,8 3", "1 4,0 6,10 4,4 4,5 10,2 4,7 0,11 6,2 3,11 0,0 3", "7 11,0 9,3 0,11 2,8 1,8 6,10 1,5 8,8 5,0 8,8 11", "11 0,4 5,2 5,6 10,10 6,4 2,2 4,4 11,7 5,11 7,5 1", "5 4,4 9,9 7,9 8,9 4,8 8,8 6,11 2,7 0,5 9,11 2,0 5", "10 3,1 2,7 0,8 6,8 6,1 10,3 10,0 4,11 8,0 9,1 7", "1 11,5 9,5 9,4 8,6 2,7 8,4 11,10 7,2 9,9 9,6 8,1 4", "0 1,0 5,7 5,6 11,2 7,5 11,9 10,8 8,1 1,7 7,8 3,3 2", "10 2,3 4,9 2,10 7,8 2,9 0,4 4,7 10,0 3,7 6,5 0,1 7", "10 2,7 1,10 1,11 6,0 11,2 5,1 6,0 0,3 3,8 11,0 0", "11 3,2 8,6 8,6 5,8 4,7 8,1 0,7 7,5 7,8 8,10 8,4 10", "10 2,0 11,4 11,2 1,11 1,7 11,3 4,6 4,0 4,2 0,10 9", "0 7,0 7,10 3,7 2,9 8,3 4,9 3,7 0,11 0,6 10,0 9,5 0", "3 4,9 1,11 10,4 6,11 4,6 1,1 6,4 11,2 9,5 9,10 0", "4 9,0 0,3 2,11 5,9 1,10 5,5 8,4 0,1 10,10 7,8 10", "3 11,8 5,0 7,8 7,7 9,0 0,4 5,9 10,8 1,5 1,1 1,4 9" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case36() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "2 2,1 2,8 1,3 4,8 3,0 7,0 1,4 11,4 7,10 5,8 1,2 1", "9 8,6 10,2 9,4 2,7 0,11 8,2 2,11 6,9 2,4 1,4 8,3 8", "7 1,8 10,8 10,2 0,2 10,4 7,9 7,8 2,9 3,11 7,3 1", "5 0,0 3,5 9,6 11,8 3,5 10,9 8,8 3,9 8,2 5,2 8,6 10", "5 0,1 0,0 9,8 8,7 8,1 3,11 4,9 5,9 10,1 11,6 11", "0 3,4 3,11 6,6 9,1 2,3 11,7 11,7 4,5 5,8 4,5 7,9 4", "11 8,0 7,4 1,0 11,1 1,8 9,9 6,1 4,1 5,10 3,9 10", "0 9,6 6,1 4,4 8,1 11,7 4,7 6,2 8,11 9,10 4,4 1", "1 10,9 4,7 7,11 9,3 10,1 9,1 10,10 6,4 3,2 11,2 8", "10 2,9 0,8 3,5 5,9 8,9 5,7 1,1 2,7 5,2 10,2 0,9 6", "0 4,10 3,6 4,3 0,8 2,5 7,10 4,4 7,7 10,0 9,0 7", "2 9,10 6,1 5,1 11,6 9,5 0,2 10,3 4,3 6,7 8,2 3,2 8", "5 9,8 5,0 2,1 0,10 9,7 6,10 1,1 8,8 6,6 4,5 6,9 11", "10 7,4 3,0 9,9 1,0 7,2 3,0 2,3 3,11 5,10 4,1 1,6 4", "11 1,1 5,10 0,5 11,2 10,9 9,6 10,7 8,10 3,2 8,1 1", "7 8,0 3,1 5,11 10,5 6,4 11,6 7,1 8,2 0,0 7,2 8,4 9", "10 10,1 10,5 5,5 9,8 5,10 0,5 4,5 11,6 8,2 7,6 5", "11 0,2 7,0 2,1 10,11 2,0 9,3 1,10 3,3 1,9 3,0 10", "7 4,3 10,11 0,6 3,3 5,6 4,3 9,1 3,2 0,4 1,6 6,0 8", "1 7,3 3,6 8,4 10,1 8,10 2,11 7,1 2,5 1,8 1,11 11", "5 9,9 5,5 3,4 6,3 1,1 9,3 7,5 1,7 11,1 4,6 11,4 0", "7 0,4 1,5 10,0 2,7 1,10 6,11 4,8 1,11 10,1 1,5 7", "2 10,0 0,1 6,5 10,2 0,10 7,3 3,4 2,11 7,6 3,8 6", "0 1,8 4,6 3,5 1,2 0,10 9,5 11,4 9,11 9,0 6,0 0,3 9", "5 1,9 5,1 10,6 10,0 1,10 6,3 8,0 10,0 8,8 8,8 10", "1 10,5 8,1 4,3 1,5 10,8 7,6 8,2 1,11 11,0 11,0 5", "7 2,5 5,9 7,6 2,1 10,2 3,2 11,2 5,10 10,8 0,2 2", "10 10,8 8,6 10,10 2,11 0,0 8,7 6,6 4,3 6,0 1,1 0", "8 11,5 0,0 5,6 7,0 10,8 8,6 9,9 8,10 9,6 2,8 10", "10 9,9 6,8 10,9 5,4 9,7 11,11 11,5 0,4 6,1 3,0 3", "7 10,9 3,8 1,0 8,7 7,6 9,0 5,3 6,0 11,7 1,10 4,3 1", "8 3,0 0,10 2,3 10,6 10,4 6,10 9,5 4,5 11,7 1,3 7", "5 7,7 1,10 4,5 3,0 3,6 9,3 8,11 5,10 1,5 10,5 7", "4 0,2 8,9 11,9 0,7 4,6 3,2 3,7 10,7 6,4 1,7 1,1 5", "0 6,9 1,2 10,2 0,2 10,10 7,8 9,1 3,0 10,0 0,0 4", "1 2,4 0,4 7,7 8,3 10,4 1,11 8,0 1,1 10,11 2,6 9", "2 10,11 9,0 6,11 9,3 4,5 6,11 10,2 7,0 7,0 10,3 6", "6 1,7 6,3 6,6 10,3 6,8 6,4 5,8 7,7 6,3 4,1 1,4 9", "5 1,1 11,0 3,10 9,5 2,5 1,10 2,9 11,5 8,10 10,6 3", "0 11,1 10,5 9,8 7,1 0,8 2,0 8,0 6,6 9,2 9,7 4,0 0", "1 7,10 11,10 11,7 7,1 5,8 4,2 1,4 7,7 0,4 3,5 9", "4 9,10 7,4 6,7 6,5 10,4 6,2 3,8 6,8 2,6 8,1 5,4 4", "2 11,7 0,6 4,3 0,8 1,9 11,11 10,2 7,1 0,2 3,2 7", "11 11,2 6,11 3,11 2,1 3,1 4,0 3,9 0,11 1,9 3,4 2", "1 4,3 5,9 1,6 5,7 8,2 7,3 10,9 1,6 7,2 6,3 2,0 4", "5 5,8 11,0 10,2 8,11 9,0 9,0 3,7 6,8 10,7 4,6 6", "0 8,5 6,9 1,11 1,10 2,2 6,9 6,6 9,11 3,1 3,1 2", "3 9,11 9,6 8,7 7,5 5,0 1,9 6,2 7,8 9,11 3,8 9,3 8", "5 8,7 0,8 0,7 1,7 3,4 4,3 3,4 6,5 4,7 3,10 9,11 5", "0 4,11 7,10 11,3 0,1 4,3 9,8 8,2 9,9 1,8 6,7 6" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case37() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "4 4,7 11,4 1,8 7,9 0,9 11,6 4,7 10,7 4,2 2,3 0", "4 2,4 4,11 5,3 0,0 1,3 0,2 6,7 1,10 10,4 2,2 11", "2 0,2 1,10 6,7 3,11 7,3 2,4 4,7 9,1 6,8 0,9 1,5 10", "2 9,0 7,8 3,3 7,3 11,11 9,11 3,8 11,8 0,6 11,5 1", "10 7,1 8,8 2,11 1,6 10,11 0,2 2,8 1,10 6,8 10,1 3", "3 3,11 3,7 3,9 11,5 0,3 7,3 2,9 7,0 10,1 4,10 3", "2 3,4 6,9 6,2 3,5 1,4 11,11 7,3 9,0 2,8 8,11 9,4 2", "4 8,0 11,8 11,7 11,5 11,0 9,10 11,8 2,8 7,7 6,7 11", "7 2,7 1,10 11,8 6,7 4,11 10,8 11,0 8,9 2,8 4,10 2", "2 3,9 4,2 0,8 10,3 3,7 10,8 11,10 5,3 11,9 0,1 0", "5 9,3 11,6 8,8 4,6 8,10 3,9 4,10 5,5 10,3 0,3 9", "7 9,5 8,9 0,9 2,10 2,3 4,1 0,0 5,4 7,2 8,8 4,5 8", "5 0,9 5,2 10,7 10,3 9,0 5,9 3,2 5,9 11,0 7,5 5,1 3", "11 7,11 8,4 10,1 10,10 4,2 11,2 8,4 4,0 5,0 7,5 10", "4 10,6 1,4 11,8 1,5 6,2 9,11 8,1 8,10 8,7 8,7 4", "3 10,8 6,2 11,7 6,4 4,2 2,7 6,6 3,5 0,11 11,8 1", "6 1,9 11,5 7,3 8,11 9,1 6,9 0,1 4,3 0,5 5,1 2,6 2", "3 3,6 10,7 3,2 3,1 2,6 9,4 2,9 11,8 6,9 8,0 11", "6 1,8 2,5 2,10 10,9 8,9 11,11 0,0 5,4 3,11 6,3 6", "9 5,0 3,2 10,4 3,6 11,7 0,9 9,0 4,5 7,10 6,9 5,4 2", "9 6,9 2,1 0,3 7,3 4,1 1,3 1,5 0,2 8,6 2,6 8,1 3", "1 8,8 6,5 8,3 3,6 2,1 11,5 2,5 11,5 10,2 10,6 3", "5 1,10 2,3 8,8 3,2 2,7 3,7 9,7 8,6 0,7 11,8 11,5 6", "2 6,10 9,6 6,8 1,6 0,0 1,1 1,7 1,11 6,3 5,6 2,5 6", "8 0,3 10,6 2,9 7,6 7,1 5,1 10,9 9,9 2,2 4,6 10", "5 10,0 10,1 7,10 6,2 4,10 1,2 10,1 8,0 11,0 2,3 5", "3 8,8 2,2 6,3 8,11 9,4 11,7 1,4 7,4 4,5 7,11 7,2 3", "11 8,0 9,7 4,9 5,7 1,10 5,7 7,7 10,10 7,2 6,3 1", "6 2,4 1,9 5,11 4,3 3,3 3,0 10,1 11,6 10,0 9,2 9", "8 0,8 4,3 5,7 5,8 3,6 4,11 6,0 10,4 1,10 3,0 1,0 8", "2 9,3 0,6 8,6 4,3 7,5 9,6 0,1 8,5 11,5 9,4 10,8 11", "8 7,1 3,0 4,0 8,3 9,2 9,2 6,0 6,1 9,6 5,3 11,10 9", "11 1,7 6,7 8,3 5,0 3,11 6,9 7,8 3,8 7,0 8,8 5,5 2", "3 11,11 2,3 3,0 0,9 9,4 7,10 10,11 9,2 6,6 1,7 5", "2 7,1 4,11 7,1 4,4 9,10 1,0 3,8 1,8 5,10 11,5 8", "6 1,4 10,10 6,3 10,8 4,9 11,2 11,10 4,3 5,10 1", "3 7,7 11,2 0,9 2,6 4,9 0,1 10,2 3,4 6,9 5,11 8,1 2", "1 9,0 0,6 6,2 0,1 8,1 10,9 0,10 4,0 5,0 8,0 0,9 7", "4 7,1 9,7 8,2 5,3 0,5 8,0 3,2 10,9 2,5 4,0 0,7 4", "8 9,1 6,7 7,2 9,8 1,6 4,4 10,8 2,7 11,0 3,10 10", "3 8,0 5,5 10,0 5,0 5,11 0,2 9,0 3,4 7,11 8,5 6,8 0", "7 8,10 5,4 8,5 6,3 7,6 2,9 2,2 4,0 2,7 11,1 9,6 5", "0 11,9 3,5 6,11 8,11 3,6 1,10 2,2 3,0 1,11 3,6 6", "1 11,7 6,1 10,1 2,2 5,7 4,6 0,8 2,9 1,2 11,9 3,1 6", "1 0,1 0,7 1,4 0,6 4,9 3,7 6,4 11,0 2,0 0,7 9,11 5", "1 3,5 1,10 4,2 0,10 11,11 8,8 8,6 10,2 2,3 0,9 8", "1 8,6 6,3 4,3 3,11 2,2 6,11 3,2 11,7 8,0 8,4 10", "7 0,4 0,5 2,2 2,9 6,2 8,4 9,4 11,2 4,3 0,2 6,1 5", "7 2,10 9,7 10,6 3,8 3,11 0,0 6,0 11,3 10,4 6,6 0", "10 11,7 7,1 3,8 4,9 5,9 9,10 4,1 9,10 1,7 5,11 9" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case38() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "8 9,11 2,6 1,11 7,2 4,8 7,2 1,0 8,7 10,0 10,8 2", "5 7,4 5,4 9,5 9,3 6,9 0,7 8,1 0,0 11,9 0,8 1,8 5", "5 8,7 9,1 2,4 0,10 2,7 6,9 10,7 0,11 10,5 7,5 7", "3 4,3 0,9 4,5 9,11 1,9 10,2 1,2 4,2 6,6 7,11 3", "10 7,7 3,4 8,1 7,5 10,7 2,11 3,11 3,3 1,3 11,4 8", "3 7,5 5,1 4,11 11,0 9,8 6,3 7,2 10,1 0,2 5,0 5,6 8", "0 3,9 8,7 6,3 2,2 1,7 11,8 9,8 6,3 4,8 2,11 11", "3 5,10 1,7 5,3 8,4 11,0 11,10 2,4 9,1 8,7 2,11 4", "0 3,3 4,1 10,2 10,3 1,1 7,7 9,5 6,4 10,7 3,8 0,6 5", "7 7,5 2,7 5,9 11,2 7,7 4,6 7,4 5,7 10,0 5,1 6,3 7", "3 4,3 11,10 7,6 10,5 7,2 9,10 3,1 4,8 8,8 11,2 5", "2 5,11 2,9 4,5 0,1 1,6 10,6 9,6 0,2 2,4 1,5 0", "6 7,2 2,0 5,3 1,6 8,0 7,3 7,8 2,4 0,9 8,3 6,9 2", "5 0,9 8,0 4,7 0,6 9,1 8,11 3,0 7,11 7,8 9,6 1", "8 5,10 1,8 7,4 1,0 9,11 9,8 9,1 10,9 6,0 9,4 5,1 8", "3 8,8 6,8 11,0 8,4 7,5 9,9 7,9 5,3 10,10 9,4 4", "7 0,11 6,3 9,1 10,6 2,10 0,1 4,1 2,1 7,11 10,0 8", "1 3,11 9,10 1,9 10,0 7,4 11,9 4,2 0,10 8,9 8,6 8", "2 2,10 9,6 2,4 0,5 4,4 11,8 11,8 7,2 10,0 8,4 2", "0 10,7 7,6 7,3 7,8 1,5 5,7 2,1 9,8 0,7 7,4 3,0 10", "10 5,11 10,10 10,1 11,3 3,9 0,10 3,2 9,3 8,1 6", "10 1,2 10,0 11,6 6,7 10,6 10,8 3,4 5,6 7,8 8,7 9", "1 4,7 3,1 9,1 11,6 10,4 4,9 0,10 7,0 1,3 10,10 9", "6 2,3 0,1 11,0 1,7 5,4 10,0 11,5 4,5 8,8 10,8 7", "9 0,10 0,9 5,3 6,8 9,10 3,1 9,11 0,1 1,3 8,6 5", "2 6,11 3,3 5,5 11,1 11,10 2,0 6,10 5,10 10,11 9", "10 10,9 5,2 1,8 3,6 0,6 1,6 5,8 6,8 5,2 11,5 0,1 2", "4 4,7 9,7 6,4 4,11 1,1 9,1 1,7 10,1 3,8 6,5 10,6 1", "7 7,7 5,4 9,2 3,4 6,0 8,1 11,8 2,2 7,1 1,5 2,5 6", "9 6,0 6,6 2,7 1,11 7,8 1,9 5,11 3,5 1,1 3,11 6,0 3", "9 1,2 4,9 7,7 0,3 9,4 0,1 11,11 6,0 3,9 7,5 9,9 5", "4 8,0 2,8 7,1 6,11 0,6 3,10 1,10 5,10 0,7 3,5 6", "2 11,5 6,10 0,11 5,1 11,8 0,5 10,10 3,3 3,11 4,6 4", "7 0,4 4,5 3,5 7,9 3,9 6,5 2,8 10,4 1,3 3,4 0,11 11", "5 2,9 4,4 7,2 9,3 6,4 1,5 9,8 1,1 3,7 3,7 0,0 7", "7 7,6 7,3 6,5 2,4 1,7 3,6 10,1 1,9 5,3 8,5 10,5 3", "7 4,7 8,11 6,5 8,2 11,8 4,3 2,1 6,4 7,10 2,3 11", "11 10,6 8,1 11,0 6,7 5,9 4,10 3,0 3,1 9,7 2,11 2", "4 0,6 10,2 11,8 0,9 8,8 6,3 10,6 11,0 3,9 1,7 3", "7 6,10 11,6 3,4 6,0 3,8 1,7 9,9 8,8 8,7 8,0 7,1 1", "10 2,7 4,3 3,1 11,2 11,5 3,3 7,11 2,6 9,9 0,9 9", "6 0,5 7,9 6,1 10,9 5,0 6,8 5,9 7,3 1,5 10,5 8", "0 3,11 8,3 5,5 6,7 0,5 3,10 6,4 8,1 10,7 11,8 4", "11 1,1 5,8 1,7 2,5 11,1 6,5 5,11 10,3 8,3 5,7 10", "11 7,5 2,4 1,3 10,6 3,7 4,11 5,8 0,3 8,0 11,10 0", "9 2,2 11,11 3,10 7,8 8,0 7,1 2,8 0,10 9,5 10,3 11", "9 5,8 1,10 3,4 11,0 0,7 4,5 8,10 4,7 0,0 1,11 3", "0 0,0 11,11 1,4 3,1 6,3 5,0 7,2 10,11 0,7 8,10 2", "9 3,2 1,10 11,3 0,11 2,9 10,8 7,5 8,10 5,8 10,9 0", "5 4,2 0,4 8,6 5,3 5,1 7,0 3,7 4,5 10,10 3,9 2,0 11" };
    assertEquals(1, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case39() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "11 11,6 4,5 3,5 1,4 10,4 7,8 11,8 6,8 10,6 1,11 3", "5 6,4 4,7 0,3 1,7 9,8 5,4 2,3 5,0 6,11 7,7 2,6 3", "11 1,4 4,1 7,7 0,1 5,4 3,2 0,5 4,2 2,9 9,8 8,6 7", "5 7,7 4,4 10,9 9,7 10,8 4,8 3,4 3,8 10,3 7,1 3,4 8", "11 3,10 1,3 2,3 4,9 9,0 4,8 4,4 7,2 5,5 7,9 2,4 8", "2 6,7 11,3 11,8 3,1 3,3 10,8 9,8 5,3 0,9 11,8 9", "6 7,4 7,0 7,2 10,2 4,11 8,6 7,8 5,8 5,10 8,7 5,3 1", "10 8,4 1,6 2,11 8,8 3,5 1,3 0,7 10,2 6,10 6,3 11", "7 11,4 6,10 5,1 2,4 4,7 0,0 0,5 9,10 7,1 3,0 2,0 6", "7 4,3 4,8 11,3 7,7 2,0 5,8 6,7 3,6 7,7 5,2 2,8 4", "10 8,7 1,3 4,1 6,9 9,5 10,7 0,0 11,6 1,11 4,6 0", "11 9,10 2,5 1,11 5,4 6,4 3,0 7,3 3,1 0,2 8,5 5,0 4", "4 2,4 1,5 1,3 8,5 5,8 11,8 2,1 8,2 8,6 0,3 8,11 7", "11 11,8 9,11 8,1 10,0 1,4 3,4 0,3 7,1 3,9 11,5 10", "10 3,4 3,8 8,11 8,2 2,0 5,0 6,11 0,1 10,10 7,11 3", "1 9,0 5,2 5,8 10,4 1,1 11,10 5,0 6,0 10,5 4,7 10", "6 1,4 1,8 8,11 1,4 0,2 6,10 0,7 0,2 7,9 6,3 6,3 2", "6 0,0 7,5 11,9 2,6 7,1 0,11 9,4 9,7 1,9 6,2 10,6 6", "1 4,11 4,5 6,0 2,8 8,10 7,3 2,11 3,9 9,2 3,6 0,7 3", "10 4,7 4,8 10,0 3,7 5,3 10,10 9,6 7,6 2,6 0,4 0", "4 1,2 2,6 10,9 5,9 9,3 5,4 9,1 0,0 4,4 4,11 6,4 5", "0 2,4 8,5 9,6 8,3 0,8 9,4 7,10 1,7 0,2 8,7 0,1 3", "8 9,7 7,10 9,6 4,11 7,8 6,9 1,2 10,10 7,5 7,4 5", "2 2,10 6,2 11,0 6,1 9,2 1,11 2,0 8,0 10,8 11,8 6", "10 0,2 3,6 0,2 8,6 9,1 6,8 11,8 3,11 6,8 7,5 4", "10 9,11 0,6 6,1 6,2 9,10 6,9 8,0 3,4 7,9 10,2 3", "2 9,9 8,4 10,0 6,1 10,6 1,5 2,1 8,6 0,10 10,9 9", "7 6,4 4,11 6,7 1,9 4,1 11,1 6,9 6,4 0,5 7,5 8,1 6", "7 7,1 1,3 4,1 10,8 8,7 7,8 3,9 10,9 8,7 11,11 6", "8 0,3 1,10 0,6 3,10 6,1 10,7 8,3 9,4 9,9 9,10 11", "3 0,9 1,8 4,5 11,10 2,4 4,8 3,9 0,9 4,5 11,2 3", "11 9,10 5,7 11,2 11,10 10,3 3,1 10,10 5,10 7,9 4", "9 9,8 7,0 8,5 9,11 7,4 7,8 9,5 11,8 3,4 1,2 8,1 2", "9 1,3 11,2 7,5 4,7 11,0 6,4 1,4 10,8 1,8 5,1 6", "4 7,1 3,7 4,5 11,4 10,11 3,0 6,3 5,8 7,7 2,7 10", "10 7,7 5,4 1,0 5,6 9,9 11,10 11,0 11,3 8,9 9,4 4", "0 11,5 11,0 8,6 2,8 9,10 0,3 0,5 0,4 0,8 1,10 3", "0 3,8 10,11 7,10 8,9 2,6 3,3 9,2 11,4 11,3 3,11 10", "5 7,8 4,4 8,8 4,11 11,8 1,8 0,0 6,7 3,9 8,1 10", "4 9,0 0,11 10,2 7,8 0,6 6,0 10,1 3,4 9,3 1,1 0,3 3", "9 10,0 7,2 2,6 6,2 2,8 10,7 5,5 1,9 8,5 10,9 5,1 5", "8 10,5 3,4 3,0 7,2 7,2 8,2 4,7 3,6 7,1 3,8 9,11 9", "9 2,2 0,7 11,1 0,11 11,6 0,11 0,1 5,0 8,8 9,4 8", "7 7,3 10,1 2,1 7,10 11,1 5,9 5,4 9,5 11,1 11,5 11", "4 1,7 9,1 6,10 11,2 10,2 4,10 10,0 4,0 7,7 6,9 2", "3 0,9 4,7 2,0 4,2 1,1 3,0 1,10 0,8 9,3 9,3 4,7 7", "9 2,6 3,8 6,1 8,8 3,2 8,0 9,9 9,7 2,3 7,3 9,6 1", "11 5,1 1,10 6,1 10,3 5,6 2,8 10,5 11,0 5,0 2,2 0", "2 10,1 8,0 2,0 2,2 7,2 4,10 2,1 1,11 11,11 4,5 9", "3 9,1 6,10 2,0 0,9 9,3 5,3 0,6 3,0 3,3 2,9 1,1 7" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case40() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "0 2,7 1,8 11,11 2,2 3,8 11,11 10,9 3,10 1,1 10", "11 11,3 6,0 3,1 6,2 11,3 5,10 3,0 2,8 10,6 9,1 6", "4 5,9 8,8 2,3 4,9 3,11 3,11 7,2 9,5 1,5 9,5 6,10 0", "2 1,3 5,11 7,2 1,11 1,5 3,7 9,6 6,0 9,3 11,10 7", "9 6,8 5,11 11,10 1,5 9,2 1,5 2,7 11,7 1,11 4,5 5", "11 6,10 9,10 9,5 1,5 6,3 4,2 1,8 2,5 10,4 6,1 2", "7 7,11 0,5 3,4 7,6 3,9 6,2 8,7 4,1 0,6 9,8 11,2 5", "9 1,6 2,0 2,8 3,0 5,6 1,0 3,2 0,7 8,5 8,1 3,10 2", "2 9,3 4,7 4,10 7,4 10,4 9,9 5,5 6,4 11,4 8,5 6,0 9", "8 3,2 10,5 3,11 7,1 9,6 5,7 2,6 11,6 1,0 7,9 9", "7 2,11 1,5 7,0 4,9 9,8 11,11 2,11 0,7 2,11 3,10 6", "8 9,7 8,6 7,2 8,6 8,2 7,2 0,6 6,4 10,9 0,10 6,0 11", "10 8,1 5,1 8,11 6,2 9,5 0,10 0,8 4,6 2,11 11,5 6", "11 4,1 4,6 11,0 11,10 2,5 1,0 1,7 10,5 3,1 2,5 9", "7 6,8 2,0 5,5 1,10 7,4 10,0 10,10 4,8 2,7 5,0 9", "9 10,2 9,5 10,2 1,1 11,6 9,0 2,11 8,10 8,8 0,7 4", "3 10,6 0,10 10,10 2,1 2,5 11,2 9,6 8,1 2,6 0,0 10", "3 10,6 5,8 4,11 7,5 1,11 6,0 7,5 0,8 5,4 3,8 4,0 3", "1 10,6 4,1 1,0 0,6 0,3 6,6 5,9 6,2 1,3 1,8 6,3 4", "1 3,3 3,4 7,7 2,6 5,6 4,10 4,2 9,3 8,7 4,1 10,8 1", "0 8,9 6,9 10,10 6,9 3,8 5,11 6,2 6,7 2,6 2,4 9,6 9", "3 8,0 1,4 9,0 9,8 10,5 6,5 5,3 2,3 0,1 10,11 2,0 3", "11 2,5 5,0 8,1 6,10 3,2 5,5 4,1 3,6 10,6 11,9 9", "8 4,5 11,5 11,3 4,3 3,4 11,7 3,7 7,6 6,9 2,1 4,2 5", "9 7,11 2,10 0,3 11,8 10,8 11,4 1,3 8,4 10,10 6,3 7", "11 11,8 9,1 7,0 1,7 5,8 1,10 3,3 11,0 4,5 0,8 9", "3 7,6 6,3 2,5 3,1 7,6 5,1 3,5 6,9 0,2 11,4 11,2 4", "7 2,0 11,4 9,2 8,11 0,9 10,0 4,8 5,3 5,7 7,4 7,3 1", "1 0,7 2,8 5,2 8,10 4,4 3,11 10,0 1,8 4,6 10,3 2", "10 0,1 6,7 7,1 2,9 8,10 2,8 5,0 8,10 1,2 7,7 7,5 1", "7 7,8 8,3 3,7 8,2 3,0 5,0 0,4 7,10 4,3 10,9 1,0 3", "2 0,9 7,8 1,4 8,11 1,0 3,2 7,9 3,4 4,8 10,1 1,1 7", "7 5,5 7,0 1,2 5,9 8,9 0,5 6,7 10,11 1,0 7,7 6,1 2", "11 8,11 6,4 7,5 3,1 7,11 4,9 3,7 6,0 9,4 4,11 8", "7 6,7 11,2 1,0 2,2 0,2 5,6 7,1 6,3 5,11 4,4 11,5 6", "5 1,7 2,0 9,11 11,10 11,11 3,10 3,8 8,10 1,7 11", "8 4,3 9,6 1,11 11,6 11,7 4,6 11,5 9,11 10,8 0,1 6", "4 6,3 11,5 1,2 8,4 2,11 5,7 3,8 7,1 4,6 4,11 6,1 3", "7 11,7 0,10 2,5 6,2 11,2 6,4 2,2 5,3 7,11 5,1 1", "11 8,0 11,11 6,5 9,3 3,0 0,10 6,7 1,6 1,1 9,10 1", "9 0,1 1,1 3,10 2,5 3,1 3,1 8,9 0,4 5,3 0,1 0,1 4", "11 10,11 5,4 0,1 11,6 7,10 5,11 5,6 9,0 10,0 8,5 0", "4 2,5 4,7 6,0 11,3 1,6 11,10 11,11 10,11 8,7 4,4 3", "8 8,9 11,10 0,0 5,5 0,9 3,6 3,11 10,5 0,4 8,6 8", "1 11,5 7,3 6,2 9,0 7,3 6,9 11,9 6,6 0,0 5,2 6,8 4", "9 2,1 9,3 9,6 1,2 4,11 3,1 5,2 9,9 1,7 2,0 10,4 0", "5 7,8 11,4 4,11 5,2 4,8 1,4 3,6 7,5 11,11 4,6 0", "0 7,6 7,0 7,2 4,8 5,10 7,1 8,6 10,10 5,7 11,11 4", "8 6,5 0,11 9,7 3,7 0,1 9,9 6,2 5,5 1,2 10,11 2", "4 10,7 10,2 9,3 5,5 8,11 5,10 2,11 1,11 2,5 4,3 10" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case41() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "5 7,11 2,2 1,8 4,5 3,7 10,7 6,4 11,1 1,10 5,1 2", "10 0,2 9,10 8,9 1,6 0,8 10,9 11,2 1,11 8,5 4,0 6", "0 2,10 10,10 5,5 7,1 0,5 10,7 2,4 5,0 7,4 1,4 10", "10 10,7 10,4 11,4 0,10 11,8 9,7 9,0 4,9 0,6 11", "2 10,5 5,4 5,4 9,8 0,0 4,7 4,7 1,5 5,8 2,11 10,5 8", "10 5,4 10,11 0,1 4,1 2,2 3,9 6,0 4,6 4,0 8,2 4,9 5", "7 4,9 0,7 6,11 11,2 10,8 8,4 1,5 2,7 9,6 3,7 6,8 5", "8 6,8 8,9 4,10 11,6 4,5 10,3 4,11 1,2 10,11 1,3 7", "8 3,8 2,4 7,4 4,3 2,7 0,3 9,5 9,8 0,9 6,1 5,5 1", "0 4,2 1,10 5,10 9,9 10,10 10,4 9,2 5,10 3,2 10,9 3", "6 3,0 4,5 6,3 2,4 9,9 7,11 1,3 3,6 7,5 6,1 7,9 4", "4 8,1 11,7 7,7 5,11 7,4 2,1 8,9 1,5 4,5 1,11 8,5 6", "7 2,1 4,1 2,4 1,0 9,9 0,9 9,2 8,8 6,2 0,2 0,10 11", "4 5,7 10,4 8,0 10,9 10,8 2,8 1,6 3,2 11,3 1,5 7", "2 6,7 8,4 3,7 3,1 2,2 4,3 0,5 5,2 8,4 5,0 6,1 3", "9 8,6 4,1 6,10 9,8 5,2 0,1 2,9 0,3 9,7 2,1 5,5 7", "6 10,6 1,4 2,1 1,1 3,9 9,7 10,4 8,2 9,2 6,5 11", "11 5,9 7,2 0,1 6,6 8,7 5,7 0,5 1,9 7,5 1,11 6,3 2", "6 7,10 6,9 11,10 3,8 5,4 9,2 10,8 8,7 5,1 10,5 4", "11 8,6 10,11 6,0 4,8 10,6 10,4 3,8 11,11 6,4 0,7 9", "3 4,8 2,10 7,3 10,8 3,7 2,10 9,9 10,1 6,5 10,1 3", "3 7,1 10,6 8,11 6,0 5,4 10,7 6,4 11,9 4,11 4,1 4", "4 7,6 5,9 1,5 4,5 0,9 0,5 8,7 7,5 4,9 10,6 3,1 8", "11 8,10 6,10 8,10 9,0 6,0 3,6 2,4 8,6 11,5 5,4 2", "3 11,9 11,8 2,1 8,3 1,6 6,4 3,7 9,1 9,9 0,5 6,6 1", "7 0,4 7,7 5,4 1,7 9,7 6,1 10,4 10,2 6,2 5,0 1,2 10", "8 7,5 1,2 6,1 5,10 0,0 8,7 6,11 0,6 11,6 2,4 5,3 5", "5 0,0 10,5 9,2 10,1 2,5 11,3 5,1 1,9 11,8 3,6 6", "1 10,7 1,3 1,2 7,9 4,1 1,0 1,11 5,9 10,11 3,8 9", "9 8,9 0,5 3,6 7,3 11,6 7,3 11,8 2,0 0,5 9,1 8,1 2", "0 10,1 8,2 6,7 5,7 5,5 2,9 6,2 9,10 0,8 4,8 6,4 7", "6 8,9 10,7 9,11 5,3 3,6 9,0 2,2 0,8 6,7 0,2 7,3 8", "0 0,8 5,7 6,2 5,10 1,7 5,11 1,5 9,10 6,2 0,8 1,3 1", "8 2,6 11,4 2,5 3,11 4,7 8,4 1,2 6,8 8,7 9,8 8,11 3", "6 3,1 0,8 8,10 10,3 4,5 3,9 6,11 2,9 9,3 4,11 0", "0 4,0 8,0 2,3 5,10 11,8 4,5 1,3 11,2 10,1 6,0 5", "10 6,8 4,6 5,3 8,3 1,7 1,5 5,9 9,0 0,10 7,1 9,0 4", "3 9,6 2,2 8,2 3,9 3,10 5,5 2,10 7,0 3,2 0,8 3,7 3", "2 6,6 2,3 9,11 3,11 8,1 0,8 6,8 5,4 4,4 9,5 7,2 7", "2 0,4 2,0 10,0 2,11 0,3 11,7 6,3 2,7 6,11 9,4 4", "6 3,2 6,1 8,2 3,9 10,9 0,7 11,0 11,6 10,3 7,7 9", "5 4,0 9,10 8,7 6,3 10,6 4,0 2,1 11,1 5,4 2,3 4,8 0", "8 0,8 2,1 1,6 5,9 5,11 6,0 4,11 5,6 3,10 1,6 0", "2 10,10 9,1 8,8 1,6 6,10 9,11 10,1 0,6 5,6 8,2 3", "10 11,4 11,7 9,7 4,2 8,11 6,0 6,11 3,1 11,10 0,3 5", "4 7,7 1,6 3,4 7,4 1,3 4,9 4,1 1,2 8,0 1,7 9,9 5", "0 7,2 4,0 11,6 7,11 10,1 11,7 6,2 11,7 1,0 5,0 9", "10 5,9 4,3 2,7 0,5 5,10 1,6 6,7 7,10 7,9 7,9 6", "2 10,9 6,1 10,11 1,10 3,11 2,1 10,10 9,3 5,8 2,7 1", "2 0,2 0,8 1,1 11,7 8,2 2,11 4,0 11,3 0,5 5,9 9,1 3" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case42() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "11 8,10 8,1 2,7 5,2 2,6 5,9 2,4 7,7 0,2 10,6 6", "9 11,9 1,0 11,0 2,7 1,7 4,9 3,3 1,3 5,9 0,10 10", "10 1,9 9,4 7,7 2,10 7,10 7,9 4,1 2,5 3,4 11,9 2", "1 10,2 11,1 2,7 8,3 10,2 9,11 4,0 10,7 2,3 7,3 3", "3 11,7 7,9 5,3 11,9 8,6 4,0 11,7 7,1 6,3 7,8 8", "6 6,11 9,4 9,6 2,10 11,5 6,10 5,11 1,2 5,7 2,1 11", "7 8,11 11,11 9,8 0,11 8,9 9,10 6,8 3,2 1,5 2,8 6", "9 9,8 10,4 10,4 0,5 8,8 9,11 4,8 4,1 6,11 2,0 4", "4 6,3 6,9 0,3 5,3 0,3 10,6 2,5 3,5 11,7 11,1 11", "0 7,7 2,3 4,7 6,11 5,11 10,7 0,0 4,11 9,8 7,2 1", "6 3,4 6,1 10,3 10,9 4,4 10,0 11,10 6,6 3,9 5,0 2", "0 4,2 8,5 2,9 9,2 11,1 4,4 5,11 6,0 10,9 9,0 11", "11 8,5 11,5 4,10 2,5 6,6 6,9 1,0 4,6 8,2 8,1 3,3 4", "4 7,8 9,2 2,7 6,3 2,0 3,10 1,3 4,7 5,0 3,5 9,1 1", "1 5,6 2,6 2,0 9,11 9,3 11,8 4,6 7,2 0,9 7,7 2,10 3", "6 0,3 10,9 7,1 10,7 4,4 9,5 9,8 9,2 4,11 3,7 4,3 6", "4 0,11 0,4 9,10 3,10 2,2 2,5 11,9 1,8 4,7 0,8 0", "3 10,10 11,9 10,0 1,3 2,9 8,1 5,0 3,0 4,1 8,7 2", "10 8,2 11,4 4,0 5,1 0,11 1,1 8,0 8,7 0,2 6,8 4", "7 2,1 5,5 7,8 10,3 4,5 3,11 7,1 7,6 1,3 0,8 1,8 9", "8 6,6 1,11 0,7 0,7 0,6 5,5 8,6 5,10 5,0 1,3 0,0 11", "4 1,9 0,9 2,10 10,10 11,4 5,11 9,11 10,5 5,4 6,2 6", "1 6,7 2,0 1,6 2,4 6,0 2,10 1,4 1,10 2,8 7,11 8,1 4", "10 6,4 9,5 3,9 3,3 5,5 3,11 2,8 8,8 6,3 6,10 2,7 1", "5 5,6 7,0 2,5 7,9 6,2 7,5 7,9 10,7 5,2 4,8 8,11 0", "7 11,1 9,4 11,5 6,7 2,2 7,0 2,1 2,1 3,4 5,6 3,1 5", "3 0,0 5,10 2,8 9,3 2,2 2,4 3,9 9,9 6,6 8,5 10,5 1", "1 5,7 6,10 7,10 0,5 5,8 8,5 7,5 4,9 7,4 1,3 10,0 6", "2 9,10 3,2 7,11 3,8 9,5 6,8 10,2 3,8 3,11 9,8 3", "6 7,1 10,11 1,5 11,8 8,7 9,4 9,1 1,8 2,5 2,10 11", "7 11,10 11,10 7,4 7,4 9,3 1,1 0,2 0,3 8,10 7,11 0", "8 3,3 7,10 0,11 0,2 1,6 4,4 6,2 3,1 10,1 7,11 9", "0 2,7 1,11 6,5 4,9 8,8 10,8 2,2 8,9 1,8 2,8 3,2 5", "9 7,10 0,11 6,11 11,7 6,11 9,9 2,0 6,8 4,11 7,6 0", "4 1,11 2,9 3,0 10,6 8,8 6,9 4,9 7,6 8,9 5,2 1,10 2", "7 9,1 4,1 1,6 3,7 4,5 3,3 10,9 10,10 6,1 8,8 10", "8 8,6 9,5 6,10 10,4 1,4 7,7 5,6 11,5 11,3 6,11 10", "10 0,2 3,1 7,11 7,2 3,7 9,10 1,7 4,1 3,7 9,3 5", "4 1,0 11,5 2,10 7,11 1,8 2,4 11,4 1,10 5,3 3,0 5", "6 7,7 8,8 9,8 3,1 0,5 10,5 11,11 6,7 6,7 0,11 0", "8 8,1 7,10 4,9 8,6 10,11 4,0 3,7 7,11 6,9 2,11 6", "5 3,9 6,1 5,8 10,3 11,9 5,2 4,8 5,10 0,1 8,8 8", "2 1,3 10,5 8,3 7,7 11,6 3,7 6,10 9,11 9,1 8,7 6", "3 8,8 4,7 8,5 11,7 4,10 10,8 7,1 0,3 0,3 3,0 0", "11 4,0 3,11 5,3 1,7 1,11 7,10 5,1 9,11 10,4 1,8 10", "10 4,6 11,1 4,4 3,6 9,1 5,7 9,2 1,6 7,3 2,8 9,0 11", "3 1,7 5,7 10,7 10,8 1,1 5,8 11,6 1,2 2,2 4,4 8", "6 6,1 9,9 4,7 9,3 2,1 5,6 11,6 9,2 5,11 7,4 7,9 7", "1 4,0 11,2 0,7 3,8 10,10 7,5 3,2 4,6 11,0 9,8 0", "3 11,6 8,7 4,4 1,0 2,10 6,6 11,7 4,0 2,3 6,2 5" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case43() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "0 5,2 5,2 6,7 0,7 7,9 8,1 6,7 8,10 6,3 6,11 2,0 6", "4 11,2 8,6 9,0 9,6 10,1 3,10 0,3 7,2 9,7 11,11 8", "5 0,9 1,11 1,7 3,9 3,3 11,11 4,0 4,10 6,3 4,0 6", "4 1,4 0,8 5,0 9,1 11,10 2,2 2,4 8,2 3,7 5,1 0,5 7", "3 11,6 0,6 0,7 10,5 8,7 4,0 0,3 4,6 3,6 5,4 5,6 8", "7 4,11 6,4 5,2 6,0 11,9 10,7 5,1 1,0 7,4 11,3 1", "0 3,1 4,1 1,6 3,2 8,8 5,4 2,9 11,11 0,11 11,3 10", "6 10,1 1,11 10,2 0,1 1,0 6,4 11,2 1,4 2,5 8,4 11", "10 3,4 2,6 1,4 4,0 10,7 5,5 11,11 5,5 7,11 0,9 6", "9 4,1 5,5 0,9 11,9 3,0 0,0 4,6 7,11 8,5 4,7 0,3 11", "6 7,11 9,1 5,11 3,4 9,2 3,3 0,3 1,0 9,7 2,6 2,1 5", "6 3,4 2,10 0,9 1,8 2,9 8,3 11,6 3,3 6,4 6,1 9,6 4", "0 1,0 1,3 8,3 10,7 4,7 10,11 4,2 1,8 11,5 9,2 6", "4 2,4 2,8 5,11 9,4 10,4 2,3 5,1 5,1 1,2 3,1 4,2 10", "7 4,1 3,0 1,3 7,9 1,9 4,6 2,11 8,2 6,5 5,7 10,2 0", "6 3,10 9,10 5,8 1,4 1,10 6,3 10,4 0,11 11,9 10", "6 8,11 11,1 9,9 8,5 7,10 8,3 10,7 11,10 6,2 6,7 5", "0 1,1 11,5 10,1 8,7 3,1 4,11 4,1 11,6 6,4 6,10 2", "0 10,0 11,1 11,1 4,10 9,3 2,9 9,3 8,3 8,0 9,10 6", "4 6,5 4,6 0,6 7,4 4,2 2,5 7,4 8,5 4,11 10,9 11,5 6", "11 1,10 4,2 5,0 2,2 4,6 11,11 8,1 5,8 1,10 6,2 9", "5 6,6 2,6 8,3 10,3 5,6 5,7 1,4 4,8 3,11 2,10 2,6 1", "10 5,4 3,0 11,10 7,3 1,8 6,2 5,8 3,8 1,4 8,0 8", "2 6,11 3,0 6,6 1,9 5,3 10,8 1,11 7,8 3,10 0,1 6", "9 3,4 7,5 11,3 3,1 10,11 5,11 8,2 7,3 4,2 8,10 2", "7 9,8 1,5 11,6 4,9 11,0 5,6 10,8 9,7 10,8 11,1 9", "4 2,5 0,11 4,5 9,1 11,1 5,4 10,6 4,0 8,0 4,3 2", "7 11,8 5,10 3,11 8,7 11,3 8,0 3,7 5,1 6,1 11,9 2", "10 7,7 5,6 11,6 3,2 2,8 9,6 8,1 0,5 5,8 8,9 3,11 0", "0 10,11 3,4 5,9 7,1 4,6 11,10 7,8 3,1 6,7 2,0 1", "4 0,10 7,9 5,7 10,0 4,9 11,8 10,7 3,8 7,1 5,8 6", "4 11,9 11,8 0,8 3,3 7,10 6,10 4,3 11,10 8,11 5,1 4", "6 0,7 4,9 5,1 5,4 10,11 2,2 11,10 4,1 8,5 1,6 6", "6 0,10 6,0 0,9 9,8 0,5 5,0 3,9 4,8 11,3 3,0 7,8 3", "0 1,4 10,5 11,7 2,4 4,2 5,0 11,11 8,9 10,9 7,3 4", "9 8,8 4,5 1,0 0,9 1,0 11,5 11,10 7,0 1,3 0,1 9,3 2", "5 11,2 4,2 3,2 2,2 2,9 11,8 9,3 0,0 11,1 11,7 2", "6 3,0 5,1 6,10 6,6 9,11 9,3 9,11 11,3 5,3 9,6 9", "1 10,5 3,11 6,2 8,11 1,2 1,3 3,7 0,2 5,1 10,7 0", "4 11,11 5,3 4,2 3,10 2,4 8,8 10,6 8,10 11,4 9,11 2", "1 3,3 1,1 5,2 8,2 5,6 9,8 8,7 7,8 4,9 6,11 3,7 4", "1 3,11 0,0 10,8 5,0 11,2 0,5 4,5 6,8 3,6 0,7 3", "6 6,9 2,9 8,3 11,4 11,9 1,6 10,1 7,8 3,0 3,4 2,9 1", "3 11,2 11,2 8,6 10,2 9,2 6,4 2,0 6,4 2,0 3,0 6,4 6", "7 8,0 10,5 8,3 3,9 3,9 2,6 6,2 9,4 10,8 8,2 2,10 8", "9 10,6 11,5 1,10 6,8 7,3 4,6 1,7 9,2 3,1 10,4 0", "8 0,2 2,11 4,6 1,8 7,3 4,4 6,6 11,6 9,3 10,1 9,8 6", "0 6,3 5,1 9,9 3,8 0,5 5,10 1,8 5,6 4,5 11,10 6,8 8", "1 6,3 5,3 1,6 0,11 9,3 11,5 2,8 7,9 5,8 4,5 2", "0 10,1 7,10 5,5 10,11 6,11 6,11 1,3 9,4 8,4 1,3 0" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case44() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "0 0,9 6,10 3,9 11,10 11,11 0,3 1,3 2,7 3,2 1,10 3", "1 5,9 2,4 1,2 0,1 1,7 4,2 7,7 9,0 8,5 5,8 7,11 5", "7 9,7 7,4 10,11 4,0 5,11 11,6 1,2 8,10 4,7 2,6 1", "5 6,3 7,8 5,5 10,4 5,0 2,11 6,4 11,4 3,9 8,8 6", "9 5,7 5,2 6,4 5,3 11,11 10,0 5,1 4,1 7,9 11,10 3", "8 2,2 4,0 0,8 6,10 2,4 5,8 7,0 7,0 2,6 5,11 7,11 8", "2 9,6 11,2 8,8 3,7 0,3 10,9 5,10 4,8 2,0 5,7 7,2 4", "7 10,6 2,5 2,0 10,2 5,9 3,4 3,8 9,1 5,4 2,1 10,5 3", "0 7,0 3,3 2,11 11,11 8,1 6,3 3,11 2,3 11,5 6,4 2", "11 2,10 9,8 0,1 8,7 3,10 2,8 7,11 11,3 4,4 6,5 4", "10 6,7 2,3 9,7 11,4 8,5 9,10 0,7 0,3 11,8 2,6 1", "4 10,11 1,6 8,8 2,4 11,0 3,4 4,5 3,3 1,11 8,3 10", "5 3,8 1,8 9,5 11,4 0,10 2,1 5,6 0,6 3,11 5,2 5,4 7", "8 7,0 11,3 5,9 2,2 0,0 7,7 3,5 2,6 3,11 7,10 8,6 8", "6 4,7 11,4 11,8 4,9 11,2 8,3 9,10 4,4 4,10 9,11 4", "3 3,0 0,9 8,1 1,5 4,0 2,0 11,8 10,0 9,0 5,9 9,5 8", "1 10,4 2,0 3,8 6,1 10,10 4,4 11,4 9,6 9,3 11,9 8", "8 9,8 3,8 6,5 3,11 9,0 5,0 2,9 6,5 3,2 6,2 5,7 0", "3 0,1 9,3 5,0 9,10 2,3 10,8 2,7 1,7 8,11 7,9 6", "8 2,6 10,11 0,0 4,11 4,2 11,6 6,2 4,4 10,4 2,3 2", "2 2,3 0,8 3,10 6,7 5,7 7,7 9,0 3,8 0,8 8,3 7,10 0", "11 3,10 4,8 1,5 1,8 1,11 4,7 0,10 2,2 7,6 4,9 7", "9 5,1 8,4 6,6 2,1 5,5 11,0 0,1 11,8 11,5 4,3 5,7 3", "8 0,0 5,4 2,9 9,1 5,2 7,2 7,6 1,1 3,4 4,10 10,2 2", "5 7,4 5,9 9,10 4,1 8,5 7,5 2,0 10,5 2,9 11,6 10", "5 4,11 2,2 7,4 3,1 5,7 7,4 10,4 4,0 2,8 1,3 10,6 2", "3 6,1 6,3 7,3 5,9 1,10 0,4 0,7 2,10 1,10 0,8 10", "10 10,9 9,8 4,11 3,4 8,2 9,5 11,7 3,11 1,3 7,0 8", "7 7,0 6,3 10,3 2,8 6,8 11,8 0,3 5,6 5,6 7,2 10,8 7", "5 5,1 8,6 1,6 11,4 9,11 0,4 5,6 3,5 5,8 9,5 0", "1 3,7 3,7 8,7 6,3 0,9 5,0 1,5 8,8 10,1 1,8 1,7 7", "4 5,10 2,8 8,8 8,8 8,0 11,5 4,2 7,7 11,8 1,2 11", "7 11,1 11,3 10,4 5,2 10,1 7,0 11,9 7,3 11,0 7,2 0", "11 7,11 4,0 11,11 2,7 4,11 11,10 4,9 9,3 0,5 10", "8 4,7 10,0 0,8 11,5 4,11 11,4 10,1 2,4 2,6 1,8 3", "4 1,4 10,8 0,11 0,0 11,5 1,4 11,1 1,11 1,4 7,6 1", "9 0,1 9,2 9,0 5,4 3,11 0,8 5,2 11,8 11,8 8,9 10", "7 5,6 1,11 11,9 11,10 11,4 3,11 11,7 4,5 11,11 6", "7 5,10 0,11 3,0 2,5 6,1 10,0 7,7 6,5 4,0 0,1 6,2 6", "8 7,3 5,7 10,0 11,11 11,2 0,4 2,4 9,1 8,8 10,4 0", "4 4,6 1,10 10,3 8,4 10,2 5,4 11,1 10,8 11,3 6,11 3", "0 5,9 7,9 2,2 0,0 1,5 10,10 4,0 7,7 7,0 11,1 1,2 7", "3 2,8 5,2 3,7 7,0 3,5 0,1 7,3 3,0 6,6 3,11 3,8 5", "9 11,4 3,9 5,6 8,2 7,5 1,4 11,7 5,10 3,4 4,5 11", "10 7,10 3,11 1,2 1,4 5,11 5,8 2,6 8,0 2,2 1,1 7", "4 5,11 3,9 9,3 11,11 2,3 8,7 10,9 7,8 0,1 6,6 11", "1 7,6 9,2 8,5 11,11 10,4 9,4 10,9 2,7 3,7 7,5 8", "11 8,10 7,6 6,11 10,10 11,8 5,9 1,5 6,0 2,6 6,6 5", "2 3,9 3,0 1,9 0,1 8,10 8,4 1,6 7,8 7,11 3,0 0,8 5", "1 1,1 0,3 2,11 8,2 6,8 7,5 1,10 0,5 11,0 2,1 3" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case45() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "0 2,10 9,8 6,0 4,7 3,5 4,8 10,5 7,2 5,4 11,10 8", "7 5,7 3,9 11,1 0,2 11,5 0,7 4,5 1,1 10,8 5,0 11", "11 9,9 3,8 8,7 7,9 6,10 4,10 1,5 6,7 5,5 7,4 9", "1 4,10 3,1 0,1 11,0 11,7 2,1 4,11 6,2 3,9 0,11 3", "8 2,11 2,10 11,7 7,0 9,11 9,7 11,3 2,5 9,10 0,6 4", "2 7,3 6,6 7,10 9,5 3,5 9,9 7,7 3,8 4,9 2,4 7,0 4", "11 0,3 11,2 1,9 3,4 1,10 7,3 8,3 11,1 6,0 7,5 0", "9 6,8 5,4 11,10 5,10 3,4 6,2 5,3 0,4 6,1 2,8 3,4 8", "10 1,11 3,5 3,11 5,8 6,7 5,3 4,2 2,2 3,10 11,4 8", "6 5,10 3,9 5,8 3,6 0,1 7,6 10,8 10,2 0,8 7,2 2,7 4", "4 6,9 10,10 9,0 1,10 2,6 8,11 6,3 9,11 0,9 11,0 0", "8 2,5 2,11 4,7 2,2 6,5 11,4 7,8 3,8 8,1 3,3 6,11 9", "6 11,3 4,4 11,10 8,8 7,9 10,0 8,5 4,9 10,11 3,5 1", "1 7,3 0,9 1,10 6,5 5,10 5,7 10,5 0,8 8,10 4,5 3", "6 6,3 6,4 10,2 10,0 4,7 7,10 7,2 10,0 10,11 4,3 4", "10 9,9 6,3 0,4 2,2 11,5 5,11 3,6 7,6 11,6 10,8 6", "7 4,2 8,4 3,2 1,2 9,5 4,2 5,11 11,6 2,3 7,9 2,9 2", "11 6,8 5,2 7,9 7,2 10,10 3,1 6,1 5,0 6,1 8,0 10", "3 10,0 6,1 2,10 8,0 9,1 7,1 5,7 10,8 10,2 9,7 2", "8 3,3 8,8 1,2 6,5 5,5 11,7 7,11 3,5 4,11 11,1 10", "4 11,0 1,0 3,1 10,6 8,1 7,8 10,0 8,0 8,2 5,11 7", "1 3,6 1,5 5,10 9,8 11,4 4,2 11,6 9,6 4,9 8,6 1,6 3", "0 3,10 9,5 2,7 2,9 0,8 8,6 5,4 7,2 5,1 7,11 4,9 6", "4 2,3 7,1 8,3 11,7 8,0 2,1 6,2 5,6 11,0 11,3 2", "5 3,0 10,3 9,5 6,9 8,0 5,0 3,11 1,2 3,6 10,11 11", "8 6,7 7,9 2,4 3,1 9,0 4,10 5,5 8,0 1,2 2,5 3,5 6", "0 11,8 6,5 3,6 7,4 0,1 11,9 0,9 3,3 3,7 9,2 3,4 0", "9 6,11 8,11 8,7 3,8 5,1 8,0 10,0 4,10 5,3 5,10 0", "2 11,6 3,6 9,4 9,6 1,11 6,3 3,10 6,11 6,1 5,3 4", "3 4,7 11,4 5,3 4,9 7,9 7,2 1,9 11,3 10,1 10,9 7", "2 7,0 10,7 0,5 9,2 7,10 5,6 4,3 11,8 8,7 10,4 7", "1 7,11 4,1 7,0 7,0 10,1 3,10 7,6 7,4 11,7 0,0 8", "1 11,9 8,5 8,0 3,2 0,6 3,2 3,10 6,4 0,11 4,0 6,9 7", "6 7,3 0,10 11,2 7,4 0,6 6,10 7,6 8,8 4,2 6,2 8,8 5", "9 8,1 4,2 1,8 0,0 10,4 1,2 7,4 5,5 6,3 5,9 1,10 8", "7 1,8 4,7 8,11 11,6 5,4 7,8 8,4 6,1 3,10 3,0 5", "5 8,2 6,0 3,3 9,4 6,3 8,1 1,11 6,1 10,9 3,10 1,5 5", "6 3,5 7,4 5,6 4,3 6,4 6,0 8,1 4,3 0,8 10,5 5,3 0", "3 4,1 11,6 11,9 11,11 11,0 9,6 8,6 11,11 1,2 5", "8 6,2 0,2 3,4 8,2 10,9 1,4 1,0 9,9 4,4 1,4 6,6 1", "5 11,1 9,0 10,10 5,4 9,6 9,11 1,5 6,8 11,5 8,2 9", "11 11,9 2,1 2,4 6,6 8,10 11,0 2,2 0,5 1,5 0,8 11", "1 8,5 8,2 0,5 0,0 10,2 6,9 5,1 9,4 1,5 5,8 9,2 8", "5 5,5 9,6 0,10 2,2 1,10 9,4 2,7 10,6 1,10 3,0 6", "3 1,11 1,4 1,3 10,8 3,8 3,5 9,10 1,5 2,5 8,9 8,4 6", "6 3,1 5,0 2,8 11,2 4,6 1,8 0,10 9,8 6,5 8,2 7,10 5", "6 0,9 6,0 10,6 3,1 6,2 4,2 7,6 4,11 11,9 5,8 0,9 5", "11 1,1 5,3 9,9 9,10 8,5 6,4 7,11 5,0 6,7 6,2 7,3 2", "0 2,4 8,1 11,1 8,4 1,8 5,10 6,3 11,1 9,3 3,8 1,4 2", "5 3,9 1,9 3,1 11,8 8,9 6,5 3,6 6,2 6,10 3,10 3,8 5" };
    assertEquals(1, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case46() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "4 1,8 11,4 1,10 0,10 11,10 8,1 2,2 1,4 3,4 10,3 5", "0 6,7 6,7 0,4 7,7 2,3 5,10 9,4 5,0 5,3 8,1 4,0 10", "0 10,3 6,10 9,2 7,0 4,2 2,3 0,10 1,5 8,0 3,10 2", "2 1,8 9,4 9,7 11,7 8,4 5,1 1,4 6,0 8,0 2,1 11,4 3", "9 6,4 3,4 8,8 6,6 7,3 8,9 8,3 2,1 6,10 8,3 11,9 6", "7 9,2 8,7 7,0 0,10 5,0 5,9 6,1 5,10 7,6 5,9 4,9 6", "6 11,8 3,8 10,8 8,9 7,2 2,4 3,3 0,8 2,8 0,9 1,9 6", "6 11,4 8,8 6,10 2,5 3,2 4,2 5,10 11,2 10,6 7,0 7", "8 9,9 5,0 11,5 6,4 1,9 10,11 3,5 10,0 3,9 4,4 5", "8 3,6 7,11 10,4 5,3 0,7 7,8 2,0 3,8 11,11 4,6 0", "1 5,10 4,2 8,5 10,10 10,8 0,7 6,8 5,4 2,1 7,8 4", "9 5,10 5,5 3,3 7,0 9,11 3,11 2,11 6,8 1,4 7,0 2", "3 2,11 0,7 4,5 7,10 5,6 5,4 6,9 6,6 2,4 11,4 11", "2 11,4 10,9 8,1 6,6 9,0 11,11 2,10 9,2 1,5 2,3 9", "0 3,1 6,0 5,0 1,1 8,2 2,11 9,11 3,8 3,1 2,10 5,9 2", "11 3,7 11,6 2,0 6,5 7,9 2,3 4,8 2,1 8,8 1,5 6,2 1", "4 2,0 1,5 3,8 2,6 3,1 1,10 3,0 2,9 0,4 1,7 1,6 1", "8 11,1 8,6 4,11 1,3 0,1 5,8 1,1 3,2 3,5 0,6 1,9 9", "11 6,0 11,4 8,0 8,3 11,0 0,4 4,5 10,5 10,9 1,2 9", "1 6,3 4,10 0,8 4,5 7,11 6,10 6,4 7,4 7,6 9,1 10", "5 5,2 11,5 4,11 4,11 3,0 3,10 9,7 6,3 1,9 5,6 3", "9 9,2 0,5 4,0 6,1 4,6 9,6 2,11 0,10 10,1 6,4 1", "2 2,9 7,5 1,9 10,5 3,5 9,3 0,3 1,3 8,5 11,2 4,5 7", "10 3,9 9,6 4,7 4,4 1,7 10,10 11,6 9,10 1,2 4,5 8", "5 8,8 6,3 10,11 6,5 1,7 3,6 10,2 1,5 0,10 9,10 1", "5 9,2 0,9 9,2 3,1 4,2 10,2 4,7 8,5 8,0 7,5 10,9 2", "5 5,0 5,4 1,4 5,1 6,3 6,2 1,4 4,11 11,6 6,3 6,5 9", "0 3,10 8,10 11,7 0,9 10,5 6,6 7,0 4,2 9,4 10,1 11", "0 0,1 11,11 9,5 11,8 6,8 11,7 0,6 10,2 3,6 9,5 3", "7 6,1 11,10 0,0 10,6 3,4 2,3 2,7 5,4 6,11 0,11 4", "8 10,5 3,1 7,4 11,7 6,11 9,2 11,9 4,5 0,7 6,7 8", "3 1,3 11,5 7,7 0,6 6,1 3,9 10,2 1,2 0,5 5,7 0,8 2", "7 2,9 7,10 3,11 1,4 3,10 3,7 3,5 1,6 6,4 8,5 0", "11 9,9 1,4 5,4 7,8 9,1 3,5 10,10 7,2 3,3 1,10 1", "7 1,1 8,7 2,2 1,5 6,8 1,2 7,6 9,0 9,7 7,5 9,11 7", "5 4,8 2,11 3,11 0,10 9,5 8,11 9,10 9,2 3,10 6,10 1", "3 9,11 9,3 5,11 1,8 9,3 8,8 3,11 9,0 6,4 7,2 9,3 9", "5 6,10 2,1 10,11 7,9 8,7 3,7 10,10 11,3 11,9 6", "7 5,11 7,6 5,9 8,2 1,7 10,2 11,9 1,0 6,0 3,9 9,9 9", "5 8,7 10,4 11,0 11,7 9,1 4,11 11,2 2,6 1,1 4,8 2", "1 10,7 1,1 3,5 3,2 1,11 1,5 9,9 7,6 7,2 8,4 8,0 5", "11 3,11 1,3 3,4 11,9 3,1 2,10 5,6 1,6 4,6 6,4 0", "10 5,11 6,1 3,3 1,3 8,2 4,1 1,3 1,7 9,9 5,10 6,4 9", "6 9,9 7,11 5,10 2,5 2,7 5,5 5,4 2,0 10,11 5,2 3", "4 6,6 6,9 5,9 8,11 2,10 8,3 6,8 11,4 3,11 8,3 0", "11 6,9 1,8 11,5 2,0 2,10 2,9 8,9 7,6 3,1 10,5 4", "3 3,11 9,3 9,11 2,10 10,7 0,6 2,7 5,10 9,7 8,3 5", "6 9,9 0,3 11,9 8,0 4,4 9,8 1,10 2,9 7,7 5,2 1,0 3", "2 9,9 8,0 5,6 2,3 7,7 7,8 1,3 5,4 7,11 0,8 10,9 0", "2 6,7 11,6 10,11 9,8 8,11 11,8 5,1 2,10 3,0 11,8 5" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case47() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "6 1,6 3,3 5,9 1,0 0,11 3,4 6,5 9,1 2,8 5,1 8,6 10", "5 3,11 5,3 0,1 10,8 7,3 2,1 6,6 0,1 11,4 7,7 0,4 7", "2 11,10 8,11 7,5 1,10 9,1 1,11 5,6 10,3 3,3 10", "10 11,3 9,1 9,8 2,7 3,6 3,2 5,3 11,1 10,7 8,2 10", "3 1,1 0,6 8,2 9,3 5,5 10,1 6,3 7,6 1,2 4,7 6,11 8", "11 8,1 6,9 6,8 4,2 2,5 1,0 6,9 7,3 0,4 7,1 7,9 4", "2 3,7 6,11 10,10 11,7 2,11 4,7 2,11 4,9 0,7 10", "10 2,1 4,7 1,3 9,9 10,10 4,5 11,7 1,7 0,0 2,9 9", "5 1,1 5,7 9,8 5,3 0,0 8,6 1,1 0,4 1,11 6,2 11,7 7", "9 3,7 0,2 5,8 2,3 7,11 3,2 8,7 1,4 6,2 11,9 0,5 3", "3 7,4 10,3 3,2 10,3 8,11 11,1 3,1 2,2 7,8 6,8 0", "6 10,3 9,3 2,6 8,8 4,5 0,0 5,9 9,9 6,9 8,9 3,7 2", "1 8,6 3,5 1,9 3,3 6,3 8,6 7,1 1,0 3,8 9,1 5,4 6", "8 10,2 2,5 0,8 1,8 6,4 11,7 10,10 1,8 2,4 10,6 11", "4 2,3 10,11 2,7 11,11 5,4 5,6 8,7 0,2 7,1 8,7 0", "8 4,2 0,10 9,1 11,0 7,7 9,5 5,10 8,4 9,3 6,10 11", "5 10,0 6,11 11,2 3,6 6,4 8,11 7,3 6,10 3,8 4,8 4", "0 7,5 8,3 10,3 8,7 5,8 2,6 9,4 4,6 0,6 6,11 7,4 11", "1 0,6 11,7 4,8 1,1 0,8 8,0 9,11 9,9 3,7 1,0 9,4 7", "6 10,3 0,9 3,8 2,11 1,0 3,11 5,6 9,10 10,8 4,7 10", "9 1,7 5,7 9,6 3,11 10,10 7,7 5,5 11,8 10,4 2,4 1", "5 9,11 2,11 3,1 1,3 6,9 11,10 4,1 0,6 1,5 7,1 1", "2 1,3 2,10 10,4 7,10 0,6 3,3 5,8 10,2 6,11 8,2 7", "8 8,6 5,9 11,0 8,6 2,4 3,6 5,7 10,9 8,1 11,9 4,9 4", "0 1,2 0,4 10,4 5,10 8,8 10,9 1,5 10,10 4,6 6,2 6", "5 6,1 11,1 10,8 11,3 1,1 2,8 6,11 7,4 1,7 4,0 3", "9 7,3 3,5 10,0 2,9 11,5 2,3 11,4 5,0 3,9 11,5 4", "10 4,10 0,11 5,0 9,9 7,10 11,3 7,5 7,1 2,9 10,2 0", "9 8,7 6,6 11,7 8,4 11,1 1,3 7,2 0,3 3,11 5,10 5", "3 4,3 4,2 5,7 11,11 0,2 9,6 1,2 3,5 2,8 6,10 0,4 6", "2 9,3 7,3 4,10 3,2 4,0 3,7 10,8 8,5 4,2 9,5 8,0 10", "3 8,2 10,7 10,4 6,10 5,8 6,8 5,0 0,8 3,7 2,2 0", "4 3,3 7,3 6,7 4,3 1,2 10,11 8,9 8,5 3,9 2,11 3,3 6", "5 7,6 10,3 3,9 9,0 10,9 8,8 1,11 8,11 2,7 2,10 5", "8 5,6 9,7 11,9 9,9 1,2 5,4 6,7 10,1 5,10 7,6 10", "1 2,3 10,2 10,3 3,0 3,11 0,0 4,10 7,1 1,9 5,2 10", "6 9,6 0,7 1,4 3,5 2,11 9,9 10,3 10,0 1,3 5,3 11", "0 6,3 3,11 0,4 8,10 4,1 7,3 11,6 2,0 4,10 1,6 7", "7 5,2 10,1 1,10 3,7 5,6 6,1 8,10 7,9 8,8 9,2 0,3 5", "5 10,9 0,11 11,5 8,6 1,3 7,5 10,11 10,8 1,9 10,3 8", "5 0,5 2,1 7,1 1,3 10,3 4,11 8,11 4,5 11,1 4,11 2", "0 11,1 10,10 2,1 5,3 0,6 0,3 1,9 1,2 8,6 5,11 4", "6 6,10 0,6 9,4 9,4 7,6 8,3 2,8 6,8 7,2 0,8 0,0 10", "2 10,2 5,10 8,8 4,4 4,6 2,0 5,1 7,0 9,6 8,5 1,3 3", "3 10,9 11,7 6,7 6,2 11,11 4,7 1,1 3,1 5,7 10,11 7", "10 10,5 2,10 8,11 10,8 6,6 4,9 10,1 2,10 5,10 3", "8 7,8 10,11 1,0 9,6 7,9 2,7 4,2 8,4 4,0 5,9 3,1 11", "8 10,11 3,5 7,0 0,2 9,0 4,6 0,7 1,5 9,2 1,2 3,11 1", "2 5,8 9,0 3,1 1,7 4,4 7,4 11,0 6,8 1,9 8,10 1,0 9", "6 2,2 3,3 7,4 8,0 9,9 2,0 7,5 11,8 0,1 8,10 5,4 6" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case48() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "11 5,9 10,11 11,10 2,2 11,11 7,1 4,9 6,10 6,0 0", "10 6,2 8,11 10,8 5,7 7,11 1,5 10,7 2,10 5,4 6,6 7", "8 5,1 10,1 4,3 2,2 7,9 6,4 6,1 7,10 7,10 2,6 1,3 2", "6 4,11 9,8 9,10 4,6 6,5 8,0 4,11 10,3 7,2 3,10 5", "1 4,6 6,5 2,7 4,4 8,0 11,11 4,3 1,1 5,11 1,8 2,6 5", "10 0,11 5,11 8,2 4,2 1,9 1,9 1,3 5,9 6,8 3,5 11", "11 2,2 7,0 8,11 8,11 11,11 2,10 3,1 1,2 2,11 4", "10 1,7 11,5 6,6 10,10 5,7 7,3 10,3 3,9 8,3 8,2 9", "6 7,5 0,4 1,0 4,4 11,1 3,0 0,7 0,5 9,5 11,2 11,3 7", "8 2,2 4,1 0,1 8,8 2,7 4,8 8,10 1,8 8,5 4,11 7,10 4", "9 9,6 10,10 9,3 7,2 7,0 10,8 2,3 3,10 7,10 5,2 5", "7 6,0 6,10 11,7 11,3 2,5 3,5 3,2 4,5 8,2 9,3 3,4 9", "10 6,4 7,2 0,5 3,4 7,9 0,5 6,11 5,1 9,8 8,4 8,9 0", "3 3,8 7,3 6,7 9,3 8,5 8,9 0,11 5,6 0,2 1,5 9,9 6", "2 2,7 1,2 5,0 5,9 2,4 0,0 0,7 8,2 2,7 3,3 5,7 3", "11 6,6 0,11 9,5 8,4 6,7 0,10 1,0 6,2 0,1 3,8 8", "3 6,10 4,0 3,6 3,8 2,4 5,9 7,6 9,3 3,11 3,10 11", "6 5,11 8,5 0,0 5,10 0,5 0,7 11,6 5,3 9,6 0,9 3", "9 4,4 7,5 1,2 6,3 2,6 10,5 8,0 3,1 0,9 3,10 0,10 3", "3 8,5 3,0 11,10 10,2 1,11 4,9 2,10 6,10 0,0 1,5 6", "9 1,7 2,7 2,11 5,4 6,10 4,8 1,6 2,6 0,1 11,4 10", "5 8,7 10,10 9,7 7,6 0,2 5,9 5,4 0,3 4,8 4,2 3,1 7", "7 6,1 2,6 4,2 7,10 3,0 9,5 0,4 0,0 4,7 2,0 1,6 1", "9 0,0 10,9 7,0 1,1 11,2 2,9 10,4 7,2 5,3 10,6 2", "8 2,3 1,0 6,8 3,4 2,6 2,11 9,7 6,4 2,1 10,6 4,5 10", "10 2,4 3,5 4,10 11,10 6,5 2,9 10,7 0,1 11,3 8,0 3", "1 6,4 1,7 7,7 7,6 4,8 6,0 6,0 9,9 7,7 0,3 9,7 5", "9 9,7 1,2 2,2 10,8 8,6 5,8 10,0 4,11 3,9 7,1 11", "0 3,3 5,4 8,9 4,6 10,3 4,1 7,3 10,3 8,11 3,3 1", "2 10,7 2,11 0,10 6,9 9,3 5,4 9,2 10,5 8,7 4,9 4", "5 7,7 11,7 6,9 0,0 9,1 7,3 3,1 11,9 9,3 0,7 5,9 4", "3 11,11 2,6 5,6 4,0 4,3 3,7 3,11 5,11 10,4 9,10 1", "1 5,8 5,10 0,1 8,4 6,8 11,4 5,5 11,4 9,10 6,5 9", "6 6,5 4,0 9,5 8,1 6,6 8,0 9,7 10,5 0,3 8,3 7,10 10", "1 4,10 11,6 11,1 4,9 10,10 3,5 5,3 5,11 3,3 7,1 8", "10 5,1 10,1 4,10 0,0 3,0 3,8 0,1 0,9 0,6 0,2 3,2 6", "2 9,10 10,6 7,6 5,8 0,10 0,4 7,1 5,4 11,2 9,0 0", "3 3,1 1,5 8,7 10,11 0,7 1,6 8,7 10,3 7,7 8,5 8,2 9", "8 11,8 7,6 3,1 9,1 7,8 0,10 1,6 8,11 6,0 5,10 1", "10 8,11 4,6 8,3 8,9 1,1 10,6 3,0 5,8 10,1 2,8 5", "3 3,7 1,3 0,3 9,11 0,5 6,7 8,10 3,1 3,3 6,8 9,1 0", "7 7,7 3,2 7,0 4,6 5,3 2,6 3,8 1,9 5,9 7,9 10,5 0", "1 10,3 10,8 5,10 1,11 6,4 8,2 7,3 0,4 4,1 10,3 9", "2 7,6 0,8 6,11 5,2 3,2 5,9 4,3 8,7 5,7 11,6 1,2 9", "4 11,8 0,0 8,9 11,9 11,9 11,6 11,4 6,4 11,5 7,0 7", "4 8,8 7,10 6,2 3,3 10,5 0,11 3,8 10,3 4,8 3,0 0", "5 7,3 4,9 8,2 2,10 0,5 7,1 2,6 10,8 4,7 10,5 2,1 2", "8 3,8 7,5 8,8 2,3 3,7 1,5 0,8 1,8 1,9 11,2 5,6 6", "9 3,5 1,0 7,7 7,8 5,0 0,3 2,2 5,6 11,3 1,3 0,5 2", "5 3,3 7,6 8,4 2,0 4,11 5,1 1,7 5,8 7,9 9,0 7,2 5" };
    assertEquals(1, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case49() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "8 5,6 5,2 3,4 7,5 5,4 7,7 11,3 3,4 4,0 11,1 3,3 9", "10 0,3 3,11 10,5 4,10 9,1 0,9 4,0 11,6 7,4 8,3 6", "2 0,11 0,5 10,11 0,8 6,2 3,4 3,11 1,5 6,11 9,8 1", "0 3,10 5,5 7,0 4,5 7,3 1,5 9,2 1,4 2,0 10,3 2,1 6", "9 2,1 2,9 10,2 9,8 11,11 5,11 1,10 4,9 0,10 1,6 6", "0 8,3 3,6 5,11 1,4 6,5 8,3 3,3 2,6 8,8 0,2 0,4 6", "11 8,8 8,1 8,0 5,9 6,3 6,7 11,6 11,0 2,4 5,8 9,5 0", "6 6,2 4,9 2,10 7,1 3,0 0,11 11,2 8,7 2,10 11,7 5", "8 0,8 6,0 0,8 4,9 4,1 8,0 9,5 2,7 8,5 2,2 5,6 6", "9 5,4 2,0 11,0 4,4 5,3 0,2 1,11 8,9 3,8 10,1 2,7 9", "10 1,11 7,9 2,4 8,10 7,4 3,7 8,9 10,3 6,9 0,1 0", "8 4,10 11,4 9,4 3,11 3,9 9,10 8,7 0,5 4,5 5,3 0", "6 11,0 2,8 9,1 8,9 7,10 5,9 3,11 3,4 10,9 2,6 4", "1 11,7 4,6 7,10 7,1 1,8 8,2 10,2 10,3 10,0 2,3 3", "0 3,5 7,5 1,0 8,9 1,5 6,7 11,8 3,8 1,8 5,8 3,2 5", "10 10,5 11,5 7,10 9,0 2,5 8,6 9,2 2,1 9,2 5,9 9", "9 4,1 7,6 1,0 6,9 6,1 3,1 4,4 3,2 5,10 6,0 10,9 3", "6 8,8 9,1 2,9 3,5 1,5 0,1 0,3 0,3 10,2 10,9 4,3 0", "11 6,2 11,10 7,7 2,2 6,11 10,8 3,4 6,6 8,1 5,9 3", "9 2,4 11,1 8,7 11,4 8,2 10,3 2,6 10,5 9,11 3,9 0", "0 7,11 1,6 7,5 3,11 5,4 5,2 7,3 11,4 6,4 2,11 6", "0 1,6 9,5 2,7 0,4 9,4 4,7 5,0 4,1 10,0 0,0 4,2 2", "10 3,5 10,9 10,6 6,10 3,8 3,7 4,11 0,9 4,4 11,2 0", "9 2,3 11,5 3,10 5,9 0,5 9,4 2,10 9,7 7,2 6,6 3,3 7", "2 2,4 4,2 6,9 6,1 8,2 3,7 11,0 11,8 3,4 4,8 10", "7 10,11 2,10 4,5 6,5 7,1 11,7 11,8 2,0 1,1 0,1 10", "0 4,10 2,4 8,4 2,0 9,8 1,0 5,7 4,5 7,9 0,4 5,8 7", "10 1,0 2,10 8,8 8,8 0,3 9,1 9,8 9,11 6,4 7,6 7", "2 2,7 2,7 7,7 4,2 7,7 9,0 4,6 5,11 11,7 2,3 11,4 3", "0 10,7 7,5 2,2 3,11 9,8 1,8 3,2 3,8 3,6 5,3 10,0 2", "6 8,10 0,2 6,0 3,11 4,1 9,11 0,5 10,2 10,10 2,6 5", "1 2,1 3,0 1,9 6,8 5,2 5,11 7,1 7,3 2,10 9,3 6,8 3", "8 0,11 4,8 9,0 1,4 3,9 4,9 11,1 11,3 0,10 4,5 2", "0 9,2 1,10 10,10 7,4 10,8 4,2 3,8 4,7 4,4 8,10 11", "5 1,4 1,9 3,3 5,6 11,11 2,1 9,2 3,7 9,4 11,6 0,3 1", "0 1,5 5,9 11,3 2,5 2,1 0,0 4,11 6,9 1,9 4,1 4,0 2", "3 11,2 9,5 7,7 2,0 7,1 8,11 8,5 1,3 10,3 2,6 8,9 3", "7 4,3 9,11 2,11 11,8 11,0 3,9 6,10 8,2 1,7 0,7 1", "10 5,10 11,10 0,9 5,10 5,2 9,10 0,3 7,6 10,3 9,0 8", "9 7,10 0,6 6,8 6,11 5,1 4,4 4,9 3,0 8,4 4,10 3", "7 11,2 10,5 1,1 7,5 2,11 2,7 11,8 3,5 1,5 2,4 1", "10 10,6 4,5 4,2 5,11 0,2 0,11 5,4 6,0 5,11 10", "8 2,10 10,5 0,9 8,5 11,9 8,1 10,2 5,5 0,5 0,0 11", "0 9,3 3,10 10,4 8,10 3,4 3,7 1,5 5,8 5,3 11,10 8", "2 9,11 8,2 8,5 4,6 0,7 8,7 11,5 7,6 0,5 10,9 0,0 6", "10 6,8 10,7 1,8 3,4 1,8 11,6 8,10 4,5 4,11 5,2 3", "1 7,11 4,7 6,5 0,8 1,2 0,10 4,2 2,9 7,10 3,2 8,8 3", "3 10,3 1,8 8,11 7,11 2,4 3,10 11,11 4,9 3,5 2,7 11", "10 0,6 7,8 3,3 8,6 2,11 2,7 2,4 5,2 8,7 1,11 0,2 5", "10 7,2 10,3 7,3 2,6 10,4 0,5 7,10 10,7 9,2 0,10 5" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case50() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "7 4,6 10,1 9,4 9,4 2,11 2,11 8,8 11,2 2,10 4,0 10", "7 2,11 8,3 11,2 8,5 9,9 11,0 3,10 4,8 9,8 3,8 5", "2 11,3 3,1 11,4 2,6 7,3 8,7 9,6 6,9 9,5 5,1 7,11 3", "1 8,11 8,8 7,3 10,11 5,1 1,2 9,10 9,7 3,0 1,11 4", "10 3,5 10,9 7,5 8,0 10,6 1,5 9,2 5,5 11,11 5,9 10", "3 3,9 4,2 7,3 9,11 10,9 3,4 3,3 2,3 0,4 11,8 1", "11 7,10 3,11 10,11 2,6 1,1 5,6 2,0 0,3 0,1 3,11 6", "2 1,7 9,11 3,3 9,1 4,0 2,1 9,9 1,5 0,6 7,0 6,7 9", "7 11,6 5,3 3,1 11,10 10,8 8,11 6,11 6,5 4,9 1,6 8", "0 6,10 0,4 8,5 1,3 7,5 2,5 5,5 2,10 4,9 0,10 3,8 2", "3 4,10 4,4 5,0 3,10 4,4 7,7 7,10 6,6 4,3 9,7 0,0 1", "6 4,11 0,10 11,5 4,2 5,4 5,3 7,7 8,6 6,6 9,3 1", "2 10,7 11,3 2,11 2,10 4,6 11,3 2,0 3,10 1,0 5,10 3", "11 4,9 0,2 2,4 4,0 1,3 5,2 9,10 4,0 3,1 1,9 2,1 4", "9 0,11 3,3 8,6 0,10 2,3 6,8 2,9 7,9 3,8 7,8 0,10 7", "0 4,6 5,9 0,7 0,4 3,4 1,10 1,6 2,11 11,0 9,0 5", "2 6,0 11,3 4,3 2,5 2,1 5,11 6,11 4,4 4,11 7,2 2", "0 10,1 4,1 5,1 8,1 8,11 2,9 2,8 6,3 10,10 0,0 11", "1 1,5 0,1 4,0 10,7 4,4 0,11 5,0 8,7 0,1 7,10 3,3 0", "9 10,0 3,0 3,0 1,3 3,8 8,2 1,9 1,0 5,10 8,0 6,11 9", "11 7,0 8,11 5,5 8,5 3,6 1,4 10,0 2,8 1,1 9,4 5", "9 8,8 6,5 8,6 6,11 9,5 3,4 0,4 0,11 6,5 5,4 3,2 0", "5 8,6 7,5 2,9 3,11 10,6 4,11 8,10 4,1 7,2 9,0 9", "11 6,4 1,3 8,9 11,3 3,1 10,6 5,6 7,9 0,0 2,3 9,0 4", "3 6,11 6,6 6,1 6,1 8,2 3,7 3,3 11,5 2,3 6,4 9,2 8", "1 3,1 6,11 0,1 7,10 5,5 10,11 7,8 0,0 7,6 1,8 8", "3 8,5 10,0 1,0 1,2 1,10 2,5 1,10 8,6 4,2 3,5 3", "10 7,11 4,2 9,2 4,9 4,0 1,9 4,8 11,4 2,4 4,11 5", "3 11,8 2,1 1,11 6,11 3,0 2,7 6,11 3,1 1,5 3,10 10", "2 8,8 4,7 6,11 11,6 2,4 3,11 9,8 4,1 1,8 9,0 0,6 3", "7 10,8 5,3 9,10 11,5 3,11 10,0 6,9 5,3 1,1 1,9 2", "0 4,11 4,7 2,7 1,6 2,7 9,9 5,8 5,8 9,4 4,4 9,3 2", "4 6,8 1,8 10,0 0,11 3,4 2,10 11,8 2,5 0,6 2,5 5", "9 3,5 4,10 6,6 1,7 0,8 2,8 6,3 6,7 3,11 5,3 5,4 6", "5 1,3 10,3 7,11 6,9 6,3 6,10 9,6 7,1 4,5 2,11 7", "9 3,8 1,1 5,11 9,7 7,9 0,3 2,9 9,3 4,0 3,6 3,6 0", "5 5,8 6,8 1,11 3,3 8,4 11,2 8,1 3,10 10,8 5,9 3", "6 5,0 5,2 9,9 10,3 9,5 4,4 5,6 2,4 11,4 8,10 2", "11 6,3 4,0 6,3 4,6 2,1 11,6 2,0 2,11 2,1 2,5 0", "4 2,4 0,1 1,4 6,2 2,2 3,6 8,8 4,4 1,2 8,11 10,3 2", "0 5,8 3,4 8,3 11,10 6,0 7,9 6,9 8,3 4,10 11,6 2", "9 3,2 5,2 8,11 8,8 10,11 4,9 5,6 8,9 3,7 0,10 4", "7 8,5 9,4 2,3 4,1 11,4 7,3 6,3 0,0 7,6 10,11 5,5 4", "6 8,6 1,5 11,1 10,3 1,10 11,3 0,5 11,10 0,8 6,4 0", "1 6,11 9,7 6,5 7,0 5,4 10,4 2,7 2,9 8,6 6,11 3,2 3", "11 6,5 8,1 4,11 7,2 6,4 0,5 2,8 2,1 5,2 10,3 8,1 9", "6 6,7 11,4 3,3 1,1 7,2 4,9 9,2 7,2 0,5 2,7 6,7 6", "5 1,6 6,11 8,10 9,5 6,2 7,2 4,4 11,7 10,10 2,0 1", "2 5,10 2,7 2,10 3,3 1,0 4,5 11,10 10,0 2,4 2,9 0", "8 0,3 2,5 11,7 5,11 8,10 0,5 6,11 9,11 0,3 3,0 10" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case51() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "7 3,7 2,4 2,8 0,0 8,7 8,5 2,8 1,6 9,5 7,4 3,3 2", "0 2,10 0,4 9,10 10,9 2,8 9,9 0,2 7,8 11,1 5,8 4", "0 3,5 8,2 4,0 7,2 10,4 3,9 6,7 5,4 5,5 2,4 6,2 2", "1 2,7 10,2 0,7 11,6 9,1 4,11 1,10 0,1 8,4 0,0 5", "1 5,0 11,7 6,3 0,2 10,10 5,3 1,2 5,11 1,2 7,3 0", "10 2,2 1,11 1,6 8,6 6,7 7,1 4,3 8,10 8,1 7,5 6,7 5", "4 2,6 7,7 8,11 11,4 6,1 4,4 6,7 5,10 4,7 8,0 4,2 3", "9 6,5 8,11 9,7 9,3 1,6 8,2 6,8 0,2 9,4 7,3 8,10 6", "2 10,8 11,7 9,2 7,11 7,4 5,7 7,8 1,8 3,3 2,2 6,0 5", "7 8,0 10,8 1,0 7,1 9,11 3,11 1,2 3,1 1,3 7,11 4", "5 3,7 8,5 6,1 7,3 7,6 9,6 4,2 7,7 7,7 1,10 3,1 0", "2 11,6 2,6 10,4 8,3 10,1 7,7 4,4 1,9 1,0 4,7 9", "4 6,10 7,7 7,4 10,4 6,11 0,2 10,1 5,6 0,4 0,1 8", "9 2,10 1,4 4,0 5,1 6,4 2,0 8,11 0,3 5,2 2,0 11", "4 10,1 7,1 8,10 6,8 5,4 7,1 1,2 1,7 7,10 2,4 9,4 6", "1 8,2 0,1 6,8 8,2 0,10 3,11 1,10 0,8 4,10 1,8 11", "9 7,10 1,5 3,5 7,0 3,10 1,3 2,8 11,9 8,3 7,11 6", "11 0,2 1,4 6,2 3,0 8,4 2,6 0,9 6,11 11,9 8,5 4,5 5", "4 4,11 2,9 6,5 10,11 3,7 10,9 0,9 11,3 4,0 8,10 6", "9 10,7 4,5 2,0 1,7 4,9 5,2 10,6 3,0 0,1 6,8 6,9 7", "0 9,7 4,11 8,1 4,2 6,2 9,11 6,7 8,7 7,11 1,11 0", "2 2,7 4,9 8,2 4,9 8,0 10,0 9,3 0,4 4,2 2,9 1,4 10", "1 11,10 7,11 11,7 6,2 11,1 5,3 0,8 7,7 4,10 6,6 2", "7 7,11 1,3 1,2 11,8 0,10 2,6 10,9 5,0 11,7 5,7 1", "8 0,9 3,8 9,0 2,2 3,11 1,6 2,11 3,10 2,4 1,8 9", "11 5,10 7,3 9,9 0,7 10,6 6,11 4,10 6,3 3,5 7,4 4", "5 9,11 7,5 3,11 5,1 11,8 4,6 8,5 11,11 3,7 7,0 9", "1 11,0 8,6 5,11 11,6 3,0 8,11 4,2 10,7 10,6 3,2 11", "11 10,8 9,9 1,9 10,7 4,10 7,8 6,0 6,3 0,8 2,3 0", "11 11,9 1,10 4,5 7,9 2,4 6,9 4,6 1,0 5,7 2,1 3,0 6", "3 5,10 0,10 8,5 9,4 3,7 4,0 11,7 1,0 3,1 0,11 9", "1 2,2 1,2 6,5 0,3 9,8 5,2 3,9 1,10 1,7 0,11 11,4 3", "11 9,6 2,1 7,6 5,6 6,3 5,7 10,4 6,9 3,7 9,3 11,8 8", "5 8,2 11,11 0,5 10,11 1,3 8,4 6,1 3,8 2,5 5,5 0", "7 6,8 10,1 8,4 0,4 9,9 8,9 2,10 3,8 3,9 7,4 2,1 11", "2 2,4 7,9 2,0 2,2 2,7 10,5 11,6 9,4 10,6 6,5 5,6 5", "1 0,1 7,7 5,9 0,9 3,3 7,9 9,7 10,11 3,3 6,3 4,8 11", "3 1,2 5,6 11,0 11,6 11,5 5,9 5,11 9,10 7,0 2,8 11", "6 11,7 0,3 4,6 8,2 8,1 9,6 11,10 2,8 9,6 7,0 11", "4 10,0 6,1 3,6 2,5 7,8 0,10 4,2 7,0 1,11 5,9 2,0 5", "10 4,10 7,8 0,6 2,1 1,3 9,1 1,11 2,10 5,3 3,0 10", "3 5,0 1,4 0,6 7,6 2,7 11,1 6,4 5,0 6,7 8,2 6,0 5", "5 1,10 3,0 2,4 6,9 6,8 7,3 4,2 9,2 11,5 11,1 5", "10 2,9 1,3 8,9 2,7 11,10 4,8 3,2 3,5 11,2 3,1 9", "10 7,8 1,11 6,9 5,11 9,8 7,10 4,3 0,0 4,3 5,3 3", "7 4,10 1,7 11,5 11,9 1,10 3,11 4,10 6,0 5,9 1,5 9", "8 3,8 5,10 1,10 9,10 3,9 1,9 6,5 6,9 3,5 1,8 6,8 7", "11 7,11 1,7 4,0 6,11 2,7 10,0 1,1 1,3 8,6 11,4 10", "6 11,3 0,6 4,5 10,5 6,7 0,3 10,8 9,10 2,3 1,8 3", "3 1,7 8,5 5,11 4,9 9,1 5,2 6,9 0,2 2,6 11,9 11" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case52() {
    int rows = 12;
    int cols = 12;
    String[] cutouts = { "8 1,9 3,3 3,7 9,10 2,1 1,10 9,5 4,9 1,3 11,2 9,6 9", "1 0,7 3,10 11,5 1,10 7,9 1,4 6,9 4,4 6,7 4,6 6", "3 6,0 8,10 3,3 6,11 11,2 5,4 7,9 1,0 3,6 0,10 7", "9 11,7 3,2 6,8 4,6 4,10 10,7 9,1 9,3 9,9 6,9 6", "1 4,5 10,0 6,7 7,2 2,4 11,1 9,2 4,0 10,8 0,10 6", "8 11,6 3,6 6,7 2,6 6,0 9,3 8,5 6,5 10,2 3,0 10,9 3", "5 3,3 2,9 1,5 5,8 11,11 3,2 7,0 3,6 2,3 4,10 7", "0 9,8 6,11 5,8 6,11 9,0 3,7 4,10 8,6 11,4 6,11 11", "4 1,4 10,0 10,6 2,8 3,11 9,3 7,3 9,5 6,1 7,3 9,9 1", "2 4,9 8,2 10,8 6,0 3,9 1,5 9,11 4,4 0,10 2,3 4,9 2", "3 10,7 3,9 9,10 3,2 1,11 3,6 10,11 0,7 7,9 8,11 7", "6 7,9 9,11 11,9 6,5 7,4 2,2 6,0 6,0 3,5 3,3 6,8 0", "1 5,3 1,6 2,6 3,10 7,7 8,5 1,7 5,11 11,0 7,0 5,0 5", "11 6,9 0,3 5,11 3,1 5,2 5,5 3,9 7,4 0,5 5,1 6,10 5", "11 2,9 5,2 3,1 1,4 0,7 8,4 0,9 11,6 11,0 6,11 9", "8 5,7 2,1 7,7 6,5 11,11 4,1 8,1 8,11 2,9 10,2 5", "7 11,10 1,2 11,6 8,6 10,7 8,5 4,2 7,0 7,10 3,9 8", "7 8,4 9,9 10,9 10,10 5,10 7,2 8,0 5,0 8,5 2,4 7", "6 0,1 6,6 11,11 3,3 2,11 1,4 5,6 0,0 8,1 10,10 1", "5 4,4 1,0 10,9 5,2 0,10 2,9 7,6 10,4 3,3 9,10 5", "9 0,10 5,5 2,5 6,5 8,11 4,0 3,11 11,3 10,5 4,4 1", "6 3,0 6,7 2,10 0,11 11,2 0,10 1,1 11,0 3,10 6,8 11", "8 11,6 4,10 2,7 8,9 4,4 11,0 11,6 9,2 7,2 8,4 6", "10 3,10 3,0 7,7 0,3 11,4 11,4 1,3 11,0 6,3 4,7 9", "2 11,3 6,2 10,11 10,9 2,6 1,10 6,4 3,8 11,1 1,4 0", "3 8,4 4,4 7,2 3,11 5,10 0,8 1,10 4,4 1,4 6,5 1,4 9", "9 7,1 5,0 5,11 11,0 5,11 4,3 4,8 1,1 5,8 2,11 3", "10 11,5 9,0 3,11 4,11 1,9 3,0 1,5 9,8 7,9 1,2 7", "3 4,10 5,6 10,6 7,8 5,7 1,4 5,8 4,1 6,2 1,9 9,0 5", "9 3,11 7,3 3,6 8,10 2,2 6,5 1,9 6,1 1,3 6,4 0,5 6", "6 1,10 5,6 2,8 2,6 1,2 11,5 0,0 4,7 0,0 1,0 11,9 8", "11 3,10 4,9 11,4 7,3 4,8 5,9 5,6 2,0 6,8 7,0 5,6 5", "4 10,9 6,4 0,3 5,10 11,0 8,6 10,10 7,6 2,2 3,3 8", "5 8,1 11,9 4,9 11,4 10,4 3,6 7,6 7,0 0,6 8,6 6,4 2", "3 4,9 1,7 10,7 9,11 8,3 11,2 5,11 10,2 7,7 4,9 3", "10 6,11 0,9 11,10 3,8 6,5 4,5 0,1 1,2 11,2 9,9 11", "7 1,8 2,2 3,4 2,8 5,1 10,11 3,10 1,9 3,4 8,6 11", "0 9,6 8,3 2,6 10,1 9,0 0,3 1,3 9,4 6,9 0,8 5,0 10", "11 1,2 3,9 3,3 0,0 5,10 11,10 3,5 5,5 5,5 5,11 1", "8 11,0 5,3 1,1 5,2 9,1 5,9 6,11 0,10 9,3 0,4 8,9 5", "9 10,2 1,6 0,1 0,1 1,8 3,4 3,2 7,9 9,6 9,4 4,0 1", "9 2,9 3,11 0,10 6,7 3,6 10,10 3,8 3,8 8,3 11,11 10", "8 5,6 10,0 3,1 10,4 10,4 1,4 9,4 10,10 5,9 11,2 4", "11 0,8 10,10 6,3 9,10 11,9 7,7 11,3 11,3 5,9 0,4 7", "0 8,4 6,8 9,0 7,8 10,5 6,5 11,10 2,4 5,2 9,4 3,8 4", "5 5,2 2,6 0,6 0,8 10,0 4,2 10,7 6,9 0,5 6,4 0,6 6", "7 3,4 5,7 4,4 4,4 5,2 1,6 1,9 1,11 9,11 3,9 4,7 10", "11 0,10 2,0 8,3 11,1 0,4 3,0 8,11 4,10 9,5 5,9 3", "4 0,11 11,7 7,6 7,10 5,9 9,9 5,4 0,10 5,3 5,9 7", "7 7,4 4,3 7,10 2,3 6,2 8,10 5,7 5,4 8,5 6,6 8,2 7" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case53() {
    int rows = 1;
    int cols = 61;
    String[] cutouts = { "0 52,0 17,0 1,0 57,0 46,0 34,0 25,0 6,0 7,0 10", "0 14,0 44,0 43,0 45,0 44,0 23,0 26,0 5,0 51,0 6", "0 38,0 55,0 25,0 39,0 16,0 19,0 13,0 1,0 17,0 13", "0 24,0 23,0 46,0 48,0 28,0 8,0 0,0 45,0 31,0 12", "0 23,0 42,0 34,0 52,0 21,0 28,0 45,0 34,0 41,0 13", "0 14,0 49,0 34,0 10,0 41,0 41,0 45,0 37,0 41,0 9", "0 9,0 20,0 54,0 29,0 59,0 6,0 29,0 10,0 4,0 9,0 12", "0 43,0 33,0 6,0 27,0 5,0 25,0 54,0 0,0 10,0 14,0 4", "0 52,0 53,0 18,0 0,0 40,0 59,0 38,0 3,0 3,0 38", "0 39,0 57,0 51,0 57,0 17,0 46,0 3,0 21,0 51,0 17", "0 55,0 39,0 23,0 50,0 57,0 1,0 57,0 40,0 12,0 51", "0 6,0 57,0 40,0 10,0 28,0 15,0 59,0 18,0 38,0 28", "0 55,0 55,0 44,0 15,0 4,0 6,0 9,0 2,0 41,0 6,0 45", "0 15,0 27,0 24,0 57,0 21,0 42,0 34,0 52,0 30,0 23", "0 32,0 9,0 4,0 10,0 28,0 25,0 47,0 51,0 3,0 23", "0 16,0 11,0 10,0 25,0 2,0 35,0 28,0 22,0 8,0 11", "0 37,0 11,0 5,0 48,0 20,0 52,0 56,0 15,0 60,0 59", "0 44,0 37,0 32,0 44,0 10,0 20,0 54,0 13,0 30,0 8", "0 12,0 28,0 33,0 27,0 58,0 18,0 49,0 6,0 46,0 31", "0 25,0 42,0 9,0 47,0 1,0 0,0 10,0 52,0 56,0 52,0 3", "0 27,0 4,0 30,0 51,0 28,0 10,0 57,0 20,0 1,0 57", "0 55,0 42,0 15,0 50,0 40,0 4,0 50,0 15,0 21,0 23", "0 49,0 53,0 3,0 15,0 34,0 59,0 54,0 46,0 14,0 49", "0 21,0 21,0 29,0 58,0 17,0 46,0 42,0 31,0 58,0 41", "0 56,0 26,0 36,0 3,0 45,0 48,0 1,0 24,0 20,0 44", "0 30,0 2,0 25,0 43,0 47,0 0,0 35,0 14,0 21,0 30", "0 44,0 29,0 16,0 24,0 22,0 3,0 8,0 1,0 37,0 34,0 0", "0 57,0 28,0 1,0 41,0 59,0 44,0 33,0 13,0 19,0 59", "0 14,0 46,0 34,0 33,0 21,0 45,0 24,0 42,0 17,0 24", "0 44,0 18,0 25,0 50,0 10,0 43,0 38,0 36,0 24,0 31", "0 7,0 58,0 37,0 3,0 56,0 6,0 9,0 26,0 28,0 33,0 53", "0 56,0 57,0 34,0 10,0 29,0 22,0 0,0 59,0 21,0 56", "0 41,0 32,0 12,0 37,0 46,0 5,0 7,0 45,0 13,0 26", "0 8,0 60,0 40,0 51,0 46,0 9,0 23,0 29,0 16,0 13", "0 30,0 33,0 27,0 27,0 55,0 36,0 45,0 40,0 39,0 26", "0 5,0 0,0 54,0 48,0 49,0 37,0 19,0 1,0 18,0 52", "0 5,0 7,0 15,0 45,0 50,0 49,0 56,0 38,0 35,0 29", "0 57,0 0,0 56,0 6,0 42,0 34,0 5,0 52,0 21,0 3,0 20", "0 36,0 2,0 48,0 39,0 0,0 58,0 40,0 36,0 0,0 15", "0 26,0 33,0 39,0 56,0 39,0 44,0 36,0 54,0 60,0 1", "0 42,0 60,0 56,0 49,0 16,0 29,0 13,0 37,0 21,0 26", "0 15,0 48,0 17,0 60,0 0,0 47,0 18,0 25,0 48,0 43", "0 57,0 39,0 18,0 54,0 25,0 32,0 4,0 42,0 10,0 27", "0 49,0 16,0 13,0 22,0 24,0 26,0 0,0 54,0 46,0 35", "0 39,0 41,0 11,0 21,0 43,0 10,0 24,0 23,0 15,0 39", "0 35,0 29,0 15,0 57,0 56,0 2,0 60,0 14,0 44,0 35", "0 31,0 53,0 26,0 18,0 39,0 19,0 48,0 3,0 16,0 35", "0 5,0 43,0 20,0 42,0 56,0 56,0 59,0 7,0 49,0 51", "0 13,0 37,0 25,0 35,0 36,0 43,0 58,0 51,0 47,0 36", "0 4,0 52,0 40,0 20,0 12,0 24,0 40,0 58,0 47,0 12" };
    assertEquals(0, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case54() {
    int rows = 1;
    int cols = 178;
    String[] cutouts = { "0 173,0 46,0 71,0 149,0 72,0 147,0 67,0 92,0 136", "0 41,0 74,0 114,0 95,0 51,0 81,0 151,0 165,0 151", "0 130,0 105,0 33,0 112,0 22,0 153,0 93,0 39,0 71", "0 41,0 176,0 125,0 43,0 146,0 44,0 69,0 39,0 76", "0 17,0 79,0 162,0 86,0 20,0 153,0 124,0 61,0 162", "0 8,0 144,0 0,0 106,0 60,0 83,0 91,0 92,0 106", "0 18,0 152,0 54,0 160,0 32,0 89,0 42,0 137,0 79", "0 160,0 81,0 51,0 92,0 132,0 45,0 107,0 177,0 53", "0 162,0 40,0 155,0 74,0 2,0 139,0 77,0 37,0 82", "0 157,0 155,0 100,0 93,0 137,0 29,0 145,0 47,0 32", "0 152,0 88,0 73,0 160,0 70,0 86,0 95,0 68,0 132", "0 17,0 137,0 139,0 117,0 81,0 64,0 112,0 4,0 98", "0 50,0 81,0 23,0 26,0 170,0 67,0 120,0 122,0 177", "0 96,0 172,0 82,0 28,0 26,0 89,0 156,0 133,0 23", "0 119,0 128,0 150,0 70,0 51,0 164,0 111,0 55,0 19", "0 117,0 169,0 89,0 13,0 79,0 146,0 138,0 0,0 24", "0 135,0 32,0 43,0 132,0 63,0 114,0 94,0 174,0 46", "0 10,0 3,0 116,0 92,0 123,0 10,0 117,0 38,0 100", "0 134,0 10,0 52,0 118,0 97,0 60,0 168,0 132,0 84", "0 177,0 135,0 80,0 51,0 159,0 28,0 88,0 174,0 157", "0 138,0 136,0 36,0 1,0 134,0 150,0 149,0 104,0 44", "0 83,0 136,0 107,0 172,0 40,0 3,0 66,0 20,0 78", "0 25,0 49,0 88,0 48,0 64,0 16,0 79,0 119,0 65,0 27", "0 142,0 4,0 145,0 79,0 108,0 87,0 34,0 37,0 37", "0 126,0 36,0 174,0 5,0 86,0 16,0 94,0 25,0 79,0 11", "0 24,0 169,0 159,0 44,0 68,0 46,0 149,0 173,0 120", "0 30,0 80,0 112,0 8,0 60,0 104,0 86,0 123,0 15", "0 17,0 138,0 171,0 164,0 79,0 141,0 8,0 7,0 154", "0 166,0 57,0 136,0 133,0 28,0 121,0 125,0 147", "0 33,0 169,0 103,0 17,0 159,0 163,0 53,0 133,0 68", "0 46,0 139,0 100,0 110,0 167,0 161,0 103,0 168", "0 80,0 160,0 12,0 123,0 147,0 171,0 161,0 8,0 109", "0 74,0 58,0 154,0 170,0 45,0 162,0 54,0 116,0 94", "0 90,0 52,0 39,0 136,0 50,0 25,0 35,0 142,0 152", "0 169,0 59,0 91,0 19,0 78,0 162,0 143,0 29,0 127", "0 103,0 83,0 35,0 173,0 49,0 117,0 140,0 95,0 73", "0 19,0 14,0 14,0 108,0 117,0 32,0 163,0 143,0 119", "0 161,0 143,0 155,0 40,0 164,0 85,0 88,0 108,0 161", "0 40,0 167,0 8,0 153,0 173,0 145,0 73,0 95,0 104", "0 154,0 101,0 170,0 118,0 41,0 139,0 10,0 133,0 0", "0 168,0 169,0 20,0 116,0 138,0 95,0 97,0 139,0 40", "0 137,0 160,0 9,0 7,0 58,0 19,0 95,0 155,0 6,0 151", "0 123,0 106,0 100,0 120,0 121,0 115,0 103,0 75", "0 91,0 170,0 115,0 149,0 24,0 11,0 4,0 119,0 9", "0 136,0 61,0 54,0 135,0 2,0 174,0 127,0 32,0 46", "0 153,0 10,0 24,0 12,0 121,0 157,0 148,0 53,0 112", "0 145,0 91,0 128,0 125,0 139,0 163,0 159,0 48", "0 25,0 102,0 16,0 6,0 44,0 63,0 23,0 144,0 147", "0 27,0 124,0 106,0 33,0 166,0 168,0 137,0 175", "0 110,0 2,0 128,0 108,0 176,0 160,0 153,0 68,0 69" };
    assertEquals(1, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case55() {
    int rows = 1;
    int cols = 54;
    String[] cutouts = { "0 53,0 27,0 16,0 33,0 5,0 46,0 10,0 35,0 38,0 31", "0 7,0 5,0 24,0 36,0 51,0 7,0 4,0 23,0 20,0 14,0 15", "0 18,0 48,0 5,0 32,0 44,0 41,0 13,0 4,0 40,0 10", "0 45,0 15,0 46,0 44,0 48,0 2,0 39,0 28,0 2,0 50", "0 27,0 42,0 23,0 10,0 15,0 51,0 37,0 34,0 27,0 11", "0 40,0 5,0 45,0 47,0 27,0 53,0 24,0 23,0 16,0 52", "0 9,0 16,0 28,0 29,0 42,0 31,0 38,0 39,0 33,0 34", "0 53,0 24,0 2,0 17,0 2,0 18,0 2,0 40,0 0,0 7,0 39", "0 8,0 53,0 39,0 28,0 43,0 7,0 39,0 16,0 26,0 50", "0 22,0 11,0 32,0 39,0 2,0 25,0 22,0 46,0 31,0 19", "0 9,0 17,0 51,0 4,0 39,0 8,0 36,0 4,0 23,0 17,0 27", "0 44,0 41,0 0,0 12,0 34,0 10,0 47,0 48,0 27,0 5", "0 10,0 29,0 31,0 8,0 53,0 2,0 6,0 53,0 0,0 1,0 13", "0 11,0 42,0 25,0 1,0 31,0 29,0 46,0 26,0 36,0 35", "0 37,0 23,0 18,0 43,0 45,0 42,0 30,0 9,0 48,0 5", "0 20,0 50,0 31,0 52,0 28,0 15,0 51,0 22,0 42,0 45", "0 31,0 48,0 2,0 32,0 12,0 38,0 39,0 7,0 1,0 49", "0 39,0 41,0 31,0 8,0 44,0 36,0 10,0 14,0 35,0 17", "0 39,0 40,0 29,0 33,0 27,0 4,0 50,0 14,0 11,0 50", "0 1,0 20,0 42,0 28,0 34,0 15,0 10,0 0,0 13,0 28", "0 43,0 0,0 22,0 25,0 51,0 27,0 10,0 43,0 53,0 22", "0 18,0 7,0 18,0 3,0 36,0 19,0 33,0 3,0 52,0 49", "0 37,0 23,0 41,0 37,0 2,0 3,0 22,0 51,0 47,0 29", "0 30,0 21,0 23,0 43,0 12,0 23,0 8,0 25,0 52,0 5", "0 2,0 28,0 52,0 2,0 4,0 6,0 0,0 5,0 20,0 7,0 8", "0 52,0 4,0 8,0 7,0 6,0 52,0 46,0 37,0 28,0 37,0 23", "0 18,0 7,0 44,0 39,0 30,0 10,0 44,0 9,0 49,0 52", "0 24,0 23,0 28,0 53,0 49,0 14,0 18,0 39,0 44,0 13", "0 22,0 42,0 32,0 31,0 29,0 52,0 30,0 32,0 48,0 33", "0 27,0 46,0 53,0 17,0 43,0 35,0 37,0 4,0 8,0 14", "0 10,0 41,0 35,0 53,0 28,0 29,0 35,0 23,0 10,0 6", "0 22,0 10,0 15,0 2,0 24,0 36,0 11,0 32,0 24,0 6", "0 48,0 34,0 27,0 48,0 14,0 3,0 1,0 16,0 17,0 42", "0 0,0 42,0 42,0 47,0 44,0 45,0 53,0 20,0 13,0 16", "0 33,0 39,0 3,0 47,0 39,0 6,0 6,0 37,0 45,0 7,0 38", "0 1,0 0,0 27,0 8,0 42,0 12,0 46,0 12,0 26,0 24", "0 30,0 9,0 5,0 16,0 29,0 33,0 30,0 24,0 12,0 17", "0 10,0 36,0 2,0 21,0 16,0 35,0 5,0 50,0 48,0 0", "0 46,0 42,0 31,0 17,0 11,0 52,0 29,0 11,0 17,0 27", "0 43,0 53,0 25,0 7,0 27,0 39,0 34,0 4,0 47,0 28", "0 41,0 40,0 32,0 31,0 21,0 39,0 4,0 6,0 44,0 33", "0 26,0 29,0 51,0 52,0 40,0 23,0 30,0 38,0 47,0 25", "0 41,0 38,0 43,0 38,0 7,0 0,0 4,0 25,0 0,0 10,0 29", "0 33,0 25,0 24,0 37,0 12,0 40,0 3,0 36,0 29,0 22", "0 40,0 27,0 42,0 52,0 23,0 27,0 2,0 11,0 42,0 10", "0 24,0 26,0 32,0 44,0 50,0 9,0 16,0 30,0 40,0 19", "0 49,0 48,0 28,0 4,0 4,0 29,0 46,0 17,0 7,0 34", "0 3,0 26,0 28,0 27,0 16,0 24,0 53,0 18,0 28,0 34", "0 0,0 24,0 46,0 42,0 26,0 18,0 42,0 19,0 16,0 41", "0 7,0 40,0 7,0 43,0 42,0 39,0 29,0 24,0 27,0 23" };
    assertEquals(0, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case56() {
    int rows = 217;
    int cols = 175;
    String[] cutouts = { "127 107,197 0,215 114,40 30,180 173,18 105,36 113", "8 2,41 122,167 23,71 155,204 34,148 30,49 14", "129 121,136 156,176 20,23 109,41 140,189 117", "204 100,117 79,149 146,118 156,55 1,191 80,66 111", "147 70,197 159,36 7,80 61,187 10,58 12,183 112", "55 15,187 76,175 133,168 126,174 118,157 14", "73 158,179 129,69 58,101 93,60 53,68 156,103 51", "197 174,71 65,82 162,91 65,176 96,72 56,68 122", "173 11,130 83,1 149,46 9,215 23,2 66,189 165,72 29", "201 82,101 34,130 3,165 70,202 129,194 131,199 102", "127 137,14 160,16 71,208 137,122 90,1 168,149 43", "171 137,134 16,100 115,57 105,83 118,122 106", "10 98,138 52,50 77,28 49,5 145,51 41,206 89,34 32", "110 13,178 113,51 38,113 45,85 109,206 170,90 71", "87 128,196 2,128 51,17 104,175 148,133 171,64 56", "161 125,38 153,128 51,128 172,18 150,32 85,140 13", "31 127,77 61,157 36,208 84,144 118,70 42,116 23", "134 26,169 149,42 174,193 155,154 129,197 111", "49 23,165 170,60 168,15 92,133 102,41 2,132 27", "64 105,82 117,179 4,124 20,214 132,144 52,11 149", "209 76,19 103,102 20,194 34,107 92,71 53,57 59", "83 16,75 63,0 135,32 93,138 98,148 172,40 159", "135 157,99 126,195 4,188 116,48 98,103 96,147 24", "174 85,9 68,18 42,129 146,9 34,72 134,131 98", "203 149,99 71,193 48,10 25,102 164,124 173,80 160", "190 112,141 79,181 69,85 41,86 68,165 71,111 70", "204 5,2 120,143 94,11 23,30 81,99 9,177 93,28 147", "142 93,26 60,143 122,142 1,143 4,91 0,98 107,18 98", "12 88,113 30,161 68,104 85,106 21,30 61,115 132", "56 158,50 61,122 81,108 154,185 52,135 142,121 47", "118 13,177 154,18 85,76 148,44 13,78 168,84 133", "145 75,215 23,202 82,1 79,61 37,11 96,191 39", "100 141,211 41,26 71,55 19,136 56,151 31,137 120", "161 148,90 118,39 1,197 128,63 94,215 24,163 89", "112 106,192 9,36 47,44 113,28 139,116 113,164 163", "204 3,95 77,21 97,196 131,10 11,89 162,30 45", "116 115,170 142,55 92,139 65,180 41,114 122,9 35", "42 46,110 26,191 97,196 73,205 168,83 82,133 167", "97 111,197 110,175 6,66 34,195 26,126 40,108 68", "109 38,195 71,89 23,108 96,125 71,157 0,205 168", "120 23,104 96,116 78,71 117,28 18,30 132,24 133", "182 152,68 101,167 16,151 31,190 82,192 28,206 52", "1 65,191 13,132 132,130 164,158 36,148 131,63 64", "48 155,151 171,10 18,197 17,132 39,16 159,121 120", "121 21,28 161,6 33,77 158,89 150,109 41,129 117", "31 33,64 40,72 37,40 120,215 29,143 135,40 148", "124 157,119 5,66 50,15 115,144 136,152 105,148 89", "30 134,2 163,6 96,148 160,150 140,173 51,65 2", "55 74,162 152,76 45,112 28,75 42,102 124,118 39", "153 129,207 94,76 50,86 123,207 95,72 126,60 125" };
    assertEquals(175, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case57() {
    int rows = 46;
    int cols = 20;
    String[] cutouts = { "14 6,20 1,29 16,42 18,6 9,13 19,34 3,18 18,29 4", "30 5,35 2,4 13,31 5,23 4,39 11,5 7,35 9,34 18,40 7", "42 13,13 19,25 8,39 5,12 3,45 8,12 7,18 0,5 3", "32 4,10 11,5 12,15 19,2 10,37 12,31 8,15 1,45 16", "31 13,41 15,3 4,1 17,4 15,20 11,0 19,40 3,29 6", "2 2,3 8,17 15,5 17,24 8,17 15,23 18,31 19,15 8", "16 10,42 5,28 8,7 17,41 12,34 2,8 6,19 16,26 17", "21 11,33 4,45 11,26 9,34 15,33 17,39 2,12 8,13 1", "28 1,23 19,19 1,35 0,35 12,26 5,34 2,12 16,35 3", "2 14,44 2,22 3,31 14,23 5,12 17,27 6,11 5,19 6", "31 18,3 4,17 3,33 4,30 5,28 16,31 14,0 3,40 7,33 7", "7 4,1 14,36 1,45 0,13 0,33 10,33 16,9 19,19 19", "29 6,45 1,18 3,33 10,39 4,32 6,6 19,44 14,32 6", "28 17,40 10,15 8,36 10,5 2,32 11,18 16,11 4,28 18", "15 9,7 12,4 1,0 17,24 16,36 2,32 19,31 16,40 16", "15 9,37 6,5 5,19 15,23 6,40 11,15 8,22 8,31 10", "11 4,14 5,2 2,23 6,13 1,36 7,26 13,40 15,27 4,34 8", "18 18,12 12,38 16,11 12,36 11,38 13,20 13,3 19", "22 10,7 4,4 5,45 3,25 1,35 9,16 4,38 7,25 18,14 0", "31 9,14 2,10 10,36 11,36 13,21 9,38 19,35 0,6 4", "34 2,32 3,45 4,12 10,24 7,15 3,6 15,41 10,18 15", "24 5,1 17,8 3,10 9,32 13,30 13,43 15,9 2,42 14", "19 2,45 4,18 5,20 12,25 18,45 7,11 0,15 1,8 11", "0 0,42 7,26 9,20 6,38 17,27 1,11 3,31 16,37 4,3 14", "39 11,38 5,0 2,13 11,29 5,6 9,10 16,34 17,18 17", "32 0,4 12,28 7,22 2,10 17,42 14,4 3,4 14,14 6,12 2", "3 16,4 18,32 8,35 14,26 13,38 5,10 11,7 14,41 0", "11 3,41 12,34 14,33 14,21 10,21 3,4 8,0 11,16 6", "17 6,39 5,6 6,27 6,44 6,10 12,39 13,37 3,32 11", "8 19,35 18,13 4,25 10,3 10,31 15,35 7,42 12,20 16", "10 4,1 13,16 10,1 2,31 1,14 11,20 16,1 2,24 7,30 5", "11 15,13 19,1 9,13 4,11 12,16 2,39 12,13 10,45 7", "11 2,44 12,27 15,21 13,7 5,28 15,20 14,19 6,45 1", "10 12,39 11,5 15,0 17,10 5,13 15,24 2,10 14,35 12", "28 12,31 4,10 9,9 8,19 13,26 10,37 14,3 2,14 9", "21 13,24 9,34 1,5 1,14 17,27 18,19 14,26 16,32 6", "11 6,15 7,18 7,17 0,34 6,16 5,44 19,38 17,36 11", "2 3,32 1,1 2,0 17,5 8,35 5,12 12,33 1,8 4,34 3", "11 12,3 1,29 11,11 18,43 18,32 2,15 17,26 2,44 0", "6 4,45 17,6 10,35 3,17 12,15 5,43 4,6 14,29 14", "28 12,7 18,27 19,28 19,8 11,16 2,23 14,36 4,30 18", "34 17,32 11,41 16,24 17,5 5,16 11,45 11,37 0,16 0", "44 19,33 8,29 12,15 6,9 8,22 10,38 19,38 0,45 17", "21 14,6 8,41 16,8 6,2 7,30 4,5 18,41 16,11 8,4 5", "45 12,24 6,1 13,3 1,10 12,43 15,44 19,20 3,43 12", "45 11,12 1,9 10,11 10,14 7,6 11,33 19,23 0,29 10", "39 7,39 15,4 6,8 3,42 0,33 11,38 4,19 14,9 9,24 1", "21 4,42 7,1 11,33 12,21 11,14 12,31 13,11 5,24 4", "29 16,3 2,28 5,15 0,38 18,28 19,29 7,23 2,17 11", "38 18,15 19,32 1,23 6,26 10,35 18,37 12,5 8,45 16" };
    assertEquals(20, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case58() {
    int rows = 234;
    int cols = 94;
    String[] cutouts = { "233 85,23 88,170 74,139 69,189 89,40 23,39 39", "26 85,127 46,113 42,1 14,201 68,160 68,137 39", "83 14,181 82,114 41,157 10,2 15,110 5,19 67,136 41", "163 13,49 56,123 22,148 38,11 66,192 76,180 63", "173 53,6 51,75 26,204 4,49 42,88 74,108 23,148 51", "161 87,85 16,77 38,151 64,49 44,121 29,175 14", "226 55,221 89,18 77,84 69,135 58,128 26,6 47,116 4", "230 1,104 34,109 70,75 66,206 50,35 7,217 21,79 28", "17 43,196 46,25 73,107 16,10 58,227 66,212 35", "180 6,18 66,124 83,63 45,189 54,152 27,93 64", "152 59,84 41,155 46,165 45,41 78,135 42,155 23", "17 57,143 89,119 57,98 5,8 8,118 8,159 9,93 72", "129 46,197 76,29 31,101 39,218 58,78 12,16 43", "8 70,232 1,212 54,161 57,90 68,72 68,95 78,198 14", "4 11,111 25,229 50,170 44,156 68,186 20,180 1", "182 37,214 78,230 35,20 2,134 19,159 45,159 33", "108 77,87 36,16 89,214 76,163 56,223 55,155 45", "225 5,60 27,116 68,137 26,174 53,16 8,110 39", "170 36,91 63,42 7,32 90,159 25,85 86,173 86,58 31", "148 59,108 19,140 30,25 36,27 12,108 41,165 52", "113 59,102 21,93 77,66 44,189 0,66 50,47 40,171 26", "70 0,91 72,75 17,31 92,13 16,193 0,76 58,145 17", "227 32,6 66,49 5,38 48,165 5,191 61,27 18,95 49", "219 12,122 91,42 62,51 88,8 58,153 70,59 53,139 12", "20 81,62 73,123 3,130 33,230 58,39 33,130 60,58 89", "205 21,230 17,192 78,118 60,99 61,204 33,148 10", "56 8,205 49,26 23,164 2,63 28,191 20,78 3,46 55", "4 46,2 22,119 61,122 78,224 86,54 42,202 57,104 34", "164 54,41 14,47 79,226 72,86 88,52 63,1 61,88 81", "21 90,168 48,114 77,15 3,95 14,47 25,4 71,142 52", "13 72,157 69,48 93,113 64,215 50,204 12,227 8", "125 73,172 81,52 2,88 72,52 0,212 58,103 19,183 69", "40 20,41 21,127 31,75 13,222 72,17 34,152 85", "8 45,126 81,203 57,84 35,57 83,145 48,177 81,81 70", "34 49,63 84,109 10,184 4,58 71,31 4,217 24,110 88", "129 69,134 15,17 50,31 66,227 26,117 90,214 92", "219 90,130 21,153 28,117 69,54 87,203 45,184 67", "205 6,31 60,14 86,125 87,166 61,77 83,162 38,102 3", "14 19,127 52,175 4,28 32,166 54,133 15,88 34", "25 38,51 41,49 3,137 66,95 90,157 82,69 35,87 34", "233 32,49 65,37 82,231 23,151 35,14 33,33 49,16 47", "199 70,186 75,195 91,43 29,26 11,206 39,91 89", "1 17,65 55,64 65,186 35,82 4,51 55,18 62,14 84", "152 61,188 40,40 18,40 70,166 71,30 32,127 3,12 90", "191 14,150 48,39 22,90 29,208 88,159 84,45 33", "84 18,55 11,224 77,12 54,131 1,191 58,43 15,89 37", "195 6,171 25,187 52,101 45,129 29,213 26,217 32", "218 53,215 88,52 45,104 30,112 51,125 57,20 80", "112 20,119 5,207 78,120 62,61 32,87 76,153 48", "78 86,133 85,113 9,33 88,134 21,33 0,194 21,126 46" };
    assertEquals(94, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case59() {
    int rows = 161;
    int cols = 135;
    String[] cutouts = { "98 2,94 41,90 94,36 109,116 89,69 42,31 79,143 30", "96 20,103 117,17 65,21 43,160 73,42 52,159 122", "8 19,78 123,62 128,58 92,33 73,105 93,73 42,150 17", "107 89,4 87,26 48,68 46,77 46,58 32,133 132,35 109", "15 48,132 23,6 112,155 41,95 17,124 128,141 82", "160 10,84 77,7 53,147 123,94 102,151 89,97 112", "64 15,108 21,144 69,136 98,10 53,135 35,140 51", "64 123,129 94,41 84,46 84,37 120,65 31,127 20", "60 18,74 29,0 125,108 73,145 52,49 55,41 87,71 108", "102 87,20 71,64 54,22 116,15 114,32 35,48 60", "30 71,154 54,90 92,121 40,91 128,58 84,125 8,97 74", "26 106,128 31,59 97,151 65,34 82,59 68,8 60,150 45", "121 91,60 113,40 107,70 52,114 91,121 85,67 38", "124 9,57 77,92 116,76 28,128 95,35 132,136 67", "23 26,76 17,74 92,105 19,159 130,2 103,110 94", "91 1,51 8,30 56,73 79,75 86,36 88,47 59,142 125", "115 104,41 116,43 102,90 15,37 55,85 19,120 26", "154 13,106 93,50 120,77 110,13 116,49 29,11 92", "6 34,69 5,13 69,153 6,26 81,119 95,120 51,62 130", "150 114,149 41,33 15,81 121,42 130,60 86,61 21", "77 74,25 19,150 71,55 54,44 126,10 95,14 107,13 17", "43 91,87 70,59 1,132 61,107 7,19 39,87 125,140 113", "66 70,27 77,127 10,127 15,23 55,126 70,150 118", "71 13,69 95,18 3,25 116,15 109,12 28,83 16,77 8", "43 66,80 81,127 103,88 103,110 68,110 122,154 96", "55 39,27 96,88 83,120 75,119 133,89 45,142 97", "18 47,27 125,74 91,123 17,91 33,127 6,158 103", "137 91,97 79,69 99,52 34,155 39,49 44,159 108,5 13", "79 62,119 69,119 7,153 120,130 126,76 79,32 11", "89 59,147 124,82 8,74 64,88 42,55 42,11 66,72 57", "62 93,13 70,81 1,139 70,55 114,117 80,59 15,139 82", "36 48,44 41,1 74,31 12,66 80,3 13,145 50,72 97", "114 53,117 49,126 133,91 43,160 101,82 20,46 43", "7 44,17 39,151 75,127 107,71 98,20 127,14 103", "124 2,33 27,51 89,23 33,113 96,49 26,36 9,1 73", "153 132,131 101,65 11,32 121,103 118,87 64,30 75", "125 106,22 47,106 31,159 97,130 79,142 85,42 121", "94 90,140 77,134 59,84 41,1 32,66 14,42 133,45 59", "112 38,95 0,21 24,86 102,46 112,137 132,21 62", "24 46,26 55,114 93,127 48,28 109,160 39,95 68", "79 73,81 53,18 94,59 117,8 107,53 112,153 24", "22 73,67 129,120 134,99 78,148 31,96 52,14 7", "29 68,5 105,142 125,41 24,124 20,129 94,11 112", "78 113,31 76,27 109,79 31,66 48,75 96,31 76,32 15", "34 113,135 75,24 91,106 69,84 70,3 43,110 65", "91 80,25 5,56 125,48 78,64 58,132 119,54 30,123 73", "87 93,28 130,71 18,113 104,2 119,101 76,84 34", "146 113,141 5,106 4,11 112,8 132,86 107,139 106", "115 44,13 51,80 125,104 64,38 61,109 64,9 49,5 67", "88 64,123 25,118 132,8 120,46 60,25 86,51 35,74 29" };
    assertEquals(135, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case60() {
    int rows = 238;
    int cols = 218;
    String[] cutouts = { "3 85,226 173,72 193,168 54,107 93,113 211,111 57", "149 77,110 170,136 0,84 160,27 127,211 73,187 121", "205 172,53 210,124 20,108 157,67 203,155 82,163 96", "94 87,140 173,139 22,229 149,124 8,199 45,152 178", "91 32,5 33,76 77,5 108,139 176,39 134,13 109", "202 26,119 2,218 103,32 176,124 26,212 78,91 41", "35 126,113 6,121 23,113 18,42 191,91 159,54 126", "26 143,162 140,172 210,177 145,141 1,205 176", "225 87,78 57,119 39,7 136,28 115,189 188,225 1", "38 112,22 139,48 88,77 143,188 24,116 129,68 65", "45 6,104 20,169 22,77 124,135 168,30 191,1 165", "28 200,209 96,64 26,47 4,21 74,215 139,67 160", "230 30,64 126,143 93,232 182,18 69,23 32,163 84", "219 110,70 165,3 132,56 80,52 32,87 19,160 183", "100 7,32 5,226 91,131 130,24 28,92 216,199 147", "143 5,179 77,125 167,52 123,175 95,96 147,77 21", "124 139,76 203,117 156,178 136,36 165,48 5,237 77", "180 51,79 29,41 210,142 207,145 2,221 168,181 201", "198 24,190 144,202 69,178 190,200 162,79 142", "230 97,225 27,34 85,28 139,109 115,221 125,215 108", "232 209,131 140,47 75,163 176,204 60,52 62,94 170", "18 88,71 81,212 82,31 35,186 94,202 4,59 10,182 94", "176 122,6 8,31 193,87 178,83 21,94 174,10 139", "104 8,178 16,149 210,224 128,192 204,233 65", "145 82,202 141,30 33,108 11,160 189,33 128,111 174", "0 130,140 115,96 49,226 193,110 150,224 84,149 148", "136 93,116 163,92 21,233 139,156 158,95 48,224 10", "36 84,237 179,107 137,224 175,235 77,195 200", "235 63,49 105,102 125,173 41,58 7,71 99,45 45", "60 214,205 188,126 195,222 147,169 106,131 129", "117 216,83 177,116 14,207 177,72 181,105 35", "90 78,47 185,202 191,66 63,140 101,52 27,162 155", "32 172,103 124,237 65,82 48,226 94,228 198,17 53", "112 53,65 127,40 100,205 199,58 199,19 34,216 137", "143 83,71 1,129 215,166 51,122 63,231 99,203 167", "165 132,34 138,106 212,20 73,146 114,6 138,140 82", "8 76,227 188,228 197,191 148,27 208,235 124", "149 117,71 212,48 2,41 191,88 31,122 201,216 147", "38 172,84 168,106 127,165 111,187 138,70 171", "52 34,1 159,40 128,103 214,198 28,61 174,79 171", "222 64,156 2,81 126,35 18,4 143,110 49,20 59,30 84", "107 73,147 116,49 70,212 166,202 165,42 176", "46 154,186 50,26 75,42 132,152 162,96 74,181 134", "152 15,24 129,114 25,68 166,3 142,119 189,61 197", "222 90,42 116,189 65,5 176,133 32,54 145,209 122", "3 107,36 10,99 119,30 159,132 131,177 209,126 147", "15 98,198 205,117 130,114 26,40 199,40 202,121 104", "168 207,183 132,123 177,94 67,69 135,113 170", "89 82,36 172,144 17,115 182,186 75,146 145,214 88", "2 0,188 119,43 188,27 179,176 103,93 105,93 16" };
    assertEquals(218, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case61() {
    int rows = 300;
    int cols = 300;
    String[] cutouts = { "14 293,132 212,290 251,179 150,281 19,123 197", "102 170,143 88,175 41,250 217,6 24,267 120,146 167", "225 11,236 208,264 239,218 12,95 211,99 163,204 13", "274 140,225 104,137 18,27 20,10 84,173 275,151 222", "236 46,213 105,43 194,217 234,78 43,228 214", "250 6,156 201,87 87,225 183,97 232,113 63,130 20", "252 121,96 200,198 217,255 141,264 217,211 294", "264 84,249 270,203 227,55 37,121 63,112 293", "187 247,263 207,265 181,154 22,132 229,284 142", "138 2,170 276,251 283,148 34,163 288,217 36", "120 54,191 280,53 86,242 66,119 84,202 101,19 39", "122 149,247 74,111 145,257 160,24 229,198 42,97 4", "218 178,82 12,187 24,68 29,63 269,195 149,85 290", "132 198,281 274,172 223,22 55,217 122,34 293", "116 113,281 221,59 88,38 42,188 15,276 133,164 156", "60 47,44 253,78 163,135 284,8 100,25 144,222 144", "242 233,53 71,180 177,152 202,66 149,31 157", "113 224,180 265,198 56,86 112,103 175,276 236", "271 197,102 191,242 143,194 270,264 211,268 122", "142 237,243 101,259 49,59 100,242 4,204 11,236 65", "24 49,53 152,79 93,158 66,173 24,87 176,114 10", "225 169,177 205,23 105,218 100,134 238,149 128", "151 223,22 111,121 69,193 204,263 167,51 54", "274 291,270 55,124 212,75 128,86 190,227 282", "196 266,253 30,254 208,57 297,56 207,147 218", "273 165,47 216,208 108,10 132,243 236,166 136", "276 57,102 110,231 180,264 47,200 214,138 154", "68 19,281 98,84 156,178 220,147 73,175 27,195 136", "141 291,186 19,45 266,52 66,91 86,220 17,183 194", "192 27,115 89,108 221,49 103,130 30,65 213,154 19", "178 209,242 228,46 156,31 238,236 34,240 281", "124 284,32 131,196 132,25 224,207 82,2 160,3 186", "225 18,111 214,64 60,278 142,98 281,48 219,146 110", "4 197,251 190,227 69,128 241,20 105,60 90,38 81", "55 196,171 261,169 221,28 20,257 60,6 104,133 51", "38 71,231 1,197 127,27 287,130 155,24 148,175 284", "154 204,48 230,106 60,91 122,11 217,290 25,242 100", "95 98,84 253,158 211,57 113,15 34,125 19,104 217", "0 44,218 156,173 29,273 110,188 54,11 37,267 165", "48 151,121 259,75 166,127 274,287 121,220 152", "161 24,25 165,125 249,278 44,174 225,178 263,10 15", "8 23,155 220,92 248,43 108,110 287,118 109,151 269", "38 161,141 1,239 79,47 2,50 233,200 62,184 140", "63 86,67 29,258 147,287 237,0 142,265 207,173 26", "47 196,90 161,95 236,170 81,283 227,139 77,106 253", "132 196,236 219,196 223,56 133,161 105,51 32,0 55", "85 149,163 216,199 180,27 219,51 16,209 222", "168 237,74 273,190 27,13 22,110 201,171 289", "256 90,180 145,5 251,243 147,217 38,58 258,158 79", "15 175,266 6,183 272,86 108,177 57,10 222,84 9" };
    assertEquals(300, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case62() {
    int rows = 300;
    int cols = 300;
    String[] cutouts = { "136 35,295 122,224 159,182 234,24 9,169 63,186 137", "118 80,288 48,137 188,215 178,232 282,140 269", "193 161,202 101,108 115,114 121,293 166,136 12", "235 125,250 110,83 296,96 257,238 71,107 231,252 8", "177 148,146 230,243 262,37 17,190 125,262 292", "240 241,193 143,108 34,21 103,28 212,156 28", "113 291,27 162,297 40,258 189,213 279,68 56,25 62", "91 1,38 249,219 287,156 202,189 50,15 101,19 244", "102 247,199 4,62 284,37 233,141 66,57 39,208 117", "24 23,42 266,213 164,264 274,244 252,51 217", "97 212,10 33,237 41,72 84,66 168,151 36,281 120", "85 247,227 103,208 268,236 175,209 298,199 177", "124 111,270 124,253 57,101 280,200 101,140 94", "261 145,141 223,59 204,112 13,34 293,110 166", "258 11,245 226,101 215,36 113,72 256,95 197", "180 257,220 109,60 260,102 18,62 277,271 222", "288 253,14 153,116 289,46 140,0 99,184 12,12 55", "281 240,29 86,119 238,157 113,212 215,288 110", "256 252,105 228,44 193,146 113,134 206,48 84", "270 195,201 231,55 265,205 299,40 28,197 213,37 52", "228 41,144 58,294 235,282 19,255 237,1 101,284 83", "19 139,49 77,136 168,52 283,188 65,212 75,107 239", "100 199,189 78,188 22,7 135,13 228,244 158,25 82", "112 54,184 182,3 256,146 58,152 7,122 37,213 169", "92 12,115 284,92 73,291 279,61 204,1 217,109 75", "153 167,294 263,47 61,287 199,47 58,210 149", "10 208,289 42,118 248,127 102,230 296,293 244", "107 96,277 247,151 194,64 166,151 179,267 55", "166 43,173 107,143 250,153 237,85 226,54 41", "213 180,44 198,118 6,164 216,142 46,232 96,154 285", "214 222,15 74,14 35,290 80,296 68,85 217,74 184", "264 52,180 81,232 273,274 70,193 12,114 8,84 227", "1 102,215 134,298 186,46 157,107 253,38 2,194 220", "236 52,26 225,72 111,188 263,173 113,18 282", "117 39,59 102,28 48,118 17,256 173,275 49,55 149", "19 53,149 232,286 250,210 207,219 186,208 131", "11 18,176 228,127 8,173 35,23 193,42 283,267 18", "174 280,67 6,8 289,198 287,58 113,279 31,1 20", "271 170,255 90,208 72,146 56,253 23,217 2,99 72", "198 46,262 163,234 34,292 55,32 222,25 32,38 81", "175 170,229 133,142 19,122 126,238 68,163 187", "286 145,219 167,205 257,72 223,129 115,197 210", "158 22,268 127,242 189,211 285,150 215,224 110", "193 280,271 19,111 117,0 37,37 187,272 169,11 199", "33 298,8 185,295 195,260 288,118 201,249 219", "2 285,83 139,184 24,283 273,222 185,36 59,144 233", "61 256,97 231,164 155,228 190,51 226,208 244", "232 182,183 271,79 141,133 251,259 144,278 23", "92 184,8 125,138 258,269 157,34 140,220 114,2 254", "132 78,54 209,154 141,181 153,129 35,288 224" };
    assertEquals(300, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case63() {
    int rows = 300;
    int cols = 300;
    String[] cutouts = { "128 215,253 87,184 141,261 74,224 191,265 143", "271 53,254 290,114 179,9 98,261 237,220 68,237 150", "24 219,142 208,296 164,242 0,65 102,5 149,60 140", "88 122,183 85,106 251,14 108,36 237,161 182", "3 67,88 247,54 129,193 113,97 238,264 167,212 139", "67 36,64 65,244 51,257 258,52 12,158 139,100 196", "184 6,106 93,206 246,139 101,129 14,257 224", "47 4,147 119,180 158,170 81,245 47,267 91,109 173", "250 147,232 237,6 299,171 55,261 280,260 68", "239 23,257 45,35 112,34 267,51 161,202 260,12 297", "258 110,117 191,200 69,65 169,271 27,41 25,63 123", "216 92,258 236,261 277,172 8,95 51,184 106,101 93", "255 39,36 88,279 242,173 65,183 122,221 239", "44 126,195 240,31 162,100 169,194 182,164 234,15 4", "183 68,37 298,170 46,288 164,85 182,9 181,281 42", "88 250,161 49,94 215,101 101,235 91,287 252,97 112", "206 156,162 79,150 62,134 17,33 0,225 96,196 124", "292 115,81 177,129 177,192 291,124 23,44 103", "68 167,170 19,277 73,130 39,54 237,222 205,205 44", "179 28,28 155,91 220,72 266,250 83,111 214,127 227", "99 67,72 103,252 63,125 271,32 173,101 191,119 214", "22 1,13 63,170 246,93 170,160 241,178 184,79 55", "144 265,23 244,182 205,18 211,183 120,106 133", "91 181,38 185,15 279,176 6,36 244,235 217,21 250", "217 11,219 206,96 5,169 267,248 13,21 124,179 139", "158 104,80 217,242 264,267 19,148 92,225 297,0 115", "295 20,116 123,251 277,176 158,165 43,199 67", "202 154,142 164,217 128,109 137,194 32,68 217", "78 227,267 15,181 228,150 265,39 165,257 224", "121 123,259 45,254 182,189 23,14 219,69 298", "8 150,245 284,24 217,268 233,191 127,180 217", "263 121,21 44,129 91,99 111,152 94,11 131,296 106", "295 286,195 251,105 90,295 111,206 157,248 12", "277 161,221 163,217 7,176 1,236 295,21 166,41 282", "247 15,111 160,91 291,169 112,292 118,79 12", "118 272,21 6,188 46,262 36,56 197,151 128,273 197", "161 273,173 281,257 48,98 197,6 7,293 190,289 1", "194 89,9 127,183 42,294 222,23 294,218 43,209 127", "245 295,209 217,54 274,23 287,204 7,159 260,276 49", "64 97,61 218,191 179,102 135,281 13,154 151", "201 211,157 26,207 20,246 229,26 69,95 296,213 257", "183 223,235 281,264 241,244 81,102 64,245 83", "275 170,131 298,0 273,168 47,116 54,148 120,64 147", "183 116,272 112,56 119,293 239,274 97,4 237", "175 159,177 262,35 160,56 42,194 66,78 3,200 137", "121 0,55 159,59 220,264 215,15 207,45 97,241 103", "232 91,24 173,83 192,69 15,233 68,147 179,42 66", "229 123,107 45,72 178,202 119,162 55,55 142", "79 132,214 157,56 117,236 240,107 105,191 264", "225 103,218 261,22 278,244 270,72 292,219 110" };
    assertEquals(300, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case64() {
    int rows = 300;
    int cols = 300;
    String[] cutouts = { "100 0,100 1,100 2,100 3,100 4,100 5,100 6,100 7", "100 8,100 9,100 10,100 11,100 12,100 13,100 14", "100 15,100 16,100 17,100 18,100 19,100 20,100 21", "100 22,100 23,100 24,100 25,100 26,100 27,100 28", "100 29,100 30,100 31,100 32,100 33,100 34,100 35", "100 36,100 37,100 38,100 39,100 40,100 41,100 42", "100 43,100 44,100 45,100 46,100 47,100 48,100 49", "100 50,100 51,100 52,100 53,100 54,100 55,100 56", "100 57,100 58,100 59,100 60,100 61,100 62,100 63", "100 64,100 65,100 66,100 67,100 68,100 69,100 70", "100 71,100 72,100 73,100 74,100 75,100 76,100 77", "100 78,100 79,100 80,100 81,100 82,100 83,100 84", "100 85,100 86,100 87,100 88,100 89,100 90,100 91", "100 92,100 93,100 94,100 95,100 96,100 97,100 98", "100 99,100 100,100 101,100 102,100 103,100 104", "100 105,100 106,100 107,100 108,100 109,100 110", "100 111,100 112,100 113,100 114,100 115,100 116", "100 117,100 118,100 119,100 120,100 121,100 122", "100 123,100 124,100 125,100 126,100 127,100 128", "100 129,100 130,100 131,100 132,100 133,100 134", "100 135,100 136,100 137,100 138,100 139,100 140", "100 141,100 142,100 143,100 144,100 145,100 146", "100 147,100 148,100 149,100 150,100 151,100 152", "100 153,100 154,100 155,100 156,100 157,100 158", "100 159,100 160,100 161,100 162,100 163,100 164", "100 165,100 166,100 167,100 168,100 169,100 170", "100 171,100 172,100 173,100 174,100 175,100 176", "100 177,100 178,100 179,100 180,100 181,100 182", "100 183,100 184,100 185,100 186,100 187,100 188", "100 189,100 190,100 191,100 192,100 193,100 194", "100 195,100 196,100 197,100 198,100 199,100 200", "100 201,100 202,100 203,100 204,100 205,100 206", "100 207,100 208,100 209,100 210,100 211,100 212", "100 213,100 214,100 215,100 216,100 217,100 218", "100 219,100 220,100 221,100 222,100 223,100 224", "100 225,100 226,100 227,100 228,100 229,100 230", "100 231,100 232,100 233,100 234,100 235,100 236", "100 237,100 238,100 239,100 240,100 241,100 242", "100 243,100 244,100 245,100 246,100 247,100 248", "100 249,100 250,100 251,100 252,100 253,100 254", "100 255,100 256,100 257,100 258,100 259,100 260", "100 261,100 262,100 263,100 264,100 265,100 266", "100 267,100 268,100 269,100 270,100 271,100 272", "100 273,100 274,100 275,100 276,100 277,100 278", "100 279,100 280,100 281,100 282,100 283,100 284", "100 285,100 286,100 287,100 288,100 289,100 290", "100 291,100 292,100 293,100 294,100 295,100 296", "100 297,100 298,100 299,100 0,100 1,100 2,100 3", "100 4,100 5,100 6,100 7,100 8,100 9,100 10,100 11", "100 12,100 13,100 14,100 15,100 16,100 17,100 18" };
    assertEquals(299, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case65() {
    int rows = 140;
    int cols = 150;
    String[] cutouts = { "100 0,100 1,100 2,100 3,100 4,100 5,100 6,100 7", "100 8,100 9,100 10,100 11,100 12,100 13,100 14", "100 15,100 16,100 17,100 18,100 19,100 20,100 21", "100 22,100 23,100 24,100 25,100 26,100 27,100 28", "100 29,100 30,100 31,100 32,100 33,100 34,100 35", "100 36,100 37,100 38,100 39,100 40,100 41,100 42", "100 43,100 44,100 45,100 46,100 47,100 48,100 49", "100 50,100 51,100 52,100 53,100 54,100 55,100 56", "100 57,100 58,100 59,100 60,100 61,100 62,100 63", "100 64,100 65,100 66,100 67,100 68,100 69,100 70", "100 71,100 72,100 73,100 74,100 75,100 76,100 77", "100 78,100 79,100 80,100 81,100 82,100 83,100 84", "100 85,100 86,100 87,100 88,100 89,100 90,100 91", "100 92,100 93,100 94,100 95,100 96,100 97,100 98", "100 99,100 100,100 101,100 102,100 103,100 104", "100 105,100 106,100 107,100 108,100 109,100 110", "100 111,100 112,100 113,100 114,100 115,100 116", "100 117,100 118,100 119,100 120,100 121,100 122", "100 123,100 124,100 125,100 126,100 127,100 128", "100 129,100 130,100 131,100 132,100 133,100 134", "100 135,100 136,100 137,100 138,100 139,100 140", "100 141,100 142,100 143,100 144,100 145,100 146", "100 147,100 148,101 0,101 1,101 2,101 3,101 4", "101 5,101 6,101 7,101 8,101 9,101 10,101 11,101 12", "101 13,101 14,101 15,101 16,101 17,101 18,101 19", "101 20,101 21,101 22,101 23,101 24,101 25,101 26", "101 27,101 28,101 29,101 30,101 31,101 32,101 33", "101 34,101 35,101 36,101 37,101 38,101 39,101 40", "101 41,101 42,101 43,101 44,101 45,101 46,101 47", "101 48,101 49,101 50,101 51,101 52,101 53,101 54", "101 55,101 56,101 57,101 58,101 59,101 60,101 61", "101 62,101 63,101 64,101 65,101 66,101 67,101 68", "101 69,101 70,101 71,101 72,101 73,101 74,101 75", "101 76,101 77,101 78,101 79,101 80,101 81,101 82", "101 83,101 84,101 85,101 86,101 87,101 88,101 89", "101 90,101 91,101 92,101 93,101 94,101 95,101 96", "101 97,101 98,101 99,101 100,101 101,101 102", "101 103,101 104,101 105,101 106,101 107,101 108", "101 109,101 110,101 111,101 112,101 113,101 114", "101 115,101 116,101 117,101 118,101 119,101 120", "101 121,101 122,101 123,101 124,101 125,101 126", "101 127,101 128,101 129,101 130,101 131,101 132", "101 133,101 134,101 135,101 136,101 137,101 138", "101 139,101 140,101 141,101 142,101 143,101 144", "101 145,101 146,101 147,101 148,102 0,102 1,102 2", "102 3,102 4,102 5,102 6,102 7,102 8,102 9,102 10", "102 11,102 12,102 13,102 14,102 15,102 16,102 17", "102 18,102 19,102 20,102 21,102 22,102 23,102 24", "102 25,102 26,102 27,102 28,102 29,102 30,102 31", "102 32,102 33,102 34,102 35,102 36,102 37,102 38" };
    assertEquals(139, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case66() {
    int rows = 30;
    int cols = 50;
    String[] cutouts = { "20 0,20 1,20 2,20 3,20 4,20 5,20 6,20 7,20 8,20 9", "20 10,20 11,20 12,20 13,20 14,20 15,20 16,20 17", "20 18,20 19,20 20,20 21,20 22,20 23,20 24,20 25", "20 26,20 27,20 28,20 29,20 30,20 31,20 32,20 33", "20 34,20 35,20 36,20 37,20 38,20 39,20 40,20 41", "20 42,20 43,20 44,20 45,20 46,20 47,20 48,21 0", "21 1,21 2,21 3,21 4,21 5,21 6,21 7,21 8,21 9,21 10", "21 11,21 12,21 13,21 14,21 15,21 16,21 17,21 18", "21 19,21 20,21 21,21 22,21 23,21 24,21 25,21 26", "21 27,21 28,21 29,21 30,21 31,21 32,21 33,21 34", "21 35,21 36,21 37,21 38,21 39,21 40,21 41,21 42", "21 43,21 44,21 45,21 46,21 47,21 48,22 0,22 1,22 2", "22 3,22 4,22 5,22 6,22 7,22 8,22 9,22 10,22 11", "22 12,22 13,22 14,22 15,22 16,22 17,22 18,22 19", "22 20,22 21,22 22,22 23,22 24,22 25,22 26,22 27", "22 28,22 29,22 30,22 31,22 32,22 33,22 34,22 35", "22 36,22 37,22 38,22 39,22 40,22 41,22 42,22 43", "22 44,22 45,22 46,22 47,22 48,23 0,23 1,23 2,23 3", "23 4,23 5,23 6,23 7,23 8,23 9,23 10,23 11,23 12", "23 13,23 14,23 15,23 16,23 17,23 18,23 19,23 20", "23 21,23 22,23 23,23 24,23 25,23 26,23 27,23 28", "23 29,23 30,23 31,23 32,23 33,23 34,23 35,23 36", "23 37,23 38,23 39,23 40,23 41,23 42,23 43,23 44", "23 45,23 46,23 47,23 48,24 0,24 1,24 2,24 3,24 4", "24 5,24 6,24 7,24 8,24 9,24 10,24 11,24 12,24 13", "24 14,24 15,24 16,24 17,24 18,24 19,24 20,24 21", "24 22,24 23,24 24,24 25,24 26,24 27,24 28,24 29", "24 30,24 31,24 32,24 33,24 34,24 35,24 36,24 37", "24 38,24 39,24 40,24 41,24 42,24 43,24 44,24 45", "24 46,24 47,24 48,25 0,25 1,25 2,25 3,25 4,25 5", "25 6,25 7,25 8,25 9,25 10,25 11,25 12,25 13,25 14", "25 15,25 16,25 17,25 18,25 19,25 20,25 21,25 22", "25 23,25 24,25 25,25 26,25 27,25 28,25 29,25 30", "25 31,25 32,25 33,25 34,25 35,25 36,25 37,25 38", "25 39,25 40,25 41,25 42,25 43,25 44,25 45,25 46", "25 47,25 48,26 0,26 1,26 2,26 3,26 4,26 5,26 6", "26 7,26 8,26 9,26 10,26 11,26 12,26 13,26 14,26 15", "26 16,26 17,26 18,26 19,26 20,26 21,26 22,26 23", "26 24,26 25,26 26,26 27,26 28,26 29,26 30,26 31", "26 32,26 33,26 34,26 35,26 36,26 37,26 38,26 39", "26 40,26 41,26 42,26 43,26 44,26 45,26 46,26 47", "26 48,27 0,27 1,27 2,27 3,27 4,27 5,27 6,27 7,27 8", "27 9,27 10,27 11,27 12,27 13,27 14,27 15,27 16", "27 17,27 18,27 19,27 20,27 21,27 22,27 23,27 24", "27 25,27 26,27 27,27 28,27 29,27 30,27 31,27 32", "27 33,27 34,27 35,27 36,27 37,27 38,27 39,27 40", "27 41,27 42,27 43,27 44,27 45,27 46,27 47,27 48", "28 0,28 1,28 2,28 3,28 4,28 5,28 6,28 7,28 8,28 9", "28 10,28 11,28 12,28 13,28 14,28 15,28 16,28 17", "28 18,28 19,28 20,28 21,28 22,28 23,28 24,28 25" };
    assertEquals(23, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case67() {
    int rows = 6;
    int cols = 24;
    String[] cutouts = { "0 16,4 9,1 4,0 10,5 2,1 7,5 14,5 22,1 0,4 14,3 15", "0 7,4 9,1 12,1 8,3 7,4 22,3 0,1 8,5 21,4 10,1 17", "1 2,0 20,3 23,2 14,2 3,5 17,1 17,3 0,5 2,4 6,0 4", "2 7,0 4,4 9,0 20,3 7,0 11,0 21,3 2,0 8,3 4,0 16", "4 11,0 21,1 1,4 20,2 3,3 1,5 5,3 5,5 6,1 12,1 19", "2 15,4 21,5 17,5 4,4 17,1 19,1 9,3 12,4 8,0 16,2 3", "5 16,1 20,2 0,4 9,0 19,0 6,0 14,2 13,0 8,0 12,4 18", "5 9,4 9,1 21,3 5,5 15,0 1,0 6,5 16,4 22,4 9,0 3", "5 7,0 18,3 18,1 13,2 0,3 6,2 21,5 1,0 0,0 16,5 1", "4 16,4 7,1 5,3 16,2 12,3 4,2 5,5 13,3 3,1 1,3 5", "2 9,3 15,5 18,0 15,0 17,4 19,2 22,5 9,4 20,1 12", "3 9,1 21,5 14,5 3,3 0,4 15,3 17,2 17,1 5,1 12,0 12", "5 8,0 4,5 18,0 18,1 2,3 3,5 12,5 5,4 16,2 14,5 18", "0 10,4 11,0 22,1 8,2 13,5 14,4 20,0 4,2 5,1 1,0 22", "1 17,3 2,2 15,0 13,5 6,2 1,4 0,1 10,4 7,5 4,2 5", "1 2,0 3,1 14,2 22,5 2,5 4,4 19,4 5,4 1,5 12,5 0", "5 20,3 16,1 4,0 6,3 18,4 4,1 8,4 11,2 15,3 9,4 19", "3 16,5 9,5 6,2 14,2 13,2 17,3 19,1 8,1 13,0 21", "2 18,5 22,4 17,3 7,5 8,5 10,5 19,3 11,5 12,4 10", "0 21,2 7,3 19,2 8,4 9,0 17,4 6,2 11,1 8,5 14,4 8", "5 8,5 9,5 14,2 13,0 11,2 11,5 17,4 1,5 3,1 4,0 21", "2 12,5 13,5 21,0 1,5 2,2 16,5 6,0 2,1 0,2 21,0 15", "1 9,2 16,1 11,5 12,5 19,0 7,2 15,2 4,5 14,2 20", "3 15,1 12,3 21,0 11,0 0,0 2,3 14,2 1,2 3,2 13,5 2", "1 8,4 12,2 5,3 14,5 2,2 6,5 7,2 10,2 15,1 18,2 10", "5 14,1 10,3 2,5 22,1 3,0 18,0 21,2 13,1 1,2 14", "0 21,5 20,4 7,5 8,4 18,0 22,5 2,5 7,0 13,5 3,4 11", "3 4,0 13,0 19,5 17,0 14,3 4,1 14,2 0,2 10,4 16", "1 12,1 23,0 14,0 15,5 6,5 3,2 4,4 13,2 21,2 8,1 7", "2 14,1 13,2 8,1 15,5 20,2 20,1 10,1 12,4 18,5 18", "0 9,5 19,0 7,1 10,1 22,5 4,1 13,3 12,0 7,0 4,2 6", "3 5,1 13,3 16,3 5,3 13,5 0,5 5,5 12,1 17,5 4,0 22", "4 21,1 7,1 6,4 4,2 4,0 4,1 14,3 0,0 22,5 21,4 16", "0 4,2 8,4 18,0 14,4 7,4 18,1 14,2 6,1 8,4 20,2 16", "4 12,4 2,5 5,2 3,0 15,3 15,1 11,1 2,3 4,2 9,3 23", "0 9,5 20,2 16,0 2,2 18,4 17,5 10,5 0,3 15,0 13", "3 23,5 22,2 21,5 6,1 1,2 1,0 20,5 18,1 20,1 13", "2 15,3 1,2 3,1 21,5 12,4 6,1 1,3 15,2 0,2 4,2 1", "5 6,4 17,5 4,1 10,2 5,3 9,4 18,0 7,0 20,3 3,1 1", "4 13,1 13,0 20,0 16,1 22,0 4,5 13,4 3,2 23,5 9", "3 11,0 8,5 13,5 7,4 8,2 16,5 20,2 4,0 19,4 5,3 3", "0 9,4 21,1 9,4 14,5 10,5 10,0 3,3 22,3 4,3 6,4 18", "0 23,1 1,1 20,0 5,2 21,5 3,3 10,0 10,2 3,5 17,5 15", "0 13,4 17,3 18,3 14,2 15,3 12,3 14,1 23,2 4,4 2", "2 5,1 3,1 9,4 5,0 6,2 10,3 22,5 22,3 3,5 9,0 4", "2 18,2 23,3 1,5 12,1 7,4 21,2 5,0 3,4 8,4 23,0 2", "0 3,2 12,2 10,0 10,4 3,4 11,2 14,2 9,0 4,2 18,3 8", "5 17,2 3,2 7,4 16,2 3,1 23,4 2,2 10,2 7,0 11,1 22", "0 14,3 21,4 16,5 4,1 21,5 16,1 0,1 9,5 3,2 15,0 6", "1 5,0 21,4 16,2 2,3 19,0 18,5 9,4 18,4 10,3 3,4 20" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case68() {
    int rows = 14;
    int cols = 15;
    String[] cutouts = { "5 4,8 10,0 0,11 5,9 12,2 4,7 12,4 8,13 13,2 2,1 13", "10 13,11 5,12 3,11 14,2 0,3 6,12 6,1 8,8 6,11 9", "1 1,2 6,4 4,7 5,9 1,8 12,12 2,10 5,3 14,0 11,9 12", "9 12,12 9,2 14,1 8,10 9,6 9,8 10,7 5,8 10,3 0,12 5", "0 3,6 2,13 6,1 13,7 1,5 4,1 9,9 0,9 9,11 14,0 13", "10 12,2 6,7 13,2 14,2 9,11 0,11 8,8 2,0 13,4 3,4 6", "7 5,4 8,11 13,10 11,4 5,11 14,7 0,3 0,2 0,4 4,2 12", "6 10,2 8,5 10,5 9,10 6,3 14,11 4,9 11,8 11,0 13", "3 7,3 6,13 0,3 3,9 6,11 7,9 13,5 6,7 8,2 14,1 1", "10 13,3 3,4 13,0 5,9 10,9 9,0 8,8 14,13 10,2 8", "12 8,4 6,13 5,10 9,3 14,4 12,2 1,3 12,5 1,13 12", "11 7,13 0,7 3,12 7,10 3,4 0,6 5,13 12,5 7,0 5,13 3", "13 9,6 10,3 6,9 9,8 1,7 10,9 4,5 7,0 4,6 3,3 13", "7 14,1 10,1 11,6 5,0 1,3 9,11 0,1 3,7 8,6 8,5 14", "11 6,6 8,4 2,5 7,2 0,3 0,5 7,5 2,8 12,5 10,7 9", "4 10,9 8,10 4,8 4,1 14,7 11,13 12,10 5,7 6,9 2", "1 12,8 3,11 1,9 3,12 12,9 12,7 3,2 0,6 6,4 11,6 8", "2 3,11 11,4 0,7 12,0 2,10 11,8 14,11 14,3 10,7 0", "8 4,2 2,8 3,5 9,5 7,2 13,12 5,13 3,10 14,11 12", "0 13,2 6,5 4,10 7,10 9,6 0,8 9,5 11,13 9,2 9,7 3", "2 7,13 8,10 3,9 2,7 6,13 2,6 13,13 1,11 0,9 10,8 2", "2 0,7 3,11 3,10 2,11 6,1 9,7 4,13 11,7 7,7 6,11 13", "0 14,11 8,8 12,12 14,0 4,5 13,0 6,2 7,9 6,0 14", "13 3,3 9,11 1,10 10,1 9,11 12,5 11,3 6,5 10,7 3", "10 6,8 11,13 2,10 13,9 0,4 2,2 5,1 14,13 3,5 13", "1 3,3 0,8 14,1 14,7 6,2 8,4 11,1 11,4 10,12 6,2 7", "2 7,6 1,13 6,3 13,3 2,4 12,0 1,13 5,1 7,9 5,7 2", "8 13,13 5,0 2,10 10,4 3,4 5,4 11,5 11,2 4,0 4,4 2", "5 5,4 10,3 11,1 12,8 0,11 6,2 10,7 7,1 14,9 11", "4 3,1 3,1 2,12 5,10 3,6 3,1 2,3 10,2 8,13 9,12 1", "11 5,12 1,6 8,3 13,10 6,5 14,3 2,0 12,5 13,12 0", "0 1,2 8,5 4,4 14,5 11,7 8,0 0,1 2,3 5,6 14,6 10", "12 9,8 4,12 5,0 11,1 9,0 2,10 5,11 5,11 9,1 0", "9 1,0 10,2 0,10 14,4 4,2 12,4 7,10 12,2 11,12 13", "5 5,9 11,13 9,3 12,10 8,4 6,10 8,1 2,3 12,2 12,9 3", "2 1,13 13,8 4,1 14,6 1,0 12,11 10,3 9,13 3,10 7", "0 0,11 9,7 2,7 13,13 11,10 4,5 1,10 1,6 5,6 14,7 6", "0 6,11 5,12 0,3 14,4 10,5 10,4 9,1 2,7 5,4 6,3 1", "6 14,6 0,12 2,5 3,6 10,9 0,6 2,4 0,12 11,4 8,11 7", "6 1,1 8,10 11,0 0,11 4,1 1,0 0,9 5,7 11,9 7,10 14", "4 2,8 1,1 1,4 1,8 10,9 12,10 8,0 10,12 6,1 9,3 4", "3 2,4 10,7 4,13 4,6 1,9 2,3 10,2 7,4 1,5 12,7 5", "10 8,0 10,13 7,7 9,6 9,7 8,10 8,5 3,3 13,12 6,13 8", "13 9,0 3,9 13,13 13,6 9,0 9,2 1,0 6,1 0,2 2,12 14", "4 10,11 8,10 13,3 4,11 12,9 11,5 7,9 6,11 6,2 8", "9 2,5 12,0 4,9 3,13 7,11 11,5 6,8 4,4 0,12 6,13 1", "13 8,2 12,0 10,6 7,4 3,11 8,13 14,8 13,2 3,4 8", "11 0,5 8,8 5,0 12,6 8,13 11,6 4,12 2,12 5,11 13", "10 11,9 10,6 7,13 14,10 4,5 14,13 1,12 6,11 1,5 3", "10 6,5 9,9 2,0 5,8 1,7 14,7 5,9 5,4 5,3 9,2 7,6 3" };
    assertEquals(8, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case69() {
    int rows = 15;
    int cols = 14;
    String[] cutouts = { "3 8,9 12,6 5,2 1,0 0,3 7,2 13,10 4,4 13,6 8,3 2", "10 3,10 13,14 3,5 11,4 4,0 0,7 0,10 7,5 0,5 13", "9 4,5 13,14 2,10 4,8 7,9 9,8 2,5 12,8 8,0 3,2 7", "11 0,4 1,3 4,11 2,13 11,2 11,7 13,2 10,6 11,1 10", "6 8,13 1,6 4,7 1,5 5,12 5,4 8,14 11,8 12,7 6,13 5", "4 8,6 0,1 1,3 10,9 10,13 9,2 4,2 5,3 0,5 12,6 6", "14 7,2 3,2 7,12 9,0 11,14 13,9 1,5 10,13 10,8 6", "14 10,7 11,7 6,14 13,3 8,14 12,8 7,13 12,8 9,11 0", "7 3,8 0,9 0,0 13,4 2,7 13,4 11,5 4,0 7,8 12,3 1", "8 6,11 11,14 7,6 10,3 0,2 13,2 5,10 6,8 12,10 8", "4 9,5 5,8 12,8 1,4 7,11 3,9 13,3 9,13 7,5 6,0 10", "5 11,13 8,2 2,1 0,3 1,14 11,9 8,7 0,0 1,11 10", "3 0,3 1,12 6,10 9,1 12,12 2,3 13,8 3,4 13,13 5,4 2", "13 9,8 1,7 5,3 3,4 6,1 0,1 6,11 10,3 10,7 11,13 12", "5 1,8 9,13 7,1 2,7 1,10 2,10 11,1 11,10 12,5 9", "4 8,4 5,9 0,4 10,8 12,7 9,9 8,10 4,13 4,2 7,3 5", "5 1,10 10,14 0,4 8,12 8,7 13,3 6,4 4,13 11,5 8,9 4", "0 12,4 10,11 3,10 10,6 11,10 4,1 3,14 13,9 1,13 11", "5 6,6 10,2 3,14 9,7 8,11 13,0 3,12 12,13 11,8 10", "11 9,1 11,7 2,5 0,11 6,0 7,14 12,5 2,1 11,8 0,13 6", "4 5,13 0,10 8,7 0,5 13,13 9,1 3,2 7,8 11,1 11,2 5", "5 4,1 3,13 12,0 13,0 3,11 8,7 8,0 3,8 11,10 0,1 6", "14 2,5 1,8 11,8 2,3 10,5 10,8 8,14 12,8 10,1 4,7 9", "12 0,10 4,13 1,14 6,6 6,1 13,2 13,11 12,10 6,3 1", "8 2,9 8,12 2,13 10,5 6,4 5,6 8,6 11,10 1,4 11,10 8", "6 11,7 12,9 2,10 1,11 13,2 5,6 6,0 0,12 8,1 13", "2 9,10 12,8 7,3 8,3 13,8 6,3 6,5 3,8 9,1 12,14 9", "10 2,0 1,11 1,0 13,11 7,4 2,4 3,1 6,7 8,8 2,2 8", "11 7,11 9,13 3,12 6,4 2,1 4,12 11,11 10,3 11,13 5", "8 8,13 6,1 8,14 4,9 3,13 8,5 3,10 10,11 5,6 7,10 3", "5 7,2 10,2 13,5 2,1 11,14 11,2 11,11 4,8 0,2 7,9 8", "13 4,7 13,8 8,14 13,14 9,8 11,9 10,9 9,11 3,4 5", "5 5,5 10,1 6,8 9,2 6,5 8,0 0,1 13,4 6,4 10,6 13", "4 4,5 9,10 6,1 9,2 12,13 0,6 4,8 6,14 13,5 11,11 7", "12 1,9 7,2 11,7 11,0 9,14 11,10 1,10 8,5 9,9 9,7 0", "10 11,1 10,4 4,5 3,9 6,1 11,8 11,2 8,2 5,3 4,14 8", "11 13,7 13,7 10,11 13,10 9,14 10,10 2,9 5,3 1,7 6", "1 8,13 8,5 7,6 11,2 5,5 0,1 11,5 5,10 7,5 13,0 6", "1 0,4 9,5 10,7 2,13 8,7 12,5 11,6 10,5 8,9 5,14 5", "6 9,13 12,11 6,5 6,3 7,11 13,13 6,4 1,9 11,10 11", "1 12,6 8,8 13,7 12,14 12,4 9,7 2,1 8,6 0,11 12,7 5", "9 1,4 11,8 12,6 6,12 6,14 7,9 11,7 6,14 9,0 2", "5 13,4 10,5 9,13 8,4 0,5 6,13 1,8 3,10 10,9 4,5 10", "8 8,9 0,3 4,12 11,13 0,12 6,7 2,7 9,11 5,12 8,4 6", "13 13,11 7,9 4,9 10,4 7,14 3,2 10,11 5,13 12,1 5", "13 13,14 5,14 12,5 11,7 13,1 3,9 0,9 8,1 12,4 3", "12 2,5 0,0 9,7 5,8 9,7 13,10 13,9 9,10 6,5 6,8 1", "11 3,8 4,7 2,5 8,3 2,10 1,1 1,0 6,7 6,8 8,10 11", "6 0,11 6,14 10,6 6,5 0,13 8,13 11,14 7,14 11,11 0", "1 9,4 11,14 7,11 0,2 12,10 5,6 3,2 12,11 13,2 6" };
    assertEquals(9, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case70() {
    int rows = 22;
    int cols = 6;
    String[] cutouts = { "0 3,0 4,9 5,16 5,7 5,18 5,16 0,4 0,12 1,6 0,10 1", "9 5,1 5,4 2,14 3,8 3,16 0,9 3,19 0,4 3,7 0,5 2", "13 2,8 4,20 4,3 0,1 3,8 0,4 5,6 0,19 0,0 2,3 2", "7 3,11 5,14 5,2 1,13 5,6 1,21 4,6 2,7 0,18 3,7 5", "10 5,4 4,15 5,14 2,11 3,14 4,20 2,3 1,7 5,10 5", "21 5,8 5,2 4,1 5,9 5,15 4,3 0,9 5,20 2,20 3,17 2", "3 5,16 0,5 5,8 4,1 3,11 3,17 3,15 4,18 5,12 0,12 1", "21 0,8 0,0 0,21 3,13 5,21 5,11 5,12 3,6 5,21 2,4 2", "0 5,1 0,8 5,13 4,11 3,1 0,17 0,16 1,14 2,19 0,2 1", "12 0,10 2,14 5,18 3,19 5,7 0,17 3,21 0,16 5,3 5", "13 4,8 1,12 5,1 3,19 5,1 4,4 2,6 1,20 1,20 3,14 3", "4 2,14 4,20 3,21 2,3 0,20 4,7 4,12 4,3 0,7 5,19 1", "4 4,2 5,6 4,21 2,1 0,18 5,4 0,5 3,10 5,2 4,15 0", "11 1,12 1,12 2,4 0,18 4,0 5,0 2,0 0,17 2,10 2,16 2", "9 1,3 1,21 1,21 3,2 4,4 3,16 2,7 1,16 3,8 3,4 4", "19 0,12 0,5 1,18 3,14 1,19 4,14 2,4 3,14 4,21 0", "15 0,2 5,14 4,21 4,14 0,9 1,10 4,3 3,5 0,5 4,20 0", "19 1,5 4,17 0,5 2,16 2,16 4,21 3,21 0,10 1,10 2", "7 0,2 3,2 3,6 5,11 0,13 1,5 0,4 5,12 2,20 4,6 2", "16 0,1 3,13 1,6 0,6 1,2 0,11 2,1 3,9 1,15 4,17 0", "7 1,12 5,1 3,3 3,2 0,3 1,2 5,7 2,4 1,7 5,13 3,15 3", "8 5,3 4,7 3,9 0,6 4,8 4,14 4,1 0,9 4,14 2,4 1,20 5", "13 3,2 5,8 0,11 5,11 3,4 5,11 2,11 1,6 1,21 2,12 4", "6 5,18 5,6 4,1 4,19 0,5 3,5 3,15 3,4 5,10 2,5 2", "9 3,9 4,4 2,0 0,13 2,17 1,15 3,18 1,12 1,0 1,4 4", "16 1,2 0,5 0,9 5,21 0,16 3,3 0,13 4,20 0,6 3,21 3", "21 0,4 5,18 3,8 5,11 1,5 1,14 0,19 0,2 3,19 3,10 4", "10 2,16 1,5 0,9 3,1 2,18 3,1 1,9 3,12 0,3 0,18 4", "14 0,18 1,13 2,20 3,13 2,14 3,12 5,8 4,4 3,17 2", "7 4,11 4,14 5,8 3,13 2,17 3,21 4,1 3,0 3,13 2,8 4", "17 2,19 3,9 1,15 3,2 2,1 4,16 2,0 0,9 4,3 2,6 0", "14 2,11 4,10 0,15 2,12 0,8 2,19 5,7 0,8 5,5 0,10 1", "18 5,9 5,3 0,7 3,0 0,9 0,6 3,14 2,15 2,16 2,0 1", "4 3,9 5,1 5,13 2,21 3,14 2,8 5,3 1,3 5,17 3,10 0", "15 1,0 2,10 1,1 0,18 5,6 5,3 5,3 3,15 1,3 4,2 4", "15 3,0 0,2 4,0 4,19 4,15 3,20 2,16 3,3 4,1 1,13 3", "13 1,17 1,10 0,14 0,13 1,12 5,0 4,0 1,20 0,9 3", "10 4,1 4,3 5,5 2,13 1,7 4,1 4,3 4,17 0,7 4,21 5", "9 2,19 0,1 4,1 3,14 5,0 2,18 4,21 4,11 5,19 1,19 4", "20 4,21 0,5 3,1 2,18 0,8 5,19 4,11 1,18 1,7 2,8 1", "8 4,15 2,10 2,5 0,18 3,3 5,15 1,15 4,14 2,17 3", "19 5,13 4,21 4,3 2,12 5,14 3,8 3,5 0,13 2,12 4", "12 4,16 4,19 2,1 4,16 1,3 5,15 2,7 0,10 0,6 2,1 1", "6 2,8 1,11 4,21 1,11 2,12 5,8 1,12 0,15 0,16 4,7 4", "3 2,21 4,8 1,8 4,21 1,2 3,1 2,5 2,17 4,18 1,2 0", "16 1,21 5,21 1,19 3,11 2,11 5,6 0,3 1,18 0,6 1,4 3", "20 1,14 1,11 3,2 1,2 3,17 4,0 1,1 2,17 4,19 4,13 5", "10 2,16 2,17 2,1 0,17 5,13 1,14 3,11 1,0 3,0 5,2 1", "16 4,21 1,16 0,19 0,4 3,4 0,9 2,6 1,12 5,7 5,0 5", "13 5,10 2,8 1,1 3,4 5,15 1,9 3,18 4,8 5,10 2,7 0" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case71() {
    int rows = 8;
    int cols = 18;
    String[] cutouts = { "0 15,2 0,3 11,0 0,0 14,2 17,3 10,0 8,6 3,7 9,6 13", "7 10,3 13,6 4,3 15,5 6,0 2,1 15,5 10,5 7,3 3,0 6", "6 17,5 9,3 9,4 9,7 16,3 14,2 3,6 9,2 17,3 7,3 9", "5 13,4 6,4 0,0 2,3 4,6 7,2 6,7 13,0 13,1 14,3 17", "0 6,1 6,4 13,3 7,5 11,6 6,6 7,3 12,7 3,4 1,1 13", "0 13,3 1,7 15,7 4,0 7,3 15,5 1,0 0,2 13,0 2,4 7", "0 3,4 15,5 10,2 13,6 6,0 14,5 15,7 10,7 12,2 12", "3 3,0 7,4 6,1 17,1 12,4 10,6 9,4 9,3 7,4 8,2 3", "5 10,6 9,5 17,7 10,3 15,2 0,4 6,1 11,7 3,4 16,3 11", "3 3,2 7,0 0,5 16,5 17,6 16,2 2,2 0,0 16,2 3,1 5", "4 15,3 2,6 14,4 8,4 9,2 11,0 6,7 13,3 17,0 4,0 1", "0 5,5 16,6 9,4 14,6 0,1 16,2 10,3 11,7 10,7 10", "0 16,3 3,0 10,7 5,7 17,3 12,7 2,0 4,5 12,7 16,0 12", "2 16,0 7,1 12,5 6,6 7,7 5,0 16,2 13,2 3,4 2,6 4", "2 0,2 17,4 10,1 0,4 12,1 6,1 16,7 14,5 3,5 12,3 1", "0 15,4 2,5 4,0 12,0 1,7 2,5 12,2 8,4 16,4 11,0 1", "3 12,2 5,1 6,3 2,4 5,7 14,0 13,7 0,3 6,2 9,7 10", "7 10,7 4,6 15,3 3,0 5,2 16,5 13,5 10,7 11,2 11", "1 0,6 5,4 1,4 3,5 6,0 16,2 2,4 15,4 13,4 0,6 13", "6 4,4 3,1 16,4 5,6 7,7 15,2 11,6 10,0 0,7 4,7 10", "6 1,1 6,5 13,4 11,1 12,3 8,0 17,6 16,1 14,5 2,1 9", "5 11,6 15,4 14,7 17,2 15,2 17,2 17,3 14,7 10,3 0", "4 10,6 9,2 2,2 14,3 2,7 8,1 1,6 15,2 3,5 8,6 11", "0 7,0 5,5 0,4 11,3 13,1 2,0 2,0 5,3 15,4 5,0 17", "6 15,3 7,2 7,4 8,0 6,1 6,7 6,1 7,4 2,0 7,4 11,0 10", "6 2,1 12,4 2,4 5,1 12,5 9,5 8,3 5,0 7,5 1,5 3,3 15", "3 8,0 8,5 0,1 3,1 13,6 3,5 9,3 13,0 6,0 16,4 12", "7 16,0 1,2 7,4 14,3 5,3 3,6 17,4 1,0 16,3 5,2 2", "7 7,7 10,5 16,3 13,2 14,3 11,0 3,3 1,6 16,1 13,1 8", "6 14,0 15,5 7,7 7,1 12,3 16,1 16,0 13,0 8,4 8,1 5", "3 10,0 10,6 2,6 3,5 11,6 10,7 8,7 10,3 15,3 4,7 6", "3 4,4 2,2 8,3 15,6 10,4 1,1 8,3 9,6 16,1 6,4 2", "0 5,3 4,6 2,4 7,2 17,3 11,2 5,3 10,1 4,0 1,7 5", "4 14,2 17,7 12,7 7,7 0,3 5,5 16,7 8,5 9,1 15,0 11", "2 17,5 13,2 9,2 9,1 10,6 4,1 14,4 10,4 16,0 2,2 1", "6 2,0 5,4 7,0 16,3 9,5 12,7 3,4 5,6 4,4 9,6 0,6 15", "3 5,0 0,2 10,7 10,6 0,5 8,4 9,5 14,3 1,4 15,6 10", "2 5,7 7,6 7,6 16,7 2,0 4,1 7,4 12,7 0,6 17,6 8", "0 9,4 16,1 11,2 11,7 17,2 3,7 3,2 12,4 0,3 5,7 6", "1 12,4 10,5 7,5 0,2 11,2 10,4 14,2 11,2 1,5 2,3 5", "2 16,0 8,6 9,6 0,2 12,7 10,5 16,0 3,4 4,5 13,0 12", "2 14,0 9,0 7,7 4,6 15,2 4,3 2,3 17,7 14,5 6,2 3", "4 12,3 8,0 11,7 3,3 5,7 1,5 9,5 13,1 2,2 3,3 0,6 1", "5 0,5 17,2 8,7 7,1 4,5 6,3 3,7 17,6 11,5 5,1 9,6 4", "3 11,5 14,0 16,7 13,5 13,1 6,2 13,7 0,2 2,1 11,5 4", "3 0,0 4,5 10,2 2,2 2,4 9,4 0,4 4,6 0,6 17,3 17", "0 14,0 17,4 3,3 8,2 6,1 13,3 0,7 12,5 7,2 7,0 2", "6 4,2 3,0 13,1 1,4 9,5 17,3 2,6 3,7 16,2 3,0 15", "3 6,4 6,0 15,1 0,1 8,3 14,6 9,3 7,4 2,4 10,4 6,6 4", "3 8,6 17,5 6,2 17,5 12,1 6,5 12,2 11,4 11,1 10,7 1" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case72() {
    int rows = 12;
    int cols = 14;
    String[] cutouts = { "0 7,1 7,9 12,0 2,6 5,4 7,5 3,1 1,1 0,8 1,5 0,3 13", "11 1,3 6,10 3,10 11,9 4,1 10,9 5,2 13,4 11,8 8,9 1", "3 7,11 12,9 0,7 7,6 10,11 8,1 2,2 11,3 0,5 6,1 0", "11 5,4 6,5 5,2 3,4 2,6 4,7 0,6 4,1 2,9 8,8 8,4 0", "6 10,10 5,7 8,6 2,8 4,2 1,1 4,11 3,4 7,0 2,11 8", "11 10,9 10,9 7,7 3,1 9,1 9,1 1,6 12,11 6,11 2", "5 4,0 1,2 1,5 3,8 7,0 7,0 6,10 11,1 5,3 11,0 4,5 8", "0 9,7 5,6 3,10 7,5 13,3 6,3 0,3 13,10 7,6 3,9 11", "1 3,11 12,10 2,4 0,5 9,1 5,8 1,6 7,7 10,3 11,5 3", "6 4,6 6,5 9,4 12,2 8,11 13,3 1,6 10,3 13,7 10,4 3", "6 12,2 9,9 7,4 11,3 11,3 9,5 11,8 3,11 2,8 6,6 3", "6 13,10 13,8 10,5 2,7 11,9 0,7 10,3 13,6 1,7 6,6 5", "8 9,10 13,5 0,10 12,11 7,2 12,9 1,3 0,6 11,10 11", "3 9,0 10,4 2,4 0,2 7,4 12,1 11,2 1,7 4,5 3,8 12", "8 2,7 0,8 13,7 6,5 5,2 4,10 2,1 5,5 11,2 11,0 10", "9 6,8 7,7 3,11 11,9 8,11 4,1 4,8 12,6 6,3 7,11 5", "5 3,9 11,5 3,4 0,9 0,2 7,11 10,2 8,6 7,5 2,10 0", "10 13,8 10,10 12,7 0,11 13,2 6,4 3,11 0,2 8,9 12", "2 13,6 5,3 8,7 6,11 11,2 1,0 11,1 12,7 8,11 10", "8 8,8 4,11 6,8 9,5 13,4 0,1 10,4 1,7 9,7 12,8 9", "5 11,5 2,3 13,4 5,2 1,6 2,2 9,8 0,9 10,3 0,5 5", "2 10,5 7,11 12,10 11,4 12,8 10,9 6,9 13,10 1,7 5", "0 7,7 8,8 5,5 5,4 7,2 3,3 6,5 7,4 12,10 9,11 4", "10 7,11 5,10 8,9 9,7 3,5 5,4 2,3 6,4 3,7 8,9 10", "6 13,10 2,10 3,2 8,11 8,1 7,0 6,4 12,4 7,5 2,7 0", "0 0,9 2,7 5,6 11,6 5,1 10,7 4,3 13,2 0,4 6,7 10", "7 12,10 2,5 1,9 10,8 2,3 3,8 2,5 11,9 5,10 11,3 11", "2 7,8 13,10 12,11 9,3 13,9 9,5 5,1 2,9 10,10 7,6 6", "11 6,9 7,1 11,1 6,8 1,1 13,5 6,4 4,8 0,9 6,0 0", "4 0,10 8,6 11,2 5,5 12,9 6,3 12,6 4,8 1,5 9,9 5", "1 6,6 4,4 4,4 4,4 9,1 1,8 9,6 13,5 5,5 0,7 2,5 11", "3 11,11 1,10 7,0 9,10 13,11 8,1 10,3 9,8 5,0 9", "0 0,9 12,10 2,4 7,10 5,7 13,0 11,3 10,6 5,8 11,6 7", "5 0,10 5,1 4,7 6,8 6,7 6,10 5,5 8,11 7,0 13,0 4", "10 5,6 8,11 7,0 8,3 1,0 11,0 12,4 11,4 10,0 1,6 12", "11 1,2 6,8 1,7 5,3 2,6 11,5 11,6 13,3 11,9 4,2 1", "9 7,4 1,4 4,6 2,2 10,5 4,11 3,10 7,1 7,8 6,1 1", "4 8,1 6,11 1,11 9,3 6,10 3,9 8,1 7,8 3,2 6,8 1,1 2", "9 1,9 13,9 11,7 0,8 2,9 5,2 4,10 3,7 4,6 13,0 8", "11 10,5 13,11 7,2 8,2 5,11 5,3 7,2 3,1 5,6 2,10 1", "5 4,1 0,2 5,10 6,7 3,4 11,9 3,11 6,11 5,11 7,9 1", "1 11,4 12,11 0,6 8,3 4,9 1,9 13,2 10,1 10,2 11,3 0", "6 6,7 9,11 1,1 5,8 13,8 3,7 9,9 7,7 3,10 0,1 2,2 5", "11 7,3 7,10 4,0 3,10 9,5 1,11 10,9 0,3 0,11 8,1 4", "10 8,10 8,11 3,4 12,5 13,8 8,2 7,7 4,11 1,5 10", "8 10,8 8,10 8,8 1,8 11,0 6,10 5,9 3,3 9,5 12,10 7", "3 2,4 5,4 8,5 6,6 12,9 3,3 1,7 0,1 13,8 9,2 9,6 9", "7 9,10 12,4 4,5 7,8 8,2 3,11 10,10 2,5 5,7 1,2 12", "10 0,10 4,11 1,0 4,2 6,8 2,9 13,8 2,2 13,3 4,7 9", "5 4,10 13,1 3,9 1,11 7,2 8,5 5,1 6,3 11,11 4,10 12" };
    assertEquals(6, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case73() {
    int rows = 10;
    int cols = 14;
    String[] cutouts = { "4 10,2 6,5 1,3 13,9 7,2 8,0 2,7 4,0 2,3 0,1 13", "0 4,6 2,2 1,6 10,3 1,8 12,3 12,1 13,4 2,6 13,3 10", "0 4,8 11,0 1,6 6,7 0,7 3,2 5,8 1,2 5,4 2,8 4,6 13", "9 13,7 10,9 2,9 6,2 9,7 4,2 13,9 1,9 8,7 3,8 4,1 8", "0 5,5 0,8 8,5 9,3 3,7 6,6 8,6 6,7 6,4 9,9 2,8 12", "2 10,1 1,6 12,7 5,1 4,7 9,7 11,2 1,3 0,6 12,6 1", "0 13,8 0,5 5,2 13,0 4,3 3,2 0,9 8,9 10,8 1,0 13", "7 5,7 2,8 10,8 9,4 4,6 2,5 0,5 2,4 8,2 0,1 0,2 5", "0 6,8 6,9 6,3 13,1 0,8 5,0 12,8 12,5 9,9 8,1 5,1 4", "6 4,1 7,9 9,9 11,9 0,3 6,7 6,9 1,1 3,0 0,7 10,2 4", "1 3,9 4,1 10,8 7,8 8,8 8,1 1,8 1,5 5,3 11,9 6,7 3", "8 8,2 10,5 0,8 1,3 10,6 9,3 11,5 12,9 11,8 2,6 4", "4 1,3 8,1 9,7 7,6 6,5 5,0 0,8 10,4 3,5 9,1 11,2 7", "9 10,0 12,7 5,2 13,7 3,0 1,1 10,1 0,1 8,4 12,3 2", "3 4,0 9,9 9,9 9,9 3,7 10,6 2,0 2,4 9,7 11,8 1,9 9", "9 11,2 0,2 3,3 4,4 6,7 12,0 12,1 1,5 8,8 13,2 4", "7 12,4 13,4 10,9 7,8 1,1 12,7 7,4 9,3 9,4 5,6 13", "7 5,7 3,6 0,8 1,0 4,4 2,1 8,9 3,2 9,1 6,4 7,6 13", "3 7,2 5,2 4,4 12,1 7,6 2,2 5,6 11,8 11,6 4,3 2", "5 11,1 11,3 4,1 4,3 9,4 11,5 8,7 6,2 9,2 5,7 4", "5 1,5 12,0 1,2 4,5 4,2 8,8 13,8 0,9 1,3 3,8 4,9 10", "8 0,5 8,0 7,3 3,7 12,2 2,9 8,6 9,9 2,8 4,0 8,3 6", "7 4,9 3,9 8,1 1,3 7,2 11,3 5,5 1,2 11,0 5,1 12,5 4", "3 10,3 4,8 7,9 0,5 11,2 9,9 9,3 8,9 12,7 12,0 1", "1 2,8 1,9 9,3 3,0 0,6 9,7 6,1 1,4 12,1 3,7 4,3 2", "3 5,5 1,8 0,3 12,9 13,6 7,5 6,8 1,6 6,7 6,6 13,0 1", "6 13,4 8,5 10,7 12,2 0,7 10,0 6,4 11,4 7,2 10,2 6", "3 9,1 10,9 6,5 3,1 0,6 4,1 6,9 5,2 2,2 5,9 10,3 0", "5 5,5 11,9 10,7 1,9 7,1 13,5 8,3 10,9 9,1 3,2 2", "0 2,9 3,5 2,8 13,7 13,5 12,1 3,5 10,4 0,1 9,7 3", "6 2,9 13,7 3,8 0,7 9,6 1,9 1,5 3,2 3,9 1,2 10,4 3", "8 10,8 2,4 11,5 2,9 4,3 12,7 9,7 5,1 5,3 7,7 13", "8 9,3 0,2 6,9 3,7 13,8 4,4 6,3 5,5 0,5 10,1 8,5 7", "0 11,4 4,4 9,0 13,9 11,1 8,8 9,5 3,1 10,5 10,8 1", "4 10,3 1,4 0,7 7,9 10,4 6,6 7,5 0,9 0,3 3,1 10,8 6", "9 12,7 6,9 8,9 12,6 13,6 5,0 2,9 12,7 13,6 7,3 10", "9 3,2 5,2 12,8 3,3 13,1 9,7 12,7 7,5 10,1 1,4 0", "8 13,9 2,2 5,5 3,5 0,7 2,5 6,0 13,8 0,8 2,6 8,7 6", "1 4,1 12,4 8,9 3,8 12,1 6,1 8,7 12,0 0,5 5,4 6,9 5", "1 2,1 4,9 8,8 4,9 0,4 12,5 9,8 9,5 13,2 1,0 3,6 13", "2 12,7 0,5 13,1 3,0 6,3 3,6 1,5 13,7 1,0 12,5 13", "1 4,1 11,1 10,0 13,0 6,1 7,8 9,1 4,1 1,1 10,0 3", "1 1,3 4,9 8,1 8,6 8,8 9,3 10,7 13,7 7,6 3,3 7,4 8", "7 1,9 12,8 9,2 12,2 1,3 7,5 11,7 0,2 4,7 2,2 12", "4 5,0 5,1 8,6 1,7 12,7 1,2 3,1 3,0 13,6 4,2 2,4 12", "6 8,2 12,3 11,2 10,9 11,9 10,5 13,2 5,7 7,4 0,6 3", "6 11,9 7,7 12,1 3,0 8,0 11,0 13,1 3,1 13,1 8,6 3", "4 0,1 12,0 4,8 2,5 7,7 12,2 6,7 0,3 10,8 1,4 4,7 8", "1 9,7 7,6 7,1 12,4 1,2 7,3 9,0 2,7 2,7 3,8 5,7 8", "6 7,6 10,4 0,4 4,3 3,1 13,7 3,3 11,5 13,2 7,2 10" };
    assertEquals(1, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case74() {
    int rows = 8;
    int cols = 16;
    String[] cutouts = { "0 11,7 0,5 14,7 4,3 2,3 2,1 6,7 6,5 14,2 4,2 4,7 5", "5 5,7 11,6 11,1 11,4 9,6 0,4 13,3 4,7 8,0 4,3 15", "0 7,5 1,2 4,3 15,7 0,4 1,2 8,6 11,7 5,5 14,4 0", "2 12,3 2,3 7,2 7,5 4,6 7,2 11,5 3,7 8,5 13,2 11", "5 2,4 14,3 13,0 7,4 6,6 1,1 6,0 12,6 3,4 14,6 13", "4 2,6 11,3 2,5 10,4 12,5 9,6 0,1 7,4 1,6 4,5 13", "1 9,7 0,6 4,0 10,7 5,0 4,0 6,4 14,4 2,7 6,2 14", "0 11,0 14,5 15,2 15,6 11,1 2,3 8,5 10,2 11,4 11", "1 9,6 6,2 2,3 7,3 4,4 3,6 7,5 12,0 5,3 9,7 2,6 12", "3 6,0 6,4 13,2 10,2 14,7 5,4 7,6 12,5 1,3 14,3 4", "5 5,7 15,3 6,2 0,5 8,3 12,2 9,4 3,1 9,7 3,3 12,4 8", "7 5,3 7,4 8,0 4,2 4,5 7,4 5,3 13,2 11,7 15,5 12", "2 7,7 8,4 0,3 14,2 11,0 8,3 7,0 2,3 2,4 11,1 0,3 0", "3 11,3 0,5 11,0 12,3 10,4 12,7 12,6 0,5 10,7 13", "0 15,4 6,2 1,4 10,1 6,0 2,0 8,6 3,3 4,7 7,7 10,7 4", "2 3,3 4,0 6,2 3,3 2,3 13,1 14,3 1,7 2,3 1,3 5,5 3", "0 0,0 5,1 2,6 0,6 1,0 8,7 9,4 13,1 9,3 1,5 6,6 7", "7 8,2 0,4 0,7 14,5 2,3 7,5 9,2 9,2 2,2 14,5 5,5 1", "1 0,3 12,1 0,1 12,4 13,0 15,2 5,5 15,1 12,0 7,1 2", "3 9,4 9,3 0,1 4,1 7,6 2,0 15,2 1,1 10,7 0,3 1,6 12", "5 10,1 13,5 2,2 6,1 2,4 2,6 15,7 3,2 8,5 15,2 6", "4 11,6 11,1 0,4 6,1 9,5 13,0 13,6 3,0 8,0 12,3 5", "3 15,3 11,0 10,2 9,7 8,4 8,0 3,4 9,6 15,2 1,1 11", "7 3,7 10,5 10,0 2,6 6,7 3,7 2,6 3,5 11,5 4,3 3,4 8", "5 12,3 3,1 6,4 13,7 0,6 15,6 12,1 10,6 2,2 14,1 10", "3 8,7 9,2 13,7 12,0 7,4 0,5 0,5 4,1 15,5 4,3 4,0 4", "0 12,2 14,4 13,6 14,5 4,3 15,7 7,5 4,2 11,0 11", "7 13,3 12,0 10,0 4,6 8,0 6,7 3,6 15,7 1,7 8,3 10", "5 7,6 5,7 7,3 9,4 3,1 3,7 14,2 13,1 11,1 7,3 11", "1 5,5 14,1 7,7 10,6 4,6 9,7 3,4 2,0 14,6 12,4 10", "7 3,7 5,2 10,1 7,0 0,4 11,7 14,1 0,3 8,7 9,0 4,1 6", "0 1,4 1,1 7,6 9,4 0,5 8,6 12,1 14,6 12,3 15,7 4", "2 15,7 7,6 6,4 13,2 10,7 3,4 5,0 8,3 14,4 11,3 11", "5 1,3 15,1 11,2 3,4 12,5 1,7 1,6 12,0 13,1 5,7 5", "2 7,5 0,0 10,2 8,2 3,5 14,3 9,5 4,3 4,5 6,6 5,2 8", "0 13,4 7,3 11,7 7,1 0,7 11,2 3,3 6,7 6,7 10,7 11", "1 3,4 0,5 10,7 7,2 14,7 15,2 11,5 3,4 3,3 11,6 10", "0 11,1 15,6 7,4 9,6 0,5 4,4 8,6 2,4 1,6 13,1 0,0 3", "0 4,0 13,3 8,4 2,2 2,0 8,5 7,3 13,2 9,4 4,3 13,2 6", "7 2,2 13,3 11,6 6,5 1,2 3,0 7,7 6,3 8,7 13,1 12", "4 10,2 9,5 5,5 8,6 3,6 8,2 7,2 5,1 4,3 15,0 1,4 1", "4 10,2 10,6 12,1 6,4 0,7 12,6 2,2 9,0 1,3 6,0 2", "5 13,3 12,4 12,5 1,4 10,5 14,2 11,2 15,4 8,7 14", "0 13,5 3,4 7,4 8,1 8,4 2,4 4,0 13,2 8,0 0,7 12,1 6", "6 11,7 2,3 13,7 12,3 8,0 5,4 10,5 10,5 14,4 11,0 4", "6 6,6 12,0 12,0 13,5 6,2 10,5 8,6 13,3 3,7 9,5 7", "1 14,1 10,5 13,2 5,5 13,2 0,4 12,5 5,2 7,5 0,2 3", "4 13,7 13,7 4,6 8,7 9,6 13,4 1,0 15,7 10,2 9,4 2", "5 0,6 1,4 10,5 13,1 9,6 8,5 4,4 4,7 13,5 15,7 1", "6 11,1 4,2 0,4 5,4 4,1 13,4 5,5 12,3 5,4 4,0 9,2 1" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case75() {
    int rows = 12;
    int cols = 13;
    String[] cutouts = { "0 7,2 4,5 12,2 4,10 0,4 0,8 0,4 5,5 12,2 2,3 7,4 6", "6 6,1 10,2 10,10 9,10 0,10 0,4 9,4 12,11 1,4 4,0 6", "3 11,10 10,6 1,11 5,2 6,8 9,2 1,11 4,5 10,4 0,9 5", "9 7,11 7,2 5,2 8,9 5,1 12,8 4,7 1,3 2,6 0,3 2,2 9", "1 2,9 5,4 6,5 12,10 8,0 0,2 12,5 5,11 3,9 8,8 0", "2 2,9 5,7 11,5 9,3 8,0 0,6 7,5 10,10 0,4 3,3 8", "5 1,8 9,4 8,9 5,1 10,11 3,6 4,11 4,10 4,11 0,1 11", "4 9,11 7,11 2,8 3,5 7,6 4,4 0,11 9,4 10,8 3,10 11", "7 3,9 10,8 11,5 12,0 4,11 6,9 2,8 12,6 3,1 7,4 2", "5 8,6 2,3 11,0 9,10 7,7 11,9 8,11 1,10 2,11 3,7 10", "5 12,9 10,9 8,3 11,4 6,6 7,7 5,9 10,2 12,4 9,0 10", "8 9,2 0,4 2,10 12,5 11,9 2,8 2,0 2,2 8,1 4,8 1", "1 11,11 5,3 4,0 10,11 12,5 0,5 2,9 5,3 3,1 0,10 0", "1 7,3 6,5 10,6 8,9 1,6 4,5 12,1 8,0 4,4 3,8 3,0 1", "11 12,3 12,11 4,9 1,8 8,9 10,4 1,2 2,8 4,6 3,5 12", "9 3,10 1,10 8,0 12,3 9,11 1,9 12,3 7,0 1,5 2,4 1", "0 4,0 9,9 0,3 6,11 11,8 9,5 2,8 10,3 10,6 6,5 3", "2 12,8 8,8 0,4 10,6 11,5 3,0 8,5 8,11 0,8 2,4 10", "8 9,9 4,11 3,8 4,10 4,11 11,7 10,4 8,0 10,2 12,4 9", "8 12,4 0,11 4,9 11,2 2,10 2,11 12,8 9,8 5,7 5,3 7", "11 11,3 11,10 9,3 0,11 11,3 1,9 3,1 10,5 2,0 9", "5 7,3 1,11 2,3 12,4 6,2 7,2 3,8 12,5 4,2 6,1 3", "6 11,10 0,6 2,8 5,10 2,8 0,3 10,4 0,10 3,6 3,10 0", "3 3,9 10,0 1,6 6,4 6,8 4,10 10,4 10,9 12,11 8,9 12", "6 3,10 12,10 5,3 5,4 5,3 11,3 10,9 12,6 8,6 8,2 10", "1 4,2 12,7 0,0 10,4 6,2 3,3 11,0 0,4 4,10 9,11 6", "9 2,2 9,10 3,7 4,7 0,5 4,10 11,11 7,2 5,3 9,1 6", "8 8,1 1,4 12,2 0,2 7,3 8,7 9,1 10,7 10,7 12,8 1", "6 0,2 3,7 1,10 12,6 9,0 1,3 11,11 5,0 5,6 7,4 3", "3 4,7 8,6 3,2 3,3 4,7 12,6 1,5 0,11 6,5 5,3 4,3 2", "8 9,1 10,10 3,7 4,5 7,8 7,2 2,1 4,5 8,8 5,4 8,7 6", "3 9,11 2,8 8,1 2,3 11,7 8,3 9,7 10,4 11,7 11,6 11", "6 7,5 7,1 2,6 6,9 5,3 5,11 5,9 8,7 0,6 6,5 12,0 11", "2 6,9 0,5 10,6 6,10 6,2 11,7 8,10 6,11 12,8 1,2 7", "2 1,9 11,2 1,11 12,4 11,6 7,4 1,3 8,9 0,10 11,7 12", "0 4,1 2,1 5,11 5,10 8,8 8,8 11,6 2,7 6,6 9,7 10", "10 0,10 5,2 6,3 8,9 10,4 11,4 6,7 0,11 5,2 11,8 3", "0 10,0 5,6 12,10 8,5 6,6 4,9 11,6 5,11 2,10 5,11 7", "4 2,6 4,2 6,9 5,7 11,7 0,6 8,0 4,1 10,3 0,4 12,7 3", "7 7,5 2,7 11,6 2,2 3,6 0,0 10,4 12,0 9,3 12,10 0", "6 12,4 11,0 7,5 7,8 0,6 10,6 1,3 1,5 11,7 5,7 0", "1 4,9 10,3 3,5 8,5 5,5 8,8 0,6 5,11 6,9 7,3 9,9 1", "9 4,11 4,8 10,8 2,0 5,11 10,3 4,2 10,9 1,7 7,9 9", "0 2,8 7,7 8,2 9,7 5,0 11,9 4,7 9,4 6,5 1,3 1,7 5", "3 4,8 9,0 4,3 10,4 2,1 12,1 8,0 11,8 7,9 1,2 7,1 3", "2 10,5 2,3 10,11 7,6 0,2 7,11 8,6 4,7 4,11 1,8 5", "8 6,9 12,10 2,1 10,7 9,10 9,2 3,5 0,5 1,4 2,10 7", "5 3,3 9,10 7,0 4,6 6,10 12,0 6,2 5,3 4,3 11,3 6", "7 0,10 12,1 7,1 2,8 11,4 11,0 6,1 2,4 4,0 6,5 1", "0 7,10 11,11 5,7 3,3 6,8 5,0 6,5 12,10 9,7 3,6 9" };
    assertEquals(5, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case76() {
    int rows = 23;
    int cols = 9;
    String[] cutouts = { "8 7,2 5,22 4,19 2,15 0,15 1,18 6,20 0,8 5,10 3,1 8", "13 0,0 7,17 1,18 0,3 6,18 0,16 0,3 4,11 8,14 4,9 6", "18 7,13 7,12 6,5 3,16 8,22 2,17 2,2 7,5 8,1 0,5 7", "2 0,13 1,14 1,11 5,4 1,17 2,3 0,9 8,5 3,14 4,19 7", "16 3,14 3,7 5,18 6,10 4,7 8,20 8,21 6,13 2,15 6", "1 8,1 6,8 0,16 0,22 4,14 6,10 7,22 4,20 5,11 8,9 0", "19 4,22 0,5 0,13 1,6 4,21 7,1 0,5 6,15 1,1 5,18 4", "21 2,16 8,10 4,12 5,10 8,10 8,18 8,16 4,13 7,2 0", "4 8,8 5,16 0,1 1,22 5,20 5,19 1,10 1,16 3,2 4,22 0", "11 7,6 2,8 1,10 5,20 0,21 5,13 7,9 8,6 8,15 1,7 8", "4 1,4 8,4 4,8 4,21 0,16 8,4 0,21 7,14 2,14 2,4 1", "17 7,4 4,1 7,3 2,11 2,18 1,16 3,18 7,19 5,21 6,6 7", "17 7,14 8,14 3,14 7,5 2,12 8,13 3,5 4,5 6,18 6,6 0", "1 0,9 0,2 0,1 2,11 8,12 3,5 7,9 2,10 7,13 2,10 1", "15 8,2 4,16 5,20 3,0 3,11 1,2 5,10 1,13 3,12 0,4 8", "8 4,13 6,16 5,0 4,1 0,9 8,10 5,10 2,15 6,11 3,14 2", "17 3,11 0,19 3,10 0,9 4,8 5,15 3,2 6,14 8,18 6,3 3", "10 2,11 7,13 7,11 4,12 6,8 7,13 6,1 1,4 3,10 8,5 6", "2 4,1 1,10 5,14 4,11 2,2 0,3 4,16 0,13 5,19 5,16 4", "13 8,13 6,0 8,0 4,11 1,15 5,9 3,8 7,7 0,15 5,12 7", "19 2,12 6,0 6,17 4,17 4,11 5,22 2,20 4,2 2,16 0", "16 1,13 0,14 1,9 6,8 1,3 6,20 3,18 7,4 7,14 0,1 3", "4 7,15 6,9 8,20 2,5 6,3 7,3 1,6 4,12 2,8 3,16 4", "9 7,12 4,5 6,13 1,9 0,0 3,9 0,9 1,0 5,9 8,0 5,3 3", "3 2,21 0,0 4,19 6,5 3,18 8,16 7,18 8,13 8,20 7", "19 0,14 3,16 4,13 6,11 4,11 0,13 2,14 4,7 3,21 7", "1 7,6 1,12 6,9 5,12 7,17 5,3 0,18 0,17 2,4 0,8 7", "19 3,10 0,20 5,22 0,21 4,1 6,3 4,10 3,16 3,16 7", "16 2,1 1,2 3,12 1,8 8,21 4,17 2,20 4,21 6,15 6,0 8", "12 6,22 3,10 2,15 8,8 8,19 8,10 4,14 0,12 7,22 4", "10 8,22 4,5 8,0 6,15 8,16 5,10 8,0 7,1 3,12 5,1 6", "13 5,18 8,19 0,0 5,16 3,21 1,9 5,15 8,8 3,22 3,3 0", "20 6,2 1,22 2,12 5,3 5,0 2,1 7,17 1,0 1,19 4,22 7", "8 4,3 2,11 7,0 0,8 6,14 4,3 8,19 7,21 1,4 2,4 8", "14 4,20 2,14 1,1 0,22 4,19 5,6 8,12 3,15 1,9 0,9 2", "7 0,17 7,7 7,9 0,9 2,4 0,7 7,17 5,1 7,20 0,17 8", "7 2,11 4,17 1,10 3,0 5,18 8,16 7,17 0,7 7,7 8,19 1", "3 5,21 4,2 2,6 5,6 2,1 5,12 2,4 1,11 4,4 4,2 7,2 4", "11 3,18 2,5 2,16 6,3 2,0 6,14 8,14 5,1 0,22 2,19 6", "20 6,15 7,14 6,21 2,15 7,9 2,2 3,10 0,6 7,15 0,2 0", "4 5,17 5,2 7,7 0,19 0,17 5,19 2,6 6,3 5,1 6,6 7", "3 6,16 1,15 0,21 4,19 7,3 8,21 2,21 8,18 0,11 7", "7 0,8 2,20 5,12 0,4 8,22 2,19 8,17 0,17 6,14 5,1 5", "17 1,11 3,0 5,18 4,2 8,18 3,11 0,10 5,8 1,9 5,8 0", "12 8,21 0,12 0,8 8,9 3,4 7,12 6,11 0,22 5,4 7,2 4", "21 5,11 2,0 4,7 3,14 2,19 7,12 5,18 4,10 8,7 0", "15 2,11 1,4 2,20 1,4 5,12 6,22 6,6 4,4 1,1 8,6 0", "9 2,8 5,7 5,14 2,12 7,13 5,2 8,11 2,6 3,8 2,20 5", "1 6,16 2,6 6,5 6,11 5,12 5,0 3,7 2,14 0,21 4,16 5", "3 6,10 7,8 0,10 5,0 2,1 4,17 4,1 0,4 1,22 7,21 2" };
    assertEquals(6, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case77() {
    int rows = 18;
    int cols = 10;
    String[] cutouts = { "16 6,15 5,8 4,15 1,8 9,10 6,16 6,10 1,6 6,7 8,3 2", "10 0,14 8,7 3,15 4,2 2,14 1,13 0,10 7,13 1,8 3,6 6", "11 6,2 8,2 2,11 7,9 3,11 8,3 3,12 9,9 4,10 8,3 0", "8 5,6 7,3 9,12 5,11 9,2 2,14 0,15 0,12 7,13 0,11 1", "0 3,13 3,3 1,10 0,7 7,5 3,8 9,1 6,1 9,5 5,7 8,15 2", "1 3,17 3,8 6,7 6,11 5,6 5,2 9,7 0,14 9,8 0,17 7", "10 9,6 6,14 3,10 3,2 2,1 3,2 5,4 5,10 5,12 8,3 4", "12 4,6 0,8 7,6 5,10 5,1 3,9 8,7 1,9 2,12 5,1 6,4 5", "1 1,1 0,8 3,12 9,3 6,4 4,16 1,17 6,1 9,4 0,15 6", "1 3,3 0,9 8,7 3,10 5,15 0,9 7,11 5,16 5,11 3,17 7", "0 5,17 1,13 0,12 6,11 6,3 3,3 1,10 4,12 3,11 2", "11 5,11 9,15 3,2 9,16 0,7 7,13 1,9 2,4 1,0 2,10 2", "13 0,9 1,5 7,17 0,14 8,9 3,5 9,17 6,17 5,11 0,0 5", "15 6,7 5,9 5,8 7,10 1,12 7,7 9,2 6,13 7,10 9,8 1", "9 8,2 5,17 9,16 1,17 6,13 8,2 1,6 8,7 3,12 7,3 8", "0 5,11 5,12 9,1 3,9 9,12 7,5 6,2 0,10 5,15 9,6 6", "4 0,5 8,2 3,11 4,2 5,16 0,9 2,15 8,11 6,9 8,8 0", "8 4,5 5,9 4,0 9,0 3,12 9,9 5,4 9,4 1,8 8,2 5,1 8", "11 2,9 2,17 8,3 4,9 2,10 6,12 9,1 4,4 6,7 0,1 4", "7 1,0 8,1 0,17 1,12 2,3 3,15 0,11 4,8 2,4 9,5 0", "17 4,11 9,16 7,16 5,9 5,0 6,12 2,1 4,12 0,2 4,3 1", "7 8,16 8,11 5,14 8,2 5,5 8,1 9,3 6,2 1,5 5,15 3", "8 4,6 7,12 2,14 3,14 4,2 2,8 8,0 1,16 0,9 0,11 6", "8 4,2 5,15 8,3 7,16 1,3 3,10 2,15 2,11 4,16 9,6 0", "10 9,0 0,17 4,12 3,10 7,6 8,4 2,3 8,14 8,17 2,5 2", "13 7,17 8,7 4,16 3,14 5,12 6,7 7,8 5,8 9,8 2,15 9", "10 3,13 8,8 9,15 4,17 4,7 7,8 4,16 3,5 8,11 2,1 9", "11 2,14 3,3 1,4 2,13 7,7 7,12 5,11 1,13 1,5 6,12 0", "6 5,16 9,11 7,5 0,6 5,16 9,11 2,13 2,3 0,14 1,2 3", "10 6,3 3,16 8,11 6,4 0,10 7,15 2,13 2,17 4,7 1", "1 1,14 4,6 8,0 0,11 6,9 5,17 3,14 9,11 1,7 8,10 1", "12 0,12 1,13 4,11 8,13 8,10 7,13 7,11 6,17 9,16 3", "17 9,3 3,16 7,8 3,15 6,11 3,2 4,12 6,0 0,17 5,13 2", "3 1,4 2,4 1,13 0,6 6,16 8,8 4,11 4,11 5,0 9,16 6", "3 0,9 5,4 5,0 1,5 4,16 8,12 8,0 3,12 1,0 7,6 6", "1 9,13 3,9 0,14 2,17 0,2 9,4 6,6 4,10 3,7 2,7 0", "17 0,3 5,13 3,17 6,5 2,4 0,9 2,7 3,13 7,6 2,5 5", "9 1,12 0,7 6,11 5,15 4,13 7,6 6,15 9,1 3,15 1,15 9", "13 7,10 6,9 0,1 7,9 6,5 3,8 2,15 4,14 2,12 1,4 9", "5 0,7 2,6 9,4 6,11 5,15 8,15 3,16 7,5 2,5 1,6 5", "2 4,2 8,12 0,1 4,2 5,15 8,17 2,14 8,6 3,12 1,16 5", "6 0,17 4,8 2,12 8,8 8,6 7,15 1,3 2,0 6,9 5,9 5", "14 5,16 4,17 0,0 2,1 8,6 8,10 0,17 4,6 0,7 1,1 0", "7 9,4 7,6 0,1 8,11 0,15 9,15 2,14 6,10 7,3 3,12 5", "4 2,12 0,14 1,6 1,3 3,1 7,13 6,0 2,7 4,6 9,15 3", "2 1,17 6,7 7,0 0,10 4,2 8,10 1,3 7,17 5,16 9,17 4", "10 4,17 4,17 6,15 3,15 5,14 9,7 9,1 3,3 1,3 1,8 3", "2 5,12 9,6 8,10 4,6 9,6 0,2 1,7 1,8 7,7 2,4 6,7 4", "12 6,10 7,3 3,3 1,11 6,12 3,12 5,3 8,10 6,5 0,16 0", "14 1,4 0,14 3,8 6,2 3,14 4,7 5,16 1,16 8,12 7,15 7" };
    assertEquals(6, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case78() {
    int rows = 27;
    int cols = 6;
    String[] cutouts = { "6 0,9 5,10 3,4 0,4 1,13 4,9 4,17 2,21 0,23 4,20 2", "2 2,26 1,18 4,18 1,22 1,18 1,0 3,6 1,9 0,26 3,9 4", "12 4,4 5,18 1,19 0,12 5,4 1,1 0,9 4,21 2,20 1,20 4", "20 3,26 1,10 3,9 5,7 1,9 1,11 2,18 0,16 3,17 1", "15 1,12 3,21 2,5 4,21 1,26 0,13 5,13 1,18 3,20 4", "4 4,11 0,11 5,6 0,21 0,11 2,13 4,25 4,15 1,10 0", "23 1,1 1,25 5,1 2,23 3,20 2,13 3,25 0,18 2,14 5", "3 2,21 4,12 5,17 3,13 0,4 4,23 1,9 0,13 3,12 3,6 1", "25 1,21 5,20 4,21 4,10 2,23 4,8 0,19 3,0 5,11 1", "6 5,19 4,20 0,18 3,13 5,20 1,11 2,15 5,23 1,21 1", "18 0,19 0,12 2,15 4,22 1,1 2,21 1,2 4,13 1,14 2", "21 5,3 0,3 3,2 3,7 0,9 3,8 4,4 4,11 5,14 5,23 2", "4 0,17 4,8 5,19 2,7 4,19 2,25 3,13 3,17 5,23 0", "5 2,20 2,25 0,0 2,10 1,7 4,7 1,26 2,13 4,3 2,10 0", "0 3,11 1,6 4,4 0,11 2,0 4,1 5,25 0,24 5,14 0,19 2", "16 0,14 5,10 5,22 1,22 5,10 2,4 0,8 3,25 5,24 2", "8 0,15 0,10 5,14 2,12 2,9 1,4 3,9 4,10 3,13 0,18 1", "21 2,23 0,10 0,21 1,16 4,24 1,12 2,24 0,20 0,12 1", "10 5,11 0,20 1,4 5,4 0,18 3,26 3,0 0,0 1,12 5,13 0", "6 2,14 3,19 3,16 5,12 0,10 1,1 3,6 3,15 3,5 1,5 2", "22 0,22 0,26 5,6 2,3 1,5 3,18 2,10 4,6 5,4 5,0 1", "26 1,8 3,19 2,14 1,13 3,0 5,7 2,20 1,11 2,17 4", "25 2,24 1,21 0,10 1,21 5,6 2,5 0,25 3,20 4,25 4", "26 5,13 1,14 5,12 4,6 3,26 0,9 5,14 5,2 3,25 3", "2 1,1 1,1 3,18 1,9 1,4 2,19 4,7 4,15 0,12 4,6 4", "25 1,17 2,2 0,16 5,9 4,13 2,23 1,22 0,18 4,9 2", "14 5,17 2,24 1,5 1,23 5,18 1,15 4,23 0,0 5,21 0", "25 1,13 4,6 2,18 3,10 2,13 0,8 2,15 3,20 0,21 5", "14 0,18 1,7 2,9 2,11 1,5 4,6 0,26 1,12 5,25 5,0 3", "7 4,18 3,6 0,8 3,3 0,2 0,16 3,23 4,8 0,26 5,1 3", "21 4,1 4,6 0,16 5,0 4,15 0,13 0,11 1,13 5,15 3", "0 1,13 4,17 2,5 4,14 0,18 0,5 5,12 0,23 3,25 0", "1 4,2 3,20 1,9 4,23 1,26 0,3 5,2 2,20 0,17 3,2 2", "8 1,16 4,9 1,8 2,11 5,8 5,23 3,20 4,17 3,17 0,22 0", "1 5,0 0,14 2,11 0,3 2,24 3,22 4,12 3,11 4,11 2", "11 3,25 5,20 4,12 3,22 1,14 0,17 3,22 0,8 3,14 3", "25 5,19 3,16 5,8 4,1 0,2 5,17 4,21 0,6 4,15 4,20 1", "24 3,0 5,8 0,5 3,0 4,5 0,25 5,1 2,15 3,14 1,12 0", "7 5,7 2,22 5,12 4,6 2,0 1,16 3,16 2,2 0,9 1,21 1", "14 5,19 3,22 1,25 4,4 0,1 0,24 2,16 4,4 5,17 2,6 5", "6 4,10 5,0 1,20 2,19 3,7 4,17 5,9 0,22 4,12 3,25 5", "17 0,10 4,10 4,0 0,4 4,7 2,14 4,18 5,7 5,26 5,21 2", "23 1,23 4,25 3,4 1,8 3,26 1,13 3,18 4,23 1,19 5", "2 4,2 2,26 0,13 5,24 5,21 2,6 5,1 0,16 0,14 3,3 1", "7 4,21 3,18 4,9 3,6 2,19 2,20 5,1 4,18 3,20 3,2 4", "25 4,3 0,6 3,0 0,12 1,1 0,21 2,24 4,23 4,14 2,16 0", "25 3,12 0,20 5,12 1,24 3,21 2,12 2,19 2,14 2,26 0", "23 2,12 1,26 4,10 3,0 5,16 5,9 5,24 2,20 4,18 5", "0 2,8 1,25 1,24 2,21 4,14 1,23 2,4 1,8 1,1 0,13 1", "5 3,18 5,10 1,22 5,18 3,6 3,9 5,6 4,2 5,0 0,24 1" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case79() {
    int rows = 7;
    int cols = 23;
    String[] cutouts = { "2 19,4 15,3 17,2 11,1 11,1 2,6 18,5 8,4 11,5 8", "1 14,4 16,4 15,3 19,0 16,1 6,3 14,1 21,3 9,4 9", "5 18,6 0,6 18,2 12,6 19,6 3,1 17,1 21,3 22,2 6", "5 0,5 1,1 18,6 4,5 18,5 17,4 0,0 4,1 7,0 18,4 21", "5 3,4 7,2 11,6 0,3 7,2 19,5 20,5 8,5 4,3 12,4 9", "4 21,0 20,3 2,1 15,2 3,4 14,0 5,5 4,3 1,6 16,6 22", "0 22,5 2,5 14,5 4,1 16,6 14,5 9,4 5,2 21,2 0,5 11", "0 19,3 5,1 20,2 15,2 17,6 1,2 9,3 12,5 8,0 8,0 14", "0 12,4 18,5 19,3 19,0 12,6 6,2 0,5 14,6 3,6 10", "6 2,3 22,6 17,6 20,2 13,2 9,1 2,6 12,2 4,4 17,3 21", "3 22,3 15,2 12,3 19,6 10,4 4,6 18,5 10,0 4,3 11", "2 6,0 15,6 15,4 6,2 9,3 1,3 12,6 6,0 0,1 15,0 7", "2 20,6 9,5 4,6 21,4 14,6 8,0 17,4 13,4 9,0 15,6 3", "4 8,0 15,0 3,3 6,4 0,0 20,0 2,2 18,2 13,2 14,1 3", "1 16,1 9,2 13,5 8,5 13,6 7,0 14,5 22,5 17,0 6,0 3", "0 9,1 12,3 4,4 22,6 5,2 14,2 6,0 21,4 11,4 11,5 0", "5 12,5 20,4 1,3 8,5 15,3 18,3 21,0 13,6 18,0 13", "0 22,6 15,5 10,1 5,0 15,5 12,2 9,2 0,5 10,6 11", "6 8,3 7,2 21,1 12,2 20,5 9,6 10,3 12,2 11,0 12", "4 15,5 11,6 14,4 4,4 8,4 6,4 18,0 13,4 13,2 9,0 11", "1 21,3 1,1 16,2 15,2 1,0 13,5 8,5 0,5 3,3 4,6 21", "3 5,2 13,3 16,1 3,6 21,4 7,3 2,5 21,2 21,0 2,4 8", "3 12,0 13,6 3,5 21,1 17,5 10,0 19,0 6,0 7,4 7,5 19", "4 2,4 11,5 6,5 16,4 5,4 5,5 8,4 10,6 4,4 8,2 15", "6 20,1 1,4 5,0 18,3 3,4 16,0 21,0 18,2 5,6 5,6 11", "2 4,3 13,6 15,0 3,6 11,2 13,3 17,1 13,0 6,6 4,5 11", "1 9,4 13,3 0,0 19,1 17,4 21,0 18,6 22,5 1,2 20,2 3", "2 22,2 10,0 10,2 19,1 7,1 15,2 0,3 7,1 6,1 22,0 21", "4 0,1 11,3 8,1 7,6 13,6 15,0 22,5 22,1 5,1 14,5 7", "4 20,2 5,5 7,4 6,2 21,6 17,3 21,0 17,1 9,4 13,4 11", "6 6,5 2,3 20,5 3,1 0,6 17,1 6,3 17,4 9,0 21,5 8", "1 17,4 15,5 15,5 1,6 22,6 3,1 10,6 20,0 4,6 15,6 2", "4 3,0 1,3 4,2 11,4 11,1 10,0 6,4 22,3 4,6 14,1 11", "3 7,2 14,3 10,6 22,0 13,0 14,2 15,4 7,3 16,4 6", "6 5,6 21,2 5,5 10,2 7,1 14,1 16,4 15,3 4,3 3,6 17", "2 21,1 13,4 4,6 5,4 16,1 14,6 19,1 22,5 13,3 14", "4 13,3 17,3 10,5 7,2 11,4 9,1 17,3 1,5 1,6 14,0 17", "4 17,5 9,2 15,6 0,3 14,5 6,3 6,6 22,4 1,2 9,3 15", "0 6,3 5,2 14,4 2,4 10,2 8,5 3,6 8,1 19,5 4,4 1", "3 5,4 6,0 6,6 19,4 10,3 11,3 3,1 9,2 15,2 13,4 20", "4 9,6 12,3 10,6 7,1 12,1 3,1 22,6 12,4 4,5 10,0 8", "6 13,2 14,1 10,6 17,4 11,6 5,1 4,2 9,3 11,6 12", "5 15,1 5,0 0,0 20,2 18,0 13,0 14,3 6,3 2,0 5,1 12", "4 9,2 4,4 2,0 6,0 8,6 5,3 3,0 12,3 5,0 0,0 17,5 13", "6 16,4 16,0 15,1 20,1 16,2 11,1 2,2 15,3 13,3 2", "1 1,0 12,5 13,3 16,0 20,2 18,1 19,4 2,1 0,1 19", "4 5,5 12,4 9,4 22,6 15,6 17,2 12,3 5,0 17,0 1,4 15", "3 18,0 7,6 7,3 1,2 9,3 0,6 1,4 11,2 17,0 21,4 15", "1 6,1 19,0 16,2 13,3 6,0 19,0 1,2 15,4 20,4 12", "1 4,1 12,5 8,4 19,0 16,2 13,6 12,2 0,1 22,2 17" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case80() {
    int rows = 6;
    int cols = 23;
    String[] cutouts = { "1 2,4 14,1 16,5 22,0 9,0 10,5 4,0 21,0 5,3 20,1 8", "4 8,4 22,2 11,4 18,2 7,1 11,3 3,2 5,1 14,4 8,1 14", "4 10,2 0,5 7,2 0,3 1,1 9,3 17,0 11,3 22,2 7,0 16", "1 18,3 21,1 5,2 10,4 22,1 17,4 5,2 12,3 15,2 18", "3 19,2 12,0 4,5 8,1 4,0 17,3 18,4 16,0 9,5 6,4 15", "2 12,2 13,0 15,1 11,0 5,1 10,5 1,0 20,1 6,1 0,4 4", "1 21,4 15,2 15,4 9,0 3,2 2,4 9,1 2,1 10,1 1,5 8", "0 11,3 10,4 20,4 2,4 19,4 0,4 17,5 4,4 19,1 11", "4 16,2 8,1 7,5 4,2 9,4 10,0 17,4 12,0 5,3 20,2 19", "0 2,0 12,2 7,0 2,5 7,3 4,1 0,1 16,5 21,5 22,5 15", "5 11,0 19,5 8,3 5,1 22,4 9,0 19,4 6,0 13,0 22,1 22", "0 3,5 19,4 19,0 1,5 4,3 8,4 3,4 21,4 22,2 12,5 1", "2 22,3 0,4 21,0 17,2 4,5 15,5 11,0 8,4 18,1 7,5 18", "5 21,2 5,5 14,5 6,4 19,1 2,3 3,2 18,3 12,2 7,5 1", "2 11,4 8,0 0,5 9,1 22,1 3,3 4,5 14,3 4,1 13,2 17", "1 4,3 5,5 1,4 15,5 8,3 17,5 16,1 13,3 11,2 6,0 20", "4 19,1 12,1 20,5 17,0 9,0 5,2 6,2 17,3 14,1 7,5 16", "5 6,1 3,0 7,1 22,0 2,1 18,4 16,4 2,3 8,0 8,1 7,0 1", "5 17,4 6,4 13,1 19,2 18,0 10,5 10,0 5,5 15,5 14", "4 2,3 8,1 3,1 2,5 16,4 5,3 6,4 9,0 3,5 6,2 0,2 6", "5 4,5 3,1 2,5 0,1 0,2 1,3 8,4 19,0 6,0 7,2 8,0 12", "3 0,4 20,3 22,5 10,0 16,5 3,0 4,0 19,4 22,3 16,5 8", "4 6,5 5,5 20,5 15,3 12,0 3,4 12,5 7,5 14,0 20,0 6", "3 17,3 0,4 17,3 4,1 3,2 13,2 19,5 18,1 20,0 5,0 5", "5 16,4 3,0 10,1 3,4 21,1 2,0 14,2 18,1 19,4 11", "1 11,0 17,3 15,2 4,0 2,0 14,3 3,3 17,1 17,5 12", "4 14,4 15,4 15,1 15,1 3,5 6,2 22,5 12,4 7,0 4,0 1", "3 16,4 18,3 11,5 22,3 21,2 0,4 13,3 9,4 13,5 2,0 3", "2 11,1 7,5 12,4 14,2 18,2 12,2 22,0 5,2 15,3 11", "4 6,1 7,1 2,5 17,2 21,1 12,1 1,4 1,0 18,2 20,4 13", "5 17,0 21,1 8,0 6,0 13,5 9,5 10,2 12,5 5,4 20,4 21", "5 11,3 2,3 7,1 2,3 17,1 16,5 13,3 22,2 13,0 8,2 9", "3 22,2 3,4 1,2 19,5 9,0 17,4 22,3 11,5 2,5 9,2 17", "4 10,4 11,1 16,4 4,2 13,5 4,3 14,4 15,2 20,1 17", "5 7,4 12,0 5,2 7,4 0,0 19,1 6,3 3,1 19,5 4,3 4", "0 2,2 18,4 22,4 14,0 2,1 0,2 5,3 7,3 11,0 12,1 19", "4 13,1 3,5 10,1 22,2 8,0 3,1 3,1 4,2 6,5 10,3 4", "1 0,0 12,3 3,0 9,1 14,1 10,1 12,4 7,3 5,0 8,1 19", "1 14,5 10,5 5,5 20,4 14,1 1,3 21,1 4,3 9,3 11,4 21", "3 16,4 7,1 18,0 12,2 14,3 14,5 1,3 3,2 19,1 2,5 1", "2 18,5 7,0 14,4 3,2 0,4 9,2 8,2 15,5 3,2 17,4 3", "2 18,3 2,3 10,2 17,1 8,3 4,5 1,1 5,2 7,3 14,2 8", "5 6,1 15,5 11,5 2,5 5,4 1,0 16,3 12,2 20,1 10,1 10", "1 15,2 12,3 1,2 15,0 15,2 21,4 8,0 6,2 4,3 7,3 11", "3 5,3 5,1 4,4 6,1 0,0 16,5 11,5 2,1 21,0 3,5 10", "4 16,1 13,1 15,5 5,1 7,1 2,4 11,3 5,5 15,2 2,5 20", "5 4,5 3,3 3,5 5,5 17,2 1,4 6,3 10,0 12,0 3,2 13", "4 20,0 3,2 15,1 16,5 5,3 20,0 2,1 8,5 13,4 19,1 2", "4 6,0 7,4 14,4 13,1 16,2 11,2 4,1 12,5 10,3 2,5 4", "5 3,4 20,3 1,3 7,0 17,0 17,4 8,5 3,4 5,5 19,3 6" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case81() {
    int rows = 22;
    int cols = 6;
    String[] cutouts = { "7 2,17 3,15 0,1 3,11 3,8 5,19 5,20 3,19 0,1 0,1 4", "10 1,0 4,1 1,17 0,13 5,16 0,16 5,13 5,15 4,11 0", "3 0,19 5,6 5,21 5,12 1,2 2,15 4,1 4,18 1,12 2,15 4", "13 5,12 1,9 0,7 2,5 4,21 1,9 2,4 5,19 0,8 2,0 3", "17 2,5 5,8 1,10 4,11 1,4 5,19 2,8 2,9 3,13 0,3 4", "16 5,16 0,14 4,0 3,2 1,15 2,9 3,8 5,5 2,17 4,19 2", "10 1,14 2,12 5,6 5,19 5,5 2,16 3,6 5,11 5,20 5,7 3", "16 0,6 5,15 3,15 5,6 3,5 5,18 2,7 1,9 0,15 2,1 1", "12 3,0 4,14 5,2 0,11 2,5 0,11 2,9 5,19 0,4 5,1 4", "13 5,6 5,15 0,12 3,3 5,8 0,12 2,2 0,12 1,6 2,4 4", "15 2,6 3,7 1,19 1,17 2,14 5,4 0,12 3,4 5,15 1,8 1", "6 3,9 3,9 4,11 0,17 3,9 1,2 5,9 3,15 2,12 0,9 0", "20 0,9 5,17 1,12 4,10 0,14 1,13 1,19 5,17 1,4 1", "17 2,20 1,11 1,3 5,16 5,1 4,8 5,19 4,19 5,0 2,3 5", "17 3,13 2,10 0,9 2,15 3,16 5,7 5,14 5,4 5,8 2,17 1", "10 3,15 5,5 0,20 2,11 5,19 0,17 5,6 5,18 4,1 4", "15 0,1 2,11 5,0 0,1 3,16 0,15 5,1 4,7 0,12 1,3 4", "14 1,17 3,15 3,3 0,11 3,0 4,5 5,14 0,5 5,21 2,6 2", "11 3,17 5,15 4,3 4,17 5,20 4,17 5,16 3,12 4,21 0", "7 0,11 1,19 0,4 4,10 4,4 5,17 0,12 1,0 4,12 2,12 2", "4 5,15 1,18 0,17 4,9 1,11 1,7 4,21 5,10 4,20 5", "12 4,5 4,15 3,5 5,1 1,2 5,13 1,18 1,21 5,12 2,18 4", "9 3,17 5,7 4,18 2,17 1,12 5,21 5,14 2,14 5,21 0", "4 0,2 1,9 1,4 5,14 1,15 5,16 2,5 2,6 1,8 0,11 0", "10 0,9 4,15 3,0 4,13 3,9 0,1 2,11 5,5 3,8 4,8 1", "19 3,9 5,5 0,21 5,8 1,19 2,2 5,5 5,6 4,19 0,6 2", "8 1,14 4,14 1,4 4,19 1,0 3,11 0,16 5,16 4,5 0,15 2", "6 5,17 3,3 1,5 2,21 3,6 4,1 1,11 4,15 3,0 0,21 3", "3 4,15 5,18 4,20 1,0 4,20 3,20 0,7 2,3 1,5 2,20 5", "3 2,7 0,13 1,21 3,5 3,16 4,2 0,10 1,18 1,1 1,9 5", "0 5,20 4,19 0,18 1,9 0,5 2,16 0,0 0,3 2,6 2,17 2", "2 1,3 0,0 5,17 3,5 4,12 2,13 0,18 4,4 2,7 5,15 0", "14 0,5 0,17 1,11 3,13 1,11 5,16 4,14 5,6 5,15 0", "5 0,0 5,1 4,9 5,9 1,3 0,1 1,13 3,2 3,14 5,16 4", "16 1,10 2,5 5,0 0,11 2,17 3,8 3,15 3,9 3,4 0,4 5", "3 4,4 0,19 0,15 1,3 2,17 3,13 5,19 1,6 1,21 4,17 2", "10 2,0 1,17 1,11 0,6 3,13 4,6 0,5 0,11 5,13 1,19 4", "0 5,4 2,6 5,9 3,10 4,18 1,13 4,6 3,2 5,21 1,5 4", "14 4,12 0,16 3,21 0,6 0,2 1,5 1,15 4,5 3,10 5,11 3", "8 5,13 5,2 4,12 4,14 5,3 0,0 3,18 4,13 5,13 5,12 1", "20 5,7 0,19 4,21 0,9 3,16 0,10 0,19 1,2 3,0 1,3 1", "12 0,0 1,1 1,18 1,1 5,14 0,2 0,1 5,19 0,13 1,2 4", "9 5,0 5,8 4,12 2,0 2,21 4,9 2,17 0,11 3,16 5,2 4", "9 3,10 3,6 1,3 5,16 0,20 0,5 4,11 3,14 3,20 4,16 3", "18 4,17 1,1 2,9 0,4 1,9 4,5 5,15 5,15 5,3 2,19 4", "16 5,13 1,3 5,16 0,20 4,19 5,6 4,2 5,20 4,19 2,7 1", "19 0,18 3,15 4,14 0,6 2,3 4,17 0,14 4,18 4,21 5", "15 1,19 3,13 1,11 1,5 2,3 4,3 1,0 5,18 1,4 3,19 1", "7 5,20 4,9 2,9 0,2 0,11 1,2 1,8 1,6 1,10 4,18 4", "6 2,17 1,21 1,19 1,7 4,3 4,14 4,21 2,6 4,17 1,20 5" };
    assertEquals(2, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case82() {
    int rows = 6;
    int cols = 25;
    String[] cutouts = { "5 16,1 7,1 11,2 24,1 24,2 20,5 3,0 11,4 8,2 11", "5 13,1 16,0 20,5 5,3 4,4 13,5 14,2 0,1 18,3 11,5 8", "1 21,4 10,5 8,3 14,2 11,4 17,3 20,1 20,1 7,1 23", "2 0,0 6,1 11,1 14,5 7,4 24,3 7,0 6,4 12,1 17,2 20", "0 2,4 21,5 24,1 21,0 12,0 21,5 14,0 15,4 6,5 22", "5 8,2 1,3 21,5 9,5 16,3 3,5 12,3 7,4 6,4 2,4 15", "2 23,0 14,3 24,4 7,4 11,3 9,0 21,2 8,1 10,4 17", "3 6,4 5,2 14,1 23,3 1,4 18,3 8,4 17,3 5,4 13,1 14", "5 13,3 12,0 18,3 18,3 11,2 3,3 13,3 23,5 6,4 3", "0 9,3 16,4 3,2 18,4 14,4 4,3 0,4 24,4 3,1 12,1 21", "2 14,4 2,1 17,3 22,2 14,2 2,2 11,1 17,0 12,2 13", "2 19,1 16,2 2,3 2,0 3,3 20,5 19,0 5,3 6,0 13,2 14", "4 20,1 0,5 24,4 11,0 8,2 19,2 10,0 9,0 21,3 19", "5 22,1 11,2 21,4 16,0 15,5 4,1 7,2 3,4 1,2 1,1 5", "0 22,1 6,4 18,2 13,5 14,5 19,4 12,3 13,3 23,2 15", "2 11,0 2,2 4,5 11,5 23,4 19,1 5,3 18,3 4,3 6,0 3", "4 14,3 9,4 15,4 21,1 21,4 1,2 16,0 14,5 10,3 16", "2 22,1 4,3 1,0 13,5 17,0 19,1 16,0 23,0 4,3 21", "0 7,2 12,2 12,4 8,3 8,2 19,1 9,1 2,1 23,3 0,1 22", "3 18,2 6,4 13,4 6,4 3,5 2,4 8,5 20,2 16,3 1,0 23", "2 4,2 22,4 13,1 22,2 24,4 11,3 8,5 12,5 4,3 22", "2 12,2 15,4 9,1 8,5 24,0 7,5 4,4 13,3 8,4 20,2 13", "0 16,0 3,0 0,1 3,0 19,1 10,2 13,4 23,3 13,2 0,3 3", "4 16,5 16,4 10,2 8,2 14,1 15,1 2,1 21,0 17,3 7", "1 11,3 16,4 11,3 3,5 13,0 13,1 1,2 7,5 4,2 9,3 14", "2 18,1 0,2 6,5 1,5 20,5 12,2 6,0 16,4 20,4 8,4 2", "3 1,3 10,5 22,3 21,5 23,5 9,3 23,2 16,4 6,5 24", "2 8,3 15,5 23,5 0,4 20,4 8,4 13,3 6,1 3,2 16,1 23", "0 15,1 20,2 10,1 14,0 16,5 2,2 21,3 24,5 17,1 18", "1 7,1 8,5 14,0 23,1 16,1 16,1 17,2 18,3 6,5 14", "4 15,1 2,0 22,5 14,5 6,3 1,5 5,5 5,2 21,4 9,4 15", "2 19,3 10,3 10,1 6,0 10,4 23,4 21,4 5,2 21,1 13", "5 24,2 12,5 19,3 16,1 17,5 18,2 22,4 5,4 10,0 22", "1 17,3 20,2 14,3 15,3 12,4 0,0 17,4 19,5 9,4 19", "2 9,2 1,2 5,3 10,1 24,0 24,0 7,2 24,0 3,4 19,5 13", "1 0,5 1,2 8,4 12,3 1,0 23,0 6,1 6,5 8,1 17,5 13", "2 10,1 24,2 9,1 2,3 9,2 10,3 23,2 9,4 17,3 12,1 10", "2 23,2 14,1 0,4 15,5 19,1 14,4 21,2 11,4 0,0 15", "2 6,2 23,0 14,0 9,0 7,4 16,2 16,2 7,1 22,1 11,2 5", "1 8,0 15,4 4,4 8,3 14,4 17,5 8,2 6,3 23,3 20,1 23", "2 10,4 20,2 15,4 10,1 6,5 17,1 16,0 1,2 22,1 0,2 4", "3 12,4 8,3 11,4 2,3 11,5 14,1 3,0 21,4 23,3 11", "1 6,2 2,3 1,1 18,3 11,5 13,0 4,3 18,5 24,0 9,2 14", "2 22,0 13,1 16,4 16,3 13,2 22,3 8,4 21,5 22,2 7", "0 0,2 19,0 14,5 18,3 21,1 17,2 0,0 20,0 20,1 4", "3 7,1 10,2 14,5 13,3 16,5 6,3 20,0 2,2 22,4 21", "5 1,5 17,0 12,2 7,0 0,0 23,3 17,1 17,5 24,1 5,2 3", "2 6,0 15,5 19,0 7,1 21,3 22,4 11,3 4,0 23,0 2,5 12", "4 0,2 6,0 5,3 6,0 12,1 9,1 11,4 23,0 15,0 24,5 1", "1 11,4 10,5 12,0 7,5 11,0 0,3 14,1 22,5 19,4 22" };
    assertEquals(3, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case83() {
    int rows = 11;
    int cols = 18;
    String[] cutouts = { "0 15,10 9,4 4,5 7,10 1,3 17,3 8,4 13,6 13,1 14,1 9", "1 14,8 16,4 0,3 9,5 5,2 12,3 4,1 0,7 12,1 0,8 0", "5 4,1 4,1 13,7 1,10 12,7 13,0 1,10 9,3 12,6 14", "4 6,10 0,10 4,3 15,0 5,10 0,5 6,6 8,10 5,1 4,10 16", "4 16,6 2,0 5,3 16,7 16,4 4,7 9,5 11,10 13,0 8,7 7", "2 4,4 12,6 2,3 4,0 10,0 14,2 3,1 12,2 8,3 11,6 15", "4 8,9 11,7 10,6 4,2 9,0 7,2 1,4 10,3 0,2 3,7 1", "0 14,2 13,6 0,8 4,3 4,9 9,4 0,9 10,5 11,10 8,1 5", "0 3,10 11,10 4,3 1,2 6,1 13,5 10,2 7,5 13,10 13", "10 3,3 4,2 11,3 7,5 10,8 3,5 5,10 6,8 11,0 11,1 15", "2 5,3 7,10 5,8 11,7 1,6 15,5 11,9 3,0 7,9 3,6 9", "8 13,6 4,4 3,2 7,4 2,8 12,5 14,7 7,5 12,3 17,1 5", "0 9,1 17,6 0,5 17,3 3,10 14,4 17,0 3,8 11,5 2,8 13", "4 16,4 1,1 11,5 14,2 14,9 2,4 7,4 5,0 9,6 8,3 11", "0 5,0 9,10 6,5 3,0 12,5 9,9 9,5 5,7 13,3 5,1 12", "7 5,4 7,6 7,8 4,0 6,2 5,7 2,2 2,3 0,6 12,10 14,3 9", "6 13,2 14,7 11,6 3,0 14,0 5,6 4,6 6,10 7,7 4,6 13", "5 10,2 1,1 16,3 11,5 17,0 2,2 2,1 3,9 13,0 0,3 3", "2 14,9 12,8 2,7 5,5 9,1 17,0 13,9 3,0 4,1 15,6 17", "6 16,7 5,1 4,10 5,4 17,4 1,5 1,10 7,5 1,8 8,6 10", "1 2,3 13,10 14,2 6,3 13,7 7,3 12,8 8,6 6,6 8,5 3", "7 7,8 11,10 2,2 8,8 15,7 1,3 10,9 1,8 12,3 1,8 5", "6 14,0 9,4 3,7 12,3 8,2 11,8 11,1 7,8 7,2 2,1 17", "10 1,5 9,7 6,8 14,6 8,3 12,2 4,1 7,1 6,6 13,4 17", "3 4,10 5,8 2,4 3,9 13,2 12,7 12,9 13,7 7,5 0,10 7", "4 7,0 16,2 8,9 1,4 14,4 5,6 7,1 0,10 2,3 14,7 10", "3 8,0 0,8 17,5 7,8 4,5 10,7 12,10 9,7 14,1 12,2 16", "7 13,3 6,3 12,8 13,8 4,7 12,4 4,4 8,5 13,4 2,9 12", "3 9,5 9,9 13,4 12,7 13,4 17,4 8,7 15,6 16,1 17", "1 17,6 1,2 13,10 5,0 12,5 2,0 9,10 11,8 6,1 15", "2 8,5 10,7 10,2 5,9 3,3 17,2 7,7 2,7 12,6 17,7 14", "4 0,10 12,0 4,2 17,5 7,10 15,3 6,8 10,9 6,1 13", "1 0,1 9,5 0,10 7,9 17,1 6,0 15,10 2,0 12,4 15,4 1", "0 3,4 12,3 6,6 7,0 2,0 16,10 5,2 2,7 2,6 3,2 0,5 5", "7 12,9 12,1 3,9 8,1 6,0 17,2 10,7 5,2 12,9 10,4 15", "1 5,10 11,10 17,6 15,0 9,3 4,2 17,7 2,4 0,2 17,0 8", "10 5,9 12,10 14,0 1,1 4,8 11,1 14,8 13,5 10,2 11", "5 8,1 3,2 8,6 9,2 9,1 10,0 5,10 0,6 0,3 17,1 4,3 7", "6 8,4 4,3 10,9 2,3 3,6 3,7 7,0 7,0 14,1 17,6 2", "10 16,3 16,10 16,9 10,1 15,1 4,4 14,7 14,7 0,9 8", "5 7,3 4,6 11,0 5,7 10,7 15,9 8,9 12,1 5,6 8,6 17", "10 10,3 17,6 7,0 8,2 15,9 12,9 2,6 16,0 3,5 15,6 3", "5 5,9 7,1 9,3 1,1 17,6 0,9 10,4 4,8 10,2 6,5 15", "2 13,9 8,6 2,7 9,4 13,2 8,6 2,6 17,6 16,9 10,0 12", "0 2,8 17,7 4,2 17,10 9,0 2,2 2,0 5,5 7,7 4,8 14", "7 7,9 15,5 12,9 2,4 8,6 5,8 11,6 10,10 12,1 0", "10 8,5 12,2 15,3 5,7 10,7 13,5 15,7 17,4 12,7 13", "6 5,0 6,0 13,5 13,10 15,0 13,7 5,0 5,9 8,10 0", "8 3,0 14,1 13,1 16,2 0,2 17,1 1,1 0,5 14,3 14,7 11", "0 0,4 9,3 9,8 10,5 14,8 9,10 7,3 12,3 12,8 2,8 16" };
    assertEquals(7, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case84() {
    int rows = 21;
    int cols = 9;
    String[] cutouts = { "11 3,6 6,15 4,12 7,3 5,5 2,5 0,14 2,3 1,9 3,2 3", "8 0,14 8,13 1,18 7,4 1,1 1,19 4,3 2,8 5,7 0,1 2", "6 3,0 3,13 4,6 8,12 3,12 3,2 2,5 7,14 7,12 6,0 4", "20 5,13 7,1 7,18 0,9 4,14 0,16 3,3 2,17 1,5 6,20 6", "19 6,17 8,11 7,12 8,1 8,10 8,9 3,7 8,4 3,14 2,1 2", "17 6,6 6,3 5,11 8,7 5,2 5,5 4,19 2,14 2,7 5,19 5", "19 3,19 3,11 6,9 7,1 7,19 8,9 3,12 2,1 0,14 2,9 5", "2 5,17 2,4 3,19 5,5 2,2 4,17 4,1 8,3 7,2 5,3 3", "0 8,8 5,15 0,0 0,5 6,8 6,2 1,14 0,19 0,4 4,2 1", "4 3,13 3,6 8,7 1,6 0,15 5,14 5,2 6,12 6,6 4,8 8", "18 5,2 3,18 4,14 1,1 7,10 0,16 3,12 4,18 6,2 1", "3 7,19 0,5 6,9 3,8 7,8 8,7 8,6 0,14 0,0 4,14 4", "5 4,11 1,6 7,13 8,5 4,17 4,5 3,15 5,4 6,17 4,7 4", "13 5,11 8,3 1,4 2,3 1,2 1,6 3,18 3,4 2,18 4,14 6", "17 4,4 2,18 5,14 7,18 6,13 3,17 3,9 8,18 0,15 1", "14 5,1 7,17 7,11 7,8 0,9 0,11 3,9 3,7 0,5 2,18 0", "16 4,8 3,15 2,8 0,19 3,14 8,0 5,3 5,19 6,2 7,20 1", "8 1,20 1,6 1,10 7,9 5,9 7,8 1,10 0,17 4,15 7,4 2", "16 4,13 3,4 0,1 1,15 5,17 4,2 0,5 1,10 5,11 7,5 0", "8 0,16 0,10 8,16 0,17 4,3 5,13 7,17 2,14 5,4 4", "18 6,14 7,20 0,9 6,5 2,8 0,18 6,13 1,1 0,18 3,20 0", "1 2,8 6,18 5,19 8,13 6,18 4,4 4,6 6,10 5,6 6,16 1", "14 3,14 7,7 4,5 4,0 4,12 7,11 4,16 8,3 6,11 2,11 0", "6 2,15 8,11 0,10 1,1 8,3 2,0 3,6 2,15 3,7 4,3 2", "11 6,9 4,15 7,4 6,1 1,18 1,19 1,8 7,0 7,10 7,4 6", "13 3,12 4,19 8,2 7,11 2,17 5,7 3,3 7,7 5,12 7,11 3", "3 7,3 8,16 6,11 2,19 8,6 5,20 5,8 3,1 0,10 1,20 3", "3 3,5 5,16 4,10 7,4 7,11 2,0 2,11 1,15 7,6 8,4 8", "13 3,9 1,19 2,19 6,8 3,4 3,10 4,4 0,3 1,3 0,17 1", "1 8,6 5,3 1,19 6,14 2,14 4,18 8,20 3,16 4,6 7,6 5", "20 6,3 8,7 4,5 8,6 3,20 8,10 5,13 3,7 7,0 8,4 2", "14 3,13 3,19 6,14 2,7 3,16 2,11 5,7 0,13 0,12 5", "0 0,7 0,14 1,5 3,7 6,9 7,19 0,20 1,20 7,14 6,9 3", "9 4,3 4,9 1,5 0,8 1,5 4,11 6,17 0,13 1,20 3,11 0", "6 2,12 3,15 8,1 3,15 5,19 3,3 4,1 2,19 6,15 3,0 4", "20 2,4 8,3 7,0 7,10 5,6 5,17 2,15 6,1 6,6 3,11 6", "3 0,12 1,0 4,2 6,2 8,12 8,16 5,10 7,4 0,12 4,6 1", "1 2,11 3,7 2,0 8,3 2,5 8,7 1,3 8,18 7,17 3,10 4", "14 7,15 3,16 3,3 1,3 0,18 6,16 1,13 7,4 0,10 2,1 6", "19 6,15 4,2 7,2 5,6 5,19 5,6 7,3 4,9 8,7 0,12 5", "11 6,7 7,10 2,2 3,19 4,18 4,13 0,13 8,13 6,16 8", "4 3,6 7,10 8,2 1,6 1,14 4,4 8,17 2,0 4,20 7,11 6", "11 8,16 7,4 5,8 0,3 8,10 2,15 2,20 1,9 3,12 5,10 6", "13 7,5 7,20 5,2 8,13 8,13 6,10 1,6 6,14 6,8 3,6 4", "19 5,9 0,3 0,5 2,14 7,2 6,2 2,14 2,11 6,19 3,10 7", "4 0,15 1,12 3,1 0,0 7,6 6,12 3,6 7,3 1,0 7,20 4", "4 1,18 6,5 0,16 5,10 7,4 5,4 5,15 0,19 3,10 2,1 7", "7 5,4 3,19 6,17 2,20 6,15 5,20 5,15 4,8 6,13 0", "5 8,7 4,14 6,17 8,11 3,3 5,3 8,19 7,0 0,10 8,0 3", "20 6,15 0,4 7,19 3,13 2,4 5,18 3,4 0,5 4,14 3,12 7" };
    assertEquals(6, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case85() {
    int rows = 19;
    int cols = 8;
    String[] cutouts = { "18 5,2 6,13 3,14 0,6 4,3 0,8 4,4 0,7 0,6 4,10 2", "5 0,2 5,16 0,10 3,2 2,16 5,17 3,16 0,6 4,1 4,1 3", "3 5,3 6,14 1,0 5,8 1,10 1,10 3,16 5,14 3,16 1,14 3", "10 6,14 3,12 0,5 0,11 3,13 2,13 6,11 7,10 7,6 0", "12 5,12 5,9 2,2 7,15 2,10 6,11 4,15 7,10 6,4 0,6 4", "14 5,16 3,16 2,16 2,12 1,18 1,10 2,10 2,1 7,7 1", "15 1,8 4,8 3,18 0,6 7,18 6,8 2,16 5,4 5,9 5,12 7", "1 7,13 0,1 2,18 5,4 4,14 2,3 0,14 5,1 2,13 5,18 0", "11 5,18 4,2 1,7 1,5 0,5 5,14 0,5 3,16 5,12 3,10 0", "14 4,3 2,14 7,17 7,10 0,9 2,1 1,1 4,7 1,12 6,7 6", "12 0,0 7,16 5,15 6,12 6,7 0,18 3,6 0,1 2,18 0,11 4", "2 7,13 2,17 7,3 2,2 1,15 5,15 2,13 6,4 0,2 5,8 4", "10 1,15 3,11 5,15 1,3 6,16 4,2 0,5 5,0 0,12 1,3 3", "12 6,13 5,3 1,18 4,4 2,2 5,4 3,14 3,6 3,12 1,4 1", "0 4,15 0,1 6,11 6,7 3,9 5,11 5,13 6,6 0,8 6,1 4", "14 7,12 5,12 4,6 2,14 2,9 5,11 7,12 3,3 0,0 7,12 5", "16 7,6 1,18 6,7 2,9 4,6 7,14 0,7 2,9 4,17 7,9 3", "2 7,2 0,13 1,15 7,13 4,11 1,8 3,13 4,4 3,13 4,1 7", "5 2,7 1,2 2,10 3,18 2,6 0,17 1,10 0,13 7,4 5,8 1", "6 1,12 4,15 0,14 1,1 6,15 5,12 2,5 0,1 4,17 0,12 4", "2 0,9 5,1 6,18 4,3 4,1 2,10 3,3 6,12 4,3 5,11 4", "16 6,7 1,10 6,14 1,8 5,2 5,15 0,8 5,10 1,11 3,16 5", "2 5,13 1,14 4,7 3,7 7,3 6,4 5,10 7,4 4,15 3,13 6", "7 1,10 2,0 1,11 3,6 7,14 6,13 6,11 0,8 0,15 6,17 2", "7 6,5 0,5 0,12 4,1 3,11 7,17 6,10 0,15 2,10 2,11 3", "7 4,14 3,14 3,17 0,9 1,16 4,0 7,11 3,7 3,12 5,1 4", "15 3,7 4,6 2,3 7,16 4,6 6,15 6,6 3,14 2,3 6,15 3", "4 6,2 2,7 3,16 3,11 1,3 2,4 5,13 6,2 1,1 6,16 1", "15 5,7 0,2 0,1 6,3 5,17 0,6 6,6 3,2 0,16 1,6 7", "5 7,18 0,1 2,9 1,16 5,7 2,14 6,15 6,16 4,7 7,10 7", "16 2,9 0,6 4,18 1,1 1,8 6,0 4,14 0,5 4,3 0,9 2,4 1", "17 0,5 3,12 7,14 4,8 0,5 4,3 7,12 3,1 2,3 5,14 4", "18 5,8 6,17 4,7 5,5 0,8 3,8 1,13 2,12 3,3 2,10 2", "1 5,4 4,17 3,15 0,17 1,6 1,2 5,4 7,10 4,15 7,1 3", "6 5,0 3,4 0,8 3,11 0,0 2,10 6,16 4,11 1,0 3,1 7", "7 2,6 7,6 6,9 6,0 2,0 2,4 7,15 0,7 6,13 3,7 3,14 5", "9 0,10 2,11 4,1 7,17 5,13 7,1 0,10 3,4 4,7 7,0 7", "12 0,12 0,2 0,11 5,18 6,7 2,17 4,7 3,7 6,13 2,10 5", "1 2,15 7,14 0,0 3,9 4,2 1,11 4,18 2,0 2,10 2,6 6", "8 4,11 7,0 5,5 0,7 3,6 0,14 5,1 3,12 3,7 5,3 1,5 2", "3 0,14 6,3 4,8 3,10 3,14 1,1 2,15 4,7 7,9 6,1 5", "13 3,11 0,18 4,13 4,3 5,8 3,17 6,12 5,15 4,4 1", "2 0,18 0,2 5,0 7,18 1,12 0,1 7,15 1,5 0,16 6,9 1", "10 2,2 7,8 0,15 7,17 3,3 5,10 4,4 4,15 5,8 7,7 6", "18 7,17 3,9 4,4 3,15 2,13 7,9 6,5 5,17 3,10 3,16 4", "10 7,1 1,15 2,13 3,7 3,9 1,12 7,16 6,13 3,18 7", "6 7,14 5,18 6,18 3,18 7,11 2,6 6,14 4,7 5,5 3,14 1", "15 0,18 2,18 3,16 0,13 0,17 6,15 7,7 3,0 7,2 0,5 2", "14 3,7 0,9 6,17 6,10 1,9 0,17 1,18 1,3 2,3 2,3 3", "10 7,15 4,11 4,5 0,12 5,18 4,5 4,1 6,7 0,12 1,17 6" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case86() {
    int rows = 22;
    int cols = 8;
    String[] cutouts = { "13 6,16 2,21 3,7 1,5 1,20 0,1 4,19 5,15 5,20 6", "8 0,9 7,16 4,11 0,20 4,1 6,7 5,5 2,20 2,14 4,3 5", "3 4,20 6,7 2,1 7,19 1,21 4,15 5,14 4,8 0,4 5,3 3", "11 7,19 0,21 1,4 7,0 7,12 0,0 7,4 7,19 4,6 0,6 7", "13 5,12 2,17 5,10 3,15 1,20 5,21 0,1 7,8 7,9 0", "14 3,11 1,20 4,4 1,5 2,20 2,8 6,1 4,1 3,4 4,16 6", "2 7,3 5,12 2,19 5,6 1,8 3,2 3,0 4,2 5,8 7,20 0,4 5", "9 7,9 6,6 7,8 0,11 3,8 7,16 6,17 0,18 0,8 5,20 1", "15 7,15 6,8 3,19 6,5 3,11 3,18 5,8 3,16 0,11 5,5 2", "9 4,11 0,14 7,18 7,19 4,6 5,5 0,6 1,8 3,6 6,20 5", "1 2,5 6,17 2,10 2,18 6,12 4,17 6,13 6,14 2,6 6", "3 3,13 1,13 2,20 5,18 3,3 7,21 0,1 4,4 4,16 6,4 0", "15 6,6 1,7 5,7 6,18 7,13 0,19 3,14 2,16 4,4 4,21 6", "19 0,4 3,8 4,10 1,3 4,17 7,15 4,15 5,8 6,16 6,8 6", "3 6,0 1,13 1,10 0,21 2,2 4,6 0,21 0,21 1,2 7,18 4", "17 5,5 0,14 5,1 1,4 5,17 1,10 4,16 6,0 7,4 2,6 4", "9 0,21 5,9 3,3 5,2 3,15 3,5 5,5 1,8 2,8 0,2 4,2 1", "18 0,8 1,13 3,2 4,10 3,9 3,1 2,4 6,11 0,15 7,0 5", "15 6,12 7,0 6,9 7,6 6,16 7,13 2,14 2,9 4,14 5,0 2", "4 6,20 2,14 4,16 7,13 0,16 2,6 4,3 1,12 6,16 2", "7 4,9 4,7 6,4 6,2 5,0 6,11 7,13 3,14 7,18 5,8 5", "17 2,19 6,20 6,4 1,6 0,15 5,21 6,17 0,2 0,19 0", "2 4,5 5,21 4,20 6,0 0,13 6,17 0,8 2,5 3,8 3,17 4", "12 6,4 6,16 5,9 5,8 0,19 5,6 5,3 4,9 5,12 4,13 2", "7 6,8 7,18 4,17 7,4 1,9 5,10 0,13 7,16 1,9 4,6 4", "3 3,16 0,16 0,9 5,4 5,0 3,15 4,18 1,5 5,9 4,6 6", "10 7,2 1,14 3,16 3,9 3,18 4,14 1,20 7,8 6,13 1", "5 5,14 0,12 5,19 7,13 2,5 6,16 3,12 7,3 6,17 1,6 1", "0 7,2 1,17 6,7 7,2 4,18 5,16 2,3 7,3 0,16 5,2 6", "10 4,15 7,13 6,13 3,17 1,11 0,13 3,15 1,16 3,4 6", "6 0,16 7,6 6,12 1,17 7,2 1,2 0,11 2,0 1,13 6,5 4", "10 7,5 0,18 1,17 6,15 3,12 6,1 1,19 1,4 1,16 2,4 3", "21 4,16 7,19 1,19 7,13 2,13 3,15 4,3 6,11 0,5 0", "12 5,7 4,1 1,15 0,15 3,8 7,1 7,1 7,17 1,6 5,16 6", "9 6,7 4,15 5,6 3,1 1,17 3,11 1,5 6,0 4,21 3,10 5", "3 2,0 4,19 3,0 6,0 7,21 4,13 2,6 1,12 2,21 1,9 2", "18 4,21 3,20 6,3 4,18 5,19 0,8 0,11 7,10 3,16 4", "12 3,16 2,10 0,3 5,19 3,9 7,20 7,9 0,9 6,9 2,2 7", "4 5,18 1,19 3,11 5,1 5,1 0,0 1,18 4,5 5,11 0,12 3", "11 4,0 7,1 3,3 0,8 4,6 3,2 3,12 3,7 2,1 5,2 0,0 2", "8 3,7 6,7 1,0 0,4 7,5 6,2 0,14 0,18 4,12 1,7 2,3 2", "14 4,18 2,17 4,7 3,15 1,15 2,11 7,11 5,16 0,17 4", "12 4,0 4,21 5,14 5,17 5,19 0,3 1,17 5,9 6,1 3,21 0", "12 1,14 2,20 1,4 7,17 4,6 3,19 4,14 6,4 3,18 0,7 0", "12 2,18 7,21 6,7 7,5 5,2 2,8 3,14 5,18 2,19 0,18 4", "3 5,10 7,19 3,13 2,8 2,11 1,14 2,15 0,10 3,4 7", "6 5,15 7,18 2,1 6,11 1,8 2,14 6,10 6,1 5,21 0,11 1", "18 7,11 3,12 2,0 1,0 2,5 7,20 1,18 5,15 6,7 5,2 6", "7 4,12 2,15 7,1 6,2 7,13 2,16 1,3 3,4 6,11 5,5 5", "11 7,9 1,10 5,3 1,20 7,8 1,11 2,15 7,19 3,13 4,3 1" };
    assertEquals(4, rookattack.howMany(rows, cols, cutouts));
  }

  @Test
  public void case87() {
    int rows = 2;
    int cols = 2;
    String[] cutouts = { "0 0,0 1" };
    assertEquals(1, rookattack.howMany(rows, cols, cutouts));
  }

}
