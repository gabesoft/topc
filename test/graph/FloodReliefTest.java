package topc.test.graph;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.graph.*;

public class FloodReliefTest {
  FloodRelief floodrelief = new FloodRelief();

  @Test
  public void case1() {
    String[] heights = { "ccccc", "cbbbc", "cbabc", "cbbbc", "ccccc" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case2() {
    String[] heights = { "cbabcbabc", "cbabcbabc", "cbabcbabc", "cbabcbabc" };
    assertEquals(2, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case3() {
    String[] heights = { "ccccccccccc", "caaaaaaaaac", "caaaaaaaaac", "caazpppzaac", "caapdddpaac", "caapdddpaac", "caapdddpaac", "caazpppzaac", "caaaaaaaaac", "caaaaaaaaac", "ccccccccccc" };
    assertEquals(2, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case4() {
    String[] heights = { "ab", "ba" };
    assertEquals(2, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case5() {
    String[] heights = { "zzzzzzzzzzzzzzzzz", "ccccccczzzcccczzz", "zzzczzzzzczzzzczz", "zzzczzzzzczzzzzzz", "zzzczzzzzczzzzzzz", "zzzczzzzzczzzzczz", "zzzczzzzzzcccczzz", "zzzzzzzzzzzzzzzzz", "zddddzddddzzdzzzd", "zdzzdzdzzzdzddzdd", "zdzzzzdzzzdzdzdzd", "zddddzddddzzdzzzd", "zzzzdzdzzzdzdzzzd", "zdzzdzdzzzdzdzzzd", "zddddzdzzzdzdzzzd" };
    assertEquals(13, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case6() {
    String[] heights = { "xxxxxxxxxxxxxxxxxxxxx", "xcccccccccccxxcccccxx", "xcxxxxxxxxxcxxcxxxcxx", "xcxccccccxxcxxcxxxcxx", "xcxcxcxxcxxcxxcxcxcxx", "xcccccxxcccccccxcxcxx", "ycycyyyycyycyycycycyy", "ycyccccccyycyycyyycyy", "ycyyyyyyyyycyycccccyy", "ycccccccccccyyyycyyyy", "yyyyyyycyyycyyyyccccc", "yyyyyyyycccccccycmnoc", "pqrstcccuvwxyzzcccccc" };
    assertEquals(4, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case7() {
    String[] heights = { "aaaaaaaaaaaaaaaaaaaaa", "azzzzzzzzzzzzzzzzzzza", "azcccccccczffffffffza", "azczzzzzzczfzzzzzzfza", "azczeeeezczfzhhhhzfza", "azczegzezczfzhazhzfza", "azczezgezczfzhzihzfza", "azczeeeezczfzhhhhzfza", "azczzzzzzczfzzzzzzfza", "azcccccccczffffffffza", "azzzzzzzzzzzzzzzzzzza", "aaaaaaaaaaaaaaaaaaaaa" };
    assertEquals(5, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case8() {
    String[] heights = { "ababababababababababababababababababababababababab" };
    assertEquals(25, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case9() {
    String[] heights = { "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx" };
    assertEquals(2, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case10() {
    String[] heights = { "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case11() {
    String[] heights = { "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b", "a", "b" };
    assertEquals(25, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case12() {
    String[] heights = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x" };
    assertEquals(2, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case13() {
    String[] heights = { "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p", "p" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case14() {
    String[] heights = { "abcdefghij", "klmnopqrst", "uvwxyzabcd", "efghijklmn", "opqrstuvwx", "yzabcdefgh", "ijklmnopqr", "stuvwxyzab" };
    assertEquals(6, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case15() {
    String[] heights = { "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa", "ababababababababababababababababababababababababab", "bababababababababababababababababababababababababa" };
    assertEquals(1250, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case16() {
    String[] heights = { "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case17() {
    String[] heights = { "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ababababababababababababababababababababababababab" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case18() {
    String[] heights = { "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb", "cccccccccccccccccccccccccccccccccccccccccccccccccc", "cbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcb" };
    assertEquals(625, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case19() {
    String[] heights = { "yjlawqdlmeofyrrhzjpcmconsocprpxoznkbfczejyxmlkzqti", "dmlvzutcxbtijxnnagmhmaysahwovxpwtmvdygcrgybiwjqjot", "hzhryxmhzuqxfcgirhtjvdxjkxpiwatbjjdalmxntgjqmcxlae", "octohnrypiunobtefwiiixeqrvbbaazqwcekfsperywzkfwejs", "cltisbvmxhrgmtyvnvfjpalyncyujqkmxpzhzodojiciwzombv", "fyvxrzqhqczdyqpcrlfuowekxkrqoybspprebsunhszrjbuxeo", "rzcqalwagqaeoesacswnyrvyoomgkachhjnkfhdpuwyaeswykv", "dnlpdzdyhqcyqlsxteukhreanhpvptezadwxsoljfryriebzly", "pxiteogbllrvkchhebqbfkorfuspvcizbdgdithueadzwbaron", "keensxgqnaldyctgqlkhxcayznqixalcaklncnresiinxeqmaz", "keznrwhswqhjnlwlwjfbprzedfixhwrrglqewxunrmwawmvwkc", "houzbtvrnwqxzfxvdbvbownjddwektcgyeoqpnufeptfroefpo", "vkpigzwgknwewxuicwazzsvfbysncjefkoozbwudxclakqrulb", "nyrrlvpzhuxjxcmuyfyrmcnrsoowacjhjoskoranfglwhjqpqh", "zwvrdxtiufulpigweywagqmrkqgzwvctjgegtentjgplvrwhlp", "mqxvjhxwyhqcubwpfhiomdmgioicsgxskcrinexgymocdvlqrb", "kxugzibpizaeussyeisowjilbytdbmxywgaoenimwrwmxobgyc", "nnkpdizphqvxrxosrujgwdigktjnyduwodbljybbptazjuhrsc", "fzpdrdjbedzbhaxneicaeujnvhmuiriyxyxalrtmyohqtizpwo", "njqddqrwzukttggendaeoxigsefclwumepjpsdjlknjwtglrqw", "yvtqtcdfxfrntwkhyedgbouzfhuuxqgcqnpoqmunwyhyedqjjw", "zylxzrpiphtiejwbtedcjvztigdufrcvcmitjsfahbemcmvocb", "ftlnyyinaevhoyswidngedjilnebwfabjsqrydzwlaowbedgvn", "hhianqjlceudtiniveiqydkdrixurdugcgvyywqldgaqysttih", "nxcqdprgawctnflsmeiyycbuapiacgdhmjujqolbiuqtunqtgp", "frgiwkyjrwbsdhbvzjmhobrjbsudvuuawpheoxfivenmhiwbxm", "oqpqfnppywfxxcabpzjlkoakappxlwtgefsnbkyyeannbwvtsl", "ktfzdjrzpenldkurdzmcxicpsqaukfwnsprhnthqfdqigbjtzx", "ktjerayohwikvnjcisnffkaicjwwhjxhhfugymtdwszcfoljrl", "silnhdblfbyrkhnixdavjfpwcqccwfuytxhkggziquoykmxjfn", "gbqzdjpiynatzxwilqxjkcxycnwiclmsofpjgcuiujhjrxgcoh", "kaupnzjqshrazocdwfuqlgydorjbupeswtwuuiyfncmhzuznyw", "eciwvvjlvdsyiltizzlxloskmnvvjruydybthgawipwbiqlmex", "oyszotssevpsqcmgyjfbrsdipsenumwotcbpnygvbopqgvvsxq", "kcftaflclqthlflvvnktqixbqmbwidgxubuackgeosqusbbgus", "ezvrlgzmyfpyyuchqpmekjkpxbuqpyqfbvkrnscqskfnjgspfb", "nxenvzjhfsngtnsqdbavsqoixhrjarwfwletyramkdzwxypyfu", "lpmvzrbfrnubtbsmhroabrfneraxhbkupmneppxdhfkaznipnr", "mzufabgvcyarfbezekqcbopmudlqqyykvcrhrpkgednctleojc", "doudepdfopuuemhbbxgoddlxksualqqsbenwnqvhaxkzqdekjr", "prbegektfousrhynetlgqhgwcuhiuvubomvonhdpaynbehguvg", "jgjbotdwjtkkfaxalswzgfpwlnlkuexgbnrjpqkrjdhmfmgdub", "bbpzjdadwsoibtxpisjpaxdsxquhqrqeplryyfmwxlgpdzwuvg", "bvwjgurdikustbypyppstyulbjjnurfhzdmcomcpiehqjaokih", "dcfffwjijphjlofzqrproclxktamirdcdvushyaocmkawwalup", "wcffbqunqimtlxrflnquubdyqfbajkvlkmtbgevuwkkzjtjrbg", "vfsprbkretdmurhcfzqiypykqeuvvnuvtshbswkmnbgsadvdtx", "zkklkwxuqkmfworkhndidvilqnznhpcycuesrtipzqwcuyydgk", "zkhqaqbpxkjbpjqwjrmvjqnzivwmiqzmqembvjxcuckshquhls", "ubmovwwzlhirmyxgqjsistgedqaezbjdbleqgutmevuiujkaym" };
    assertEquals(500, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case20() {
    String[] heights = { "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba", "ccccccccccccccccccccccccccccccccccccccccccccccccba", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacba", "abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacba", "abcccccccccccccccccccccccccccccccccccccccccccbacba", "abcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacbacba", "abcabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacbacba", "abcabcccccccccccccccccccccccccccccccccccccbacbacba", "abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacbacbacba", "abcabcabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacbacbacba", "abcabcabcccccccccccccccccccccccccccccccbacbacbacba", "abcabcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaacbacbacbacba", "abcabcabcabbbbbbbbbbbbbbbbbbbbbbbbbbbacbacbacbacba", "abcabcabcabcccccccccccccccccccccccccbacbacbacbacba", "abcabcabcabcaaaaaaaaaaaaaaaaaaaaaaacbacbacbacbacba", "abcabcabcabcabbbbbbbbbbbbbbbbbbbbbacbacbacbacbacba", "abcabcabcabcabcccccccccccccccccccbacbacbacbacbacba", "abcabcabcabcabcaaaaaaaaaaaaaaaaacbacbacbacbacbacba", "abcabcabcabcabcabbbbbbbbbbbbbbbacbacbacbacbacbacba", "abcabcabcabcabcabcccccccccccccbacbacbacbacbacbacba", "abcabcabcabcabcabcaaaaaaaaaaacbacbacbacbacbacbacba", "abcabcabcabcabcabcabbbbbbbbbacbacbacbacbacbacbacba", "abcabcabcabcabcabcabcccccccbacbacbacbacbacbacbacba", "abcabcabcabcabcabcabcaaaaacbacbacbacbacbacbacbacba", "abcabcabcabcabcabcabcabbaacbacbacbacbacbacbacbacba", "abcabcabcabcabcabcabcabbcccbacbacbacbacbacbacbacba", "abcabcabcabcabcabcabcabbbbbbacbacbacbacbacbacbacba", "abcabcabcabcabcabcabcaaaaaaaacbacbacbacbacbacbacba", "abcabcabcabcabcabcabccccccccccbacbacbacbacbacbacba", "abcabcabcabcabcabcabbbbbbbbbbbbacbacbacbacbacbacba", "abcabcabcabcabcabcaaaaaaaaaaaaaacbacbacbacbacbacba", "abcabcabcabcabcabccccccccccccccccbacbacbacbacbacba", "abcabcabcabcabcabbbbbbbbbbbbbbbbbbacbacbacbacbacba", "abcabcabcabcabcaaaaaaaaaaaaaaaaaaaacbacbacbacbacba", "abcabcabcabcabccccccccccccccccccccccbacbacbacbacba", "abcabcabcabcabbbbbbbbbbbbbbbbbbbbbbbbacbacbacbacba", "abcabcabcabcaaaaaaaaaaaaaaaaaaaaaaaaaacbacbacbacba", "abcabcabcabccccccccccccccccccccccccccccbacbacbacba", "abcabcabcabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacbacbacba", "abcabcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacbacbacba", "abcabcabccccccccccccccccccccccccccccccccccbacbacba", "abcabcabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacbacba", "abcabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacbacba", "abcabccccccccccccccccccccccccccccccccccccccccbacba", "abcabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacba", "abcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacba", "abccccccccccccccccccccccccccccccccccccccccccccccba", "abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case21() {
    String[] heights = { "a" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case22() {
    String[] heights = { "z" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case23() {
    String[] heights = { "bedbdabdddfedabceccabafbafdbfabbfdabbfcbbabdaedcb", "dbadaaafcbabdbaeafedccfafbbbadfcaedaeadbfeddbddcc", "badaececfebeaceefeaedecccfacacafbbaccadbcfebdcedc", "ccbdbccaeebbafeecedfcabeefdeacdaedafececdbefaaebd", "bfaebabbcbbeeffcadefffacdfddcedccdfbfecaddfdcbedc", "afbbcdfecacefabeeddfdbbceebdecaaddaccafabbbeddeba", "fcacaeddebeceecededffdaeaafdfccfbfadbcdfdfdbfeace", "fbafdfadbdababaedbecffbeecbdeeafdadcefabacebbbcdb", "bbfcffbebdecadfebdfbeebceffbdaadcaeadaaeafccfefbe", "fbeddefddfecaadbeccbceecffafecfaeedeadecfcbcacddf", "baccfbdbaefdfeeddececacccefbfaebedbacaddfafecfdde", "dcbacbaaefaeddbfabdeecaceefdbcbadbaabdaaedcbabbfc", "bdabffffaeccadbffadebdafedaddffdbaadcadaaaddcbbef", "abfdcddcfbaaedfcfdbcadcdeeddcaedfdeddbcafdeecafcd", "eebbeebfbafcdcebfbdbedcbafdeccfcbecbfbffcfbebecdb", "cecffffbaaafceaacafdcbeecdcbeeecddccbbfeabbebcedf", "cbfeedfbafddbccebeeabaadeedabafafeffbafeafadffaac", "bdeecbabbfbeecabefdecddefdcffddecacbbbcafeffebbee", "cabfdaceaacfffaebccfeebcedeacbecadcabedefcfdeccdc", "fdefafcdaeabfefebccfaaabfdcdafdcabebacfaeafeaaabf", "eabcbbcdbccdeeffbbcfbaaebbdeeaaabcbfcbccbedcbdcda", "dbfcfbcdcefaedbdebfdaaefbfbecbccbfadbabccbcacdcbf", "eefabdabecabcbbcfcfccdbaadaffeefeedbcbcacedbcbeea", "abffceeaeccdcedddefdaaabcdfbdafbaaecedfeaebcbecab", "bddfebfedebceccceadcfccaaeafaaeddffaecbcbeeccdbbb", "fccfccdbaedebecfbfaebbdcfaccaedbbbdfcbfbbfdefabbc", "fcbbabdfdafccebeefeceedaaceddebdfabdcbedeadebfacd", "dadbabbdebeabbefeebbeffbaaedabcdbefeecbffaadeddef", "afffdfdabbebbddcceacafcdeafaefbeddeedcdbecdabdefc", "efcbcfafdadadfdbaebafcabdafffaadaafcfdbbfedcaafbc", "fcaeffdaeadcfcfeecbecbddeeefccebddfabfedbbdbfeacd", "dfbedefaadffbeebeaddfafdddcbddbeabfddadacffbdcccb", "fadabdbabfffbcdbbcfdddffdfaecccdadcedbecafdedefbf", "daeeeadededcffacbadefadadaaacbeaacaefaebfbcadeccf", "adaefbffecdfddedcdccaeddfccbafffcfaabfebebcabefad", "feaebabcedccefbbcecdeefdcdbbdaffbfddcdebfefdffafc", "acffeacfdbcdfebdfcaeacfeefaacaccbecabaccacedaffff", "aeaadacdfedabaaaaaaafdddbbacfdffdcbcfcbccdcabedbc", "bbfdabcefecacbbbabbefdfcbfcebaacbebdfcbbdbbaadcce", "aebbcdbafffcdeafbedfadaabdadddccafecbeafafabcdddf", "daedbfbfcfefccffccdadccbbcdccfcbadfceacabccceeaaa", "eacdfcececbebcdedadcadadfacddbbcfccabfcadffedebeb", "cbebceaafaecdefccbeadabedcbacdcebbbdebfabfdfdcebd", "dfcbdeddefcbebcdcffbdfdcbddefaaeebedefdbabbfcbeaa", "afadcccecbfbbfabdaacbbbfebcdedccdafbdecffbebcccbd", "fcfccdafeacfcabfffebdacaaaafcfecefdfeffabfaaddddd", "afaefcadefedbeaffddccfcfbcfdebfbafcdbfefaaaabaafc", "feaffcddbdaddffcfdccbddabedbaceccdbcbcebeefcbfafe", "cfbacedadabeefbabccbfecdbfaeccbdcdbbcbdcaadcaaccf" };
    assertEquals(397, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case24() {
    String[] heights = { "bejigjeidbcdjjdggjhghhgdigedefiafagahjaajcaceggabh", "dcedjcadgchjjgdheabefiefijecajcfjgajhhefjjagaiagaa", "gacefiiffhhabaihfjfacfifhggjejgheggfhbehicdedfhgbd", "gjcfdfgbagejhbhdeiacddbbbiiddfiggafebhiajhjgacdhbi", "bgbcjbiidebfhaijeibafdagccgbaiahjdccdbdhehgcidjcjh", "jjbbaegdbjghafgfidfiadcegcichdadceiifhehfcdcahehfj", "chbhfdbhedaaefiffbgajbafggbgecefcdiecgdjiehjbbedbh", "bfbedhfdfgheaieedabjifdahafehidejbgdbiibjffaacfjch", "ecfbfbaiggiafacdbjecjcgjdjcaefgiddfecagbdfhhdjjhha", "fgeibhefeeabjhgfbhjdadjehfajaibfdfjhjigeghhggejjgj" };
    assertEquals(98, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case25() {
    String[] heights = { "vbhlhnjnad", "nqrlaxbszm", "faqjbkbcvk", "dqukyzhzvw", "biznwzkyyi", "raymtvjemp", "pnyeulxadc", "phxobymcpv", "jfxvakqgny", "ryudiqwddp", "vuvkjljqzu", "wkgbtlosrn", "cjzumkrbgl", "izojrzndrq", "aptxtiuqjy", "ycmfmwqcis", "hlgxrtwwgx", "cbgrshwusy", "mmxaltodew", "gwjhfrdusk", "extstkttug", "zuucugbwjo", "qyiznpshyw", "lplgnhwhwk", "etdvoyikzi", "lcmrokoway", "fufsykemli", "tibzdkfvlu", "fetpdivmua", "vbrpvrised", "meevkmelzk", "cxdxfftprh", "zzxsytqwoh", "gxmkptvmqr", "behxbsuivs", "ipfqzzwpbr", "jartviqgrb", "pyekfdeypw", "bbeqynkhns", "apvcawgusn", "avhbaihcnf", "atqifyxecz", "dvhtfibkyq", "ibpodscrsr", "htrknltyza", "mmuqtjzknv", "zdruhyatzw", "sycserxpsa", "myidzyiqum", "ozmbcwjuvw" };
    assertEquals(100, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case26() {
    String[] heights = { "mjjllfdjalcjfajcccdkaecjjcijlgldgjfijceehdlljafacf", "clgfkabhackclhljfafjheefbfadllheaimcmcbkdmaehbmhdg", "lmkikdmligmicdiljlemljefmcifieekbgajgkimakdglhhmah", "fmaklajdaemkgbbfblgjffcafhaijmkcieiefhbdijggheabab", "gdgbkdbcaebkjdgcibilgejkhmkbdckchlehcleikfcmieaehc", "illbjilbfemaiccdjechkfakbffeafkfgdmjgeiahcgbljhebf", "ibmagkilgfiefkggcdiaaahhdiicmhkghlbkeblmccdiihbkab", "adkddggfgkchlklfmfcicgbjjclhihabldgmcdiahcekbgeggg", "dgacgdimahhjmccjllldlihhebidfemcehljfhggkgccdlkcjf", "kaeaddeimjlciblcgdkedifkaaeiecmjkmbkmibhcdgfeakccf", "iciadimiibgkhekkaccgcmgbagijemejkdcmlekadmhdjledld", "ibdcgagmhjajiijmimkhcchhmkhemhcmjlhklamiljaghilgbg", "ijkmaaiclddldeajlgfgljhamfbdgemjmbeifjldhhbgajmmkk", "cmbeclkliakaichhimladjmkamchffdfdfgcfmmaikjcihjffg", "jeifdmfcbegacflldcdjliacgaagmbadmbmaedkbjkacbaehgm", "ffhfdemlemmdfdcfigmegggbhkbgcbelkclejgbamlhdfikjii", "balkjkbilakmfalaflllldbabfjbcgifdmbmhlggkglkkekifc", "glijbedfcbhebffgfhfemmgmhdimlkgakjkckjcheidlhbehaf", "fjelkgkklfbjghhldmdicehicikhcbhmelbhaiblklakafehhm", "ackgjjgdffdmmldcjhdgdjhbdccjckhddmlgbldiaemgcfhdlg", "ffgbmlmeadedafdlllhdmaldfamfilmebchggbibegejemklgl", "lldfhjgdkfcaalbbkmdhlbejjbbakeffccllcljgllamifgcdj", "ahelcghaddkhhghfaljmmalclcakddkgljmjahigjcbjcmfmik", "gdgfebiecjjfdaaadjdilafmhcffeimglflkeamiaahkeblmjg", "bcjkjjgbaalmfaeeajkbggflegcfehihlehkbamgdidbibkgla", "kjjbigbgchlegglbhakdmgfahchldklmilkedfajcgmgcklmge", "allaimiicmlkedcggmghbajkghmhgaegcjmjbhbjjmmgdfblfj", "jhhmcglkahbfadkclkllaiakbgfceejmhagcmebjbfambbgdem", "edmimfgkgdiildlmfhhfefafkjdmembddhbcgmbbcgldldmjif", "bhdahiamkeahblfmglcljabehhcjdmkaaaidjlajgmaikgfkbd", "ldeidbijfjacidliihjgeilbfmbklkfijaclkkkmfejkkjcgli", "bbalfjklehagmambgghghmdkhkkjihmlleedlaebhjmkfcfcim", "lejiajmecdhiieealfigcbbeaemjaklachdkmmdlabedkfgalm", "jbebhffkbbhcahkdbbahmjagmblbklhgceehkbkigfekiejbam", "ajicclmbhcclcdlhfgimjdcahkdfdckljkgkjhhdedebmbdjmf", "mdghkehmfblklcfgagiiklljfdhkifdfimmhhfghhfmkgcafde", "bmmljbbmgklabiabbgbcicbkljbhaiibddmfelhjedbfdijaai", "jemelheamfgkfghjcelfkbikhiigimdihajmdfkkllfheehlid", "dgkdelbabblgljlgdchamcakhibjbghaejealghlegamelglfi", "chlbgeghflbbciiiedfghjjfbjiefjbgjbggheahfejejlmelf", "mlcimlgdibbeikibfjagaeegbhemkcfkbjleaklbchimljkikc", "kicbhajgjcjlcgffhkdamedhlhbehadeeimhdbelbmlkidlhib", "cbfkjhleifllddaehibccfgbgckdmfgfichlgeffhjijglccmi", "gmhhljhfeheakgggafkeicimhbhlemfemhhfjhmmjijccgeeef", "ffdaklmaffmbkidbeblheaedmekijggehmlbejlmdmgdcbkddg", "lcjcbidhgkllmllkhbiffchelgmmjfdmhdkmibflblfjchdffb", "bjhldmhmiihaadaabigaabgfghlffldicckhmmeejhclgckkdk", "jbeaaclcmhkichgaflmlefhdkdfmjiehjebleehlamiabafbik", "glmmemjjdbggimalaehllcfaklkfmiekmjbkchcfliikdiaaal", "halhlcjjgibelladbaeembkdgmhmijefldfklmlmamhmlglllg" };
    assertEquals(475, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case27() {
    String[] heights = { "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaazzzzzzzzzzzzzzzzzzzzzzzzzzaaaaaazzzzzzaaaaaaaa", "aaaazzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzaaaaaaaa", "aaaazzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzaaaaaaaa", "aaaaazzzzzazzzaavaaaaaaaaaazzzzzzzzzzzazzzaaaaaaaa", "aaaaaazzzzazzzaavaaaaaaaaaaaaaaaaaaaaazzzzaaaaaaaa", "aaaaaaazzzzzzzaavvvvaavvvvavvvaaaaaaazzzzzaaaaaaaa", "aaaaaaazzzzzzzaavaavaavvvvavaaaaaaaaazzzzzaaaaaaaa", "aaaaaaaazzzzzaaavaavavvavvavaaaaaaaazzzzaaaaaaaaaa", "aaaaaaaaazzzzzaavvvvaavvvvavaaaaaaazzzzzaaaaaaaaaa", "aaaaaaaaaazzzzzaaaaaaaaaaaaaaaaaaazzzzzaaaaaaaaaaa", "aaaaaaaaaaazzzzzaaaazzzzzzaaaaaaaazzzzzaaaaaaaaaaa", "aaaaaaaaaaaazzzzzzzzzzzzzzzzzzaaazzzzzaaaaaaaaaaaa", "aaaaaaaaaaaaazzzzzzzzzzzzzzzzzzzzzzzzaaaaaaaaaaaaa", "aaaaaaaaaaaaaazzzzzzzzoooozzzzzzzzzzaaaaaaaaaaaaaa", "aaaaaaaaaaaaaazzzzzzoooooooozzzzzzzzaaaaaaaaaaaaaa", "aaaaaaaaaaaaaazzzzzzzoooooooozzzzzzzaaaaaaaaaaaaaa", "aaaahhhaaaaaazzzzzzzzooooooozzzzzzzzzaaaaaaaaaaaaa", "aaaahohaaaaaazzzzazzzzzoooozzzzzazzzzaaaaaaaaaaaaa", "aaaahohaaaaazzzzaazzzzzooozzzzzaaazzzzaaaaaaaaaaaa", "aaaahohaaaaazzzzaaazzzzzoozzzzaaaazzzzaaaaaaaaaaaa", "aaaahohaaaaazzzzaaaazzzzzzzzzaaaaaazzzzaaaaaaaaaaa", "aaaahohaaaaazzzaaaaaazzzzzzzzaaaaaazzzzzaaaaaaaaaa", "aaaahohaaaaazzzaaaaaaazzzzzzaaaaaaaazzzzaaaaaaaaaa", "aaaahohaaaaazzzaaaaaaazzzzzzaaaaaaaaazzzaaaaaaaaaa", "aaaahohaaaaazzzaaaaaazzzzzzzzaaaaaaaazzzaaaaaaaaaa", "aaaahohaaaaazzzzaaaazzzzzzzzzzaaaaaazzzzaahhhaaaaa", "aaaahohaaaaazzzzaaazzzzzhhhzzzzzaaaazzzzaahhhaaaaa", "aaaahohaaaaaazzzaazzzzzahhhzzzzzaaaazzzaaahhhaaaaa", "aaaahohaaaaaazzzzzzzzzaahhhazzzzzaaazzzaaahhhaaaaa", "aaaahohaaaaaazzzzzzzzhhhaaoaazzzzzazzzzaaahhhaaaaa", "aaaahohaaaaaazzzzzzzahhhhhhaaazzzzzzzzzaaahhhaaaaa", "aaaahhhaaaaazzzzzzzaahhhhhhaaaazzzzzzzaaaahhhaaaaa", "aaaaaaaaaazzzzzzzzzzzaaahhhaaazzzzzzzzzaaahhhaaaaa", "aaaaaaaaazzzzzzzzzzzzzaaaaaazzzzzzzzzzzzaahhhaaaaa", "aaaaaaaazzzzzzaazzzzzzzzzzzzzzzzzzzzzzzzhhhhhaaaaa", "aaaaaaazzzzzaaaaaazzzzzzzzzzzzzzaaaazzzhhhhhhaaaaa", "aaaaaazzzzzaaaaaaaazzzzzzzzzzzzaaaaaazhhhhhaaaaaaa", "aaaaaazzzzabaaaaaaaaaaaazzzzzaaaaaaaahhhhhhzaaaaaa", "aaaaaazzzartjaaaaaaaaaaaaaaaaaaaaaaaahhhhhzzaaaaaa", "aaaaaaaaaivldejiaaaejiaaaaaaaaaaaaaaahhhhzzzaaaaaa", "aaaaaaaaamvplunrqafunrqaaaaaaaaaaaaaahhhaaaaaaaaaa", "aaaaaaaaadvfnrahvcnrahvcaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaadvfltajubltajubaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaadvfcruujacruujaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaabaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" };
    assertEquals(18, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case28() {
    String[] heights = { "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzaaaaaaaaaaaaaaaaaaaaaaaaaazzzzzzaaaaaazzzzzzzz", "zzzzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzzzzzzz", "zzzzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzzzzzzz", "zzzzzaaaaazaaazzezzzzzzzzzzaaaaaaaaaaazaaazzzzzzzz", "zzzzzzaaaazaaazzezzzzzzzzzzzzzzzzzzzzzaaaazzzzzzzz", "zzzzzzzaaaaaaazzeeeezzeeeezeeezzzzzzzaaaaazzzzzzzz", "zzzzzzzaaaaaaazzezzezzeeeezezzzzzzzzzaaaaazzzzzzzz", "zzzzzzzzaaaaazzzezzezeezeezezzzzzzzzaaaazzzzzzzzzz", "zzzzzzzzzaaaaazzeeeezzeeeezezzzzzzzaaaaazzzzzzzzzz", "zzzzzzzzzzaaaaazzzzzzzzzzzzzzzzzzzaaaaazzzzzzzzzzz", "zzzzzzzzzzzaaaaazzzzaaaaaazzzzzzzzaaaaazzzzzzzzzzz", "zzzzzzzzzzzzaaaaaaaaaaaaaaaaaazzzaaaaazzzzzzzzzzzz", "zzzzzzzzzzzzzaaaaaaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz", "zzzzzzzzzzzzzzaaaaaaaakkkkaaaaaaaaaazzzzzzzzzzzzzz", "zzzzzzzzzzzzzzaaaaaakkkkkkkkaaaaaaaazzzzzzzzzzzzzz", "zzzzzzzzzzzzzzaaaaaaakkkkkkkkaaaaaaazzzzzzzzzzzzzz", "zzzzssszzzzzzaaaaaaaakkkkkkkaaaaaaaaazzzzzzzzzzzzz", "zzzzskszzzzzzaaaazaaaaakkkkaaaaazaaaazzzzzzzzzzzzz", "zzzzskszzzzzaaaazzaaaaakkkaaaaazzzaaaazzzzzzzzzzzz", "zzzzskszzzzzaaaazzzaaaaakkaaaazzzzaaaazzzzzzzzzzzz", "zzzzskszzzzzaaaazzzzaaaaaaaaazzzzzzaaaazzzzzzzzzzz", "zzzzskszzzzzaaazzzzzzaaaaaaaazzzzzzaaaaazzzzzzzzzz", "zzzzskszzzzzaaazzzzzzzaaaaaazzzzzzzzaaaazzzzzzzzzz", "zzzzskszzzzzaaazzzzzzzaaaaaazzzzzzzzzaaazzzzzzzzzz", "zzzzskszzzzzaaazzzzzzaaaaaaaazzzzzzzzaaazzzzzzzzzz", "zzzzskszzzzzaaaazzzzaaaaaaaaaazzzzzzaaaazzssszzzzz", "zzzzskszzzzzaaaazzzaaaaasssaaaaazzzzaaaazzssszzzzz", "zzzzskszzzzzzaaazzaaaaazsssaaaaazzzzaaazzzssszzzzz", "zzzzskszzzzzzaaaaaaaaazzssszaaaaazzzaaazzzssszzzzz", "zzzzskszzzzzzaaaaaaaassszzkzzaaaaazaaaazzzssszzzzz", "zzzzskszzzzzzaaaaaaazsssssszzzaaaaaaaaazzzssszzzzz", "zzzzssszzzzzaaaaaaazzsssssszzzzaaaaaaazzzzssszzzzz", "zzzzzzzzzzaaaaaaaaaaazzzssszzzaaaaaaaaazzzssszzzzz", "zzzzzzzzzaaaaaaaaaaaaazzzzzzaaaaaaaaaaaazzssszzzzz", "zzzzzzzzaaaaaazzaaaaaaaaaaaaaaaaaaaaaaaassssszzzzz", "zzzzzzzaaaaazzzzzzaaaaaaaaaaaaaazzzzaaasssssszzzzz", "zzzzzzaaaaazzzzzzzzaaaaaaaaaaaazzzzzzassssszzzzzzz", "zzzzzzaaaazyzzzzzzzzzzzzaaaaazzzzzzzzssssssazzzzzz", "zzzzzzaaazigqzzzzzzzzzzzzzzzzzzzzzzzzsssssaazzzzzz", "zzzzzzzzzreowvqrzzzvqrzzzzzzzzzzzzzzzssssaaazzzzzz", "zzzzzzzzznekoemhjzuemhjzzzzzzzzzzzzzzssszzzzzzzzzz", "zzzzzzzzzweumhzsexmhzsexzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzzzzzzweuogzqfyogzqfyzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzzzzzzweuxiffqzxiffqzzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzzzzzzzzzzzyzzzzzyzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" };
    assertEquals(18, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case29() {
    String[] heights = { "aaaaazzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazaaaaaaaaa", "aaaaazzaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazaaaaaaaaa", "aaaazaazaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazaaaaaaaaaa", "aaaazaazzaaaaaaaaaaaaaaaaaaaaaaaaaaaazzazaaaaaaaaa", "aaaazaaazaaaaaaaaaaaaaaaaaaaaaaaaaaaazazaaaaaaaaaa", "aaazaaaazaaaaaaaaaaaaaaaaaaaaaaaaaaazazaaaaaaaaaaa", "aaazaaaazaaaaaaaaazzaaaaaaaaaaaaaaazazaaaaaaaaaaaa", "hhhhhhhhhhhhhhaaazzazaaaaaaaaaaaaazazaaaaaaaaaaaaa", "aazaaaaazaaaaahhhaaazaaaaazzzzzzazazaaaaaaaaaaaaaa", "aazazzzazaaaaaahhhhazaaazzaaaazzzazaaaaaaaaaaaaaaa", "aazaaaazzzaaaahaaohhzzzzoooooooooozzzaaaaaaaaaaaaa", "azaaaaaazazzzhzooaazhzzzzzzzaaaazzaazoaaaaaaaaaaaa", "azaaaaaazaaaahoaazzzhzaaazzzaazzazaazaoooaaaaaaaaa", "azaaaaaazaaoohzzzzaaohooozaazzzzzaaazaaaooaaaaaaaa", "azaaaaaazaoahazazzaoahhazozzazaazzzazaaaaaoaaaaaaa", "azaaaaaazoaahzzzaaoaaahhzzoaazzazaazzaaaaaoaaaaaaa", "azaaaaaaoaaazazzazozaazzhaaoazazaaaazzaaaaahaaaaaa", "azaaaaaaoaaazazzzaozazhahaaaozzzzaaazazaaahaoaaaaa", "azaaaaaaoaaazazzaaoazzhahaaaozzazaaazaazhhaaoaaaaa", "azaaaaazoaaazazzzzzzzzhzzhzzzohaazaazahhzaaaaoaaaa", "azaaaaazoaaazzazaazozzhaahaahhhaaazhzhaazaaaaoaaaa", "azaaaaazoaaahzazazaaoahaahhhhaoahhhazaaaazaaaaoaaa", "azaaaaazoaazhazzzaaaozhhhahaaahhaaazzaaaaazaaaoaaa", "azaaaaazoazahaazzaaaahhaaahhhhoaaazzzzaaaazaaaoaaa", "azaaaaazozaahaazzhhhhahzhhahaaoahhhzhhaaaaazaaoaaa", "hzaaaazaaoaaahzhhzaaahhhzaahhhhhzaazzahhaaazooaaaa", "ahhaaazazoaaaazaazzhhhhaohhahaozaaazzazzhooozaaaaa", "azzhhhhhhhhhhzaahhhzzzhhhhhhhzozaaazzaooohaazaaaaa", "aazahhhhaoooozhhhhhhazzzaazzhhoooozoooozaahazaaaaa", "aazhazzahhhhzhhhhhozzhaazzazhohazzzaazazaahazaaaaa", "aahazazaaooazhahaazohaaaaazzzzzzzaaazzazaaahzaaaaa", "ahzzaazaaaohzhahazaahoaaaazohzhzaaaazazzaaahzaaaaa", "hhzaaazaahhozhazhaaahooaoooahahazzzazazzaaahzaaaaa", "haaaaazahzaazhoohooohoooaazahahzaaozooozooaahaaaaa", "haaaaazahaaazhzaahaahaaoaazaahhoooazaaaazaoahaaaaa", "haaaaazhzaaaazhaahaahazozaazahoazazaaaaazaaohaaaaa", "hhaaaahazzzaazzaahaahazooooohhoooazaaaaaazaohaaaaa", "ahazzhazaazaazazahaahooaozhhahzzzzoaaaaaaazahaaaaa", "aahzahazaazaazzazhoohzaahhzohaaazaaoozzaaazahaaaaa", "aaahhzazazzaaazaazhhhhhhoaoahaazaaazzoazaazzhaaaaa", "aazzhhhhhhhhhhhhhhzzhhaaozohzzzaaazaaaozzzahzaaaaa", "aazhaaaazaaaaaoohaaazzzzzzzzaaaaazaaaaaozahaazaaaa", "aaahzaazzaaaaaozhaaaaahhhhoaaaaaazaaaaazohaaaazaaa", "aaahzzzzaaaaaaahooaaaoaazhhhzaaaazzaaazhhzaaaazaaa", "aaahaaaaaaaaaahazooooaazaaaohhhhhhhhhhhoaazaaaazaa", "aaahaaaaaaaaahaazzaaaazaaaaaoooooooooaaaaazaaaaaaa", "aaahaaaaaaahhaaaazzzzzzaaaaaaaaaaazzaaazzzaaaaaaaa", "aaahhaaaaahhaaaaaaaaaaaaaaaaaaaaaaaazzzaaaaaaaaaaa", "aaaahaahhhaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaahhhaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" };
    assertEquals(130, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case30() {
    String[] heights = { "zzzzyyyyxxxxwwwwvvvuuuuutttssssrrrrqqqqppppoooonnn", "zzzyyyyxxxxwwwwvvvvuuuttttssssrrrrqqqqppppooonnnnm", "zzyyyyxxxxwwwwvvvvuuuttttssssrrrrqqqqppppooonnnnmm", "zyyyyxxxxwwwwvvvvuuuutttssssrrrrqqqqppppoooonnnmmm", "yyyyxxxxwwwwvvvvuuuutttssssrrrrqqqqppppooonnnnmmmm", "yyyxxxxwwwwvvvvuuuutttssssrrrrqqqqppppooonnnnmmmml", "yyxxxxwwwwvvvvuuuutttssssrrrrqqqqppppooonnnnmmmmll", "yxxxxwwwwvvvvuuuutttssssrrrrqqqqpppoooonnnnmmmmlll", "xxxxwwwwvvvvuuuttttssssrrrrqqqqppppooonnnnmmmmllll", "xxxwwwwvvvvuuuttttssssrrrrqqqqpppoooonnnnmmmmllllk", "xxwwwwvvvvuuuutttssssrrrrqqqqppppoooonnnmmmmllllkk", "xwwwwvvvvuuuttttssssrrrrqqqqppppooonnnnmmmmllllkkk", "wwwwvvvvuuuutttssssrrrrqqqqpppooooonnnmmmmllllkkkj", "wwwvvvvuuuutttssssrrrrqqqqppppoooonnnmmmmllllkkkkj", "wwvvvvuuuutttssssrrrrqqqpppppooonnnnmmmmllllkkkkjj", "wvvvvuuuutttssssrrrrqqqqppppoooonnnmmmmllllkkkkjjj", "vvvvuuuttttssssrrrrqqqqppppooonnnnmmmmllllkkkkjjjj", "vvvuuuttttssssrrrrqqqqpppoooonnnnmmmmllllkkkkjjjii", "vvuuuutttssssrrrraadfghgfdbaaaanmmmmllllkkkkjjjiii", "vuuuutttssssrrrrqadgiklkjhebaaammmmllllkkkjjjjiiii", "uuuttttssssrrrrqqcgjmopomkhdaaammmllllkkkkjjjiiiih", "uuutttssssrrrrqqqehlorsspmjfbaammllllkkkkjjjiiiihh", "uutttssssrrrrqqqqfjmquwvsokgcaamllllkkkjjjjiiiihhh", "utttssssrrrrqqqqpfjnrvywsokgcaallllkkkjjjjiiiihhhh", "tttssssrrrrqqqqppeimpsutrnjgcaalllkkkkjjjjiiihhhhg", "ttssssrrrrqqqqpppdhknpqqoliebaallkkkkjjjjiiihhhhgg", "tssssrrrrqqqqppppbehkmmmkifcaaalkkkjjjjiiiihhhhggg", "ssssrrrrqqqqppppoacegiiihfdaaaakkkjjjjiiiiihhhgggg", "sssrrrrqqqqppppooaabdeeedcaaaaakkkjjjiiiihhhhggggf", "ssrrrrqqqqpppoooonnnnmmmmllllkkkkjjjjiiihhhhggggff", "srrrrqqqqppppoooonnnmmmmllllkkkkjjjjiiihhhhggggfff", "rrrrqqqqpppoooonnnnmmmmllllkkkjjjjjiiihhhhggggfffe", "rrrqqqqppppooonnnnmmmmllllkkkkjjjiiiihhhhggggffffe", "rrqqqqppppoooonnnmmmmllllkkkjjjjiiiihhhhggggfffeee", "rqqqqppppooonnnnmmmmllllkkkkjjjjiiihhhhggggfffeeee", "qqqqppppooonnnnmmmmllllkkkkjjjiiiihhhhggggffffeeee", "qqqpppooooonnnmmmmllllkkkkjjjiiiihhhhggggfffeeeedd", "qqppppooonnnnmmmmlllkkkkjjjjiiiihhhhggggffffeeeedd", "qppppooonnnnmmmmllllkkkkjjjiiiihhhhggggfffeeeedddd", "ppppoooonnnmmmmllllkkkjjjjjiiihhhhggggffffeeeddddc", "pppoooonnnmmmmllllkkkkjjjjiiihhhhggggffffeeeedddcc", "ppooonnnnmmmmllllkkkjjjjiiiihhhhggggffffeeeddddccc", "pooonnnnmmmmllllkkkkjjjiiiihhhhggggfffeeeeddddcccc", "ooonnnnmmmmllllkkkkjjjiiiihhhhggggffffeeeddddccccb", "ooonnnmmmmllllkkkjjjjiiiiihhhggggfffeeeeedddccccbb", "onnnnmmmmllllkkkkjjjiiiiihhhggggfffeeeeedddccccbbb", "nnnnmmmmllllkkkjjjjjiiihhhhggggffffeeedddddcccbbbb", "nnnmmmmllllkkkkjjjiiiihhhhggggffffeeeedddccccbbbba", "nnmmmmllllkkkjjjjiiiihhhhggggfffeeeeddddccccbbbbaa", "nmmmmllllkkkkjjjiiiihhhhggggfffeeeeddddccccbbbbaaa" };
    assertEquals(4, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case31() {
    String[] heights = { "ccccccccccc", "caaaaaaaaac", "caaaaaaaaac", "caazpppzaac", "caapdddpaac", "caapdddpaac", "caapdddpaac", "caazpppzaac", "caaaaaaaaac", "caaaaaaaaac", "ccccccccccc" };
    assertEquals(2, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case32() {
    String[] heights = { "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf", "abcdefabcdefabcdefabcdefabcdefabcdefabadsfasdfdaf" };
    assertEquals(11, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case33() {
    String[] heights = { "ab", "ba" };
    assertEquals(2, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case34() {
    String[] heights = { "mrjndrdvrshkipmetigdrrwavakcnpmlqgafdfdvbviwatsgie", "oifsvlbhhfojnsksbjfelnbqwlmjjtmaawspjsgmfbsuuwebnt", "ftcrvfrtpgedgwfvgcpetftnfolkeupkosvaoacpoifuebagqf", "qnvtklgntgrouhsqcvjsibwrvkwtstedjbjjhpchohugiejksd", "jlehilwhcjsjqcqeircjuwgudjortdufrllgtteuwuepqbeqla", "qodoflpahviqhkjgvleaqcuvludvtrtcgigefanujiaqhatule", "tsmvpjkkspwsbnpnfdvtnpkmbbeemfpsmocqhrbvoknjiwqdvr", "nntwgkqnwdafflowjpccohqqutjugdcmirtcshsewrsfcgnrwd", "nthiacwcqvelftltdhewcsoqdvnqnenlemvjucwcbinlgqsrod", "drngrshgqwmuspbvvikeffmihcnhsekkpmdntqsrarcwvuqfnq", "eeqdakwajalnfrofiiqsewhvktglnujfivcpfusffgsafffbqn", "jcwfbwnsoefccmsbkamtwavmgqcgbtumjvrqmvkbsmhehepdoh", "ghdnlhpinbwnkbvhlqtqfhukhobrdvulhqjpknffsppfrdouka", "leoudiuvbflelbufdvnnuthcbawkjbstremsneiflcfftjlaiq", "lpwpcvjiliqkwpcecqquiibsnjpjhchcuivhwqgwqgpiwrrjtf", "kctjggibnaptgdpwkqbfsdnbbodfsjclicfvrlwjtitonnrcrr", "slmldqvwwicnptbvcdcrkhjwwoufqofwuhdllkucecaeuvtunr", "rcehbeobrkstguttmursjljqrhpateogkfqbdcbkkbkvfudqgs", "pdmdlwplwoduarldkwdfbiwaplvetaclwnrurdaemadbulnrcu", "sbbfihuobhqavannbltvqpunhdobsufjiljnhsdwfllmskinmk", "hpukhthultsiwaaitftjgfrlrfjdtetugurflgtwegjsuvsrfd", "jwiqfrijlklbblgdtwculidvdtiqlusdervhcpuvaharwdiukn", "sedpemkocmwaccrmmqfasjvocbkeprebitbvpgrmukqtwioumr", "iacqrhamvpvebvcsdjofabkcknthksgbbbdlbdbbmflanvqigu", "dlmetjiidjkfcbohthmkqvbliqcvabwwfurmwrfnjapiiwrcqr", "tfjwiqphpvfbmusnpnekvoscartlntvwckgebrkhsojociomfw", "lbgvarcsaectrelqikkwfbovdveudhckoobfevsqhoqvureabg", "ntmwlwmbhvwdoonjeaetnishbuojhvlipfbukgflauvjcfmlhf", "geipnjccopitprqrlfiwbivthterneokqrownakunlvnltkkfd", "upnhmshtrtecpuvjnaakuloejfcelirgwdbtmaobrmnctbqcut", "rgiadscglsncsbnqpcuvpdnhnotjslgwkmsuahrvlllqhhnkwt", "gumwirmlhiogrfcqpbtmaotupubvuumvcfrpwvnkaoifrdcmnh", "mwgvkbjevvtatpobqpqpenbogitiwarthwvqhbkqhodforqotv", "rnvkicdfhmuapwnfnfwfiatgiwdcuiqmopgskibqmcdvshkmqb", "bupfeplewkfbmqsvfilkloucbjpwgpooijrgdichvmniwlsfja", "llpcntwqjeiljjqljrioehdftgvmiscawnsvhqmcuchnijllkl", "nhairhagvgckcrmqgbldikdrgsokffoauhfdharinwuibmacio", "ftsctljgagowpmorkwucwpdpecvppnpadmweemtpengpqvadtu", "eiuupoeppssjnhejawtpsjudmjdhovwwcvcjcseejojdcskluk", "mjupoqsbcjiibefeejtrjkkoeduanmuikdqdopnmwqpfkdwrif", "invvcdaslqmvafwvpfrcknndtjednsighicvcvditkwewaaccn", "ahppwcqeaupmsopqrgrmfwfwofvlelqqdcjlchqckrwcjnbncq", "ggfuchmgihjlvviwfwfjpvhbdnupsgsacgqwluktwhovwppvmn", "dkovivadvsnswhtvhlkpsbbmdmvswukqrsgjesbteqsothbgnu", "adqedgrhvjaiejferijcaevnceifseuiwwdgruhnuotedktgeq", "cevfpdudkmreucheoiirsrhwgpnlmapflgdaeomptkhtsdsoco", "waavlpbvqloreisdatmijbtdjlhgnjoviaeemlljmojdjskmih", "sgmlcmscnkjbdrchnoknirjcqpulodmfmfdchhmdlbskptordd", "kpawohvemcptmusnpircteeuoefvjwodmmroeprscggalqlfam", "ouwlqvsjtwpcbmkrhoetfwflmciuoscqrrkngqkmawbmdfmmvr" };
    assertEquals(492, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case35() {
    String[] heights = { "cccc", "cccc" };
    assertEquals(1, floodrelief.minimumPumps(heights));
  }

  @Test
  public void case36() {
    String[] heights = { "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj", "abcderkkkslkjfiekjfozlzlllzzzzzkjfoiejflizekroifjs", "zzzzzzzzzzzzzzzzkkkkkkkkkkkkaaaaaabbbbbbzzzzzllkjl", "lkjdfljsdofjwojflsdolwjflsjdfojlfjdfpowlkkfjlskdfj" };
    assertEquals(146, floodrelief.minimumPumps(heights));
  }

}
