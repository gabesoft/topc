package topc.test.graph;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.graph.*;

public class TransportationNetworkTest {
  double DELTA = 1.0e-09;
  TransportationNetwork transportationnetwork = new TransportationNetwork();

  @Test
  public void case1() {
    int[] cityX = { 0, 0, 400, 400 };
    int[] cityY = { 0, 100, 0, 100 };
    double roadCost = 1.0;
    double airportCost = 150.0;
    assertEquals(500.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 500.0);
  }

  @Test
  public void case2() {
    int[] cityX = { 0, 0, 400, 400, 2000 };
    int[] cityY = { 0, 100, 0, 100, 2000 };
    double roadCost = 1.0;
    double airportCost = 500.0;
    assertEquals(1600.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1600.0);
  }

  @Test
  public void case3() {
    int[] cityX = { 0, 100, 200, 300, 400, 2000, 2100, 2200 };
    int[] cityY = { 0, 100, 200, 300, 400, 2000, 2100, 2200 };
    double roadCost = 0.5;
    double airportCost = 200.0;
    assertEquals(824.2640687119285, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 824.2640687119285);
  }

  @Test
  public void case4() {
    int[] cityX = { 798, 915, 797, 463, 895, 523, 959, 702, 235, 523 };
    int[] cityY = { 126, 25, 402, 45, 841, 762, 982, 605, 616, 78 };
    double roadCost = 1.66;
    double airportCost = 300.0;
    assertEquals(2727.2895312339606, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2727.2895312339606);
  }

  @Test
  public void case5() {
    int[] cityX = { 557802, 812498, 636233, 424085, 980711, 847114, 900568, 956336, 109742, 454851, 252456, 649901, 724152, 907568, 60846, 291044, 396668, 849073, 899079, 673201, 96746, 740557, 648083, 646514, 273886, 995783, 746359, 292092, 216020, 646783, 27569, 953256, 175107, 227461, 467811, 82047, 775304, 862184, 507874, 991745, 629922, 48943, 150625, 998549, 29882, 154611, 657533, 301326, 590992, 95980, 756693, 468022, 840720, 365862, 512594, 484015, 655662, 478932, 927426, 169927, 122021, 788135, 661953, 663493, 365958, 1209, 873670, 402940, 47833, 475871, 805595, 924881, 265062, 836278, 354962, 653992, 463498, 387170, 735991, 795722, 584200, 734919, 148996, 722570 };
    int[] cityY = { 544081, 982988, 398664, 181094, 278280, 806148, 542606, 395192, 687628, 985958, 930583, 31216, 612667, 145200, 538425, 397595, 543990, 864237, 738257, 105256, 339341, 24467, 55551, 827181, 777822, 72467, 352881, 401393, 935436, 981649, 218944, 324318, 150530, 580898, 381760, 919693, 895432, 946511, 988622, 468736, 732506, 390882, 298130, 57782, 891343, 621055, 313619, 234235, 179475, 52372, 466539, 217697, 361357, 387391, 26663, 870452, 2299, 789198, 597040, 867772, 776844, 103770, 320116, 183341, 714410, 48748, 465562, 792562, 385731, 188496, 870805, 336357, 981269, 830300, 916527, 208829, 871410, 813701, 143904, 735632, 121751, 402298, 315470, 67694 };
    double roadCost = 2.84494669476;
    double airportCost = 7.73575632097;
    assertEquals(649.80353096148, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 649.80353096148);
  }

  @Test
  public void case6() {
    int[] cityX = { 975128, 247226, 826801, 504273, 517615, 317268, 879838, 901026, 32216, 535569, 714565, 309367, 424375, 284104, 247230, 333512, 333836, 880526, 191644, 685229, 81595, 382943, 928298, 391784, 635736, 504375, 196456, 954982, 773056, 539935, 900381, 573018, 481247, 485499, 88300, 80615, 829682, 966193, 604591, 24540, 751779, 841541, 190714, 668234, 406216, 833538, 558811, 333986, 308653, 375379, 41617, 361459, 197415, 488906, 300161, 380633, 612054, 63364, 915166, 769706, 198882, 760903, 215565, 980275, 61714, 963103, 763347, 134809, 577855, 465689, 120169, 600793, 900595, 728997, 238677, 644839, 535507, 949996, 447834, 106357, 173417, 646066, 868798, 228976, 723432, 317940, 386521, 649975, 534244, 556871, 584599 };
    int[] cityY = { 916311, 806304, 40636, 666904, 70937, 976993, 67827, 590168, 733315, 918111, 921831, 737385, 569167, 82669, 882045, 281704, 121905, 554652, 69014, 710121, 654771, 928477, 133963, 362682, 702165, 530857, 456444, 574582, 325399, 560365, 805115, 411190, 449339, 319847, 496860, 278893, 616623, 986660, 199662, 132828, 426572, 964637, 219542, 671707, 853682, 982464, 580224, 413777, 568173, 213385, 592282, 14308, 976932, 157878, 41623, 10200, 276942, 129332, 979632, 566229, 748691, 951292, 260552, 60765, 708135, 93575, 694701, 115157, 812035, 157292, 751176, 533006, 170463, 853981, 844059, 870174, 487195, 187581, 700517, 294940, 313287, 374374, 126729, 221176, 567515, 555461, 749680, 642836, 708981, 784243, 820742 };
    double roadCost = 2.54341708588;
    double airportCost = 1.65683921121;
    assertEquals(150.77236822011, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 150.77236822011);
  }

  @Test
  public void case7() {
    int[] cityX = { 493290, 412712, 308787, 356857, 207666, 398346, 476937, 672932, 636810, 549412, 90315, 829953, 203975, 101073, 640835, 870633, 701969, 13666, 937002, 82927, 83519, 649489, 451696, 425373, 34606, 862681, 867586, 763256, 969592, 579838, 960640, 595723, 783333, 307985, 386914, 729480, 769946, 233043, 448963, 112063, 927856, 932362, 230611, 629203, 975372, 736629, 111801, 410890, 236429, 867592, 297242, 458120, 427819, 38433, 60426, 95661, 413876, 234158, 925619, 90564, 507312, 366991, 577574, 967120, 27223, 611276, 796058, 904937, 937155, 457589, 178183, 806732, 775714, 425513, 104310, 954029, 556553, 621188, 152468, 599984, 22176, 861440, 221111, 990373, 463389, 630121, 118, 593803, 858761, 643897, 916858, 86826, 472168, 629980, 903674, 163590, 348336, 595302 };
    int[] cityY = { 258090, 830820, 490910, 7608, 768668, 842151, 944813, 261304, 74186, 328011, 340737, 962629, 757432, 769269, 883622, 571994, 120841, 40807, 987632, 968112, 566037, 888566, 790054, 402209, 730291, 342939, 33881, 545102, 496446, 742220, 699300, 948337, 573131, 889608, 140090, 982227, 660305, 261615, 742106, 932595, 955237, 933651, 326813, 282697, 999244, 776708, 323812, 298551, 100754, 743717, 696415, 33175, 530718, 763007, 153914, 918229, 180565, 108838, 428623, 652780, 985775, 27068, 514091, 949504, 660105, 236185, 723842, 976621, 911634, 554997, 347975, 583411, 336841, 185972, 844698, 795883, 80015, 226619, 457737, 332436, 388294, 97881, 84905, 28365, 355098, 864868, 864986, 601681, 535902, 166911, 256585, 202332, 461250, 555905, 526729, 486339, 51393, 428976 };
    double roadCost = 2.90920508696;
    double airportCost = 8.87012861292;
    assertEquals(869.27260406616, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 869.27260406616);
  }

  @Test
  public void case8() {
    int[] cityX = { 478564, 334873, 267381, 49332, 736321, 358992, 234752, 154092, 153635, 410091, 44096, 395181, 271708, 666532, 10053, 952588, 525266, 277989, 919431, 137855, 592504, 941617, 896418, 329292, 339681, 866976, 599397, 495709, 728476, 254720, 157507, 238566, 793737, 715418, 224597, 264518, 953697, 619302, 688308, 204135, 958443, 260232, 977395, 27272, 208930, 202526, 234108, 427536, 874209, 626526, 282380, 613777, 616043, 870791, 414707, 535328, 656012, 54183, 860559, 786754, 672689, 747612, 667917, 909511, 849321, 237703, 419092, 417863, 557696, 221799, 380006, 622393, 104686, 2068, 309260, 732611, 971681, 573721, 947935, 542666, 211985, 658342, 48755, 821013, 615458, 36105, 465732, 260580, 735454, 411377, 178199, 640281, 750438, 636565, 984742, 129404, 110675, 143894, 62311, 805474, 358790, 7542, 203419, 946549, 116195, 354070, 424300, 137650, 611844, 376759, 637012, 723547, 581179, 185788, 951973, 478030, 999456, 927761, 902517, 800619, 490827, 659609, 791546, 241638 };
    int[] cityY = { 315923, 998442, 842028, 868436, 664693, 367854, 523877, 879014, 634059, 570835, 831022, 910556, 737497, 129334, 579167, 60749, 330546, 981236, 366436, 776840, 187251, 787015, 578594, 713259, 949105, 725571, 105511, 140999, 99145, 812272, 557701, 7880, 945862, 771534, 12135, 441081, 789017, 47514, 179663, 507151, 590821, 449054, 629946, 903363, 758798, 934916, 514174, 541714, 999510, 311606, 683332, 423554, 623411, 236304, 353139, 525919, 159405, 723229, 968076, 667726, 820629, 801509, 775722, 812813, 404943, 715570, 251864, 14643, 944038, 486284, 188296, 379608, 512196, 76089, 549523, 847869, 360058, 39976, 880403, 962950, 177005, 529506, 80087, 809677, 642553, 553608, 512561, 630821, 942333, 31938, 580260, 671994, 989458, 931138, 548226, 586190, 279812, 978899, 960436, 163358, 226097, 365885, 347921, 209225, 440873, 816178, 69076, 979062, 625302, 977279, 181239, 424903, 278094, 786854, 134052, 865291, 478938, 641937, 164680, 524713, 499921, 303298, 968909, 657990 };
    double roadCost = 2.92724438743;
    double airportCost = 6.56983747651;
    assertEquals(814.65984708724, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 814.65984708724);
  }

  @Test
  public void case9() {
    int[] cityX = { 425190, 63966, 892927, 999138, 544727, 453733, 179924, 463320, 255884, 230119, 690333, 836017, 192739, 827594, 54645, 126778, 325965, 179910, 49975, 4296, 845499, 540778, 227220, 20241, 209442, 508556, 375382, 831818, 977953, 404292, 610187, 625594, 642810, 299267, 230540, 732036, 355817, 313638, 712528, 694902, 326859, 752300, 358534, 20841, 478240, 650713, 798350, 804632, 317086, 153911, 834070, 245527, 282264, 177550, 743575, 899415, 841497, 543836, 251144, 68969, 720557, 393345, 246502, 765791, 189367, 102471, 912787, 145569, 362621, 246547, 845136, 199621, 704077, 172107, 227272, 50908, 695417, 114556, 929737, 858387, 430969, 365937, 959241, 553716, 790475, 912811, 386589, 343841, 624031, 872481, 230347, 62840, 186025, 933079, 436776, 336054, 60602, 627521, 382464, 763076, 927923, 937824, 757040, 656266, 552831, 296823, 224701, 269741, 123269, 429185, 408582, 467170, 19819, 949379, 7363, 613454, 929523, 139982, 125989, 632958, 582661, 919589, 845212, 568233, 600422, 421733, 367002, 656279, 571799, 271515, 992217, 344310, 6153, 251134, 205495, 375688, 400822, 873301, 919333, 101555 };
    int[] cityY = { 729640, 844959, 898673, 876767, 383924, 785247, 412868, 271437, 298582, 583753, 372268, 11270, 717932, 634366, 588853, 25242, 64470, 80091, 590581, 409531, 712854, 803623, 21989, 198608, 953749, 955888, 886401, 262357, 787934, 22683, 776837, 11014, 404800, 723423, 330747, 170985, 222242, 921095, 120755, 530268, 375888, 796414, 697963, 172961, 345933, 435176, 379844, 673238, 615281, 751490, 649109, 951364, 174930, 774580, 591082, 401412, 419660, 373490, 839704, 556970, 144329, 818418, 23961, 215650, 891102, 998773, 336958, 625243, 629903, 411370, 754436, 885473, 267924, 254479, 753012, 105713, 150321, 2185, 978778, 879286, 747122, 48730, 622135, 161413, 456020, 672427, 420265, 466973, 693863, 553119, 113689, 566886, 913525, 330963, 22342, 529364, 472131, 771778, 688134, 510529, 664018, 794049, 274443, 743924, 3729, 384051, 929089, 654320, 299019, 646922, 843379, 591922, 719944, 944648, 979200, 713775, 865716, 999101, 567369, 561307, 441457, 956379, 418913, 756168, 229360, 632101, 75457, 921459, 249795, 651820, 730173, 36224, 690749, 285889, 577224, 298097, 981873, 296997, 45371, 586329 };
    double roadCost = 2.58540750374;
    double airportCost = 7.143795758;
    assertEquals(1000.1314061200001, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1000.1314061200001);
  }

  @Test
  public void case10() {
    int[] cityX = { 597063, 148492, 266975, 814597, 956784, 712195, 183122, 133684, 468061, 245790, 385183, 937797, 222242, 278438, 425219, 944602, 777079, 97598, 361226, 92895, 516306, 892996, 241642, 665164, 4808, 362371, 10292, 444435, 250945, 166984, 399393, 752316, 394743, 704189, 768207, 891493, 802600, 413688, 582489, 137850, 101576, 992034, 429864, 995056, 465540, 930906, 262694, 434339, 363693, 726383, 787724, 786658, 543283, 628374, 937176, 917911, 835593, 728855, 500116, 349628, 481305, 571965, 114078, 462095, 406593, 686356, 228553, 621701, 621296, 785427, 236771, 266374, 178081, 398527, 637078, 746715, 383609, 600758, 729070, 364915, 815962, 128006, 247465, 389559, 251301, 296799, 530013, 926714, 265030, 435491, 638890, 764531, 744742, 697459, 12074, 268523, 802304, 38258, 816437, 722723, 611931, 560806, 138741 };
    int[] cityY = { 280799, 780865, 324255, 125042, 439473, 751443, 905531, 379664, 376753, 918433, 838414, 381287, 614394, 551281, 159253, 406563, 367438, 282519, 660187, 979491, 917967, 130171, 573744, 175070, 551670, 779026, 339473, 995179, 585272, 978609, 333444, 543632, 525194, 454629, 186448, 753092, 350529, 366412, 328131, 423507, 710210, 534790, 634122, 152582, 910364, 717629, 822808, 817694, 26323, 713219, 121284, 586291, 375269, 421828, 903537, 325082, 256288, 556875, 728897, 715014, 285256, 847530, 974280, 5161, 207303, 535172, 519562, 725237, 71827, 788472, 835096, 331186, 381562, 207696, 943463, 520206, 128872, 810180, 779619, 439400, 885398, 387081, 49806, 593811, 506968, 805194, 209806, 823836, 548039, 205280, 549831, 195366, 686623, 30482, 112533, 184347, 596046, 300951, 468115, 259957, 652795, 291687, 232785 };
    double roadCost = 2.62485614264;
    double airportCost = 7.30330666057;
    assertEquals(752.2405860387099, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 752.2405860387099);
  }

  @Test
  public void case11() {
    int[] cityX = { 886784, 356860, 214297, 28799, 337778, 203141, 777296, 522416, 303326, 603292, 766134, 706416, 201809, 600877, 16428, 515025, 484971, 184834, 667326, 587623, 307740, 798359, 968354, 605988, 721167, 953098, 891104, 653853, 378065, 544320, 572252, 734427, 730313, 642517, 890229, 43428, 829384, 307404, 197789, 965478, 85687, 30650, 48189, 901204, 478761, 144023, 489082, 857031, 397887, 396006, 449227, 536459, 330368, 301451, 261172, 450901, 221301, 853616, 669660, 197291, 600385, 727617, 246657, 794294, 279576, 508927, 521092, 507995, 211952, 64192, 503007, 709927, 808092, 610084, 935139, 70112, 184936, 499238, 972463, 56896, 640196, 161944, 392007, 649887, 618456, 898749, 162656, 741949, 432358, 920124, 660546, 725655, 549, 905696, 557648, 984135, 806516 };
    int[] cityY = { 9767, 185923, 964539, 804167, 752058, 36003, 544923, 767830, 563980, 225334, 721715, 487452, 264110, 89343, 430194, 857740, 152540, 58424, 721651, 855766, 765383, 408142, 6937, 998686, 125270, 116265, 37506, 797032, 639742, 536596, 677690, 682258, 210963, 780744, 294564, 679301, 198923, 759848, 706321, 583894, 929896, 842253, 330838, 199480, 807822, 249747, 815771, 668324, 945439, 272773, 442889, 271071, 697085, 716140, 644869, 373719, 63696, 421810, 456838, 96157, 368728, 78524, 371256, 27963, 51386, 549566, 431594, 488152, 105946, 134327, 940014, 659872, 268695, 424184, 831306, 874193, 262953, 800082, 50868, 675223, 841684, 582876, 26387, 808635, 351135, 364374, 577900, 63551, 900423, 241004, 486720, 796402, 697446, 738157, 773771, 5221, 977255 };
    double roadCost = 2.72537783013;
    double airportCost = 4.66159530071;
    assertEquals(452.17474416887, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 452.17474416887);
  }

  @Test
  public void case12() {
    int[] cityX = { 302640, 261388, 578887, 528061, 478980, 277399, 722455, 268741, 822213, 905760, 756575, 675732, 147520, 605370, 716543, 754913, 991554, 166339, 303785, 573218, 294077, 572562, 741821, 395571, 294684, 656012, 167066, 844560, 210796, 815091, 260352, 735394, 323744, 567731, 789893, 365746, 783696, 683405, 461305, 578242, 145841, 859536, 467405, 478228, 464567, 992557, 838850, 981471, 560306, 879459, 714427, 803144, 225689, 614176, 190996, 412400, 376812, 932099, 485718, 640537, 892475, 770076, 39844, 948215, 964810, 505877 };
    int[] cityY = { 900699, 792450, 337388, 593527, 952966, 599269, 891099, 655535, 435770, 926946, 898904, 527346, 847968, 568424, 900292, 818598, 957847, 742221, 756232, 245564, 671793, 602309, 184187, 864071, 621981, 606498, 967614, 979566, 317897, 589093, 366633, 560220, 463324, 77407, 936762, 369760, 643729, 170050, 248706, 810254, 502199, 112175, 454317, 630735, 345334, 596682, 253864, 179388, 403715, 749215, 123294, 723855, 377336, 311915, 725157, 175075, 942055, 864412, 318460, 347884, 229998, 299098, 22005, 802971, 710922, 256080 };
    double roadCost = 2.73340323543;
    double airportCost = 6.90675880089;
    assertEquals(455.84608085874, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 455.84608085874);
  }

  @Test
  public void case13() {
    int[] cityX = { 900411, 721192, 927071, 29971, 105908, 351220, 127071, 128774, 127784, 420759, 324505, 411601, 720282, 818391, 844663, 774500, 229178, 29335, 247760, 65055, 621902, 769064, 624211, 14731, 434688, 978894, 873532, 470583, 279417, 673123, 722870, 13321, 331972, 41182, 468968, 899944, 481645, 313485, 902303, 942808, 36459, 520972, 788750, 466800, 129617, 665441, 831687, 563295, 836719, 857334, 604694, 251321, 478995, 513363, 300251, 212535, 775395, 72841, 578727, 149221, 361081, 133776, 249917, 321880, 145003, 692900, 624936, 348550, 919314, 75934, 758110, 375358, 637113, 46520, 819438, 598081, 511195, 609036, 388439, 918972, 853146, 730362, 844988, 727327, 123782, 217356, 3441, 457263, 425705, 98677, 172781, 174361, 744331, 534736, 474375, 257520, 39634, 43606, 169773, 907209, 121158, 379750, 795402, 851214, 238341, 902223, 659028, 542969, 355872, 458278, 577092, 993439, 345014, 773756, 308890, 496659, 691471, 639767, 284253, 523908, 625862, 401709, 945495, 653941, 948657, 52166, 449508, 986108, 345887, 774814 };
    int[] cityY = { 718066, 27830, 588865, 469295, 305101, 826344, 277129, 358560, 560299, 320450, 967961, 986610, 782789, 457564, 220215, 154200, 63786, 155094, 532191, 789908, 803009, 403187, 952728, 327687, 334399, 323756, 228392, 96321, 874457, 227887, 388689, 435744, 810222, 690658, 319504, 325197, 273719, 541090, 215612, 580445, 520142, 982949, 756445, 759926, 831227, 909654, 504158, 312316, 931933, 73959, 383137, 418189, 21546, 450989, 927147, 650346, 782175, 268625, 141086, 647214, 312241, 392126, 932978, 614181, 559108, 709455, 330749, 258594, 64250, 138140, 295092, 431189, 493367, 163377, 830323, 837478, 489994, 77092, 902716, 691709, 154106, 454820, 580756, 543714, 344326, 456914, 803615, 365440, 321828, 964224, 166985, 744341, 42545, 885262, 578964, 353342, 890187, 426980, 525100, 424852, 83791, 520612, 446641, 68066, 576898, 834846, 827740, 824373, 490808, 528811, 152493, 526974, 777901, 62316, 649765, 719786, 961962, 883148, 496371, 919258, 644612, 640416, 817717, 242614, 398498, 322407, 655983, 313034, 305781, 301199 };
    double roadCost = 2.77843534921;
    double airportCost = 3.41532596458;
    assertEquals(443.9923753954, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 443.9923753954);
  }

  @Test
  public void case14() {
    int[] cityX = { 687812, 634530, 338885, 121839, 882367, 530733, 244826, 2508, 153590, 855411, 398983, 11926, 107078, 295439, 278827, 417582, 164056, 68138, 779986, 43764, 379374, 890156, 850298, 123070, 872521, 995450, 758122, 527209, 306971, 931888, 245628, 379961, 898031, 359809, 160742, 377398, 34203, 860938, 304589, 108480, 1475, 606134, 143052, 169112, 55509, 631625, 570258, 222125, 927042, 598894, 324030, 355910, 53397, 634313, 122597, 834174, 494044, 473284, 227465, 840110, 745063, 840395, 558733, 889367, 560079, 356076, 178838, 29351, 276181, 471329, 852308 };
    int[] cityY = { 545455, 838308, 978333, 931062, 865104, 330482, 31517, 809326, 805420, 89516, 927631, 313317, 691450, 572268, 899810, 864832, 853040, 974835, 656444, 726836, 137874, 102245, 749031, 332516, 607030, 37460, 297933, 791446, 377880, 275763, 487404, 686432, 995599, 406045, 99798, 977876, 68600, 309923, 409559, 925580, 9371, 624461, 339662, 426795, 256578, 601684, 204076, 188213, 468625, 920823, 729881, 736702, 615237, 187664, 35875, 789469, 163693, 188051, 559412, 960281, 816338, 546393, 541195, 89113, 595504, 670955, 425677, 503566, 742291, 507191, 447178 };
    double roadCost = 2.97271793794;
    double airportCost = 4.01211245785;
    assertEquals(284.85998450734996, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 284.85998450734996);
  }

  @Test
  public void case15() {
    int[] cityX = { 207746, 139616, 147044, 107962, 319471, 390515, 966371, 422305, 843710, 357760, 861284, 453857, 720578, 656147, 948801, 27441, 480113, 561126, 797394, 182393, 241934, 507581, 862726, 984629, 325826, 40123, 228596, 791571, 63582, 936161, 866028, 762345, 280815, 711668, 59183, 676458, 952520, 495397, 289686, 116787, 101576, 688902, 16074, 33358, 569964, 787220, 688745, 667313, 360952, 443327, 212430, 367308, 434601, 344877, 568420, 489864, 918905, 986700, 43025, 837099, 204273, 897339, 277487, 47966, 269583, 855831, 212569, 411505, 862099, 55892, 650662, 625567, 898704, 650444, 235337, 176168, 960165, 218608, 914138, 36842, 975007, 106869, 823577, 362747, 106157, 981879, 688200, 359473, 591475, 328511, 183781, 755599, 771575, 346707, 531833, 718022, 191377, 251026, 640924, 2723, 185535, 293185, 750220, 131237, 176795, 318903, 445883, 149096, 709696, 28967, 303958, 235353, 36667, 242740, 123286, 709394, 658958, 949899, 775210, 724322, 714204, 350792, 59563, 411124, 682402, 506205, 620869, 198500, 791847, 337787, 778893, 543687, 489606, 674895, 644808, 305559, 223134, 706084, 778984, 101707, 255721, 850934, 127488 };
    int[] cityY = { 258650, 488384, 125085, 524686, 545172, 178876, 310572, 673421, 93479, 955943, 938581, 104841, 561851, 879731, 89714, 868108, 197787, 641685, 633848, 800127, 598786, 460953, 693416, 672313, 743968, 59458, 344967, 410058, 41689, 890719, 822317, 847966, 762980, 806878, 268165, 148741, 125693, 796178, 29379, 110743, 264701, 635625, 454624, 33571, 238391, 140839, 207645, 857720, 322360, 766944, 916240, 402161, 450174, 329800, 739917, 69434, 418212, 917577, 395101, 722772, 292726, 833224, 247844, 431549, 135345, 48710, 102094, 715359, 180883, 885059, 426963, 586016, 622971, 840996, 503834, 738016, 829700, 135652, 678268, 674114, 551163, 491049, 924670, 241432, 23189, 428126, 905200, 930754, 409769, 315877, 487938, 333612, 345914, 299650, 824028, 318133, 574164, 649467, 980634, 373194, 476756, 764485, 43761, 990738, 841686, 575158, 247848, 735293, 81305, 121880, 301105, 843438, 749079, 554697, 603508, 312489, 378073, 394829, 270931, 723457, 857221, 6340, 656287, 153120, 649498, 321869, 598067, 792173, 740944, 856123, 558586, 647121, 859801, 824454, 13861, 144088, 768313, 969188, 711562, 325963, 761424, 670040, 436759 };
    double roadCost = 2.09044458634;
    double airportCost = 6016748.95527;
    assertEquals(17256729.74405023, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 17256729.74405023);
  }

  @Test
  public void case16() {
    int[] cityX = { 229483, 459222, 625213, 653900, 261028, 124289, 456829, 727425, 196145, 322187, 697136, 329353, 697307, 412961, 50708, 883574, 327040, 236988, 645857, 350354, 975876, 129475, 231598, 293665, 782393, 774555, 946203, 968973, 748761, 368283, 128636, 436601, 112759, 720645, 983913, 387618, 552654, 738712, 707208, 84667, 418278, 815170, 682375, 905596, 148664, 59013, 943080, 647500, 341938, 596755, 752320, 825016, 919739, 588318, 872227, 932443, 560049, 324155, 848097, 265169, 283227, 435323, 409187, 990069 };
    int[] cityY = { 71847, 594051, 135771, 843109, 617853, 349864, 425314, 490126, 53611, 955517, 176295, 701100, 160789, 976295, 447008, 29079, 886676, 536485, 502731, 476253, 586336, 292598, 178029, 478587, 913279, 995394, 430160, 336616, 423459, 82388, 411648, 440710, 154797, 883156, 143494, 919717, 73997, 978178, 684014, 826789, 381728, 276887, 333243, 441477, 48343, 274509, 547842, 987496, 447583, 894034, 382965, 437502, 53882, 753328, 192719, 44407, 970338, 931798, 748337, 180571, 522063, 832850, 237483, 125765 };
    double roadCost = 1.46971354283;
    double airportCost = 8129116.71176;
    assertEquals(8024527.023312066, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 8024527.023312066);
  }

  @Test
  public void case17() {
    int[] cityX = { 73496, 159982, 104036, 859586, 748354, 335763, 54997, 476774, 278539, 403413, 904514, 371062, 210245, 440289, 250329, 418765, 93057, 449348, 10667, 554982, 9425, 122157, 918162, 300206, 410128, 803031, 208913, 972931, 633990, 437590, 690911, 232054, 405595, 469263, 455253, 910396, 21568, 722513, 879063, 370718, 760628, 952020, 352343, 238753, 58282, 620374, 545700, 859416, 543055, 422203, 842414, 596923, 728314, 475073, 497274, 823223, 463461, 96447, 446741, 646834, 348498, 268257, 674515, 370662, 30786, 664787, 623543, 965179, 779218, 496955, 586005, 452913, 870106, 557889, 362126, 247092, 753905, 310940 };
    int[] cityY = { 749786, 303382, 518905, 34832, 350067, 7805, 35095, 113115, 313007, 155037, 13362, 812023, 611053, 460624, 715461, 64663, 256726, 995324, 753662, 330967, 384788, 781481, 519341, 809526, 207583, 905708, 690608, 168099, 143311, 680620, 49433, 460559, 641831, 165447, 508416, 808402, 674547, 70550, 928181, 964247, 697527, 696112, 476006, 557886, 247520, 290032, 30371, 921623, 373223, 875119, 99821, 973679, 58436, 742149, 805628, 105832, 434485, 318400, 749800, 436153, 374260, 582007, 477217, 323917, 466693, 320998, 413233, 654980, 549202, 51492, 812675, 480961, 850622, 806573, 202675, 153593, 120310, 792149 };
    double roadCost = 2.76527888093;
    double airportCost = 5636136.47266;
    assertEquals(16397567.259288376, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 16397567.259288376);
  }

  @Test
  public void case18() {
    int[] cityX = { 259372, 963997, 290832, 359027, 11538, 688222, 859003, 795605, 316725, 424272, 828061, 197807, 146752, 489927, 232435, 5246, 894140, 477600, 733703, 191275, 216300, 180532, 135781, 914234, 312549, 75391, 123820, 458313, 772365, 760270, 596666, 72517, 752504, 613812, 921459, 450866, 911781, 982857, 570052, 176013, 58090, 442806, 609840, 333828, 526183, 628162, 364868, 819884, 42568, 450767, 89527, 478052, 42776, 611486, 932162, 97553, 580830, 791322, 507957, 780987, 16461, 532160, 479542, 935953, 787419, 34379, 551283, 582997, 499153, 279005, 881030, 739892, 811825, 292252, 253910, 889591, 267817, 941808, 610829, 626817, 617551, 738075, 631276, 980281, 33924, 539734, 44667, 693391, 140321, 669064, 71390, 367829, 616136, 315779, 795812, 532679, 718693, 211571, 88733, 368119, 853886, 437313, 149953, 507755, 776243, 385584, 721991, 962890, 670947, 121125, 578506, 366729, 381330, 207689, 767363, 657057, 500579, 479219, 555334, 216802, 457385, 620336, 338972, 733060, 558712, 944517, 547523, 245720, 468405, 336383, 120033, 754854, 129441, 520392, 179050, 734968, 884555 };
    int[] cityY = { 272520, 652405, 130470, 663696, 11878, 902342, 923991, 41858, 50638, 491131, 997485, 188130, 291034, 793691, 970211, 50043, 539380, 826178, 513285, 488754, 555479, 207877, 166508, 885700, 652673, 240818, 848014, 627209, 210418, 323441, 812482, 48715, 273121, 216918, 128027, 129967, 834896, 642036, 831274, 923294, 557143, 142851, 382416, 350654, 560277, 411349, 562683, 239515, 328373, 90941, 575580, 730103, 670595, 377175, 227807, 374651, 718541, 443916, 460644, 42409, 268246, 541980, 285951, 467161, 418414, 704301, 731489, 301019, 42343, 160183, 287320, 730736, 747234, 381078, 992228, 794017, 221612, 68281, 55867, 707031, 380634, 864496, 537914, 98029, 128253, 826263, 300196, 847084, 198423, 139380, 574358, 961291, 496100, 350334, 510430, 45481, 874788, 314255, 580563, 922637, 690147, 369765, 875025, 512097, 755444, 614981, 211885, 615662, 342645, 104313, 190238, 218325, 523417, 299738, 553300, 858157, 34172, 547195, 742462, 181743, 269797, 928869, 534173, 283251, 16083, 773803, 538257, 511224, 823552, 557495, 325859, 148944, 700930, 196369, 123065, 49521, 519202 };
    double roadCost = 1.5302305915;
    double airportCost = 403320.722097;
    assertEquals(11631775.457841028, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 11631775.457841028);
  }

  @Test
  public void case19() {
    int[] cityX = { 16847, 603620, 267663, 142465, 539684, 286532, 477691, 406460, 548856, 939028, 768700, 969976, 64936, 399274, 669699, 911825, 63638, 85097, 676462, 505060, 559394, 730053, 410171, 427589, 635386, 871322, 857973, 530356, 846112, 663907, 249494, 570915, 998327, 151697, 583507, 215142, 236842, 395726, 391100, 224804, 426557, 38359, 94621, 809236, 348087, 827427, 459760, 994260, 45875, 485272, 840956, 145815, 367760, 476018, 313952, 126595, 810284, 287920, 990060, 559999, 300966, 637040, 202730, 427904, 17214, 747021, 197657, 908877 };
    int[] cityY = { 188001, 526845, 136493, 239549, 977966, 975046, 802200, 358700, 713552, 234227, 368780, 197713, 953226, 686241, 823711, 271033, 466701, 190313, 622902, 427938, 697336, 321656, 498004, 827938, 782775, 212147, 246749, 675145, 47577, 553983, 841193, 590028, 443090, 530015, 900397, 577093, 144671, 725083, 753942, 370560, 503129, 726806, 47051, 491200, 960345, 807499, 741235, 255633, 687010, 318236, 617241, 451657, 292420, 401078, 259559, 921613, 944281, 823874, 250741, 766202, 7307, 898385, 712092, 272975, 68965, 550423, 422892, 575173 };
    double roadCost = 0.838973938094;
    double airportCost = 1178448.39948;
    assertEquals(4646269.356862824, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 4646269.356862824);
  }

  @Test
  public void case20() {
    int[] cityX = { 135903, 123329, 354861, 979762, 81162, 287196, 509696, 852651, 283101, 531069, 596668, 57412, 362392, 343251, 509435, 712485, 590242, 587699, 304518, 965126, 87343, 960870, 270372, 630812, 396327, 259246, 513617, 148785, 662476, 902439, 255272, 324054, 703335, 67589, 697423, 190332, 385975, 93036, 175986, 950230, 167885, 398793, 513400, 790432, 952891, 439508, 523418, 223396, 891294, 982769, 592988, 481503, 985999, 326050, 19833, 192258, 609599, 9632, 310373, 639282, 396070, 478601, 448228, 185707, 499801, 321584, 764366, 861878, 715252, 889933, 546096, 776722, 371426, 402203, 360765, 711090, 639203, 680231, 635088, 915171, 376492, 419140, 555516, 869519, 946373, 772215, 992819, 291365, 251843, 346070, 711986, 903391, 494143, 919750, 419562, 535861, 894940, 797531, 804143, 55015, 267708, 732699, 764491, 623653, 145388, 818393, 626186, 696274, 139260, 772262, 483661, 909080, 660475, 807517, 816736, 200174, 403381, 576906, 353883, 696219, 145213, 385534, 808062, 801139, 841254, 924292, 797850, 924495 };
    int[] cityY = { 834203, 479466, 369105, 252362, 211543, 334917, 822185, 232381, 518721, 1090, 74380, 642747, 363762, 268695, 976581, 465795, 194628, 349567, 325675, 456134, 892387, 279677, 660764, 592494, 261982, 210365, 884454, 218432, 213097, 931435, 961464, 992417, 473402, 110243, 512000, 692400, 624726, 874109, 901864, 879985, 116909, 776740, 692473, 648501, 669652, 793335, 24527, 982316, 433401, 906726, 69051, 701199, 130245, 271637, 863099, 567623, 461959, 903117, 223860, 825883, 770284, 280284, 346275, 882314, 771378, 593700, 346518, 188179, 108310, 508423, 61745, 2985, 391810, 198094, 114426, 47533, 598645, 805854, 293685, 737456, 516421, 684021, 368319, 572041, 202872, 222453, 172405, 108792, 999941, 214646, 426007, 641983, 42970, 511335, 719256, 802164, 364133, 250095, 95060, 531433, 311094, 867794, 851146, 359231, 425409, 524851, 805931, 399562, 393947, 267793, 138241, 635049, 751839, 22835, 868879, 548115, 92302, 189133, 336522, 462669, 192081, 937751, 420951, 900309, 821984, 385038, 955396, 565140 };
    double roadCost = 2.75425688445;
    double airportCost = 6513623.00299;
    assertEquals(20577457.00958079, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 20577457.00958079);
  }

  @Test
  public void case21() {
    int[] cityX = { 168353, 128022, 495745, 890121, 153329, 337771, 264643, 86046, 183959, 971276, 743239, 89754, 535187, 742641, 492381, 841324, 621251, 775956, 99264, 319057, 4151, 486448, 955001, 3006, 601670, 113187, 705316, 964203, 144552, 342527, 997864, 259296, 128050, 502878, 87002, 717000, 899627, 985224, 613920, 303309, 954704, 738817, 909004, 68945, 485007, 917884, 385221, 554752, 346558, 853789, 491720, 438218, 582268, 885570, 776941, 504226, 486276, 306519, 853956, 422312, 458546, 627921, 677482, 526952, 118816, 708252, 740682, 943768, 860371, 111294, 53240, 204752, 671104, 330500, 437706, 11240, 295045, 168678, 274644, 141315, 775272, 5097, 548731, 568374, 277210, 283860, 637644, 382868, 231130, 49546, 769925, 411654, 789775, 530460, 367715, 94196, 377234, 921803, 895693, 944903, 817402, 661756, 864391, 7925, 657807, 64090, 756184, 96702, 899211, 667645, 694430, 809185, 588134, 362996, 329447, 5013, 468563, 497660, 640754, 810591, 513712, 804884, 832307, 706175, 283877 };
    int[] cityY = { 87934, 570181, 933401, 942541, 784113, 502150, 998980, 929462, 483543, 713889, 215856, 265362, 445962, 636125, 541524, 877825, 737819, 716582, 933693, 230428, 383055, 466896, 75360, 598606, 852620, 505295, 170073, 664310, 961193, 26402, 999926, 341484, 121124, 766350, 396040, 280181, 958562, 876097, 450922, 321085, 211831, 262641, 984634, 579808, 226007, 432342, 243794, 441405, 794392, 49223, 377773, 472642, 233053, 971825, 33386, 726528, 50558, 173533, 787477, 571735, 901462, 882181, 501672, 780153, 641119, 467171, 629773, 826228, 739097, 711921, 631004, 837108, 610868, 144916, 604469, 7313, 251760, 958184, 637135, 182885, 382368, 525791, 329877, 762060, 817756, 447705, 99417, 258962, 733787, 955164, 656914, 420453, 894145, 595091, 129650, 770520, 991943, 662664, 547805, 646561, 650642, 755986, 164998, 924966, 426851, 549865, 506276, 919769, 478177, 169050, 29038, 191013, 612818, 878624, 222647, 11170, 535799, 977937, 214908, 489030, 729211, 687747, 902403, 530996, 23112 };
    double roadCost = 1.40724365736;
    double airportCost = 8337604.95751;
    assertEquals(11043062.023393437, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 11043062.023393437);
  }

  @Test
  public void case22() {
    int[] cityX = { 888213, 558876, 573681, 374436, 925938, 999157, 822989, 935997, 792207, 279692, 881702, 512546, 841994, 894900, 119057, 555216, 231369, 620916, 545776, 453486, 626807, 204730, 351443, 412815, 338739, 331517, 669252, 157512, 268288, 616896, 672929, 59434, 629983, 766571, 98191, 515281, 941695, 756835, 851359, 964260, 211328, 825931, 448471, 453926, 977955, 270967, 699606, 797442, 77542, 740815, 146897, 202878, 819231, 63948, 45431, 138188, 183652, 665123, 469356, 268219, 498787, 624418, 64206, 835310, 498562, 428957, 373794, 16098, 953091, 862253, 595273, 835635, 683667, 525010, 96204, 523786, 555073, 615725, 879339, 725459, 10521, 387833, 270380, 725901, 877303, 109604, 599615, 513472, 711036 };
    int[] cityY = { 243549, 480186, 870970, 101360, 404977, 878945, 755489, 437659, 597058, 684318, 238218, 269445, 940330, 368767, 209092, 569833, 749973, 125857, 609592, 777399, 577678, 27833, 106662, 370801, 986886, 91400, 150734, 139532, 305295, 5571, 590569, 603847, 695438, 790407, 490933, 381804, 271423, 269379, 420515, 600956, 248508, 799857, 139569, 985991, 838073, 994056, 588675, 837518, 471481, 849866, 938033, 689455, 80306, 59847, 987817, 467058, 568575, 785996, 319636, 733202, 781586, 42043, 701239, 757406, 64315, 724009, 964793, 370991, 93449, 339442, 706983, 681040, 253059, 470643, 437879, 570248, 63766, 331450, 714044, 563079, 776018, 369216, 941420, 568462, 170918, 523152, 400137, 773488, 445595 };
    double roadCost = 0.736317909095;
    double airportCost = 5633130.61083;
    assertEquals(4748320.519373917, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 4748320.519373917);
  }

  @Test
  public void case23() {
    int[] cityX = { 517511, 299396, 959886, 578764, 642125, 621728, 843838, 532835, 162894, 36913, 307670, 829498, 448168, 585112, 638686, 725157, 532238, 899033, 640019, 426150, 229533, 271073, 995456, 654329, 521126, 768669, 189105, 32851, 930499, 399957, 187244, 135236, 656688, 426783, 212453, 166298, 703119, 193228, 433525, 75626, 223700, 642529, 605204, 493621, 548088, 14575, 334353, 315975, 539614, 631205, 148092, 962531, 586490, 451748, 422045, 157557, 957490, 12266, 63634, 172806, 33991, 385075, 351246, 477866, 947468, 195384, 366340, 471155, 754989, 855430, 682779, 297453, 828943, 772759, 971436, 145379, 955049, 486043, 236551, 225157, 579704, 326392, 310749, 145109, 617242, 719105, 666466, 478786, 830892, 868037, 80409, 793005, 553246, 429495, 903114, 739913, 263388, 43147, 804336, 586721, 803154, 991741, 766705, 778246, 890439, 501899, 87819, 103614, 542842, 884910, 98411, 679943, 647501, 280685, 938970, 260681, 357178, 181096, 557308, 434026, 343650, 654397, 716439, 285192, 904130, 170410 };
    int[] cityY = { 901686, 525087, 845821, 732785, 612631, 838061, 948702, 512114, 629544, 428112, 63467, 436045, 58933, 272394, 427028, 929965, 168127, 985595, 808866, 168310, 552502, 574878, 282661, 32228, 316070, 750189, 762406, 90293, 924240, 390771, 255072, 577953, 471850, 182229, 183509, 898392, 115197, 150744, 366947, 593070, 416098, 263345, 169537, 642766, 111020, 12494, 343646, 652137, 17220, 561716, 639513, 155816, 544367, 263920, 845858, 291899, 632530, 771327, 799906, 462940, 748699, 28192, 636942, 213487, 282980, 664085, 31462, 449845, 24618, 694569, 864002, 886708, 449190, 446448, 441649, 681873, 59592, 900743, 145203, 808275, 231778, 205119, 814488, 949172, 291886, 164407, 733598, 421760, 630418, 418953, 198952, 77439, 942945, 979344, 57394, 567172, 535137, 338697, 437069, 218342, 970344, 132667, 961299, 736791, 911211, 51948, 435661, 393732, 824291, 913790, 227789, 686620, 212317, 10441, 182136, 367042, 574414, 502733, 841457, 830783, 106212, 429234, 487415, 611968, 887169, 78097 };
    double roadCost = 0.849351873402;
    double airportCost = 5132328.59565;
    assertEquals(6520560.6725843735, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 6520560.6725843735);
  }

  @Test
  public void case24() {
    int[] cityX = { 271447, 632634, 370278, 30089, 450876, 712921, 964252, 484304, 402959, 31093, 689987, 422842, 383185, 832582, 474630, 636818, 923498, 522765, 855974, 979883, 352919, 754148, 358931, 634368, 600907, 703066, 413655, 491163, 846374, 588483, 204907, 224789, 210327, 341821, 263663, 233133, 20261, 174212, 721070, 392608, 515185, 714030, 378166, 249930, 490620, 478104, 861571, 618246, 667518, 861955, 314031, 340893, 461893, 998984, 292197, 289025, 946538, 332462, 960454, 957679, 719289, 203557, 498977, 706856, 979037, 59258, 887248, 644564, 121276, 648000, 963322, 913383, 833443, 763592, 384731, 908561, 979950, 426735, 937717, 84207, 234519, 451290, 504422 };
    int[] cityY = { 715522, 103817, 612151, 869238, 513821, 634791, 557800, 202908, 533596, 970766, 376393, 175675, 221078, 109288, 159509, 639446, 966598, 23915, 877719, 550770, 101790, 61405, 990040, 849333, 463511, 932623, 602466, 294091, 929080, 665724, 939113, 477951, 550441, 200558, 129411, 927602, 794659, 818260, 816277, 271701, 115943, 615368, 981388, 579144, 288616, 550992, 965084, 445729, 606621, 482017, 589689, 103287, 771389, 35819, 176044, 18074, 835232, 456510, 687712, 476162, 172879, 21031, 418049, 904826, 552179, 560545, 165607, 118709, 990117, 814821, 805232, 837453, 508911, 854397, 267681, 723523, 831595, 330686, 46934, 423580, 766819, 784285, 351946 };
    double roadCost = 1.39410127939;
    double airportCost = 9612731.80635;
    assertEquals(8097765.337623891, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 8097765.337623891);
  }

  @Test
  public void case25() {
    int[] cityX = { 960253, 725025, 892742, 174513, 705730, 336871, 691271, 931232, 705762, 721813, 244808, 19030, 944574, 148537, 526546, 627986, 280794, 182273, 829248, 800565, 183329, 612596, 288622, 516098, 44163, 846836, 841578, 377791, 398415, 491777, 440319, 795237, 766269, 674319, 467342, 694314, 8394, 551022, 977791, 464159, 908918, 29535, 396025, 357128, 119197, 889018, 512573, 159935, 777191, 752039, 53108, 942282, 592765, 932348, 19714, 951224, 167735, 158709, 160475, 482489, 722945, 138779, 602596, 265732, 749366, 662945, 572789, 538821, 113336, 696214, 382099, 299738, 73994, 343032, 942588, 265328, 918224, 210055, 328050, 552562, 161255, 897215, 895847, 732284, 623711, 56552, 778425, 254108, 952996, 483937, 828662, 414925, 475248, 936582, 344113, 37845, 646252, 753371, 806624, 778693, 762926, 938728, 859924, 991783, 752877, 435077, 273492, 526860, 699656 };
    int[] cityY = { 539979, 212318, 674443, 521015, 617528, 363562, 963648, 603551, 697523, 202895, 194028, 312376, 741589, 220755, 82547, 118725, 241502, 491826, 452165, 317192, 730316, 899335, 581189, 867733, 84239, 431875, 692002, 96463, 638776, 840800, 465632, 698317, 22460, 431695, 82729, 245121, 287220, 616580, 445855, 580466, 262042, 785521, 428854, 485489, 202351, 557062, 54838, 439842, 592848, 781718, 57140, 35636, 902897, 936705, 703834, 244722, 4967, 376162, 258971, 107952, 179837, 848198, 252465, 572172, 698739, 459313, 325433, 534477, 355414, 10347, 742907, 991448, 94505, 581914, 112725, 730837, 895157, 91164, 526011, 141451, 781715, 181181, 174589, 485657, 66443, 969254, 465262, 840656, 16399, 449011, 925749, 416524, 800109, 503934, 620544, 758039, 590956, 719700, 427009, 675502, 168895, 230500, 969192, 918293, 861999, 270873, 288938, 638547, 874691 };
    double roadCost = 0.344951489095;
    double airportCost = 1122029.2043;
    assertEquals(2454772.5067345845, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2454772.5067345845);
  }

  @Test
  public void case26() {
    int[] cityX = { 461899, 268167, 650403, 875361, 58049, 924313, 512857, 524771, 438242, 982693, 143000, 980267, 508504, 600486, 237976, 39834, 154840, 90320, 136619, 809296, 389353, 701054, 672727, 546094, 405028, 368943, 984913, 493173, 610730, 706213, 332891, 557985, 299796, 155464, 31648, 709229, 890073, 450116, 234806, 302678, 690534, 896601, 363888, 710989, 222425, 709155, 673457, 106227, 212364, 673562, 128255, 497688, 222464, 302961, 126030, 926275, 26307, 932036, 228267, 213832, 439099, 892440, 264401, 715085, 773196, 237100, 775950, 385273, 783255, 967513, 924138, 910296, 824982, 446139, 665046, 932211, 406353, 664440, 923843, 171182, 896982, 765178, 811620, 232696, 468945, 321968, 960389, 266535, 814223, 566315, 520243, 124436, 600815, 1603, 226680, 855262, 954805, 859070, 557780, 491494, 723332, 501111, 392706, 980831, 825195, 272314, 150956, 203783, 85724, 146474, 806015, 486848, 235553, 135590, 762030, 727129, 910834, 755233, 181201, 110014, 941297, 324942, 541656, 211076, 657439, 96116, 790389, 473019, 174859, 607795, 981589, 54981, 132403, 342738, 768896, 493514, 413836, 461197, 845967, 251998, 261553, 44078, 478398, 823732, 479284, 491273 };
    int[] cityY = { 22770, 443042, 63845, 693450, 281042, 209694, 349493, 147086, 633484, 851344, 355743, 187937, 263658, 666974, 796625, 856997, 460918, 903142, 711244, 682700, 843230, 164632, 387193, 150757, 900710, 157242, 547296, 92117, 438744, 225431, 206100, 464120, 865681, 707888, 784792, 503737, 521254, 630494, 380140, 324314, 997121, 896281, 365824, 178225, 833316, 593621, 520751, 221256, 181091, 694992, 611638, 485995, 828701, 581663, 108994, 728560, 103464, 920754, 860812, 120198, 853319, 347890, 297068, 687468, 424971, 69675, 393306, 563363, 308942, 477726, 424702, 874314, 762480, 57339, 442861, 573850, 980483, 681361, 128298, 33253, 321521, 281835, 761015, 751519, 269395, 720054, 282574, 213956, 699293, 148387, 474856, 477032, 408293, 612001, 827967, 388731, 405478, 873607, 609845, 424251, 88741, 404121, 674179, 486961, 13997, 250190, 606629, 4348, 750951, 868523, 484905, 190785, 767965, 418166, 773355, 567872, 353742, 555156, 533059, 564883, 454173, 23605, 602287, 740846, 502360, 827086, 629766, 19969, 912604, 629056, 489570, 894687, 807377, 580097, 354200, 970821, 98342, 457299, 371872, 748897, 555069, 640700, 956052, 764422, 197463, 708720 };
    double roadCost = 0.296426804129;
    double airportCost = 9356114.25418;
    assertEquals(2319033.010298893, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2319033.010298893);
  }

  @Test
  public void case27() {
    int[] cityX = { 482220, 17971, 875790, 777768, 593296, 585000, 721192, 175683, 942035, 299978, 878303, 907640, 247258, 336883, 980304, 831977, 602470, 390632, 34586, 178681, 421032, 672624, 267280, 275042, 728243, 172766, 591494, 576783, 914568, 305178, 369412, 717598, 911954, 360020, 574392, 336211, 171664, 332216, 133870, 38089, 105069, 579922, 359709, 730823, 481454, 583680, 442575, 291111, 828004, 679981, 134995, 834213, 663893, 603416, 137344, 555714, 374936, 748944, 808952, 288521, 796630, 91829, 125738, 130231, 659919, 703463, 474836, 416593, 161178, 841688, 105691, 766795, 860441, 16460, 738114, 132315, 103465, 334883, 454662, 505710, 143303, 957827, 292491, 731056, 552890, 320515, 857373, 487355, 915965, 720560, 922469, 87017, 286852, 619184, 519480, 382650, 448303, 456445, 197547, 480479, 675580, 213838, 861382, 116791, 533359, 274033, 191839, 905685, 229149, 395744, 464823, 413419, 129272, 951312, 83073, 780620, 870416, 673045 };
    int[] cityY = { 708883, 408143, 982209, 623210, 97647, 950674, 140908, 680773, 787984, 427963, 405494, 999661, 388353, 391815, 170487, 997300, 8084, 911845, 783889, 627501, 317102, 564314, 518797, 837678, 677149, 540139, 823424, 3040, 431875, 442106, 193599, 957009, 126309, 339615, 789949, 124946, 562002, 452411, 591610, 678748, 282394, 707281, 163890, 756432, 998947, 75151, 231961, 855059, 119699, 817508, 935609, 769724, 789690, 146494, 387389, 963875, 813558, 979616, 445800, 210441, 756720, 820283, 402377, 83610, 973257, 106007, 643683, 292714, 351182, 504828, 85522, 946319, 177662, 259756, 656332, 78690, 913684, 820250, 530237, 750965, 207947, 800457, 222910, 694323, 867415, 88531, 202122, 743283, 282388, 596029, 125434, 639677, 636969, 564481, 165868, 942209, 200526, 842488, 672329, 828504, 556187, 655795, 30527, 614273, 403771, 237629, 321036, 791920, 41749, 213481, 688668, 248500, 249200, 588124, 12147, 299563, 228516, 834007 };
    double roadCost = 1.70667378577;
    double airportCost = 5659919.16541;
    assertEquals(11445983.166590381, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 11445983.166590381);
  }

  @Test
  public void case28() {
    int[] cityX = { 558706, 443644, 537716, 695373, 659459, 216073, 355893, 299018, 585151, 515815, 472870, 655348, 302084, 533665, 823879, 779068, 660801, 911154, 238677, 947410, 781050, 264660, 402077, 323586, 684769, 10963, 819001, 548400, 877232, 51707, 98683, 256344, 267640, 276464, 987502, 251223, 865836, 727632, 356701, 360122, 256463, 510987, 656089, 85315, 240547, 937566, 200402, 65736, 850550, 596444, 384170, 411375, 962333, 377174, 538315 };
    int[] cityY = { 835901, 770105, 346415, 508043, 541207, 461043, 965240, 931781, 634889, 473551, 939898, 54328, 261423, 511157, 808757, 664275, 325111, 184756, 684003, 905587, 447411, 108072, 78117, 779914, 99261, 584021, 191858, 448615, 83949, 784708, 77963, 319687, 338771, 582893, 926150, 342565, 754468, 792432, 521181, 666851, 25705, 734110, 992427, 269207, 971292, 291274, 568401, 574248, 353271, 15210, 389828, 700510, 215116, 566920, 851918 };
    double roadCost = 2.98458572414;
    double airportCost = 5148032.13194;
    assertEquals(16127364.656694233, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 16127364.656694233);
  }

  @Test
  public void case29() {
    int[] cityX = { 876545, 708032, 239726, 973834, 734476, 943747, 781698, 835864, 809294, 141158, 616299, 955796, 512091, 165740, 268751, 824331, 960689, 239321, 480637, 364751, 535720, 86918, 140399, 918884, 94567, 334075, 672659, 321685, 26665, 941942, 81567, 699772, 208279, 220547, 577190, 480702, 613010, 208258, 688945, 668805, 798456, 926150, 134908, 514829, 812353, 846504, 823635, 463343, 459645, 422062, 153559, 816450, 39803, 516148, 931915, 464604, 948582, 799331, 116776, 783253, 499831, 427450, 313009, 51664, 805955, 772114, 817300, 524807, 675182, 367848, 827877, 658926, 645241, 630838, 47408, 218644, 165319, 645483, 8300, 942575, 455377, 681791, 521313, 953768, 805951, 44783, 569993, 124096, 120005, 928980, 322924, 496285, 854372, 883118, 90793, 77126, 251207, 723212, 380081, 523731, 560760, 732405, 791458, 679710, 944153, 318184, 993295, 104159, 834821, 623751, 949715 };
    int[] cityY = { 424051, 943647, 530165, 593975, 749247, 420422, 190126, 720732, 120832, 308668, 43943, 544205, 104050, 991841, 268333, 527410, 434282, 126626, 96977, 486793, 759727, 683383, 78968, 777680, 477057, 355842, 346371, 918707, 179917, 803910, 655334, 690698, 729711, 472062, 425683, 407778, 742820, 806867, 143383, 813139, 344677, 584395, 381718, 780891, 725008, 861571, 435744, 921671, 289268, 667989, 979634, 651682, 873206, 617241, 574903, 262509, 749444, 174889, 387442, 747296, 773051, 668431, 155318, 220499, 241832, 816230, 279088, 174741, 172698, 906380, 126078, 130762, 376370, 820741, 590960, 319024, 61881, 946528, 601400, 233639, 551612, 934120, 427488, 804180, 676848, 435912, 979510, 909527, 694979, 263852, 602209, 981124, 727808, 489439, 385887, 554150, 833792, 697843, 852867, 22688, 579786, 808646, 600494, 708271, 704753, 666421, 925298, 530134, 959060, 946064, 910120 };
    double roadCost = 1.22981430176;
    double airportCost = 4274659.12561;
    assertEquals(8384638.588082361, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 8384638.588082361);
  }

  @Test
  public void case30() {
    int[] cityX = { 795616, 753206, 786084, 99379, 837606, 234989, 124550, 186447, 587823, 658787, 939144, 923252, 580562, 51672, 624127, 919170, 43370, 980979, 366077, 561048, 117130, 540730, 779725, 321629, 802921, 35221, 903302, 613821, 212400, 60657, 725771, 37499, 357978, 120090, 524553, 121374, 404268, 527281, 440463, 170727, 753798, 504825, 409085, 269736, 364326, 381177, 805756, 743089, 427548, 459248, 731372, 659674, 387, 991234, 972400, 281555, 558269, 639232, 836162, 877231, 998028, 973868, 934439, 334105, 371490, 472349, 483117, 643058, 625470, 768835, 732638, 383347, 72914, 511701, 596729, 393508, 186566, 134956, 997202, 14437, 199141, 134953, 539410, 459790, 512265, 268209 };
    int[] cityY = { 301137, 641117, 846661, 390217, 632248, 984266, 482480, 152158, 944844, 49184, 678055, 677282, 767905, 423093, 796936, 668114, 875379, 749665, 233293, 530630, 741350, 708744, 670408, 658085, 90835, 173701, 977101, 367503, 116128, 438857, 761017, 139026, 19922, 601844, 833728, 412049, 226618, 119957, 283305, 571575, 897497, 592510, 267643, 72495, 385946, 184952, 511337, 544341, 371795, 824886, 342344, 775702, 352327, 234119, 503662, 677573, 188227, 174475, 969175, 699828, 148809, 656475, 70626, 298463, 492190, 608580, 93596, 228705, 139215, 274911, 918462, 82304, 831551, 675740, 688038, 52339, 642371, 794705, 678646, 784442, 434821, 701340, 260159, 227706, 394756, 561241 };
    double roadCost = 1.55808180583;
    double airportCost = 3082309.27177;
    assertEquals(9804609.057650805, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 9804609.057650805);
  }

  @Test
  public void case31() {
    int[] cityX = { 184101, 489903, 97133, 652850, 655886, 966542, 633074, 789656, 701659, 487342, 29590, 656444, 448357, 572522, 250119, 381495, 805546, 423212, 375885, 804575, 405803, 45955, 774310, 733796, 277808, 397615, 216088, 47611, 486106, 666142, 645922, 571513, 909468, 946671, 127908, 909770, 924193, 590938, 670258, 160958, 528916, 38154, 983910, 292169, 922739, 955001, 605678, 839418, 683649, 293410, 714230, 243702, 537798, 808436, 262392, 607537, 508833, 149412 };
    int[] cityY = { 588657, 60928, 558935, 42294, 718441, 110501, 860026, 261114, 756220, 105502, 233349, 4944, 930076, 33974, 367360, 646472, 378175, 33448, 685037, 457316, 400814, 939104, 313591, 769169, 140471, 110967, 693995, 830471, 916901, 464611, 590201, 423474, 383556, 271598, 144317, 478984, 832408, 413555, 118833, 3789, 691107, 696545, 782868, 274107, 585197, 55256, 590803, 166863, 521480, 168255, 304710, 755078, 548687, 532197, 321819, 949861, 573587, 332346 };
    double roadCost = 1.66224135084;
    double airportCost = 7669566.19751;
    assertEquals(8817891.861830777, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 8817891.861830777);
  }

  @Test
  public void case32() {
    int[] cityX = { 881706, 643633, 214589, 710308, 679096, 813096, 714722, 886408, 681424, 5430, 320630, 238899, 5764, 222536, 49760, 398402, 727128, 852435, 832652, 459881, 889238, 337583, 509432, 485471, 863656, 98611, 693206, 115053, 501772, 654366, 4220, 293627, 574653, 618094, 238005, 822433, 972563, 535326, 795090, 711864, 708939, 580977, 815351, 725625, 589267, 626359, 3003, 837480, 421490, 183626, 298382, 639892, 367820, 560774, 987446, 787471, 271875, 88793, 31412, 231894, 257382, 984556, 412408, 533805, 763573, 701016, 531979, 460717, 501611, 196789, 654623, 81644, 847980, 148682, 404002, 144703, 873651, 159659, 18591, 889547, 584582, 683169, 993746, 54875, 913253, 576225, 52949, 155518, 229200, 536716, 750692, 857312, 972607, 589060, 707335, 815191, 91558, 49885, 33243, 644664, 367932, 119420, 652166, 395127, 912091, 494123, 400564, 83602, 339930, 450788, 141747, 370998, 212482, 76963, 550355, 615018, 906928, 526374, 713706, 109471, 701444, 128443, 850127, 971537 };
    int[] cityY = { 320833, 452794, 588414, 62191, 390344, 195580, 750164, 373043, 537174, 201977, 445712, 324526, 262055, 652945, 10507, 192739, 433577, 528037, 741002, 738194, 100890, 791180, 550927, 585060, 747861, 111076, 642086, 529038, 195769, 85148, 184981, 371449, 655269, 994913, 356855, 512740, 39018, 739154, 435501, 933701, 567248, 907032, 407780, 547206, 942618, 94106, 644605, 518459, 759473, 404264, 853753, 46331, 505314, 935250, 454325, 6250, 187722, 727348, 171130, 337203, 532424, 773937, 610561, 741349, 780901, 683879, 382120, 199682, 758934, 102396, 66122, 372368, 181858, 846647, 418650, 517253, 349612, 740785, 952684, 335502, 956459, 19533, 198803, 628509, 407990, 889850, 494337, 653163, 397221, 633808, 386440, 782243, 728347, 626632, 764841, 431867, 163274, 176283, 739186, 165194, 493635, 140477, 948549, 867863, 786714, 224477, 945117, 277174, 55402, 824572, 112431, 381956, 356017, 170987, 824699, 442044, 928016, 764739, 501043, 313521, 383517, 260235, 435969, 141085 };
    double roadCost = 0.366433344785;
    double airportCost = 3003633.81237;
    assertEquals(2652649.915929699, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2652649.915929699);
  }

  @Test
  public void case33() {
    int[] cityX = { 140932, 171163, 487709, 52633, 223265, 908562, 420399, 251917, 540442, 41299, 463406, 536244, 644648, 309019, 275924, 144061, 519415, 2201, 18948, 316220, 870497, 671297, 910762, 988333, 553422, 735190, 507372, 990873, 270599, 963217, 929706, 971399, 144744, 253091, 889290, 41238, 455381, 889943, 991984, 624617, 17379, 378010, 857603, 933476, 288825, 620757, 976355, 180073, 281114, 211147, 591711, 16574, 838445, 530982, 450214, 662067, 731087, 774598, 893767, 815187, 639083, 153621, 400815, 808813, 359960, 902732, 375649, 647919, 111425, 38592, 354875, 301468, 148059, 874381, 78790, 581425, 249222, 159526, 44131, 889270, 926036, 208662, 806907, 61040, 624454, 671592, 846929, 185769, 841086, 115029, 567825, 37489, 753187, 849778, 133705 };
    int[] cityY = { 836967, 821202, 986160, 333982, 513760, 353796, 234338, 567041, 789204, 676835, 795012, 174440, 971145, 743522, 293489, 8242, 815256, 168584, 257898, 786478, 138141, 350279, 819608, 991947, 588380, 789169, 843669, 537824, 690750, 664352, 352891, 521527, 245779, 94004, 407266, 109621, 643988, 970054, 154476, 461513, 419559, 197455, 315380, 388970, 550252, 72988, 904882, 157821, 374254, 253761, 627379, 570586, 321719, 48010, 241194, 700103, 221596, 845368, 165005, 826011, 370059, 81018, 149971, 582652, 202315, 287815, 453941, 917173, 248613, 389725, 659327, 933140, 555172, 898197, 157277, 667018, 318652, 641800, 228346, 227493, 218704, 12954, 639892, 216398, 256345, 884419, 170011, 283895, 923797, 669554, 18826, 850883, 640693, 322562, 903272 };
    double roadCost = 0.997287740839;
    double airportCost = 751839.192889;
    assertEquals(6791131.497826805, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 6791131.497826805);
  }

  @Test
  public void case34() {
    int[] cityX = { 119737, 28932, 719657, 604516, 143973, 809920, 874010, 552951, 710747, 213776, 366728, 681614, 426134, 391596, 605522, 573290, 204162, 445228, 829811, 861335, 630274, 906254, 481351, 61844, 557269, 886833, 582303, 181809, 382453, 393403, 56981, 663936, 418871, 667955, 219946, 951632, 232307, 536397, 543710, 236511, 163551, 753491, 930985, 413077, 15564, 190631, 858698, 477580, 805427, 275799, 797052, 624888, 455673, 139030, 150735, 824514, 771321, 672495, 658867, 547634, 597666, 168295, 670874, 658137, 319016, 332750, 501856, 158580, 375346, 701682, 718976, 889816, 644434, 601622, 518886, 328600, 705076, 640964, 628398, 733010, 982075, 707574, 764527, 653791, 710274, 489165, 259672, 927597, 563324, 76959, 896024, 783003, 184759, 151390, 559888, 510466, 901116, 629168 };
    int[] cityY = { 210621, 38894, 200775, 343747, 896519, 748240, 167136, 511284, 792766, 381520, 572183, 400843, 938523, 31244, 124057, 378054, 54039, 326183, 816538, 12836, 577361, 442275, 614153, 274799, 758001, 853842, 643967, 408603, 51304, 261603, 34052, 407536, 692388, 755881, 390134, 771250, 815205, 176643, 741374, 681149, 678032, 971016, 291997, 350953, 920919, 164732, 839930, 253197, 499296, 781243, 931925, 916873, 727474, 612859, 945111, 149186, 109394, 434881, 878875, 908248, 876338, 439937, 48323, 814837, 818051, 481640, 96620, 83056, 20229, 854501, 636365, 631255, 382539, 81390, 650660, 860928, 944513, 211998, 832501, 137473, 506388, 425064, 989665, 564035, 444920, 836728, 647765, 846288, 182864, 239005, 986383, 254109, 171730, 364733, 543677, 566934, 791881, 915831 };
    double roadCost = 0.996859175202;
    double airportCost = 6135020.27882;
    assertEquals(6608386.5100382455, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 6608386.5100382455);
  }

  @Test
  public void case35() {
    int[] cityX = { 916843, 500249, 347636, 863561, 559637, 321769, 496022, 167249, 711663, 827931, 742796, 171081, 605464, 829289, 194502, 268562, 90917, 932838, 688975, 625000, 257836, 956110, 190585, 633490, 966261, 849868, 564767, 654370, 149956, 281327, 859247, 101892, 30612, 370043, 550842, 340689, 323162, 602633, 198044, 532351, 536868, 643625, 682123, 947361, 725425, 711062, 402491, 683416, 223359, 475915, 500374, 814202, 523753, 466145, 366479, 45235, 362629, 414452, 562633, 914561, 916990, 38183, 826669, 169453, 733023, 220683, 764383, 570394, 742384, 835626, 797806, 112782, 708138, 519201, 492356, 607949, 531718, 564803, 544070, 105044, 947775, 671613, 328133, 556448, 189191, 106370, 751146, 12355, 923580, 232464, 967628, 195812, 843070, 683082, 612478, 591843, 501535, 677524, 104956, 671318, 709079, 189205, 93588, 621020, 529641, 563662, 678379, 142884, 895539, 591255, 491395, 591220, 564294, 255345, 603774, 645705, 623701, 577342, 603992, 907283, 653014, 437485, 900380, 411279, 174663, 689889, 786881 };
    int[] cityY = { 195499, 915662, 459369, 558146, 82817, 379601, 42467, 122606, 804100, 332680, 385963, 323293, 679871, 740319, 772279, 41522, 918075, 60900, 791625, 165699, 106514, 700529, 113016, 497284, 788875, 140576, 285649, 977281, 743371, 99520, 780187, 73712, 898586, 447864, 695844, 102970, 128566, 465777, 655360, 413959, 434261, 649901, 621228, 712576, 308093, 964037, 272310, 634364, 758205, 2391, 667340, 439406, 83954, 514939, 115193, 118419, 358748, 516139, 46448, 612259, 241143, 382243, 805564, 196202, 864720, 128351, 179292, 128372, 51318, 729210, 284991, 64944, 922308, 13701, 617931, 440845, 925457, 330757, 966015, 63401, 624819, 231739, 420646, 681299, 80017, 527291, 237364, 666009, 451249, 42599, 728739, 981224, 632201, 916988, 318468, 511821, 908100, 833593, 407793, 607767, 553751, 751338, 258847, 685180, 636422, 737222, 414071, 494470, 955361, 649552, 673222, 8156, 59372, 463508, 245304, 927047, 446650, 534704, 351393, 648786, 345464, 147121, 34452, 908665, 46430, 743183, 224473 };
    double roadCost = 2.51904021901;
    double airportCost = 142724.886133;
    assertEquals(14081426.080708005, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 14081426.080708005);
  }

  @Test
  public void case36() {
    int[] cityX = { 411585, 425348, 240474, 414606, 55469, 526920, 565633, 16405, 314545, 272913, 529702, 390892, 690879, 327235, 711137, 146786, 600935, 646881, 25387, 937405, 682455, 411834, 511497, 34529, 529026, 310402, 432905, 212608, 462866, 288931, 627215, 732468, 52765, 603068, 264345, 989867, 179887, 262752, 33794, 31436, 729091, 369203, 110614, 422630, 675963, 729513, 913788, 923863, 485037, 333441, 756770, 618541, 125726, 103098, 583773, 137992, 197791, 979849, 879772, 126157, 221215, 78995, 844321, 204654, 311115, 133860, 257329, 722495 };
    int[] cityY = { 81021, 977866, 46688, 551768, 508177, 487299, 537263, 611849, 127849, 464639, 903757, 19995, 108238, 349968, 504628, 736010, 628070, 469973, 759370, 571439, 241576, 517222, 296160, 106364, 478858, 747181, 439521, 564727, 216514, 493716, 100400, 240726, 895282, 271100, 962567, 720450, 275676, 916530, 802356, 892005, 622087, 925290, 621964, 387120, 988239, 898784, 668447, 271027, 528969, 158292, 915274, 681579, 751359, 230744, 461724, 149576, 879639, 729843, 774048, 706778, 760104, 664931, 241002, 118226, 77845, 963859, 10134, 124623 };
    double roadCost = 2.91986549689;
    double airportCost = 7390211.3974;
    assertEquals(15714343.426196935, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 15714343.426196935);
  }

  @Test
  public void case37() {
    int[] cityX = { 947426, 290551, 794864, 222785, 225367, 374061, 732467, 767669, 540722, 435016, 139221, 540087, 799970, 135248, 144706, 116779, 190608, 463943, 731500, 837532, 189535, 556296, 975202, 368278, 543372, 837353, 420542, 186446, 740186, 707544, 374579, 96523, 708411, 565811, 668479, 945366, 445252, 540950, 73401, 275812, 988152, 206663, 847176, 151126, 461175, 767957, 681056, 467706, 904887, 486925, 590352, 102524, 483339, 993377, 100847, 889628, 884465, 87370, 277733, 524083, 943344, 522196, 995794 };
    int[] cityY = { 16062, 620107, 572807, 792036, 476167, 76456, 809708, 288747, 327887, 584234, 404240, 460732, 951763, 541288, 387482, 472904, 833720, 108923, 449489, 67468, 443788, 326206, 514178, 738938, 889681, 935340, 360785, 349967, 137821, 844090, 481267, 523083, 236324, 19508, 307977, 176643, 996047, 961469, 939628, 273084, 493669, 636636, 382846, 605890, 391397, 785395, 127996, 90191, 515112, 636689, 714254, 25924, 444110, 170998, 290847, 777879, 56222, 229813, 293281, 356257, 582448, 50620, 735086 };
    double roadCost = 1.6303239945;
    double airportCost = 9337336.7847;
    assertEquals(8816685.637884134, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 8816685.637884134);
  }

  @Test
  public void case38() {
    int[] cityX = { 568749, 557294, 322097, 30828, 257702, 583872, 690543, 296593, 207127, 84054, 144244, 589912, 265803, 130303, 181660, 163506, 200251, 493197, 817833, 67822, 757179, 221391, 430088, 883453, 318121, 117939, 757567, 647920, 486837, 727126, 933642, 729894, 787082, 969248, 220975, 701775, 943029, 26537, 887697, 873874, 342967, 953874, 275074, 843338, 874003, 893507, 905456, 106649, 327504, 317372, 988764, 775852, 691492, 664052, 260743, 365790, 940075, 535309, 540966, 872152, 465486, 417879, 42354, 900212, 625380, 643377, 705874, 21621, 212882, 936045, 545633, 600129, 951059, 99240, 637196, 689013, 849052, 489320, 782351, 825869, 651421, 732837, 668253, 461215, 750659, 224301, 982642, 678609, 1496, 441225, 744666, 649423, 937853, 808795, 599420, 865861, 540775, 86088, 877822, 816852, 797170, 475338, 26412, 586351, 396115, 187982, 209563, 433985, 986405, 943990 };
    int[] cityY = { 279625, 711867, 708947, 62255, 224464, 326446, 646065, 620700, 315976, 507824, 602979, 277005, 532353, 835366, 283333, 61143, 457840, 387344, 876406, 241008, 797603, 582450, 898902, 299188, 905598, 393296, 413260, 833763, 558423, 252263, 1177, 284655, 920940, 142607, 111019, 420754, 863333, 726960, 542348, 978371, 233695, 341530, 167745, 76619, 146579, 681121, 63796, 797927, 258329, 905284, 719283, 570451, 150340, 288196, 865822, 59629, 855778, 633292, 841796, 762674, 888253, 760678, 219648, 655918, 661075, 732964, 168330, 872905, 444987, 754428, 233228, 563438, 155715, 890232, 950945, 984664, 147425, 319177, 758569, 854016, 169318, 181840, 796656, 115038, 447683, 249638, 831275, 817760, 440895, 130732, 191425, 662143, 659233, 228919, 143515, 922324, 54955, 223913, 443391, 681666, 169076, 229713, 679015, 677726, 627820, 93327, 852360, 489065, 222671, 771948 };
    double roadCost = 0.984144529299;
    double airportCost = 1209880.2764;
    assertEquals(7124858.432272707, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 7124858.432272707);
  }

  @Test
  public void case39() {
    int[] cityX = { 925567, 144272, 75909, 302398, 569933, 701607, 457943, 518323, 588741, 632180, 637405, 714132, 656852, 88986, 745243, 146262, 459575, 361981, 950285, 183888, 320843, 802693, 210794, 186819, 723162, 286542, 732353, 118247, 281753, 19932, 208377, 894361, 589606, 185748, 614736, 289169, 162684, 429876, 925447, 477101, 254354, 806844, 717768, 195658, 624313, 205664, 8543, 68202, 895175, 841981, 502984, 380710, 416408, 162097, 620557, 635063, 243485, 487629, 252192, 306726, 894592, 723226, 778677, 333673, 263376, 148865, 424671, 778457, 975849, 767259, 361065, 76497, 901795, 751385, 122022, 732459, 289280, 877135, 182953, 319449, 860360, 68605 };
    int[] cityY = { 486893, 447121, 33838, 624619, 812282, 804214, 552865, 668801, 771113, 686346, 424921, 66988, 655481, 560299, 798422, 234473, 30164, 752817, 97699, 72852, 148409, 276637, 286571, 74708, 224201, 483293, 779111, 115704, 404754, 613512, 44379, 995402, 140896, 865158, 866640, 364560, 546425, 566679, 715356, 674237, 385399, 845432, 91889, 945148, 28791, 238208, 67544, 630233, 619709, 531010, 398494, 50533, 937406, 210548, 545989, 679603, 483122, 857776, 800492, 537149, 131402, 919921, 979543, 614081, 450254, 438783, 593917, 505844, 116232, 952595, 108618, 394925, 468428, 442919, 961449, 172401, 734470, 511594, 823327, 485059, 452059, 635109 };
    double roadCost = 2.92427004384;
    double airportCost = 6382200.31967;
    assertEquals(16728939.671166085, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 16728939.671166085);
  }

  @Test
  public void case40() {
    int[] cityX = { 699713, 864241, 801332, 90022, 665274, 765352, 31856, 639195, 559014, 536199, 583909, 752386, 440970, 253345, 36129, 639727, 847070, 782266, 672963, 970914, 873230, 76888, 401261, 926265, 609323, 388360, 201648, 699754, 331669, 696880, 730148, 751842, 663998, 986604, 123882, 956970, 107919, 18652, 396522, 513184, 881895, 932117, 778756, 119216, 519729, 34491, 380222, 590606, 479824, 884101, 129223, 189334, 21223, 141884, 537891, 543562, 628821, 932480, 390400, 138855, 807512, 476088, 912712, 610076, 687054, 680041, 813433, 923297, 266187, 306642, 722760, 458388, 70882, 511245, 100486, 109107, 939751, 965850, 394932, 803787, 417870, 33077, 662381, 106611, 526996, 28062, 350319, 829123, 805591, 995001, 38486, 17974, 324903, 104635, 587840, 456168, 107166, 648784, 127615, 325445, 92583, 22601, 628588, 616579, 726309, 861178, 700803, 643582, 447608, 302660, 341111, 818210, 181981, 791258, 611986, 476103, 557424, 663633, 726588, 664627, 857004, 22610, 838623, 492505, 198232, 939933, 766902, 23035, 476968, 827385, 617672, 26571, 792400, 692894, 221089, 59268 };
    int[] cityY = { 132432, 405010, 686153, 746801, 667863, 351253, 861331, 844769, 511935, 268113, 901011, 867957, 739552, 669689, 213835, 431314, 521185, 419959, 962510, 195268, 563611, 959101, 698060, 358338, 688998, 461052, 958851, 316166, 865912, 652845, 490213, 294407, 64348, 309345, 888953, 614110, 160618, 833194, 589733, 755488, 641352, 199505, 864637, 851376, 265187, 946699, 463213, 674844, 303170, 829668, 312888, 596215, 202283, 275762, 286485, 616537, 184318, 894931, 39805, 680311, 185734, 382652, 129356, 178732, 986410, 749050, 601209, 460833, 496884, 616882, 33019, 320352, 102943, 290990, 113836, 541445, 100300, 431963, 123493, 935453, 68325, 398104, 838770, 755528, 925438, 607172, 938294, 593191, 453835, 67968, 429906, 661379, 536872, 20605, 274049, 556552, 993492, 84789, 169358, 777007, 394823, 276635, 16885, 837811, 740324, 857063, 525392, 309741, 929888, 434644, 620433, 686870, 642974, 816626, 259526, 823298, 346927, 781960, 999041, 397305, 889604, 708472, 843971, 18682, 308821, 994754, 162994, 728493, 896741, 868479, 333156, 3339, 666137, 104426, 116744, 652720 };
    double roadCost = 1.98449014964;
    double airportCost = 3645016.70949;
    assertEquals(15947516.066757236, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 15947516.066757236);
  }

  @Test
  public void case41() {
    int[] cityX = { 602887, 720253, 14541, 266672, 165734, 314359, 496945, 500840, 538057, 714005, 144279, 402673, 470600, 209861, 658525, 628176, 164078, 967487, 842981, 126831, 425268, 16160, 768074, 413546, 986382, 716511, 144369, 496037, 43157, 913445, 348014, 733552, 6711, 314310, 976530, 892274, 367524, 176041, 122878, 32742, 182265, 413692, 449865, 150631, 802485, 489734, 857177, 458297, 627603, 492655, 679372, 816685, 263015, 40477, 966414, 638242, 239082, 358261, 75, 839755, 348664, 910539, 305164, 282698, 684784, 411085, 971114, 485601, 483667, 868091, 14682, 656332, 763806, 757826, 273412, 57500, 28127, 545117, 9131, 591331, 524944, 120021, 619920, 702730, 450463, 195124, 792689, 237724, 523557 };
    int[] cityY = { 478350, 640681, 487381, 389140, 416003, 678966, 648217, 906549, 417382, 893767, 774550, 703992, 146430, 422960, 463464, 3979, 632023, 294715, 51204, 827890, 74782, 118514, 446018, 670992, 792149, 40228, 940842, 46131, 981612, 701509, 910002, 806899, 321450, 59116, 450838, 756930, 968739, 251777, 625172, 454475, 980070, 173475, 22873, 571697, 86488, 186927, 8122, 377906, 210678, 623477, 134085, 987428, 559432, 529543, 203015, 804096, 206858, 875515, 105054, 727984, 17140, 458431, 291655, 899561, 819572, 424002, 905635, 295983, 967496, 634622, 175423, 396246, 514140, 992527, 992265, 397330, 871262, 636126, 800034, 48335, 669484, 923652, 501339, 868161, 482604, 874254, 242511, 615338, 857871 };
    double roadCost = 0.233957858195;
    double airportCost = 4653817.61144;
    assertEquals(1613211.1132476982, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1613211.1132476982);
  }

  @Test
  public void case42() {
    int[] cityX = { 897382, 541664, 719129, 379539, 288189, 997119, 117235, 779064, 232437, 362128, 452352, 329278, 448406, 552585, 378130, 89461, 124391, 322825, 669636, 983860, 744097, 320267, 361568, 224799, 673588, 12146, 832130, 326979, 554882, 799551, 61194, 931030, 138092, 961827, 836002, 914622, 926837, 859598, 928112, 267292, 224025, 731562, 174227, 5299, 300370, 449509, 576282, 199603, 235168, 554069, 89293, 832663, 90221, 744015, 58059, 790265, 291018, 71797, 200417, 707885, 56706, 141785, 948544, 686955, 869975, 692428, 249526, 242023, 228642, 10848, 253379, 182985, 29459, 29048, 830937, 871691, 358237, 705252, 545871, 341576, 727439, 546273, 161370, 539247, 791836, 539715, 747584, 734088, 571420, 586399, 587842, 504334, 178169, 62846, 581528, 348527, 52751, 833102, 31338, 561954, 213431, 599385, 515595, 789056, 945980, 590701, 265633, 418495, 472020, 867515, 19116, 690058, 387435, 797025, 440730, 378616 };
    int[] cityY = { 111136, 81789, 817899, 10494, 977800, 498645, 563632, 945623, 812081, 969860, 665372, 634236, 165882, 492760, 281769, 655251, 761765, 56457, 568138, 632677, 788350, 379952, 336011, 228767, 855839, 73082, 390005, 425334, 277233, 837620, 630076, 230379, 869378, 14879, 538485, 725820, 336966, 188393, 358288, 222265, 109537, 631305, 955123, 895851, 366921, 131872, 359299, 389668, 513691, 555394, 946939, 56213, 980649, 980246, 491680, 298771, 154132, 80300, 443418, 838684, 216558, 450075, 884692, 977085, 741041, 927396, 394572, 64530, 434494, 345599, 51056, 515856, 473815, 831222, 948705, 250836, 876885, 830256, 902714, 333070, 618960, 530422, 866526, 179729, 764837, 46103, 405857, 162430, 576619, 400559, 721207, 336631, 794570, 118173, 761652, 746281, 6303, 838516, 28553, 163953, 519965, 699341, 137046, 752242, 761939, 528932, 310098, 405599, 583074, 982577, 462734, 590104, 469523, 940427, 216366, 244102 };
    double roadCost = 2.58251861624;
    double airportCost = 9497008.89338;
    assertEquals(19470120.1527944, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 19470120.1527944);
  }

  @Test
  public void case43() {
    int[] cityX = { 719288, 796793, 425320, 332327, 726325, 168846, 268752, 121416, 555739, 171597, 897020, 791269, 601727, 404620, 845199, 40683, 560358, 106935, 568422, 391531, 503293, 838119, 22719, 833523, 906049, 571206, 966437, 549187, 838279, 675105, 726153, 233804, 181927, 23742, 584825, 163644, 300190, 957839, 520417, 42305, 68233, 357182, 969911, 415334, 356214, 131905, 240072, 662532, 688379, 27677, 984514, 536526, 31031, 293914, 698529, 680266, 387502, 876727, 356465, 149552, 526001, 67413, 611984, 875098, 346563, 555879, 21552, 541567, 316268, 740919, 706006, 411885, 270936, 501998, 620315, 654194, 477792, 216218, 558576, 210370, 550781, 602442, 334585, 757999, 158594, 865685, 108227, 555220, 425408, 569634, 74871, 723582 };
    int[] cityY = { 891019, 614814, 254599, 998449, 857383, 12778, 317778, 383270, 620379, 999438, 691264, 507003, 319599, 83860, 586386, 172310, 82375, 166845, 976936, 409915, 90380, 787002, 259096, 913966, 952548, 82028, 772592, 186113, 973203, 984405, 838672, 504784, 872095, 276792, 41189, 738108, 559251, 568218, 443834, 731034, 403734, 443035, 613880, 70322, 680647, 477050, 48659, 48596, 890432, 546220, 513422, 477721, 882898, 440633, 346082, 752550, 491245, 412069, 100012, 464834, 176204, 715862, 644489, 569911, 734448, 444236, 479514, 178144, 149821, 178006, 852369, 786132, 883371, 61515, 288658, 21269, 206250, 171958, 229026, 105079, 966216, 301798, 584116, 24968, 137950, 993286, 719029, 422067, 96520, 56450, 276130, 70651 };
    double roadCost = 0.362387373461;
    double airportCost = 995129.740487;
    assertEquals(2272889.140366006, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2272889.140366006);
  }

  @Test
  public void case44() {
    int[] cityX = { 300810, 229103, 261483, 859645, 299425, 854942, 358672, 505206, 729723, 504440, 959558, 121657, 186863, 570889, 216746, 904126, 136890, 982390, 362746, 67292, 22052, 854823, 869489, 446622, 549256, 8312, 158349, 199993, 307630, 904713, 535411, 279943, 935450, 353251, 987192, 974316, 664785, 100586, 834392, 596724, 824245, 710453, 141588, 177634, 14138, 8235, 784337, 100108, 44552, 70980, 745061, 662186, 375840, 892348, 750269, 524508, 505082, 644112 };
    int[] cityY = { 322850, 890045, 660644, 79558, 602342, 838663, 573126, 38394, 971031, 320095, 897481, 936200, 511276, 676193, 551656, 873198, 196408, 65925, 474298, 840739, 390413, 657081, 648721, 93758, 285670, 401461, 364284, 386103, 845358, 991870, 649982, 954042, 396799, 652277, 19330, 893161, 854594, 783851, 511687, 292190, 189363, 166265, 641353, 260327, 837860, 876396, 608434, 750217, 346097, 712906, 381777, 185981, 932903, 614005, 893744, 222230, 475516, 32062 };
    double roadCost = 1.07263929999;
    double airportCost = 84210.4671148;
    assertEquals(4148797.4588583056, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 4148797.4588583056);
  }

  @Test
  public void case45() {
    int[] cityX = { 942713, 916340, 8162, 642524, 577108, 512805, 48350, 504547, 44493, 284895, 135498, 797746, 910792, 738599, 860962, 360179, 209309, 820342, 900332, 272654, 330292, 240156, 617169, 232567, 236844, 558678, 299704, 772453, 776278, 965544, 723347, 343040, 438196, 922749, 224530, 404878, 433915, 528038, 841455, 441555, 557928, 738592, 489882, 185760, 218304, 806653, 711166, 441056, 370910, 170341, 98780, 87510, 968752, 882426, 48742, 463564, 416638, 376004, 358499, 671626, 981455, 733366, 805038, 37789, 517114, 469305, 33594, 240955, 84101, 577107, 836707, 402613, 81365, 969644, 654728, 519893, 222191, 127773, 684118, 697055, 553440, 29411, 715169, 800619, 146834, 343731, 722930, 138852, 110506, 501534, 334675, 439318, 577310, 500269, 792868, 576257, 61212, 242298, 895454, 965011, 543770, 905207, 54722, 672884, 571254, 443377, 208816, 618606, 259203, 460783, 252326, 834555, 498153, 431746, 650700, 504973, 627876, 98242, 949663, 387471, 433131, 496928, 715069, 880008, 505847, 494060, 103407, 589588, 40450, 860554, 269821, 675865, 293293, 361583, 962259, 215929, 507114, 617873, 538387, 599036, 234074, 29016 };
    int[] cityY = { 327156, 591022, 78832, 465942, 976747, 363039, 428257, 477229, 455718, 590030, 193161, 26903, 987019, 684669, 703956, 823795, 887833, 342978, 543521, 301951, 922784, 58542, 531311, 399602, 740689, 69174, 716134, 455570, 333996, 817240, 522869, 7387, 86380, 476212, 938614, 967748, 429051, 240499, 968472, 271290, 136697, 181113, 496152, 531380, 752111, 783203, 117261, 797726, 539860, 461146, 220224, 648582, 490510, 543667, 358424, 756386, 255236, 126337, 149280, 446490, 365524, 953177, 259106, 260795, 847731, 868882, 852624, 76981, 258457, 242994, 406463, 612047, 10868, 581748, 619716, 780562, 947875, 43888, 858673, 647152, 7342, 671749, 229251, 898395, 206859, 979185, 81904, 504503, 876458, 921969, 965549, 237296, 410035, 365681, 93641, 794730, 221169, 310841, 846762, 647685, 100349, 192490, 33189, 45719, 738252, 752120, 112393, 500577, 263681, 524608, 127071, 225485, 453722, 932645, 394925, 734079, 11324, 758729, 91596, 486504, 725781, 439368, 136646, 424300, 980510, 351056, 463569, 48350, 689554, 425083, 952173, 1638, 868245, 625624, 495249, 51497, 271176, 543183, 187405, 885162, 8527, 36649 };
    double roadCost = 0.654354744823;
    double airportCost = 5016171.19201;
    assertEquals(5352263.380596628, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 5352263.380596628);
  }

  @Test
  public void case46() {
    int[] cityX = { 155502, 487812, 886248, 437938, 150564, 264131, 190721, 537722, 157189, 117293, 59564, 632317, 266281, 291601, 402196, 768344, 305768, 368728, 921690, 210710, 318848, 464207, 51840, 482641, 314652, 559523, 920909, 49644, 968476, 926450, 72091, 905056, 878857, 72138, 471757, 31138, 297519, 911160, 461798, 756734, 10541, 272841, 437243, 961108, 238852, 592351, 390435, 520632, 844251, 890302 };
    int[] cityY = { 210239, 449950, 308652, 297524, 916262, 854477, 945468, 316188, 361945, 481208, 112121, 227146, 92676, 737138, 587397, 221356, 399989, 909681, 413082, 402201, 781129, 906170, 147401, 187938, 6780, 82456, 233841, 355300, 134169, 892186, 940078, 758992, 294361, 977842, 134596, 807828, 455790, 185726, 427845, 951333, 960114, 237621, 514459, 430221, 169148, 431238, 356126, 851493, 950332, 794452 };
    double roadCost = 2.29858138868;
    double airportCost = 3655798.04782;
    assertEquals(10398722.880646821, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 10398722.880646821);
  }

  @Test
  public void case47() {
    int[] cityX = { 840502, 879247, 737838, 376897, 228973, 540281, 865772, 93395, 509593, 591153, 485797, 991158, 372240, 953622, 749260, 515885, 719057, 621534, 515229, 670300, 179607, 934177, 840973, 649098, 728915, 950975, 281466, 920872, 403140, 849000, 408092, 822997, 205952, 720442, 108604, 579502, 455284, 134798, 744641, 377489, 469081, 724709, 134244, 329306, 976154, 886707, 252132, 429695, 548572, 373106, 685745, 622532, 161497, 28684, 257386, 866622, 9514, 468759, 122601, 616308, 72734, 918248, 964704, 3126, 812324, 66372, 422653, 138915, 376727, 916437, 914555, 648732, 849735, 693227, 182969, 290601, 949538, 190712, 242389, 879152, 831338, 761977, 121055, 172971, 415097, 510440, 480706, 565352, 82370, 36070, 397691, 545948, 448164, 847772, 783916, 137585, 881956, 767814, 452577, 806067, 435719, 560148, 961138, 941595, 482532, 10515, 907581, 71511, 968368, 314993, 178107, 946198, 938004, 732625, 546126, 522771, 765586, 916463, 552356, 243143, 557721, 974777 };
    int[] cityY = { 321576, 920540, 969307, 792092, 844375, 885729, 888040, 682089, 189959, 920323, 461139, 291609, 193102, 496605, 570534, 277551, 553817, 779226, 344149, 653022, 387849, 721095, 227023, 887985, 249435, 899754, 740377, 343573, 233780, 282183, 174147, 820770, 66268, 198316, 240609, 370551, 974851, 640933, 174071, 626778, 104516, 517379, 595984, 841355, 86154, 47875, 471898, 228010, 118667, 369786, 751286, 906932, 337562, 55622, 28687, 208933, 631371, 49624, 35332, 667701, 598122, 530092, 117511, 848039, 321128, 40817, 22212, 65289, 130788, 33849, 445300, 331591, 714111, 127902, 528226, 971505, 223658, 729441, 449906, 139041, 663514, 291533, 476599, 837371, 189513, 270003, 758697, 98875, 350949, 852641, 688570, 113440, 677764, 11880, 406808, 818087, 710735, 207989, 745263, 886566, 196739, 916012, 761085, 588880, 336204, 447706, 450729, 532897, 468132, 999286, 561946, 276388, 102127, 232497, 387931, 360271, 980920, 48466, 844062, 959429, 675509, 355159 };
    double roadCost = 0.619669199434;
    double airportCost = 3784113.62035;
    assertEquals(4530609.541731678, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 4530609.541731678);
  }

  @Test
  public void case48() {
    int[] cityX = { 630531, 39617, 657880, 772201, 336694, 96215, 739, 784830, 404286, 899310, 447682, 629984, 639099, 417482, 987950, 283667, 846841, 918413, 910601, 724252, 86281, 400064, 634960, 666379, 843709, 501008, 384782, 862684, 354422, 671667, 427024, 567512, 965820, 947396, 761320, 738871, 100021, 907749, 213387, 487081, 989983, 964701, 822997, 357436, 637882, 4138, 848196, 657935, 409718, 292848, 550308, 692499, 253673, 400115, 816969, 428731, 37147, 654874, 112019, 416333, 245021, 164195, 576122, 710526, 490625, 263943, 915272, 988991, 983872, 804524, 337244, 996276, 787563, 984333, 140992, 511125, 212432, 75124, 823167, 146048, 681274, 117705, 771015, 819784, 530484, 620444, 21992, 390132, 606708, 237938, 712585, 311294, 844799, 682300, 600162, 566138, 258180, 858350, 341319, 859451, 744408, 967279, 878082, 811125, 882064, 270602, 766236, 898569, 393301, 187202, 33080, 458771, 268304, 767934 };
    int[] cityY = { 301644, 843090, 525632, 870150, 456329, 472891, 140117, 43572, 925121, 157591, 778358, 530601, 773784, 913211, 647935, 696654, 867442, 844327, 691175, 215787, 180143, 748257, 159903, 529313, 237254, 978095, 908201, 612562, 255472, 75932, 541537, 249800, 730714, 880274, 246539, 304967, 261012, 373414, 753914, 73044, 545573, 77527, 415695, 232147, 894659, 329669, 308262, 549171, 9652, 247907, 83982, 354149, 630127, 325287, 429330, 549648, 941541, 92230, 699124, 395692, 324763, 25162, 854497, 327119, 235673, 455554, 989274, 554251, 124294, 988915, 514965, 697870, 798352, 138888, 848694, 810881, 274082, 356145, 93442, 274684, 128295, 277977, 230022, 269987, 42308, 772948, 745771, 119328, 190402, 710637, 320368, 594483, 614329, 647512, 610665, 701863, 709498, 749046, 12064, 813353, 259101, 846883, 389593, 163192, 103179, 902534, 40059, 558271, 555902, 437873, 75561, 57301, 465207, 149890 };
    double roadCost = 0.26348969987;
    double airportCost = 5324912.55702;
    assertEquals(1902107.3417628752, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1902107.3417628752);
  }

  @Test
  public void case49() {
    int[] cityX = { 964797, 790786, 118688, 821076, 878380, 413143, 557129, 322640, 837569, 804045, 407574, 95784, 665348, 327830, 574409, 88224, 966843, 388148, 737433, 174482, 407511, 327119, 227969, 702394, 716464, 756278, 225199, 37772, 717726, 20112, 380635, 405292, 741581, 546967, 141271, 879220, 418752, 475651, 605844, 802581, 447792, 102940, 611679, 684893, 789023, 842226, 168261, 739587, 773622, 225047, 702998, 281776, 83465, 450102, 283403, 411943, 896349, 699632, 894372, 253583, 2764, 724441, 56236, 180471, 398997, 72066, 644365, 906370, 674973, 298809, 975397, 860641, 791317, 903406, 602989, 422226, 466417, 211803, 392781, 379437, 253356, 903073, 599504, 624085, 740894, 362284, 77465, 433516, 221949 };
    int[] cityY = { 880340, 765527, 904226, 75341, 96372, 181069, 288768, 738466, 778146, 402132, 259727, 978390, 716131, 608195, 9730, 1550, 10389, 116643, 865606, 958883, 171322, 382583, 478339, 242549, 83723, 186932, 912900, 336233, 992384, 746203, 551607, 608048, 471497, 501062, 119192, 944158, 640167, 52793, 919655, 949798, 495563, 820599, 26528, 376189, 313336, 786129, 619478, 650647, 589308, 188111, 864265, 127521, 85990, 968392, 918037, 512582, 263413, 193999, 72238, 845729, 764767, 814378, 975265, 334874, 693182, 894104, 580441, 219507, 941035, 822775, 14149, 306221, 271124, 904515, 809470, 746476, 567822, 219478, 840310, 332273, 450951, 166060, 887652, 741959, 975474, 724498, 793942, 614835, 38373 };
    double roadCost = 2.75281050417;
    double airportCost = 4371638.98062;
    assertEquals(17304308.174152277, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 17304308.174152277);
  }

  @Test
  public void case50() {
    int[] cityX = { 921483, 220981, 706450, 483371, 741423, 753359, 604754, 872017, 460546, 198470, 74310, 825198, 455998, 660899, 768118, 904222, 96934, 175968, 759819, 36961, 504126, 822267, 832728, 96950, 28539, 119210, 693917, 936248, 325989, 674479, 913851, 105257, 364116, 889740, 844874, 150109, 595925, 88611, 874406, 402140, 128165, 551217, 555147, 537525, 529510, 9485, 24234, 622606, 444968, 171584, 340493, 15880, 965288, 472778, 922401, 941579, 107608, 165548, 814600, 281854, 279705, 758281, 290706, 840093, 657702 };
    int[] cityY = { 570728, 195703, 279812, 770327, 890591, 218980, 823704, 273511, 893540, 370447, 128327, 728842, 144328, 586141, 641388, 526401, 939199, 913456, 185008, 546844, 702500, 980250, 150782, 821707, 273092, 951364, 625124, 386503, 779101, 228643, 218584, 215504, 440888, 211153, 700777, 449565, 602941, 959865, 180888, 355559, 213201, 908533, 998182, 466817, 91700, 728627, 783166, 289939, 51901, 467036, 924746, 562892, 538037, 320899, 667986, 258640, 305612, 268313, 698867, 333930, 125388, 236448, 493048, 628930, 14927 };
    double roadCost = 0.109979846438;
    double airportCost = 1372495.7106;
    assertEquals(596694.4178763353, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 596694.4178763353);
  }

  @Test
  public void case51() {
    int[] cityX = { 933314, 498907, 389578, 499121, 308561, 36576, 14146, 418889, 877155, 849061, 910645, 169963, 602019, 815083, 140997, 603018, 153617, 408519, 712087, 470519, 525596, 88908, 734291, 95485, 345031, 328432, 417972, 626966, 609938, 439590, 277352, 787466, 42515, 572781, 950266, 462371, 658219, 829314, 164018, 240819, 868841, 686341, 7829, 401497, 692878, 586238, 96300, 991301, 74335, 16179, 502541, 687848 };
    int[] cityY = { 423626, 391973, 215286, 298763, 557298, 431875, 578549, 355633, 818694, 772649, 334434, 995261, 198231, 781429, 131020, 711765, 771457, 141011, 959717, 550680, 756103, 845984, 982891, 235565, 700163, 847765, 765347, 84841, 835147, 520052, 491833, 437817, 463285, 942580, 517383, 776794, 735584, 428642, 409317, 733748, 716988, 321228, 575121, 180902, 467862, 175476, 134700, 357401, 517932, 862478, 251117, 412056 };
    double roadCost = 2.13229753986;
    double airportCost = 7701319.24717;
    assertEquals(9683455.385768691, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 9683455.385768691);
  }

  @Test
  public void case52() {
    int[] cityX = { 452596, 421112, 742189, 592738, 115105, 419270, 613854, 748994, 638540, 647428, 865906, 833294, 418388, 154301, 621641, 266320, 134573, 306483, 839307, 224826, 211922, 881209, 875397, 174058, 66784, 563080, 208545, 321484, 149228, 562363, 175353, 773401, 796607, 906217, 978821, 373635, 27260, 111027, 654850, 703618, 228167, 465182, 524352, 410202, 366489, 908250, 535193, 704799, 879325, 749594, 885880, 105014, 156084, 673949, 436951, 212700, 23836, 561088, 459686, 407594, 136908, 148368, 912249, 315146, 125136, 121356, 486330, 119137, 347997, 14864, 533123, 732068, 153875, 550388, 534713, 281523, 588040 };
    int[] cityY = { 238279, 331967, 238164, 154918, 49466, 76777, 968285, 709831, 896640, 44773, 206448, 913396, 671271, 212153, 817425, 227255, 806255, 101373, 326333, 341654, 716571, 201129, 831959, 296667, 636435, 618479, 279476, 646385, 457456, 47316, 889848, 613162, 139401, 946597, 677188, 891395, 378687, 317404, 830767, 917856, 875979, 692280, 493803, 260563, 815102, 875446, 85837, 568470, 907613, 620706, 531484, 223661, 393058, 59245, 712353, 822013, 665297, 738659, 132063, 687772, 531085, 859766, 140064, 165999, 985992, 981726, 821171, 663622, 140089, 372683, 945005, 781841, 697741, 886109, 364389, 712363, 245373 };
    double roadCost = 2.98730638783;
    double airportCost = 9687024.83438;
    assertEquals(17323479.20712179, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 17323479.20712179);
  }

  @Test
  public void case53() {
    int[] cityX = { 592919, 78998, 137186, 630206, 500516, 779380, 351812, 979906, 353418, 951938, 376068, 4906, 643747, 95185, 964901, 838109, 236807, 43377, 674766, 697213, 656189, 458552, 389644, 536048, 929394, 493041, 146796, 750932, 122304, 775908, 562286, 674250, 955053, 223672, 114562, 59833, 43842, 229561, 856655, 543107, 567457, 468082, 838261, 307541, 401201, 18571, 482912, 389085, 495076, 853864, 29440, 870838, 920880, 912330, 858288, 949473, 278097, 974369, 234564, 667254, 933198, 581708, 114412, 570883, 596072, 587859, 568403, 718419, 113467, 986628, 949585, 461939, 995801, 320949, 567980, 56878, 811804, 661187, 526787, 362632, 596534, 693902, 636193, 442915, 637046, 661179, 153657, 706546, 651494, 709879, 575256, 893662, 226883, 16914, 715512, 952482, 105384, 771104, 313177, 593011, 466350, 298625, 429073, 717852, 863197, 337883, 832033, 91585, 569782, 81326, 305749, 808488, 317571, 455701, 814539, 525146, 570261, 81705, 337428, 217223, 775693, 780438, 184482, 413049, 942673, 464225, 953833, 664108, 779402, 317704, 574713, 282243, 22546, 189389, 199167, 715568, 714418, 411464 };
    int[] cityY = { 340492, 442219, 49716, 183099, 606290, 58030, 705453, 189817, 31760, 168873, 314383, 810407, 817519, 134064, 682587, 158763, 316062, 162769, 793178, 675228, 106705, 842153, 601639, 200360, 637252, 99397, 124921, 543941, 978418, 246286, 465659, 102435, 920096, 423781, 922990, 51808, 151883, 156374, 287473, 772719, 89994, 639706, 629340, 654565, 813424, 370949, 245925, 460871, 235797, 227576, 408957, 613507, 415745, 212233, 545928, 822720, 677495, 554548, 221646, 156344, 74933, 953667, 142972, 851413, 954527, 242922, 579109, 254631, 388110, 825801, 227897, 352994, 94613, 742543, 514805, 502721, 102882, 972045, 531617, 556691, 671285, 613235, 870210, 245637, 426795, 703418, 770693, 224886, 356602, 419020, 898491, 61403, 15772, 475390, 260980, 314576, 972879, 819645, 496810, 888221, 275788, 142925, 33581, 737820, 389706, 114861, 162043, 487084, 548063, 452938, 971130, 672046, 486191, 73183, 90733, 124959, 414245, 502648, 576648, 524657, 679561, 190049, 202045, 849213, 896530, 253100, 564933, 911063, 503620, 844131, 699471, 505365, 320323, 590624, 950779, 465732, 399149, 808659 };
    double roadCost = 0.463317448405;
    double airportCost = 3498730.01424;
    assertEquals(3666374.489510345, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3666374.489510345);
  }

  @Test
  public void case54() {
    int[] cityX = { 722816, 320374, 739872, 336224, 962056, 550740, 455019, 997437, 165051, 288068, 213752, 432344, 23609, 651102, 289802, 535935, 539042, 325066, 115884, 619466, 917925, 572784, 723770, 926197, 294519, 357573, 769269, 306625, 978031, 209418, 106724, 578246, 213398, 20062, 104913, 911076, 376701, 634948, 299481, 346404, 766266, 526428, 936258, 351485, 270399, 357993, 755678, 929356, 329230, 325086, 358989, 740559, 645945, 432467, 108613, 195345, 716211, 985285, 656033, 814131, 194041, 234529, 707867, 427611, 343670, 384329, 913209, 476173, 276254, 347530, 553743, 39342, 437288, 317932, 481477, 581773, 928967, 715181, 505215, 443319, 755361, 540000, 217828, 913150, 745976, 603418, 266790, 980254, 281284, 107196, 952593, 651799, 679310, 603625, 744940, 162003, 579610, 166126, 618382, 885477, 82071, 35702, 771764, 238003, 335856, 25992, 428800, 420654, 99215, 21906, 787548, 62318, 269643, 506063, 379673, 223957, 309849, 857746, 592310, 416025, 530042, 162556, 656993, 925698, 758284, 565347, 207560, 951076, 906903, 26366, 668491, 476566, 711752, 167799, 900700, 164177, 232729, 804960, 400790, 778098, 526339, 812165, 705269, 841287, 20004, 992393 };
    int[] cityY = { 595234, 144985, 668662, 803307, 92366, 638844, 630074, 740191, 816078, 434769, 915091, 419904, 681097, 913927, 791784, 441859, 292052, 7620, 691318, 29918, 47770, 836628, 742097, 829656, 785151, 36067, 257577, 503960, 543060, 714992, 146312, 657848, 42978, 154302, 536124, 744971, 797021, 852974, 172700, 506008, 963144, 27574, 69288, 770172, 554144, 683297, 529291, 119539, 671201, 229406, 600651, 413172, 153834, 619131, 170757, 350501, 469410, 907464, 71742, 296790, 333901, 950036, 962093, 868511, 670618, 18621, 53306, 116370, 613177, 976682, 928311, 771668, 227906, 747101, 537129, 685026, 973978, 554397, 894767, 932299, 391405, 455654, 577090, 575127, 590480, 155502, 312030, 796003, 871750, 827362, 387963, 398459, 300858, 999145, 640087, 660884, 51339, 419213, 642409, 344074, 146952, 160792, 360050, 275025, 866015, 845976, 627697, 791551, 774066, 31797, 422858, 667363, 535301, 472404, 899600, 865187, 921346, 433977, 646341, 812932, 751593, 832906, 83708, 667674, 203515, 868074, 601921, 250921, 615151, 99258, 310807, 45212, 348473, 899039, 828770, 669599, 10418, 611827, 673390, 967893, 232687, 885384, 346560, 395832, 165494, 699791 };
    double roadCost = 1.37202158649;
    double airportCost = 6286792.8405;
    assertEquals(11056282.316487936, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 11056282.316487936);
  }

  @Test
  public void case55() {
    int[] cityX = { 87318, 343911, 691458, 445063, 218142, 163893, 198755, 307418, 543768, 409044, 937463, 409996, 172764, 593761, 967359, 191875, 234549, 967174, 686132, 735220, 826935, 51900, 862717, 782135, 867764, 101599, 256198, 513215, 682254, 952168, 228503, 239101, 141585, 57319, 173562, 291364, 686535, 710794, 438338, 196647, 588986, 140244, 462480, 754009, 261479, 520043, 74479, 237124, 907318, 631467, 493737, 540838, 108944, 185202, 484627, 77982, 942860, 519664, 909119, 351903, 228435, 496547, 837387, 287164, 674955, 120086, 842353, 494007, 900418, 440034, 284436, 338317, 933870, 840496, 37918, 507078, 995159, 218311, 198748, 820586, 212860, 7032, 317112, 6631, 447319, 323911, 430184, 656878, 225826, 757264, 444790, 87720, 463813, 881740, 111745, 625575, 683024, 852494, 904959, 68280, 72627 };
    int[] cityY = { 237511, 460765, 42434, 647308, 99402, 317929, 225080, 608096, 69412, 561395, 560443, 265609, 579608, 290437, 234758, 210002, 601223, 55855, 312208, 951487, 407722, 555774, 214034, 239719, 979898, 817565, 999256, 873477, 849279, 904548, 209215, 297529, 155424, 983726, 61097, 781284, 27872, 883764, 348073, 6172, 997283, 268395, 25375, 905110, 404946, 598861, 80740, 5819, 598569, 362253, 230558, 318383, 832254, 579366, 939758, 244325, 865728, 138429, 922030, 421510, 218420, 426112, 721858, 459883, 890804, 655619, 422084, 95479, 712108, 198259, 882375, 949290, 169386, 615105, 581894, 902166, 468552, 150962, 323575, 300993, 111766, 126616, 953581, 799532, 220609, 637206, 49116, 478546, 159961, 792770, 549037, 944431, 539033, 45576, 145080, 42078, 872092, 193477, 937281, 352153, 684704 };
    double roadCost = 2.57235315714;
    double airportCost = 147455.97369;
    assertEquals(12244318.023028571, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 12244318.023028571);
  }

  @Test
  public void case56() {
    int[] cityX = { 582034, 148164, 281652, 517886, 557165, 428242, 945525, 251794, 534861, 788037, 20836, 113379, 403722, 713177, 515201, 154360, 84218, 540247, 249657, 983177, 413694, 260388, 744551, 928279, 40455, 251608, 786567, 391573, 686091, 930120, 224643, 38343, 478321, 540793, 213349, 37271, 935350, 889923, 836691, 549001, 116748, 211498, 427567, 267218, 822942, 500138, 872328, 631901, 141508, 921569, 442281, 79182, 98545, 496543, 296496, 234176, 99546, 392095, 100966, 702919, 371522, 962642, 600641, 736167, 919544, 871570, 766426, 766415, 697944, 411306, 760396, 768830, 907252, 331597, 736799, 499831, 190236, 46577, 530448, 235398, 883979, 975156, 796328, 373529, 447023, 831352, 773863, 773242, 357218, 214867, 41386, 124149, 414547, 962112, 175523, 807945, 189717, 358918, 22249, 270931, 495834, 123788, 392073, 306099 };
    int[] cityY = { 335532, 936507, 423149, 540225, 718456, 473933, 75537, 630603, 39634, 271653, 113844, 133038, 997871, 492365, 220956, 988987, 360861, 850405, 551043, 724314, 425802, 698768, 308351, 356991, 392648, 366644, 501595, 720142, 244428, 66309, 513660, 624331, 646755, 529875, 46877, 904732, 218068, 554333, 20517, 733872, 639478, 806372, 554309, 615853, 504840, 142345, 474165, 413396, 798652, 506352, 490646, 1352, 650969, 974369, 748788, 176806, 77266, 716958, 193122, 942549, 931524, 423890, 146364, 363499, 829738, 356895, 987847, 378933, 495333, 619268, 26859, 33914, 716657, 232328, 987254, 962033, 222410, 849380, 181243, 24200, 757122, 268729, 899421, 636771, 146747, 12396, 416933, 181486, 54301, 371000, 782672, 233636, 480653, 203350, 496702, 831285, 5005, 196797, 909058, 406953, 65898, 205203, 14929, 247078 };
    double roadCost = 2.613204192;
    double airportCost = 18665.0872498;
    assertEquals(1930935.5053420984, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1930935.5053420984);
  }

  @Test
  public void case57() {
    int[] cityX = { 179481, 195596, 959698, 370882, 763821, 809880, 720181, 53257, 669937, 154084, 341917, 101120, 941121, 185976, 534972, 731801, 172372, 630697, 167273, 114742, 666032, 863595, 438837, 512142, 336509, 277063, 24506, 421122, 439016, 621699, 12151, 918766, 178309, 976253, 955657, 642894, 373000, 601904, 996223, 118467, 963994, 903697, 941180, 982034, 675710, 164275, 534577, 52708, 927290, 806404, 696845, 974919, 22585, 209348, 385563, 855011, 523008, 421967, 431408, 440612, 452993, 673139, 867711, 737124, 525506, 186761, 270301, 414798, 354653, 69939, 674606, 87614, 22225, 143683, 806898, 354390, 163556, 167214, 108640, 371349, 265781, 754359, 977931, 153458, 953156, 993723, 672912, 617819, 62448 };
    int[] cityY = { 66144, 559169, 189649, 767549, 565407, 312460, 831623, 331391, 50235, 825457, 700350, 277175, 335393, 975756, 161093, 488295, 227812, 2019, 674609, 307930, 537333, 259272, 586537, 291249, 925317, 215917, 670623, 37165, 149387, 218778, 298093, 829104, 969465, 250909, 130636, 526381, 750457, 391193, 217935, 22633, 237858, 48901, 316927, 9475, 559666, 771389, 664507, 25636, 43933, 893641, 425105, 823167, 686030, 542687, 815062, 296738, 858107, 737077, 147261, 693255, 945769, 537462, 615618, 108294, 131935, 410559, 772658, 832826, 872703, 59673, 324509, 402206, 733097, 89576, 586187, 384137, 286012, 636665, 964559, 448955, 547187, 156401, 192241, 871672, 848441, 440047, 76049, 717585, 423221 };
    double roadCost = 2.96302497121;
    double airportCost = 417102.80162;
    assertEquals(18441552.75077988, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 18441552.75077988);
  }

  @Test
  public void case58() {
    int[] cityX = { 538126, 828169, 994736, 751767, 738323, 296569, 456797, 34167, 54138, 835959, 971568, 844384, 416941, 766816, 765947, 116630, 778971, 754874, 774258, 275516, 753709, 974618, 797999, 927632, 782530, 739091, 941081, 644801, 403642, 159221, 463078, 965882, 543199, 481088, 105754, 259138, 799855, 152174, 18253, 478115, 300793, 66941, 744119, 123212, 631616, 637947, 948439, 146942, 481222, 256881, 129116, 468475, 945371, 219925, 792277, 914921, 871762, 647514, 231571, 610158, 874632, 444048, 341445, 303613, 719932, 50311, 62985, 327147, 785924, 605116, 607832, 618052, 183365, 639210, 54244, 674249, 491499, 859252, 217575, 390812, 798005, 543034, 847246, 456616, 396092, 304017, 361031, 210555, 442207, 634273, 807666, 631733, 44711, 13966, 195476, 453004, 958508, 280970, 488772, 575472, 811682, 238822, 516476, 866630, 346431, 739040, 233176, 124825 };
    int[] cityY = { 538266, 600466, 93709, 588277, 851047, 515443, 217490, 47826, 171398, 538879, 637764, 366899, 667256, 862889, 908818, 637951, 213480, 554530, 453683, 948290, 515573, 6865, 244275, 201958, 994356, 839990, 498888, 638768, 172054, 210998, 416108, 123730, 139701, 147289, 422690, 966363, 43661, 818562, 589907, 321858, 842080, 827887, 124805, 300405, 807561, 182274, 464009, 956352, 169201, 760553, 874085, 999385, 728522, 837683, 749161, 582313, 743086, 515899, 256929, 767155, 329451, 878808, 997616, 19267, 533588, 583198, 220556, 438265, 628255, 857585, 53010, 252693, 456868, 195124, 959662, 734261, 239373, 860491, 85090, 241838, 497992, 463697, 231986, 370868, 565853, 178993, 957347, 838129, 45900, 513562, 355634, 260059, 257421, 644759, 981389, 425730, 16274, 269889, 384060, 99727, 311712, 975024, 24212, 878336, 131491, 917442, 918115, 567356 };
    double roadCost = 0.817328782155;
    double airportCost = 922397.288197;
    assertEquals(5923424.144236698, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 5923424.144236698);
  }

  @Test
  public void case59() {
    int[] cityX = { 885472, 82084, 458585, 743192, 724367, 142557, 291886, 116842, 778430, 36117, 695392, 68350, 258740, 303999, 872209, 346957, 38500, 594790, 567830, 733935, 283551, 472622, 485574, 91921, 39785, 887349, 558766, 569138, 646264, 756320, 553056, 199147, 900148, 696463, 198085, 972093, 647403, 670053, 985606, 456428, 844543, 670684, 495624, 368827, 663423, 517417, 932244, 603223, 470182, 198504, 141348, 942843, 379256, 241557, 670901, 945141, 768681, 628582, 433908, 808771, 216626, 864083, 768062, 952678, 124678, 744872, 991709, 21424, 740424, 305696, 699322, 675301, 78007, 261765, 943719, 532048, 208982, 9098, 567010, 393274, 176427, 560567, 333781, 907576, 874538, 864614, 269248, 563879, 125231, 766599, 178453, 747725, 987326, 20819, 604174, 660930, 946329, 940689, 944632, 523818, 118466, 422827, 658545, 482151, 931763, 52446, 347603, 234441, 928099, 849706, 591202, 113120, 691158, 665868, 657436, 914340, 488418, 466597, 178999, 79047 };
    int[] cityY = { 371241, 106263, 815984, 878803, 639108, 507953, 299089, 318919, 538227, 96936, 554199, 709179, 63122, 529807, 940506, 430215, 641668, 212165, 188764, 687796, 922145, 837109, 985750, 495158, 725585, 304676, 276246, 377225, 518409, 517838, 374461, 454503, 45885, 487725, 499961, 924854, 926044, 290616, 339435, 770321, 464580, 871415, 938867, 661014, 436796, 96912, 894740, 28871, 227434, 839386, 941527, 19581, 216546, 646085, 18060, 118852, 103775, 849370, 383305, 948946, 71388, 760793, 70661, 795280, 555108, 781459, 927215, 30662, 48164, 357835, 388002, 82943, 321345, 377202, 696566, 114437, 954115, 619323, 626687, 587216, 132031, 467411, 886829, 102211, 542685, 782753, 615878, 65587, 572730, 622720, 31278, 406988, 788832, 300136, 839876, 227018, 173964, 768875, 752262, 795832, 998868, 280442, 675083, 194024, 894269, 618649, 814047, 790514, 960205, 357463, 864903, 656215, 395700, 96045, 152640, 211312, 717248, 825926, 325213, 11377 };
    double roadCost = 0.54673793095;
    double airportCost = 283030.225388;
    assertEquals(4103927.3260341557, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 4103927.3260341557);
  }

  @Test
  public void case60() {
    int[] cityX = { 222784, 303352, 776953, 397749, 86598, 215011, 275162, 357530, 176252, 969650, 48068, 108702, 586981, 969015, 494836, 925574, 551761, 833679, 764665, 485779, 454292, 339054, 571188, 853420, 91076, 980490, 824083, 723249, 28309, 819633, 680489, 945859, 854920, 759467, 1726, 374530, 195091, 363922, 349559, 45317, 42051, 77054, 611320, 393271, 544552, 829978, 433798, 40077, 512988, 149371, 114139, 141956, 303366, 998486, 295378, 734954, 199359, 795130, 711704, 755961, 762556, 302909, 115746, 945688, 268795, 600043 };
    int[] cityY = { 375607, 473568, 637552, 930550, 175266, 117558, 567430, 673890, 734567, 242329, 645763, 23199, 81456, 922463, 930977, 809188, 999491, 379589, 798406, 37126, 554606, 972637, 102274, 576002, 270622, 298002, 857300, 435933, 8004, 370752, 217020, 214202, 32965, 720483, 882630, 374268, 16679, 666959, 741237, 472026, 326606, 23127, 938349, 157357, 593380, 830084, 847400, 672275, 462471, 420614, 340958, 78736, 802877, 902010, 79635, 443478, 195666, 299378, 102920, 86446, 13519, 850097, 280106, 784204, 68700, 149674 };
    double roadCost = 2.86079279148;
    double airportCost = 767683.458512;
    assertEquals(16091014.160314474, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 16091014.160314474);
  }

  @Test
  public void case61() {
    int[] cityX = { 616925, 886938, 367032, 514312, 98771, 775248, 576850, 99104, 820142, 841103, 37073, 810934, 259695, 680395, 385061, 381701, 315218, 65964, 302698, 424914, 402507, 290175, 107123, 845963, 451759, 51533, 175175, 251564, 836213, 432419, 631732, 452567, 258162, 245547, 726102, 52562, 651011, 992675, 69102, 663116, 637676, 414854, 320791, 897224, 38241, 579328, 297528, 751235, 202020, 268, 25049, 710826, 741200, 414027, 134350, 288368, 214136, 993427, 863340, 334501, 509965, 638753, 76205, 180730, 530966, 818008, 470317, 594840, 825023, 363699, 94771, 646922, 619692, 897279, 602678, 309075 };
    int[] cityY = { 721339, 946562, 816639, 558416, 886488, 159341, 49793, 32034, 599101, 843572, 538397, 922433, 801608, 91306, 374618, 699760, 580855, 527603, 811859, 421105, 579191, 389683, 364603, 23629, 458012, 279575, 287385, 816535, 179288, 176505, 418019, 302055, 6241, 39241, 663091, 85186, 424605, 448725, 121400, 434261, 698058, 405001, 494865, 566393, 581178, 432011, 800859, 200310, 387197, 730953, 544126, 535951, 835374, 490272, 710453, 50004, 840437, 330473, 400989, 804964, 986040, 969443, 677412, 38624, 898521, 426974, 702491, 69638, 357898, 754969, 358981, 556850, 948026, 978293, 243910, 717992 };
    double roadCost = 2.99705558214;
    double airportCost = 853409.54267;
    assertEquals(17896750.088738896, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 17896750.088738896);
  }

  @Test
  public void case62() {
    int[] cityX = { 50884, 903189, 180666, 613792, 528522, 762735, 981681, 343570, 258150, 734900, 105148, 400133, 506543, 184548, 393686, 562176, 308266, 905468, 949703, 461487, 276909, 708936, 426491, 163403, 334762, 260299, 807127, 798528, 687146, 559060, 695734, 375786, 166700, 814265, 510620, 274803, 534552, 776719, 258355, 210657, 922962, 772115, 816944, 190681, 342440, 844977, 638275, 64329, 976055, 11571, 949343, 907365 };
    int[] cityY = { 850939, 37713, 328918, 865603, 441924, 736615, 657444, 530889, 291953, 386693, 902095, 142438, 39180, 43383, 867701, 876313, 41056, 888178, 646492, 186763, 818435, 844902, 410238, 330679, 343229, 766627, 180149, 532059, 210070, 982565, 386499, 559739, 125000, 9364, 989478, 147928, 929630, 426458, 431355, 906776, 392876, 871963, 283084, 153148, 897665, 968345, 866663, 624270, 454197, 553619, 11985, 261549 };
    double roadCost = 1.7135243029;
    double airportCost = 405013.50899;
    assertEquals(8598598.78581392, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 8598598.78581392);
  }

  @Test
  public void case63() {
    int[] cityX = { 659580, 112694, 662132, 500758, 683396, 707665, 328670, 325472, 188123, 709302, 447981, 642198, 300301, 924544, 412491, 425014, 95178, 649280, 653738, 251928, 533747, 962060, 619281, 346340, 515063, 624543, 61922, 670652, 878700, 13995, 403064, 720199, 269100, 45223, 796101, 420788, 306975, 478346, 182892, 380857, 632718, 685986, 192314, 573643, 401985, 56218, 14678, 212027, 783340, 32739 };
    int[] cityY = { 75144, 789771, 992730, 17005, 834510, 916597, 70047, 413928, 243215, 87198, 612818, 123813, 766874, 334814, 875125, 847616, 247045, 29977, 552100, 584246, 748769, 156579, 315487, 348982, 34168, 502462, 633544, 331298, 466462, 487490, 985690, 573871, 175213, 546035, 271571, 131632, 162168, 830303, 175111, 626395, 650733, 597595, 810030, 657810, 474180, 611845, 912857, 851295, 166385, 82394 };
    double roadCost = 2.63195267454;
    double airportCost = 887233.511408;
    assertEquals(12389195.240203058, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 12389195.240203058);
  }

  @Test
  public void case64() {
    int[] cityX = { 989313, 289208, 440617, 322433, 923700, 677970, 867616, 544690, 247302, 461680, 342702, 662683, 983391, 71513, 128218, 579990, 81652, 474855, 678656, 14270, 707596, 537557, 44974, 882055, 171856, 618760, 657395, 937467, 652986, 643082, 708105, 840186, 858498, 679646, 759663, 216924, 298032, 370872, 656969, 593743, 868776, 954920, 750777, 420565, 512793, 474243, 162290, 455519, 872981, 295604, 28973, 742287, 339038, 586912, 77920, 515650, 819916, 545543, 336848, 209339, 394004, 75374, 3033, 657183, 965311, 57932, 285128, 702324, 563768, 13748, 229763, 992256, 533453, 105064, 955862, 63941, 216202, 933945, 638338, 2974, 913083, 170656, 410236, 509596, 17028, 986840, 984464, 213903, 364268, 455215, 938728, 143148, 534935, 704991, 210529, 349744, 203061, 797245, 444232, 689867, 19753, 609756, 242864, 592345 };
    int[] cityY = { 190486, 565964, 934306, 743279, 833608, 394443, 638222, 130254, 863769, 935347, 430699, 815725, 86374, 657065, 604430, 902237, 46271, 956477, 585915, 307394, 985817, 757534, 683382, 632606, 468850, 561289, 103839, 643698, 532399, 716696, 208223, 289538, 678062, 172628, 449055, 854524, 674631, 822550, 912843, 875593, 312970, 13914, 452998, 776822, 863625, 903108, 109456, 937780, 479641, 608327, 321755, 564504, 809914, 702316, 950191, 697026, 972954, 713424, 307513, 7706, 481184, 60474, 71297, 951522, 745364, 905475, 410909, 630093, 474377, 938890, 342819, 295456, 338535, 722873, 893983, 325794, 44195, 515492, 760153, 803294, 189823, 331118, 865226, 44981, 456208, 710879, 104185, 94739, 135212, 906715, 548025, 302716, 902141, 498263, 763938, 435213, 2597, 938554, 451478, 205230, 294291, 859110, 78918, 755339 };
    double roadCost = 1.6230284329;
    double airportCost = 165605.195217;
    assertEquals(10368535.472288646, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 10368535.472288646);
  }

  @Test
  public void case65() {
    int[] cityX = { 872288, 712753, 440872, 944297, 316740, 61354, 975451, 385665, 119137, 104243, 73470, 936095, 326217, 810915, 683330, 311396, 478229, 65218, 406498, 589755, 234645, 584271, 63462, 324816, 614426, 482523, 794949, 358975, 97242, 677776, 974141, 305240, 216487, 154321, 72798, 2184, 599090, 352537, 309907, 264929, 705720, 709257, 89345, 146256, 595977, 239261, 417815, 874, 980174, 671732, 959931, 610990, 421213, 126339, 287565, 449836, 322699, 701084, 776464, 709980, 440505, 134960, 222820, 678186, 302635, 70979, 726834, 812804, 107682, 360836, 785216, 917839, 32122, 111094, 298253, 441700, 817661, 226732, 542028, 388958, 619100, 396968, 136788, 878311, 298070, 61189, 536864, 953959, 409781, 453012, 443587, 520672, 658371, 276210, 579104, 712816, 769893, 731855, 743205, 359868, 343985, 308816, 295122, 716819, 765540, 429116, 411944, 757507, 267551, 665043, 883738, 224696, 442376, 174744, 751545, 184001, 650415, 464081, 270270, 283728, 161121, 294948, 849610, 721020, 798211, 326530, 916876, 133030, 748217, 950837, 53551, 409847, 8896, 428921, 598638, 403256, 441055, 964545 };
    int[] cityY = { 566369, 575088, 967734, 685850, 654704, 667797, 664948, 799129, 76651, 242592, 810428, 4380, 335329, 246198, 164887, 418848, 754857, 56033, 828120, 468364, 430764, 662080, 888367, 532770, 348413, 480969, 461320, 342587, 241201, 706618, 241173, 934523, 246492, 410208, 363486, 944202, 484873, 338321, 198059, 903891, 863078, 565284, 723267, 806269, 768341, 988094, 736630, 470775, 768716, 148615, 303918, 959110, 396366, 447106, 585461, 511702, 195656, 511423, 36887, 542950, 784147, 141547, 356366, 402200, 982887, 774904, 499142, 813988, 733629, 675827, 246630, 837927, 526645, 654352, 716432, 695551, 426763, 848616, 617358, 210931, 335853, 642929, 89849, 93886, 608376, 858517, 381893, 705423, 659818, 564516, 698593, 102744, 663980, 719413, 2086, 117702, 187013, 912055, 863459, 648968, 265013, 561923, 938481, 626642, 70915, 639860, 783560, 584484, 79529, 496175, 455263, 712109, 512776, 794172, 335883, 47874, 7375, 861397, 796197, 874722, 347528, 489999, 472044, 617027, 748142, 929469, 428664, 121056, 712948, 179726, 526362, 428328, 263371, 937703, 689794, 703388, 664656, 908379 };
    double roadCost = 0.327166938827;
    double airportCost = 76839.9290677;
    assertEquals(2509085.805203859, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2509085.805203859);
  }

  @Test
  public void case66() {
    int[] cityX = { 970139, 825920, 853510, 373784, 926766, 146784, 255011, 520372, 391432, 93330, 410923, 692629, 587898, 468995, 907217, 415053, 223319, 934327, 315068, 172780, 198673, 283732, 957414, 427153, 244810, 897573, 448186, 761893, 599981, 860486, 219351, 768237, 421145, 731877, 790053, 688761, 621218, 253060, 548868, 128739, 943408, 699049, 871651, 158198, 245458, 218789, 263547, 961280, 979141, 256647, 274442, 460301, 413650, 351421, 273987, 857388, 960975, 922482, 433527, 209724, 809962, 30319, 502261, 416203, 871416, 587786, 55998, 546039, 844544, 227350, 121425, 531281, 523768, 847112, 46282, 581615, 419695, 939842, 42287, 188721, 465072, 186661, 726715, 372155, 263616, 223212, 913202, 761151, 42597, 419164, 576526, 487613, 458638, 690202, 170081, 841624, 430379, 270499, 816829, 934348, 451866, 749563, 771450, 476875, 268260, 242816, 612849, 31829, 863943, 331049, 499870, 325706, 279033, 381901, 900481, 303158, 955111, 254335, 300878, 407037, 335613, 890336, 631000, 494247, 958760, 229982, 412183, 233377, 333245, 737648, 586572, 517935, 763071, 339508, 281325, 205110 };
    int[] cityY = { 700017, 366, 256234, 540600, 126177, 277755, 785668, 666079, 834478, 138168, 819989, 226195, 849860, 305963, 813885, 338672, 706559, 403398, 117899, 984579, 938748, 685037, 158024, 286174, 251365, 993708, 687469, 872679, 829427, 508148, 28982, 232459, 75127, 445856, 759755, 118572, 919049, 359812, 193354, 907991, 928246, 342528, 38938, 260186, 700309, 873418, 365106, 199666, 851126, 324136, 722805, 423368, 981179, 955768, 426804, 182573, 857102, 221628, 546920, 515888, 211434, 384078, 299751, 882048, 379347, 165755, 102348, 452524, 857192, 335254, 59695, 659478, 9697, 65503, 310907, 102400, 470593, 415370, 867321, 401966, 326847, 135500, 516795, 186840, 829964, 950793, 647336, 165051, 321517, 974614, 286263, 151216, 713805, 65059, 900102, 360781, 925931, 781339, 860645, 243615, 621750, 479508, 633278, 686222, 630667, 694233, 763136, 302789, 22419, 325012, 716874, 264177, 488207, 541926, 773830, 411172, 893805, 567547, 252036, 378315, 826768, 653836, 363692, 310821, 700975, 373916, 77647, 791128, 800279, 955401, 568420, 599591, 295312, 80024, 550036, 306575 };
    double roadCost = 2.19273724536;
    double airportCost = 96125.0543048;
    assertEquals(11209202.989910834, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 11209202.989910834);
  }

  @Test
  public void case67() {
    int[] cityX = { 669972, 671571, 456114, 314053, 755181, 816144, 965445, 860402, 954463, 326396, 540077, 917977, 169868, 100077, 723845, 75881, 502920, 49322, 85175, 232121, 335890, 740552, 437732, 355927, 273434, 713988, 442147, 917927, 124859, 501458, 756843, 598495, 674430, 598383, 797509, 540569, 659475, 91645, 857774, 71972, 279474, 72696, 500281, 481924, 367476, 52527, 160019, 197065, 376726, 392745, 744612, 806663 };
    int[] cityY = { 692640, 689485, 116094, 860043, 677690, 632977, 607414, 995353, 50910, 564703, 546844, 141868, 756694, 481046, 886413, 598048, 411191, 86846, 182408, 201610, 918482, 648651, 260801, 939077, 919833, 12049, 613500, 221488, 548504, 717490, 285915, 398029, 255200, 578976, 607133, 856063, 937047, 963128, 384185, 356646, 135391, 754231, 551203, 880347, 808943, 737911, 584415, 77201, 101852, 309321, 551068, 998176 };
    double roadCost = 1.12681736705;
    double airportCost = 71166.0365476;
    assertEquals(3430183.6211403124, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3430183.6211403124);
  }

  @Test
  public void case68() {
    int[] cityX = { 264041, 890109, 886637, 649820, 393989, 198298, 184752, 709437, 111287, 234885, 753929, 349728, 215461, 129255, 880815, 820025, 974426, 226440, 745973, 248408, 443492, 421350, 772284, 331920, 701749, 291175, 976011, 692426, 229407, 313269, 627814, 7193, 377887, 3157, 290037, 798086, 602791, 913343, 859679, 172735, 33415, 870118, 494632, 706478, 111841, 586455, 575548, 375212, 143505, 137507, 90854, 134369, 152127, 430895, 337829, 804021, 152862, 371782, 449438, 176524, 31353, 545680, 725133, 469137, 589461, 381486, 3654, 87067, 646537, 418710, 54231, 323907, 957597, 502520, 392943, 646856, 376028, 967526, 219125, 75150, 953308, 945147, 244980, 726725, 84327, 686974, 887130, 203930, 703670, 488218, 772959, 390463, 31574, 530747, 135460, 882959, 991284, 363567, 283223, 846718, 792563, 15866, 580941, 521345, 837839, 440671, 771268, 245042, 921125, 828472, 84407, 760288, 951242, 5232, 731307, 807003, 269260, 306623, 688438, 650446, 924762, 884908, 811130, 954653, 913577, 992229, 32802 };
    int[] cityY = { 477204, 509890, 828987, 767202, 287588, 520909, 24836, 160741, 16443, 930076, 903665, 688949, 965862, 146415, 662905, 232970, 106875, 912640, 676420, 366671, 845421, 861132, 162465, 154425, 757704, 934081, 222454, 287750, 90281, 751265, 793118, 734696, 543890, 312670, 103317, 951124, 890039, 520757, 573743, 352255, 499572, 408643, 888949, 545499, 93072, 738295, 55226, 24850, 927007, 727640, 76332, 564483, 246367, 508752, 472077, 77653, 594242, 935681, 635140, 58292, 670618, 23627, 918488, 792150, 639468, 403972, 624630, 423326, 975891, 325098, 110346, 102108, 620307, 189712, 192020, 509686, 512549, 988335, 813641, 526243, 126422, 965170, 79879, 465414, 253476, 206149, 97252, 512409, 771904, 356282, 13039, 343744, 627975, 167342, 827679, 94868, 919026, 914739, 63278, 530923, 975649, 407500, 894554, 257226, 968440, 303637, 179461, 835525, 513084, 82100, 67764, 584303, 762927, 953383, 490162, 426518, 642159, 595063, 782939, 805778, 729966, 398560, 194373, 72557, 287200, 616974, 571458 };
    double roadCost = 1.80072196204;
    double airportCost = 41212.4133759;
    assertEquals(5077288.243840036, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 5077288.243840036);
  }

  @Test
  public void case69() {
    int[] cityX = { 283650, 592370, 298910, 239004, 941216, 405224, 963213, 959747, 939374, 44491, 865124, 589658, 466632, 504347, 782166, 857676, 993528, 900225, 128799, 524112, 32092, 262279, 966130, 349985, 4927, 360924, 559029, 837629, 395348, 259613, 174495, 791573, 978855, 793915, 576406, 947615, 686059, 202830, 925181, 720201, 508936, 801438, 949493, 244689, 392961, 105654, 23054, 867209, 3640, 713378, 748917, 804282, 243154, 312355, 525314, 326201, 696634, 640012, 824367, 491122, 736341, 228389, 292878, 5057, 744740, 428291, 605794, 81059, 741454, 472984, 461572, 856290, 265462, 773193, 335742, 483460, 511330, 619873, 411868, 233471, 306017, 282010, 614062, 706590, 774748, 671590, 777439, 58118, 86405, 663611, 425067, 924183, 526221, 50255, 895553, 640987, 154587, 256956, 85852, 528093, 282230, 342376, 655556, 56435, 257587, 621498, 381241, 590040, 677120, 779674, 665773, 794582, 487012, 581047, 63893, 432823, 961974, 215211, 727325, 510989, 820302, 961204, 778890, 683542, 883933, 931297, 849287, 435023, 3916, 202076, 505886, 627382, 430311, 917613, 746794, 3551, 866949, 688023 };
    int[] cityY = { 854352, 233785, 423619, 319956, 98943, 615446, 829941, 831012, 376569, 567984, 166334, 334148, 602269, 234109, 610246, 865137, 22384, 894919, 955618, 89219, 243313, 719611, 923307, 51428, 65048, 865743, 682339, 107358, 146952, 789673, 537601, 546609, 76884, 423873, 859803, 764214, 295406, 385081, 840192, 755100, 822040, 49436, 731579, 23780, 645074, 691481, 269923, 592442, 737290, 446910, 774814, 432030, 60930, 5129, 879292, 487547, 191697, 342662, 661858, 178035, 758444, 252839, 156186, 565220, 43408, 226281, 210637, 497369, 993218, 861215, 924902, 101315, 165217, 923534, 364445, 434953, 790739, 965225, 278324, 279346, 192387, 394802, 593077, 686834, 366757, 922521, 678559, 693384, 568902, 513879, 537386, 234410, 39466, 556171, 477323, 483929, 861486, 366677, 145233, 303184, 644830, 674131, 702519, 412809, 76713, 982393, 214357, 48481, 301149, 497893, 422767, 147018, 216915, 786537, 23246, 185417, 324447, 219927, 586570, 489525, 930842, 414583, 38278, 856597, 225329, 636615, 990070, 315888, 625986, 334370, 736568, 101169, 984162, 744003, 704048, 397263, 439929, 431951 };
    double roadCost = 0.389137648225;
    double airportCost = 68631.9050644;
    assertEquals(3187955.5948772053, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3187955.5948772053);
  }

  @Test
  public void case70() {
    int[] cityX = { 319479, 166174, 8351, 25930, 307362, 853451, 72074, 126264, 701022, 232705, 929572, 250642, 573888, 64355, 72011, 105814, 540836, 320845, 36518, 675095, 691305, 645728, 558633, 701327, 846679, 958759, 409842, 847534, 29605, 909306, 578935, 747335, 61916, 207266, 579753, 705862, 867010, 983389, 529477, 307809, 705551, 387780, 76312, 52087, 779547, 427798, 311433, 606940, 958546, 609710, 803097, 396952, 293888, 685683, 943169, 830013, 615401, 39640, 457191 };
    int[] cityY = { 233236, 1369, 368969, 406894, 580194, 852888, 95754, 846653, 32318, 735811, 859277, 371612, 598955, 939810, 684246, 682273, 299852, 29381, 601556, 572451, 561268, 805741, 151805, 540276, 121318, 101673, 261065, 824755, 556976, 693645, 468606, 156087, 400448, 189146, 155383, 448661, 419397, 865752, 682382, 114889, 840480, 230134, 939900, 329986, 706743, 785180, 277981, 436968, 47484, 825634, 637627, 970476, 22148, 890498, 14536, 155780, 71360, 199661, 510897 };
    double roadCost = 2.64136933794;
    double airportCost = 23480.5679459;
    assertEquals(1385353.5088081, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1385353.5088081);
  }

  @Test
  public void case71() {
    int[] cityX = { 787426, 786933, 931373, 323803, 33073, 62291, 828972, 817298, 671834, 591788, 825321, 148732, 772149, 488402, 336743, 619881, 337551, 771469, 357797, 56605, 857608, 728584, 840567, 123627, 742287, 145437, 132159, 833962, 671821, 517025, 961805, 405675, 128588, 921460, 757651, 508449, 174484, 91672, 624415, 496096, 834833, 5918, 190503, 400186, 895773, 393586, 789476, 41798, 724211, 941091, 781404, 141564, 852160, 971690, 837715, 679702, 305876, 48392, 953559, 155007, 166461, 739020, 42228, 338396, 436424, 799942, 971933, 628783, 993826, 16201, 106354, 105011, 973803, 146917, 368237, 975367, 282537, 714992, 427332, 591750, 847222, 852821, 483474, 74302, 363916, 810052, 862782, 118474, 269028, 579278, 838440, 888463, 592115, 646337, 299012, 314344, 467137, 124389, 446529, 646458, 116059, 390119, 506114, 89426, 878212, 783846, 966213, 402902, 894365, 664472, 691495, 321639, 413749, 735845, 332009, 523902, 111359, 930124, 580004, 143615, 284923 };
    int[] cityY = { 65975, 73970, 207127, 13516, 225578, 991244, 53186, 940536, 828564, 365036, 300417, 201490, 777104, 312309, 614160, 410187, 564491, 511653, 714875, 990992, 304175, 968845, 11851, 612727, 668283, 145853, 456955, 118445, 198452, 853404, 407174, 130380, 795789, 919337, 112814, 612139, 591797, 383189, 851785, 72886, 927552, 287303, 583877, 674086, 684062, 784655, 598693, 655563, 226859, 61750, 214132, 836431, 617115, 949465, 43927, 254029, 657630, 783524, 772442, 629261, 10658, 586479, 181400, 814955, 973064, 813656, 747761, 859529, 739695, 346512, 501770, 478800, 971241, 750650, 845076, 203876, 487042, 475081, 371645, 338686, 171689, 212694, 427245, 834928, 567615, 803160, 671700, 716489, 843841, 615384, 832532, 592305, 637720, 385874, 203277, 955186, 941949, 862483, 823643, 480863, 311685, 952831, 603490, 861198, 913916, 652245, 848839, 767477, 680484, 332412, 719843, 822930, 864401, 941827, 269965, 761080, 643191, 902299, 662151, 412402, 252131 };
    double roadCost = 2.2171789038;
    double airportCost = 27753.1751241;
    assertEquals(3297848.5417108955, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3297848.5417108955);
  }

  @Test
  public void case72() {
    int[] cityX = { 558337, 133870, 750946, 887648, 72947, 885545, 288450, 746096, 892677, 638177, 61697, 244345, 440367, 563185, 53432, 198380, 984358, 367699, 255809, 537776, 745358, 237728, 361773, 315120, 217321, 761706, 806255, 83830, 887991, 895561, 212516, 892671, 443748, 651678, 25465, 505937, 140394, 251164, 477532, 210618, 743778, 499798, 182712, 659251, 405109, 868539, 429823, 866118, 355649, 828381, 367412, 10435, 599444, 456646, 806315, 686763, 314519, 701498, 437432, 161937, 511563, 100381, 249203, 178918, 451995, 855278, 642453, 800840, 325494, 241361, 928905, 514342, 941725, 478005, 417744, 968708, 896389, 557731, 854157, 112091, 500299, 453001, 414482, 396377, 49188, 907650, 678697, 943232, 107698, 367137, 321946, 537037, 644761, 983255, 167446, 371574, 179133, 760711, 6302, 73557, 585429, 655243, 504645, 24281, 763362, 889603, 636201, 583472, 417012, 844845, 301841, 777922, 985478, 409689, 374096, 287527, 804006, 637940, 361153, 140730, 569098, 625713, 829784, 170181, 746549, 777421, 782300, 738582, 294540, 875638, 332572, 358695, 683560, 792129, 399198, 115135, 518036, 630037, 176892 };
    int[] cityY = { 694479, 422489, 725210, 275669, 780998, 506994, 648821, 204133, 285972, 69944, 422802, 582868, 118006, 36859, 186359, 889259, 236777, 137191, 808057, 128859, 760805, 870707, 573874, 581994, 885599, 551946, 550363, 744622, 617315, 665016, 199532, 294913, 432328, 653137, 765074, 282880, 418734, 849927, 459637, 388188, 736380, 871531, 426568, 341886, 791715, 256962, 703651, 762415, 644758, 420084, 194710, 729897, 341850, 907943, 317846, 945356, 961133, 154190, 461304, 463541, 51348, 32373, 991471, 582992, 603879, 743127, 674667, 480905, 669087, 569677, 543565, 118508, 702905, 434215, 287781, 922438, 214223, 244508, 222559, 416468, 753183, 543630, 86160, 515901, 216994, 130450, 592556, 299687, 981733, 982591, 579393, 962347, 841778, 741268, 227055, 745160, 183165, 136297, 472141, 701561, 392351, 308268, 812609, 442146, 573920, 879141, 196161, 705633, 439232, 319272, 558608, 963178, 394927, 600565, 916939, 478861, 897060, 924099, 73923, 401172, 892047, 956507, 793351, 354460, 111838, 615723, 310273, 42994, 795780, 140709, 824007, 336856, 438334, 474545, 871164, 143606, 550525, 792754, 614598 };
    double roadCost = 1.05539185275;
    double airportCost = 16197.4780539;
    assertEquals(2214920.917573066, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2214920.917573066);
  }

  @Test
  public void case73() {
    int[] cityX = { 704884, 323925, 394895, 48897, 314587, 184656, 711831, 538630, 761679, 321003, 704357, 694300, 439789, 588464, 712240, 755787, 624388, 885134, 772344, 612279, 568531, 994025, 257721, 338326, 113675, 249289, 310696, 928037, 450692, 553982, 129359, 55483, 905876, 275324, 709811, 818722, 688969, 828212, 232944, 837593, 504884, 472030, 67992, 243236, 845672, 765110, 771778, 884567, 985165, 670369, 185140, 666715, 994740, 479095, 254674, 800895, 129305, 331946 };
    int[] cityY = { 696196, 258090, 487036, 283146, 430431, 750923, 556851, 952046, 958155, 742295, 47458, 129730, 205474, 740360, 269810, 102085, 342562, 798630, 641049, 673070, 564582, 560531, 85890, 630096, 161994, 290974, 802968, 379723, 535600, 916618, 462020, 816513, 228738, 809732, 845447, 688, 532808, 824109, 814496, 148595, 6218, 808141, 823332, 45893, 95358, 43882, 7597, 749205, 318768, 425649, 373446, 924870, 975524, 795082, 150983, 336385, 236191, 67165 };
    double roadCost = 2.20143729478;
    double airportCost = 32604.3043604;
    assertEquals(1889808.980999173, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1889808.980999173);
  }

  @Test
  public void case74() {
    int[] cityX = { 627800, 766040, 653197, 812218, 56165, 215056, 732887, 971986, 52287, 88375, 463439, 422529, 481332, 640219, 778677, 592282, 847772, 67304, 698460, 963731, 690480, 667567, 710294, 299119, 707408, 504413, 869537, 36905, 732690, 347904, 582742, 185236, 441034, 15497, 558163, 107923, 172202, 609894, 488703, 783127, 316325, 388580, 213091, 353923, 226302, 940273, 607805, 677344, 200787, 802956, 782342, 544641, 356622, 644460, 98033, 366952, 624278, 781818, 756735, 47108, 943478, 88694, 891463, 487785, 643234, 545925, 159295, 628405, 979924, 941589, 373942, 704061, 537717 };
    int[] cityY = { 832259, 415904, 369795, 769640, 714509, 728696, 736978, 963594, 429199, 749045, 493916, 211705, 866486, 124939, 600532, 422562, 447863, 640341, 497528, 296049, 257178, 666941, 500282, 856080, 220491, 968750, 3153, 757721, 2261, 964155, 83358, 654557, 904586, 398824, 485896, 672967, 411091, 846066, 202038, 651415, 221860, 156513, 76962, 467058, 541241, 776941, 721259, 972028, 137779, 209249, 153858, 747142, 516701, 775734, 539169, 63698, 344332, 133929, 629876, 824131, 594602, 548018, 256080, 800382, 358810, 131618, 64223, 840821, 803856, 611639, 597907, 296260, 455607 };
    double roadCost = 1.81635814534;
    double airportCost = 83336.8350907;
    assertEquals(5577135.123050791, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 5577135.123050791);
  }

  @Test
  public void case75() {
    int[] cityX = { 872288, 712753, 440872, 944297, 316740, 61354, 975451, 385665, 119137, 104243, 73470, 936095, 326217, 810915, 683330, 311396, 478229, 65218, 406498, 589755, 234645, 584271, 63462, 324816, 614426, 482523, 794949, 358975, 97242, 677776, 974141, 305240, 216487, 154321, 72798, 2184, 599090, 352537, 309907, 264929, 705720, 709257, 89345, 146256, 595977, 239261, 417815, 874, 980174, 671732, 959931, 610990, 421213, 126339, 287565, 449836, 322699, 701084, 776464, 709980, 440505, 134960, 222820, 678186, 302635, 70979, 726834, 812804, 107682, 360836, 785216, 917839, 32122, 111094, 298253, 441700, 817661, 226732, 542028, 388958, 619100, 396968, 136788, 878311, 298070, 61189, 536864, 953959, 409781, 453012, 443587, 520672, 658371, 276210, 579104, 712816, 769893, 731855, 743205, 359868, 343985, 308816, 295122, 716819, 765540, 429116, 411944, 757507, 267551, 665043, 883738, 224696, 442376, 174744, 751545, 184001, 650415, 464081, 270270, 283728, 161121, 294948, 849610, 721020, 798211, 326530, 916876, 133030, 748217, 950837, 53551, 409847, 8896, 428921, 598638, 403256, 441055, 964545 };
    int[] cityY = { 566369, 575088, 967734, 685850, 654704, 667797, 664948, 799129, 76651, 242592, 810428, 4380, 335329, 246198, 164887, 418848, 754857, 56033, 828120, 468364, 430764, 662080, 888367, 532770, 348413, 480969, 461320, 342587, 241201, 706618, 241173, 934523, 246492, 410208, 363486, 944202, 484873, 338321, 198059, 903891, 863078, 565284, 723267, 806269, 768341, 988094, 736630, 470775, 768716, 148615, 303918, 959110, 396366, 447106, 585461, 511702, 195656, 511423, 36887, 542950, 784147, 141547, 356366, 402200, 982887, 774904, 499142, 813988, 733629, 675827, 246630, 837927, 526645, 654352, 716432, 695551, 426763, 848616, 617358, 210931, 335853, 642929, 89849, 93886, 608376, 858517, 381893, 705423, 659818, 564516, 698593, 102744, 663980, 719413, 2086, 117702, 187013, 912055, 863459, 648968, 265013, 561923, 938481, 626642, 70915, 639860, 783560, 584484, 79529, 496175, 455263, 712109, 512776, 794172, 335883, 47874, 7375, 861397, 796197, 874722, 347528, 489999, 472044, 617027, 748142, 929469, 428664, 121056, 712948, 179726, 526362, 428328, 263371, 937703, 689794, 703388, 664656, 908379 };
    double roadCost = 0.327166938827;
    double airportCost = 76839.9290677;
    assertEquals(2509085.805203859, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2509085.805203859);
  }

  @Test
  public void case76() {
    int[] cityX = { 970139, 825920, 853510, 373784, 926766, 146784, 255011, 520372, 391432, 93330, 410923, 692629, 587898, 468995, 907217, 415053, 223319, 934327, 315068, 172780, 198673, 283732, 957414, 427153, 244810, 897573, 448186, 761893, 599981, 860486, 219351, 768237, 421145, 731877, 790053, 688761, 621218, 253060, 548868, 128739, 943408, 699049, 871651, 158198, 245458, 218789, 263547, 961280, 979141, 256647, 274442, 460301, 413650, 351421, 273987, 857388, 960975, 922482, 433527, 209724, 809962, 30319, 502261, 416203, 871416, 587786, 55998, 546039, 844544, 227350, 121425, 531281, 523768, 847112, 46282, 581615, 419695, 939842, 42287, 188721, 465072, 186661, 726715, 372155, 263616, 223212, 913202, 761151, 42597, 419164, 576526, 487613, 458638, 690202, 170081, 841624, 430379, 270499, 816829, 934348, 451866, 749563, 771450, 476875, 268260, 242816, 612849, 31829, 863943, 331049, 499870, 325706, 279033, 381901, 900481, 303158, 955111, 254335, 300878, 407037, 335613, 890336, 631000, 494247, 958760, 229982, 412183, 233377, 333245, 737648, 586572, 517935, 763071, 339508, 281325, 205110 };
    int[] cityY = { 700017, 366, 256234, 540600, 126177, 277755, 785668, 666079, 834478, 138168, 819989, 226195, 849860, 305963, 813885, 338672, 706559, 403398, 117899, 984579, 938748, 685037, 158024, 286174, 251365, 993708, 687469, 872679, 829427, 508148, 28982, 232459, 75127, 445856, 759755, 118572, 919049, 359812, 193354, 907991, 928246, 342528, 38938, 260186, 700309, 873418, 365106, 199666, 851126, 324136, 722805, 423368, 981179, 955768, 426804, 182573, 857102, 221628, 546920, 515888, 211434, 384078, 299751, 882048, 379347, 165755, 102348, 452524, 857192, 335254, 59695, 659478, 9697, 65503, 310907, 102400, 470593, 415370, 867321, 401966, 326847, 135500, 516795, 186840, 829964, 950793, 647336, 165051, 321517, 974614, 286263, 151216, 713805, 65059, 900102, 360781, 925931, 781339, 860645, 243615, 621750, 479508, 633278, 686222, 630667, 694233, 763136, 302789, 22419, 325012, 716874, 264177, 488207, 541926, 773830, 411172, 893805, 567547, 252036, 378315, 826768, 653836, 363692, 310821, 700975, 373916, 77647, 791128, 800279, 955401, 568420, 599591, 295312, 80024, 550036, 306575 };
    double roadCost = 2.19273724536;
    double airportCost = 96125.0543048;
    assertEquals(11209202.989910834, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 11209202.989910834);
  }

  @Test
  public void case77() {
    int[] cityX = { 669972, 671571, 456114, 314053, 755181, 816144, 965445, 860402, 954463, 326396, 540077, 917977, 169868, 100077, 723845, 75881, 502920, 49322, 85175, 232121, 335890, 740552, 437732, 355927, 273434, 713988, 442147, 917927, 124859, 501458, 756843, 598495, 674430, 598383, 797509, 540569, 659475, 91645, 857774, 71972, 279474, 72696, 500281, 481924, 367476, 52527, 160019, 197065, 376726, 392745, 744612, 806663 };
    int[] cityY = { 692640, 689485, 116094, 860043, 677690, 632977, 607414, 995353, 50910, 564703, 546844, 141868, 756694, 481046, 886413, 598048, 411191, 86846, 182408, 201610, 918482, 648651, 260801, 939077, 919833, 12049, 613500, 221488, 548504, 717490, 285915, 398029, 255200, 578976, 607133, 856063, 937047, 963128, 384185, 356646, 135391, 754231, 551203, 880347, 808943, 737911, 584415, 77201, 101852, 309321, 551068, 998176 };
    double roadCost = 1.12681736705;
    double airportCost = 71166.0365476;
    assertEquals(3430183.6211403124, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3430183.6211403124);
  }

  @Test
  public void case78() {
    int[] cityX = { 264041, 890109, 886637, 649820, 393989, 198298, 184752, 709437, 111287, 234885, 753929, 349728, 215461, 129255, 880815, 820025, 974426, 226440, 745973, 248408, 443492, 421350, 772284, 331920, 701749, 291175, 976011, 692426, 229407, 313269, 627814, 7193, 377887, 3157, 290037, 798086, 602791, 913343, 859679, 172735, 33415, 870118, 494632, 706478, 111841, 586455, 575548, 375212, 143505, 137507, 90854, 134369, 152127, 430895, 337829, 804021, 152862, 371782, 449438, 176524, 31353, 545680, 725133, 469137, 589461, 381486, 3654, 87067, 646537, 418710, 54231, 323907, 957597, 502520, 392943, 646856, 376028, 967526, 219125, 75150, 953308, 945147, 244980, 726725, 84327, 686974, 887130, 203930, 703670, 488218, 772959, 390463, 31574, 530747, 135460, 882959, 991284, 363567, 283223, 846718, 792563, 15866, 580941, 521345, 837839, 440671, 771268, 245042, 921125, 828472, 84407, 760288, 951242, 5232, 731307, 807003, 269260, 306623, 688438, 650446, 924762, 884908, 811130, 954653, 913577, 992229, 32802 };
    int[] cityY = { 477204, 509890, 828987, 767202, 287588, 520909, 24836, 160741, 16443, 930076, 903665, 688949, 965862, 146415, 662905, 232970, 106875, 912640, 676420, 366671, 845421, 861132, 162465, 154425, 757704, 934081, 222454, 287750, 90281, 751265, 793118, 734696, 543890, 312670, 103317, 951124, 890039, 520757, 573743, 352255, 499572, 408643, 888949, 545499, 93072, 738295, 55226, 24850, 927007, 727640, 76332, 564483, 246367, 508752, 472077, 77653, 594242, 935681, 635140, 58292, 670618, 23627, 918488, 792150, 639468, 403972, 624630, 423326, 975891, 325098, 110346, 102108, 620307, 189712, 192020, 509686, 512549, 988335, 813641, 526243, 126422, 965170, 79879, 465414, 253476, 206149, 97252, 512409, 771904, 356282, 13039, 343744, 627975, 167342, 827679, 94868, 919026, 914739, 63278, 530923, 975649, 407500, 894554, 257226, 968440, 303637, 179461, 835525, 513084, 82100, 67764, 584303, 762927, 953383, 490162, 426518, 642159, 595063, 782939, 805778, 729966, 398560, 194373, 72557, 287200, 616974, 571458 };
    double roadCost = 1.80072196204;
    double airportCost = 41212.4133759;
    assertEquals(5077288.243840036, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 5077288.243840036);
  }

  @Test
  public void case79() {
    int[] cityX = { 283650, 592370, 298910, 239004, 941216, 405224, 963213, 959747, 939374, 44491, 865124, 589658, 466632, 504347, 782166, 857676, 993528, 900225, 128799, 524112, 32092, 262279, 966130, 349985, 4927, 360924, 559029, 837629, 395348, 259613, 174495, 791573, 978855, 793915, 576406, 947615, 686059, 202830, 925181, 720201, 508936, 801438, 949493, 244689, 392961, 105654, 23054, 867209, 3640, 713378, 748917, 804282, 243154, 312355, 525314, 326201, 696634, 640012, 824367, 491122, 736341, 228389, 292878, 5057, 744740, 428291, 605794, 81059, 741454, 472984, 461572, 856290, 265462, 773193, 335742, 483460, 511330, 619873, 411868, 233471, 306017, 282010, 614062, 706590, 774748, 671590, 777439, 58118, 86405, 663611, 425067, 924183, 526221, 50255, 895553, 640987, 154587, 256956, 85852, 528093, 282230, 342376, 655556, 56435, 257587, 621498, 381241, 590040, 677120, 779674, 665773, 794582, 487012, 581047, 63893, 432823, 961974, 215211, 727325, 510989, 820302, 961204, 778890, 683542, 883933, 931297, 849287, 435023, 3916, 202076, 505886, 627382, 430311, 917613, 746794, 3551, 866949, 688023 };
    int[] cityY = { 854352, 233785, 423619, 319956, 98943, 615446, 829941, 831012, 376569, 567984, 166334, 334148, 602269, 234109, 610246, 865137, 22384, 894919, 955618, 89219, 243313, 719611, 923307, 51428, 65048, 865743, 682339, 107358, 146952, 789673, 537601, 546609, 76884, 423873, 859803, 764214, 295406, 385081, 840192, 755100, 822040, 49436, 731579, 23780, 645074, 691481, 269923, 592442, 737290, 446910, 774814, 432030, 60930, 5129, 879292, 487547, 191697, 342662, 661858, 178035, 758444, 252839, 156186, 565220, 43408, 226281, 210637, 497369, 993218, 861215, 924902, 101315, 165217, 923534, 364445, 434953, 790739, 965225, 278324, 279346, 192387, 394802, 593077, 686834, 366757, 922521, 678559, 693384, 568902, 513879, 537386, 234410, 39466, 556171, 477323, 483929, 861486, 366677, 145233, 303184, 644830, 674131, 702519, 412809, 76713, 982393, 214357, 48481, 301149, 497893, 422767, 147018, 216915, 786537, 23246, 185417, 324447, 219927, 586570, 489525, 930842, 414583, 38278, 856597, 225329, 636615, 990070, 315888, 625986, 334370, 736568, 101169, 984162, 744003, 704048, 397263, 439929, 431951 };
    double roadCost = 0.389137648225;
    double airportCost = 68631.9050644;
    assertEquals(3187955.5948772053, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3187955.5948772053);
  }

  @Test
  public void case80() {
    int[] cityX = { 319479, 166174, 8351, 25930, 307362, 853451, 72074, 126264, 701022, 232705, 929572, 250642, 573888, 64355, 72011, 105814, 540836, 320845, 36518, 675095, 691305, 645728, 558633, 701327, 846679, 958759, 409842, 847534, 29605, 909306, 578935, 747335, 61916, 207266, 579753, 705862, 867010, 983389, 529477, 307809, 705551, 387780, 76312, 52087, 779547, 427798, 311433, 606940, 958546, 609710, 803097, 396952, 293888, 685683, 943169, 830013, 615401, 39640, 457191 };
    int[] cityY = { 233236, 1369, 368969, 406894, 580194, 852888, 95754, 846653, 32318, 735811, 859277, 371612, 598955, 939810, 684246, 682273, 299852, 29381, 601556, 572451, 561268, 805741, 151805, 540276, 121318, 101673, 261065, 824755, 556976, 693645, 468606, 156087, 400448, 189146, 155383, 448661, 419397, 865752, 682382, 114889, 840480, 230134, 939900, 329986, 706743, 785180, 277981, 436968, 47484, 825634, 637627, 970476, 22148, 890498, 14536, 155780, 71360, 199661, 510897 };
    double roadCost = 2.64136933794;
    double airportCost = 23480.5679459;
    assertEquals(1385353.5088081, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1385353.5088081);
  }

  @Test
  public void case81() {
    int[] cityX = { 787426, 786933, 931373, 323803, 33073, 62291, 828972, 817298, 671834, 591788, 825321, 148732, 772149, 488402, 336743, 619881, 337551, 771469, 357797, 56605, 857608, 728584, 840567, 123627, 742287, 145437, 132159, 833962, 671821, 517025, 961805, 405675, 128588, 921460, 757651, 508449, 174484, 91672, 624415, 496096, 834833, 5918, 190503, 400186, 895773, 393586, 789476, 41798, 724211, 941091, 781404, 141564, 852160, 971690, 837715, 679702, 305876, 48392, 953559, 155007, 166461, 739020, 42228, 338396, 436424, 799942, 971933, 628783, 993826, 16201, 106354, 105011, 973803, 146917, 368237, 975367, 282537, 714992, 427332, 591750, 847222, 852821, 483474, 74302, 363916, 810052, 862782, 118474, 269028, 579278, 838440, 888463, 592115, 646337, 299012, 314344, 467137, 124389, 446529, 646458, 116059, 390119, 506114, 89426, 878212, 783846, 966213, 402902, 894365, 664472, 691495, 321639, 413749, 735845, 332009, 523902, 111359, 930124, 580004, 143615, 284923 };
    int[] cityY = { 65975, 73970, 207127, 13516, 225578, 991244, 53186, 940536, 828564, 365036, 300417, 201490, 777104, 312309, 614160, 410187, 564491, 511653, 714875, 990992, 304175, 968845, 11851, 612727, 668283, 145853, 456955, 118445, 198452, 853404, 407174, 130380, 795789, 919337, 112814, 612139, 591797, 383189, 851785, 72886, 927552, 287303, 583877, 674086, 684062, 784655, 598693, 655563, 226859, 61750, 214132, 836431, 617115, 949465, 43927, 254029, 657630, 783524, 772442, 629261, 10658, 586479, 181400, 814955, 973064, 813656, 747761, 859529, 739695, 346512, 501770, 478800, 971241, 750650, 845076, 203876, 487042, 475081, 371645, 338686, 171689, 212694, 427245, 834928, 567615, 803160, 671700, 716489, 843841, 615384, 832532, 592305, 637720, 385874, 203277, 955186, 941949, 862483, 823643, 480863, 311685, 952831, 603490, 861198, 913916, 652245, 848839, 767477, 680484, 332412, 719843, 822930, 864401, 941827, 269965, 761080, 643191, 902299, 662151, 412402, 252131 };
    double roadCost = 2.2171789038;
    double airportCost = 27753.1751241;
    assertEquals(3297848.5417108955, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3297848.5417108955);
  }

  @Test
  public void case82() {
    int[] cityX = { 558337, 133870, 750946, 887648, 72947, 885545, 288450, 746096, 892677, 638177, 61697, 244345, 440367, 563185, 53432, 198380, 984358, 367699, 255809, 537776, 745358, 237728, 361773, 315120, 217321, 761706, 806255, 83830, 887991, 895561, 212516, 892671, 443748, 651678, 25465, 505937, 140394, 251164, 477532, 210618, 743778, 499798, 182712, 659251, 405109, 868539, 429823, 866118, 355649, 828381, 367412, 10435, 599444, 456646, 806315, 686763, 314519, 701498, 437432, 161937, 511563, 100381, 249203, 178918, 451995, 855278, 642453, 800840, 325494, 241361, 928905, 514342, 941725, 478005, 417744, 968708, 896389, 557731, 854157, 112091, 500299, 453001, 414482, 396377, 49188, 907650, 678697, 943232, 107698, 367137, 321946, 537037, 644761, 983255, 167446, 371574, 179133, 760711, 6302, 73557, 585429, 655243, 504645, 24281, 763362, 889603, 636201, 583472, 417012, 844845, 301841, 777922, 985478, 409689, 374096, 287527, 804006, 637940, 361153, 140730, 569098, 625713, 829784, 170181, 746549, 777421, 782300, 738582, 294540, 875638, 332572, 358695, 683560, 792129, 399198, 115135, 518036, 630037, 176892 };
    int[] cityY = { 694479, 422489, 725210, 275669, 780998, 506994, 648821, 204133, 285972, 69944, 422802, 582868, 118006, 36859, 186359, 889259, 236777, 137191, 808057, 128859, 760805, 870707, 573874, 581994, 885599, 551946, 550363, 744622, 617315, 665016, 199532, 294913, 432328, 653137, 765074, 282880, 418734, 849927, 459637, 388188, 736380, 871531, 426568, 341886, 791715, 256962, 703651, 762415, 644758, 420084, 194710, 729897, 341850, 907943, 317846, 945356, 961133, 154190, 461304, 463541, 51348, 32373, 991471, 582992, 603879, 743127, 674667, 480905, 669087, 569677, 543565, 118508, 702905, 434215, 287781, 922438, 214223, 244508, 222559, 416468, 753183, 543630, 86160, 515901, 216994, 130450, 592556, 299687, 981733, 982591, 579393, 962347, 841778, 741268, 227055, 745160, 183165, 136297, 472141, 701561, 392351, 308268, 812609, 442146, 573920, 879141, 196161, 705633, 439232, 319272, 558608, 963178, 394927, 600565, 916939, 478861, 897060, 924099, 73923, 401172, 892047, 956507, 793351, 354460, 111838, 615723, 310273, 42994, 795780, 140709, 824007, 336856, 438334, 474545, 871164, 143606, 550525, 792754, 614598 };
    double roadCost = 1.05539185275;
    double airportCost = 16197.4780539;
    assertEquals(2214920.917573066, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2214920.917573066);
  }

  @Test
  public void case83() {
    int[] cityX = { 704884, 323925, 394895, 48897, 314587, 184656, 711831, 538630, 761679, 321003, 704357, 694300, 439789, 588464, 712240, 755787, 624388, 885134, 772344, 612279, 568531, 994025, 257721, 338326, 113675, 249289, 310696, 928037, 450692, 553982, 129359, 55483, 905876, 275324, 709811, 818722, 688969, 828212, 232944, 837593, 504884, 472030, 67992, 243236, 845672, 765110, 771778, 884567, 985165, 670369, 185140, 666715, 994740, 479095, 254674, 800895, 129305, 331946 };
    int[] cityY = { 696196, 258090, 487036, 283146, 430431, 750923, 556851, 952046, 958155, 742295, 47458, 129730, 205474, 740360, 269810, 102085, 342562, 798630, 641049, 673070, 564582, 560531, 85890, 630096, 161994, 290974, 802968, 379723, 535600, 916618, 462020, 816513, 228738, 809732, 845447, 688, 532808, 824109, 814496, 148595, 6218, 808141, 823332, 45893, 95358, 43882, 7597, 749205, 318768, 425649, 373446, 924870, 975524, 795082, 150983, 336385, 236191, 67165 };
    double roadCost = 2.20143729478;
    double airportCost = 32604.3043604;
    assertEquals(1889808.980999173, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1889808.980999173);
  }

  @Test
  public void case84() {
    int[] cityX = { 627800, 766040, 653197, 812218, 56165, 215056, 732887, 971986, 52287, 88375, 463439, 422529, 481332, 640219, 778677, 592282, 847772, 67304, 698460, 963731, 690480, 667567, 710294, 299119, 707408, 504413, 869537, 36905, 732690, 347904, 582742, 185236, 441034, 15497, 558163, 107923, 172202, 609894, 488703, 783127, 316325, 388580, 213091, 353923, 226302, 940273, 607805, 677344, 200787, 802956, 782342, 544641, 356622, 644460, 98033, 366952, 624278, 781818, 756735, 47108, 943478, 88694, 891463, 487785, 643234, 545925, 159295, 628405, 979924, 941589, 373942, 704061, 537717 };
    int[] cityY = { 832259, 415904, 369795, 769640, 714509, 728696, 736978, 963594, 429199, 749045, 493916, 211705, 866486, 124939, 600532, 422562, 447863, 640341, 497528, 296049, 257178, 666941, 500282, 856080, 220491, 968750, 3153, 757721, 2261, 964155, 83358, 654557, 904586, 398824, 485896, 672967, 411091, 846066, 202038, 651415, 221860, 156513, 76962, 467058, 541241, 776941, 721259, 972028, 137779, 209249, 153858, 747142, 516701, 775734, 539169, 63698, 344332, 133929, 629876, 824131, 594602, 548018, 256080, 800382, 358810, 131618, 64223, 840821, 803856, 611639, 597907, 296260, 455607 };
    double roadCost = 1.81635814534;
    double airportCost = 83336.8350907;
    assertEquals(5577135.123050791, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 5577135.123050791);
  }

  @Test
  public void case85() {
    int[] cityX = { 124825, 540712, 932617, 122435, 40841, 66100, 300083, 394368, 253244, 774806, 408090, 330487, 64470, 95017, 136785, 346012, 149119, 923122, 501981, 887066, 663609, 479305, 587801, 976765, 78191, 140365, 779128, 230521, 12161, 62176, 13900, 253634, 120769, 309889, 883175, 392321, 204889, 133630, 318485, 830359, 446771, 982717, 47707, 711511, 678928, 46710, 59091, 959996, 310695, 703995, 610345, 64590, 273860 };
    int[] cityY = { 414861, 880222, 161039, 383473, 685769, 399591, 575079, 135456, 421828, 939307, 534903, 833537, 687692, 172625, 721533, 515822, 107989, 168830, 45306, 200429, 813347, 585917, 554052, 656974, 195717, 601585, 982334, 794135, 910645, 704423, 73201, 404520, 439573, 634280, 352611, 422260, 700770, 946000, 577998, 328839, 94203, 119346, 825009, 639157, 208332, 260731, 438646, 690320, 216376, 856053, 964968, 942316, 77833 };
    double roadCost = 2.31529381518;
    double airportCost = 637.94476399;
    assertEquals(33811.07249147, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 33811.07249147);
  }

  @Test
  public void case86() {
    int[] cityX = { 949365, 632271, 668493, 901486, 882245, 254976, 917726, 596125, 690978, 767814, 319185, 313331, 595374, 135073, 239884, 860360, 472421, 273288, 147155, 411599, 300878, 450698, 805773, 447564, 247271, 94764, 200670, 794256, 231568, 11631, 491312, 982926, 723905, 2503, 357180, 859925, 486439, 242860, 158506, 921979, 510083, 124379, 671968, 75594, 24040, 741596, 52930, 577862, 532499, 89943, 670866, 449482, 863624, 893977, 379780, 675316, 223445, 127089, 644374, 752496, 543285, 988446, 501826, 794767, 323605, 4862, 62501, 71140, 86233, 223285, 44024, 969155, 735813, 982725, 896860, 509171, 742005, 38573, 453250, 977031, 121693, 433575, 610143, 153097, 574766, 742638, 3806, 663736, 37044, 746860, 482983, 840525, 170692, 938393, 436630, 219879, 165846, 488196, 14798, 305059, 936581, 69827, 867062, 367566, 151226, 662144, 104216, 37199, 738953, 74431, 40967, 641942, 62929, 643892, 453997, 811680, 383584, 93842, 887914, 713610, 470466, 36581, 295925, 872591, 699293, 420349, 430380, 809812, 836169, 917948, 851748, 362481, 445910, 639903, 994246, 224315, 317120, 594772, 988429, 904326, 293328, 987227, 243869, 700530, 705332, 465460, 764152, 22591, 116981, 991785 };
    int[] cityY = { 336319, 144842, 924691, 783056, 285010, 68647, 847648, 129108, 273640, 674745, 934007, 892844, 584618, 692226, 606843, 503252, 802601, 246815, 547709, 545874, 21613, 750324, 613799, 586207, 370657, 487187, 829159, 87194, 163342, 417273, 68845, 381132, 870297, 951170, 926086, 786880, 10512, 65699, 213866, 426443, 449351, 182142, 151570, 427606, 13585, 766958, 464658, 936543, 128565, 400760, 259311, 172147, 617341, 8850, 924988, 93723, 942162, 20006, 864692, 924884, 161730, 392100, 620775, 923025, 102988, 290924, 93769, 439708, 845998, 896470, 480718, 629159, 650096, 472241, 135135, 873275, 554943, 290815, 385207, 217419, 447285, 760153, 392617, 536218, 273635, 46274, 447175, 568501, 992647, 955286, 577006, 913495, 126983, 284004, 161042, 659123, 408995, 2729, 962715, 291272, 993571, 781600, 219680, 204906, 720981, 832219, 929277, 741851, 572412, 57408, 24835, 392372, 447016, 332022, 238940, 739523, 153409, 894740, 853502, 34173, 108109, 989030, 107705, 460423, 135734, 438512, 42243, 265917, 879678, 176274, 183797, 503442, 787900, 896352, 2156, 962016, 727846, 761012, 98510, 995874, 711061, 787196, 941019, 17037, 58288, 124049, 300654, 634517, 105689, 779320 };
    double roadCost = 1.48707502899;
    double airportCost = 342.090745527;
    assertEquals(51313.61182905, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 51313.61182905);
  }

  @Test
  public void case87() {
    int[] cityX = { 35280, 691446, 626144, 304062, 112103, 796235, 294015, 9250, 86494, 683729, 28377, 269494, 800166, 821994, 303843, 712356, 267376, 413349, 919451, 400459, 814015, 272997, 21151, 512185, 4546, 624276, 383092, 98071, 394824, 850997, 516623, 889733, 343424, 67798, 720091, 399352, 905089, 499887, 805212, 505250, 425572, 368662, 309169, 474325, 984050, 38762, 72535, 876555, 847508, 43916, 8388, 117882, 270714, 533065, 564759, 90102, 478175, 6618, 624915, 64715, 903595, 459585, 351238, 106905, 987444, 475766, 226677, 738309, 407601, 720852, 64884, 965144, 937057, 221814, 560612, 832246, 619207, 435988, 263464, 741641, 496732, 185845, 324643 };
    int[] cityY = { 186628, 827999, 855169, 215607, 160665, 359759, 906783, 675147, 468032, 463377, 120929, 255097, 738, 323636, 860531, 211878, 135093, 148627, 638142, 578610, 850969, 964856, 795165, 436272, 161444, 810878, 78568, 877020, 656883, 145604, 39751, 59031, 320544, 701243, 964688, 967370, 402667, 805403, 558659, 603280, 964370, 319757, 439374, 286451, 505786, 707608, 20435, 338312, 574899, 149017, 522365, 25279, 701552, 356300, 409497, 376160, 625842, 70335, 806438, 594174, 414141, 373267, 529422, 412606, 355278, 120070, 635000, 360132, 160121, 552927, 92359, 714858, 99774, 417877, 544034, 381065, 90148, 169764, 335326, 469491, 594250, 532554, 377614 };
    double roadCost = 1.24889614351;
    double airportCost = 361.061803058;
    assertEquals(29968.129653814, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 29968.129653814);
  }

  @Test
  public void case88() {
    int[] cityX = { 708032, 809180, 667162, 61501, 248254, 431433, 242180, 425969, 686917, 295209, 263072, 216110, 101766, 366483, 352599, 239686, 740281, 619433, 272196, 424514, 381629, 376828, 997498, 50039, 826669, 608804, 135893, 882862, 144862, 235719, 2120, 78446, 956108, 622824, 717548, 366577, 415115, 478488, 966770, 234806, 814942, 55487, 922445, 180532, 632269, 251675, 339778, 422215, 566359, 426532, 655673, 542903, 894319, 347749, 608345, 361862, 636841, 265789, 927593, 761669, 917406, 826153, 238900, 992748, 934306, 374399, 83061 };
    int[] cityY = { 320865, 995892, 290837, 334183, 34922, 821112, 399804, 77467, 206647, 566429, 652676, 642856, 897766, 614998, 277156, 293053, 703053, 383182, 664688, 504967, 974022, 148578, 962785, 207137, 15723, 766616, 560279, 821198, 926990, 304541, 358193, 150682, 73454, 803168, 185104, 60464, 329193, 11439, 948865, 845534, 751807, 775362, 412435, 262405, 145654, 265284, 117311, 541761, 960755, 276527, 799402, 525416, 468933, 238369, 556737, 222791, 449301, 808873, 915758, 638532, 670212, 478002, 269413, 929588, 590905, 780482, 685473 };
    double roadCost = 2.76314986264;
    double airportCost = 605.829973325;
    assertEquals(40590.608212775, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 40590.608212775);
  }

  @Test
  public void case89() {
    int[] cityX = { 540447, 683487, 667716, 695164, 989579, 135345, 642679, 753177, 865114, 310091, 620824, 209981, 287962, 233383, 306228, 847371, 765734, 735165, 586038, 849263, 858187, 45369, 151464, 726093, 503572, 941031, 698051, 808558, 353519, 944478, 637368, 291835, 134803, 657907, 436717, 166677, 736277, 854055, 940632, 623405, 887902, 191725, 551186, 740999, 667626, 779824, 259814, 686896, 373161, 756521, 397966, 895631, 111061, 384239, 441223, 526612, 516291, 164924, 797624, 31098, 793576, 290843, 35597, 332261, 909167, 101859, 850406, 939669, 938824, 171461, 970844, 812097, 111337, 63336, 70939, 735939, 251933, 996400, 251412, 383048, 529177, 972044, 412699, 290230, 602254, 563784, 288618, 858910, 234367, 2760, 774777, 851268, 774496, 884237, 805748, 527832, 373909, 309922, 393746, 397339, 416548, 883880, 605048, 785334, 699363, 195446, 947271, 178766, 599650, 657575, 786967, 463559, 45741, 980974, 733063, 253141, 331749, 765851, 1172, 853206, 625189, 857918, 732474, 966324, 962777, 369702, 515428 };
    int[] cityY = { 699156, 583995, 923278, 739049, 467300, 528389, 390557, 812586, 484842, 909766, 745082, 685055, 534902, 527083, 493484, 398746, 817940, 304181, 138052, 952584, 694723, 790551, 625978, 570548, 586242, 285456, 426113, 536805, 203551, 494364, 151248, 327595, 241765, 788048, 269739, 552444, 446849, 662735, 410253, 791740, 451131, 905227, 2218, 90560, 905945, 163705, 887850, 108691, 504147, 445024, 481582, 245501, 898885, 182047, 505155, 16237, 974666, 364287, 936756, 789436, 792337, 293210, 977751, 319084, 387187, 628900, 147872, 543326, 714167, 967454, 348415, 941150, 247462, 670174, 316138, 845260, 618605, 84298, 58981, 995244, 725918, 404870, 508604, 743442, 831243, 724097, 670008, 746849, 217774, 499132, 561358, 550343, 573530, 399279, 8012, 38451, 570758, 658595, 430823, 166212, 498107, 225562, 491803, 645935, 321252, 524614, 69613, 921252, 268982, 280901, 676219, 611007, 278390, 535505, 778793, 178074, 2407, 594312, 563618, 116960, 231729, 120042, 845189, 98530, 220072, 660702, 989129 };
    double roadCost = 2.76234596627;
    double airportCost = 816.473540327;
    assertEquals(103692.139621529, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 103692.139621529);
  }

  @Test
  public void case90() {
    int[] cityX = { 219162, 216583, 521828, 325779, 833328, 916301, 668865, 519279, 394539, 385516, 801878, 445380, 701867, 568204, 358247, 836456, 519739, 543381, 839921, 772269, 784120, 371142, 75905, 5443, 451798, 660386, 882850, 890223, 544579, 65319, 874956, 281756, 628281, 357675, 511771, 504252, 972256, 400645, 368210, 814934, 285509, 482623, 267711, 957274, 212607, 994370, 376535, 759671, 680249, 906230, 796555, 931564, 656246, 351793, 684982, 284349, 229684, 685509, 380924, 859916, 874094, 308589, 450162, 77540, 37661 };
    int[] cityY = { 193207, 652399, 400139, 99495, 428180, 737876, 755501, 242353, 441365, 740189, 934631, 711132, 195438, 305962, 289789, 175564, 548099, 688122, 670910, 620705, 814601, 422963, 180033, 578433, 820276, 400628, 567466, 572564, 637, 766685, 82132, 245580, 974934, 35480, 731830, 287218, 510756, 928081, 992115, 766862, 854378, 907922, 441387, 155837, 402270, 384848, 934062, 811603, 89509, 494104, 990438, 111285, 769789, 432369, 165321, 642877, 997435, 928188, 872441, 607378, 951786, 420700, 953323, 210124, 746972 };
    double roadCost = 1.37854913621;
    double airportCost = 977.719679321;
    assertEquals(63551.779155865, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 63551.779155865);
  }

  @Test
  public void case91() {
    int[] cityX = { 88284, 704938, 972205, 806323, 861596, 656085, 506528, 725596, 869342, 303787, 432171, 316956, 332630, 306661, 783098, 232771, 488588, 916058, 565070, 788593, 682678, 67302, 882683, 550256, 994116, 250091, 256446, 176967, 406501, 371308, 291170, 668099, 80397, 283444, 733461, 582616, 105227, 495663, 114821, 137917, 291487, 532830, 213081, 148926, 693181, 176360, 572873, 357700, 318893, 261924, 791290, 397590, 416023, 210358, 328301, 999290, 5190, 186753, 516180, 810664, 44611, 159526, 977928, 432828, 101999, 778317, 314644, 161300, 897821, 385804, 978474, 69848, 402672, 722847, 348096, 539624, 2419, 780806, 632908, 920760, 536175, 765719, 29454, 349126, 298602, 206907, 538444, 664098, 407636, 167968, 939208, 864732, 700492, 386847, 395712, 557885, 227353, 887865, 327252, 365611, 35162, 460408, 737803, 723477, 95054, 50652, 911940, 961132, 149014, 483702, 205675, 564912, 387516, 912116, 51537, 406729, 676281, 515559, 657465, 387062, 354926, 533096, 112660, 253165, 853636, 62472, 819709, 197377, 955005, 404179, 273598, 41507, 983820, 962441, 141407, 865584, 220090, 885380, 425006, 398536, 474812, 210317, 462690, 355774, 734865 };
    int[] cityY = { 717757, 158010, 468640, 744719, 376910, 434632, 179464, 426446, 438857, 738083, 490044, 498926, 775687, 170727, 37573, 160706, 69381, 303021, 46373, 712015, 272177, 236964, 285365, 224562, 239047, 915944, 278640, 662390, 539427, 673571, 983110, 903385, 726713, 183747, 794475, 62673, 904112, 469314, 696035, 513647, 115864, 398042, 757984, 503571, 695409, 121088, 199566, 24453, 638345, 691075, 893662, 746535, 914144, 325582, 659425, 141393, 757355, 891837, 580929, 157035, 72044, 202575, 801804, 501157, 393325, 237190, 541889, 297984, 878440, 225712, 791512, 689409, 486679, 556277, 673518, 882049, 323083, 127858, 30139, 476689, 387035, 664128, 594403, 931735, 153023, 41987, 352955, 544182, 216798, 72400, 621066, 261851, 179978, 648340, 275209, 273827, 310415, 105231, 372026, 223975, 967026, 645686, 792993, 139036, 320619, 351267, 636312, 924788, 402534, 364871, 646962, 715865, 388167, 355850, 944913, 165693, 685613, 181288, 758094, 376822, 492141, 325976, 333977, 689001, 778640, 61291, 179996, 760141, 494142, 49977, 927062, 826036, 599638, 629984, 735540, 437286, 869417, 758503, 420359, 550177, 92849, 262722, 939948, 367465, 544405 };
    double roadCost = 0.57485114029;
    double airportCost = 854.457792023;
    assertEquals(123896.379843335, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 123896.379843335);
  }

  @Test
  public void case92() {
    int[] cityX = { 540432, 64914, 544567, 881844, 998213, 185819, 702059, 225007, 912614, 984760, 280950, 949800, 475053, 334146, 751810, 93200, 498881, 196977, 515337, 961932, 483262, 197347, 992243, 487652, 338049, 215021, 535863, 230916, 679269, 42267, 91941, 834520, 776469, 507657, 328396, 741777, 98336, 563581, 791206, 752433, 94912, 354514, 299126, 110333, 617282, 834099, 5560, 823339, 451281, 37666, 805291, 898991, 717655, 743574, 481451, 996454, 205087, 849944, 758161, 848402, 570820, 60976, 635970, 949788, 927777, 207906, 673100, 505661, 191225, 422388, 226563, 535772, 171910, 855625, 508785, 53664, 555431, 915109, 542433, 4158, 942132, 694459, 614630, 973244, 122614, 912687, 361704, 912859, 798235, 490906, 178193, 527626, 85181 };
    int[] cityY = { 373097, 478028, 254376, 91574, 635595, 581253, 897329, 701429, 735469, 688128, 356106, 270297, 936464, 761361, 376796, 80287, 697705, 64584, 605927, 467445, 790943, 353826, 804807, 73886, 236885, 240712, 822020, 106157, 527928, 996542, 405183, 821004, 456765, 341817, 69039, 955271, 883254, 474459, 377636, 602811, 412640, 230505, 966150, 156193, 722704, 449660, 303545, 625081, 640104, 371369, 658443, 489643, 58554, 903975, 363299, 455237, 986557, 770166, 570912, 681518, 854864, 946548, 563498, 178192, 471859, 932307, 592550, 842809, 172011, 780255, 345205, 214220, 254209, 203735, 718961, 857460, 191744, 706844, 605721, 617899, 562918, 935012, 858190, 410533, 331375, 948246, 261838, 585541, 10140, 466533, 529584, 319766, 733690 };
    double roadCost = 1.53577608869;
    double airportCost = 856.57060799;
    assertEquals(79661.06654307, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 79661.06654307);
  }

  @Test
  public void case93() {
    int[] cityX = { 566265, 404415, 883941, 275750, 248707, 938069, 841753, 283965, 788821, 923710, 280870, 888028, 638582, 602763, 868067, 852306, 814223, 744058, 997724, 223015, 347251, 651363, 97739, 292910, 492902, 650535, 947934, 399003, 440963, 152959, 877986, 297655, 325165, 47995, 723737, 62979, 684477, 682300, 72779, 205956, 4410, 314116, 329429, 81084, 759854, 691331, 241935, 469522, 733219, 822182, 827759, 818326, 509870, 185351 };
    int[] cityY = { 996246, 58588, 340731, 796999, 594221, 945130, 905295, 82242, 977124, 62418, 831077, 742827, 929999, 470052, 261376, 663508, 246799, 442773, 814301, 400928, 873316, 937920, 454585, 564014, 472529, 378832, 187807, 138939, 453126, 177878, 729148, 997637, 478792, 344758, 197319, 389877, 518216, 918598, 187923, 298104, 435156, 43550, 641866, 277899, 786318, 418898, 312411, 388815, 887949, 938768, 326541, 34602, 451114, 286877 };
    double roadCost = 1.64526802703;
    double airportCost = 840.223851319;
    assertEquals(45372.087971226, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 45372.087971226);
  }

  @Test
  public void case94() {
    int[] cityX = { 414486, 511635, 783040, 185256, 100544, 256137, 938191, 741337, 103619, 405958, 369703, 19727, 253135, 554481, 208596, 170037, 901573, 759168, 331086, 756706, 495713, 901623, 49581, 798112, 3483, 157739, 839381, 851478, 450407, 527193, 722726, 861587, 238420, 359774, 639556, 797590, 125852, 772333, 536493, 392632, 616415, 198826, 349215, 603310, 319752, 27159, 920982, 220544, 421797, 517648, 2000, 838402, 500353, 886766, 643397, 894135, 722202, 263579, 601794, 248923, 583904, 442589, 661864, 170553, 584568, 162288, 977997, 646755, 562086, 109027, 244727, 566580, 775796, 268984, 40347, 16934, 938924, 553594, 529888, 992615, 790901, 321447, 531740, 78508, 793213, 275914, 276624, 779752, 856035, 692637, 229419, 388731, 651565, 132637, 81018, 754238, 993869, 880503, 656223, 860684, 388370, 458525, 947174, 831818, 109051, 331230, 215427, 812508, 985641, 756309, 920120, 730534, 845631, 294258, 505230, 507950, 979653, 295563, 484049, 113727, 830182, 245452, 843003 };
    int[] cityY = { 916134, 453938, 373950, 155580, 879109, 386964, 683121, 753660, 10991, 81226, 617706, 321062, 6529, 386728, 59894, 74810, 428884, 151039, 951401, 397762, 933273, 621996, 416107, 47554, 66066, 840359, 571034, 250846, 928368, 607878, 755226, 14736, 372651, 100362, 309577, 996911, 406897, 23603, 911676, 233815, 510230, 550398, 304410, 561218, 494975, 904215, 177782, 271592, 120340, 582751, 232933, 686737, 332086, 292996, 200556, 727043, 281101, 768534, 738540, 100616, 430308, 98666, 344389, 287964, 876304, 246544, 537996, 420084, 856562, 569105, 59472, 821719, 172955, 35911, 261527, 669076, 637239, 964472, 102696, 416181, 626909, 561747, 165251, 454048, 584062, 831273, 330127, 37769, 414858, 217972, 10577, 923402, 909089, 494743, 856433, 730054, 811296, 911167, 75959, 64717, 149775, 307465, 847907, 755142, 17059, 912702, 775327, 122957, 234832, 760496, 588089, 696511, 748158, 998628, 465187, 655514, 117306, 185783, 551073, 188891, 644947, 216350, 883974 };
    double roadCost = 0.987899930584;
    double airportCost = 145.255888804;
    assertEquals(17866.474322891998, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 17866.474322891998);
  }

  @Test
  public void case95() {
    int[] cityX = { 599310, 149514, 726526, 897686, 733503, 442184, 711939, 867767, 887037, 222897, 885626, 384895, 487651, 868178, 422657, 419684, 706138, 285987, 716193, 267776, 295831, 225941, 90252, 531201, 455253, 106136, 371179, 252645, 709452, 714534, 804772, 840883, 660074, 545267, 474105, 486740, 636422, 500439, 689001, 180126, 636153, 462309, 199585, 469256, 256649, 60605, 115294, 522606, 636762, 583328, 358413, 77805, 557531, 663731, 845954, 235663, 491444, 634290, 279836, 654825, 760354, 984471, 173556, 403258, 942567, 633132, 202149, 352354, 274709, 225288, 998420, 854738, 982189, 297904, 130787, 904583, 651272, 111987, 696190, 888106, 905327, 357999, 121092, 26339, 988087, 497851, 304622, 99439, 483882, 999014, 305802, 849148, 14967, 585911, 695792, 372801, 545405, 695912, 873727, 432018, 949447, 959366, 218794, 378722, 776964, 785709, 1798, 284829, 280736, 602435, 892100, 91580, 500081, 22939, 603623, 414267, 217144, 687792, 566272, 329810, 804441, 115176, 649504, 671152 };
    int[] cityY = { 521432, 556766, 913834, 142430, 822171, 674657, 71778, 837675, 404459, 296599, 582307, 610669, 450051, 891450, 98251, 364303, 615527, 114265, 763244, 332400, 180579, 187414, 437532, 17812, 524953, 719580, 771833, 913434, 536169, 33231, 877660, 96854, 770698, 301281, 547053, 573536, 980737, 876293, 911694, 541205, 795419, 895469, 627061, 340706, 37309, 992670, 792229, 823584, 551931, 182628, 924910, 265506, 529782, 250061, 320091, 697782, 955734, 977412, 374351, 718631, 719480, 135430, 912889, 879558, 546409, 999753, 359426, 49133, 929336, 630909, 464581, 741671, 324715, 935440, 123926, 322996, 236890, 920907, 838276, 800915, 4627, 128334, 965353, 225756, 432565, 902047, 753471, 288126, 618721, 19560, 407173, 341544, 659998, 501374, 827516, 286575, 130089, 529742, 672756, 706879, 137385, 840319, 250400, 614907, 131257, 415127, 790538, 859043, 916314, 25251, 500941, 977046, 781350, 224074, 998247, 957909, 393202, 940316, 111906, 556512, 814869, 858294, 515667, 385880 };
    double roadCost = 0.0;
    double airportCost = 0.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case96() {
    int[] cityX = { 130082, 583667, 861659, 533111, 162605, 964949, 819465, 896802, 602720, 61436, 51751, 281632, 151023, 185022, 323462, 728612, 730375, 629628, 331397, 901958, 177765, 253810, 712139, 14341, 40662, 879173, 471269, 217138, 425477, 87778, 844799, 194294, 159918, 581763, 304580, 350003, 254056, 365942, 303845, 499761, 192130, 418906, 897236, 571767, 380430, 385781, 405547, 249256, 111292, 203520, 284714, 518421, 960337, 820759, 925168, 569821, 934069, 452743, 748662, 714939, 993637, 553044, 949911, 371891, 881424, 940508, 497794, 110152, 214133, 536663, 50821, 33163, 667466, 124651, 805465, 619249, 430496, 396420, 231932, 372519, 401841, 441843, 901489, 270839, 8417, 537445, 452130, 64481, 573193, 865211, 937748, 167423, 252244, 629286, 925755, 974211, 747254, 57705, 914054, 758868, 117235, 117832, 879250, 452730, 548449, 402319, 929852, 920958, 973011, 43679, 817707, 200757, 503597, 911129, 538272, 587151, 141350, 988901, 37899, 831764, 128174, 83585, 674376, 198581, 512347, 970382, 309387, 241668, 979049, 877895, 39308, 644217, 151921, 567216, 295701, 424234, 226430, 511325, 351859, 86869, 11879, 480566, 214586, 4578 };
    int[] cityY = { 426489, 917967, 905297, 344336, 672611, 398399, 777846, 100325, 369046, 163430, 887294, 75424, 503045, 482371, 49256, 309372, 823157, 318527, 133146, 512302, 153286, 311258, 427479, 279160, 619432, 879362, 352797, 862126, 640667, 616667, 992943, 902636, 788829, 890566, 843259, 452938, 506622, 333426, 746020, 367407, 510269, 163845, 780003, 485806, 497233, 3233, 216126, 139917, 741224, 72159, 779755, 915008, 668712, 631347, 405185, 13476, 259280, 210689, 124487, 320594, 696011, 970069, 853551, 625540, 143480, 871562, 145045, 718803, 693521, 66000, 962069, 77028, 652693, 155436, 297029, 228984, 444720, 310934, 908708, 515763, 415260, 98600, 916957, 902205, 908495, 603841, 644300, 304646, 76695, 293713, 351691, 68133, 382419, 700864, 342322, 753480, 463414, 310409, 645521, 958738, 961243, 278387, 144967, 679704, 862143, 758611, 478905, 223067, 930779, 740449, 819640, 335438, 192576, 997458, 674437, 607622, 973274, 37537, 316798, 679831, 870528, 485655, 196938, 718982, 357682, 352824, 918737, 934275, 196154, 743736, 781410, 128972, 371569, 550285, 771590, 581250, 21571, 613844, 705168, 147811, 146523, 233718, 803389, 140273 };
    double roadCost = 0.38505828934;
    double airportCost = 9435730.09219;
    assertEquals(3210866.090321322, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3210866.090321322);
  }

  @Test
  public void case97() {
    int[] cityX = { 124448, 265790, 670786, 599218, 159648, 629451, 205737, 839761, 749688, 962877, 258842, 291204, 518467, 142368, 353793, 157711, 260344, 199803, 767059, 135108, 42932, 642623, 902993, 286743, 876766, 337547, 51710, 768620, 962104, 709726, 604168, 552218, 617235, 550826, 908676, 404395, 970070, 754339, 76429, 557588, 780984, 698504, 336834, 738964, 564393, 140609, 665543, 542321, 179278, 721830, 756675, 722429, 528567, 821462, 540504, 15293, 274703, 660629, 237263, 803, 975655, 429550, 50637, 389776, 790399, 463082, 755287, 943096, 313139, 935683, 788786, 345599, 28595, 774133, 73140, 54880, 575177, 873608, 102487, 354519, 209838, 768889, 343486, 499080, 581578, 343692, 555871, 150930, 299757, 945652, 375638, 474819, 890541, 320094, 342199, 100104, 574543, 276116, 224079, 444157, 668021, 349804, 58562, 524172, 665582, 874603, 762732, 767745, 814074, 516526, 830907, 627247, 842926, 57884, 382042, 310419, 833609, 973010, 444335, 238795, 961408, 442478, 280806, 488241, 446087, 506327, 494354, 427723, 287402 };
    int[] cityY = { 186158, 386315, 859887, 163876, 883954, 955900, 873850, 321484, 357802, 140549, 194101, 926370, 132531, 643540, 726761, 750894, 823494, 676764, 449540, 144297, 687057, 538152, 175636, 377467, 673546, 97454, 787786, 786321, 462230, 230709, 932879, 201243, 760761, 143315, 111895, 725498, 302948, 743083, 91242, 2383, 288820, 932938, 268537, 490554, 221200, 520566, 71907, 989328, 584178, 258095, 626645, 200898, 327287, 135169, 468952, 223172, 683653, 128389, 934917, 281901, 597785, 135117, 508131, 511685, 171967, 32878, 305385, 820245, 827293, 162436, 634508, 57942, 649960, 610598, 987896, 296953, 901014, 27346, 877691, 594254, 845291, 554982, 148492, 381016, 195679, 368451, 691128, 880564, 746516, 836789, 433414, 91494, 703693, 151997, 274222, 645876, 392434, 960565, 113260, 389906, 759599, 526714, 85227, 38222, 302446, 189811, 772350, 930770, 461467, 521970, 306984, 654661, 742343, 396, 126703, 595549, 345339, 859874, 760990, 965517, 495988, 389417, 947898, 595288, 712747, 554492, 96167, 746779, 260323 };
    double roadCost = 1.241040387;
    double airportCost = 9341924.33941;
    assertEquals(9183471.787121495, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 9183471.787121495);
  }

  @Test
  public void case98() {
    int[] cityX = { 31466, 509644, 195314, 49834, 962724, 669168, 772331, 727543, 389846, 426113, 978789, 227697, 505058, 189085, 763707, 375845, 358573, 540735, 978598, 829734, 34304, 554852, 160407, 213452, 296136, 901609, 181117, 220765, 17921, 325482, 311480, 280053, 656673, 79928, 677483, 571873, 281214, 267226, 424263, 24441, 215109, 164429, 341700, 112676, 963042, 497071, 819697, 26695, 456018, 608814, 867807, 384637, 161995, 190609, 710317, 402701, 353513, 610101, 648395, 508679, 985263, 715627, 753331, 810731, 290265, 377787, 887344, 546185, 785544, 904393, 658146, 494504, 139196, 132530, 349525, 57973, 553477, 353111, 485354, 249988, 355927, 444956, 509321, 500354, 816101, 845926, 479934, 185296, 260188, 410601, 463868, 852042, 426986, 875349, 88459, 552796, 948204, 200919, 182213, 259177, 189927, 128511, 897231, 898801, 340692, 765081, 349130, 434455, 93019, 86867, 783678, 326900, 955584, 168309, 869173, 720669, 806423, 298876, 734551, 798835, 515496, 24339, 585244, 865535, 685565, 52285, 611732, 922935, 191432, 151523, 583942, 55617, 770653 };
    int[] cityY = { 657972, 415615, 647296, 945224, 780878, 991191, 265141, 744563, 108870, 218692, 952499, 905162, 804577, 607222, 709432, 874294, 624480, 567683, 802522, 168839, 374125, 403729, 77441, 803765, 400982, 570086, 870294, 717184, 176084, 35575, 649592, 997272, 689699, 844351, 337386, 631441, 102514, 83859, 518788, 58063, 119947, 251579, 345245, 332373, 707284, 254335, 316139, 708242, 722131, 977551, 106813, 257860, 814190, 131475, 134189, 179839, 234394, 918157, 744433, 584015, 855975, 334662, 578504, 975465, 494867, 105758, 450737, 216398, 533762, 22011, 712846, 380713, 977302, 854380, 536513, 850679, 69549, 500240, 703864, 296201, 237065, 845964, 317247, 401476, 626446, 946199, 844507, 217216, 500980, 12568, 821337, 23483, 807696, 614322, 929428, 790355, 830169, 401686, 993741, 40625, 787546, 900730, 341622, 10814, 739378, 784241, 408613, 908299, 610228, 912816, 480740, 233417, 428480, 301279, 204996, 584152, 532649, 336714, 825139, 653394, 933343, 668002, 893972, 924669, 168256, 544283, 285262, 663818, 656596, 91115, 162912, 290404, 267098 };
    double roadCost = 1.86097295601;
    double airportCost = 9389654.9853;
    assertEquals(14492246.797892898, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 14492246.797892898);
  }

  @Test
  public void case99() {
    int[] cityX = { 685792, 896981, 445417, 165968, 36242, 62245, 127949, 431, 273792, 107895, 789131, 179969, 859653, 209173, 592538, 188940, 331166, 382716, 987832, 169769, 804712, 897017, 57100, 441837, 950988, 743447, 679263, 922352, 130207, 934114, 748614, 324282, 829983, 99537, 698290, 228243, 831429, 300566, 201051, 343105, 218375, 128186, 835739, 610563, 345348, 804620, 568370, 920384, 512078, 431759, 135726, 263054, 664110, 649593, 640158, 610360, 999132, 874239, 740564, 797938, 596666, 180400, 961074, 772848, 837834, 850690, 84797, 200306, 695628, 280082, 898975, 943057, 564977, 159218, 505733, 621400, 777284, 559467, 392844, 47479, 70299, 272075, 639986, 709340, 955056, 272571, 201143, 170911, 789781, 626941, 510143, 361910, 89764, 416704, 604040, 871317, 954272 };
    int[] cityY = { 121180, 980222, 134154, 172948, 289859, 60483, 651523, 492105, 385139, 896751, 325722, 752035, 799621, 286248, 552828, 536033, 498716, 862564, 486571, 687850, 763777, 840716, 289880, 590345, 711231, 56617, 888591, 259246, 469241, 857726, 827572, 919415, 768865, 37555, 235667, 746843, 768037, 535035, 185140, 672809, 216504, 101670, 572728, 793122, 808263, 460368, 923154, 133298, 498211, 98796, 278691, 75022, 960965, 562898, 620528, 900111, 793412, 93840, 521374, 946132, 306398, 545968, 685768, 483027, 242414, 599555, 778867, 418760, 101971, 750351, 110781, 420730, 895284, 758394, 942624, 708148, 189978, 55059, 69180, 649643, 530003, 33336, 472517, 103908, 557128, 510692, 991485, 518216, 472469, 557087, 896546, 751288, 599805, 516575, 792099, 108261, 177525 };
    double roadCost = 0.166734850722;
    double airportCost = 9071536.66111;
    assertEquals(1081924.1321889132, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1081924.1321889132);
  }

  @Test
  public void case100() {
    int[] cityX = { 899244, 726255, 60517, 597366, 183583, 193688, 585081, 756896, 299418, 165893, 448603, 121232, 318279, 876947, 393124, 185996, 254063, 229994, 36109, 964188, 15294, 204538, 205995, 73265, 814193, 3394, 188811, 286862, 806258, 465337, 254186, 460626, 153876, 603923, 166891, 634912, 713747, 744386, 818529, 665746, 569096, 977325, 406022, 789793, 496999, 173691, 904047, 859306, 732788, 664278, 285737, 74833, 182043, 167916, 732714, 150824, 302519, 124760, 167363, 959402, 387402, 481837, 688036, 213954, 479760, 734095, 899986, 833590, 649942, 882562, 162488, 221224, 928624, 500959, 696184, 955452, 662678, 709019, 954641, 283131, 500719, 389649, 563626, 754795, 147677, 490317, 739022, 116720, 388387, 626045, 703841, 512107, 288073 };
    int[] cityY = { 183727, 739236, 808386, 385023, 712834, 256673, 258417, 655978, 391953, 489134, 659118, 341077, 511805, 836679, 458789, 277080, 797185, 728734, 784675, 300099, 272615, 24234, 392897, 394849, 332089, 445349, 761207, 626954, 641655, 423782, 789111, 279450, 756116, 971608, 389910, 976077, 669987, 638836, 116536, 133281, 589620, 4955, 773349, 28448, 59304, 415433, 167022, 155040, 195222, 680532, 749049, 327568, 320991, 844094, 830390, 935773, 123201, 372001, 885245, 409752, 354578, 30895, 248248, 579318, 951577, 647083, 173251, 760321, 107913, 343777, 450115, 471920, 4146, 276820, 483050, 339006, 147341, 308590, 240889, 276037, 984793, 437160, 526864, 21299, 782843, 14946, 533837, 690628, 183890, 629652, 345429, 310381, 625976 };
    double roadCost = 1.04925927518;
    double airportCost = 9394181.65258;
    assertEquals(6393789.225528908, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 6393789.225528908);
  }

  @Test
  public void case101() {
    int[] cityX = { 362206, 541399, 512245, 48278, 935412, 550925, 639371, 86859, 533920 };
    int[] cityY = { 535584, 67771, 238336, 938866, 491623, 726748, 83819, 449818, 232497 };
    double roadCost = 2.38531289592;
    double airportCost = 11532.7295512;
    assertEquals(103794.5659608, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 103794.5659608);
  }

  @Test
  public void case102() {
    int[] cityX = { 216592, 860345, 196713, 228293, 129589 };
    int[] cityY = { 262572, 546226, 953648, 234048, 870523 };
    double roadCost = 0.0331634939832;
    double airportCost = 41683.3054893;
    assertEquals(48262.625817151806, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 48262.625817151806);
  }

  @Test
  public void case103() {
    int[] cityX = { 520814, 87303, 625697, 588872, 160311, 625676, 764792, 558241, 118496 };
    int[] cityY = { 834143, 54241, 777875, 675027, 522067, 472871, 58861, 152973, 114474 };
    double roadCost = 0.367707530258;
    double airportCost = 86760.7807939;
    assertEquals(614938.60203379, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 614938.60203379);
  }

  @Test
  public void case104() {
    int[] cityX = { 438320, 74612, 577185, 481478, 951975, 670564, 665086, 38514, 819168, 317496 };
    int[] cityY = { 875885, 286104, 343180, 685696, 867387, 128753, 880423, 31326, 635906, 990907 };
    double roadCost = 0.785584698392;
    double airportCost = 20609.6305338;
    assertEquals(206096.30533799998, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 206096.30533799998);
  }

  @Test
  public void case105() {
    int[] cityX = { 186550 };
    int[] cityY = { 944406 };
    double roadCost = 2.02608295159;
    double airportCost = 97672.4292457;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case106() {
    int[] cityX = { 272557 };
    int[] cityY = { 403746 };
    double roadCost = 0.287119378458;
    double airportCost = 89204.8399755;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case107() {
    int[] cityX = { 368607 };
    int[] cityY = { 93769 };
    double roadCost = 0.689321878419;
    double airportCost = 22589.568802;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case108() {
    int[] cityX = { 881017, 747401, 677683, 626202, 928911 };
    int[] cityY = { 110057, 11322, 940341, 114751, 431689 };
    double roadCost = 0.780290831868;
    double airportCost = 45126.4415725;
    assertEquals(225632.20786249998, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 225632.20786249998);
  }

  @Test
  public void case109() {
    int[] cityX = { 340473, 980122, 579984 };
    int[] cityY = { 733500, 275754, 483248 };
    double roadCost = 1.48139560626;
    double airportCost = 81914.2654667;
    assertEquals(245742.7964001, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 245742.7964001);
  }

  @Test
  public void case110() {
    int[] cityX = { 443867, 118631, 629078 };
    int[] cityY = { 831076, 101177, 45226 };
    double roadCost = 0.587286834157;
    double airportCost = 83090.3898174;
    assertEquals(249271.1694522, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 249271.1694522);
  }

  @Test
  public void case111() {
    int[] cityX = { 727009, 706041, 705262, 777388, 416777, 793588, 565740, 507457 };
    int[] cityY = { 193828, 768955, 193339, 807706, 753772, 460336, 669220, 725407 };
    double roadCost = 1.23345912891;
    double airportCost = 50421.8459166;
    assertEquals(379783.73753835895, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 379783.73753835895);
  }

  @Test
  public void case112() {
    int[] cityX = { 720627, 179658, 681183, 459780, 581134, 842299, 655935 };
    int[] cityY = { 754056, 740063, 499327, 464843, 924636, 915562, 11184 };
    double roadCost = 0.969393214936;
    double airportCost = 37183.0522657;
    assertEquals(260281.36585989996, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 260281.36585989996);
  }

  @Test
  public void case113() {
    int[] cityX = { 998948, 821636, 106856, 162515, 933114, 906381, 880468, 959655 };
    int[] cityY = { 71456, 933339, 294390, 860507, 81658, 23762, 364615, 801747 };
    double roadCost = 1.6590634483;
    double airportCost = 8585.58806334;
    assertEquals(68684.70450672, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 68684.70450672);
  }

  @Test
  public void case114() {
    int[] cityX = { 900155, 556468, 639229, 181729 };
    int[] cityY = { 118680, 73341, 329795, 579702 };
    double roadCost = 0.00878052713405;
    double airportCost = 80113.7020218;
    assertEquals(9890.559194526155, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 9890.559194526155);
  }

  @Test
  public void case115() {
    int[] cityX = { 653338, 951248 };
    int[] cityY = { 744380, 716824 };
    double roadCost = 0.481698537891;
    double airportCost = 70439.3163014;
    assertEquals(140878.6326028, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 140878.6326028);
  }

  @Test
  public void case116() {
    int[] cityX = { 798, 915, 797, 463, 895, 523, 959, 702, 235, 523 };
    int[] cityY = { 126, 25, 402, 45, 841, 762, 982, 605, 616, 78 };
    double roadCost = 1.66;
    double airportCost = 10000000.0;
    assertEquals(3358.234405323023, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3358.234405323023);
  }

  @Test
  public void case117() {
    int[] cityX = { 798, 915, 797, 463, 895, 523, 959, 702, 235, 523 };
    int[] cityY = { 126, 25, 402, 45, 841, 762, 982, 605, 616, 78 };
    double roadCost = 1.66;
    double airportCost = 3000000.0;
    assertEquals(3358.234405323023, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3358.234405323023);
  }

  @Test
  public void case118() {
    int[] cityX = { 547416, 764373, 640967, 969439, 63808, 814827, 503720, 905192, 237900, 300222, 136556, 998146, 538248, 690921, 343544, 860045, 83558, 249306, 366584, 11143, 924524, 718370, 288564, 178757, 482043, 426167, 664211, 418297, 37188, 50144, 711551, 741602, 107383, 834916, 611027, 682320, 181877, 969481, 137775, 200946, 387923, 835694, 211748, 420727, 791467, 198762, 423097, 289838, 692903, 995844, 991148, 621743, 502642, 893894, 421367, 234034, 312119, 696179, 48064, 558296, 662262, 455743, 655090, 788681, 944576, 860529, 837563, 233470, 369483, 929482, 492699, 817445, 290524, 620779, 48995, 973645, 226345, 29915, 296534, 38924, 726761, 763523, 697741, 363590, 62574, 613238, 306297, 624113, 123487, 280568, 973211, 348035, 352117, 48490, 181652, 957567, 814988, 338535, 964993, 416081, 552870, 312453, 35099, 409689, 421778, 342000, 790557, 484433, 621821, 149153, 292822, 666813, 782798, 865237, 314904, 108634, 190287, 778175, 382395, 547319, 806088, 840910, 623829, 716904, 436576, 186034, 767555, 37666, 881785, 934249, 760158, 717751, 865372, 469985, 858103, 881621, 323602, 85177, 772322, 134305, 103787, 211255, 451072, 338412, 413316, 365088, 561009, 0, 5, 10 };
    int[] cityY = { 458721, 231409, 359961, 195883, 949848, 756098, 900511, 970906, 588082, 261807, 357125, 13938, 878669, 812831, 367751, 468602, 738549, 628837, 424091, 551001, 341093, 364370, 682200, 427224, 731391, 126648, 372917, 783577, 818071, 93441, 141948, 946170, 223674, 483671, 899247, 581670, 130801, 891674, 919068, 790494, 22138, 211888, 256063, 309366, 881992, 387978, 904424, 104535, 127303, 822025, 180759, 16550, 160663, 148736, 504228, 298282, 789380, 43805, 805935, 587908, 634630, 828959, 57135, 552209, 843473, 265209, 660941, 144386, 286925, 262285, 128604, 884466, 332422, 41147, 391805, 597387, 830119, 283373, 338460, 267246, 776865, 850738, 235331, 902684, 255948, 94898, 368078, 865010, 929839, 192805, 985411, 290384, 195225, 478023, 373958, 727933, 717791, 932965, 925295, 112699, 144775, 251358, 982481, 688518, 172478, 369561, 897957, 323319, 609062, 625028, 172621, 965182, 56091, 249440, 121464, 240862, 729306, 364574, 370528, 553446, 645429, 532418, 790231, 709111, 477604, 83024, 466370, 625473, 294120, 961954, 155933, 678656, 14089, 372510, 847187, 230673, 410264, 785442, 358921, 4502, 935212, 274899, 327985, 447978, 263814, 166106, 522428, 0, 0, 0 };
    double roadCost = 1.0;
    double airportCost = 3.0;
    assertEquals(450.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 450.0);
  }

  @Test
  public void case119() {
    int[] cityX = { 798, 915, 797, 463, 895, 523, 959, 702, 235, 523 };
    int[] cityY = { 126, 25, 402, 45, 841, 762, 982, 605, 616, 78 };
    double roadCost = 2.55;
    double airportCost = 623.0;
    assertEquals(5158.733574441993, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 5158.733574441993);
  }

  @Test
  public void case120() {
    int[] cityX = { 1 };
    int[] cityY = { 1 };
    double roadCost = 1.0;
    double airportCost = 2.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case121() {
    int[] cityX = { 1 };
    int[] cityY = { 1 };
    double roadCost = 1.0;
    double airportCost = 1.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case122() {
    int[] cityX = { 0, 0, 0, 0 };
    int[] cityY = { 0, 140, 280, 420 };
    double roadCost = 1.0;
    double airportCost = 100.0;
    assertEquals(400.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 400.0);
  }

  @Test
  public void case123() {
    int[] cityX = { 0, 100 };
    int[] cityY = { 0, 100 };
    double roadCost = 1.0;
    double airportCost = 1.0;
    assertEquals(2.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2.0);
  }

  @Test
  public void case124() {
    int[] cityX = { 0, 0, 400, 400 };
    int[] cityY = { 0, 100, 0, 100 };
    double roadCost = 1.0;
    double airportCost = 100050.0;
    assertEquals(600.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 600.0);
  }

  @Test
  public void case125() {
    int[] cityX = { 0, 100, 200, 300, 400, 2000, 2100, 2200 };
    int[] cityY = { 0, 100, 200, 300, 400, 2000, 2100, 2200 };
    double roadCost = 0.5;
    double airportCost = 200.0;
    assertEquals(824.2640687119285, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 824.2640687119285);
  }

  @Test
  public void case126() {
    int[] cityX = { 0, 2 };
    int[] cityY = { 0, 0 };
    double roadCost = 1.0;
    double airportCost = 1.5;
    assertEquals(2.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2.0);
  }

  @Test
  public void case127() {
    int[] cityX = { 0, 1 };
    int[] cityY = { 0, 0 };
    double roadCost = 1.0;
    double airportCost = 7.0;
    assertEquals(1.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1.0);
  }

  @Test
  public void case128() {
    int[] cityX = { 0, 1000000 };
    int[] cityY = { 0, 1000000 };
    double roadCost = 0.01;
    double airportCost = 1000000.0;
    assertEquals(14142.13562373095, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 14142.13562373095);
  }

  @Test
  public void case129() {
    int[] cityX = { 0, 0 };
    int[] cityY = { 0, 1 };
    double roadCost = 1.0;
    double airportCost = 150.0;
    assertEquals(1.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1.0);
  }

  @Test
  public void case130() {
    int[] cityX = { 0, 0, 400, 400 };
    int[] cityY = { 0, 100, 0, 100 };
    double roadCost = 1.0;
    double airportCost = 1000000.0;
    assertEquals(600.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 600.0);
  }

  @Test
  public void case131() {
    int[] cityX = { 0, 100000 };
    int[] cityY = { 0, 100000 };
    double roadCost = 1.0e-06;
    double airportCost = 1000000.0;
    assertEquals(0.1414213562373095, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 0.1414213562373095);
  }

  @Test
  public void case132() {
    int[] cityX = { 0, 1 };
    int[] cityY = { 0, 1 };
    double roadCost = 1.0;
    double airportCost = 1.2;
    assertEquals(1.4142135623730951, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1.4142135623730951);
  }

  @Test
  public void case133() {
    int[] cityX = { 798, 915, 797, 463, 895, 523, 959, 702, 235, 523 };
    int[] cityY = { 126, 25, 402, 45, 841, 762, 982, 605, 616, 78 };
    double roadCost = 1.66;
    double airportCost = 300.0;
    assertEquals(2727.2895312339606, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2727.2895312339606);
  }

  @Test
  public void case134() {
    int[] cityX = { 1000000, 0 };
    int[] cityY = { 1000000, 0 };
    double roadCost = 1.0;
    double airportCost = 10000000.0;
    assertEquals(1414213.562373095, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1414213.562373095);
  }

  @Test
  public void case135() {
    int[] cityX = { 945, 557, 620, 386, 9, 410, 885, 478, 159, 852, 339, 597, 990, 650, 316, 368, 793, 81, 388, 356, 304, 471, 171, 259, 801, 297, 193, 813, 184, 511, 587, 393, 220, 541, 855, 622, 125, 658, 86, 706, 16, 38, 765, 866, 171, 248, 967, 926, 425, 910, 108, 348, 394, 612, 131, 962, 630, 281, 672, 230, 752, 702, 326, 376, 691, 916, 751, 471, 995, 361, 334, 407, 806, 421, 666, 810, 680, 107, 833, 794, 31, 292, 949, 65, 941, 978, 735, 963, 877, 692, 463, 503, 877, 947, 533, 573, 706, 870, 253, 486, 73, 125, 755, 528, 440, 719, 411, 787, 990, 798, 316, 507, 109, 935, 92, 226, 653, 11, 264, 46, 365, 835, 587, 956, 139, 647, 416, 997, 126, 681, 261, 117, 605, 300, 470, 131, 53, 706, 402, 663, 687, 946, 935, 545, 512, 357, 594, 426, 880, 73 };
    int[] cityY = { 651, 679, 524, 164, 622, 973, 766, 809, 557, 468, 516, 913, 951, 22, 327, 286, 722, 450, 837, 371, 99, 302, 427, 580, 277, 940, 738, 176, 951, 539, 792, 721, 813, 129, 83, 74, 850, 486, 79, 220, 33, 296, 100, 993, 500, 158, 484, 692, 427, 931, 200, 854, 493, 497, 720, 275, 545, 257, 921, 135, 484, 223, 992, 31, 637, 183, 6, 258, 655, 29, 528, 353, 105, 446, 387, 69, 584, 849, 251, 337, 936, 788, 307, 291, 181, 274, 703, 656, 167, 981, 992, 209, 30, 14, 872, 530, 424, 784, 901, 272, 196, 640, 899, 991, 229, 381, 940, 485, 65, 554, 916, 916, 136, 275, 794, 852, 152, 705, 771, 666, 927, 131, 177, 609, 744, 607, 9, 759, 860, 405, 871, 761, 887, 804, 392, 56, 174, 476, 496, 986, 142, 652, 22, 797, 688, 681, 286, 744, 87, 85 };
    double roadCost = 2.8004897216063327;
    double airportCost = 587.8127283489899;
    assertEquals(23497.331910848043, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 23497.331910848043);
  }

  @Test
  public void case136() {
    int[] cityX = { 0, 0 };
    int[] cityY = { 0, 1 };
    double roadCost = 1.0;
    double airportCost = 500.0;
    assertEquals(1.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1.0);
  }

  @Test
  public void case137() {
    int[] cityX = { 0, 1 };
    int[] cityY = { 0, 0 };
    double roadCost = 3.0;
    double airportCost = 2.0;
    assertEquals(3.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3.0);
  }

  @Test
  public void case138() {
    int[] cityX = { 1, 321, 31414, 5213, 123, 132, 32, 12, 123124, 2134 };
    int[] cityY = { 12332, 325, 435, 342, 5234, 13, 4324, 32, 132, 123 };
    double roadCost = 5.0e-05;
    double airportCost = 1000000.0;
    assertEquals(6.766597722404855, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 6.766597722404855);
  }

  @Test
  public void case139() {
    int[] cityX = { 150, 312, 124, 123, 213, 444, 43235, 4132 };
    int[] cityY = { 432, 4, 4324, 32, 4, 432, 32, 432 };
    double roadCost = 2.75;
    double airportCost = 55555.0;
    assertEquals(130826.56910643911, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 130826.56910643911);
  }

  @Test
  public void case140() {
    int[] cityX = { 5, 500000 };
    int[] cityY = { 100000, 100000 };
    double roadCost = 1.0;
    double airportCost = 100000.0;
    assertEquals(200000.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 200000.0);
  }

  @Test
  public void case141() {
    int[] cityX = { 1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991, 999990, 999989, 999988, 999987, 999986, 999985, 999984, 999983, 999982, 999981, 999980, 999979, 999978, 999977, 999976, 999975, 999974, 999973, 999972, 999971, 999970, 999969, 999968, 999967, 999966, 999965, 999964, 999963, 999962, 999961, 999960, 999959, 999958, 999957, 999956, 999955, 999954, 999953, 999952, 999951 };
    int[] cityY = { 999292, 999291, 999290, 999289, 999288, 999287, 999286, 999285, 999284, 999283, 999282, 999281, 999280, 999279, 999278, 999277, 999276, 999275, 999274, 999273, 999272, 999271, 999270, 999269, 999268, 999267, 999266, 999265, 999264, 999263, 999262, 999261, 999260, 999259, 999258, 999257, 999256, 999255, 999254, 999253, 999252, 999251, 999250, 999249, 999248, 999247, 999246, 999245, 999244, 999243 };
    double roadCost = 2.9876976;
    double airportCost = 9879872.0;
    assertEquals(207.03688084328763, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 207.03688084328763);
  }

  @Test
  public void case142() {
    int[] cityX = { 0, 0 };
    int[] cityY = { 0, 1000000 };
    double roadCost = 1.0;
    double airportCost = 10000000.0;
    assertEquals(1000000.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1000000.0);
  }

  @Test
  public void case143() {
    int[] cityX = { 0, 0, 0 };
    int[] cityY = { 0, 1, 2 };
    double roadCost = 1.0;
    double airportCost = 0.9;
    assertEquals(2.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2.0);
  }

  @Test
  public void case144() {
    int[] cityX = { 0, 2, 1 };
    int[] cityY = { 0, 0, 0 };
    double roadCost = 1.0;
    double airportCost = 1000000.0;
    assertEquals(2.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2.0);
  }

  @Test
  public void case145() {
    int[] cityX = { 0 };
    int[] cityY = { 0 };
    double roadCost = 1.0;
    double airportCost = 1000000.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case146() {
    int[] cityX = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] cityY = { 1, 2, 4, 7, 11, 16, 22, 29, 38, 46 };
    double roadCost = 1.0;
    double airportCost = 6.1;
    assertEquals(45.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 45.0);
  }

  @Test
  public void case147() {
    int[] cityX = { 0, 1000000 };
    int[] cityY = { 0, 1000000 };
    double roadCost = 1.0;
    double airportCost = 10000000.0;
    assertEquals(1414213.562373095, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1414213.562373095);
  }

  @Test
  public void case148() {
    int[] cityX = { 0, 200 };
    int[] cityY = { 0, 200 };
    double roadCost = 1.0;
    double airportCost = 30000.0;
    assertEquals(282.842712474619, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 282.842712474619);
  }

  @Test
  public void case149() {
    int[] cityX = { 1 };
    int[] cityY = { 1 };
    double roadCost = 2.0;
    double airportCost = 3.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case150() {
    int[] cityX = { 1000000 };
    int[] cityY = { 1000000 };
    double roadCost = 1.0;
    double airportCost = 100.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case151() {
    int[] cityX = { 0, 0, 0 };
    int[] cityY = { 0, 1, 100 };
    double roadCost = 1.0;
    double airportCost = 55.0;
    assertEquals(100.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 100.0);
  }

  @Test
  public void case152() {
    int[] cityX = { 0, 0 };
    int[] cityY = { 0, 1 };
    double roadCost = 3.0;
    double airportCost = 3.1;
    assertEquals(3.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 3.0);
  }

  @Test
  public void case153() {
    int[] cityX = { 1 };
    int[] cityY = { 1 };
    double roadCost = 1.0;
    double airportCost = 10.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case154() {
    int[] cityX = { 0, 0 };
    int[] cityY = { 0, 8 };
    double roadCost = 1.0;
    double airportCost = 5.0;
    assertEquals(8.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 8.0);
  }

  @Test
  public void case155() {
    int[] cityX = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 };
    int[] cityY = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 };
    double roadCost = 1.9999;
    double airportCost = 2000.0;
    assertEquals(421.414569805104, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 421.414569805104);
  }

  @Test
  public void case156() {
    int[] cityX = { 236234, 432432, 545433, 23424, 534345, 234432, 56436, 54, 23444, 11111 };
    int[] cityY = { 543543, 654654, 2344, 23444, 654764, 9999, 777778, 43243, 66546, 234444 };
    double roadCost = 1.0e-05;
    double airportCost = 9999999.0;
    assertEquals(17.595923996217568, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 17.595923996217568);
  }

  @Test
  public void case157() {
    int[] cityX = { 0, 0 };
    int[] cityY = { 0, 1 };
    double roadCost = 3.0;
    double airportCost = 1.0;
    assertEquals(2.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 2.0);
  }

  @Test
  public void case158() {
    int[] cityX = { 6, 24, 133, 47, 87, 23, 75, 110, 123, 114, 81, 11, 0, 48, 100, 121, 67, 13, 74, 79, 78, 69, 114, 86, 115, 72, 112, 15, 100, 38, 87, 77, 138, 12, 98, 40, 15, 60, 94, 147, 27, 126, 51, 75, 131, 101, 108, 17, 29, 144, 93, 106, 5, 90, 106, 146, 3, 6, 139, 94, 115, 107, 31, 117, 87, 90, 25, 14, 146, 86, 77, 46, 50, 45, 33, 140, 88, 36, 79, 120, 104, 103, 90, 84, 39, 86, 82, 88, 63, 79, 61, 102, 121, 102, 78, 107, 122, 87, 102, 103, 61, 22, 3, 18, 69, 96, 71, 143, 66, 121, 107, 126, 102, 75, 135, 147, 21, 43, 95, 133, 75, 74, 32, 93, 63, 25, 116, 98, 140, 10, 82, 140, 146, 1, 64, 11, 134, 3, 88, 10, 71, 32, 116, 34, 18, 123, 143, 33, 132, 40 };
    int[] cityY = { 29, 20, 114, 38, 75, 92, 105, 49, 124, 135, 58, 129, 132, 82, 92, 99, 85, 139, 87, 67, 136, 31, 98, 141, 100, 109, 60, 56, 86, 147, 79, 54, 84, 11, 72, 141, 78, 45, 138, 59, 37, 11, 21, 90, 18, 35, 70, 75, 107, 75, 60, 85, 121, 21, 101, 49, 116, 24, 24, 92, 11, 133, 141, 19, 72, 116, 134, 55, 60, 16, 42, 138, 37, 122, 127, 102, 107, 145, 19, 78, 3, 124, 59, 63, 62, 79, 21, 119, 2, 17, 145, 129, 48, 135, 137, 2, 11, 104, 45, 26, 58, 140, 26, 94, 137, 68, 99, 20, 63, 93, 71, 104, 26, 96, 113, 119, 27, 143, 143, 40, 112, 99, 4, 79, 49, 54, 63, 146, 78, 95, 88, 42, 124, 87, 0, 32, 49, 139, 120, 141, 100, 95, 34, 10, 34, 103, 94, 20, 4, 65 };
    double roadCost = 1.0;
    double airportCost = 70.0;
    assertEquals(1180.7134944638935, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1180.7134944638935);
  }

  @Test
  public void case159() {
    int[] cityX = { 0 };
    int[] cityY = { 0 };
    double roadCost = 1.0;
    double airportCost = 1000.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case160() {
    int[] cityX = { 0, 1 };
    int[] cityY = { 0, 0 };
    double roadCost = 3.0;
    double airportCost = 0.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case161() {
    int[] cityX = { 1, 0 };
    int[] cityY = { 1, 0 };
    double roadCost = 1.0;
    double airportCost = 1000000.0;
    assertEquals(1.4142135623730951, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA * 1.4142135623730951);
  }

  @Test
  public void case162() {
    int[] cityX = { 1 };
    int[] cityY = { 1 };
    double roadCost = 3.0;
    double airportCost = 19999.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

  @Test
  public void case163() {
    int[] cityX = { 0 };
    int[] cityY = { 0 };
    double roadCost = 1.0;
    double airportCost = 100.0;
    assertEquals(0.0, transportationnetwork.minCost(cityX, cityY, roadCost, airportCost), DELTA);
  }

}
