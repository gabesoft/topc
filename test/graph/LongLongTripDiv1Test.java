package topc.test.graph;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.graph.*;

public class LongLongTripDiv1Test {
    LongLongTripDiv1 longlongtripdiv1 = new LongLongTripDiv1();

    @Test
    public void case1() {
        int N = 3;
        int[] A = { 0, 0, 1 };
        int[] B = { 2, 1, 2 };
        int[] D = { 7, 6, 5 };
        long T = 11L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case2() {
        int N = 3;
        int[] A = { 0, 0, 1 };
        int[] B = { 2, 1, 2 };
        int[] D = { 7, 6, 5 };
        long T = 25L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case3() {
        int N = 2;
        int[] A = { 1 };
        int[] B = { 0 };
        int[] D = { 1 };
        long T = 1000000000000000000L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case4() {
        int N = 4;
        int[] A = { 0, 0, 1 };
        int[] B = { 2, 1, 2 };
        int[] D = { 10, 10, 10 };
        long T = 1000L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case5() {
        int N = 2;
        int[] A = { 1 };
        int[] B = { 0 };
        int[] D = { 6808 };
        long T = 282475249622650074L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case6() {
        int N = 9;
        int[] A = { 4, 8, 5, 8, 3, 6, 2, 6, 7, 6, 6 };
        int[] B = { 2, 7, 1, 5, 1, 3, 1, 1, 5, 4, 2 };
        int[] D = { 6580, 8822, 1968, 673, 1394, 9337, 5486, 1746, 5229, 4092, 195 };
        long T = 937186357646035002L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case7() {
        int N = 2;
        int[] A = { 1 };
        int[] B = { 0 };
        int[] D = { 6808 };
        long T = 282475249622650074L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case8() {
        int N = 50;
        int[] A = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 };
        int[] B = { 49, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 };
        int[] D = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        long T = 282475249622650074L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case9() {
        int N = 50;
        int[] A = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 };
        int[] B = { 49, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 };
        int[] D = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        long T = 200460001L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case10() {
        int N = 50;
        int[] A = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 };
        int[] B = { 49, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 };
        int[] D = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        long T = 200440001L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case11() {
        int N = 4;
        int[] A = { 1 };
        int[] B = { 2 };
        int[] D = { 1 };
        long T = 1000000L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case12() {
        int N = 3;
        int[] A = { 1 };
        int[] B = { 2 };
        int[] D = { 1 };
        long T = 1000000L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case13() {
        int N = 3;
        int[] A = { 1 };
        int[] B = { 0 };
        int[] D = { 1 };
        long T = 100000L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case14() {
        int N = 15;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 14, 10, 10, 12, 12, 8, 11, 8, 11, 13, 14, 12, 12, 5, 6, 10, 11, 7, 4, 13, 2, 12, 14, 7, 9, 5, 8, 4, 12, 7, 5, 14, 12, 8 };
        int[] B = { 0, 1, 2, 2, 2, 0, 1, 3, 1, 0, 6, 0, 3, 7, 3, 10, 1, 2, 3, 10, 4, 5, 10, 0, 2, 12, 4, 5, 8, 4, 2, 1, 9, 0, 1, 4, 0, 11, 2, 5, 5, 3, 4, 3, 7, 4, 0, 5, 6, 2 };
        int[] D = { 9198, 9594, 5472, 3708, 4671, 1134, 2484, 9684, 9315, 513, 4293, 2106, 4833, 3204, 5823, 8226, 2781, 153, 2880, 9513, 5751, 4914, 4509, 8721, 2448, 5976, 8676, 9333, 5670, 2664, 3843, 7227, 7587, 8037, 3555, 7956, 225, 7641, 3888, 5211, 8235, 4896, 8028, 3366, 7326, 8694, 2619, 5472, 3996, 8181 };
        long T = 13338L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case15() {
        int N = 22;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 11, 9, 20, 13, 8, 10, 16, 17, 20, 19, 16, 10, 12, 15, 5, 8, 15, 20, 13, 14, 18, 14, 6, 5, 18, 10, 21, 21 };
        int[] B = { 0, 0, 2, 2, 3, 4, 1, 4, 7, 4, 2, 6, 9, 12, 4, 6, 15, 9, 6, 7, 13, 15, 5, 4, 19, 6, 7, 7, 9, 9, 6, 0, 12, 9, 0, 11, 4, 6, 0, 0, 7, 9, 6, 4, 5, 1, 16, 6, 18, 14 };
        int[] D = { 272, 72, 6032, 9416, 7608, 1480, 248, 9040, 4664, 600, 8400, 6344, 10000, 2176, 488, 7040, 7872, 9768, 6328, 1792, 9208, 3776, 5840, 2552, 1976, 2400, 7848, 4976, 6216, 1000, 5960, 5672, 1576, 4176, 2520, 2488, 2792, 16, 9528, 6032, 6416, 2416, 7648, 648, 3352, 4200, 7200, 3312, 6568, 2208 };
        long T = 23760L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case16() {
        int N = 29;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 27, 16, 28, 18, 26, 17, 18, 10, 16, 8, 27, 25, 25, 13, 24, 22, 7, 27, 9, 19, 19, 17 };
        int[] B = { 0, 0, 0, 1, 1, 0, 1, 2, 8, 3, 4, 8, 4, 1, 2, 11, 14, 14, 15, 19, 12, 1, 2, 14, 0, 15, 15, 12, 2, 0, 16, 4, 17, 16, 8, 0, 13, 7, 14, 5, 19, 5, 22, 4, 4, 9, 0, 11, 16, 8 };
        int[] D = { 1390, 3830, 450, 8290, 3940, 5760, 9810, 10, 5970, 9480, 3710, 880, 5440, 7340, 8530, 2620, 8250, 4010, 3810, 7790, 8580, 4240, 4990, 150, 8460, 6630, 5100, 6110, 8500, 2190, 2910, 560, 7440, 5560, 3860, 5350, 2760, 3220, 1520, 2270, 2520, 4600, 7840, 7150, 4380, 8800, 6990, 1010, 1380, 2860 };
        long T = 26752L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case17() {
        int N = 36;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 33, 19, 33, 14, 6, 25, 31, 34, 30, 26, 28, 22, 12, 35, 19 };
        int[] B = { 0, 0, 2, 2, 3, 4, 5, 1, 0, 3, 7, 9, 5, 10, 0, 2, 7, 6, 12, 16, 2, 16, 16, 16, 14, 12, 24, 16, 17, 14, 14, 11, 13, 15, 20, 28, 1, 9, 8, 2, 8, 15, 30, 7, 24, 13, 6, 7, 2, 18 };
        int[] D = { 4322, 3460, 9912, 8166, 8730, 6066, 8628, 8392, 8658, 5010, 9712, 5424, 7764, 3222, 9810, 5104, 5234, 3524, 7730, 812, 4246, 228, 9888, 7274, 238, 5990, 4378, 7488, 5280, 9006, 688, 142, 2440, 6426, 6636, 9866, 5566, 8196, 5720, 4148, 1182, 9640, 8022, 1824, 6032, 9958, 7086, 2092, 6542, 1126 };
        long T = 63016L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case18() {
        int N = 43;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 32, 37, 5, 18, 13, 41, 29, 40 };
        int[] B = { 0, 1, 0, 2, 2, 1, 0, 4, 2, 9, 0, 11, 12, 1, 7, 6, 11, 12, 12, 6, 0, 19, 0, 8, 11, 2, 13, 26, 15, 19, 30, 10, 14, 26, 13, 11, 28, 4, 10, 17, 35, 34, 4, 1, 3, 9, 9, 31, 19, 21 };
        int[] D = { 4365, 4705, 270, 1650, 1165, 1405, 6800, 7375, 205, 3885, 7950, 8525, 95, 4845, 7435, 6335, 3315, 1875, 8495, 9110, 140, 2080, 1140, 9210, 2050, 795, 4680, 8830, 3810, 8810, 4165, 1365, 6100, 975, 4020, 6275, 660, 2585, 1525, 8420, 7375, 5570, 2060, 7725, 8545, 8800, 9030, 3365, 8965, 5865 };
        long T = 31059L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case19() {
        int N = 13;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 10, 10, 10, 12, 7, 10, 10, 11, 8, 11, 12, 7, 9, 9, 11, 8, 11, 11, 11, 9, 9, 5, 11, 3, 7, 4, 6, 6, 10, 8, 5, 7, 9, 12, 12, 12, 7, 8 };
        int[] B = { 0, 1, 2, 2, 0, 2, 2, 6, 8, 9, 6, 5, 7, 3, 1, 7, 1, 8, 4, 5, 3, 8, 2, 0, 4, 0, 0, 4, 1, 9, 10, 5, 7, 2, 4, 1, 3, 1, 4, 0, 5, 7, 1, 6, 2, 1, 8, 11, 5, 2 };
        int[] D = { 9999, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 9999, 10000, 9999, 9999, 10000, 10000, 9999, 9999, 9999, 9999, 10000, 9999, 9999, 10000, 10000, 10000, 9999, 10000, 9999, 10000, 10000, 9999, 9999, 10000, 10000, 10000, 10000, 10000, 9999, 9999, 10000, 9999, 9999, 9999, 10000, 9999, 9999, 10000, 9999, 10000 };
        long T = 99989999L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case20() {
        int N = 20;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 13, 7, 11, 6, 13, 17, 17, 5, 15, 13, 18, 18, 14, 11, 17, 12, 18, 3, 19, 19, 13, 17, 14, 6, 16, 11, 16, 12, 13, 16, 16 };
        int[] B = { 0, 1, 1, 0, 2, 3, 1, 0, 6, 1, 3, 3, 6, 5, 1, 14, 11, 13, 16, 7, 6, 8, 2, 11, 3, 12, 3, 9, 5, 12, 10, 8, 10, 5, 2, 15, 0, 14, 7, 9, 7, 13, 0, 10, 9, 1, 7, 8, 3, 6 };
        int[] D = { 9999, 10000, 10000, 10000, 10000, 9999, 9999, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 9999, 9999, 9999, 9999, 9999, 10000, 10000, 9999, 9999, 10000, 9999, 10000, 9999, 9999, 9999, 10000, 10000, 10000, 9999, 10000, 9999, 9999, 9999, 10000, 10000, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        long T = 99980001L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case21() {
        int N = 27;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 18, 10, 16, 19, 23, 21, 24, 26, 20, 21, 20, 8, 21, 17, 14, 14, 17, 26, 23, 20, 26, 24, 14 };
        int[] B = { 0, 1, 2, 3, 1, 2, 5, 4, 0, 3, 8, 4, 12, 7, 10, 11, 11, 16, 1, 18, 2, 16, 20, 22, 5, 13, 17, 0, 5, 3, 2, 14, 19, 23, 18, 14, 15, 13, 2, 0, 7, 8, 12, 13, 6, 10, 12, 19, 11, 5 };
        int[] D = { 9999, 9999, 10000, 10000, 10000, 9999, 9999, 10000, 10000, 10000, 9999, 10000, 9999, 10000, 9999, 10000, 10000, 9999, 10000, 9999, 9999, 10000, 9999, 9999, 9999, 9999, 9999, 10000, 10000, 10000, 10000, 9999, 10000, 9999, 10000, 10000, 10000, 9999, 9999, 9999, 9999, 10000, 10000, 10000, 9999, 9999, 10000, 9999, 10000, 10000 };
        long T = 99999999L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case22() {
        int N = 34;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 24, 28, 24, 5, 26, 32, 22, 33, 31, 13, 30, 33, 16, 30, 11, 28, 27 };
        int[] B = { 0, 1, 2, 2, 2, 0, 4, 4, 6, 0, 7, 11, 2, 5, 11, 5, 11, 15, 9, 8, 3, 9, 10, 5, 21, 1, 18, 23, 13, 0, 9, 6, 22, 4, 7, 9, 4, 18, 2, 21, 17, 14, 7, 5, 7, 3, 12, 5, 9, 14 };
        int[] D = { 10000, 9999, 10000, 9999, 10000, 9999, 9999, 10000, 10000, 9999, 9999, 10000, 9999, 9999, 10000, 10000, 10000, 9999, 9999, 9999, 9999, 10000, 9999, 10000, 9999, 10000, 10000, 9999, 9999, 9999, 9999, 9999, 10000, 10000, 9999, 9999, 10000, 10000, 9999, 9999, 10000, 9999, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 10000 };
        long T = 99999998L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case23() {
        int N = 41;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 13, 19, 37, 29, 25, 8, 26, 31, 34, 33 };
        int[] B = { 0, 1, 2, 3, 1, 2, 3, 7, 7, 2, 10, 8, 10, 12, 14, 3, 15, 3, 14, 0, 8, 20, 8, 21, 8, 4, 8, 22, 5, 26, 2, 10, 19, 7, 23, 7, 35, 31, 25, 21, 2, 15, 33, 1, 17, 4, 14, 29, 5, 27 };
        int[] D = { 10000, 10000, 9999, 9999, 9999, 10000, 10000, 10000, 9999, 9999, 9999, 10000, 10000, 9999, 10000, 10000, 10000, 9999, 9999, 10000, 9999, 10000, 10000, 9999, 9999, 9999, 9999, 10000, 9999, 9999, 9999, 10000, 9999, 9999, 10000, 9999, 9999, 9999, 9999, 10000, 9999, 9999, 9999, 10000, 9999, 9999, 10000, 9999, 9999, 9999 };
        long T = 100039997L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case24() {
        int N = 15;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 10, 12, 10, 8, 6, 13, 9, 7, 11, 14, 14, 14, 14, 9, 8, 3, 14, 5, 4, 8, 9, 10, 12, 10, 8, 6, 10, 8, 10, 13, 6, 13, 7, 5, 13, 11 };
        int[] B = { 0, 1, 2, 2, 0, 2, 2, 6, 8, 9, 6, 5, 11, 6, 0, 7, 6, 5, 1, 0, 7, 3, 10, 11, 4, 12, 3, 3, 1, 0, 2, 2, 0, 2, 0, 1, 8, 2, 3, 0, 8, 7, 7, 8, 5, 9, 6, 1, 2, 3 };
        int[] D = { 1138, 9359, 3178, 2398, 2295, 7905, 1610, 6232, 9746, 4176, 3636, 6299, 8143, 400, 7969, 413, 261, 3558, 1595, 8009, 6396, 5969, 9114, 4531, 1007, 963, 7943, 5366, 2083, 9853, 768, 3822, 5696, 4713, 3672, 9902, 8591, 4832, 4739, 3058, 1617, 9791, 5641, 680, 7336, 7007, 7973, 6099, 9096, 5320 };
        long T = 12278L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case25() {
        int N = 22;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 12, 17, 15, 17, 8, 18, 21, 16, 15, 20, 19, 10, 17, 9, 15, 15, 17, 9, 8, 19, 14, 21, 18, 20, 17, 3, 20, 2, 16 };
        int[] B = { 0, 1, 0, 3, 1, 5, 2, 6, 1, 0, 7, 10, 1, 6, 9, 3, 9, 10, 0, 10, 3, 8, 3, 14, 6, 7, 17, 10, 8, 4, 4, 17, 1, 8, 4, 11, 7, 5, 8, 4, 15, 7, 9, 8, 2, 7, 1, 6, 0, 5 };
        int[] D = { 204, 3901, 4521, 2534, 1259, 7004, 8677, 951, 3935, 8781, 9880, 1833, 2575, 3550, 4543, 6250, 2772, 6311, 5880, 984, 9971, 2041, 2724, 3651, 2972, 3230, 319, 7747, 300, 7231, 5622, 777, 125, 8245, 6959, 7697, 6772, 9065, 1561, 6599, 8752, 9941, 4504, 9552, 2802, 7206, 5081, 419, 9275, 9650 };
        long T = 15771L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case26() {
        int N = 29;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 23, 25, 15, 20, 21, 5, 8, 26, 27, 7, 28, 21, 25, 22, 13, 23, 21, 28, 24, 2, 22, 16 };
        int[] B = { 0, 1, 1, 1, 3, 0, 0, 3, 4, 1, 4, 6, 9, 5, 3, 13, 8, 14, 4, 12, 2, 9, 5, 8, 24, 13, 20, 15, 8, 22, 10, 4, 6, 4, 1, 19, 23, 1, 2, 12, 18, 21, 2, 13, 8, 22, 14, 0, 6, 11 };
        int[] D = { 2631, 4411, 8081, 6114, 3343, 8139, 8383, 6045, 8829, 8394, 3576, 981, 9001, 5597, 5948, 7371, 6088, 6544, 2734, 2853, 262, 6825, 4401, 2381, 779, 1858, 3424, 9499, 7015, 2846, 1663, 8510, 6611, 6850, 9219, 9291, 5056, 5744, 8556, 6386, 6535, 6276, 7322, 1152, 1227, 5252, 4460, 2784, 6715, 6438 };
        long T = 40255L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case27() {
        int N = 36;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 16, 17, 7, 17, 20, 31, 29, 30, 32, 13, 22, 26, 22, 18, 26 };
        int[] B = { 0, 1, 2, 0, 2, 1, 1, 3, 0, 7, 2, 4, 2, 5, 14, 10, 4, 14, 17, 1, 17, 4, 3, 0, 19, 3, 9, 23, 20, 1, 6, 3, 6, 2, 2, 2, 13, 6, 16, 0, 8, 8, 24, 5, 3, 12, 6, 15, 2, 4 };
        int[] D = { 7444, 7323, 7014, 8442, 4782, 5780, 9519, 7161, 1730, 4956, 9083, 9365, 3033, 9314, 9196, 4329, 2505, 9856, 7712, 3882, 1611, 9905, 2552, 7617, 6762, 8865, 5406, 2123, 5114, 4944, 8637, 5119, 2995, 2189, 3744, 7640, 4503, 344, 5071, 6220, 8213, 3318, 9933, 7783, 4098, 7860, 7074, 5591, 4820, 4011 };
        long T = 64728L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case28() {
        int N = 43;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 13, 29, 32, 6, 11, 31, 10, 31 };
        int[] B = { 0, 1, 2, 2, 3, 5, 1, 5, 7, 0, 8, 9, 12, 13, 13, 3, 8, 2, 5, 2, 14, 21, 14, 1, 7, 6, 21, 26, 25, 27, 20, 11, 11, 2, 2, 13, 1, 33, 28, 38, 31, 29, 4, 15, 25, 3, 2, 6, 4, 10 };
        int[] D = { 3982, 4466, 6326, 2495, 3894, 3065, 4564, 5430, 5502, 6873, 6941, 8054, 4330, 2233, 2281, 9360, 5475, 41, 8777, 5590, 7705, 19, 4969, 7487, 1267, 663, 6375, 7699, 9822, 8028, 4416, 4228, 9842, 8410, 159, 936, 3766, 4762, 7762, 2833, 273, 1220, 6195, 8804, 5255, 8132, 517, 2305, 7684, 7475 };
        long T = 48858L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case29() {
        int N = 15;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 6, 11, 9, 8, 3, 9, 11, 10, 4, 8, 11, 8, 9, 13, 14, 6, 11, 13, 9, 11, 9, 11, 7, 12, 13, 6, 10, 10, 10, 7, 14, 7, 14, 13, 12, 10 };
        int[] B = { 0, 0, 1, 0, 4, 2, 1, 5, 0, 5, 10, 2, 8, 5, 4, 4, 7, 2, 0, 2, 8, 2, 2, 1, 7, 6, 4, 1, 3, 0, 0, 12, 3, 5, 6, 2, 0, 3, 10, 3, 8, 7, 3, 4, 9, 6, 1, 5, 10, 4 };
        int[] D = { 616, 4466, 7865, 4598, 4719, 6369, 7392, 275, 6182, 8580, 7018, 7018, 6138, 2673, 7832, 7843, 4631, 6853, 3850, 2585, 6006, 6622, 8437, 770, 2860, 9493, 8074, 8041, 9922, 8030, 3278, 385, 7601, 6567, 8613, 275, 6006, 3641, 814, 3399, 7095, 2035, 6336, 1177, 3960, 7645, 7799, 440, 2222, 4092 };
        long T = 10061081149964288L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case30() {
        int N = 22;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 19, 21, 19, 21, 10, 13, 18, 20, 21, 12, 18, 13, 18, 16, 14, 11, 11, 18, 13, 16, 19, 13, 3, 21, 4, 14, 19, 16, 19 };
        int[] B = { 0, 0, 0, 2, 0, 2, 1, 6, 8, 4, 4, 6, 12, 10, 5, 7, 0, 15, 10, 17, 8, 12, 1, 5, 10, 9, 5, 2, 3, 20, 8, 7, 1, 11, 10, 13, 9, 3, 3, 3, 1, 2, 10, 2, 6, 3, 9, 11, 14, 9 };
        int[] D = { 6032, 9416, 7608, 1480, 248, 9040, 4664, 600, 8400, 6344, 10000, 2176, 488, 7040, 7872, 9768, 6328, 1792, 9208, 3776, 5840, 2552, 1976, 2400, 7848, 4976, 6216, 1000, 5960, 5672, 1576, 4176, 2520, 2488, 2792, 16, 9528, 6032, 6416, 2416, 7648, 648, 3352, 4200, 7200, 3312, 6568, 2208, 6104, 4272 };
        long T = 20195829578989568L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case31() {
        int N = 29;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 28, 24, 20, 9, 16, 11, 16, 25, 26, 24, 22, 23, 24, 20, 11, 23, 18, 23, 5, 17, 4, 12 };
        int[] B = { 0, 1, 0, 2, 0, 5, 3, 5, 2, 2, 0, 8, 5, 7, 5, 0, 0, 9, 9, 7, 8, 21, 0, 21, 23, 6, 15, 14, 6, 5, 2, 5, 8, 1, 12, 17, 20, 2, 4, 21, 3, 1, 8, 11, 6, 13, 3, 10, 3, 4 };
        int[] D = { 9667, 8582, 7224, 6307, 3675, 511, 7252, 7525, 4004, 1148, 8554, 1771, 4998, 7567, 6139, 791, 9205, 6650, 5488, 5369, 9961, 9842, 4557, 7938, 9317, 1862, 9401, 4809, 5404, 3640, 4900, 6174, 3437, 3052, 3878, 6776, 8337, 9240, 2464, 7280, 3045, 9226, 4060, 3185, 5187, 1946, 1526, 4137, 8967, 4585 };
        long T = 209487751416905728L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case32() {
        int N = 36;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 22, 35, 32, 25, 30, 28, 34, 31, 30, 32, 34, 17, 34, 6, 33 };
        int[] B = { 0, 0, 1, 1, 0, 1, 0, 1, 6, 0, 4, 2, 12, 2, 12, 8, 3, 14, 10, 4, 9, 6, 8, 12, 8, 6, 25, 23, 18, 11, 28, 23, 8, 12, 18, 10, 16, 25, 9, 13, 2, 1, 19, 5, 5, 17, 8, 8, 4, 23 };
        int[] D = { 4920, 4264, 4512, 3568, 4632, 40, 8848, 1696, 1056, 2888, 9240, 416, 936, 4096, 920, 3248, 6984, 912, 9552, 9096, 952, 3960, 7512, 9952, 1120, 6024, 2752, 568, 9760, 5704, 6544, 9464, 2264, 2784, 2880, 6592, 4728, 8560, 2088, 7296, 4128, 9832, 8344, 8368, 6168, 4504, 4072, 1872, 8800, 5680 };
        long T = 4626470051774464L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case33() {
        int N = 43;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 31, 8, 33, 40, 31, 21, 32, 40 };
        int[] B = { 0, 1, 2, 0, 4, 0, 0, 3, 5, 7, 8, 0, 5, 12, 1, 11, 11, 17, 11, 6, 16, 3, 7, 5, 4, 12, 7, 15, 28, 13, 4, 17, 13, 27, 17, 35, 35, 7, 32, 14, 17, 8, 30, 4, 14, 11, 16, 8, 21, 26 };
        int[] D = { 5778, 2178, 9909, 171, 2034, 252, 9441, 4455, 918, 2547, 6426, 9738, 2916, 306, 6885, 6246, 4338, 2790, 243, 1557, 5301, 3735, 7785, 7488, 3231, 3375, 5373, 2403, 4896, 9819, 6453, 5301, 3654, 4941, 7065, 5589, 6291, 1800, 3465, 4392, 6840, 6687, 1188, 3951, 4203, 2511, 216, 8919, 3834, 4671 };
        long T = 4872348339535872L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case34() {
        int N = 50;
        int[] A = { 14, 21, 24, 6, 31, 48, 47, 43, 33, 46, 47, 42, 28, 43, 33, 24, 28, 44, 17, 23, 40, 37, 37, 35, 33, 48, 27, 25, 11, 41, 30, 48, 2, 26, 34, 38, 38, 49, 32, 47, 8, 30, 28, 38, 22, 46, 29, 47, 33, 42 };
        int[] B = { 4, 0, 22, 0, 15, 24, 41, 13, 28, 9, 27, 28, 12, 31, 16, 10, 10, 28, 0, 15, 3, 10, 4, 28, 31, 39, 4, 11, 0, 0, 7, 10, 1, 23, 10, 37, 20, 18, 27, 18, 5, 27, 27, 22, 16, 7, 11, 35, 5, 18 };
        int[] D = { 5254, 3930, 6097, 554, 662, 4859, 7492, 2964, 2921, 769, 1688, 6527, 5473, 5220, 5642, 8205, 2952, 8093, 8446, 1371, 9475, 1963, 6177, 5318, 5827, 8414, 3345, 2572, 5980, 1036, 8130, 7289, 9849, 979, 5618, 7724, 7839, 9509, 8930, 4927, 9969, 1807, 5200, 2256, 9830, 3277, 3489, 7897, 2820, 1865 };
        long T = 117091137294192417L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case35() {
        int N = 50;
        int[] A = { 34, 34, 37, 19, 20, 44, 38, 21, 42, 34, 38, 15, 26, 41, 29, 19, 35, 38, 21, 28, 34, 38, 20, 36, 30, 23, 33, 30, 38, 31, 36, 39, 48, 31, 48, 49, 26, 34, 17, 10, 38, 33, 20, 42, 45, 24, 34, 41, 44, 47 };
        int[] B = { 33, 32, 36, 17, 14, 4, 19, 20, 18, 13, 30, 4, 3, 16, 10, 0, 29, 24, 10, 25, 29, 36, 5, 32, 8, 18, 30, 19, 31, 14, 8, 24, 9, 2, 28, 11, 6, 28, 13, 7, 32, 24, 18, 25, 24, 16, 10, 12, 35, 27 };
        int[] D = { 8777, 5590, 7705, 19, 4969, 7487, 1267, 663, 6375, 7699, 9822, 8028, 4416, 4228, 9842, 8410, 159, 936, 3766, 4762, 7762, 2833, 273, 1220, 6195, 8804, 5255, 8132, 517, 2305, 7684, 7475, 5114, 2412, 5545, 5709, 1760, 3806, 4673, 3793, 1173, 216, 5230, 3514, 7144, 1481, 6510, 8306, 9185, 5050 };
        long T = 935059511052851210L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case36() {
        int N = 50;
        int[] A = { 30, 11, 22, 8, 17, 37, 19, 37, 47, 44, 45, 46, 49, 48, 41, 28, 30, 46, 28, 46, 49, 16, 48, 39, 28, 21, 27, 48, 10, 20, 31, 36, 26, 23, 28, 38, 36, 26, 43, 27, 44, 41, 36, 43, 32, 32, 48, 41, 25, 36 };
        int[] B = { 4, 5, 18, 6, 10, 34, 7, 10, 8, 43, 15, 26, 18, 44, 2, 13, 29, 9, 26, 7, 16, 2, 2, 27, 1, 14, 1, 13, 2, 15, 18, 13, 11, 14, 24, 7, 25, 19, 30, 5, 42, 28, 35, 3, 22, 18, 1, 26, 4, 28 };
        int[] D = { 4782, 7333, 3642, 9282, 7502, 7248, 6224, 6816, 8862, 6662, 2233, 1027, 741, 1563, 3965, 3760, 9578, 4436, 2056, 3824, 8927, 2060, 2924, 5866, 8940, 9647, 3668, 4722, 2084, 1952, 1674, 3044, 2587, 9600, 8418, 3862, 1794, 7156, 8615, 295, 2917, 8674, 5208, 1202, 3381, 8059, 9805, 4092, 8845, 7382 };
        long T = 784959963623033199L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case37() {
        int N = 50;
        int[] A = { 38, 32, 35, 46, 41, 41, 9, 37, 45, 25, 24, 33, 45, 45, 29, 22, 41, 47, 7, 38, 1, 38, 35, 17, 41, 23, 28, 33, 32, 33, 27, 28, 47, 32, 30, 41, 44, 41, 22, 32, 40, 37, 21, 47, 39, 44, 31, 46, 41, 20 };
        int[] B = { 23, 26, 13, 36, 18, 33, 1, 13, 27, 1, 0, 22, 20, 31, 5, 13, 4, 44, 3, 6, 0, 35, 1, 10, 28, 19, 4, 24, 20, 25, 7, 11, 5, 21, 29, 6, 5, 22, 1, 13, 30, 17, 7, 21, 35, 36, 25, 45, 23, 19 };
        int[] D = { 6355, 9461, 8777, 3072, 9780, 7071, 7800, 5622, 7593, 9889, 8890, 738, 2280, 913, 6698, 6628, 3016, 897, 2024, 147, 4160, 4063, 3969, 9669, 2662, 939, 2169, 4912, 3583, 6732, 7896, 1900, 4324, 6427, 1198, 110, 7368, 4817, 1991, 7530, 6170, 3779, 3810, 4002, 3790, 967, 6041, 1450, 8219, 7115 };
        long T = 5844775241864242L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case38() {
        int N = 50;
        int[] A = { 34, 39, 22, 44, 23, 48, 17, 44, 44, 17, 41, 32, 32, 44, 36, 42, 40, 45, 27, 33, 45, 44, 16, 28, 33, 46, 44, 43, 32, 49, 43, 42, 41, 43, 16, 39, 46, 48, 13, 22, 19, 37, 44, 17, 43, 46, 5, 16, 18, 21 };
        int[] B = { 20, 8, 12, 43, 14, 45, 9, 15, 28, 3, 17, 23, 20, 16, 33, 19, 27, 29, 15, 23, 19, 38, 2, 20, 25, 36, 9, 39, 21, 25, 23, 6, 30, 31, 3, 37, 15, 3, 3, 20, 16, 21, 37, 14, 20, 4, 0, 8, 1, 2 };
        int[] D = { 1720, 1399, 118, 4158, 3198, 2830, 5996, 7764, 9335, 5355, 2245, 3405, 271, 1106, 1015, 1937, 4810, 9732, 9171, 8334, 8698, 6165, 6070, 5140, 8529, 2991, 8543, 1864, 3418, 1111, 818, 8208, 8425, 2205, 6837, 3878, 2758, 3511, 6588, 1985, 4820, 8252, 3611, 9558, 7815, 876, 4621, 6222, 7856, 1496 };
        long T = 930249854028346019L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case39() {
        int N = 15;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 9, 5, 13, 11, 4, 12, 3, 14, 6, 11, 10, 12, 13, 8, 10, 8, 7, 13, 13, 12, 13, 12, 9, 8, 9, 9, 12, 14, 14, 10, 14, 11, 7, 6, 7, 14 };
        int[] B = { 0, 1, 0, 1, 0, 5, 6, 3, 0, 1, 0, 5, 0, 11, 4, 2, 10, 8, 3, 11, 2, 5, 1, 6, 9, 3, 4, 1, 5, 5, 2, 12, 2, 9, 8, 7, 8, 7, 6, 2, 1, 1, 7, 7, 13, 2, 0, 3, 4, 9 };
        int[] D = { 4393, 9061, 1807, 5445, 9333, 7099, 6049, 5603, 3707, 1955, 4817, 6457, 9867, 597, 7963, 7271, 6027, 7731, 9629, 8127, 9073, 8851, 3339, 8231, 189, 1259, 3003, 3035, 8391, 211, 809, 8903, 8597, 4377, 2247, 9011, 3765, 3505, 3133, 3433, 675, 8877, 6289, 3003, 9795, 7743, 1657, 2275, 8717, 6355 };
        long T = 70982397147722295L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case40() {
        int N = 22;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 9, 12, 12, 3, 19, 16, 20, 7, 21, 17, 20, 20, 20, 7, 16, 21, 19, 20, 15, 11, 14, 9, 14, 16, 16, 13, 11, 21, 14 };
        int[] B = { 0, 1, 2, 3, 0, 1, 4, 5, 8, 7, 4, 1, 8, 11, 0, 7, 0, 11, 0, 13, 14, 6, 7, 5, 0, 14, 5, 11, 6, 16, 6, 7, 1, 3, 2, 9, 10, 2, 5, 6, 10, 13, 2, 9, 1, 13, 6, 6, 6, 1 };
        int[] D = { 2603, 7745, 1121, 189, 7969, 7511, 9579, 2815, 6031, 387, 5539, 1361, 6911, 3711, 5013, 1927, 7005, 3353, 6217, 6499, 4663, 5689, 5277, 1617, 9995, 7303, 9699, 407, 1463, 3063, 6029, 839, 3551, 4019, 361, 5859, 447, 8109, 6521, 3475, 3091, 4635, 5051, 8401, 8513, 3129, 1195, 3297, 5409, 1101 };
        long T = 605925150416541977L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case41() {
        int N = 29;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 22, 17, 13, 25, 25, 7, 25, 16, 23, 12, 26, 13, 14, 3, 10, 25, 17, 28, 6, 25, 27, 27 };
        int[] B = { 0, 1, 2, 1, 4, 3, 2, 5, 8, 9, 2, 7, 0, 9, 14, 11, 4, 13, 12, 7, 0, 15, 4, 1, 4, 23, 14, 25, 1, 10, 8, 0, 14, 6, 12, 13, 8, 3, 9, 2, 5, 0, 5, 22, 0, 13, 1, 18, 20, 16 };
        int[] D = { 1797, 1185, 3441, 2233, 3161, 7735, 8705, 3879, 7397, 9803, 1623, 3233, 3783, 7343, 3457, 3343, 3323, 4091, 6241, 481, 4317, 8907, 9255, 701, 7423, 1127, 9189, 5067, 3455, 5655, 7591, 9063, 4885, 3033, 13, 7031, 3849, 5203, 4195, 7323, 4207, 8649, 217, 9873, 4563, 4031, 7421, 6433, 3811, 1947 };
        long T = 111767781225882721L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case42() {
        int N = 36;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 10, 20, 29, 13, 12, 34, 30, 22, 22, 34, 25, 27, 10, 26, 32 };
        int[] B = { 0, 1, 2, 3, 0, 5, 2, 1, 4, 9, 4, 9, 8, 1, 6, 1, 2, 7, 0, 17, 10, 19, 20, 21, 16, 9, 10, 19, 16, 9, 2, 13, 6, 17, 0, 3, 3, 20, 10, 11, 21, 21, 11, 13, 3, 14, 2, 7, 3, 31 };
        int[] D = { 523, 3649, 8801, 4761, 1557, 3715, 6847, 8997, 4029, 5691, 3325, 7019, 3221, 3699, 8437, 8581, 111, 1487, 7111, 2771, 3069, 2551, 4643, 2303, 2453, 503, 8919, 5567, 3429, 2875, 5759, 5397, 8201, 6275, 8571, 1757, 6569, 685, 9831, 1921, 6135, 281, 1415, 7133, 1457, 1125, 2727, 3939, 5781, 5247 };
        long T = 567222278624917314L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case43() {
        int N = 43;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 25, 41, 39, 34, 36, 27, 30, 17 };
        int[] B = { 0, 1, 0, 1, 0, 1, 6, 1, 2, 3, 2, 9, 4, 1, 0, 9, 2, 11, 8, 19, 4, 9, 20, 23, 16, 15, 22, 9, 26, 23, 16, 1, 26, 27, 22, 23, 0, 7, 14, 27, 28, 33, 8, 2, 30, 21, 31, 8, 5, 6 };
        int[] D = { 1579, 3445, 1191, 1211, 4639, 7383, 1443, 5549, 7029, 9725, 1413, 2567, 9253, 2839, 7603, 8661, 5289, 4751, 6517, 2925, 6263, 3473, 1441, 6617, 2049, 3895, 1017, 6823, 8795, 2001, 6629, 3793, 7999, 1291, 5067, 9925, 1079, 7509, 7643, 8573, 3073, 21, 9325, 6347, 8987, 3271, 9977, 9143, 3677, 9643 };
        long T = 688964891201098414L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case44() {
        int N = 15;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 14, 12, 13, 12, 14, 14, 14, 12, 13, 6, 11, 10, 10, 11, 13, 13, 11, 12, 11, 8, 9, 14, 8, 8, 7, 6, 7, 5, 13, 9, 13, 3, 11, 10, 9 };
        int[] B = { 0, 1, 0, 1, 4, 1, 4, 1, 2, 7, 10, 9, 0, 3, 7, 9, 1, 4, 3, 1, 13, 11, 11, 2, 3, 4, 9, 5, 6, 12, 8, 8, 5, 0, 7, 6, 7, 3, 5, 0, 5, 6, 0, 6, 0, 10, 2, 2, 3, 8 };
        int[] D = { 5491, 4691, 9057, 2953, 7131, 8477, 1771, 8373, 2141, 7397, 4935, 667, 4343, 4763, 4323, 8943, 3747, 5621, 7429, 3683, 6665, 755, 3001, 6191, 1613, 269, 619, 7549, 8105, 3493, 4271, 1573, 9325, 3765, 2811, 7687, 8479, 8061, 7193, 5167, 55, 8721, 991, 7259, 8019, 9339, 1375, 1633, 4799, 9123 };
        long T = 177053748122986473L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case45() {
        int N = 22;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 20, 16, 16, 19, 20, 21, 15, 18, 11, 9, 13, 19, 18, 13, 13, 20, 19, 13, 18, 11, 8, 20, 14, 6, 13, 9, 4, 6, 21 };
        int[] B = { 0, 1, 0, 3, 4, 3, 6, 1, 0, 3, 2, 3, 10, 9, 2, 11, 16, 1, 8, 9, 8, 7, 9, 7, 6, 15, 14, 14, 7, 6, 8, 4, 10, 3, 0, 6, 3, 14, 8, 11, 4, 5, 19, 13, 1, 2, 2, 1, 5, 20 };
        int[] D = { 4921, 8471, 3197, 8549, 3401, 7935, 4047, 5119, 459, 1431, 8761, 2843, 5077, 3391, 8283, 551, 6597, 9607, 3191, 5647, 6417, 8625, 7079, 3531, 1649, 5499, 739, 4847, 2963, 5745, 4331, 2713, 2985, 2835, 4623, 7171, 803, 3841, 4271, 5429, 7311, 1861, 929, 3827, 9351, 7989, 4553, 8227, 5041, 209 };
        long T = 400214814284575073L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case46() {
        int N = 29;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 13, 20, 15, 26, 12, 16, 23, 8, 24, 18, 25, 14, 24, 25, 17, 26, 10, 17, 27, 19, 15, 10 };
        int[] B = { 0, 1, 2, 1, 4, 3, 2, 1, 6, 1, 8, 7, 4, 7, 6, 15, 2, 9, 2, 1, 0, 9, 10, 23, 10, 3, 24, 9, 6, 3, 10, 5, 11, 13, 6, 3, 17, 11, 12, 1, 13, 24, 14, 7, 5, 4, 16, 4, 2, 7 };
        int[] D = { 777, 1847, 7295, 3353, 1615, 4097, 6303, 2279, 7331, 6497, 3957, 9357, 5197, 85, 3089, 1217, 181, 9255, 5347, 1483, 8057, 1015, 9795, 2647, 9747, 4261, 2841, 4375, 111, 1909, 5291, 417, 9697, 6847, 7615, 7019, 9463, 327, 5963, 2741, 6055, 993, 5419, 5379, 9851, 8283, 7489, 7595, 2319, 29 };
        long T = 812615839785894801L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case47() {
        int N = 36;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 31, 17, 26, 33, 34, 31, 26, 34, 34, 16, 29, 30, 20, 28, 35 };
        int[] B = { 0, 1, 2, 3, 0, 3, 6, 7, 8, 3, 2, 11, 10, 1, 0, 9, 4, 13, 16, 5, 4, 7, 22, 19, 22, 23, 8, 5, 8, 27, 10, 23, 10, 11, 32, 12, 0, 13, 24, 23, 14, 19, 5, 19, 3, 18, 23, 11, 25, 22 };
        int[] D = { 3467, 6601, 2919, 3145, 3187, 1105, 1487, 1805, 7881, 1565, 1879, 6047, 5737, 1813, 6337, 1569, 3493, 5039, 8707, 9565, 3823, 2907, 5525, 7881, 7063, 9353, 5671, 6699, 5853, 9777, 683, 1341, 1585, 8289, 941, 9739, 6657, 9871, 6159, 6111, 8289, 7991, 3609, 7359, 3077, 9347, 5533, 8831, 6849, 4215 };
        long T = 675863245192549733L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case48() {
        int N = 43;
        int[] A = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 41, 25, 38, 31, 34, 25, 31, 28 };
        int[] B = { 0, 1, 0, 3, 4, 5, 0, 1, 8, 9, 6, 3, 4, 1, 12, 7, 8, 7, 6, 1, 14, 15, 18, 1, 14, 21, 18, 15, 20, 21, 4, 7, 6, 31, 20, 25, 36, 27, 24, 3, 26, 1, 6, 12, 37, 0, 29, 16, 24, 25 };
        int[] D = { 6823, 2033, 795, 4659, 4407, 8375, 2871, 1011, 1527, 4059, 853, 879, 6813, 5959, 6773, 2087, 2657, 659, 4047, 6099, 6675, 9175, 533, 9369, 6737, 8059, 6197, 6333, 3013, 7449, 6667, 4117, 9983, 1247, 2253, 3263, 3791, 99, 4135, 6905, 7281, 9555, 3843, 2829, 679, 9387, 7881, 1493, 9265, 845 };
        long T = 106265602447062158L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case49() {
        int N = 2;
        int[] A = { 0 };
        int[] B = { 1 };
        int[] D = { 1 };
        long T = 9L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case50() {
        int N = 2;
        int[] A = { 1 };
        int[] B = { 0 };
        int[] D = { 1 };
        long T = 1000000000000000000L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case51() {
        int N = 26;
        int[] A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25 };
        int[] D = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 12 };
        long T = 244L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case52() {
        int N = 2;
        int[] A = { 0 };
        int[] B = { 1 };
        int[] D = { 2 };
        long T = 10000000001L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case53() {
        int N = 5;
        int[] A = { 0, 1, 2, 3 };
        int[] B = { 1, 2, 3, 4 };
        int[] D = { 1, 1, 1, 1 };
        long T = 2L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case54() {
        int N = 3;
        int[] A = { 0, 0, 1 };
        int[] B = { 2, 1, 2 };
        int[] D = { 7, 6, 5 };
        long T = 8L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case55() {
        int N = 50;
        int[] A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        int[] D = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999 };
        long T = 199910555L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case56() {
        int N = 3;
        int[] A = { 0, 0, 1 };
        int[] B = { 2, 1, 2 };
        int[] D = { 7, 6, 5 };
        long T = 3L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case57() {
        int N = 2;
        int[] A = { 0 };
        int[] B = { 1 };
        int[] D = { 2 };
        long T = 3L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case58() {
        int N = 4;
        int[] A = { 0, 1, 3, 2 };
        int[] B = { 1, 3, 2, 0 };
        int[] D = { 4, 5, 5, 5 };
        long T = 10L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case59() {
        int N = 3;
        int[] A = { 0, 1 };
        int[] B = { 1, 2 };
        int[] D = { 3, 5 };
        long T = 11L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case60() {
        int N = 10;
        int[] A = { 0, 1 };
        int[] B = { 8, 9 };
        int[] D = { 1, 1 };
        long T = 10000000000L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case61() {
        int N = 50;
        int[] A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 1 };
        int[] D = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        long T = 703687441776640000L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case62() {
        int N = 50;
        int[] A = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };
        int[] D = { 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984, 9983, 9982, 9981, 9980, 9979, 9978, 9977, 9976, 9975, 9974, 9973, 9972, 9971, 9970, 9969, 9968, 9967, 9966, 9965, 9964, 9963, 9962, 9961, 9960, 9959, 9958, 9957, 9956, 9955, 9954, 9953, 9952 };
        long T = 123456789123456789L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case63() {
        int N = 3;
        int[] A = { 0, 0, 1 };
        int[] B = { 1, 2, 2 };
        int[] D = { 3, 5, 4 };
        long T = 9L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case64() {
        int N = 3;
        int[] A = { 0, 0, 1 };
        int[] B = { 2, 1, 2 };
        int[] D = { 1, 1, 1 };
        long T = 1000000000000000000L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case65() {
        int N = 7;
        int[] A = { 0, 1, 2, 3, 4, 5, 2 };
        int[] B = { 1, 2, 3, 4, 5, 1, 6 };
        int[] D = { 2, 2, 2, 2, 1, 2, 2 };
        long T = 33L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case66() {
        int N = 3;
        int[] A = { 0, 0 };
        int[] B = { 1, 2 };
        int[] D = { 5000, 9999 };
        long T = 100000000000000001L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case67() {
        int N = 10;
        int[] A = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 3, 4, 5, 6, 7, 8, 9, 4, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 6, 7, 8, 9, 7, 8, 9, 8, 9, 9 };
        int[] D = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999 };
        long T = 99980001L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case68() {
        int N = 3;
        int[] A = { 0, 0 };
        int[] B = { 1, 2 };
        int[] D = { 5000, 9999 };
        long T = 10000001L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case69() {
        int N = 3;
        int[] A = { 0, 0 };
        int[] B = { 1, 2 };
        int[] D = { 2, 5 };
        long T = 999999999999999999L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case70() {
        int N = 50;
        int[] A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 };
        int[] D = { 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000 };
        long T = 490000L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case71() {
        int N = 4;
        int[] A = { 0, 1 };
        int[] B = { 3, 2 };
        int[] D = { 2, 1 };
        long T = 8L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case72() {
        int N = 4;
        int[] A = { 0, 1, 1 };
        int[] B = { 1, 2, 3 };
        int[] D = { 1, 1, 1 };
        long T = 1000000000000000000L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case73() {
        int N = 10;
        int[] A = { 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9 };
        int[] B = { 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8 };
        int[] D = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
        long T = 1999L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case74() {
        int N = 4;
        int[] A = { 0, 1, 0 };
        int[] B = { 1, 2, 3 };
        int[] D = { 2, 3, 23 };
        long T = 33L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case75() {
        int N = 10;
        int[] A = { 0, 1, 2, 3, 4, 5, 6, 7, 8 };
        int[] B = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        int[] D = { 2257, 4088, 3339, 532, 5797, 7358, 5767, 9716, 2231 };
        long T = 12345678901234L;
        assertEquals("Impossible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

    @Test
    public void case76() {
        int N = 4;
        int[] A = { 0, 1, 2, 3 };
        int[] B = { 3, 2, 3, 1 };
        int[] D = { 7, 2, 2, 3 };
        long T = 7000000000000L;
        assertEquals("Possible", longlongtripdiv1.isAble(N, A, B, D, T));
    }

}
