package topc.test.graph;

import junit.framework.*;
import org.junit.Test;
import static org.junit.Assert.*;
import topc.graph.*;

public class MazeOnFireTest {
  MazeOnFire mazeonfire = new MazeOnFire();

  @Test
  public void case1() {
    String[] maze = { "F..", ".$.", "..." };
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case2() {
    String[] maze = { 
        ".F#...", 
        "F....#", 
        ".F###.", 
        "F.#.$.", 
        "F.#..." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case3() {
    String[] maze = { 
        "....#.", 
        "$##.#.", 
        ".#..#F", 
        ".F#.#.", 
        "..#..." };
    assertEquals(7, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case4() {
    String[] maze = { "...$..", "..#...", "..###.", "..#...", "F.#.F." };
    assertEquals(7, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case5() {
    String[] maze = { ".F....F.", ".#.##.#.", ".#....#.", "F.$##..F", ".#....#.", ".###.##.", ".F....F." };
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case6() {
    String[] maze = { 
        "F#....", 
        ".####.", 
        "......", 
        ".####.", 
        "$##..." };
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case7() {
    String[] maze = { "F.................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################$", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################.", "..................................................", ".#################################################", "..................................................", "#################################################." };
    assertEquals(1274, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case8() {
    String[] maze = {};
    assertEquals(98, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case9() {
    String[] maze = {};
    assertEquals(50, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case10() {
    String[] maze = { "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "......##########################################..", "......#...........................................", "......#...........F...............................", "......###########################################.", "..................................................", ".#################################################", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".........................................F........", "..................................................", ".#................................................", ".#................................................", ".#...........#.........#########..................", ".#..................$..#F.........................", ".#.....................#######....................", ".################.#...............#...............", "..................#...............................", "###################................#..............", "..................................................", "..................................................", "..................................................", "..................................................", "............................F.....................", "..................................................", "....................................#.............", "..................................................", "..................................................", "..................................................", "..................................................", ".....................................#............", "..................................................", ".......F..........................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................." };
    assertEquals(72, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case11() {
    String[] maze = {};
    assertEquals(47, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case12() {
    String[] maze = {};
    assertEquals(63, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case13() {
    String[] maze = {};
    assertEquals(242, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case14() {
    String[] maze = {};
    assertEquals(3, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case15() {
    String[] maze = {};
    assertEquals(1433, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case16() {
    String[] maze = {};
    assertEquals(77, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case17() {
    String[] maze = {};
    assertEquals(124, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case18() {
    String[] maze = { "##F#F.FFF.F##.#..F#F#..#..#", "#FF.F#FFFF#F.##..###F#F##F.", "F.F##...##..#FF#F..FF.#F###", "#F##F.F#.#F#FF..##FF###.###", "..##F#..F.#F#FF..#F#F.FFF.F", ".#FFF#F#FF..F#.#..#..FF#F#.", "FF.FFF#F.###F#F#F..FF.F..#.", "F..##..#F#.FFF####.FF##F#..", "FF##.F..F#F.F.##.#.F##.##F#", ".###.F##.#.#F#F.F.F#.FF#...", "F.##FF.FFFF.#.FF.FF.##.F##F", "..###F..#####F.FFFF###.F#FF", "F.#...FFFF.###FF#FFF#F###.F", "#F#F.F#F###...###.F#.F#F##F", "##F...#...FF###.F.F#FF#FF.#", "#F#F##.#.#F##.#F..FF.#F#.#F", ".##.###.#..##..FF.#.#..#F.F", ".#...#..#.FF##F.#...#F...F.", "#...FFF.F#...##F.##F.FFF.FF", "FFF#FF..#$FF.F#..F.F.##.#.#", "F##F#FFF#.#F.#.....#..F.##F", ".F.FF#.###.#FF##..F.F.....F" };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case19() {
    String[] maze = { "FF#F#F.F#.$FF..", ".FF##.#F#.F#.##" };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case20() {
    String[] maze = { "###.#FFF#F##.F##F", "F..F.F..F.....FFF", ".#.#.#.$..#.FF.##", "F#.F##F#.#.F...##" };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case21() {
    String[] maze = { "F#F.#F$#FFF.F.#F.#.F..#.F.###..F##", "F.F.F#...##.###F.#.##..#FF..#...#.", ".FFFF##F.##.##F.#.FFF..##F.##F.#.#" };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case22() {
    String[] maze = { "..#..F.F..#..F#.#.#F#.#FF#.F.#....###", "###F...#...##...#.#..#F.#F.F####....$", "F###.F#.FF#F.FFF.F.FF#.#F#.#F##.#FF.#", "#..F#.#.#F...FF#FFF#FF.#.##..F##..F#F", "FF##FF##FFF.F#F#..F.###...###F#.F#.#F", "#.##F.F##F.FFF.FFF##.F#..F#...##F.##F", "F##F.FFF#.F#.F#.F.#F.FF.F.#.F#.#.F.#F", "#F..#FF##F#.#F.#.###F.##.#####..FFF#F", ".F#FFF#.#.F#..FF#F######FF#.FFFF...F#", "F#FF....#..#..#.#F###..#.F#.FF##.##..", ".F.#FFF##FFF#F#F.#..F#.F#F#F#FF#F.FFF", "..#F..FFF..F##F..#F.##F.FFF..#F...#.F", "##F##FFFF#F.F...F####...F#FF#...F#F.#", "F#..#.F.F#F#F..#...##FFFF.F#FF....F#.", ".#FFFF..#F.F....##F.#..FF..#...#F#F##" };
    assertEquals(3, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case23() {
    String[] maze = { "F#..", ".#F.", ".FF#", "...#", "F..#", "..FF", "#.##", "F.##", "#.FF", "##F#", "F#.F", "###.", "#.$#", ".FF#", "#.#F", "FF.F", "FFFF", "#.FF", ".#F.", "F..F", "..FF", ".FF.", "FF##", "..#F", "#..#" };
    assertEquals(1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case24() {
    String[] maze = { ".F.#...FFF...F.F#..#.F.#..FF...#.F#.##..#....#FF#F", "##FFF##F##.##F##F#F#.F###..#.FFF#..FF.F.##...FFFF#", "..##....##FF..#FF..##.FFFFF..F.FF#.##.F.FF.FFFF.#.", "F#.F#....###.F..F#FFF#F.##F##.#F.....##FFF#FF#F..F", "#...F.F##.#.FFF#...#FF.F..#F.#F#FF#####.FF..F..F##", "F.#.##FF#.FF##.#.#F.###FF#F..F.#F..F.###F#F#.#.#F#", ".#.#FFF#.FFFF#FF.##F##...#F.FF#..FF.FF.FF.#..#F.F.", "###.##.FF#.FFF.FF.#FF###.F#.FFF#F.#..F....#FF#.F..", "F##F.FFF..#F#FF.FF#...FF.##.#.##FF####FF..F##F.FFF", "#.F.F..F..F#FFF#F.F#..FF..F..#.#..F#.##..F.F#FFF.F", "#.F.#..##.FF.####..FF.#..F#F.F.F####F.FFF.##.F..##", "#F.F..F#F#..F#.##.F.#$..##F#F..F.FFFF...##..#..FFF", "#FFFF.#.#FFF.#.##F...#F..F##FFF.#.#.#FF#FFF...F#F.", "FF..#.F#F.###FFF###F.##F...F.#F###F.#.FFF...F#..#.", "FF.##FF##F#.#....#.##..##...F.##FFFF...F##.#..F##.", "F.FF#FF#FF.F...F.#..F#FF..........F.###.#F#######F", "F##F.....F#F#.#F#.#...#...#.##.#FFF.###F#.#F.#F##F", "F##FFF#F....F...F.#.#F.F#.FF.FF##.FF#FF#..##FFF.F.", "FFF#.#F#.FF##FF.F##.F.#F#.F##F##F#FF.F#.F.#.#FFF.#", "F##FF..#..F..F#FF##.#..#F.FFFF###.F##FFF..F##F....", "#FF#FF##..#F..F##F#.##.F####.F..F##FFF..FFF.F.F#F#", "#F##FFF...##F#F#.F.#FF#.F..#F#F##F..F..##...#.F.#.", "#F..F#F.F##FFFFFF##F..#.##F..#F..FF##F#F#FF.F#FF#.", "#.F.F#...F.F.F##F.FF#.#.F..F...##..#.#.#.FFF.F.##F", ".F#FF.FF#FFFF##FF#.F#...#F#..#.##...F#F##FFF##.F#F", ".#.#..#F#F#FF##.....#F####...FF#F##..F#.FF#.F#FF##", "#FF..F...F#F##.F..##..#FFF#F###.F#F#FF.FF..F..FFFF", "....###.F..FF..#F#F#F##FF#.#F#F...F#FF.#FF.#F####F", "#..####.FF.#.FF#..#F.F.#.####F#.##FFF..#F..F..#..#", "F#F#.F.#.#FF#F#F.FF#F#...FF##.F#.##..#FFFF#F.FF##F", ".F#FFF..#..###FF#..#F#F###F.F#.#.###..#F#..#F#FFF.", "....#...#F##F.FFFFF##F#.FF#.FF.F#.F#F###.....##.FF", "FF.F##F.#F#..#FF.F##FF.#F...#..F#F.#FFF#.##.#F#FFF", "FF.#F.F#.#F#.##F##....#F.F#F#F##F#F.##FFF.F##FFF..", "##F###..F#.#F##F..F#.##.#.#..#..FF#..FF..F.F.F...#", "F.F.FF#F#.F..F...FF.F#..F.#.#..FF.#F.#.##F.##...F#", "#F.#.....#.F##.FF###F#F.F#...F.....F.#FF.#.#.FF##.", "#FFF.F.F..######F#FFFF#..#F.F.F......FF#FFF###.#F.", "#FF...F#F#.F#.##.FF.FF#...##..F..F#FF#F.#..F.F#...", "F.#.FFF.F#.#F#..#F.....#.#..#FF.##..F#..FF.F#.#FFF", "#....F..FFF.F#.##F##FF#F.#.FFF..#.F#FF##.###.FF..F", "###FF.F#FFF.#F........F.#.FF.#.F#.FF..F.#F##F####F" };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case25() {
    String[] maze = { "#F..#.F###.F##.FF#F..#.#", "#FFFF#..#.#..#.##.#F.#FF", "#F#FF#.F#.FF..#FF###..#.", "#.#..F#F.#F##F###.FFFF#F", ".F#..FF#F.###F.F#FF.#...", "###F#.###F###F..F##F.##.", "#..#.F#F#F........F###.F", ".#F.#.###.F#F##.#.F.##..", "F.##F#F##.F..F#F#FF.##.#", "F.F#.#F#F.FFF....#..F.##", "FFF#FF..#F###FF#####....", "#..##.##.#.#FF##F.##.#F.", "#.#....#FF.FF###...F#FF.", "FF...F.FF#F.F...F.####..", "#FF.##.#.F.F#.F##F#.#F#.", "FF.#F####F#F#.#.F.#.#..F", "###.F#..FF.F.F###FF.###.", "FFF##FF#F.FF####F..#.##.", ".FF.F.F..F..##FFFFF#...F", ".FFF##F..F.F##F.#F##F#F#", "FF$F#.###.F##FF##F##F#F#", "F###F#.F##.FF#..F.F#.FF#", ".F####F.#F.##F......FF..", ".#.#FF###....#F.FFF#F###", "FF#.FF#FF.F#....FFF##F..", "..FF#.###F#FF#FFF###F.#F", "..FF.F.FF#F..F#.F#...F#F", "..F.#..F.FF#F#...#F.###F", "F#FFF#...F#FF...F#.FF#..", "#F..#FF.#.##F#F###.##FF#", "#F#..F....F#.##.#F#..F..", "F.##F.##FF.#.F#.F.##F##.", "F#F.F..#..F##F####F##.FF", "#F.###.FF.F#.F#...#..F#.", ".#F#F#F#.#F##.F#.F##F.#F", "##FF.##..FFF#F#.##FF#F.#", "#FFFFF..#....F.###....FF", "F#...F#.F#F#FF#.##FF#F#." };
    assertEquals(1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case26() {
    String[] maze = { "#F#", "#FF", "...", "##F", "F.F", "FF#", ".F.", ".F#", "..F", "$.F", "#..", "FF#", "#F#", "FF#", "FFF", "F#F", "...", "..#", ".##", "##F", "##F", "F#.", ".##", "#FF", "..F", "#FF", "F#F", "#F#", "F##", "F.F", "FF.", "FFF", "#F.", "#.F", "#.F", ".#F", "FFF", "#..", "#..", ".#.", "##F", ".#F", ".#F", ".#F", "F.#", "#F." };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case27() {
    String[] maze = { ".F.##F#F#F#...F", "FF.FF.FF$#F#F.F", "F..##.#F#FF..F#", "#FF#FF...F.#.F#", "#.#.F..##F..FF." };
    assertEquals(1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case28() {
    String[] maze = {};
    assertEquals(3, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case29() {
    String[] maze = { ".#......", "#$......", "....F...", ".....F.." };
    assertEquals(5, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case30() {
    String[] maze = {};
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case31() {
    String[] maze = {};
    assertEquals(7, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case32() {
    String[] maze = {};
    assertEquals(3, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case33() {
    String[] maze = { "..", ".#", "$.", "..", "..", "..", ".F", "..", "F.", "..", "..", "..", "..", "..", "FF", "..", "#.", "#.", "..", ".F", "..", "..", "..", "..", "..", "F.", ".F", "#.", "..", ".#", "..", ".#", ".#", "#.", "..", "..", ".F", "..", "#.", "F.", "##", "..", ".." };
    assertEquals(8, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case34() {
    String[] maze = {};
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case35() {
    String[] maze = {};
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case36() {
    String[] maze = {};
    assertEquals(6, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case37() {
    String[] maze = { "#....", ".....", ".F...", "#.#..", ".....", "....#", "..FF.", "..FF.", "F....", "##.#.", ".....", ".F..#", ".....", "....#", ".....", "#..#.", ".....", "..F..", "#....", ".F...", ".#...", "...#.", "....#", "F....", ".....", "F..#.", "..F..", "..##.", "...F.", "F....", ".....", "..##.", ".....", ".....", "#....", ".....", "#..$.", "#.#..", ".....", ".....", ".F...", "##.#.", "..F.#", "...F#", "FF...", ".....", "FF.FF", ".#...", "..F.F" };
    assertEquals(8, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case38() {
    String[] maze = {};
    assertEquals(24, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case39() {
    String[] maze = {};
    assertEquals(16, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case40() {
    String[] maze = { ".....", "#....", ".....", ".....", ".....", ".....", ".....", ".....", "...#.", ".#...", ".....", "#..##", ".....", "##...", ".#...", "...#.", "#....", "...#.", ".....", ".....", "#..#.", "...#.", "#...$", ".....", ".....", ".#...", ".....", "....#", "#....", ".....", ".....", ".....", ".....", "#.#..", "...#.", "#....", ".#...", "...#.", ".....", ".....", ".....", ".....", ".....", "....." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case41() {
    String[] maze = {};
    assertEquals(27, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case42() {
    String[] maze = {};
    assertEquals(17, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case43() {
    String[] maze = {};
    assertEquals(14, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case44() {
    String[] maze = {};
    assertEquals(22, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case45() {
    String[] maze = { ".....#..#......#.", "#.#..........#.#.", ".F.............#.", "..............#..", "..........#......", "..............$..", "...........###...", ".....#..........." };
    assertEquals(21, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case46() {
    String[] maze = {};
    assertEquals(14, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case47() {
    String[] maze = { "....", "#...", "....", "....", "....", "....", "...$", "#...", "....", "....", "...#", "...F", "....", ".##.", "....", ".F..", "....", "F..F", "....", "...#", "....", ".#..", ".#..", "....", "....", "...#", "...#", "....", "....", "...." };
    assertEquals(14, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case48() {
    String[] maze = { ".#.#......#...#....##.#..##.", "##.....#...####......#.F#...", "..#..##.........#.###.......", "....#...#.....##............", "..##.#....#..#..#.#..#...#F.", "#.....#.#.#..#.#..##.##....#", ".#.##.#....#.#...#.#...#..#.", "...#...#.......##.#...#.##.#", "#......#.#..#.#.#.#...#.#..#", ".#.F..........#...#.....#..#", ".#.......#..#.#..##..#.#...#", ".........##..##....#........", ".#..............#......#.#.#", "..#.#.##.#.#.....##........#", "##...............#......#..#", "...#...#.....##.###...##....", "...$.#.#..#..#...####..#..#.", "..#.........#.#.#....#...#..", "..#..#.####F#.....#.....##..", "...#......#....#..#.#.#.#...", ".#.###.........#...#........", "...............#.....#...#..", "......##..#..#.#............", ".##.....F............#.....#", "#.......#..####.#........#..", "#...#.#.##..................", "..###..#.......#..........#.", "#....#...#..#.#...###.#.....", "...#...#..#......#..#...####", "...#..##..................#.", ".#.#....#..##.#..###..#.##..", ".#...#...#..#.......##..#...", "#..##...............##..#.#.", "......#........#....#.##....", "##.......#...###..#F...#.##.", "....#.#.#.##.........#..#.#.", ".#..................#...#...", "#.##..#......#........##.#.." };
    assertEquals(12, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case49() {
    String[] maze = { "...#F.......#..#..##.#......", ".#.......##......#..........", ".....$.........#.#..........", ".##....#...##.......#.....#." };
    assertEquals(29, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case50() {
    String[] maze = { ".....#..#..F....#...#..##......#.", "....#......F#.......#..........#.", "#..###...#.#.......#.###.......#.", "......#..#.F.#....#...#.........#", "..#.....#.$...........#.#........", "...#.#....F.##................#..", "#....F.#.#..#...............#....", ".##.#.......##....#......##...#.." };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case51() {
    String[] maze = { "..##........##.....#.", "#.####........#.##..#", "........#..#.....#...", "...#....#....$#......" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case52() {
    String[] maze = { "...#.....F#....#.##.#..##....##.##...", ".#.#.#..##..#...#..#.......#.##..#..#", "...#.#..##......$..#..#.#......##.##.", "#..............##.#..#.#...........##", "...##.#........#...#.#.....##..#.....", ".....F#....#..#.......###.........##.", ".#...#..#......#....#.#.#.#.#........", "....#.#..#..........##.........##....", "#...#..##.#.....#...#..#....#....#..#", ".......#..##..#...#.#............#...", "#.#...........#.#.....#.......#.#.#..", ".....#....###....#.........#..#...#..", "...#.#.....###F.#.#...#..#.#...#....." };
    assertEquals(32, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case53() {
    String[] maze = { ".........#..#......##..", "##.#..#..#....$....#...", "..#...##.....#.F.....#.", "..##.#..#....#.....#...", "#......................", ".#.......##......#...#.", "..#.....#.........#....", "F##.##..#....#..#..#...", "....#...#F.#......##...", "##...##.....##........." };
    assertEquals(14, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case54() {
    String[] maze = { ".#.##.#####.....#.", "##..#....#.##...##", ".#.......######.#.", ".#...........#....", ".#.$.##.#.#.#.#..#", "...#.#............", "..##.#.#...#.#.#..", ".........#..##...." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case55() {
    String[] maze = {};
    assertEquals(25, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case56() {
    String[] maze = { ".....#...........##$#....#.....#.", ".....#..#....#.............##.#..", "..#......#...#.###....#..........", ".#..##..#..##.#...#......##.###..", "..#.#.#....#.....#....#.#..#.##..", "#..#...#.#.......................", "..#.#...#...##...#.....#.....#.#.", "...#.#.....#.....#...###.....#...", "...#...###.......#........#..##..", ".........#....#........#.#.......", "...#.......#.#...##...#..#....#..", ".....#.###.....#..####.#....#....", ".##...##..#.....#....#...#.#.....", "##......#....#...##..#.#..#.#....", "..........#.#.....##.....#...##.F", "............#.##....#...#.......#", "#..###....#.........#...#..#.....", "......#.##..........#...#..#.#..#", "....#.#....#...#................." };
    assertEquals(49, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case57() {
    String[] maze = { "...#....#.....$##.......#.#.#" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case58() {
    String[] maze = { "...###...#..#..F.#.....", "##F.#..####F#####.F#..#", ".#.#..#.#F.###F##....##", ".#F#....###.#..##F###.#", ".####.#.##..F.###.F##.#", "#.####.#F...#.##..#.##.", ".##FF....##.#.###F#F#.#", "#.###....#...#F##F#...#", "########.##.#.#.#F##.F.", "##...##.....#.#####.#..", "FFF##F.#...F..#.#..###.", ".#.#####.##F.#....F#.#.", "###.##.#.####.#..####.#", "##.#.FF.F.F.#..#....F##", "#####.###$.#...#..##..#", ".F.#.#.F.#.#.#F##...F#.", "#.#F#.#.#######.##FF..#", "##.#...#.#...####.##F##", ".###.F#..##.####.#####.", "..F..####.##FF##.###...", "F#..#.###.##.###...####", "#..##########.####...##", "#.####.##.F#F.#.#F.##.#", "...##.FF#.##..#.#..####", ".##.#..F....####.#..F#F", "##F.F.##.###.FF##.#.#..", "...####F#F##...##.##.##", "#F.F###F.#.F.###.##..F#", "F#####...#...#.###.#.##", "F.#.#####..#..#.###..##", "##.F#F##F##.##F.###.###", "F#.#F..#...#..F#.#...##", "#.###.#..#.####.FF...F.", ".#.##F###.#..#..##.#.#F", "......####..#...FF###.F", ".F#F#F###....###..#####", "..##..#F#F#..#F.#.####.", "FF#..#F#.#.#.#.#.##.##.", "...#..#F###.#.F#.#..###" };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case59() {
    String[] maze = { "..F.###..#.#F#F#.#.#F..###...#.##.#..", "###F..#####..#FF..F.##.#.#.F......###", "F##F..#.#.F#.F.F##F.#.#####.F####...#", "#F.#...#########F.#..#..#F###.######F", ".F.##.##F..#..##.###....####..#.#.#.#", "#F...##..####F....#..#...##.#.F#FF.#.", "F..#.##F.##.######.....F#####F##F.#.#", "#F.##...#.###.###..#..###..#.F#...##.", "F#######F.#.#..##.####...##.......#..", "##..####...##.....#.##.#####F..#F##F#", "...FFF..##..F###F#.F#.#.F#...#..F###.", "FF...F#######.#....##FFF#F.F##F##.##.", "...#...#.#.#F###.##.##.....#.F.#..###", "#.#.#.##F.F#....#F.....####.###F.#.#.", "..##.##.#F##F#.##F#.##F#.###F..#..###", ".F#..#.#...#..##.#.##F#...##.####.##.", "........#####.#F###...F.#.#...#..#..#", "#..#.#F#....###.#.##...#####..#####..", "##..#..F...#..##F#.#.#..##F.F#..#F#..", ".....#.##.##F.##F#..#F.#F...F###.F#F.", "##F##F.###..####F#.F.##.F..#.F#....##", "###...F#######.F##.#F###..####...F..#", "###.##F###.......F#.##.#.F.#FF###.#.#", "##.F.#F.##..#.#.#.....F.##..F.#####..", "#F..#...#.##F#..#F.#.###..#.#......##", "..##F.##F##..##.#F##..F####.###.##..#", "F#######..#.###...F##.###...###.#####", "##.F...#...F.###...##F#####.#.#.##$..", "###.#..#.F#F#F#####..##.##...F....###", "##.#F.#..#.F.#..##F..#.#F#F...######F", "#.##.F..#...#......F###....##.#..#.##", "....#F.#F.##.F##..F.#..#.....F.#.#F..", "..##.#F...#..F#....#.#.#####.##.##.F#", ".F...F#.#.###.F#..#...#.#.#.......##F", "####F.###FF##.#.#.###.#F#F##..###.#..", ".F#..#F#....##...#.####..#..##.##..F.", "##..F.#F##FF.F.#.#....#..#.####...F##", ".#.##.F.F##.F...###..####....########" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case60() {
    String[] maze = { "...####.##....####.#..F#F.#..##", "#.#..###.#.##.####.##..#..#####", "....#.#.####.F#.#..##..#F##.###", "##...#....##..#.##F#.#.#F##....", "FF##.#F#.#...###..#.F#F#.######", "##..####.....###.#.####.###.F.F", "####.####F#####....#.#.#F...#..", "###.##F.#..##F..#.F#..F#....$##", "...#.####.....####...##.#...#.#", "..F#.#..#..##.###.#.#F...##....", ".#....#.##.#F#.####..#...#.#.##", "#.####F...##F#.#F.#.##..#...###", "..#...#.##.#.##...##..##..##.F#", "#.##.##..#.#..FF...####...###.#", "F..##..###...#..#.###.##.#.#...", "###.##.###.F..#F..##...#.#.#.F#", ".#FF.######F##....#..#FF#.##.#F" };
    assertEquals(8, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case61() {
    String[] maze = { "##.##..#..###...#F.##", ".....#####.#..#######", "FF###.##....#....####", "#.#..####F###..F###.F", "...F.#..#..#..FF##.##", "#.#....##.F#...#####F", "F.F#..##F####FF###.#.", "####.###.F#.F#.....F.", "....F##FF####..##F.##", "F#...#.#.F.###.#...##", "#.F#.....#F#..#######", "##...###.###F##.#.###", "..#..F#...#.###.#....", "########...#..####F#.", ".#.##F#####..#..#.###", "###.#.#...####..#.###", ".#...#F.#F.F.F##.F###", ".F.####.F.#.##..F.#F#", "#########...#.###F##.", ".##.#...#...F#.#F##.#", ".##.####.F.#.##..F###", "##.#.#F#####.#....###", "##F....#.#.#F###.F#.#", "#F##.F#F##..F#.####..", "..##.#.F.###.###FF###", "F#########.##F#..F.##", "##.##F#.#F#F#..F..###", "####.####..##..#F.##.", ".F.#.###..#..##F.###F", "....##...FF..###.##F.", ".###.#...#.##........", "#.#....#..##.#.#.#.##", "#.###..##.#F.##.####.", ".#.F.#.F##.#.##.#.#.F", "#FF...####F#...#F.##.", "######...#.#..##..##.", "##F##..F.F#.##.....F#", "..##.#.#..#.#.F.##.##", ".....F#F#....##F##.##", ".#FF.######....#.#.##", "...#F##..##..F##F.#F.", "F.#####.###...F.##F#.", "#.#..#.#####..##F##.#", ".#F#..#...FF.........", "#..#.#F#.##F.....##..", ".#...F#...##....#.#..", "#.F##..###.#.#.$#.#.F", "F#####F##.##.....#.##" };
    assertEquals(7, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case62() {
    String[] maze = { ".###.##$##.##", ".#...####F#.#", "########.....", "#...#####.F.#", "###.##.##F###", "..###########", ".######......", "#..##...###.#", "#..#F#...#..#", ".##..#F#F.#..", "..F#F##.#.##.", "..##...######", "..F.F#.#####.", ".#..###.##.#." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case63() {
    String[] maze = { "...###########...##..#...#", "#F..#..$..######.#...##.#.", ".F...##.###..#######.F#F##", "#.###.#.#.##F.....#F...###", "F#.#F##.#F.F#F.###...#..##", "...##F#.#.##....#...#.###.", ".##..##.F.FF###.#####..##F", "F.###.FF##.##F#.#..##.#.##", "F#..##.F.#...##.##..F#.###", "##.###.#F###.F.##.#.F...F#", "#..F#####.#.###.######F###", "F#.##.#.#FF.#...##.#F..#.#", ".#.F.#.#..#..#.##..#####.#", ".F##.F.###..#.....#.#.#...", ".###.......#.##....F#..###", "#F###.#.#.F##.####F.....F.", "F#F##.###.#F.#.###.#..#.##", "...F.F..#.F.#.##.##.F.#F##", "##F..##F#..##..######...#.", "#..##...##.#F##.##F#.##.##", "#####..#FF##..#.##F.#.####", "#F..#.##.F##.F...#.#.#F.#.", ".##.#.F########F#..#..#.##", "#F#.#...##.###.##..#.#.#.#", "####F#..F......#...FF#.F..", "###.#.#.#..F.##F.###.###.#", "F###F.#####...#.FFF###F..#", ".F#.####..#..#..#.##F.....", "####...#######.F.F..#..#.#", "#.#.#.#F#.F..FF#.###....##", "##.#.#.##.##...####F#.F##F", "##.###F..#.#.#.##....#F##F", "#.#####....##.F....#..#.##", "..#.......F#.F.###.#.#.#.#", "....##.#F#F..#...#.F##.#F.", "...#########F#######F#.#.#", ".##.#...##.F###....#F##..F", "#.#.#.#.##...#.#..##.#F##.", "####F##F...###F#....#...#.", "..##.##F#.#..##F####..#..#", "F###.#....#...#F#.F##.####", "..###.##.##.#..####F#F#...", "#.######.##FF....##..##..#", ".#.F#F.#F..#.....F#...##..", ".##.#...##..##..#.#...####", "###.##.#..##..##F..#.##.##", "#...####.##.#.##.#####.#.." };
    assertEquals(8, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case64() {
    String[] maze = { "##F#F..#...$##..###..#.." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case65() {
    String[] maze = { "..#F##F....###..FF#..#....#.###.#..#.####.###.#.", "###..#.#...F...##.##..#....F#.##F$.#.##.#.#...##", "###...#F#F###..####.###...#.####.###.##..#.###.#", "......##.FF#....#..###F#..#####.#.#..#####.#.##." };
    assertEquals(3, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case66() {
    String[] maze = { "..##..#.##...####...###.#####..$..F.", ".#.......#.......##.#..#.####.#.#..#" };
    assertEquals(6, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case67() {
    String[] maze = { ".###.....F##.#F##...##.###.FF##.#.#F.##.", ".#.F....#.######....###.##..#.#####F##F.", "..#FF##...#####...###F###....##.FF.####.", "..#..F#.F#..#..#F##..##.F##.#.F##....#F.", "####.###.FF$#F###.#########.####.##.#.##", "#..#..#...#.###...#..###.##..#F.##F###..", "######.F.##..#.#FF....##.#F.....#..##F..", "#F#.#..###.F.#..#.#..#..#F#.#F#F.###...#", "###.######.#..#.....##...#..#.##.#.F#.##", "F###F.#F.###....#F##FF########.F#.##.#.#" };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case68() {
    String[] maze = { "##.#", "...#", ".##.", "#...", "##..", "#.##", ".###", "##..", "#.#.", ".#.#", "....", ".##.", "##..", "....", ".##F", "##.#", "##.#", "#.#.", ".##.", "#...", "####", "..##", "....", ".###", "##.#", ".#.#", "#.$.", "..##" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case69() {
    String[] maze = { ".####.###..#", "#.####..#.##", ".##.####.#.#", "#..##.#....#", ".##.##..###.", "############", "..#.....####", "...#$.....#.", "..##.#..##..", "##..##.###.#", "#..#.##....#", ".F.#..#.#..#", ".##..#.#.##.", "##..#.#..###", "###..#.#.###", "#..#....#...", "#......###.#", "###.########", "###..#...##.", "#.#.#...#.##", "##........#.", "..#.##..###.", "...##.#.##.#", "....#..#..##", "..########.#", "##..##.###..", "##.#.#.#...#", ".#..###.....", ".....#...#.#", "###.###.##.." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case70() {
    String[] maze = { "#.#..#..###..##.#.##..#", ".......#.#...#...#.####", "##..#..##....####.##.F.", "#..#.##.F##.##.....####", "...#.##.#..#.#.##..#.#.", "#..###.#.###..#...##.F.", ".###..#.##....###..$#.#" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case71() {
    String[] maze = { "##.#...###.#..#....#####.#..#####..####..", "##F##.#.#...#..#..#.#.#.##..##.###.#.#.##", "##.....##......#.#...##.#.#.#.##..#.#...#", "##.####.#..#.....#.###..#$...###.#...##..", "#.#..F..#.##.#..##.##F.#.###...###.#.####", ".#..#.##.###..#.##.#.#..###..#..#.##.#.##", ".#.##.###.#.##.####...######.#####..#.#.." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case72() {
    String[] maze = { ".###..########....#..######.#.", "..#..#..#.#...##..###.##.####.", ".#...###.###..##.......#..#.#.", "#.#.##.......#...#.....#...#..", "..##.#..#$#.##....#.#.##.#####", ".#.###.#.##..#..##...#.#####.#", ".###.##.###.####.#..#...##.#.#", "#...#.#######.###...####....#." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case73() {
    String[] maze = { "##..##..##.##.#", "..##.#...##.#..", "#.F#.#...##..#.", "..###.####.#...", "...#.#.$#.###.#" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case74() {
    String[] maze = { ".##..###", "#####.##", "###.#..#", ".##.#..#", "##....#.", ".####..#", "#..###.#", "###.....", "..#.....", ".#.#####", ".##.##.#", "##....#.", ".#..#.##", "##.#.##.", ".#..#...", "##..####", "#####...", "#.#####.", "#.#..##.", ".#....#.", ".$....##", "#######.", ".###.#..", "..##.###", "###...#.", ".#....##", "...##..#", "#.##.#.#", "#.#..#..", "#######." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case75() {
    String[] maze = { "#....#..####.##...####.##", "#..#.##.....#.#.#.#.####.", "##...#.#.##..#..##.#.##.#", "$##...F#..###.##.#.##.#.#", "##.#..####..#....#...#.##", "#.##...##.##...##.....#.#" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case76() {
    String[] maze = { "$..#....#.#." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case77() {
    String[] maze = { "F##.######.##F.", "####...#...#.##", "#...###.######.", "$##....##....#.", ".#.########.###" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case78() {
    String[] maze = { "..........F.F...#..F...F...........FFF.F....#.....", "F...#..........#.....#..F......#.F.#.....F...#....", ".....#.F.............................$..FF........" };
    assertEquals(3, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case79() {
    String[] maze = { "..", "..", "$.", "..", "#.", "..", "F.", "..", "F.", ".#", ".F", "..", "..", ".#", "..", "..", "#.", "..", ".F", "..", "..", "..", "..", "..", "..", "..", "..", ".." };
    assertEquals(8, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case80() {
    String[] maze = { "...F....#.", "F..#..#...", ".......#..", ".F......F.", ".....FF...", "..........", "......#...", "...#......", "....#.F...", ".....#...#", "#F....FF..", "......#...", "...#......", "...##.#.F.", ".....#...#", ".F.....F..", ".........#", "...$..#..F", "......FF..", ".....#....", "......F...", ".........#", ".F........", ".........F", "......F...", "#.F....#..", "F...F.....", ".........#", "...#..F...", "...##....." };
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case81() {
    String[] maze = { "F......#...#.......#F#.....F..........#..#FF.", ".F...##.............F#....F#....#.......F#...", ".#....F..#..F#.......F...F...F.#.F....#.#....", "#.##...F...#.....F.##.#.#.......#............", "...F.F...F..........#F......F.......#.F......", ".F.F#.F...........#...........#......#.F.....", ".....#.....#........#..#............F#.###...", ".#FF..##..F..#....#................F.........", "#.....#F....#..F.......................F.....", "..#..FF.............F.....#F.....F...#.....#.", "......F.....#..F.F#F.#F.##...F.............#.", ".#...F.#F.F...#........#F..F#F...#.##....#...", ".......#.F...........F....F........##.......#", "#.......#..##..F..#F.F....#..F........#F...#.", "#..F.....F..F.F.#...#..F...F....#.F....F...#.", "...#........#..#.FF............F....#.#......", "....F.FF.......F..#...F.........#......F.....", ".#....#...##...#...F.F....#F..........F......", "....#.F..F....F......#FF..#......#.#F..FF....", "..#.##.F......#...FF...#.............F..#....", "....F..##..F..F.....#..........#..#.....#F##F", "...F..F.#..F..F.F...#....##.#.......F..F#....", "#..F#...........F....F.F#................#...", "F#......#....#..F.##...........F..FF..F.#..F.", "..#...F..F.F#..F.F.........#.#...#.F#....F...", "F..#.....FF....F..F......#..#.....#......###.", ".##.F...FF........#......#F...........#......", "..#.......#....#........#..#......F........#.", "#..FFF........F..###.#........F.....FF.#..F.F", "...F......F..F...#FF............F.FF$....#...", "..##.F.F........#...#..#.F..##.FF............", "...#......F.......#.....F#...F...............", ".........FF..#...##...........FFF.#..#.......", "....................#.F..F.............#.....", "F......F..#..F..#....F#...#.#............F..." };
    assertEquals(5, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case82() {
    String[] maze = {};
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case83() {
    String[] maze = { ".#.", "...", "..#", "..$", "...", "#..", "...", "...", ".F.", "F..", "..F", "#..", ".#." };
    assertEquals(9, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case84() {
    String[] maze = {};
    assertEquals(5, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case85() {
    String[] maze = {};
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case86() {
    String[] maze = { "FF....F......#...F..#..............F.....#......", "...#.##..#...F...........#..............##.F...F", "..##....#.....F....F.......F.......#......F.#.F.", "...#..#F...................F.......F#....#..F#..", "..F.......F..F.F............##........F#...#..F.", ".....................#..F.#.......#.............", "#.....F..F#F..#.....##.....F.....#.....F#.......", ".......F..F...#.............F...#..#..#.F......F", ".........FF...#..F......F.#..........###........", ".......F.......#F......#..#F...F.....#..##....#.", "...........F.#.FF...F......F........#...#.......", ".F......................F#....#..F..............", "..........F....F..F.#...F..#..#...........#F...F", "............#......#.F.....F..F......F.#..#.....", "....#........F..F.F..#......#....#F#...........#", "..#.....F#..........#....#.......##.........F..F", ".....F...F...FF......#.#.................###..F.", "...#..........F.F.#.....#......#.##....#.......F", ".....F.F..F.#.F.#..............#......F..F..F.#.", "..F...F..............F.........F...#............", ".......F#........#.......#.....F................", "...#....F...FF......#..F#.F#..F#..#...F.#...FF..", "...F.F..FF......F..#...F...#.............F..F...", ".......$......#F.............F..FF.F.......F....", "..#....#F.#..#...........#.............#...#.F.F", "F...F..F......#..........F.F......F.#...........", "...........#......F.F..F...F..F.#...F...F...F...", ".F............F.................#.#F..#....#F.#.", "..F.#..F....F.......#..F....#...F........#...FF.", ".F#..F.F...#.#.......#.FFF.#..#.......F.F......F", "..#.....F....F.F.........#.F.F.##.F........#F#..", "#..#.#....#....F.........#.F..........F.#.....F.", "..................F.#FF..F...F....#.....#F.F..F." };
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case87() {
    String[] maze = {};
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case88() {
    String[] maze = { "..............................................", "#..F........#......#.....................F....", "...#.#.......##.......#...............#.#....#", "#.....#.....F...#.........#.#.#.....#....#.#..", "............#..........##.....#.............#.", "..............#.#...#........#........#..##...", ".....................#...............#........", "...............#....#...#....#............#...", "..............#.....F..........#..#...#....F.#", ".........#.............................F......", ".....F....##......#.....#....#..#.............", ".............................#........#.......", "........#..............#.........$............", ".#..#....................................#....", "....#....##................#.#........#.......", ".......................F#.....................", ".............#.........F.....##...............", "....#..#......................#..#............" };
    assertEquals(13, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case89() {
    String[] maze = {};
    assertEquals(13, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case90() {
    String[] maze = {};
    assertEquals(2, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case91() {
    String[] maze = {};
    assertEquals(11, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case92() {
    String[] maze = { "..", "..", "..", "..", ".F", ".$", "..", ".." };
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case93() {
    String[] maze = {};
    assertEquals(16, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case94() {
    String[] maze = { ".....##...#...$..........", "....#.....#..............", "......#....#.............", "#....#...................", "...........##.....F......", "....##...................", "....#.............##.....", ".....#..#...........##...", "...................F...#.", ".##............F.........", "....##.#.....#..F..#.....", "...............#......#..", "...#.........#..#........", "...#.....................", "...................#....." };
    assertEquals(24, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case95() {
    String[] maze = { "..........##....", "......#.#.......", "..............#F", "..........#.##.#", "##..............", "......#.........", "#...............", "......#..#......", "....#..#...#....", "...........#.#.#", "..$........#.#..", "..#.............", "..........#.....", "..#............." };
    assertEquals(28, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case96() {
    String[] maze = { "F.............................##...", "...#..#.#...#.F.............#......", "..........#...#....F.....#.....#...", "..#........#...F.#...$...##........" };
    assertEquals(19, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case97() {
    String[] maze = {};
    assertEquals(10, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case98() {
    String[] maze = { "..#...##.#", "..#...##..", "....##.#.#", "#.###.#...", "....###...", "####..###.", ".#.###....", "#.#...#.##", ".#..#.....", "#..#.##...", "..###..###", "..#.......", ".#.##.##..", "#.#..#.##.", ".##.#..#.#", ".#.#.....#", "..##...#..", ".#.#...#..", "....###..#", ".F...#....", "#..#.#.#..", "....###.#.", "##..#...#.", ".......###", "##.##.#.##", "##.#.#...#", "#.#..#.#.#", ".##.#....#", "........#.", ".....##...", "#.....##.#", "#..#......", ".#...#.###", "..######..", "..........", "#....####.", "#F...##.#.", "...##..###", "#.#..#.#..", ".#.#......", "......####", "##..#....#", "$.##..#.##" };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case99() {
    String[] maze = { "#.#....##.#.#..#.#..#....###.######.", ".#.##.##..#.#..##.#.......###....#..", ".###....#...##.###..###.##..#.###..#", "#.....#......##...#.#.#.##..#.#F...#", "##...##...#.#.#...##...#..#.##...#..", "##.#....##.#.#####.#.#.#....##.....#", "..##.#....##.#...##.....######.F#...", ".####.#F.##.#...##.##.##..#.#F###..#", "#...##F.#.#..#$#....#.....F##.#.##.#", "#.###.F#...#.###...#.#.....#.#.####.", "#.#.##.######.#..#.#.....#....##.#.#", ".#..###.#.#..#....#..####..##.#..#.#", "...#..#....###..#...#.#.###.#.####.#", "####...##....#....#......F#.####...#", ".##..#..##...#.##.#..#.#...#..##.#.#", "#.##...#..#.......##...#....#..##..#", ".#.##.##..##.###...###.#.#.#....#.#.", ".#.#..#...#.....#..#..###..#....#.##", "#F.#.....#.#.....##......#.#.#..##.#", "#.#...#.#.#.......###..#.#...###.###", "..#..#.....#.####.###.....####..#.##", ".#.#.#...####..###.#.#......#.....##", "..#..#....#.....#.##.##.....##.....#", ".#...##.##..##..#..#.....#.#.#.#....", "......##.#.#...###.##......#..#...#.", ".....#....#......#.##..##..####.#...", "....##..###....##....##.......#.....", "#..#.#..##.###.#..#.#.#.#.#..##....#", ".....##..##.##.#####...#.####..#...#", "#.......##...#..#.###..#.##.###.....", "...####......F......##.#...........#", "...#.##........#.#.#..#####.#...#.##", "##.##.........###.##....###...#.###.", ".#...#...#.....##..#.#.#..#....#.#..", "...##.#.....#####.#..###...#.#...##.", "..#..#####.....#..###......F..##...#", "####.##..#F#..#........#..##..#.#..." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case100() {
    String[] maze = { ".#....#...##.###.#.....#..", "#.##.#####....#.#..#..####", "#.F...##..........#.##....", ".##.....#..$.#.....##.###." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case101() {
    String[] maze = { ".##..#....#..#.##........##..#..##..#####..##", "#.#.#..#F.....###.###...#..#.##.........#....", "..#..#...##.#..##...###..##.#..#..##.#.#..##.", "####..####..##...#..#.##..F.#..###..#.#.#..#.", "#..####....#..#...#.....#...####....#.#..#..#", "...###......##.###...#.#.#...#..#....#..####.", "#.#..##.#####.##...#.....#....##.#...##..#...", ".##..#.#####..F#...###.....#.####.#.#........", "#.#..#.#####..####.........##.#.#..#..###...#", ".....##.#...###..##.###.#.....#.#..#.###F#..F", ".#........###.#.##..####.#.......#...##.##.#.", "##..#.##....##.#F.#..####....###...##.##....#", "##.#.#......##.#..#.#....##..#.......#..#...#", ".....##.....#...#.#....#....####....##..###..", "#..####..#.##..###.#...##...#...#.....####.#.", "#.#..F#.##.#.###..#.##..#...#.#...#..#.#####.", "....#.##.#...##.##.#.#....#.#......##.....##.", "###..#..#.##..#.#.#F#...##.##.#...#####...##.", ".#####.#....###.#..#.######...##..##..###..##", "..##.###.#...##F..##..#.#..#..##...#.....#...", ".#..F.#..#...#.#.##..###.......###.#..######.", "..#.........#.#.#..##.#...........#.##.#.#...", "##.##...#.##...##.##..#.#.#..###...#.##..#.#.", "##..#....#.#..##.#..###..#.#F.#..#..#....####", "...##.##..####.#.#.#......##..#..#...#..###.#", "#.##...####.#.####.#......##..#.##......#...#", ".#.#F.##.####...###.###.##....#....#..###..#.", "..#.###...##..#F....#.#...##..#...#.......##.", "###..#..#..#......#...#....#...#..#.#....#...", "#.#..####......####..#...##.#..###....###.#..", "#..##.#..#..#......#...#.#...#####.#.#.##.F##", "..##...#.##....#...#.#..#...#..#....#...##F..", "#.#...#.....##.#..#.#..###.##.##...#...#.#..#", "####.#..##.##.####.#...#.#.#...####..###....#", "#...#..#.##....#..#..#.#.#.###..#....#.#.####", "..##..F...#...#.##..##.#.#.#...##.#..#..#....", "##....#...#.#...##..##...#.###.#.....##..###.", "#.......##....#.###..#....#...#.#.#..####....", "###.#......#.....#.#.#..#.###.#.....##.......", "####.....#..###.#.....#....#...F#........#...", "...#.#.#.....##....###.#......#...#....#....#", ".#####.#.#...#.###...#..#.#.#.#.#.##.#.#.#.#.", "#..#...#..###.###...#.##.##.######.....#..#.#", ".###.#........##...#.##..##.#.##.#..#...#..#.", "...#.......F#.#..#..##..#.#.########.#.#..#..", ".###.#.#.##...#.##.#.##...#...........#.##...", "##..##..#F...###..#...#....#.....##......#.##", "..###.#...#.F#.#...##..#..$.#................", "#.#...##.#....F.###....#.#.#.##F.#...FF##.##." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case102() {
    String[] maze = {};
    assertEquals(25, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case103() {
    String[] maze = {};
    assertEquals(42, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case104() {
    String[] maze = {};
    assertEquals(13, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case105() {
    String[] maze = { "..#.#..#.#..##", "......####F###", "...#......#.##", ".....#..#..#..", ".###.#....##.#", ".##...#..#.#..", "#......#..##.#", "#.####..###...", "#####.##$##...", "#####.##...#.#", "##...##..#..#.", "##F#.###.#.#..", "###......##...", "#..##.##.#....", "###..####..##.", "###...###.....", ".....#....####", "...#..##.#....", "..#....##..#.#", ".###.##..#.##.", ".#....####.##.", ".....#..##.#..", "F.##.#........", "###..#..#.....", "#.###..##..##.", "#.....##..#.##", "##..#...#....#", "#...#..#.#....", "#.......#.##..", ".##.#..###..#.", "#..##.##...###", "#.#.......#...", "###....####...", "###.##.###.#..", "...#....#..#..", "###..#.#.##...", ".....####.#..#", "###.###.##.###", "...#..##.....F", "##...##.#.....", "#....#....#...", "#.#.#####..##.", "....#...#.##.#", ".F...##.#.#.#.", ".##....#..#..#", ".......##...##" };
    assertEquals(16, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case106() {
    String[] maze = { "#..####.#", ".........", "..####.#.", "##.......", "#.###....", "....#..F#", "###....$.", "#..###.#." };
    assertEquals(9, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case107() {
    String[] maze = { ".###.##.###", ".#.....##..", "..##.#.#...", "#..#..#...#", ".####..##.#", "..#...#.##.", "#...#.#..##", ".##..#.#...", "...F#.....#", "...#$.#...#", "..##...##..", "....###...#", "##.#..##..." };
    assertEquals(-1, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case108() {
    String[] maze = { "F..", ".$.", "..." };
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case109() {
    String[] maze = {};
    assertEquals(510, mazeonfire.maximumTurns(maze));
  }

  @Test
  public void case110() {
    String[] maze = { "F...", "#.#$", "..##", "...." };
    assertEquals(4, mazeonfire.maximumTurns(maze));
  }

}
